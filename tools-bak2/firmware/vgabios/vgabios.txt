36875                                           19 ceiling result
36875                                           19 ceiling result
36875                                           19 ceiling result
36875                                           19 ceiling result
00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 void dispi_set_enable(enable);
00012                                           !BCC_EOS
00013                                           ! 6 Boolean vbe_has_vbe_display();
00014                                           !BCC_EOS
00015                                           ! 7 void vbe_biosfn_return_controller_information(AX, ES, DI);
00016                                           !BCC_EOS
00017                                           ! 8 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00018                                           !BCC_EOS
00019                                           ! 9 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 10 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00022                                           !BCC_EOS
00023                                           ! 11 void vbe_biosfn_set_get_palette_data(AX);
00024                                           !BCC_EOS
00025                                           ! 12 void vbe_biosfn_return_protected_mode_interface(AX);
00026                                           !BCC_EOS
00027                                           ! 13 typedef struct VbeInfoBlock
00028                                           ! 14 {
00029                                           ! 15    Bit8u VbeSignature[4];
00030                                           !BCC_EOS
00031                                           ! 16    Bit16u VbeVersion;
00032                                           !BCC_EOS
00033                                           ! 17    Bit16u OemStringPtr_Off;
00034                                           !BCC_EOS
00035                                           ! 18    Bit16u OemStringPtr_Seg;
00036                                           !BCC_EOS
00037                                           ! 19    Bit8u Capabilities[4];
00038                                           !BCC_EOS
00039                                           ! 20    Bit16u VideoModePtr_Off;
00040                                           !BCC_EOS
00041                                           ! 21    Bit16u VideoModePtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 22    Bit16u TotalMemory;
00044                                           !BCC_EOS
00045                                           ! 23    Bit16u OemSoftwareRev;
00046                                           !BCC_EOS
00047                                           ! 24    Bit16u OemVendorNamePtr_Off;
00048                                           !BCC_EOS
00049                                           ! 25    Bit16u OemVendorNamePtr_Seg;
00050                                           !BCC_EOS
00051                                           ! 26    Bit16u OemProductNamePtr_Off;
00052                                           !BCC_EOS
00053                                           ! 27    Bit16u OemProductNamePtr_Seg;
00054                                           !BCC_EOS
00055                                           ! 28    Bit16u OemProductRevPtr_Off;
00056                                           !BCC_EOS
00057                                           ! 29    Bit16u OemProductRevPtr_Seg;
00058                                           !BCC_EOS
00059                                           ! 30    Bit16u Reserved[111];
00060                                           !BCC_EOS
00061                                           ! 31    Bit8u OemData[256];
00062                                           !BCC_EOS
00063                                           ! 32 } VbeInfoBlock;
00064                                           !BCC_EOS
00065                                           ! 33 typedef struct ModeInfoBlockCompact
00066                                           ! 34 {
00067                                           ! 35    Bit16u ModeAttributes;
00068                                           !BCC_EOS
00069                                           ! 36    Bit8u WinAAttributes;
00070                                           !BCC_EOS
00071                                           ! 37    Bit8u WinBAttributes;
00072                                           !BCC_EOS
00073                                           ! 38    Bit16u WinGranularity;
00074                                           !BCC_EOS
00075                                           ! 39    Bit16u WinSize;
00076                                           !BCC_EOS
00077                                           ! 40    Bit16u WinASegment;
00078                                           !BCC_EOS
00079                                           ! 41    Bit16u WinBSegment;
00080                                           !BCC_EOS
00081                                           ! 42    Bit32u WinFuncPtr;
00082                                           !BCC_EOS
00083                                           ! 43    Bit16u BytesPerScanLine;
00084                                           !BCC_EOS
00085                                           ! 44    Bit16u XResolution;
00086                                           !BCC_EOS
00087                                           ! 45    Bit16u YResolution;
00088                                           !BCC_EOS
00089                                           ! 46    Bit8u XCharSize;
00090                                           !BCC_EOS
00091                                           ! 47    Bit8u YCharSize;
00092                                           !BCC_EOS
00093                                           ! 48    Bit8u NumberOfPlanes;
00094                                           !BCC_EOS
00095                                           ! 49    Bit8u BitsPerPixel;
00096                                           !BCC_EOS
00097                                           ! 50    Bit8u NumberOfBanks;
00098                                           !BCC_EOS
00099                                           ! 51    Bit8u MemoryModel;
00100                                           !BCC_EOS
00101                                           ! 52    Bit8u BankSize;
00102                                           !BCC_EOS
00103                                           ! 53    Bit8u NumberOfImagePages;
00104                                           !BCC_EOS
00105                                           ! 54    Bit8u Reserved_page;
00106                                           !BCC_EOS
00107                                           ! 55    Bit8u RedMaskSize;
00108                                           !BCC_EOS
00109                                           ! 56    Bit8u RedFieldPosition;
00110                                           !BCC_EOS
00111                                           ! 57    Bit8u GreenMaskSize;
00112                                           !BCC_EOS
00113                                           ! 58    Bit8u GreenFieldPosition;
00114                                           !BCC_EOS
00115                                           ! 59    Bit8u BlueMaskSize;
00116                                           !BCC_EOS
00117                                           ! 60    Bit8u BlueFieldPosition;
00118                                           !BCC_EOS
00119                                           ! 61    Bit8u RsvdMaskSize;
00120                                           !BCC_EOS
00121                                           ! 62    Bit8u RsvdFieldPosition;
00122                                           !BCC_EOS
00123                                           ! 63    Bit8u DirectColorModeInfo;
00124                                           !BCC_EOS
00125                                           ! 64    Bit32u PhysBasePtr;
00126                                           !BCC_EOS
00127                                           ! 65    Bit32u OffScreenMemOffset;
00128                                           !BCC_EOS
00129                                           ! 66    Bit16u OffScreenMemSize;
00130                                           !BCC_EOS
00131                                           ! 67    Bit16u LinBytesPerScanLine;
00132                                           !BCC_EOS
00133                                           ! 68    Bit8u BnkNumberOfPages;
00134                                           !BCC_EOS
00135                                           ! 69    Bit8u LinNumberOfPages;
00136                                           !BCC_EOS
00137                                           ! 70    Bit8u LinRedMaskSize;
00138                                           !BCC_EOS
00139                                           ! 71    Bit8u LinRedFieldPosition;
00140                                           !BCC_EOS
00141                                           ! 72    Bit8u LinGreenMaskSize;
00142                                           !BCC_EOS
00143                                           ! 73    Bit8u LinGreenFieldPos
00144                                           ! 73 ition;
00145                                           !BCC_EOS
00146                                           ! 74    Bit8u LinBlueMaskSize;
00147                                           !BCC_EOS
00148                                           ! 75    Bit8u LinBlueFieldPosition;
00149                                           !BCC_EOS
00150                                           ! 76    Bit8u LinRsvdMaskSize;
00151                                           !BCC_EOS
00152                                           ! 77    Bit8u LinRsvdFieldPosition;
00153                                           !BCC_EOS
00154                                           ! 78    Bit32u MaxPixelClock;
00155                                           !BCC_EOS
00156                                           ! 79 } ModeInfoBlockCompact;
00157                                           !BCC_EOS
00158                                           ! 80 typedef struct ModeInfoBlock
00159                                           ! 81 {
00160                                           ! 82    Bit16u ModeAttributes;
00161                                           !BCC_EOS
00162                                           ! 83    Bit8u WinAAttributes;
00163                                           !BCC_EOS
00164                                           ! 84    Bit8u WinBAttributes;
00165                                           !BCC_EOS
00166                                           ! 85    Bit16u WinGranularity;
00167                                           !BCC_EOS
00168                                           ! 86    Bit16u WinSize;
00169                                           !BCC_EOS
00170                                           ! 87    Bit16u WinASegment;
00171                                           !BCC_EOS
00172                                           ! 88    Bit16u WinBSegment;
00173                                           !BCC_EOS
00174                                           ! 89    Bit32u WinFuncPtr;
00175                                           !BCC_EOS
00176                                           ! 90    Bit16u BytesPerScanLine;
00177                                           !BCC_EOS
00178                                           ! 91    Bit16u XResolution;
00179                                           !BCC_EOS
00180                                           ! 92    Bit16u YResolution;
00181                                           !BCC_EOS
00182                                           ! 93    Bit8u XCharSize;
00183                                           !BCC_EOS
00184                                           ! 94    Bit8u YCharSize;
00185                                           !BCC_EOS
00186                                           ! 95    Bit8u NumberOfPlanes;
00187                                           !BCC_EOS
00188                                           ! 96    Bit8u BitsPerPixel;
00189                                           !BCC_EOS
00190                                           ! 97    Bit8u NumberOfBanks;
00191                                           !BCC_EOS
00192                                           ! 98    Bit8u MemoryModel;
00193                                           !BCC_EOS
00194                                           ! 99    Bit8u BankSize;
00195                                           !BCC_EOS
00196                                           ! 100    Bit8u NumberOfImagePages;
00197                                           !BCC_EOS
00198                                           ! 101    Bit8u Reserved_page;
00199                                           !BCC_EOS
00200                                           ! 102    Bit8u RedMaskSize;
00201                                           !BCC_EOS
00202                                           ! 103    Bit8u RedFieldPosition;
00203                                           !BCC_EOS
00204                                           ! 104    Bit8u GreenMaskSize;
00205                                           !BCC_EOS
00206                                           ! 105    Bit8u GreenFieldPosition;
00207                                           !BCC_EOS
00208                                           ! 106    Bit8u BlueMaskSize;
00209                                           !BCC_EOS
00210                                           ! 107    Bit8u BlueFieldPosition;
00211                                           !BCC_EOS
00212                                           ! 108    Bit8u RsvdMaskSize;
00213                                           !BCC_EOS
00214                                           ! 109    Bit8u RsvdFieldPosition;
00215                                           !BCC_EOS
00216                                           ! 110    Bit8u DirectColorModeInfo;
00217                                           !BCC_EOS
00218                                           ! 111    Bit32u PhysBasePtr;
00219                                           !BCC_EOS
00220                                           ! 112    Bit32u OffScreenMemOffset;
00221                                           !BCC_EOS
00222                                           ! 113    Bit16u OffScreenMemSize;
00223                                           !BCC_EOS
00224                                           ! 114    Bit16u LinBytesPerScanLine;
00225                                           !BCC_EOS
00226                                           ! 115    Bit8u BnkNumberOfPages;
00227                                           !BCC_EOS
00228                                           ! 116    Bit8u LinNumberOfPages;
00229                                           !BCC_EOS
00230                                           ! 117    Bit8u LinRedMaskSize;
00231                                           !BCC_EOS
00232                                           ! 118    Bit8u LinRedFieldPosition;
00233                                           !BCC_EOS
00234                                           ! 119    Bit8u LinGreenMaskSize;
00235                                           !BCC_EOS
00236                                           ! 120    Bit8u LinGreenFieldPosition;
00237                                           !BCC_EOS
00238                                           ! 121    Bit8u LinBlueMaskSize;
00239                                           !BCC_EOS
00240                                           ! 122    Bit8u LinBlueFieldPosition;
00241                                           !BCC_EOS
00242                                           ! 123    Bit8u LinRsvdMaskSize;
00243                                           !BCC_EOS
00244                                           ! 124    Bit8u LinRsvdFieldPosition;
00245                                           !BCC_EOS
00246                                           ! 125    Bit32u MaxPixelClock;
00247                                           !BCC_EOS
00248                                           ! 126    Bit8u Reserved[189];
00249                                           !BCC_EOS
00250                                           ! 127 } ModeInfoBlock;
00251                                           !BCC_EOS
00252                                           ! 128 typedef struct ModeInfoListItem
00253                                           ! 129 {
00254                                           ! 130   Bit16u mode;
00255                                           !BCC_EOS
00256                                           ! 131   ModeInfoBlockCompact info;
00257                                           !BCC_EOS
00258                                           ! 132 } ModeInfoListItem;
00259                                           !BCC_EOS
00260                                           ! 133 static Bit8u read_byte();
00261                                           !BCC_EOS
00262                                           ! 134 static Bit16u read_word();
00263                                           !BCC_EOS
00264                                           ! 135 static void write_byte();
00265                                           !BCC_EOS
00266                                           ! 136 static void write_word();
00267                                           !BCC_EOS
00268                                           ! 137 static Bit8u inb();
00269                                           !BCC_EOS
00270                                           ! 138 static Bit16u inw();
00271                                           !BCC_EOS
00272                                           ! 139 static void outb();
00273                                           !BCC_EOS
00274                                           ! 140 static void outw();
00275                                           !BCC_EOS
00276                                           ! 141 static Bit16u get_SS();
00277                                           !BCC_EOS
00278                                           ! 142 static void printf();
00279                                           !BCC_EOS
00280                                           ! 143 static void unimplemented();
00281                                           !BCC_EOS
00282                                           ! 144 static void unknown();
00283                                           !BCC_EOS
00284                                           ! 145 static Bit8u find_vga_entry();
00285                                           !BCC_EOS
00286                                           ! 146 static void memsetb();
00287                                           !BCC_EOS
00288                                           ! 147 static void memsetw();
00289                                           !BCC_EOS
00290                                           ! 148 static void memcpyb();
00291                                           !BCC_EOS
00292                                           ! 149 static void memcpyw();
00293                                           !BCC_EOS
00294                                           ! 150 static void biosfn_set_video_mode();
00295                                           !BCC_EOS
00296                                           ! 151 static void biosfn_set_cursor_shape();
00297                                           !BCC_EOS
00298                                           ! 152 static void biosfn_set_cursor_pos();
00299                                           !BCC_EOS
00300                                           ! 153 static void biosfn_get_cursor_pos();
00301                                           !BCC_EOS
00302                                           ! 154 static void biosfn_set_active
00303                                           ! 154 _page();
00304                                           !BCC_EOS
00305                                           ! 155 static void biosfn_scroll();
00306                                           !BCC_EOS
00307                                           ! 156 static void biosfn_read_char_attr();
00308                                           !BCC_EOS
00309                                           ! 157 static void biosfn_write_char_attr();
00310                                           !BCC_EOS
00311                                           ! 158 static void biosfn_write_char_only();
00312                                           !BCC_EOS
00313                                           ! 159 static void biosfn_write_pixel();
00314                                           !BCC_EOS
00315                                           ! 160 static void biosfn_read_pixel();
00316                                           !BCC_EOS
00317                                           ! 161 static void biosfn_write_teletype();
00318                                           !BCC_EOS
00319                                           ! 162 static void biosfn_perform_gray_scale_summing();
00320                                           !BCC_EOS
00321                                           ! 163 static void biosfn_load_text_user_pat();
00322                                           !BCC_EOS
00323                                           ! 164 static void biosfn_load_text_8_14_pat();
00324                                           !BCC_EOS
00325                                           ! 165 static void biosfn_load_text_8_8_pat();
00326                                           !BCC_EOS
00327                                           ! 166 static void biosfn_load_text_8_16_pat();
00328                                           !BCC_EOS
00329                                           ! 167 static void biosfn_load_gfx_8_8_chars();
00330                                           !BCC_EOS
00331                                           ! 168 static void biosfn_load_gfx_user_chars();
00332                                           !BCC_EOS
00333                                           ! 169 static void biosfn_load_gfx_8_14_chars();
00334                                           !BCC_EOS
00335                                           ! 170 static void biosfn_load_gfx_8_8_dd_chars();
00336                                           !BCC_EOS
00337                                           ! 171 static void biosfn_load_gfx_8_16_chars();
00338                                           !BCC_EOS
00339                                           ! 172 static void biosfn_get_font_info();
00340                                           !BCC_EOS
00341                                           ! 173 static void biosfn_alternate_prtsc();
00342                                           !BCC_EOS
00343                                           ! 174 static void biosfn_switch_video_interface();
00344                                           !BCC_EOS
00345                                           ! 175 static void biosfn_enable_video_refresh_control();
00346                                           !BCC_EOS
00347                                           ! 176 static void biosfn_write_string();
00348                                           !BCC_EOS
00349                                           ! 177 static void biosfn_read_state_info();
00350                                           !BCC_EOS
00351                                           ! 178 static void biosfn_read_video_state_size();
00352                                           !BCC_EOS
00353                                           ! 179 static Bit16u biosfn_save_video_state();
00354                                           !BCC_EOS
00355                                           ! 180 static Bit16u biosfn_restore_video_state();
00356                                           !BCC_EOS
00357                                           ! 181 extern Bit8u video_save_pointer_table[];
00358                                           !BCC_EOS
00359                                           ! 182 #asm
00360                                           !BCC_ASM
00361                                           MACRO SET_INT_VECTOR
00362                                             push ds
00363                                             xor ax, ax
00364                                             mov ds, ax
00365                                             mov ax, ?3
00366                                             mov ?1*4, ax
00367                                             mov ax, ?2
00368                                             mov ?1*4+2, ax
00369                                             pop ds
00370                                           MEND
00371                                           ! 193 endasm
00372                                           !BCC_ENDASM
00373                                           ! 194 #asm
00374                                           !BCC_ASM
00375                                           
00376 0000                                      .rom
00377 0000                                      .org 0
00378                                           use16 386
00379                       00000000            vgabios_start:
00380 0000                        55            .byte 0x55, 0xaa
00381 0002                        40            .byte 0x40
00382                       00000003            vgabios_entry_point:
00383 0003           E9         0105              jmp vgabios_init_func
00384 001E                                      .org 0x1e
00385 001E                        49            .ascii "IBM"
00386 0021                        00            .byte 0x00
00387                       00000022            vgabios_name:
00388 0022                        50            .ascii "Plex86/Bochs VGABios"
00389 0036                        20            .ascii " "
00390 0037                        00            .byte 0x00
00391                       00000038            vgabios_version:
00392 0038                        63            .ascii "current-cvs"
00393 0043                        20            .ascii " "
00394                       00000044            vgabios_date:
00395 0044                        32            .ascii "26 11月 2016"
00396 0051                        0A            .byte 0x0a,0x0d
00397 0053                        00            .byte 0x00
00398                       00000054            vgabios_copyright:
00399 0054                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00400 007D                        0A            .byte 0x0a,0x0d
00401 007F                        00            .byte 0x00
00402                       00000080            vgabios_license:
00403 0080                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00404 00B0                        0A            .byte 0x0a,0x0d
00405 00B2                        0A            .byte 0x0a,0x0d
00406 00B4                        00            .byte 0x00
00407                       000000B5            vgabios_website:
00408 00B5                        50            .ascii "Please visit :"
00409 00C3                        0A            .byte 0x0a,0x0d
00410                                           ;;.ascii " . http://www.plex86.org"
00411                                           ;;.byte 0x0a,0x0d
00412 00C5                        20            .ascii " . http://bochs.sourceforge.net"
00413 00E4                        0A            .byte 0x0a,0x0d
00414 00E6                        20            .ascii " . http://www.nongnu.org/vgabios"
00415 0106                        0A            .byte 0x0a,0x0d
00416 0108                        0A            .byte 0x0a,0x0d
00417 010A                        00            .byte 0x00
00418                                           ;; ============================================================================================
00419                                           ;;
00420                                           ;; Init Entry point
00421                                           ;;
00422                                           ;; ============================================================================================
00423                       0000010B            vgabios_init_func:
00424                                           ;; init vga card
00425 010B           E8         3457              call init_vga_card
00426                                           ;; init basic bios vars
00427 010E           E8         34B3              call init_bios_area
00428                                           ;; init vbe functions
00429 0111           E8         920D              call vbe_init
00430                                           ;; set int10 vect
00431                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0114           1E                           push ds
 +a   0115           31C0                         xor ax, ax
 +a   0117           8ED8                         mov ds, ax
 +a   0119           B8                   0135    mov ax,  #vgabios_int10_handler
 +a   011C           A3         0040              mov 0x10*4, ax
 +a   011F           B8                   C000    mov ax,  #0xC000
 +a   0122           A3         0042              mov 0x10*4+2, ax
 +a   0125           1F                           pop ds
00432                                           ;; display splash screen
00433 0126           E8         34EF              call _display_splash_screen
00434                                           ;; init video mode and clear the screen
00435 0129           B8                   0003    mov ax,#0x0003
00436 012C           CD                     10    int #0x10
00437                                           ;; show info
00438 012E           E8         34E8              call _display_info
00439                                           ;; show vbe info
00440 0131           E8         921B              call vbe_display_info
00441 0134           CB                           retf
00442                                           ! 262 endasm
00443                                           !BCC_ENDASM
00444                                           ! 263 #asm
00445                                           !BCC_ASM
00446                       00000135            vgabios_int10_handler:
00447 0135           9C                           pushf
00448 0136           80FC                   0F    cmp ah, #0x0f
00449 0139           75           06              jne int10_test_1A
00450 013B           E8         60BD              call biosfn_get_video_mode
00451 013E           E9         00BC              jmp int10_end
00452                       00000141            int10_test_1A:
00453 0141           80FC                   1A    cmp ah, #0x1a
00454 0144           75           06              jne int10_test_0B
00455 0146           E8         6BDF              call biosfn_group_1A
00456 0149           E9         00B1              jmp int10_end
00457                       0000014C            int10_test_0B:
00458 014C           80FC                   0B    cmp ah, #0x0b
00459 014F           75           06              jne int10_test_1103
00460 0151           E8         5826              call biosfn_group_0B
00461 0154           E9         00A6              jmp int10_end
00462                       00000157            int10_test_1103:
00463 0157           3D                   1103    cmp ax, #0x1103
00464 015A           75           06              jne int10_test_12
00465 015C           E8         6797              call biosfn_set_text_block_specifier
00466 015F           E9         009B              jmp int10_end
00467                       00000162            int10_test_12:
00468 0162           80FC                   12    cmp ah, #0x12
00469 0165           75           3E              jne int10_test_101B
00470 0167           80FB                   10    cmp bl, #0x10
00471 016A           75           06              jne int10_test_BL30
00472 016C           E8         69E1              call biosfn_get_ega_info
00473 016F           E9         008B              jmp int10_end
00474                       00000172            int10_test_BL30:
00475 0172           80FB                   30    cmp bl, #0x30
00476 0175           75           06              jne int10_test_BL31
00477 0177           E8         69FA              call biosfn_select_vert_res
00478 017A           E9         0080              jmp int10_end
00479                       0000017D            int10_test_BL31:
00480 017D           80FB                   31    cmp bl, #0x31
00481 0180           75           05              jne int10_test_BL32
00482 0182           E8         6A42              call biosfn_enable_default_palette_loading
00483 0185           EB           76              jmp int10_end
00484                       00000187            int10_test_BL32:
00485 0187           80FB                   32    cmp bl, #0x32
00486 018A           75           05              jne int10_test_BL33
00487 018C           E8         6A5A              call biosfn_enable_video_addressing
00488 018F           EB           6C              jmp int10_end
00489                       00000191            int10_test_BL33:
00490 0191           80FB                   33    cmp bl, #0x33
00491 0194           75           05              jne int10_test_BL34
00492 0196           E8         6A6E              call biosfn_enable_grayscale_summing
00493 0199           EB           62              jmp int10_end
00494                       0000019B            int10_test_BL34:
00495 019B           80FB                   34    cmp bl, #0x34
00496 019E           75           4F              jne int10_normal
00497 01A0           E8         6A88              call biosfn_enable_cursor_emulation
00498 01A3           EB           58              jmp int10_end
00499                       000001A5            int10_test_101B:
00500 01A5           3D                   101B    cmp ax, #0x101b
00501 01A8           74           45              je int10_normal
00502 01AA           80FC                   10    cmp ah, #0x10
00503 01AD           75           05              jne int10_test_4F
00504 01AF           E8         6070              call biosfn_group_10
00505 01B2           EB           49              jmp int10_end
00506                       000001B4            int10_test_4F:
00507 01B4           80FC                   4F    cmp ah, #0x4f
00508 01B7           75           36              jne int10_normal
00509 01B9           3C                     03    cmp al, #0x03
00510 01BB           75           05              jne int10_test_vbe_05
00511 01BD           E8         96B0              call vbe_biosfn_return_current_mode
00512 01C0           EB           3B              jmp int10_end
00513                       000001C2            int10_test_vbe_05:
00514 01C2           3C                     05    cmp al, #0x05
00515 01C4           75           05              jne int10_test_vbe_06
00516 01C6           E8         997B              call vbe_biosfn_display_window_control
00517 01C9           EB           32              jmp int10_end
00518                       000001CB            int10_test_vbe_06:
00519 01CB           3C                     06    cmp al, #0x06
00520 01CD           75           05              jne int10_test_vbe_07
00521 01CF           E8         999F              call vbe_biosfn_set_get_logical_scan_line_length
00522 01D2           EB           29              jmp int10_end
00523                       000001D4            int10_test_vbe_07:
00524 01D4           3C                     07    cmp al, #0x07
00525 01D6           75           05              jne int10_test_vbe_08
00526 01D8           E8         99E3              call vbe_biosfn_set_get_display_start
00527 01DB           EB           20              jmp int10_end
00528                       000001DD            int10_test_vbe_08:
00529 01DD           3C                     08    cmp al, #0x08
00530 01DF           75           05              jne int10_test_vbe_0A
00531 01E1           E8         9A08              call vbe_biosfn_set_get_dac_palette_format
00532 01E4           EB           17              jmp int10_end
00533                       000001E6            int10_test_vbe_0A:
00534 01E6           3C                     0A    cmp al, #0x0A
00535 01E8           75           05              jne int10_normal
00536 01EA           E8         9A37              call vbe_biosfn_return_protected_mode_interface
00537 01ED           EB           0E              jmp int10_end
00538                       000001EF            int10_normal:
00539 01EF           06                           push es
00540 01F0           1E                           push ds
00541 01F1           60                           pusha
00542                                           ;; We have to set ds to access the right data segment
00543 01F2           BB                   C000    mov bx, #0xc000
00544 01F5           8EDB                         mov ds, bx
00545 01F7           E8         3464              call _int10_func
00546 01FA           61                           popa
00547 01FB           1F                           pop ds
00548 01FC           07                           pop es
00549                       000001FD            int10_end:
00550 01FD           9D                           popf
00551 01FE           CF                           iret
00552                                           ! 370 endasm
00553                                           !BCC_ENDASM
00554                                           ! 371 typedef struct
00555                                           ! 372 {Bit8u svgamode;
00556                                           !BCC_EOS
00557                                           ! 373  Bit8u class;
00558                                           !BCC_EOS
00559                                           ! 374  Bit8u memmodel;
00560                                           !BCC_EOS
00561                                           ! 375  Bit8u pixbits;
00562                                           !BCC_EOS
00563                                           ! 376  Bit16u sstart;
00564                                           !BCC_EOS
00565                                           ! 377  Bit8u pelmask;
00566                                           !BCC_EOS
00567                                           ! 378  Bit8u dacmodel;
00568                                           !BCC_EOS
00569                                           ! 379 } VGAMODES;
00570                                           !BCC_EOS
00571                                           ! 380 static VGAMODES vga_modes[15 +1]=
00572                                           ! 381 {
00573                                           
00574                       000001FF            _vga_modes:
00575                                           ! 382  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00576 01FF                        00            .byte	0
00577 0200                        00            .byte	0
00578 0201                        00            .byte	0
00579 0202                        04            .byte	4
00580 0203                      B800            .word	$B800
00581 0205                        FF            .byte	$FF
00582 0206                        02            .byte	2
00583                                           ! 383  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00584 0207                        01            .byte	1
00585 0208                        00            .byte	0
00586 0209                        00            .byte	0
00587 020A                        04            .byte	4
00588 020B                      B800            .word	$B800
00589 020D                        FF            .byte	$FF
00590 020E                        02            .byte	2
00591                                           ! 384  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00592 020F                        02            .byte	2
00593 0210                        00            .byte	0
00594 0211                        00            .byte	0
00595 0212                        04            .byte	4
00596 0213                      B800            .word	$B800
00597 0215                        FF            .byte	$FF
00598 0216                        02            .byte	2
00599                                           ! 385  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00600 0217                        03            .byte	3
00601 0218                        00            .byte	0
00602 0219                        00            .byte	0
00603 021A                        04            .byte	4
00604 021B                      B800            .word	$B800
00605 021D                        FF            .byte	$FF
00606 021E                        02            .byte	2
00607                                           ! 386  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00608 021F                        04            .byte	4
00609 0220                        01            .byte	1
00610 0221                        02            .byte	2
00611 0222                        02            .byte	2
00612 0223                      B800            .word	$B800
00613 0225                        FF            .byte	$FF
00614 0226                        01            .byte	1
00615                                           ! 387  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00616 0227                        05            .byte	5
00617 0228                        01            .byte	1
00618 0229                        02            .byte	2
00619 022A                        02            .byte	2
00620 022B                      B800            .word	$B800
00621 022D                        FF            .byte	$FF
00622 022E                        01            .byte	1
00623                                           ! 388  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00624 022F                        06            .byte	6
00625 0230                        01            .byte	1
00626 0231                        02            .byte	2
00627 0232                        01            .byte	1
00628 0233                      B800            .word	$B800
00629 0235                        FF            .byte	$FF
00630 0236                        01            .byte	1
00631                                           ! 389  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00632 0237                        07            .byte	7
00633 0238                        00            .byte	0
00634 0239                        01            .byte	1
00635 023A                        04            .byte	4
00636 023B                      B000            .word	$B000
00637 023D                        FF            .byte	$FF
00638 023E                        00            .byte	0
00639                                           ! 390  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00640 023F                        0D            .byte	$D
00641 0240                        01            .byte	1
00642 0241                        04            .byte	4
00643 0242                        04            .byte	4
00644 0243                      A000            .word	$A000
00645 0245                        FF            .byte	$FF
00646 0246                        01            .byte	1
00647                                           ! 391  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00648 0247                        0E            .byte	$E
00649 0248                        01            .byte	1
00650 0249                        04            .byte	4
00651 024A                        04            .byte	4
00652 024B                      A000            .word	$A000
00653 024D                        FF            .byte	$FF
00654 024E                        01            .byte	1
00655                                           ! 392  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00656 024F                        0F            .byte	$F
00657 0250                        01            .byte	1
00658 0251                        03            .byte	3
00659 0252                        01            .byte	1
00660 0253                      A000            .word	$A000
00661 0255                        FF            .byte	$FF
00662 0256                        00            .byte	0
00663                                           ! 393  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00664 0257                        10            .byte	$10
00665 0258                        01            .byte	1
00666 0259                        04            .byte	4
00667 025A                        04            .byte	4
00668 025B                      A000            .word	$A000
00669 025D                        FF            .byte	$FF
00670 025E                        02            .byte	2
00671                                           ! 394  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00672 025F                        11            .byte	$11
00673 0260                        01            .byte	1
00674 0261                        03            .byte	3
00675 0262                        01            .byte	1
00676 0263                      A000            .word	$A000
00677 0265                        FF            .byte	$FF
00678 0266                        02            .byte	2
00679                                           ! 395  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00680 0267                        12            .byte	$12
00681 0268                        01            .byte	1
00682 0269                        04            .byte	4
00683 026A                        04            .byte	4
00684 026B                      A000            .word	$A000
00685 026D                        FF            .byte	$FF
00686 026E                        02            .byte	2
00687                                           ! 396  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00688 026F                        13            .byte	$13
00689 0270                        01            .byte	1
00690 0271                        05            .byte	5
00691 0272                        08            .byte	8
00692 0273                      A000            .word	$A000
00693 0275                        FF            .byte	$FF
00694 0276                        03            .byte	3
00695                                           ! 397  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00696 0277                        6A            .byte	$6A
00697 0278                        01            .byte	1
00698 0279                        04            .byte	4
00699 027A                        04            .byte	4
00700 027B                      A000            .word	$A000
00701 027D                        FF            .byte	$FF
00702 027E                        02            .byte	2
00703                                           ! 398 };
00704                                           !BCC_EOS
00705                                           ! 399 static Bit8u line_to_vpti[15 +1]={
00706                       0000027F            _line_to_vpti:
00707                                           ! 400     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00708 027F                        17            .byte	$17
00709 0280                        17            .byte	$17
00710 0281                        18            .byte	$18
00711 0282                        18            .byte	$18
00712 0283                        04            .byte	4
00713 0284                        05            .byte	5
00714 0285                        06            .byte	6
00715 0286                        07            .byte	7
00716                                           ! 401     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00717 0287                        0D            .byte	$D
00718 0288                        0E            .byte	$E
00719 0289                        11            .byte	$11
00720 028A                        12            .byte	$12
00721 028B                        1A            .byte	$1A
00722 028C                        1B            .byte	$1B
00723 028D                        1C            .byte	$1C
00724 028E                        1D            .byte	$1D
00725                                           ! 402 };
00726                                           !BCC_EOS
00727                                           ! 403 static Bit8u dac_regs[3 +1]=
00728                                           ! 404 {0x3f,0x3f,0x3f,0xff};
00729                       0000028F            _dac_regs:
00730 028F                        3F            .byte	$3F
00731 0290                        3F            .byte	$3F
00732 0291                        3F            .byte	$3F
00733 0292                        FF            .byte	$FF
00734                                           !BCC_EOS
00735                                           ! 405 typedef struct {
00736                                           ! 406     Bit8u twidth;
00737                                           !BCC_EOS
00738                                           ! 407     Bit8u theightm1;
00739                                           !BCC_EOS
00740                                           ! 408     Bit8u cheight;
00741                                           !BCC_EOS
00742                                           ! 409     Bit8u slength_l;
00743                                           !BCC_EOS
00744                                           ! 410     Bit8u slength_h;
00745                                           !BCC_EOS
00746                                           ! 411     Bit8u sequ_regs[4];
00747                                           !BCC_EOS
00748                                           ! 412     Bit8u miscreg;
00749                                           !BCC_EOS
00750                                           ! 413     Bit8u crtc_regs[25];
00751                                           !BCC_EOS
00752                                           ! 414     Bit8u actl_regs[20];
00753                                           !BCC_EOS
00754                                           ! 415     Bit8u grdc_reg
00755                                           ! 415 s[9];
00756                                           !BCC_EOS
00757                                           ! 416 } VideoParamTableEntry;
00758                                           !BCC_EOS
00759                                           ! 417 static VideoParamTableEntry video_param_table[30] = {
00760                       00000293            _video_param_table:
00761                                           ! 418 {
00762                                           ! 419  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00763 0293                        00            .byte	0
00764 0294                        00            .byte	0
00765 0295                        00            .byte	0
00766 0296                        00            .byte	0
00767 0297                        00            .byte	0
00768 0298                        00            .byte	0
00769 0299                        00            .byte	0
00770 029A                        00            .byte	0
00771                                           ! 420  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00772 029B                        00            .byte	0
00773 029C                        00            .byte	0
00774 029D                        00            .byte	0
00775 029E                        00            .byte	0
00776 029F                        00            .byte	0
00777 02A0                        00            .byte	0
00778 02A1                        00            .byte	0
00779 02A2                        00            .byte	0
00780                                           ! 421  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00781 02A3                        00            .byte	0
00782 02A4                        00            .byte	0
00783 02A5                        00            .byte	0
00784 02A6                        00            .byte	0
00785 02A7                        00            .byte	0
00786 02A8                        00            .byte	0
00787 02A9                        00            .byte	0
00788 02AA                        00            .byte	0
00789                                           ! 422  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00790 02AB                        00            .byte	0
00791 02AC                        00            .byte	0
00792 02AD                        00            .byte	0
00793 02AE                        00            .byte	0
00794 02AF                        00            .byte	0
00795 02B0                        00            .byte	0
00796 02B1                        00            .byte	0
00797 02B2                        00            .byte	0
00798                                           ! 423  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00799 02B3                        00            .byte	0
00800 02B4                        00            .byte	0
00801 02B5                        00            .byte	0
00802 02B6                        00            .byte	0
00803 02B7                        00            .byte	0
00804 02B8                        00            .byte	0
00805 02B9                        00            .byte	0
00806 02BA                        00            .byte	0
00807                                           ! 424  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00808 02BB                        00            .byte	0
00809 02BC                        00            .byte	0
00810 02BD                        00            .byte	0
00811 02BE                        00            .byte	0
00812 02BF                        00            .byte	0
00813 02C0                        00            .byte	0
00814 02C1                        00            .byte	0
00815 02C2                        00            .byte	0
00816                                           ! 425  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00817 02C3                        00            .byte	0
00818 02C4                        00            .byte	0
00819 02C5                        00            .byte	0
00820 02C6                        00            .byte	0
00821 02C7                        00            .byte	0
00822 02C8                        00            .byte	0
00823 02C9                        00            .byte	0
00824 02CA                        00            .byte	0
00825                                           ! 426  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00826 02CB                        00            .byte	0
00827 02CC                        00            .byte	0
00828 02CD                        00            .byte	0
00829 02CE                        00            .byte	0
00830 02CF                        00            .byte	0
00831 02D0                        00            .byte	0
00832 02D1                        00            .byte	0
00833 02D2                        00            .byte	0
00834                                           ! 427 },
00835                                           ! 428 {
00836                                           ! 429  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00837 02D3                        00            .byte	0
00838 02D4                        00            .byte	0
00839 02D5                        00            .byte	0
00840 02D6                        00            .byte	0
00841 02D7                        00            .byte	0
00842 02D8                        00            .byte	0
00843 02D9                        00            .byte	0
00844 02DA                        00            .byte	0
00845                                           ! 430  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00846 02DB                        00            .byte	0
00847 02DC                        00            .byte	0
00848 02DD                        00            .byte	0
00849 02DE                        00            .byte	0
00850 02DF                        00            .byte	0
00851 02E0                        00            .byte	0
00852 02E1                        00            .byte	0
00853 02E2                        00            .byte	0
00854                                           ! 431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00855 02E3                        00            .byte	0
00856 02E4                        00            .byte	0
00857 02E5                        00            .byte	0
00858 02E6                        00            .byte	0
00859 02E7                        00            .byte	0
00860 02E8                        00            .byte	0
00861 02E9                        00            .byte	0
00862 02EA                        00            .byte	0
00863                                           ! 432  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00864 02EB                        00            .byte	0
00865 02EC                        00            .byte	0
00866 02ED                        00            .byte	0
00867 02EE                        00            .byte	0
00868 02EF                        00            .byte	0
00869 02F0                        00            .byte	0
00870 02F1                        00            .byte	0
00871 02F2                        00            .byte	0
00872                                           ! 433  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00873 02F3                        00            .byte	0
00874 02F4                        00            .byte	0
00875 02F5                        00            .byte	0
00876 02F6                        00            .byte	0
00877 02F7                        00            .byte	0
00878 02F8                        00            .byte	0
00879 02F9                        00            .byte	0
00880 02FA                        00            .byte	0
00881                                           ! 434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00882 02FB                        00            .byte	0
00883 02FC                        00            .byte	0
00884 02FD                        00            .byte	0
00885 02FE                        00            .byte	0
00886 02FF                        00            .byte	0
00887 0300                        00            .byte	0
00888 0301                        00            .byte	0
00889 0302                        00            .byte	0
00890                                           ! 435  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00891 0303                        00            .byte	0
00892 0304                        00            .byte	0
00893 0305                        00            .byte	0
00894 0306                        00            .byte	0
00895 0307                        00            .byte	0
00896 0308                        00            .byte	0
00897 0309                        00            .byte	0
00898 030A                        00            .byte	0
00899                                           ! 436  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00900 030B                        00            .byte	0
00901 030C                        00            .byte	0
00902 030D                        00            .byte	0
00903 030E                        00            .byte	0
00904 030F                        00            .byte	0
00905 0310                        00            .byte	0
00906 0311                        00            .byte	0
00907 0312                        00            .byte	0
00908                                           ! 437 },
00909                                           ! 438 {
00910                                           ! 439  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00911 0313                        00            .byte	0
00912 0314                        00            .byte	0
00913 0315                        00            .byte	0
00914 0316                        00            .byte	0
00915 0317                        00            .byte	0
00916 0318                        00            .byte	0
00917 0319                        00            .byte	0
00918 031A                        00            .byte	0
00919                                           ! 440  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00920 031B                        00            .byte	0
00921 031C                        00            .byte	0
00922 031D                        00            .byte	0
00923 031E                        00            .byte	0
00924 031F                        00            .byte	0
00925 0320                        00            .byte	0
00926 0321                        00            .byte	0
00927 0322                        00            .byte	0
00928                                           ! 441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00929 0323                        00            .byte	0
00930 0324                        00            .byte	0
00931 0325                        00            .byte	0
00932 0326                        00            .byte	0
00933 0327                        00            .byte	0
00934 0328                        00            .byte	0
00935 0329                        00            .byte	0
00936 032A                        00            .byte	0
00937                                           ! 442  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00938 032B                        00            .byte	0
00939 032C                        00            .byte	0
00940 032D                        00            .byte	0
00941 032E                        00            .byte	0
00942 032F                        00            .byte	0
00943 0330                        00            .byte	0
00944 0331                        00            .byte	0
00945 0332                        00            .byte	0
00946                                           ! 443  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00947 0333                        00            .byte	0
00948 0334                        00            .byte	0
00949 0335                        00            .byte	0
00950 0336                        00            .byte	0
00951 0337                        00            .byte	0
00952 0338                        00            .byte	0
00953 0339                        00            .byte	0
00954 033A                        00            .byte	0
00955                                           ! 444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00956 033B                        00            .byte	0
00957 033C                        00            .byte	0
00958 033D                        00            .byte	0
00959 033E                        00            .byte	0
00960 033F                        00            .byte	0
00961 0340                        00            .byte	0
00962 0341                        00            .byte	0
00963 0342                        00            .byte	0
00964                                           ! 445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00965 0343                        00            .byte	0
00966 0344                        00            .byte	0
00967 0345                        00            .byte	0
00968 0346                        00            .byte	0
00969 0347                        00            .byte	0
00970 0348                        00            .byte	0
00971 0349                        00            .byte	0
00972 034A                        00            .byte	0
00973                                           ! 446  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00974 034B                        00            .byte	0
00975 034C                        00            .byte	0
00976 034D                        00            .byte	0
00977 034E                        00            .byte	0
00978 034F                        00            .byte	0
00979 0350                        00            .byte	0
00980 0351                        00            .byte	0
00981 0352                        00            .byte	0
00982                                           ! 447 },
00983                                           ! 448 {
00984                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00985 0353                        00            .byte	0
00986 0354                        00            .byte	0
00987 0355                        00            .byte	0
00988 0356                        00            .byte	0
00989 0357                        00            .byte	0
00990 0358                        00            .byte	0
00991 0359                        00            .byte	0
00992 035A                        00            .byte	0
00993                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00994 035B                        00            .byte	0
00995 035C                        00            .byte	0
00996 035D                        00            .byte	0
00997 035E                        00            .byte	0
00998 035F                        00            .byte	0
00999 0360                        00            .byte	0
01000 0361                        00            .byte	0
01001 0362                        00            .byte	0
01002                                           ! 451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01003 0363                        00            .byte	0
01004 0364                        00            .byte	0
01005 0365                        00            .byte	0
01006 0366                        00            .byte	0
01007 0367                        00            .byte	0
01008 0368                        00            .byte	0
01009 0369                        00            .byte	0
01010 036A                        00            .byte	0
01011                                           ! 452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01012 036B                        00            .byte	0
01013 036C                        00            .byte	0
01014 036D                        00            .byte	0
01015 036E                        00            .byte	0
01016 036F                        00            .byte	0
01017 0370                        00            .byte	0
01018 0371                        00            .byte	0
01019 0372                        00            .byte	0
01020                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01021 0373                        00            .byte	0
01022 0374                        00            .byte	0
01023 0375                        00            .byte	0
01024 0376                        00            .byte	0
01025 0377                        00            .byte	0
01026 0378                        00            .byte	0
01027 0379                        00            .byte	0
01028 037A                        00            .byte	0
01029                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01030 037B                        00            .byte	0
01031 037C                        00            .byte	0
01032 037D                        00            .byte	0
01033 037E                        00            .byte	0
01034 037F                        00            .byte	0
01035 0380                        00            .byte	0
01036 0381                        00            .byte	0
01037 0382                        00            .byte	0
01038                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01039 0383                        00            .byte	0
01040 0384                        00            .byte	0
01041 0385                        00            .byte	0
01042 0386                        00            .byte	0
01043 0387                        00            .byte	0
01044 0388                        00            .byte	0
01045 0389                        00            .byte	0
01046 038A                        00            .byte	0
01047                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01048 038B                        00            .byte	0
01049 038C                        00            .byte	0
01050 038D                        00            .byte	0
01051 038E                        00            .byte	0
01052 038F                        00            .byte	0
01053 0390                        00            .byte	0
01054 0391                        00            .byte	0
01055 0392                        00            .byte	0
01056                                           ! 457 },
01057                                           ! 458 {
01058                                           ! 459  40, 24, 8, 0x00, 0x08,
01059 0393                        28            .byte	$28
01060 0394                        18            .byte	$18
01061 0395                        08            .byte	8
01062 0396                        00            .byte	0
01063 0397                        08            .byte	8
01064                                           ! 460  0x09, 0x03, 0x00, 0x02,
01065 0398                        09            .byte	9
01066 0399                        03            .byte	3
01067 039A                        00            .byte	0
01068 039B                        02            .byte	2
01069                                           ! 461  0x63,
01070 039C                        63            .byte	$63
01071                                           ! 462  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01072 039D                        2D            .byte	$2D
01073 039E                        27            .byte	$27
01074 039F                        28            .byte	$28
01075 03A0                        90            .byte	$90
01076 03A1                        2B            .byte	$2B
01077 03A2                        80            .byte	$80
01078 03A3                        BF            .byte	$BF
01079 03A4                        1F            .byte	$1F
01080                                           ! 463  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01081 03A5                        00            .byte	0
01082 03A6                        C1            .byte	$C1
01083 03A7                        00            .byte	0
01084 03A8                        00            .byte	0
01085 03A9                        00            .byte	0
01086 03AA                        00            .byte	0
01087 03AB                        00            .byte	0
01088 03AC                        00            .byte	0
01089                                           ! 464  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01090 03AD                        9C            .byte	$9C
01091 03AE                        8E            .byte	$8E
01092 03AF                        8F            .byte	$8F
01093 03B0                        14            .byte	$14
01094 03B1                        00            .byte	0
01095 03B2                        96            .byte	$96
01096 03B3                        B9            .byte	$B9
01097 03B4                        A2            .byte	$A2
01098                                           ! 465  0xff,
01099 03B5                        FF            .byte	$FF
01100                                           ! 466  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01101 03B6                        00            .byte	0
01102 03B7                        13            .byte	$13
01103 03B8                        15            .byte	$15
01104 03B9                        17            .byte	$17
01105 03BA                        02            .byte	2
01106 03BB                        04            .byte	4
01107 03BC                        06            .byte	6
01108 03BD                        07            .byte	7
01109                                           ! 467  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01110 03BE                        10            .byte	$10
01111 03BF                        11            .byte	$11
01112 03C0                        12            .byte	$12
01113 03C1                        13            .byte	$13
01114 03C2                        14            .byte	$14
01115 03C3                        15            .byte	$15
01116 03C4                        16            .byte	$16
01117 03C5                        17            .byte	$17
01118                                           ! 468  0x01, 0x00, 0x03, 0x00,
01119 03C6                        01            .byte	1
01120 03C7                        00            .byte	0
01121 03C8                        03            .byte	3
01122 03C9                        00            .byte	0
01123                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f
01124 03CA                        00            .byte	0
01125 03CB                        00            .byte	0
01126 03CC                        00            .byte	0
01127 03CD                        00            .byte	0
01128 03CE                        00            .byte	0
01129 03CF                        30            .byte	$30
01130                                           ! 469 , 0x0f, 0xff,
01131 03D0                        0F            .byte	$F
01132 03D1                        0F            .byte	$F
01133 03D2                        FF            .byte	$FF
01134                                           ! 470 },
01135                                           ! 471 {
01136                                           ! 472  40, 24, 8, 0x00, 0x08,
01137 03D3                        28            .byte	$28
01138 03D4                        18            .byte	$18
01139 03D5                        08            .byte	8
01140 03D6                        00            .byte	0
01141 03D7                        08            .byte	8
01142                                           ! 473  0x09, 0x03, 0x00, 0x02,
01143 03D8                        09            .byte	9
01144 03D9                        03            .byte	3
01145 03DA                        00            .byte	0
01146 03DB                        02            .byte	2
01147                                           ! 474  0x63,
01148 03DC                        63            .byte	$63
01149                                           ! 475  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01150 03DD                        2D            .byte	$2D
01151 03DE                        27            .byte	$27
01152 03DF                        28            .byte	$28
01153 03E0                        90            .byte	$90
01154 03E1                        2B            .byte	$2B
01155 03E2                        80            .byte	$80
01156 03E3                        BF            .byte	$BF
01157 03E4                        1F            .byte	$1F
01158                                           ! 476  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01159 03E5                        00            .byte	0
01160 03E6                        C1            .byte	$C1
01161 03E7                        00            .byte	0
01162 03E8                        00            .byte	0
01163 03E9                        00            .byte	0
01164 03EA                        00            .byte	0
01165 03EB                        00            .byte	0
01166 03EC                        00            .byte	0
01167                                           ! 477  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01168 03ED                        9C            .byte	$9C
01169 03EE                        8E            .byte	$8E
01170 03EF                        8F            .byte	$8F
01171 03F0                        14            .byte	$14
01172 03F1                        00            .byte	0
01173 03F2                        96            .byte	$96
01174 03F3                        B9            .byte	$B9
01175 03F4                        A2            .byte	$A2
01176                                           ! 478  0xff,
01177 03F5                        FF            .byte	$FF
01178                                           ! 479  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01179 03F6                        00            .byte	0
01180 03F7                        13            .byte	$13
01181 03F8                        15            .byte	$15
01182 03F9                        17            .byte	$17
01183 03FA                        02            .byte	2
01184 03FB                        04            .byte	4
01185 03FC                        06            .byte	6
01186 03FD                        07            .byte	7
01187                                           ! 480  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01188 03FE                        10            .byte	$10
01189 03FF                        11            .byte	$11
01190 0400                        12            .byte	$12
01191 0401                        13            .byte	$13
01192 0402                        14            .byte	$14
01193 0403                        15            .byte	$15
01194 0404                        16            .byte	$16
01195 0405                        17            .byte	$17
01196                                           ! 481  0x01, 0x00, 0x03, 0x00,
01197 0406                        01            .byte	1
01198 0407                        00            .byte	0
01199 0408                        03            .byte	3
01200 0409                        00            .byte	0
01201                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01202 040A                        00            .byte	0
01203 040B                        00            .byte	0
01204 040C                        00            .byte	0
01205 040D                        00            .byte	0
01206 040E                        00            .byte	0
01207 040F                        30            .byte	$30
01208 0410                        0F            .byte	$F
01209 0411                        0F            .byte	$F
01210 0412                        FF            .byte	$FF
01211                                           ! 483 },
01212                                           ! 484 {
01213                                           ! 485  80, 24, 8, 0x00, 0x10,
01214 0413                        50            .byte	$50
01215 0414                        18            .byte	$18
01216 0415                        08            .byte	8
01217 0416                        00            .byte	0
01218 0417                        10            .byte	$10
01219                                           ! 486  0x01, 0x01, 0x00, 0x06,
01220 0418                        01            .byte	1
01221 0419                        01            .byte	1
01222 041A                        00            .byte	0
01223 041B                        06            .byte	6
01224                                           ! 487  0x63,
01225 041C                        63            .byte	$63
01226                                           ! 488  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01227 041D                        5F            .byte	$5F
01228 041E                        4F            .byte	$4F
01229 041F                        50            .byte	$50
01230 0420                        82            .byte	$82
01231 0421                        54            .byte	$54
01232 0422                        80            .byte	$80
01233 0423                        BF            .byte	$BF
01234 0424                        1F            .byte	$1F
01235                                           ! 489  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01236 0425                        00            .byte	0
01237 0426                        C1            .byte	$C1
01238 0427                        00            .byte	0
01239 0428                        00            .byte	0
01240 0429                        00            .byte	0
01241 042A                        00            .byte	0
01242 042B                        00            .byte	0
01243 042C                        00            .byte	0
01244                                           ! 490  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01245 042D                        9C            .byte	$9C
01246 042E                        8E            .byte	$8E
01247 042F                        8F            .byte	$8F
01248 0430                        28            .byte	$28
01249 0431                        00            .byte	0
01250 0432                        96            .byte	$96
01251 0433                        B9            .byte	$B9
01252 0434                        C2            .byte	$C2
01253                                           ! 491  0xff,
01254 0435                        FF            .byte	$FF
01255                                           ! 492  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01256 0436                        00            .byte	0
01257 0437                        17            .byte	$17
01258 0438                        17            .byte	$17
01259 0439                        17            .byte	$17
01260 043A                        17            .byte	$17
01261 043B                        17            .byte	$17
01262 043C                        17            .byte	$17
01263 043D                        17            .byte	$17
01264                                           ! 493  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01265 043E                        17            .byte	$17
01266 043F                        17            .byte	$17
01267 0440                        17            .byte	$17
01268 0441                        17            .byte	$17
01269 0442                        17            .byte	$17
01270 0443                        17            .byte	$17
01271 0444                        17            .byte	$17
01272 0445                        17            .byte	$17
01273                                           ! 494  0x01, 0x00, 0x01, 0x00,
01274 0446                        01            .byte	1
01275 0447                        00            .byte	0
01276 0448                        01            .byte	1
01277 0449                        00            .byte	0
01278                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01279 044A                        00            .byte	0
01280 044B                        00            .byte	0
01281 044C                        00            .byte	0
01282 044D                        00            .byte	0
01283 044E                        00            .byte	0
01284 044F                        00            .byte	0
01285 0450                        0D            .byte	$D
01286 0451                        0F            .byte	$F
01287 0452                        FF            .byte	$FF
01288                                           ! 496 },
01289                                           ! 497 {
01290                                           ! 498  80, 24, 16, 0x00, 0x10,
01291 0453                        50            .byte	$50
01292 0454                        18            .byte	$18
01293 0455                        10            .byte	$10
01294 0456                        00            .byte	0
01295 0457                        10            .byte	$10
01296                                           ! 499  0x00, 0x03, 0x00, 0x02,
01297 0458                        00            .byte	0
01298 0459                        03            .byte	3
01299 045A                        00            .byte	0
01300 045B                        02            .byte	2
01301                                           ! 500  0x66,
01302 045C                        66            .byte	$66
01303                                           ! 501  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01304 045D                        5F            .byte	$5F
01305 045E                        4F            .byte	$4F
01306 045F                        50            .byte	$50
01307 0460                        82            .byte	$82
01308 0461                        55            .byte	$55
01309 0462                        81            .byte	$81
01310 0463                        BF            .byte	$BF
01311 0464                        1F            .byte	$1F
01312                                           ! 502  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01313 0465                        00            .byte	0
01314 0466                        4F            .byte	$4F
01315 0467                        0D            .byte	$D
01316 0468                        0E            .byte	$E
01317 0469                        00            .byte	0
01318 046A                        00            .byte	0
01319 046B                        00            .byte	0
01320 046C                        00            .byte	0
01321                                           ! 503  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01322 046D                        9C            .byte	$9C
01323 046E                        8E            .byte	$8E
01324 046F                        8F            .byte	$8F
01325 0470                        28            .byte	$28
01326 0471                        0F            .byte	$F
01327 0472                        96            .byte	$96
01328 0473                        B9            .byte	$B9
01329 0474                        A3            .byte	$A3
01330                                           ! 504  0xff,
01331 0475                        FF            .byte	$FF
01332                                           ! 505  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01333 0476                        00            .byte	0
01334 0477                        08            .byte	8
01335 0478                        08            .byte	8
01336 0479                        08            .byte	8
01337 047A                        08            .byte	8
01338 047B                        08            .byte	8
01339 047C                        08            .byte	8
01340 047D                        08            .byte	8
01341                                           ! 506  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01342 047E                        10            .byte	$10
01343 047F                        18            .byte	$18
01344 0480                        18            .byte	$18
01345 0481                        18            .byte	$18
01346 0482                        18            .byte	$18
01347 0483                        18            .byte	$18
01348 0484                        18            .byte	$18
01349 0485                        18            .byte	$18
01350                                           ! 507  0x0e, 0x00, 0x0f, 0x08,
01351 0486                        0E            .byte	$E
01352 0487                        00            .byte	0
01353 0488                        0F            .byte	$F
01354 0489                        08            .byte	8
01355                                           ! 508  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01356 048A                        00            .byte	0
01357 048B                        00            .byte	0
01358 048C                        00            .byte	0
01359 048D                        00            .byte	0
01360 048E                        00            .byte	0
01361 048F                        10            .byte	$10
01362 0490                        0A            .byte	$A
01363 0491                        0F            .byte	$F
01364 0492                        FF            .byte	$FF
01365                                           ! 509 },
01366                                           ! 510 {
01367                                           ! 511  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01368 0493                        00            .byte	0
01369 0494                        00            .byte	0
01370 0495                        00            .byte	0
01371 0496                        00            .byte	0
01372 0497                        00            .byte	0
01373 0498                        00            .byte	0
01374 0499                        00            .byte	0
01375 049A                        00            .byte	0
01376                                           ! 512  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01377 049B                        00            .byte	0
01378 049C                        00            .byte	0
01379 049D                        00            .byte	0
01380 049E                        00            .byte	0
01381 049F                        00            .byte	0
01382 04A0                        00            .byte	0
01383 04A1                        00            .byte	0
01384 04A2                        00            .byte	0
01385                                           ! 513  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01386 04A3                        00            .byte	0
01387 04A4                        00            .byte	0
01388 04A5                        00            .byte	0
01389 04A6                        00            .byte	0
01390 04A7                        00            .byte	0
01391 04A8                        00            .byte	0
01392 04A9                        00            .byte	0
01393 04AA                        00            .byte	0
01394                                           ! 514  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01395 04AB                        00            .byte	0
01396 04AC                        00            .byte	0
01397 04AD                        00            .byte	0
01398 04AE                        00            .byte	0
01399 04AF                        00            .byte	0
01400 04B0                        00            .byte	0
01401 04B1                        00            .byte	0
01402 04B2                        00            .byte	0
01403                                           ! 515  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01404 04B3                        00            .byte	0
01405 04B4                        00            .byte	0
01406 04B5                        00            .byte	0
01407 04B6                        00            .byte	0
01408 04B7                        00            .byte	0
01409 04B8                        00            .byte	0
01410 04B9                        00            .byte	0
01411 04BA                        00            .byte	0
01412                                           ! 516  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01413 04BB                        00            .byte	0
01414 04BC                        00            .byte	0
01415 04BD                        00            .byte	0
01416 04BE                        00            .byte	0
01417 04BF                        00            .byte	0
01418 04C0                        00            .byte	0
01419 04C1                        00            .byte	0
01420 04C2                        00            .byte	0
01421                                           ! 517  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01422 04C3                        00            .byte	0
01423 04C4                        00            .byte	0
01424 04C5                        00            .byte	0
01425 04C6                        00            .byte	0
01426 04C7                        00            .byte	0
01427 04C8                        00            .byte	0
01428 04C9                        00            .byte	0
01429 04CA                        00            .byte	0
01430                                           ! 518  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01431 04CB                        00            .byte	0
01432 04CC                        00            .byte	0
01433 04CD                        00            .byte	0
01434 04CE                        00            .byte	0
01435 04CF                        00            .byte	0
01436 04D0                        00            .byte	0
01437 04D1                        00            .byte	0
01438 04D2                        00            .byte	0
01439                                           ! 519 },
01440                                           ! 520 {
01441                                           ! 521  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01442 04D3                        00            .byte	0
01443 04D4                        00            .byte	0
01444 04D5                        00            .byte	0
01445 04D6                        00            .byte	0
01446 04D7                        00            .byte	0
01447 04D8                        00            .byte	0
01448 04D9                        00            .byte	0
01449 04DA                        00            .byte	0
01450                                           ! 522  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01451 04DB                        00            .byte	0
01452 04DC                        00            .byte	0
01453 04DD                        00            .byte	0
01454 04DE                        00            .byte	0
01455 04DF                        00            .byte	0
01456 04E0                        00            .byte	0
01457 04E1                        00            .byte	0
01458 04E2                        00            .byte	0
01459                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01460 04E3                        00            .byte	0
01461 04E4                        00            .byte	0
01462 04E5                        00            .byte	0
01463 04E6                        00            .byte	0
01464 04E7                        00            .byte	0
01465 04E8                        00            .byte	0
01466 04E9                        00            .byte	0
01467 04EA                        00            .byte	0
01468                                           ! 524  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01469 04EB                        00            .byte	0
01470 04EC                        00            .byte	0
01471 04ED                        00            .byte	0
01472 04EE                        00            .byte	0
01473 04EF                        00            .byte	0
01474 04F0                        00            .byte	0
01475 04F1                        00            .byte	0
01476 04F2                        00            .byte	0
01477                                           ! 525  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01478 04F3                        00            .byte	0
01479 04F4                        00            .byte	0
01480 04F5                        00            .byte	0
01481 04F6                        00            .byte	0
01482 04F7                        00            .byte	0
01483 04F8                        00            .byte	0
01484 04F9                        00            .byte	0
01485 04FA                        00            .byte	0
01486                                           ! 526  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01487 04FB                        00            .byte	0
01488 04FC                        00            .byte	0
01489 04FD                        00            .byte	0
01490 04FE                        00            .byte	0
01491 04FF                        00            .byte	0
01492 0500                        00            .byte	0
01493 0501                        00            .byte	0
01494 0502                        00            .byte	0
01495                                           ! 527  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01496 0503                        00            .byte	0
01497 0504                        00            .byte	0
01498 0505                        00            .byte	0
01499 0506                        00            .byte	0
01500 0507                        00            .byte	0
01501 0508                        00            .byte	0
01502 0509                        00            .byte	0
01503 050A                        00            .byte	0
01504                                           ! 528  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01505 050B                        00            .byte	0
01506 050C                        00            .byte	0
01507 050D                        00            .byte	0
01508 050E                        00            .byte	0
01509 050F                        00            .byte	0
01510 0510                        00            .byte	0
01511 0511                        00            .byte	0
01512 0512                        00            .byte	0
01513                                           ! 529 },
01514                                           ! 530 {
01515                                           ! 531  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01516 0513                        00            .byte	0
01517 0514                        00            .byte	0
01518 0515                        00            .byte	0
01519 0516                        00            .byte	0
01520 0517                        00            .byte	0
01521 0518                        00            .byte	0
01522 0519                        00            .byte	0
01523 051A                        00            .byte	0
01524                                           ! 532  0x00,
01525                                           ! 532  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01526 051B                        00            .byte	0
01527 051C                        00            .byte	0
01528 051D                        00            .byte	0
01529 051E                        00            .byte	0
01530 051F                        00            .byte	0
01531 0520                        00            .byte	0
01532 0521                        00            .byte	0
01533 0522                        00            .byte	0
01534                                           ! 533  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01535 0523                        00            .byte	0
01536 0524                        00            .byte	0
01537 0525                        00            .byte	0
01538 0526                        00            .byte	0
01539 0527                        00            .byte	0
01540 0528                        00            .byte	0
01541 0529                        00            .byte	0
01542 052A                        00            .byte	0
01543                                           ! 534  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01544 052B                        00            .byte	0
01545 052C                        00            .byte	0
01546 052D                        00            .byte	0
01547 052E                        00            .byte	0
01548 052F                        00            .byte	0
01549 0530                        00            .byte	0
01550 0531                        00            .byte	0
01551 0532                        00            .byte	0
01552                                           ! 535  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01553 0533                        00            .byte	0
01554 0534                        00            .byte	0
01555 0535                        00            .byte	0
01556 0536                        00            .byte	0
01557 0537                        00            .byte	0
01558 0538                        00            .byte	0
01559 0539                        00            .byte	0
01560 053A                        00            .byte	0
01561                                           ! 536  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01562 053B                        00            .byte	0
01563 053C                        00            .byte	0
01564 053D                        00            .byte	0
01565 053E                        00            .byte	0
01566 053F                        00            .byte	0
01567 0540                        00            .byte	0
01568 0541                        00            .byte	0
01569 0542                        00            .byte	0
01570                                           ! 537  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01571 0543                        00            .byte	0
01572 0544                        00            .byte	0
01573 0545                        00            .byte	0
01574 0546                        00            .byte	0
01575 0547                        00            .byte	0
01576 0548                        00            .byte	0
01577 0549                        00            .byte	0
01578 054A                        00            .byte	0
01579                                           ! 538  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01580 054B                        00            .byte	0
01581 054C                        00            .byte	0
01582 054D                        00            .byte	0
01583 054E                        00            .byte	0
01584 054F                        00            .byte	0
01585 0550                        00            .byte	0
01586 0551                        00            .byte	0
01587 0552                        00            .byte	0
01588                                           ! 539 },
01589                                           ! 540 {
01590                                           ! 541  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01591 0553                        00            .byte	0
01592 0554                        00            .byte	0
01593 0555                        00            .byte	0
01594 0556                        00            .byte	0
01595 0557                        00            .byte	0
01596 0558                        00            .byte	0
01597 0559                        00            .byte	0
01598 055A                        00            .byte	0
01599                                           ! 542  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01600 055B                        00            .byte	0
01601 055C                        00            .byte	0
01602 055D                        00            .byte	0
01603 055E                        00            .byte	0
01604 055F                        00            .byte	0
01605 0560                        00            .byte	0
01606 0561                        00            .byte	0
01607 0562                        00            .byte	0
01608                                           ! 543  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01609 0563                        00            .byte	0
01610 0564                        00            .byte	0
01611 0565                        00            .byte	0
01612 0566                        00            .byte	0
01613 0567                        00            .byte	0
01614 0568                        00            .byte	0
01615 0569                        00            .byte	0
01616 056A                        00            .byte	0
01617                                           ! 544  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01618 056B                        00            .byte	0
01619 056C                        00            .byte	0
01620 056D                        00            .byte	0
01621 056E                        00            .byte	0
01622 056F                        00            .byte	0
01623 0570                        00            .byte	0
01624 0571                        00            .byte	0
01625 0572                        00            .byte	0
01626                                           ! 545  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01627 0573                        00            .byte	0
01628 0574                        00            .byte	0
01629 0575                        00            .byte	0
01630 0576                        00            .byte	0
01631 0577                        00            .byte	0
01632 0578                        00            .byte	0
01633 0579                        00            .byte	0
01634 057A                        00            .byte	0
01635                                           ! 546  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01636 057B                        00            .byte	0
01637 057C                        00            .byte	0
01638 057D                        00            .byte	0
01639 057E                        00            .byte	0
01640 057F                        00            .byte	0
01641 0580                        00            .byte	0
01642 0581                        00            .byte	0
01643 0582                        00            .byte	0
01644                                           ! 547  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01645 0583                        00            .byte	0
01646 0584                        00            .byte	0
01647 0585                        00            .byte	0
01648 0586                        00            .byte	0
01649 0587                        00            .byte	0
01650 0588                        00            .byte	0
01651 0589                        00            .byte	0
01652 058A                        00            .byte	0
01653                                           ! 548  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01654 058B                        00            .byte	0
01655 058C                        00            .byte	0
01656 058D                        00            .byte	0
01657 058E                        00            .byte	0
01658 058F                        00            .byte	0
01659 0590                        00            .byte	0
01660 0591                        00            .byte	0
01661 0592                        00            .byte	0
01662                                           ! 549 },
01663                                           ! 550 {
01664                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01665 0593                        00            .byte	0
01666 0594                        00            .byte	0
01667 0595                        00            .byte	0
01668 0596                        00            .byte	0
01669 0597                        00            .byte	0
01670 0598                        00            .byte	0
01671 0599                        00            .byte	0
01672 059A                        00            .byte	0
01673                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01674 059B                        00            .byte	0
01675 059C                        00            .byte	0
01676 059D                        00            .byte	0
01677 059E                        00            .byte	0
01678 059F                        00            .byte	0
01679 05A0                        00            .byte	0
01680 05A1                        00            .byte	0
01681 05A2                        00            .byte	0
01682                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01683 05A3                        00            .byte	0
01684 05A4                        00            .byte	0
01685 05A5                        00            .byte	0
01686 05A6                        00            .byte	0
01687 05A7                        00            .byte	0
01688 05A8                        00            .byte	0
01689 05A9                        00            .byte	0
01690 05AA                        00            .byte	0
01691                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01692 05AB                        00            .byte	0
01693 05AC                        00            .byte	0
01694 05AD                        00            .byte	0
01695 05AE                        00            .byte	0
01696 05AF                        00            .byte	0
01697 05B0                        00            .byte	0
01698 05B1                        00            .byte	0
01699 05B2                        00            .byte	0
01700                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01701 05B3                        00            .byte	0
01702 05B4                        00            .byte	0
01703 05B5                        00            .byte	0
01704 05B6                        00            .byte	0
01705 05B7                        00            .byte	0
01706 05B8                        00            .byte	0
01707 05B9                        00            .byte	0
01708 05BA                        00            .byte	0
01709                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01710 05BB                        00            .byte	0
01711 05BC                        00            .byte	0
01712 05BD                        00            .byte	0
01713 05BE                        00            .byte	0
01714 05BF                        00            .byte	0
01715 05C0                        00            .byte	0
01716 05C1                        00            .byte	0
01717 05C2                        00            .byte	0
01718                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01719 05C3                        00            .byte	0
01720 05C4                        00            .byte	0
01721 05C5                        00            .byte	0
01722 05C6                        00            .byte	0
01723 05C7                        00            .byte	0
01724 05C8                        00            .byte	0
01725 05C9                        00            .byte	0
01726 05CA                        00            .byte	0
01727                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01728 05CB                        00            .byte	0
01729 05CC                        00            .byte	0
01730 05CD                        00            .byte	0
01731 05CE                        00            .byte	0
01732 05CF                        00            .byte	0
01733 05D0                        00            .byte	0
01734 05D1                        00            .byte	0
01735 05D2                        00            .byte	0
01736                                           ! 559 },
01737                                           ! 560 {
01738                                           ! 561  40, 24, 8, 0x00, 0x20,
01739 05D3                        28            .byte	$28
01740 05D4                        18            .byte	$18
01741 05D5                        08            .byte	8
01742 05D6                        00            .byte	0
01743 05D7                        20            .byte	$20
01744                                           ! 562  0x09, 0x0f, 0x00, 0x06,
01745 05D8                        09            .byte	9
01746 05D9                        0F            .byte	$F
01747 05DA                        00            .byte	0
01748 05DB                        06            .byte	6
01749                                           ! 563  0x63,
01750 05DC                        63            .byte	$63
01751                                           ! 564  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01752 05DD                        2D            .byte	$2D
01753 05DE                        27            .byte	$27
01754 05DF                        28            .byte	$28
01755 05E0                        90            .byte	$90
01756 05E1                        2B            .byte	$2B
01757 05E2                        80            .byte	$80
01758 05E3                        BF            .byte	$BF
01759 05E4                        1F            .byte	$1F
01760                                           ! 565  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01761 05E5                        00            .byte	0
01762 05E6                        C0            .byte	$C0
01763 05E7                        00            .byte	0
01764 05E8                        00            .byte	0
01765 05E9                        00            .byte	0
01766 05EA                        00            .byte	0
01767 05EB                        00            .byte	0
01768 05EC                        00            .byte	0
01769                                           ! 566  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01770 05ED                        9C            .byte	$9C
01771 05EE                        8E            .byte	$8E
01772 05EF                        8F            .byte	$8F
01773 05F0                        14            .byte	$14
01774 05F1                        00            .byte	0
01775 05F2                        96            .byte	$96
01776 05F3                        B9            .byte	$B9
01777 05F4                        E3            .byte	$E3
01778                                           ! 567  0xff,
01779 05F5                        FF            .byte	$FF
01780                                           ! 568  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01781 05F6                        00            .byte	0
01782 05F7                        01            .byte	1
01783 05F8                        02            .byte	2
01784 05F9                        03            .byte	3
01785 05FA                        04            .byte	4
01786 05FB                        05            .byte	5
01787 05FC                        06            .byte	6
01788 05FD                        07            .byte	7
01789                                           ! 569  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01790 05FE                        10            .byte	$10
01791 05FF                        11            .byte	$11
01792 0600                        12            .byte	$12
01793 0601                        13            .byte	$13
01794 0602                        14            .byte	$14
01795 0603                        15            .byte	$15
01796 0604                        16            .byte	$16
01797 0605                        17            .byte	$17
01798                                           ! 570  0x01, 0x00, 0x0f, 0x00,
01799 0606                        01            .byte	1
01800 0607                        00            .byte	0
01801 0608                        0F            .byte	$F
01802 0609                        00            .byte	0
01803                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01804 060A                        00            .byte	0
01805 060B                        00            .byte	0
01806 060C                        00            .byte	0
01807 060D                        00            .byte	0
01808 060E                        00            .byte	0
01809 060F                        00            .byte	0
01810 0610                        05            .byte	5
01811 0611                        0F            .byte	$F
01812 0612                        FF            .byte	$FF
01813                                           ! 572 },
01814                                           ! 573 {
01815                                           ! 574  80, 24, 8, 0x00, 0x40,
01816 0613                        50            .byte	$50
01817 0614                        18            .byte	$18
01818 0615                        08            .byte	8
01819 0616                        00            .byte	0
01820 0617                        40            .byte	$40
01821                                           ! 575  0x01, 0x0f, 0x00, 0x06,
01822 0618                        01            .byte	1
01823 0619                        0F            .byte	$F
01824 061A                        00            .byte	0
01825 061B                        06            .byte	6
01826                                           ! 576  0x63,
01827 061C                        63            .byte	$63
01828                                           ! 577  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01829 061D                        5F            .byte	$5F
01830 061E                        4F            .byte	$4F
01831 061F                        50            .byte	$50
01832 0620                        82            .byte	$82
01833 0621                        54            .byte	$54
01834 0622                        80            .byte	$80
01835 0623                        BF            .byte	$BF
01836 0624                        1F            .byte	$1F
01837                                           ! 578  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01838 0625                        00            .byte	0
01839 0626                        C0            .byte	$C0
01840 0627                        00            .byte	0
01841 0628                        00            .byte	0
01842 0629                        00            .byte	0
01843 062A                        00            .byte	0
01844 062B                        00            .byte	0
01845 062C                        00            .byte	0
01846                                           ! 579  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01847 062D                        9C            .byte	$9C
01848 062E                        8E            .byte	$8E
01849 062F                        8F            .byte	$8F
01850 0630                        28            .byte	$28
01851 0631                        00            .byte	0
01852 0632                        96            .byte	$96
01853 0633                        B9            .byte	$B9
01854 0634                        E3            .byte	$E3
01855                                           ! 580  0xff,
01856 0635                        FF            .byte	$FF
01857                                           ! 581  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01858 0636                        00            .byte	0
01859 0637                        01            .byte	1
01860 0638                        02            .byte	2
01861 0639                        03            .byte	3
01862 063A                        04            .byte	4
01863 063B                        05            .byte	5
01864 063C                        06            .byte	6
01865 063D                        07            .byte	7
01866                                           ! 582  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01867 063E                        10            .byte	$10
01868 063F                        11            .byte	$11
01869 0640                        12            .byte	$12
01870 0641                        13            .byte	$13
01871 0642                        14            .byte	$14
01872 0643                        15            .byte	$15
01873 0644                        16            .byte	$16
01874 0645                        17            .byte	$17
01875                                           ! 583  0x01, 0x00, 0x0f, 0x00,
01876 0646                        01            .byte	1
01877 0647                        00            .byte	0
01878 0648                        0F            .byte	$F
01879 0649                        00            .byte	0
01880                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01881 064A                        00            .byte	0
01882 064B                        00            .byte	0
01883 064C                        00            .byte	0
01884 064D                        00            .byte	0
01885 064E                        00            .byte	0
01886 064F                        00            .byte	0
01887 0650                        05            .byte	5
01888 0651                        0F            .byte	$F
01889 0652                        FF            .byte	$FF
01890                                           ! 585 },
01891                                           ! 586 {
01892                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01893 0653                        00            .byte	0
01894 0654                        00            .byte	0
01895 0655                        00            .byte	0
01896 0656                        00            .byte	0
01897 0657                        00            .byte	0
01898 0658                        00            .byte	0
01899 0659                        00            .byte	0
01900 065A                        00            .byte	0
01901                                           ! 588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01902 065B                        00            .byte	0
01903 065C                        00            .byte	0
01904 065D                        00            .byte	0
01905 065E                        00            .byte	0
01906 065F                        00            .byte	0
01907 0660                        00            .byte	0
01908 0661                        00            .byte	0
01909 0662                        00            .byte	0
01910                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x0
01911 0663                        00            .byte	0
01912 0664                        00            .byte	0
01913 0665                        00            .byte	0
01914 0666                        00            .byte	0
01915                                           ! 589 0, 0x00, 0x00, 0x00,
01916 0667                        00            .byte	0
01917 0668                        00            .byte	0
01918 0669                        00            .byte	0
01919 066A                        00            .byte	0
01920                                           ! 590  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01921 066B                        00            .byte	0
01922 066C                        00            .byte	0
01923 066D                        00            .byte	0
01924 066E                        00            .byte	0
01925 066F                        00            .byte	0
01926 0670                        00            .byte	0
01927 0671                        00            .byte	0
01928 0672                        00            .byte	0
01929                                           ! 591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01930 0673                        00            .byte	0
01931 0674                        00            .byte	0
01932 0675                        00            .byte	0
01933 0676                        00            .byte	0
01934 0677                        00            .byte	0
01935 0678                        00            .byte	0
01936 0679                        00            .byte	0
01937 067A                        00            .byte	0
01938                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01939 067B                        00            .byte	0
01940 067C                        00            .byte	0
01941 067D                        00            .byte	0
01942 067E                        00            .byte	0
01943 067F                        00            .byte	0
01944 0680                        00            .byte	0
01945 0681                        00            .byte	0
01946 0682                        00            .byte	0
01947                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01948 0683                        00            .byte	0
01949 0684                        00            .byte	0
01950 0685                        00            .byte	0
01951 0686                        00            .byte	0
01952 0687                        00            .byte	0
01953 0688                        00            .byte	0
01954 0689                        00            .byte	0
01955 068A                        00            .byte	0
01956                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01957 068B                        00            .byte	0
01958 068C                        00            .byte	0
01959 068D                        00            .byte	0
01960 068E                        00            .byte	0
01961 068F                        00            .byte	0
01962 0690                        00            .byte	0
01963 0691                        00            .byte	0
01964 0692                        00            .byte	0
01965                                           ! 595 },
01966                                           ! 596 {
01967                                           ! 597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01968 0693                        00            .byte	0
01969 0694                        00            .byte	0
01970 0695                        00            .byte	0
01971 0696                        00            .byte	0
01972 0697                        00            .byte	0
01973 0698                        00            .byte	0
01974 0699                        00            .byte	0
01975 069A                        00            .byte	0
01976                                           ! 598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01977 069B                        00            .byte	0
01978 069C                        00            .byte	0
01979 069D                        00            .byte	0
01980 069E                        00            .byte	0
01981 069F                        00            .byte	0
01982 06A0                        00            .byte	0
01983 06A1                        00            .byte	0
01984 06A2                        00            .byte	0
01985                                           ! 599  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01986 06A3                        00            .byte	0
01987 06A4                        00            .byte	0
01988 06A5                        00            .byte	0
01989 06A6                        00            .byte	0
01990 06A7                        00            .byte	0
01991 06A8                        00            .byte	0
01992 06A9                        00            .byte	0
01993 06AA                        00            .byte	0
01994                                           ! 600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01995 06AB                        00            .byte	0
01996 06AC                        00            .byte	0
01997 06AD                        00            .byte	0
01998 06AE                        00            .byte	0
01999 06AF                        00            .byte	0
02000 06B0                        00            .byte	0
02001 06B1                        00            .byte	0
02002 06B2                        00            .byte	0
02003                                           ! 601  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02004 06B3                        00            .byte	0
02005 06B4                        00            .byte	0
02006 06B5                        00            .byte	0
02007 06B6                        00            .byte	0
02008 06B7                        00            .byte	0
02009 06B8                        00            .byte	0
02010 06B9                        00            .byte	0
02011 06BA                        00            .byte	0
02012                                           ! 602  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02013 06BB                        00            .byte	0
02014 06BC                        00            .byte	0
02015 06BD                        00            .byte	0
02016 06BE                        00            .byte	0
02017 06BF                        00            .byte	0
02018 06C0                        00            .byte	0
02019 06C1                        00            .byte	0
02020 06C2                        00            .byte	0
02021                                           ! 603  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02022 06C3                        00            .byte	0
02023 06C4                        00            .byte	0
02024 06C5                        00            .byte	0
02025 06C6                        00            .byte	0
02026 06C7                        00            .byte	0
02027 06C8                        00            .byte	0
02028 06C9                        00            .byte	0
02029 06CA                        00            .byte	0
02030                                           ! 604  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02031 06CB                        00            .byte	0
02032 06CC                        00            .byte	0
02033 06CD                        00            .byte	0
02034 06CE                        00            .byte	0
02035 06CF                        00            .byte	0
02036 06D0                        00            .byte	0
02037 06D1                        00            .byte	0
02038 06D2                        00            .byte	0
02039                                           ! 605 },
02040                                           ! 606 {
02041                                           ! 607  80, 24, 14, 0x00, 0x80,
02042 06D3                        50            .byte	$50
02043 06D4                        18            .byte	$18
02044 06D5                        0E            .byte	$E
02045 06D6                        00            .byte	0
02046 06D7                        80            .byte	$80
02047                                           ! 608  0x01, 0x0f, 0x00, 0x06,
02048 06D8                        01            .byte	1
02049 06D9                        0F            .byte	$F
02050 06DA                        00            .byte	0
02051 06DB                        06            .byte	6
02052                                           ! 609  0xa3,
02053 06DC                        A3            .byte	$A3
02054                                           ! 610  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02055 06DD                        5F            .byte	$5F
02056 06DE                        4F            .byte	$4F
02057 06DF                        50            .byte	$50
02058 06E0                        82            .byte	$82
02059 06E1                        54            .byte	$54
02060 06E2                        80            .byte	$80
02061 06E3                        BF            .byte	$BF
02062 06E4                        1F            .byte	$1F
02063                                           ! 611  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02064 06E5                        00            .byte	0
02065 06E6                        40            .byte	$40
02066 06E7                        00            .byte	0
02067 06E8                        00            .byte	0
02068 06E9                        00            .byte	0
02069 06EA                        00            .byte	0
02070 06EB                        00            .byte	0
02071 06EC                        00            .byte	0
02072                                           ! 612  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02073 06ED                        83            .byte	$83
02074 06EE                        85            .byte	$85
02075 06EF                        5D            .byte	$5D
02076 06F0                        28            .byte	$28
02077 06F1                        0F            .byte	$F
02078 06F2                        63            .byte	$63
02079 06F3                        BA            .byte	$BA
02080 06F4                        E3            .byte	$E3
02081                                           ! 613  0xff,
02082 06F5                        FF            .byte	$FF
02083                                           ! 614  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02084 06F6                        00            .byte	0
02085 06F7                        08            .byte	8
02086 06F8                        00            .byte	0
02087 06F9                        00            .byte	0
02088 06FA                        18            .byte	$18
02089 06FB                        18            .byte	$18
02090 06FC                        00            .byte	0
02091 06FD                        00            .byte	0
02092                                           ! 615  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02093 06FE                        00            .byte	0
02094 06FF                        08            .byte	8
02095 0700                        00            .byte	0
02096 0701                        00            .byte	0
02097 0702                        00            .byte	0
02098 0703                        18            .byte	$18
02099 0704                        00            .byte	0
02100 0705                        00            .byte	0
02101                                           ! 616  0x01, 0x00, 0x01, 0x00,
02102 0706                        01            .byte	1
02103 0707                        00            .byte	0
02104 0708                        01            .byte	1
02105 0709                        00            .byte	0
02106                                           ! 617  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02107 070A                        00            .byte	0
02108 070B                        00            .byte	0
02109 070C                        00            .byte	0
02110 070D                        00            .byte	0
02111 070E                        00            .byte	0
02112 070F                        00            .byte	0
02113 0710                        05            .byte	5
02114 0711                        0F            .byte	$F
02115 0712                        FF            .byte	$FF
02116                                           ! 618 },
02117                                           ! 619 {
02118                                           ! 620  80, 24, 14, 0x00, 0x80,
02119 0713                        50            .byte	$50
02120 0714                        18            .byte	$18
02121 0715                        0E            .byte	$E
02122 0716                        00            .byte	0
02123 0717                        80            .byte	$80
02124                                           ! 621  0x01, 0x0f, 0x00, 0x06,
02125 0718                        01            .byte	1
02126 0719                        0F            .byte	$F
02127 071A                        00            .byte	0
02128 071B                        06            .byte	6
02129                                           ! 622  0xa3,
02130 071C                        A3            .byte	$A3
02131                                           ! 623  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02132 071D                        5F            .byte	$5F
02133 071E                        4F            .byte	$4F
02134 071F                        50            .byte	$50
02135 0720                        82            .byte	$82
02136 0721                        54            .byte	$54
02137 0722                        80            .byte	$80
02138 0723                        BF            .byte	$BF
02139 0724                        1F            .byte	$1F
02140                                           ! 624  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02141 0725                        00            .byte	0
02142 0726                        40            .byte	$40
02143 0727                        00            .byte	0
02144 0728                        00            .byte	0
02145 0729                        00            .byte	0
02146 072A                        00            .byte	0
02147 072B                        00            .byte	0
02148 072C                        00            .byte	0
02149                                           ! 625  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02150 072D                        83            .byte	$83
02151 072E                        85            .byte	$85
02152 072F                        5D            .byte	$5D
02153 0730                        28            .byte	$28
02154 0731                        0F            .byte	$F
02155 0732                        63            .byte	$63
02156 0733                        BA            .byte	$BA
02157 0734                        E3            .byte	$E3
02158                                           ! 626  0xff,
02159 0735                        FF            .byte	$FF
02160                                           ! 627  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02161 0736                        00            .byte	0
02162 0737                        01            .byte	1
02163 0738                        02            .byte	2
02164 0739                        03            .byte	3
02165 073A                        04            .byte	4
02166 073B                        05            .byte	5
02167 073C                        14            .byte	$14
02168 073D                        07            .byte	7
02169                                           ! 628  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02170 073E                        38            .byte	$38
02171 073F                        39            .byte	$39
02172 0740                        3A            .byte	$3A
02173 0741                        3B            .byte	$3B
02174 0742                        3C            .byte	$3C
02175 0743                        3D            .byte	$3D
02176 0744                        3E            .byte	$3E
02177 0745                        3F            .byte	$3F
02178                                           ! 629  0x01, 0x00, 0x0f, 0x00,
02179 0746                        01            .byte	1
02180 0747                        00            .byte	0
02181 0748                        0F            .byte	$F
02182 0749                        00            .byte	0
02183                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02184 074A                        00            .byte	0
02185 074B                        00            .byte	0
02186 074C                        00            .byte	0
02187 074D                        00            .byte	0
02188 074E                        00            .byte	0
02189 074F                        00            .byte	0
02190 0750                        05            .byte	5
02191 0751                        0F            .byte	$F
02192 0752                        FF            .byte	$FF
02193                                           ! 631 },
02194                                           ! 632 {
02195                                           ! 633  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02196 0753                        00            .byte	0
02197 0754                        00            .byte	0
02198 0755                        00            .byte	0
02199 0756                        00            .byte	0
02200 0757                        00            .byte	0
02201 0758                        00            .byte	0
02202 0759                        00            .byte	0
02203 075A                        00            .byte	0
02204                                           ! 634  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02205 075B                        00            .byte	0
02206 075C                        00            .byte	0
02207 075D                        00            .byte	0
02208 075E                        00            .byte	0
02209 075F                        00            .byte	0
02210 0760                        00            .byte	0
02211 0761                        00            .byte	0
02212 0762                        00            .byte	0
02213                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02214 0763                        00            .byte	0
02215 0764                        00            .byte	0
02216 0765                        00            .byte	0
02217 0766                        00            .byte	0
02218 0767                        00            .byte	0
02219 0768                        00            .byte	0
02220 0769                        00            .byte	0
02221 076A                        00            .byte	0
02222                                           ! 636  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02223 076B                        00            .byte	0
02224 076C                        00            .byte	0
02225 076D                        00            .byte	0
02226 076E                        00            .byte	0
02227 076F                        00            .byte	0
02228 0770                        00            .byte	0
02229 0771                        00            .byte	0
02230 0772                        00            .byte	0
02231                                           ! 637  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02232 0773                        00            .byte	0
02233 0774                        00            .byte	0
02234 0775                        00            .byte	0
02235 0776                        00            .byte	0
02236 0777                        00            .byte	0
02237 0778                        00            .byte	0
02238 0779                        00            .byte	0
02239 077A                        00            .byte	0
02240                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02241 077B                        00            .byte	0
02242 077C                        00            .byte	0
02243 077D                        00            .byte	0
02244 077E                        00            .byte	0
02245 077F                        00            .byte	0
02246 0780                        00            .byte	0
02247 0781                        00            .byte	0
02248 0782                        00            .byte	0
02249                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02250 0783                        00            .byte	0
02251 0784                        00            .byte	0
02252 0785                        00            .byte	0
02253 0786                        00            .byte	0
02254 0787                        00            .byte	0
02255 0788                        00            .byte	0
02256 0789                        00            .byte	0
02257 078A                        00            .byte	0
02258                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02259 078B                        00            .byte	0
02260 078C                        00            .byte	0
02261 078D                        00            .byte	0
02262 078E                        00            .byte	0
02263 078F                        00            .byte	0
02264 0790                        00            .byte	0
02265 0791                        00            .byte	0
02266 0792                        00            .byte	0
02267                                           ! 641 },
02268                                           ! 642 {
02269                                           ! 643  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02270 0793                        00            .byte	0
02271 0794                        00            .byte	0
02272 0795                        00            .byte	0
02273 0796                        00            .byte	0
02274 0797                        00            .byte	0
02275 0798                        00            .byte	0
02276 0799                        00            .byte	0
02277 079A                        00            .byte	0
02278                                           ! 644  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02279 079B                        00            .byte	0
02280 079C                        00            .byte	0
02281 079D                        00            .byte	0
02282 079E                        00            .byte	0
02283 079F                        00            .byte	0
02284 07A0                        00            .byte	0
02285 07A1                        00            .byte	0
02286 07A2                        00            .byte	0
02287                                           ! 645  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02288 07A3                        00            .byte	0
02289 07A4                        00            .byte	0
02290 07A5                        00            .byte	0
02291 07A6                        00            .byte	0
02292 07A7                        00            .byte	0
02293 07A8                        00            .byte	0
02294 07A9                        00            .byte	0
02295 07AA                        00            .byte	0
02296                                           ! 646  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02297 07AB                        00            .byte	0
02298 07AC                        00            .byte	0
02299 07AD                        00            .byte	0
02300 07AE                        00            .byte	0
02301 07AF                        00            .byte	0
02302 07B0                        00            .byte	0
02303 07B1                        00            .byte	0
02304                                           ! 646 
02305 07B2                        00            .byte	0
02306                                           ! 647  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02307 07B3                        00            .byte	0
02308 07B4                        00            .byte	0
02309 07B5                        00            .byte	0
02310 07B6                        00            .byte	0
02311 07B7                        00            .byte	0
02312 07B8                        00            .byte	0
02313 07B9                        00            .byte	0
02314 07BA                        00            .byte	0
02315                                           ! 648  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02316 07BB                        00            .byte	0
02317 07BC                        00            .byte	0
02318 07BD                        00            .byte	0
02319 07BE                        00            .byte	0
02320 07BF                        00            .byte	0
02321 07C0                        00            .byte	0
02322 07C1                        00            .byte	0
02323 07C2                        00            .byte	0
02324                                           ! 649  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02325 07C3                        00            .byte	0
02326 07C4                        00            .byte	0
02327 07C5                        00            .byte	0
02328 07C6                        00            .byte	0
02329 07C7                        00            .byte	0
02330 07C8                        00            .byte	0
02331 07C9                        00            .byte	0
02332 07CA                        00            .byte	0
02333                                           ! 650  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02334 07CB                        00            .byte	0
02335 07CC                        00            .byte	0
02336 07CD                        00            .byte	0
02337 07CE                        00            .byte	0
02338 07CF                        00            .byte	0
02339 07D0                        00            .byte	0
02340 07D1                        00            .byte	0
02341 07D2                        00            .byte	0
02342                                           ! 651 },
02343                                           ! 652 {
02344                                           ! 653  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02345 07D3                        00            .byte	0
02346 07D4                        00            .byte	0
02347 07D5                        00            .byte	0
02348 07D6                        00            .byte	0
02349 07D7                        00            .byte	0
02350 07D8                        00            .byte	0
02351 07D9                        00            .byte	0
02352 07DA                        00            .byte	0
02353                                           ! 654  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02354 07DB                        00            .byte	0
02355 07DC                        00            .byte	0
02356 07DD                        00            .byte	0
02357 07DE                        00            .byte	0
02358 07DF                        00            .byte	0
02359 07E0                        00            .byte	0
02360 07E1                        00            .byte	0
02361 07E2                        00            .byte	0
02362                                           ! 655  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02363 07E3                        00            .byte	0
02364 07E4                        00            .byte	0
02365 07E5                        00            .byte	0
02366 07E6                        00            .byte	0
02367 07E7                        00            .byte	0
02368 07E8                        00            .byte	0
02369 07E9                        00            .byte	0
02370 07EA                        00            .byte	0
02371                                           ! 656  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02372 07EB                        00            .byte	0
02373 07EC                        00            .byte	0
02374 07ED                        00            .byte	0
02375 07EE                        00            .byte	0
02376 07EF                        00            .byte	0
02377 07F0                        00            .byte	0
02378 07F1                        00            .byte	0
02379 07F2                        00            .byte	0
02380                                           ! 657  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02381 07F3                        00            .byte	0
02382 07F4                        00            .byte	0
02383 07F5                        00            .byte	0
02384 07F6                        00            .byte	0
02385 07F7                        00            .byte	0
02386 07F8                        00            .byte	0
02387 07F9                        00            .byte	0
02388 07FA                        00            .byte	0
02389                                           ! 658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02390 07FB                        00            .byte	0
02391 07FC                        00            .byte	0
02392 07FD                        00            .byte	0
02393 07FE                        00            .byte	0
02394 07FF                        00            .byte	0
02395 0800                        00            .byte	0
02396 0801                        00            .byte	0
02397 0802                        00            .byte	0
02398                                           ! 659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02399 0803                        00            .byte	0
02400 0804                        00            .byte	0
02401 0805                        00            .byte	0
02402 0806                        00            .byte	0
02403 0807                        00            .byte	0
02404 0808                        00            .byte	0
02405 0809                        00            .byte	0
02406 080A                        00            .byte	0
02407                                           ! 660  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02408 080B                        00            .byte	0
02409 080C                        00            .byte	0
02410 080D                        00            .byte	0
02411 080E                        00            .byte	0
02412 080F                        00            .byte	0
02413 0810                        00            .byte	0
02414 0811                        00            .byte	0
02415 0812                        00            .byte	0
02416                                           ! 661 },
02417                                           ! 662 {
02418                                           ! 663  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02419 0813                        00            .byte	0
02420 0814                        00            .byte	0
02421 0815                        00            .byte	0
02422 0816                        00            .byte	0
02423 0817                        00            .byte	0
02424 0818                        00            .byte	0
02425 0819                        00            .byte	0
02426 081A                        00            .byte	0
02427                                           ! 664  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02428 081B                        00            .byte	0
02429 081C                        00            .byte	0
02430 081D                        00            .byte	0
02431 081E                        00            .byte	0
02432 081F                        00            .byte	0
02433 0820                        00            .byte	0
02434 0821                        00            .byte	0
02435 0822                        00            .byte	0
02436                                           ! 665  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02437 0823                        00            .byte	0
02438 0824                        00            .byte	0
02439 0825                        00            .byte	0
02440 0826                        00            .byte	0
02441 0827                        00            .byte	0
02442 0828                        00            .byte	0
02443 0829                        00            .byte	0
02444 082A                        00            .byte	0
02445                                           ! 666  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02446 082B                        00            .byte	0
02447 082C                        00            .byte	0
02448 082D                        00            .byte	0
02449 082E                        00            .byte	0
02450 082F                        00            .byte	0
02451 0830                        00            .byte	0
02452 0831                        00            .byte	0
02453 0832                        00            .byte	0
02454                                           ! 667  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02455 0833                        00            .byte	0
02456 0834                        00            .byte	0
02457 0835                        00            .byte	0
02458 0836                        00            .byte	0
02459 0837                        00            .byte	0
02460 0838                        00            .byte	0
02461 0839                        00            .byte	0
02462 083A                        00            .byte	0
02463                                           ! 668  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02464 083B                        00            .byte	0
02465 083C                        00            .byte	0
02466 083D                        00            .byte	0
02467 083E                        00            .byte	0
02468 083F                        00            .byte	0
02469 0840                        00            .byte	0
02470 0841                        00            .byte	0
02471 0842                        00            .byte	0
02472                                           ! 669  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02473 0843                        00            .byte	0
02474 0844                        00            .byte	0
02475 0845                        00            .byte	0
02476 0846                        00            .byte	0
02477 0847                        00            .byte	0
02478 0848                        00            .byte	0
02479 0849                        00            .byte	0
02480 084A                        00            .byte	0
02481                                           ! 670  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02482 084B                        00            .byte	0
02483 084C                        00            .byte	0
02484 084D                        00            .byte	0
02485 084E                        00            .byte	0
02486 084F                        00            .byte	0
02487 0850                        00            .byte	0
02488 0851                        00            .byte	0
02489 0852                        00            .byte	0
02490                                           ! 671 },
02491                                           ! 672 {
02492                                           ! 673  40, 24, 16, 0x00, 0x08,
02493 0853                        28            .byte	$28
02494 0854                        18            .byte	$18
02495 0855                        10            .byte	$10
02496 0856                        00            .byte	0
02497 0857                        08            .byte	8
02498                                           ! 674  0x08, 0x03, 0x00, 0x02,
02499 0858                        08            .byte	8
02500 0859                        03            .byte	3
02501 085A                        00            .byte	0
02502 085B                        02            .byte	2
02503                                           ! 675  0x67,
02504 085C                        67            .byte	$67
02505                                           ! 676  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02506 085D                        2D            .byte	$2D
02507 085E                        27            .byte	$27
02508 085F                        28            .byte	$28
02509 0860                        90            .byte	$90
02510 0861                        2B            .byte	$2B
02511 0862                        A0            .byte	$A0
02512 0863                        BF            .byte	$BF
02513 0864                        1F            .byte	$1F
02514                                           ! 677  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02515 0865                        00            .byte	0
02516 0866                        4F            .byte	$4F
02517 0867                        0D            .byte	$D
02518 0868                        0E            .byte	$E
02519 0869                        00            .byte	0
02520 086A                        00            .byte	0
02521 086B                        00            .byte	0
02522 086C                        00            .byte	0
02523                                           ! 678  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02524 086D                        9C            .byte	$9C
02525 086E                        8E            .byte	$8E
02526 086F                        8F            .byte	$8F
02527 0870                        14            .byte	$14
02528 0871                        1F            .byte	$1F
02529 0872                        96            .byte	$96
02530 0873                        B9            .byte	$B9
02531 0874                        A3            .byte	$A3
02532                                           ! 679  0xff,
02533 0875                        FF            .byte	$FF
02534                                           ! 680  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02535 0876                        00            .byte	0
02536 0877                        01            .byte	1
02537 0878                        02            .byte	2
02538 0879                        03            .byte	3
02539 087A                        04            .byte	4
02540 087B                        05            .byte	5
02541 087C                        14            .byte	$14
02542 087D                        07            .byte	7
02543                                           ! 681  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02544 087E                        38            .byte	$38
02545 087F                        39            .byte	$39
02546 0880                        3A            .byte	$3A
02547 0881                        3B            .byte	$3B
02548 0882                        3C            .byte	$3C
02549 0883                        3D            .byte	$3D
02550 0884                        3E            .byte	$3E
02551 0885                        3F            .byte	$3F
02552                                           ! 682  0x0c, 0x00, 0x0f, 0x08,
02553 0886                        0C            .byte	$C
02554 0887                        00            .byte	0
02555 0888                        0F            .byte	$F
02556 0889                        08            .byte	8
02557                                           ! 683  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02558 088A                        00            .byte	0
02559 088B                        00            .byte	0
02560 088C                        00            .byte	0
02561 088D                        00            .byte	0
02562 088E                        00            .byte	0
02563 088F                        10            .byte	$10
02564 0890                        0E            .byte	$E
02565 0891                        0F            .byte	$F
02566 0892                        FF            .byte	$FF
02567                                           ! 684 },
02568                                           ! 685 {
02569                                           ! 686  80, 24, 16, 0x00, 0x10,
02570 0893                        50            .byte	$50
02571 0894                        18            .byte	$18
02572 0895                        10            .byte	$10
02573 0896                        00            .byte	0
02574 0897                        10            .byte	$10
02575                                           ! 687  0x00, 0x03, 0x00, 0x02,
02576 0898                        00            .byte	0
02577 0899                        03            .byte	3
02578 089A                        00            .byte	0
02579 089B                        02            .byte	2
02580                                           ! 688  0x67,
02581 089C                        67            .byte	$67
02582                                           ! 689  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02583 089D                        5F            .byte	$5F
02584 089E                        4F            .byte	$4F
02585 089F                        50            .byte	$50
02586 08A0                        82            .byte	$82
02587 08A1                        55            .byte	$55
02588 08A2                        81            .byte	$81
02589 08A3                        BF            .byte	$BF
02590 08A4                        1F            .byte	$1F
02591                                           ! 690  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02592 08A5                        00            .byte	0
02593 08A6                        4F            .byte	$4F
02594 08A7                        0D            .byte	$D
02595 08A8                        0E            .byte	$E
02596 08A9                        00            .byte	0
02597 08AA                        00            .byte	0
02598 08AB                        00            .byte	0
02599 08AC                        00            .byte	0
02600                                           ! 691  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02601 08AD                        9C            .byte	$9C
02602 08AE                        8E            .byte	$8E
02603 08AF                        8F            .byte	$8F
02604 08B0                        28            .byte	$28
02605 08B1                        1F            .byte	$1F
02606 08B2                        96            .byte	$96
02607 08B3                        B9            .byte	$B9
02608 08B4                        A3            .byte	$A3
02609                                           ! 692  0xff,
02610 08B5                        FF            .byte	$FF
02611                                           ! 693  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02612 08B6                        00            .byte	0
02613 08B7                        01            .byte	1
02614 08B8                        02            .byte	2
02615 08B9                        03            .byte	3
02616 08BA                        04            .byte	4
02617 08BB                        05            .byte	5
02618 08BC                        14            .byte	$14
02619 08BD                        07            .byte	7
02620                                           ! 694  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02621 08BE                        38            .byte	$38
02622 08BF                        39            .byte	$39
02623 08C0                        3A            .byte	$3A
02624 08C1                        3B            .byte	$3B
02625 08C2                        3C            .byte	$3C
02626 08C3                        3D            .byte	$3D
02627 08C4                        3E            .byte	$3E
02628 08C5                        3F            .byte	$3F
02629                                           ! 695  0x0c, 0x00, 0x0f, 0x08,
02630 08C6                        0C            .byte	$C
02631 08C7                        00            .byte	0
02632 08C8                        0F            .byte	$F
02633 08C9                        08            .byte	8
02634                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02635 08CA                        00            .byte	0
02636 08CB                        00            .byte	0
02637 08CC                        00            .byte	0
02638 08CD                        00            .byte	0
02639 08CE                        00            .byte	0
02640 08CF                        10            .byte	$10
02641 08D0                        0E            .byte	$E
02642 08D1                        0F            .byte	$F
02643 08D2                        FF            .byte	$FF
02644                                           ! 697 },
02645                                           ! 698 {
02646                                           ! 699  80, 24, 16, 0x00, 0x10,
02647 08D3                        50            .byte	$50
02648 08D4                        18            .byte	$18
02649 08D5                        10            .byte	$10
02650 08D6                        00            .byte	0
02651 08D7                        10            .byte	$10
02652                                           ! 700  0x00, 0x03, 0x00, 0x02,
02653 08D8                        00            .byte	0
02654 08D9                        03            .byte	3
02655 08DA                        00            .byte	0
02656 08DB                        02            .byte	2
02657                                           ! 701  0x66,
02658 08DC                        66            .byte	$66
02659                                           ! 702  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02660 08DD                        5F            .byte	$5F
02661 08DE                        4F            .byte	$4F
02662 08DF                        50            .byte	$50
02663 08E0                        82            .byte	$82
02664 08E1                        55            .byte	$55
02665 08E2                        81            .byte	$81
02666 08E3                        BF            .byte	$BF
02667 08E4                        1F            .byte	$1F
02668                                           ! 703  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02669 08E5                        00            .byte	0
02670 08E6                        4F            .byte	$4F
02671 08E7                        0D            .byte	$D
02672 08E8                        0E            .byte	$E
02673 08E9                        00            .byte	0
02674 08EA                        00            .byte	0
02675 08EB                        00            .byte	0
02676 08EC                        00            .byte	0
02677                                           ! 704  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02678 08ED                        9C            .byte	$9C
02679 08EE                        8E            .byte	$8E
02680 08EF                        8F            .byte	$8F
02681 08F0                        28            .byte	$28
02682 08F1                        0F            .byte	$F
02683 08F2                        96            .byte	$96
02684 08F3                        B9            .byte	$B9
02685 08F4                        A3            .byte	$A3
02686                                           ! 705  0xff,
02687 08F5                        FF            .byte	$FF
02688                                           ! 706  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02689 08F6                        00            .byte	0
02690 08F7                        08            .byte	8
02691 08F8                        08            .byte	8
02692 08F9                        08            .byte	8
02693 08FA                        08            .byte	8
02694 08FB                        08            .byte	8
02695 08FC                        08            .byte	8
02696 08FD                        08            .byte	8
02697                                           ! 707  0x1
02698                                           ! 707 0, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02699 08FE                        10            .byte	$10
02700 08FF                        18            .byte	$18
02701 0900                        18            .byte	$18
02702 0901                        18            .byte	$18
02703 0902                        18            .byte	$18
02704 0903                        18            .byte	$18
02705 0904                        18            .byte	$18
02706 0905                        18            .byte	$18
02707                                           ! 708  0x0e, 0x00, 0x0f, 0x08,
02708 0906                        0E            .byte	$E
02709 0907                        00            .byte	0
02710 0908                        0F            .byte	$F
02711 0909                        08            .byte	8
02712                                           ! 709  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02713 090A                        00            .byte	0
02714 090B                        00            .byte	0
02715 090C                        00            .byte	0
02716 090D                        00            .byte	0
02717 090E                        00            .byte	0
02718 090F                        10            .byte	$10
02719 0910                        0A            .byte	$A
02720 0911                        0F            .byte	$F
02721 0912                        FF            .byte	$FF
02722                                           ! 710 },
02723                                           ! 711 {
02724                                           ! 712  80, 29, 16, 0x00, 0x00,
02725 0913                        50            .byte	$50
02726 0914                        1D            .byte	$1D
02727 0915                        10            .byte	$10
02728 0916                        00            .byte	0
02729 0917                        00            .byte	0
02730                                           ! 713  0x01, 0x0f, 0x00, 0x06,
02731 0918                        01            .byte	1
02732 0919                        0F            .byte	$F
02733 091A                        00            .byte	0
02734 091B                        06            .byte	6
02735                                           ! 714  0xe3,
02736 091C                        E3            .byte	$E3
02737                                           ! 715  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02738 091D                        5F            .byte	$5F
02739 091E                        4F            .byte	$4F
02740 091F                        50            .byte	$50
02741 0920                        82            .byte	$82
02742 0921                        54            .byte	$54
02743 0922                        80            .byte	$80
02744 0923                        0B            .byte	$B
02745 0924                        3E            .byte	$3E
02746                                           ! 716  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02747 0925                        00            .byte	0
02748 0926                        40            .byte	$40
02749 0927                        00            .byte	0
02750 0928                        00            .byte	0
02751 0929                        00            .byte	0
02752 092A                        00            .byte	0
02753 092B                        00            .byte	0
02754 092C                        00            .byte	0
02755                                           ! 717  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02756 092D                        EA            .byte	$EA
02757 092E                        8C            .byte	$8C
02758 092F                        DF            .byte	$DF
02759 0930                        28            .byte	$28
02760 0931                        00            .byte	0
02761 0932                        E7            .byte	$E7
02762 0933                        04            .byte	4
02763 0934                        E3            .byte	$E3
02764                                           ! 718  0xff,
02765 0935                        FF            .byte	$FF
02766                                           ! 719  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02767 0936                        00            .byte	0
02768 0937                        3F            .byte	$3F
02769 0938                        00            .byte	0
02770 0939                        3F            .byte	$3F
02771 093A                        00            .byte	0
02772 093B                        3F            .byte	$3F
02773 093C                        00            .byte	0
02774 093D                        3F            .byte	$3F
02775                                           ! 720  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02776 093E                        00            .byte	0
02777 093F                        3F            .byte	$3F
02778 0940                        00            .byte	0
02779 0941                        3F            .byte	$3F
02780 0942                        00            .byte	0
02781 0943                        3F            .byte	$3F
02782 0944                        00            .byte	0
02783 0945                        3F            .byte	$3F
02784                                           ! 721  0x01, 0x00, 0x0f, 0x00,
02785 0946                        01            .byte	1
02786 0947                        00            .byte	0
02787 0948                        0F            .byte	$F
02788 0949                        00            .byte	0
02789                                           ! 722  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02790 094A                        00            .byte	0
02791 094B                        00            .byte	0
02792 094C                        00            .byte	0
02793 094D                        00            .byte	0
02794 094E                        00            .byte	0
02795 094F                        00            .byte	0
02796 0950                        05            .byte	5
02797 0951                        0F            .byte	$F
02798 0952                        FF            .byte	$FF
02799                                           ! 723 },
02800                                           ! 724 {
02801                                           ! 725  80, 29, 16, 0x00, 0x00,
02802 0953                        50            .byte	$50
02803 0954                        1D            .byte	$1D
02804 0955                        10            .byte	$10
02805 0956                        00            .byte	0
02806 0957                        00            .byte	0
02807                                           ! 726  0x01, 0x0f, 0x00, 0x06,
02808 0958                        01            .byte	1
02809 0959                        0F            .byte	$F
02810 095A                        00            .byte	0
02811 095B                        06            .byte	6
02812                                           ! 727  0xe3,
02813 095C                        E3            .byte	$E3
02814                                           ! 728  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02815 095D                        5F            .byte	$5F
02816 095E                        4F            .byte	$4F
02817 095F                        50            .byte	$50
02818 0960                        82            .byte	$82
02819 0961                        54            .byte	$54
02820 0962                        80            .byte	$80
02821 0963                        0B            .byte	$B
02822 0964                        3E            .byte	$3E
02823                                           ! 729  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02824 0965                        00            .byte	0
02825 0966                        40            .byte	$40
02826 0967                        00            .byte	0
02827 0968                        00            .byte	0
02828 0969                        00            .byte	0
02829 096A                        00            .byte	0
02830 096B                        00            .byte	0
02831 096C                        00            .byte	0
02832                                           ! 730  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02833 096D                        EA            .byte	$EA
02834 096E                        8C            .byte	$8C
02835 096F                        DF            .byte	$DF
02836 0970                        28            .byte	$28
02837 0971                        00            .byte	0
02838 0972                        E7            .byte	$E7
02839 0973                        04            .byte	4
02840 0974                        E3            .byte	$E3
02841                                           ! 731  0xff,
02842 0975                        FF            .byte	$FF
02843                                           ! 732  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02844 0976                        00            .byte	0
02845 0977                        01            .byte	1
02846 0978                        02            .byte	2
02847 0979                        03            .byte	3
02848 097A                        04            .byte	4
02849 097B                        05            .byte	5
02850 097C                        14            .byte	$14
02851 097D                        07            .byte	7
02852                                           ! 733  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02853 097E                        38            .byte	$38
02854 097F                        39            .byte	$39
02855 0980                        3A            .byte	$3A
02856 0981                        3B            .byte	$3B
02857 0982                        3C            .byte	$3C
02858 0983                        3D            .byte	$3D
02859 0984                        3E            .byte	$3E
02860 0985                        3F            .byte	$3F
02861                                           ! 734  0x01, 0x00, 0x0f, 0x00,
02862 0986                        01            .byte	1
02863 0987                        00            .byte	0
02864 0988                        0F            .byte	$F
02865 0989                        00            .byte	0
02866                                           ! 735  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02867 098A                        00            .byte	0
02868 098B                        00            .byte	0
02869 098C                        00            .byte	0
02870 098D                        00            .byte	0
02871 098E                        00            .byte	0
02872 098F                        00            .byte	0
02873 0990                        05            .byte	5
02874 0991                        0F            .byte	$F
02875 0992                        FF            .byte	$FF
02876                                           ! 736 },
02877                                           ! 737 {
02878                                           ! 738  40, 24, 8, 0x00, 0x00,
02879 0993                        28            .byte	$28
02880 0994                        18            .byte	$18
02881 0995                        08            .byte	8
02882 0996                        00            .byte	0
02883 0997                        00            .byte	0
02884                                           ! 739  0x01, 0x0f, 0x00, 0x0e,
02885 0998                        01            .byte	1
02886 0999                        0F            .byte	$F
02887 099A                        00            .byte	0
02888 099B                        0E            .byte	$E
02889                                           ! 740  0x63,
02890 099C                        63            .byte	$63
02891                                           ! 741  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02892 099D                        5F            .byte	$5F
02893 099E                        4F            .byte	$4F
02894 099F                        50            .byte	$50
02895 09A0                        82            .byte	$82
02896 09A1                        54            .byte	$54
02897 09A2                        80            .byte	$80
02898 09A3                        BF            .byte	$BF
02899 09A4                        1F            .byte	$1F
02900                                           ! 742  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02901 09A5                        00            .byte	0
02902 09A6                        41            .byte	$41
02903 09A7                        00            .byte	0
02904 09A8                        00            .byte	0
02905 09A9                        00            .byte	0
02906 09AA                        00            .byte	0
02907 09AB                        00            .byte	0
02908 09AC                        00            .byte	0
02909                                           ! 743  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02910 09AD                        9C            .byte	$9C
02911 09AE                        8E            .byte	$8E
02912 09AF                        8F            .byte	$8F
02913 09B0                        28            .byte	$28
02914 09B1                        40            .byte	$40
02915 09B2                        96            .byte	$96
02916 09B3                        B9            .byte	$B9
02917 09B4                        A3            .byte	$A3
02918                                           ! 744  0xff,
02919 09B5                        FF            .byte	$FF
02920                                           ! 745  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02921 09B6                        00            .byte	0
02922 09B7                        01            .byte	1
02923 09B8                        02            .byte	2
02924 09B9                        03            .byte	3
02925 09BA                        04            .byte	4
02926 09BB                        05            .byte	5
02927 09BC                        06            .byte	6
02928 09BD                        07            .byte	7
02929                                           ! 746  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02930 09BE                        08            .byte	8
02931 09BF                        09            .byte	9
02932 09C0                        0A            .byte	$A
02933 09C1                        0B            .byte	$B
02934 09C2                        0C            .byte	$C
02935 09C3                        0D            .byte	$D
02936 09C4                        0E            .byte	$E
02937 09C5                        0F            .byte	$F
02938                                           ! 747  0x41, 0x00, 0x0f, 0x00,
02939 09C6                        41            .byte	$41
02940 09C7                        00            .byte	0
02941 09C8                        0F            .byte	$F
02942 09C9                        00            .byte	0
02943                                           ! 748  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02944 09CA                        00            .byte	0
02945 09CB                        00            .byte	0
02946 09CC                        00            .byte	0
02947 09CD                        00            .byte	0
02948 09CE                        00            .byte	0
02949 09CF                        40            .byte	$40
02950 09D0                        05            .byte	5
02951 09D1                        0F            .byte	$F
02952 09D2                        FF            .byte	$FF
02953                                           ! 749 },
02954                                           ! 750 {
02955                                           ! 751  100, 36, 16, 0x00, 0x00,
02956 09D3                        64            .byte	$64
02957 09D4                        24            .byte	$24
02958 09D5                        10            .byte	$10
02959 09D6                        00            .byte	0
02960 09D7                        00            .byte	0
02961                                           ! 752  0x01, 0x0f, 0x00, 0x06,
02962 09D8                        01            .byte	1
02963 09D9                        0F            .byte	$F
02964 09DA                        00            .byte	0
02965 09DB                        06            .byte	6
02966                                           ! 753  0xe3,
02967 09DC                        E3            .byte	$E3
02968                                           ! 754  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02969 09DD                        7F            .byte	$7F
02970 09DE                        63            .byte	$63
02971 09DF                        63            .byte	$63
02972 09E0                        83            .byte	$83
02973 09E1                        6B            .byte	$6B
02974 09E2                        1B            .byte	$1B
02975 09E3                        72            .byte	$72
02976 09E4                        F0            .byte	$F0
02977                                           ! 755  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02978 09E5                        00            .byte	0
02979 09E6                        60            .byte	$60
02980 09E7                        00            .byte	0
02981 09E8                        00            .byte	0
02982 09E9                        00            .byte	0
02983 09EA                        00            .byte	0
02984 09EB                        00            .byte	0
02985 09EC                        00            .byte	0
02986                                           ! 756  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02987 09ED                        59            .byte	$59
02988 09EE                        8D            .byte	$8D
02989 09EF                        57            .byte	$57
02990 09F0                        32            .byte	$32
02991 09F1                        00            .byte	0
02992 09F2                        57            .byte	$57
02993 09F3                        73            .byte	$73
02994 09F4                        E3            .byte	$E3
02995                                           ! 757  0xff,
02996 09F5                        FF            .byte	$FF
02997                                           ! 758  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02998 09F6                        00            .byte	0
02999 09F7                        01            .byte	1
03000 09F8                        02            .byte	2
03001 09F9                        03            .byte	3
03002 09FA                        04            .byte	4
03003 09FB                        05            .byte	5
03004 09FC                        14            .byte	$14
03005 09FD                        07            .byte	7
03006                                           ! 759  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03007 09FE                        38            .byte	$38
03008 09FF                        39            .byte	$39
03009 0A00                        3A            .byte	$3A
03010 0A01                        3B            .byte	$3B
03011 0A02                        3C            .byte	$3C
03012 0A03                        3D            .byte	$3D
03013 0A04                        3E            .byte	$3E
03014 0A05                        3F            .byte	$3F
03015                                           ! 760  0x01, 0x00, 0x0f, 0x00,
03016 0A06                        01            .byte	1
03017 0A07                        00            .byte	0
03018 0A08                        0F            .byte	$F
03019 0A09                        00            .byte	0
03020                                           ! 761  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03021 0A0A                        00            .byte	0
03022 0A0B                        00            .byte	0
03023 0A0C                        00            .byte	0
03024 0A0D                        00            .byte	0
03025 0A0E                        00            .byte	0
03026 0A0F                        00            .byte	0
03027 0A10                        05            .byte	5
03028 0A11                        0F            .byte	$F
03029 0A12                        FF            .byte	$FF
03030                                           ! 762 },
03031                                           ! 763 };
03032                                           !BCC_EOS
03033                                           ! 764 static Bit8u palette0[63+1][3]=
03034                                           ! 765 {
03035                       00000A13            _palette0:
03036                                           ! 766   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03037 0A13                        00            .byte	0
03038 0A14                        00            .byte	0
03039 0A15                        00            .byte	0
03040 0A16                        00            .byte	0
03041 0A17                        00            .byte	0
03042 0A18                        00            .byte	0
03043 0A19                        00            .byte	0
03044 0A1A                        00            .byte	0
03045 0A1B                        00            .byte	0
03046 0A1C                        00            .byte	0
03047 0A1D                        00            .byte	0
03048 0A1E                        00            .byte	0
03049 0A1F                        00            .byte	0
03050 0A20                        00            .byte	0
03051 0A21                        00            .byte	0
03052 0A22                        00            .byte	0
03053 0A23                        00            .byte	0
03054 0A24                        00            .byte	0
03055 0A25                        00            .byte	0
03056 0A26                        00            .byte	0
03057 0A27                        00            .byte	0
03058 0A28                        00            .byte	0
03059 0A29                        00            .byte	0
03060 0A2A                        00            .byte	0
03061                                           ! 767   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03062 0A2B                        2A            .byte	$2A
03063 0A2C                        2A            .byte	$2A
03064 0A2D                        2A            .byte	$2A
03065 0A2E                        2A            .byte	$2A
03066 0A2F                        2A            .byte	$2A
03067 0A30                        2A            .byte	$2A
03068 0A31                        2A            .byte	$2A
03069 0A32                        2A            .byte	$2A
03070 0A33                        2A            .byte	$2A
03071 0A34                        2A            .byte	$2A
03072 0A35                        2A            .byte	$2A
03073 0A36                        2A            .byte	$2A
03074 0A37                        2A            .byte	$2A
03075 0A38                        2A            .byte	$2A
03076 0A39                        2A            .byte	$2A
03077 0A3A                        2A            .byte	$2A
03078 0A3B                        2A            .byte	$2A
03079 0A3C                        2A            .byte	$2A
03080 0A3D                        2A            .byte	$2A
03081 0A3E                        2A            .byte	$2A
03082 0A3F                        2A            .byte	$2A
03083 0A40                        2A            .byte	$2A
03084 0A41                        2A            .byte	$2A
03085 0A42                        2A            .byte	$2A
03086                                           ! 768   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2
03087 0A43                        2A            .byte	$2A
03088 0A44                        2A            .byte	$2A
03089 0A45                        2A            .byte	$2A
03090 0A46                        2A            .byte	$2A
03091 0A47                        2A            .byte	$2A
03092 0A48                        2A            .byte	$2A
03093 0A49                        2A            .byte	$2A
03094 0A4A                        2A            .byte	$2A
03095                                           ! 768 a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03096 0A4B                        2A            .byte	$2A
03097 0A4C                        2A            .byte	$2A
03098 0A4D                        2A            .byte	$2A
03099 0A4E                        2A            .byte	$2A
03100 0A4F                        2A            .byte	$2A
03101 0A50                        2A            .byte	$2A
03102 0A51                        2A            .byte	$2A
03103 0A52                        2A            .byte	$2A
03104 0A53                        2A            .byte	$2A
03105 0A54                        2A            .byte	$2A
03106 0A55                        2A            .byte	$2A
03107 0A56                        2A            .byte	$2A
03108 0A57                        2A            .byte	$2A
03109 0A58                        2A            .byte	$2A
03110 0A59                        2A            .byte	$2A
03111 0A5A                        2A            .byte	$2A
03112                                           ! 769   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03113 0A5B                        3F            .byte	$3F
03114 0A5C                        3F            .byte	$3F
03115 0A5D                        3F            .byte	$3F
03116 0A5E                        3F            .byte	$3F
03117 0A5F                        3F            .byte	$3F
03118 0A60                        3F            .byte	$3F
03119 0A61                        3F            .byte	$3F
03120 0A62                        3F            .byte	$3F
03121 0A63                        3F            .byte	$3F
03122 0A64                        3F            .byte	$3F
03123 0A65                        3F            .byte	$3F
03124 0A66                        3F            .byte	$3F
03125 0A67                        3F            .byte	$3F
03126 0A68                        3F            .byte	$3F
03127 0A69                        3F            .byte	$3F
03128 0A6A                        3F            .byte	$3F
03129 0A6B                        3F            .byte	$3F
03130 0A6C                        3F            .byte	$3F
03131 0A6D                        3F            .byte	$3F
03132 0A6E                        3F            .byte	$3F
03133 0A6F                        3F            .byte	$3F
03134 0A70                        3F            .byte	$3F
03135 0A71                        3F            .byte	$3F
03136 0A72                        3F            .byte	$3F
03137                                           ! 770   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03138 0A73                        00            .byte	0
03139 0A74                        00            .byte	0
03140 0A75                        00            .byte	0
03141 0A76                        00            .byte	0
03142 0A77                        00            .byte	0
03143 0A78                        00            .byte	0
03144 0A79                        00            .byte	0
03145 0A7A                        00            .byte	0
03146 0A7B                        00            .byte	0
03147 0A7C                        00            .byte	0
03148 0A7D                        00            .byte	0
03149 0A7E                        00            .byte	0
03150 0A7F                        00            .byte	0
03151 0A80                        00            .byte	0
03152 0A81                        00            .byte	0
03153 0A82                        00            .byte	0
03154 0A83                        00            .byte	0
03155 0A84                        00            .byte	0
03156 0A85                        00            .byte	0
03157 0A86                        00            .byte	0
03158 0A87                        00            .byte	0
03159 0A88                        00            .byte	0
03160 0A89                        00            .byte	0
03161 0A8A                        00            .byte	0
03162                                           ! 771   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03163 0A8B                        2A            .byte	$2A
03164 0A8C                        2A            .byte	$2A
03165 0A8D                        2A            .byte	$2A
03166 0A8E                        2A            .byte	$2A
03167 0A8F                        2A            .byte	$2A
03168 0A90                        2A            .byte	$2A
03169 0A91                        2A            .byte	$2A
03170 0A92                        2A            .byte	$2A
03171 0A93                        2A            .byte	$2A
03172 0A94                        2A            .byte	$2A
03173 0A95                        2A            .byte	$2A
03174 0A96                        2A            .byte	$2A
03175 0A97                        2A            .byte	$2A
03176 0A98                        2A            .byte	$2A
03177 0A99                        2A            .byte	$2A
03178 0A9A                        2A            .byte	$2A
03179 0A9B                        2A            .byte	$2A
03180 0A9C                        2A            .byte	$2A
03181 0A9D                        2A            .byte	$2A
03182 0A9E                        2A            .byte	$2A
03183 0A9F                        2A            .byte	$2A
03184 0AA0                        2A            .byte	$2A
03185 0AA1                        2A            .byte	$2A
03186 0AA2                        2A            .byte	$2A
03187                                           ! 772   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03188 0AA3                        2A            .byte	$2A
03189 0AA4                        2A            .byte	$2A
03190 0AA5                        2A            .byte	$2A
03191 0AA6                        2A            .byte	$2A
03192 0AA7                        2A            .byte	$2A
03193 0AA8                        2A            .byte	$2A
03194 0AA9                        2A            .byte	$2A
03195 0AAA                        2A            .byte	$2A
03196 0AAB                        2A            .byte	$2A
03197 0AAC                        2A            .byte	$2A
03198 0AAD                        2A            .byte	$2A
03199 0AAE                        2A            .byte	$2A
03200 0AAF                        2A            .byte	$2A
03201 0AB0                        2A            .byte	$2A
03202 0AB1                        2A            .byte	$2A
03203 0AB2                        2A            .byte	$2A
03204 0AB3                        2A            .byte	$2A
03205 0AB4                        2A            .byte	$2A
03206 0AB5                        2A            .byte	$2A
03207 0AB6                        2A            .byte	$2A
03208 0AB7                        2A            .byte	$2A
03209 0AB8                        2A            .byte	$2A
03210 0AB9                        2A            .byte	$2A
03211 0ABA                        2A            .byte	$2A
03212                                           ! 773   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03213 0ABB                        3F            .byte	$3F
03214 0ABC                        3F            .byte	$3F
03215 0ABD                        3F            .byte	$3F
03216 0ABE                        3F            .byte	$3F
03217 0ABF                        3F            .byte	$3F
03218 0AC0                        3F            .byte	$3F
03219 0AC1                        3F            .byte	$3F
03220 0AC2                        3F            .byte	$3F
03221 0AC3                        3F            .byte	$3F
03222 0AC4                        3F            .byte	$3F
03223 0AC5                        3F            .byte	$3F
03224 0AC6                        3F            .byte	$3F
03225 0AC7                        3F            .byte	$3F
03226 0AC8                        3F            .byte	$3F
03227 0AC9                        3F            .byte	$3F
03228 0ACA                        3F            .byte	$3F
03229 0ACB                        3F            .byte	$3F
03230 0ACC                        3F            .byte	$3F
03231 0ACD                        3F            .byte	$3F
03232 0ACE                        3F            .byte	$3F
03233 0ACF                        3F            .byte	$3F
03234 0AD0                        3F            .byte	$3F
03235 0AD1                        3F            .byte	$3F
03236                                           ! 774 };
03237 0AD2                        3F            .byte	$3F
03238                                           !BCC_EOS
03239                                           ! 775 static Bit8u palette1[63+1][3]=
03240                                           ! 776 {
03241                       00000AD3            _palette1:
03242                                           ! 777   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03243 0AD3                        00            .byte	0
03244 0AD4                        00            .byte	0
03245 0AD5                        00            .byte	0
03246 0AD6                        00            .byte	0
03247 0AD7                        00            .byte	0
03248 0AD8                        2A            .byte	$2A
03249 0AD9                        00            .byte	0
03250 0ADA                        2A            .byte	$2A
03251 0ADB                        00            .byte	0
03252 0ADC                        00            .byte	0
03253 0ADD                        2A            .byte	$2A
03254 0ADE                        2A            .byte	$2A
03255 0ADF                        2A            .byte	$2A
03256 0AE0                        00            .byte	0
03257 0AE1                        00            .byte	0
03258 0AE2                        2A            .byte	$2A
03259 0AE3                        00            .byte	0
03260 0AE4                        2A            .byte	$2A
03261 0AE5                        2A            .byte	$2A
03262 0AE6                        15            .byte	$15
03263 0AE7                        00            .byte	0
03264 0AE8                        2A            .byte	$2A
03265 0AE9                        2A            .byte	$2A
03266 0AEA                        2A            .byte	$2A
03267                                           ! 778   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03268 0AEB                        00            .byte	0
03269 0AEC                        00            .byte	0
03270 0AED                        00            .byte	0
03271 0AEE                        00            .byte	0
03272 0AEF                        00            .byte	0
03273 0AF0                        2A            .byte	$2A
03274 0AF1                        00            .byte	0
03275 0AF2                        2A            .byte	$2A
03276 0AF3                        00            .byte	0
03277 0AF4                        00            .byte	0
03278 0AF5                        2A            .byte	$2A
03279 0AF6                        2A            .byte	$2A
03280 0AF7                        2A            .byte	$2A
03281 0AF8                        00            .byte	0
03282 0AF9                        00            .byte	0
03283 0AFA                        2A            .byte	$2A
03284 0AFB                        00            .byte	0
03285 0AFC                        2A            .byte	$2A
03286 0AFD                        2A            .byte	$2A
03287 0AFE                        15            .byte	$15
03288 0AFF                        00            .byte	0
03289 0B00                        2A            .byte	$2A
03290 0B01                        2A            .byte	$2A
03291 0B02                        2A            .byte	$2A
03292                                           ! 779   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03293 0B03                        15            .byte	$15
03294 0B04                        15            .byte	$15
03295 0B05                        15            .byte	$15
03296 0B06                        15            .byte	$15
03297 0B07                        15            .byte	$15
03298 0B08                        3F            .byte	$3F
03299 0B09                        15            .byte	$15
03300 0B0A                        3F            .byte	$3F
03301 0B0B                        15            .byte	$15
03302 0B0C                        15            .byte	$15
03303 0B0D                        3F            .byte	$3F
03304 0B0E                        3F            .byte	$3F
03305 0B0F                        3F            .byte	$3F
03306 0B10                        15            .byte	$15
03307 0B11                        15            .byte	$15
03308 0B12                        3F            .byte	$3F
03309 0B13                        15            .byte	$15
03310 0B14                        3F            .byte	$3F
03311 0B15                        3F            .byte	$3F
03312 0B16                        3F            .byte	$3F
03313 0B17                        15            .byte	$15
03314 0B18                        3F            .byte	$3F
03315 0B19                        3F            .byte	$3F
03316 0B1A                        3F            .byte	$3F
03317                                           ! 780   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03318 0B1B                        15            .byte	$15
03319 0B1C                        15            .byte	$15
03320 0B1D                        15            .byte	$15
03321 0B1E                        15            .byte	$15
03322 0B1F                        15            .byte	$15
03323 0B20                        3F            .byte	$3F
03324 0B21                        15            .byte	$15
03325 0B22                        3F            .byte	$3F
03326 0B23                        15            .byte	$15
03327 0B24                        15            .byte	$15
03328 0B25                        3F            .byte	$3F
03329 0B26                        3F            .byte	$3F
03330 0B27                        3F            .byte	$3F
03331 0B28                        15            .byte	$15
03332 0B29                        15            .byte	$15
03333 0B2A                        3F            .byte	$3F
03334 0B2B                        15            .byte	$15
03335 0B2C                        3F            .byte	$3F
03336 0B2D                        3F            .byte	$3F
03337 0B2E                        3F            .byte	$3F
03338 0B2F                        15            .byte	$15
03339 0B30                        3F            .byte	$3F
03340 0B31                        3F            .byte	$3F
03341 0B32                        3F            .byte	$3F
03342                                           ! 781   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03343 0B33                        00            .byte	0
03344 0B34                        00            .byte	0
03345 0B35                        00            .byte	0
03346 0B36                        00            .byte	0
03347 0B37                        00            .byte	0
03348 0B38                        2A            .byte	$2A
03349 0B39                        00            .byte	0
03350 0B3A                        2A            .byte	$2A
03351 0B3B                        00            .byte	0
03352 0B3C                        00            .byte	0
03353 0B3D                        2A            .byte	$2A
03354 0B3E                        2A            .byte	$2A
03355 0B3F                        2A            .byte	$2A
03356 0B40                        00            .byte	0
03357 0B41                        00            .byte	0
03358 0B42                        2A            .byte	$2A
03359 0B43                        00            .byte	0
03360 0B44                        2A            .byte	$2A
03361 0B45                        2A            .byte	$2A
03362 0B46                        15            .byte	$15
03363 0B47                        00            .byte	0
03364 0B48                        2A            .byte	$2A
03365 0B49                        2A            .byte	$2A
03366 0B4A                        2A            .byte	$2A
03367                                           ! 782   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03368 0B4B                        00            .byte	0
03369 0B4C                        00            .byte	0
03370 0B4D                        00            .byte	0
03371 0B4E                        00            .byte	0
03372 0B4F                        00            .byte	0
03373 0B50                        2A            .byte	$2A
03374 0B51                        00            .byte	0
03375 0B52                        2A            .byte	$2A
03376 0B53                        00            .byte	0
03377 0B54                        00            .byte	0
03378 0B55                        2A            .byte	$2A
03379 0B56                        2A            .byte	$2A
03380 0B57                        2A            .byte	$2A
03381 0B58                        00            .byte	0
03382 0B59                        00            .byte	0
03383 0B5A                        2A            .byte	$2A
03384 0B5B                        00            .byte	0
03385 0B5C                        2A            .byte	$2A
03386 0B5D                        2A            .byte	$2A
03387 0B5E                        15            .byte	$15
03388 0B5F                        00            .byte	0
03389 0B60                        2A            .byte	$2A
03390 0B61                        2A            .byte	$2A
03391 0B62                        2A            .byte	$2A
03392                                           ! 783   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03393 0B63                        15            .byte	$15
03394 0B64                        15            .byte	$15
03395 0B65                        15            .byte	$15
03396 0B66                        15            .byte	$15
03397 0B67                        15            .byte	$15
03398 0B68                        3F            .byte	$3F
03399 0B69                        15            .byte	$15
03400 0B6A                        3F            .byte	$3F
03401 0B6B                        15            .byte	$15
03402 0B6C                        15            .byte	$15
03403 0B6D                        3F            .byte	$3F
03404 0B6E                        3F            .byte	$3F
03405 0B6F                        3F            .byte	$3F
03406 0B70                        15            .byte	$15
03407 0B71                        15            .byte	$15
03408 0B72                        3F            .byte	$3F
03409 0B73                        15            .byte	$15
03410 0B74                        3F            .byte	$3F
03411 0B75                        3F            .byte	$3F
03412 0B76                        3F            .byte	$3F
03413 0B77                        15            .byte	$15
03414 0B78                        3F            .byte	$3F
03415 0B79                        3F            .byte	$3F
03416 0B7A                        3F            .byte	$3F
03417                                           ! 784   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03418 0B7B                        15            .byte	$15
03419 0B7C                        15            .byte	$15
03420 0B7D                        15            .byte	$15
03421 0B7E                        15            .byte	$15
03422 0B7F                        15            .byte	$15
03423 0B80                        3F            .byte	$3F
03424 0B81                        15            .byte	$15
03425 0B82                        3F            .byte	$3F
03426 0B83                        15            .byte	$15
03427 0B84                        15            .byte	$15
03428 0B85                        3F            .byte	$3F
03429 0B86                        3F            .byte	$3F
03430 0B87                        3F            .byte	$3F
03431 0B88                        15            .byte	$15
03432 0B89                        15            .byte	$15
03433 0B8A                        3F            .byte	$3F
03434 0B8B                        15            .byte	$15
03435 0B8C                        3F            .byte	$3F
03436 0B8D                        3F            .byte	$3F
03437 0B8E                        3F            .byte	$3F
03438 0B8F                        15            .byte	$15
03439 0B90                        3F            .byte	$3F
03440 0B91                        3F            .byte	$3F
03441                                           ! 785 };
03442 0B92                        3F            .byte	$3F
03443                                           !BCC_EOS
03444                                           ! 786 static Bit8u palette2[63+1][3]=
03445                                           ! 787 {
03446                       00000B93            _palette2:
03447                                           ! 788   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03448 0B93                        00            .byte	0
03449 0B94                        00            .byte	0
03450 0B95                        00            .byte	0
03451 0B96                        00            .byte	0
03452 0B97                        00            .byte	0
03453 0B98                        2A            .byte	$2A
03454 0B99                        00            .byte	0
03455 0B9A                        2A            .byte	$2A
03456 0B9B                        00            .byte	0
03457 0B9C                        00            .byte	0
03458 0B9D                        2A            .byte	$2A
03459 0B9E                        2A            .byte	$2A
03460 0B9F                        2A            .byte	$2A
03461 0BA0                        00            .byte	0
03462 0BA1                        00            .byte	0
03463 0BA2                        2A            .byte	$2A
03464 0BA3                        00            .byte	0
03465 0BA4                        2A            .byte	$2A
03466 0BA5                        2A            .byte	$2A
03467 0BA6                        2A            .byte	$2A
03468 0BA7                        00            .byte	0
03469 0BA8                        2A            .byte	$2A
03470 0BA9                        2A            .byte	$2A
03471 0BAA                        2A            .byte	$2A
03472                                           ! 789   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x
03473 0BAB                        00            .byte	0
03474 0BAC                        00            .byte	0
03475 0BAD                        15            .byte	$15
03476 0BAE                        00            .byte	0
03477 0BAF                        00            .byte	0
03478 0BB0                        3F            .byte	$3F
03479 0BB1                        00            .byte	0
03480 0BB2                        2A            .byte	$2A
03481 0BB3                        15            .byte	$15
03482 0BB4                        00            .byte	0
03483 0BB5                        2A            .byte	$2A
03484 0BB6                        3F            .byte	$3F
03485 0BB7                        2A            .byte	$2A
03486                                           ! 789 00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03487 0BB8                        00            .byte	0
03488 0BB9                        15            .byte	$15
03489 0BBA                        2A            .byte	$2A
03490 0BBB                        00            .byte	0
03491 0BBC                        3F            .byte	$3F
03492 0BBD                        2A            .byte	$2A
03493 0BBE                        2A            .byte	$2A
03494 0BBF                        15            .byte	$15
03495 0BC0                        2A            .byte	$2A
03496 0BC1                        2A            .byte	$2A
03497 0BC2                        3F            .byte	$3F
03498                                           ! 790   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03499 0BC3                        00            .byte	0
03500 0BC4                        15            .byte	$15
03501 0BC5                        00            .byte	0
03502 0BC6                        00            .byte	0
03503 0BC7                        15            .byte	$15
03504 0BC8                        2A            .byte	$2A
03505 0BC9                        00            .byte	0
03506 0BCA                        3F            .byte	$3F
03507 0BCB                        00            .byte	0
03508 0BCC                        00            .byte	0
03509 0BCD                        3F            .byte	$3F
03510 0BCE                        2A            .byte	$2A
03511 0BCF                        2A            .byte	$2A
03512 0BD0                        15            .byte	$15
03513 0BD1                        00            .byte	0
03514 0BD2                        2A            .byte	$2A
03515 0BD3                        15            .byte	$15
03516 0BD4                        2A            .byte	$2A
03517 0BD5                        2A            .byte	$2A
03518 0BD6                        3F            .byte	$3F
03519 0BD7                        00            .byte	0
03520 0BD8                        2A            .byte	$2A
03521 0BD9                        3F            .byte	$3F
03522 0BDA                        2A            .byte	$2A
03523                                           ! 791   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03524 0BDB                        00            .byte	0
03525 0BDC                        15            .byte	$15
03526 0BDD                        15            .byte	$15
03527 0BDE                        00            .byte	0
03528 0BDF                        15            .byte	$15
03529 0BE0                        3F            .byte	$3F
03530 0BE1                        00            .byte	0
03531 0BE2                        3F            .byte	$3F
03532 0BE3                        15            .byte	$15
03533 0BE4                        00            .byte	0
03534 0BE5                        3F            .byte	$3F
03535 0BE6                        3F            .byte	$3F
03536 0BE7                        2A            .byte	$2A
03537 0BE8                        15            .byte	$15
03538 0BE9                        15            .byte	$15
03539 0BEA                        2A            .byte	$2A
03540 0BEB                        15            .byte	$15
03541 0BEC                        3F            .byte	$3F
03542 0BED                        2A            .byte	$2A
03543 0BEE                        3F            .byte	$3F
03544 0BEF                        15            .byte	$15
03545 0BF0                        2A            .byte	$2A
03546 0BF1                        3F            .byte	$3F
03547 0BF2                        3F            .byte	$3F
03548                                           ! 792   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03549 0BF3                        15            .byte	$15
03550 0BF4                        00            .byte	0
03551 0BF5                        00            .byte	0
03552 0BF6                        15            .byte	$15
03553 0BF7                        00            .byte	0
03554 0BF8                        2A            .byte	$2A
03555 0BF9                        15            .byte	$15
03556 0BFA                        2A            .byte	$2A
03557 0BFB                        00            .byte	0
03558 0BFC                        15            .byte	$15
03559 0BFD                        2A            .byte	$2A
03560 0BFE                        2A            .byte	$2A
03561 0BFF                        3F            .byte	$3F
03562 0C00                        00            .byte	0
03563 0C01                        00            .byte	0
03564 0C02                        3F            .byte	$3F
03565 0C03                        00            .byte	0
03566 0C04                        2A            .byte	$2A
03567 0C05                        3F            .byte	$3F
03568 0C06                        2A            .byte	$2A
03569 0C07                        00            .byte	0
03570 0C08                        3F            .byte	$3F
03571 0C09                        2A            .byte	$2A
03572 0C0A                        2A            .byte	$2A
03573                                           ! 793   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03574 0C0B                        15            .byte	$15
03575 0C0C                        00            .byte	0
03576 0C0D                        15            .byte	$15
03577 0C0E                        15            .byte	$15
03578 0C0F                        00            .byte	0
03579 0C10                        3F            .byte	$3F
03580 0C11                        15            .byte	$15
03581 0C12                        2A            .byte	$2A
03582 0C13                        15            .byte	$15
03583 0C14                        15            .byte	$15
03584 0C15                        2A            .byte	$2A
03585 0C16                        3F            .byte	$3F
03586 0C17                        3F            .byte	$3F
03587 0C18                        00            .byte	0
03588 0C19                        15            .byte	$15
03589 0C1A                        3F            .byte	$3F
03590 0C1B                        00            .byte	0
03591 0C1C                        3F            .byte	$3F
03592 0C1D                        3F            .byte	$3F
03593 0C1E                        2A            .byte	$2A
03594 0C1F                        15            .byte	$15
03595 0C20                        3F            .byte	$3F
03596 0C21                        2A            .byte	$2A
03597 0C22                        3F            .byte	$3F
03598                                           ! 794   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03599 0C23                        15            .byte	$15
03600 0C24                        15            .byte	$15
03601 0C25                        00            .byte	0
03602 0C26                        15            .byte	$15
03603 0C27                        15            .byte	$15
03604 0C28                        2A            .byte	$2A
03605 0C29                        15            .byte	$15
03606 0C2A                        3F            .byte	$3F
03607 0C2B                        00            .byte	0
03608 0C2C                        15            .byte	$15
03609 0C2D                        3F            .byte	$3F
03610 0C2E                        2A            .byte	$2A
03611 0C2F                        3F            .byte	$3F
03612 0C30                        15            .byte	$15
03613 0C31                        00            .byte	0
03614 0C32                        3F            .byte	$3F
03615 0C33                        15            .byte	$15
03616 0C34                        2A            .byte	$2A
03617 0C35                        3F            .byte	$3F
03618 0C36                        3F            .byte	$3F
03619 0C37                        00            .byte	0
03620 0C38                        3F            .byte	$3F
03621 0C39                        3F            .byte	$3F
03622 0C3A                        2A            .byte	$2A
03623                                           ! 795   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03624 0C3B                        15            .byte	$15
03625 0C3C                        15            .byte	$15
03626 0C3D                        15            .byte	$15
03627 0C3E                        15            .byte	$15
03628 0C3F                        15            .byte	$15
03629 0C40                        3F            .byte	$3F
03630 0C41                        15            .byte	$15
03631 0C42                        3F            .byte	$3F
03632 0C43                        15            .byte	$15
03633 0C44                        15            .byte	$15
03634 0C45                        3F            .byte	$3F
03635 0C46                        3F            .byte	$3F
03636 0C47                        3F            .byte	$3F
03637 0C48                        15            .byte	$15
03638 0C49                        15            .byte	$15
03639 0C4A                        3F            .byte	$3F
03640 0C4B                        15            .byte	$15
03641 0C4C                        3F            .byte	$3F
03642 0C4D                        3F            .byte	$3F
03643 0C4E                        3F            .byte	$3F
03644 0C4F                        15            .byte	$15
03645 0C50                        3F            .byte	$3F
03646 0C51                        3F            .byte	$3F
03647                                           ! 796 };
03648 0C52                        3F            .byte	$3F
03649                                           !BCC_EOS
03650                                           ! 797 static Bit8u palette3[256][3]=
03651                                           ! 798 {
03652                       00000C53            _palette3:
03653                                           ! 799   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03654 0C53                        00            .byte	0
03655 0C54                        00            .byte	0
03656 0C55                        00            .byte	0
03657 0C56                        00            .byte	0
03658 0C57                        00            .byte	0
03659 0C58                        2A            .byte	$2A
03660 0C59                        00            .byte	0
03661 0C5A                        2A            .byte	$2A
03662 0C5B                        00            .byte	0
03663 0C5C                        00            .byte	0
03664 0C5D                        2A            .byte	$2A
03665 0C5E                        2A            .byte	$2A
03666 0C5F                        2A            .byte	$2A
03667 0C60                        00            .byte	0
03668 0C61                        00            .byte	0
03669 0C62                        2A            .byte	$2A
03670 0C63                        00            .byte	0
03671 0C64                        2A            .byte	$2A
03672 0C65                        2A            .byte	$2A
03673 0C66                        15            .byte	$15
03674 0C67                        00            .byte	0
03675 0C68                        2A            .byte	$2A
03676 0C69                        2A            .byte	$2A
03677 0C6A                        2A            .byte	$2A
03678                                           ! 800   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03679 0C6B                        15            .byte	$15
03680 0C6C                        15            .byte	$15
03681 0C6D                        15            .byte	$15
03682 0C6E                        15            .byte	$15
03683 0C6F                        15            .byte	$15
03684 0C70                        3F            .byte	$3F
03685 0C71                        15            .byte	$15
03686 0C72                        3F            .byte	$3F
03687 0C73                        15            .byte	$15
03688 0C74                        15            .byte	$15
03689 0C75                        3F            .byte	$3F
03690 0C76                        3F            .byte	$3F
03691 0C77                        3F            .byte	$3F
03692 0C78                        15            .byte	$15
03693 0C79                        15            .byte	$15
03694 0C7A                        3F            .byte	$3F
03695 0C7B                        15            .byte	$15
03696 0C7C                        3F            .byte	$3F
03697 0C7D                        3F            .byte	$3F
03698 0C7E                        3F            .byte	$3F
03699 0C7F                        15            .byte	$15
03700 0C80                        3F            .byte	$3F
03701 0C81                        3F            .byte	$3F
03702 0C82                        3F            .byte	$3F
03703                                           ! 801   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03704 0C83                        00            .byte	0
03705 0C84                        00            .byte	0
03706 0C85                        00            .byte	0
03707 0C86                        05            .byte	5
03708 0C87                        05            .byte	5
03709 0C88                        05            .byte	5
03710 0C89                        08            .byte	8
03711 0C8A                        08            .byte	8
03712 0C8B                        08            .byte	8
03713 0C8C                        0B            .byte	$B
03714 0C8D                        0B            .byte	$B
03715 0C8E                        0B            .byte	$B
03716 0C8F                        0E            .byte	$E
03717 0C90                        0E            .byte	$E
03718 0C91                        0E            .byte	$E
03719 0C92                        11            .byte	$11
03720 0C93                        11            .byte	$11
03721 0C94                        11            .byte	$11
03722 0C95                        14            .byte	$14
03723 0C96                        14            .byte	$14
03724 0C97                        14            .byte	$14
03725 0C98                        18            .byte	$18
03726 0C99                        18            .byte	$18
03727 0C9A                        18            .byte	$18
03728                                           ! 802   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03729 0C9B                        1C            .byte	$1C
03730 0C9C                        1C            .byte	$1C
03731 0C9D                        1C            .byte	$1C
03732 0C9E                        20            .byte	$20
03733 0C9F                        20            .byte	$20
03734 0CA0                        20            .byte	$20
03735 0CA1                        24            .byte	$24
03736 0CA2                        24            .byte	$24
03737 0CA3                        24            .byte	$24
03738 0CA4                        28            .byte	$28
03739 0CA5                        28            .byte	$28
03740 0CA6                        28            .byte	$28
03741 0CA7                        2D            .byte	$2D
03742 0CA8                        2D            .byte	$2D
03743 0CA9                        2D            .byte	$2D
03744 0CAA                        32            .byte	$32
03745 0CAB                        32            .byte	$32
03746 0CAC                        32            .byte	$32
03747 0CAD                        38            .byte	$38
03748 0CAE                        38            .byte	$38
03749 0CAF                        38            .byte	$38
03750 0CB0                        3F            .byte	$3F
03751 0CB1                        3F            .byte	$3F
03752 0CB2                        3F            .byte	$3F
03753                                           ! 803   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03754 0CB3                        00            .byte	0
03755 0CB4                        00            .byte	0
03756 0CB5                        3F            .byte	$3F
03757 0CB6                        10            .byte	$10
03758 0CB7                        00            .byte	0
03759 0CB8                        3F            .byte	$3F
03760 0CB9                        1F            .byte	$1F
03761 0CBA                        00            .byte	0
03762 0CBB                        3F            .byte	$3F
03763 0CBC                        2F            .byte	$2F
03764 0CBD                        00            .byte	0
03765 0CBE                        3F            .byte	$3F
03766 0CBF                        3F            .byte	$3F
03767 0CC0                        00            .byte	0
03768 0CC1                        3F            .byte	$3F
03769 0CC2                        3F            .byte	$3F
03770 0CC3                        00            .byte	0
03771 0CC4                        2F            .byte	$2F
03772 0CC5                        3F            .byte	$3F
03773 0CC6                        00            .byte	0
03774 0CC7                        1F            .byte	$1F
03775 0CC8                        3F            .byte	$3F
03776 0CC9                        00            .byte	0
03777 0CCA                        10            .byte	$10
03778                                           ! 804   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03779 0CCB                        3F            .byte	$3F
03780 0CCC                        00            .byte	0
03781 0CCD                        00            .byte	0
03782 0CCE                        3F            .byte	$3F
03783 0CCF                        10            .byte	$10
03784 0CD0                        00            .byte	0
03785 0CD1                        3F            .byte	$3F
03786 0CD2                        1F            .byte	$1F
03787 0CD3                        00            .byte	0
03788 0CD4                        3F            .byte	$3F
03789 0CD5                        2F            .byte	$2F
03790 0CD6                        00            .byte	0
03791 0CD7                        3F            .byte	$3F
03792 0CD8                        3F            .byte	$3F
03793 0CD9                        00            .byte	0
03794 0CDA                        2F            .byte	$2F
03795 0CDB                        3F            .byte	$3F
03796 0CDC                        00            .byte	0
03797 0CDD                        1F            .byte	$1F
03798 0CDE                        3F            .byte	$3F
03799 0CDF                        00            .byte	0
03800 0CE0                        10            .byte	$10
03801 0CE1                        3F            .byte	$3F
03802 0CE2                        00            .byte	0
03803                                           ! 805   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03804 0CE3                        00            .byte	0
03805 0CE4                        3F            .byte	$3F
03806 0CE5                        00            .byte	0
03807 0CE6                        00            .byte	0
03808 0CE7                        3F            .byte	$3F
03809 0CE8                        10            .byte	$10
03810 0CE9                        00            .byte	0
03811 0CEA                        3F            .byte	$3F
03812 0CEB                        1F            .byte	$1F
03813 0CEC                        00            .byte	0
03814 0CED                        3F            .byte	$3F
03815 0CEE                        2F            .byte	$2F
03816 0CEF                        00            .byte	0
03817 0CF0                        3F            .byte	$3F
03818 0CF1                        3F            .byte	$3F
03819 0CF2                        00            .byte	0
03820 0CF3                        2F            .byte	$2F
03821 0CF4                        3F            .byte	$3F
03822 0CF5                        00            .byte	0
03823 0CF6                        1F            .byte	$1F
03824 0CF7                        3F            .byte	$3F
03825 0CF8                        00            .byte	0
03826 0CF9                        10            .byte	$10
03827 0CFA                        3F            .byte	$3F
03828                                           ! 806   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03829 0CFB                        1F            .byte	$1F
03830 0CFC                        1F            .byte	$1F
03831 0CFD                        3F            .byte	$3F
03832 0CFE                        27            .byte	$27
03833 0CFF                        1F            .byte	$1F
03834 0D00                        3F            .byte	$3F
03835 0D01                        2F            .byte	$2F
03836 0D02                        1F            .byte	$1F
03837 0D03                        3F            .byte	$3F
03838 0D04                        37            .byte	$37
03839 0D05                        1F            .byte	$1F
03840 0D06                        3F            .byte	$3F
03841 0D07                        3F            .byte	$3F
03842 0D08                        1F            .byte	$1F
03843 0D09                        3F            .byte	$3F
03844 0D0A                        3F            .byte	$3F
03845 0D0B                        1F            .byte	$1F
03846 0D0C                        37            .byte	$37
03847 0D0D                        3F            .byte	$3F
03848 0D0E                        1F            .byte	$1F
03849 0D0F                        2F            .byte	$2F
03850 0D10                        3F            .byte	$3F
03851 0D11                        1F            .byte	$1F
03852 0D12                        27            .byte	$27
03853                                           ! 807   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03854 0D13                        3F            .byte	$3F
03855 0D14                        1F            .byte	$1F
03856 0D15                        1F            .byte	$1F
03857 0D16                        3F            .byte	$3F
03858 0D17                        27            .byte	$27
03859 0D18                        1F            .byte	$1F
03860 0D19                        3F            .byte	$3F
03861 0D1A                        2F            .byte	$2F
03862 0D1B                        1F            .byte	$1F
03863 0D1C                        3F            .byte	$3F
03864 0D1D                        37            .byte	$37
03865 0D1E                        1F            .byte	$1F
03866 0D1F                        3F            .byte	$3F
03867 0D20                        3F            .byte	$3F
03868 0D21                        1F            .byte	$1F
03869 0D22                        37            .byte	$37
03870 0D23                        3F            .byte	$3F
03871 0D24                        1F            .byte	$1F
03872 0D25                        2F            .byte	$2F
03873 0D26                        3F            .byte	$3F
03874 0D27                        1F            .byte	$1F
03875 0D28                        27            .byte	$27
03876 0D29                        3F            .byte	$3F
03877 0D2A                        1F            .byte	$1F
03878                                           ! 808   0x1f
03879                                           ! 808 ,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03880 0D2B                        1F            .byte	$1F
03881 0D2C                        3F            .byte	$3F
03882 0D2D                        1F            .byte	$1F
03883 0D2E                        1F            .byte	$1F
03884 0D2F                        3F            .byte	$3F
03885 0D30                        27            .byte	$27
03886 0D31                        1F            .byte	$1F
03887 0D32                        3F            .byte	$3F
03888 0D33                        2F            .byte	$2F
03889 0D34                        1F            .byte	$1F
03890 0D35                        3F            .byte	$3F
03891 0D36                        37            .byte	$37
03892 0D37                        1F            .byte	$1F
03893 0D38                        3F            .byte	$3F
03894 0D39                        3F            .byte	$3F
03895 0D3A                        1F            .byte	$1F
03896 0D3B                        37            .byte	$37
03897 0D3C                        3F            .byte	$3F
03898 0D3D                        1F            .byte	$1F
03899 0D3E                        2F            .byte	$2F
03900 0D3F                        3F            .byte	$3F
03901 0D40                        1F            .byte	$1F
03902 0D41                        27            .byte	$27
03903 0D42                        3F            .byte	$3F
03904                                           ! 809   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03905 0D43                        2D            .byte	$2D
03906 0D44                        2D            .byte	$2D
03907 0D45                        3F            .byte	$3F
03908 0D46                        31            .byte	$31
03909 0D47                        2D            .byte	$2D
03910 0D48                        3F            .byte	$3F
03911 0D49                        36            .byte	$36
03912 0D4A                        2D            .byte	$2D
03913 0D4B                        3F            .byte	$3F
03914 0D4C                        3A            .byte	$3A
03915 0D4D                        2D            .byte	$2D
03916 0D4E                        3F            .byte	$3F
03917 0D4F                        3F            .byte	$3F
03918 0D50                        2D            .byte	$2D
03919 0D51                        3F            .byte	$3F
03920 0D52                        3F            .byte	$3F
03921 0D53                        2D            .byte	$2D
03922 0D54                        3A            .byte	$3A
03923 0D55                        3F            .byte	$3F
03924 0D56                        2D            .byte	$2D
03925 0D57                        36            .byte	$36
03926 0D58                        3F            .byte	$3F
03927 0D59                        2D            .byte	$2D
03928 0D5A                        31            .byte	$31
03929                                           ! 810   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03930 0D5B                        3F            .byte	$3F
03931 0D5C                        2D            .byte	$2D
03932 0D5D                        2D            .byte	$2D
03933 0D5E                        3F            .byte	$3F
03934 0D5F                        31            .byte	$31
03935 0D60                        2D            .byte	$2D
03936 0D61                        3F            .byte	$3F
03937 0D62                        36            .byte	$36
03938 0D63                        2D            .byte	$2D
03939 0D64                        3F            .byte	$3F
03940 0D65                        3A            .byte	$3A
03941 0D66                        2D            .byte	$2D
03942 0D67                        3F            .byte	$3F
03943 0D68                        3F            .byte	$3F
03944 0D69                        2D            .byte	$2D
03945 0D6A                        3A            .byte	$3A
03946 0D6B                        3F            .byte	$3F
03947 0D6C                        2D            .byte	$2D
03948 0D6D                        36            .byte	$36
03949 0D6E                        3F            .byte	$3F
03950 0D6F                        2D            .byte	$2D
03951 0D70                        31            .byte	$31
03952 0D71                        3F            .byte	$3F
03953 0D72                        2D            .byte	$2D
03954                                           ! 811   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03955 0D73                        2D            .byte	$2D
03956 0D74                        3F            .byte	$3F
03957 0D75                        2D            .byte	$2D
03958 0D76                        2D            .byte	$2D
03959 0D77                        3F            .byte	$3F
03960 0D78                        31            .byte	$31
03961 0D79                        2D            .byte	$2D
03962 0D7A                        3F            .byte	$3F
03963 0D7B                        36            .byte	$36
03964 0D7C                        2D            .byte	$2D
03965 0D7D                        3F            .byte	$3F
03966 0D7E                        3A            .byte	$3A
03967 0D7F                        2D            .byte	$2D
03968 0D80                        3F            .byte	$3F
03969 0D81                        3F            .byte	$3F
03970 0D82                        2D            .byte	$2D
03971 0D83                        3A            .byte	$3A
03972 0D84                        3F            .byte	$3F
03973 0D85                        2D            .byte	$2D
03974 0D86                        36            .byte	$36
03975 0D87                        3F            .byte	$3F
03976 0D88                        2D            .byte	$2D
03977 0D89                        31            .byte	$31
03978 0D8A                        3F            .byte	$3F
03979                                           ! 812   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03980 0D8B                        00            .byte	0
03981 0D8C                        00            .byte	0
03982 0D8D                        1C            .byte	$1C
03983 0D8E                        07            .byte	7
03984 0D8F                        00            .byte	0
03985 0D90                        1C            .byte	$1C
03986 0D91                        0E            .byte	$E
03987 0D92                        00            .byte	0
03988 0D93                        1C            .byte	$1C
03989 0D94                        15            .byte	$15
03990 0D95                        00            .byte	0
03991 0D96                        1C            .byte	$1C
03992 0D97                        1C            .byte	$1C
03993 0D98                        00            .byte	0
03994 0D99                        1C            .byte	$1C
03995 0D9A                        1C            .byte	$1C
03996 0D9B                        00            .byte	0
03997 0D9C                        15            .byte	$15
03998 0D9D                        1C            .byte	$1C
03999 0D9E                        00            .byte	0
04000 0D9F                        0E            .byte	$E
04001 0DA0                        1C            .byte	$1C
04002 0DA1                        00            .byte	0
04003 0DA2                        07            .byte	7
04004                                           ! 813   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04005 0DA3                        1C            .byte	$1C
04006 0DA4                        00            .byte	0
04007 0DA5                        00            .byte	0
04008 0DA6                        1C            .byte	$1C
04009 0DA7                        07            .byte	7
04010 0DA8                        00            .byte	0
04011 0DA9                        1C            .byte	$1C
04012 0DAA                        0E            .byte	$E
04013 0DAB                        00            .byte	0
04014 0DAC                        1C            .byte	$1C
04015 0DAD                        15            .byte	$15
04016 0DAE                        00            .byte	0
04017 0DAF                        1C            .byte	$1C
04018 0DB0                        1C            .byte	$1C
04019 0DB1                        00            .byte	0
04020 0DB2                        15            .byte	$15
04021 0DB3                        1C            .byte	$1C
04022 0DB4                        00            .byte	0
04023 0DB5                        0E            .byte	$E
04024 0DB6                        1C            .byte	$1C
04025 0DB7                        00            .byte	0
04026 0DB8                        07            .byte	7
04027 0DB9                        1C            .byte	$1C
04028 0DBA                        00            .byte	0
04029                                           ! 814   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04030 0DBB                        00            .byte	0
04031 0DBC                        1C            .byte	$1C
04032 0DBD                        00            .byte	0
04033 0DBE                        00            .byte	0
04034 0DBF                        1C            .byte	$1C
04035 0DC0                        07            .byte	7
04036 0DC1                        00            .byte	0
04037 0DC2                        1C            .byte	$1C
04038 0DC3                        0E            .byte	$E
04039 0DC4                        00            .byte	0
04040 0DC5                        1C            .byte	$1C
04041 0DC6                        15            .byte	$15
04042 0DC7                        00            .byte	0
04043 0DC8                        1C            .byte	$1C
04044 0DC9                        1C            .byte	$1C
04045 0DCA                        00            .byte	0
04046 0DCB                        15            .byte	$15
04047 0DCC                        1C            .byte	$1C
04048 0DCD                        00            .byte	0
04049 0DCE                        0E            .byte	$E
04050 0DCF                        1C            .byte	$1C
04051 0DD0                        00            .byte	0
04052 0DD1                        07            .byte	7
04053 0DD2                        1C            .byte	$1C
04054                                           ! 815   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04055 0DD3                        0E            .byte	$E
04056 0DD4                        0E            .byte	$E
04057 0DD5                        1C            .byte	$1C
04058 0DD6                        11            .byte	$11
04059 0DD7                        0E            .byte	$E
04060 0DD8                        1C            .byte	$1C
04061 0DD9                        15            .byte	$15
04062 0DDA                        0E            .byte	$E
04063 0DDB                        1C            .byte	$1C
04064 0DDC                        18            .byte	$18
04065 0DDD                        0E            .byte	$E
04066 0DDE                        1C            .byte	$1C
04067 0DDF                        1C            .byte	$1C
04068 0DE0                        0E            .byte	$E
04069 0DE1                        1C            .byte	$1C
04070 0DE2                        1C            .byte	$1C
04071 0DE3                        0E            .byte	$E
04072 0DE4                        18            .byte	$18
04073 0DE5                        1C            .byte	$1C
04074 0DE6                        0E            .byte	$E
04075 0DE7                        15            .byte	$15
04076 0DE8                        1C            .byte	$1C
04077 0DE9                        0E            .byte	$E
04078 0DEA                        11            .byte	$11
04079                                           ! 816   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04080 0DEB                        1C            .byte	$1C
04081 0DEC                        0E            .byte	$E
04082 0DED                        0E            .byte	$E
04083 0DEE                        1C            .byte	$1C
04084 0DEF                        11            .byte	$11
04085 0DF0                        0E            .byte	$E
04086 0DF1                        1C            .byte	$1C
04087 0DF2                        15            .byte	$15
04088 0DF3                        0E            .byte	$E
04089 0DF4                        1C            .byte	$1C
04090 0DF5                        18            .byte	$18
04091 0DF6                        0E            .byte	$E
04092 0DF7                        1C            .byte	$1C
04093 0DF8                        1C            .byte	$1C
04094 0DF9                        0E            .byte	$E
04095 0DFA                        18            .byte	$18
04096 0DFB                        1C            .byte	$1C
04097 0DFC                        0E            .byte	$E
04098 0DFD                        15            .byte	$15
04099 0DFE                        1C            .byte	$1C
04100 0DFF                        0E            .byte	$E
04101 0E00                        11            .byte	$11
04102 0E01                        1C            .byte	$1C
04103 0E02                        0E            .byte	$E
04104                                           ! 817   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04105 0E03                        0E            .byte	$E
04106 0E04                        1C            .byte	$1C
04107 0E05                        0E            .byte	$E
04108 0E06                        0E            .byte	$E
04109 0E07                        1C            .byte	$1C
04110 0E08                        11            .byte	$11
04111 0E09                        0E            .byte	$E
04112 0E0A                        1C            .byte	$1C
04113 0E0B                        15            .byte	$15
04114 0E0C                        0E            .byte	$E
04115 0E0D                        1C            .byte	$1C
04116 0E0E                        18            .byte	$18
04117 0E0F                        0E            .byte	$E
04118 0E10                        1C            .byte	$1C
04119 0E11                        1C            .byte	$1C
04120 0E12                        0E            .byte	$E
04121 0E13                        18            .byte	$18
04122 0E14                        1C            .byte	$1C
04123 0E15                        0E            .byte	$E
04124 0E16                        15            .byte	$15
04125 0E17                        1C            .byte	$1C
04126 0E18                        0E            .byte	$E
04127 0E19                        11            .byte	$11
04128 0E1A                        1C            .byte	$1C
04129                                           ! 818   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04130 0E1B                        14            .byte	$14
04131 0E1C                        14            .byte	$14
04132 0E1D                        1C            .byte	$1C
04133 0E1E                        16            .byte	$16
04134 0E1F                        14            .byte	$14
04135 0E20                        1C            .byte	$1C
04136 0E21                        18            .byte	$18
04137 0E22                        14            .byte	$14
04138 0E23                        1C            .byte	$1C
04139 0E24                        1A            .byte	$1A
04140 0E25                        14            .byte	$14
04141 0E26                        1C            .byte	$1C
04142 0E27                        1C            .byte	$1C
04143 0E28                        14            .byte	$14
04144 0E29                        1C            .byte	$1C
04145 0E2A                        1C            .byte	$1C
04146 0E2B                        14            .byte	$14
04147 0E2C                        1A            .byte	$1A
04148 0E2D                        1C            .byte	$1C
04149 0E2E                        14            .byte	$14
04150 0E2F                        18            .byte	$18
04151 0E30                        1C            .byte	$1C
04152 0E31                        14            .byte	$14
04153 0E32                        16            .byte	$16
04154                                           ! 819   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04155 0E33                        1C            .byte	$1C
04156 0E34                        14            .byte	$14
04157 0E35                        14            .byte	$14
04158 0E36                        1C            .byte	$1C
04159 0E37                        16            .byte	$16
04160 0E38                        14            .byte	$14
04161 0E39                        1C            .byte	$1C
04162 0E3A                        18            .byte	$18
04163 0E3B                        14            .byte	$14
04164 0E3C                        1C            .byte	$1C
04165 0E3D                        1A            .byte	$1A
04166 0E3E                        14            .byte	$14
04167 0E3F                        1C            .byte	$1C
04168 0E40                        1C            .byte	$1C
04169 0E41                        14            .byte	$14
04170 0E42                        1A            .byte	$1A
04171 0E43                        1C            .byte	$1C
04172 0E44                        14            .byte	$14
04173 0E45                        18            .byte	$18
04174 0E46                        1C            .byte	$1C
04175 0E47                        14            .byte	$14
04176 0E48                        16            .byte	$16
04177 0E49                        1C            .byte	$1C
04178 0E4A                        14            .byte	$14
04179                                           ! 820   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04180 0E4B                        14            .byte	$14
04181 0E4C                        1C            .byte	$1C
04182 0E4D                        14            .byte	$14
04183 0E4E                        14            .byte	$14
04184 0E4F                        1C            .byte	$1C
04185 0E50                        16            .byte	$16
04186 0E51                        14            .byte	$14
04187 0E52                        1C            .byte	$1C
04188 0E53                        18            .byte	$18
04189 0E54                        14            .byte	$14
04190 0E55                        1C            .byte	$1C
04191 0E56                        1A            .byte	$1A
04192 0E57                        14            .byte	$14
04193 0E58                        1C            .byte	$1C
04194 0E59                        1C            .byte	$1C
04195 0E5A                        14            .byte	$14
04196 0E5B                        1A            .byte	$1A
04197 0E5C                        1C            .byte	$1C
04198 0E5D                        14            .byte	$14
04199 0E5E                        18            .byte	$18
04200 0E5F                        1C            .byte	$1C
04201 0E60                        14            .byte	$14
04202 0E61                        16            .byte	$16
04203 0E62                        1C            .byte	$1C
04204                                           ! 821   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04205 0E63                        00            .byte	0
04206 0E64                        00            .byte	0
04207 0E65                        10            .byte	$10
04208 0E66                        04            .byte	4
04209 0E67                        00            .byte	0
04210 0E68                        10            .byte	$10
04211 0E69                        08            .byte	8
04212 0E6A                        00            .byte	0
04213 0E6B                        10            .byte	$10
04214 0E6C                        0C            .byte	$C
04215 0E6D                        00            .byte	0
04216 0E6E                        10            .byte	$10
04217 0E6F                        10            .byte	$10
04218 0E70                        00            .byte	0
04219 0E71                        10            .byte	$10
04220 0E72                        10            .byte	$10
04221 0E73                        00            .byte	0
04222 0E74                        0C            .byte	$C
04223 0E75                        10            .byte	$10
04224 0E76                        00            .byte	0
04225 0E77                        08            .byte	8
04226 0E78                        10            .byte	$10
04227 0E79                        00            .byte	0
04228 0E7A                        04            .byte	4
04229                                           ! 822   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
04230 0E7B                        10            .byte	$10
04231 0E7C                        00            .byte	0
04232 0E7D                        00            .byte	0
04233 0E7E                        10            .byte	$10
04234 0E7F                        04            .byte	4
04235 0E80                        00            .byte	0
04236 0E81                        10            .byte	$10
04237 0E82                        08            .byte	8
04238 0E83                        00            .byte	0
04239 0E84                        10            .byte	$10
04240 0E85                        0C            .byte	$C
04241 0E86                        00            .byte	0
04242 0E87                        10            .byte	$10
04243 0E88                        10            .byte	$10
04244 0E89                        00            .byte	0
04245 0E8A                        0C            .byte	$C
04246 0E8B                        10            .byte	$10
04247 0E8C                        00            .byte	0
04248 0E8D                        08            .byte	8
04249 0E8E                        10            .byte	$10
04250 0E8F                        00            .byte	0
04251 0E90                        04            .byte	4
04252 0E91                        10            .byte	$10
04253 0E92                        00            .byte	0
04254                                           ! 823   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0
04255 0E93                        00            .byte	0
04256 0E94                        10            .byte	$10
04257 0E95                        00            .byte	0
04258 0E96                        00            .byte	0
04259 0E97                        10            .byte	$10
04260 0E98                        04            .byte	4
04261 0E99                        00            .byte	0
04262 0E9A                        10            .byte	$10
04263 0E9B                        08            .byte	8
04264 0E9C                        00            .byte	0
04265 0E9D                        10            .byte	$10
04266 0E9E                        0C            .byte	$C
04267 0E9F                        00            .byte	0
04268 0EA0                        10            .byte	$10
04269 0EA1                        10            .byte	$10
04270 0EA2                        00            .byte	0
04271 0EA3                        0C            .byte	$C
04272 0EA4                        10            .byte	$10
04273 0EA5                        00            .byte	0
04274                                           ! 823 x08,0x10, 0x00,0x04,0x10,
04275 0EA6                        08            .byte	8
04276 0EA7                        10            .byte	$10
04277 0EA8                        00            .byte	0
04278 0EA9                        04            .byte	4
04279 0EAA                        10            .byte	$10
04280                                           ! 824   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04281 0EAB                        08            .byte	8
04282 0EAC                        08            .byte	8
04283 0EAD                        10            .byte	$10
04284 0EAE                        0A            .byte	$A
04285 0EAF                        08            .byte	8
04286 0EB0                        10            .byte	$10
04287 0EB1                        0C            .byte	$C
04288 0EB2                        08            .byte	8
04289 0EB3                        10            .byte	$10
04290 0EB4                        0E            .byte	$E
04291 0EB5                        08            .byte	8
04292 0EB6                        10            .byte	$10
04293 0EB7                        10            .byte	$10
04294 0EB8                        08            .byte	8
04295 0EB9                        10            .byte	$10
04296 0EBA                        10            .byte	$10
04297 0EBB                        08            .byte	8
04298 0EBC                        0E            .byte	$E
04299 0EBD                        10            .byte	$10
04300 0EBE                        08            .byte	8
04301 0EBF                        0C            .byte	$C
04302 0EC0                        10            .byte	$10
04303 0EC1                        08            .byte	8
04304 0EC2                        0A            .byte	$A
04305                                           ! 825   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04306 0EC3                        10            .byte	$10
04307 0EC4                        08            .byte	8
04308 0EC5                        08            .byte	8
04309 0EC6                        10            .byte	$10
04310 0EC7                        0A            .byte	$A
04311 0EC8                        08            .byte	8
04312 0EC9                        10            .byte	$10
04313 0ECA                        0C            .byte	$C
04314 0ECB                        08            .byte	8
04315 0ECC                        10            .byte	$10
04316 0ECD                        0E            .byte	$E
04317 0ECE                        08            .byte	8
04318 0ECF                        10            .byte	$10
04319 0ED0                        10            .byte	$10
04320 0ED1                        08            .byte	8
04321 0ED2                        0E            .byte	$E
04322 0ED3                        10            .byte	$10
04323 0ED4                        08            .byte	8
04324 0ED5                        0C            .byte	$C
04325 0ED6                        10            .byte	$10
04326 0ED7                        08            .byte	8
04327 0ED8                        0A            .byte	$A
04328 0ED9                        10            .byte	$10
04329 0EDA                        08            .byte	8
04330                                           ! 826   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04331 0EDB                        08            .byte	8
04332 0EDC                        10            .byte	$10
04333 0EDD                        08            .byte	8
04334 0EDE                        08            .byte	8
04335 0EDF                        10            .byte	$10
04336 0EE0                        0A            .byte	$A
04337 0EE1                        08            .byte	8
04338 0EE2                        10            .byte	$10
04339 0EE3                        0C            .byte	$C
04340 0EE4                        08            .byte	8
04341 0EE5                        10            .byte	$10
04342 0EE6                        0E            .byte	$E
04343 0EE7                        08            .byte	8
04344 0EE8                        10            .byte	$10
04345 0EE9                        10            .byte	$10
04346 0EEA                        08            .byte	8
04347 0EEB                        0E            .byte	$E
04348 0EEC                        10            .byte	$10
04349 0EED                        08            .byte	8
04350 0EEE                        0C            .byte	$C
04351 0EEF                        10            .byte	$10
04352 0EF0                        08            .byte	8
04353 0EF1                        0A            .byte	$A
04354 0EF2                        10            .byte	$10
04355                                           ! 827   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04356 0EF3                        0B            .byte	$B
04357 0EF4                        0B            .byte	$B
04358 0EF5                        10            .byte	$10
04359 0EF6                        0C            .byte	$C
04360 0EF7                        0B            .byte	$B
04361 0EF8                        10            .byte	$10
04362 0EF9                        0D            .byte	$D
04363 0EFA                        0B            .byte	$B
04364 0EFB                        10            .byte	$10
04365 0EFC                        0F            .byte	$F
04366 0EFD                        0B            .byte	$B
04367 0EFE                        10            .byte	$10
04368 0EFF                        10            .byte	$10
04369 0F00                        0B            .byte	$B
04370 0F01                        10            .byte	$10
04371 0F02                        10            .byte	$10
04372 0F03                        0B            .byte	$B
04373 0F04                        0F            .byte	$F
04374 0F05                        10            .byte	$10
04375 0F06                        0B            .byte	$B
04376 0F07                        0D            .byte	$D
04377 0F08                        10            .byte	$10
04378 0F09                        0B            .byte	$B
04379 0F0A                        0C            .byte	$C
04380                                           ! 828   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04381 0F0B                        10            .byte	$10
04382 0F0C                        0B            .byte	$B
04383 0F0D                        0B            .byte	$B
04384 0F0E                        10            .byte	$10
04385 0F0F                        0C            .byte	$C
04386 0F10                        0B            .byte	$B
04387 0F11                        10            .byte	$10
04388 0F12                        0D            .byte	$D
04389 0F13                        0B            .byte	$B
04390 0F14                        10            .byte	$10
04391 0F15                        0F            .byte	$F
04392 0F16                        0B            .byte	$B
04393 0F17                        10            .byte	$10
04394 0F18                        10            .byte	$10
04395 0F19                        0B            .byte	$B
04396 0F1A                        0F            .byte	$F
04397 0F1B                        10            .byte	$10
04398 0F1C                        0B            .byte	$B
04399 0F1D                        0D            .byte	$D
04400 0F1E                        10            .byte	$10
04401 0F1F                        0B            .byte	$B
04402 0F20                        0C            .byte	$C
04403 0F21                        10            .byte	$10
04404 0F22                        0B            .byte	$B
04405                                           ! 829   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04406 0F23                        0B            .byte	$B
04407 0F24                        10            .byte	$10
04408 0F25                        0B            .byte	$B
04409 0F26                        0B            .byte	$B
04410 0F27                        10            .byte	$10
04411 0F28                        0C            .byte	$C
04412 0F29                        0B            .byte	$B
04413 0F2A                        10            .byte	$10
04414 0F2B                        0D            .byte	$D
04415 0F2C                        0B            .byte	$B
04416 0F2D                        10            .byte	$10
04417 0F2E                        0F            .byte	$F
04418 0F2F                        0B            .byte	$B
04419 0F30                        10            .byte	$10
04420 0F31                        10            .byte	$10
04421 0F32                        0B            .byte	$B
04422 0F33                        0F            .byte	$F
04423 0F34                        10            .byte	$10
04424 0F35                        0B            .byte	$B
04425 0F36                        0D            .byte	$D
04426 0F37                        10            .byte	$10
04427 0F38                        0B            .byte	$B
04428 0F39                        0C            .byte	$C
04429 0F3A                        10            .byte	$10
04430                                           ! 830   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04431 0F3B                        00            .byte	0
04432 0F3C                        00            .byte	0
04433 0F3D                        00            .byte	0
04434 0F3E                        00            .byte	0
04435 0F3F                        00            .byte	0
04436 0F40                        00            .byte	0
04437 0F41                        00            .byte	0
04438 0F42                        00            .byte	0
04439 0F43                        00            .byte	0
04440 0F44                        00            .byte	0
04441 0F45                        00            .byte	0
04442 0F46                        00            .byte	0
04443 0F47                        00            .byte	0
04444 0F48                        00            .byte	0
04445 0F49                        00            .byte	0
04446 0F4A                        00            .byte	0
04447 0F4B                        00            .byte	0
04448 0F4C                        00            .byte	0
04449 0F4D                        00            .byte	0
04450 0F4E                        00            .byte	0
04451 0F4F                        00            .byte	0
04452 0F50                        00            .byte	0
04453 0F51                        00            .byte	0
04454                                           ! 831 };
04455 0F52                        00            .byte	0
04456                                           !BCC_EOS
04457                                           ! 832 static Bit8u static_functionality[0x10]=
04458                                           ! 833 {
04459                       00000F53            _static_functionality:
04460                                           ! 834          0xff,
04461 0F53                        FF            .byte	$FF
04462                                           ! 835          0xe0,
04463 0F54                        E0            .byte	$E0
04464                                           ! 836          0x0f,
04465 0F55                        0F            .byte	$F
04466                                           ! 837          0x00, 0x00, 0x00, 0x00,
04467 0F56                        00            .byte	0
04468 0F57                        00            .byte	0
04469 0F58                        00            .byte	0
04470 0F59                        00            .byte	0
04471                                           ! 838          0x07,
04472 0F5A                        07            .byte	7
04473                                           ! 839          0x02,
04474 0F5B                        02            .byte	2
04475                                           ! 840          0x08,
04476 0F5C                        08            .byte	8
04477                                           ! 841          0xe7,
04478 0F5D                        E7            .byte	$E7
04479                                           ! 842          0x0c,
04480 0F5E                        0C            .byte	$C
04481                                           ! 843          0x00,
04482 0F5F                        00            .byte	0
04483                                           ! 844          0x00,
04484 0F60                        00            .byte	0
04485                                           ! 845          0x00,
04486 0F61                        00            .byte	0
04487                                           ! 846          0x00
04488                                           ! 847 };
04489 0F62                        00            .byte	0
04490                                           !BCC_EOS
04491                                           ! 848 static Bit8u vgafont8[256*8]=
04492                                           ! 849 {
04493                       00000F63            _vgafont8:
04494                                           ! 850  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04495 0F63                        00            .byte	0
04496 0F64                        00            .byte	0
04497 0F65                        00            .byte	0
04498 0F66                        00            .byte	0
04499 0F67                        00            .byte	0
04500 0F68                        00            .byte	0
04501 0F69                        00            .byte	0
04502 0F6A                        00            .byte	0
04503                                           ! 851  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04504 0F6B                        7E            .byte	$7E
04505 0F6C                        81            .byte	$81
04506 0F6D                        A5            .byte	$A5
04507 0F6E                        81            .byte	$81
04508 0F6F                        BD            .byte	$BD
04509 0F70                        99            .byte	$99
04510 0F71                        81            .byte	$81
04511 0F72                        7E            .byte	$7E
04512                                           ! 852  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04513 0F73                        7E            .byte	$7E
04514 0F74                        FF            .byte	$FF
04515 0F75                        DB            .byte	$DB
04516 0F76                        FF            .byte	$FF
04517 0F77                        C3            .byte	$C3
04518 0F78                        E7            .byte	$E7
04519 0F79                        FF            .byte	$FF
04520 0F7A                        7E            .byte	$7E
04521                                           ! 853  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04522 0F7B                        6C            .byte	$6C
04523 0F7C                        FE            .byte	$FE
04524 0F7D                        FE            .byte	$FE
04525 0F7E                        FE            .byte	$FE
04526 0F7F                        7C            .byte	$7C
04527 0F80                        38            .byte	$38
04528 0F81                        10            .byte	$10
04529 0F82                        00            .byte	0
04530                                           ! 854  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04531 0F83                        10            .byte	$10
04532 0F84                        38            .byte	$38
04533 0F85                        7C            .byte	$7C
04534 0F86                        FE            .byte	$FE
04535 0F87                        7C            .byte	$7C
04536 0F88                        38            .byte	$38
04537 0F89                        10            .byte	$10
04538 0F8A                        00            .byte	0
04539                                           ! 855  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04540 0F8B                        38            .byte	$38
04541 0F8C                        7C            .byte	$7C
04542 0F8D                        38            .byte	$38
04543 0F8E                        FE            .byte	$FE
04544 0F8F                        FE            .byte	$FE
04545 0F90                        7C            .byte	$7C
04546 0F91                        38            .byte	$38
04547 0F92                        7C            .byte	$7C
04548                                           ! 856  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04549 0F93                        10            .byte	$10
04550 0F94                        10            .byte	$10
04551 0F95                        38            .byte	$38
04552 0F96                        7C            .byte	$7C
04553 0F97                        FE            .byte	$FE
04554 0F98                        7C            .byte	$7C
04555 0F99                        38            .byte	$38
04556 0F9A                        7C            .byte	$7C
04557                                           ! 857  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04558 0F9B                        00            .byte	0
04559 0F9C                        00            .byte	0
04560 0F9D                        18            .byte	$18
04561 0F9E                        3C            .byte	$3C
04562 0F9F                        3C            .byte	$3C
04563 0FA0                        18            .byte	$18
04564 0FA1                        00            .byte	0
04565 0FA2                        00            .byte	0
04566                                           ! 858  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04567 0FA3                        FF            .byte	$FF
04568 0FA4                        FF            .byte	$FF
04569 0FA5                        E7            .byte	$E7
04570 0FA6                        C3            .byte	$C3
04571 0FA7                        C3            .byte	$C3
04572 0FA8                        E7            .byte	$E7
04573 0FA9                        FF            .byte	$FF
04574 0FAA                        FF            .byte	$FF
04575                                           ! 859  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04576 0FAB                        00            .byte	0
04577 0FAC                        3C            .byte	$3C
04578 0FAD                        66            .byte	$66
04579 0FAE                        42            .byte	$42
04580 0FAF                        42            .byte	$42
04581 0FB0                        66            .byte	$66
04582 0FB1                        3C            .byte	$3C
04583 0FB2                        00            .byte	0
04584                                           ! 860  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04585 0FB3                        FF            .byte	$FF
04586 0FB4                        C3            .byte	$C3
04587 0FB5                        99            .byte	$99
04588 0FB6                        BD            .byte	$BD
04589 0FB7                        BD            .byte	$BD
04590 0FB8                        99            .byte	$99
04591 0FB9                        C3            .byte	$C3
04592 0FBA                        FF            .byte	$FF
04593                                           ! 861  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04594 0FBB                        0F            .byte	$F
04595 0FBC                        07            .byte	7
04596 0FBD                        0F            .byte	$F
04597 0FBE                        7D            .byte	$7D
04598 0FBF                        CC            .byte	$CC
04599 0FC0                        CC            .byte	$CC
04600 0FC1                        CC            .byte	$CC
04601 0FC2                        78            .byte	$78
04602                                           ! 862  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04603 0FC3                        3C            .byte	$3C
04604 0FC4                        66            .byte	$66
04605 0FC5                        66            .byte	$66
04606 0FC6                        66            .byte	$66
04607 0FC7                        3C            .byte	$3C
04608 0FC8                        18            .byte	$18
04609 0FC9                        7E            .byte	$7E
04610 0FCA                        18            .byte	$18
04611                                           ! 863  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04612 0FCB                        3F            .byte	$3F
04613 0FCC                        33            .byte	$33
04614 0FCD                        3F            .byte	$3F
04615 0FCE                        30            .byte	$30
04616 0FCF                        30            .byte	$30
04617 0FD0                        70            .byte	$70
04618 0FD1                        F0            .byte	$F0
04619 0FD2                        E0            .byte	$E0
04620                                           ! 864  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04621 0FD3                        7F            .byte	$7F
04622 0FD4                        63            .byte	$63
04623 0FD5                        7F            .byte	$7F
04624 0FD6                        63            .byte	$63
04625 0FD7                        63            .byte	$63
04626 0FD8                        67            .byte	$67
04627 0FD9                        E6            .byte	$E6
04628 0FDA                        C0            .byte	$C0
04629                                           ! 865  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04630 0FDB                        99            .byte	$99
04631 0FDC                        5A            .byte	$5A
04632 0FDD                        3C            .byte	$3C
04633 0FDE                        E7            .byte	$E7
04634 0FDF                        E7            .byte	$E7
04635 0FE0                        3C            .byte	$3C
04636 0FE1                        5A            .byte	$5A
04637 0FE2                        99            .byte	$99
04638                                           ! 866  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0,
04639 0FE3                        80            .byte	$80
04640 0FE4                        E0            .byte	$E0
04641 0FE5                        F8            .byte	$F8
04642 0FE6                        FE            .byte	$FE
04643 0FE7                        F8            .byte	$F8
04644                                           ! 866  0x80, 0x00,
04645 0FE8                        E0            .byte	$E0
04646 0FE9                        80            .byte	$80
04647 0FEA                        00            .byte	0
04648                                           ! 867  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04649 0FEB                        02            .byte	2
04650 0FEC                        0E            .byte	$E
04651 0FED                        3E            .byte	$3E
04652 0FEE                        FE            .byte	$FE
04653 0FEF                        3E            .byte	$3E
04654 0FF0                        0E            .byte	$E
04655 0FF1                        02            .byte	2
04656 0FF2                        00            .byte	0
04657                                           ! 868  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04658 0FF3                        18            .byte	$18
04659 0FF4                        3C            .byte	$3C
04660 0FF5                        7E            .byte	$7E
04661 0FF6                        18            .byte	$18
04662 0FF7                        18            .byte	$18
04663 0FF8                        7E            .byte	$7E
04664 0FF9                        3C            .byte	$3C
04665 0FFA                        18            .byte	$18
04666                                           ! 869  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04667 0FFB                        66            .byte	$66
04668 0FFC                        66            .byte	$66
04669 0FFD                        66            .byte	$66
04670 0FFE                        66            .byte	$66
04671 0FFF                        66            .byte	$66
04672 1000                        00            .byte	0
04673 1001                        66            .byte	$66
04674 1002                        00            .byte	0
04675                                           ! 870  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04676 1003                        7F            .byte	$7F
04677 1004                        DB            .byte	$DB
04678 1005                        DB            .byte	$DB
04679 1006                        7B            .byte	$7B
04680 1007                        1B            .byte	$1B
04681 1008                        1B            .byte	$1B
04682 1009                        1B            .byte	$1B
04683 100A                        00            .byte	0
04684                                           ! 871  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04685 100B                        3E            .byte	$3E
04686 100C                        63            .byte	$63
04687 100D                        38            .byte	$38
04688 100E                        6C            .byte	$6C
04689 100F                        6C            .byte	$6C
04690 1010                        38            .byte	$38
04691 1011                        CC            .byte	$CC
04692 1012                        78            .byte	$78
04693                                           ! 872  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04694 1013                        00            .byte	0
04695 1014                        00            .byte	0
04696 1015                        00            .byte	0
04697 1016                        00            .byte	0
04698 1017                        7E            .byte	$7E
04699 1018                        7E            .byte	$7E
04700 1019                        7E            .byte	$7E
04701 101A                        00            .byte	0
04702                                           ! 873  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04703 101B                        18            .byte	$18
04704 101C                        3C            .byte	$3C
04705 101D                        7E            .byte	$7E
04706 101E                        18            .byte	$18
04707 101F                        7E            .byte	$7E
04708 1020                        3C            .byte	$3C
04709 1021                        18            .byte	$18
04710 1022                        FF            .byte	$FF
04711                                           ! 874  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04712 1023                        18            .byte	$18
04713 1024                        3C            .byte	$3C
04714 1025                        7E            .byte	$7E
04715 1026                        18            .byte	$18
04716 1027                        18            .byte	$18
04717 1028                        18            .byte	$18
04718 1029                        18            .byte	$18
04719 102A                        00            .byte	0
04720                                           ! 875  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04721 102B                        18            .byte	$18
04722 102C                        18            .byte	$18
04723 102D                        18            .byte	$18
04724 102E                        18            .byte	$18
04725 102F                        7E            .byte	$7E
04726 1030                        3C            .byte	$3C
04727 1031                        18            .byte	$18
04728 1032                        00            .byte	0
04729                                           ! 876  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04730 1033                        00            .byte	0
04731 1034                        18            .byte	$18
04732 1035                        0C            .byte	$C
04733 1036                        FE            .byte	$FE
04734 1037                        0C            .byte	$C
04735 1038                        18            .byte	$18
04736 1039                        00            .byte	0
04737 103A                        00            .byte	0
04738                                           ! 877  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04739 103B                        00            .byte	0
04740 103C                        30            .byte	$30
04741 103D                        60            .byte	$60
04742 103E                        FE            .byte	$FE
04743 103F                        60            .byte	$60
04744 1040                        30            .byte	$30
04745 1041                        00            .byte	0
04746 1042                        00            .byte	0
04747                                           ! 878  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04748 1043                        00            .byte	0
04749 1044                        00            .byte	0
04750 1045                        C0            .byte	$C0
04751 1046                        C0            .byte	$C0
04752 1047                        C0            .byte	$C0
04753 1048                        FE            .byte	$FE
04754 1049                        00            .byte	0
04755 104A                        00            .byte	0
04756                                           ! 879  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04757 104B                        00            .byte	0
04758 104C                        24            .byte	$24
04759 104D                        66            .byte	$66
04760 104E                        FF            .byte	$FF
04761 104F                        66            .byte	$66
04762 1050                        24            .byte	$24
04763 1051                        00            .byte	0
04764 1052                        00            .byte	0
04765                                           ! 880  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04766 1053                        00            .byte	0
04767 1054                        18            .byte	$18
04768 1055                        3C            .byte	$3C
04769 1056                        7E            .byte	$7E
04770 1057                        FF            .byte	$FF
04771 1058                        FF            .byte	$FF
04772 1059                        00            .byte	0
04773 105A                        00            .byte	0
04774                                           ! 881  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04775 105B                        00            .byte	0
04776 105C                        FF            .byte	$FF
04777 105D                        FF            .byte	$FF
04778 105E                        7E            .byte	$7E
04779 105F                        3C            .byte	$3C
04780 1060                        18            .byte	$18
04781 1061                        00            .byte	0
04782 1062                        00            .byte	0
04783                                           ! 882  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04784 1063                        00            .byte	0
04785 1064                        00            .byte	0
04786 1065                        00            .byte	0
04787 1066                        00            .byte	0
04788 1067                        00            .byte	0
04789 1068                        00            .byte	0
04790 1069                        00            .byte	0
04791 106A                        00            .byte	0
04792                                           ! 883  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04793 106B                        30            .byte	$30
04794 106C                        78            .byte	$78
04795 106D                        78            .byte	$78
04796 106E                        30            .byte	$30
04797 106F                        30            .byte	$30
04798 1070                        00            .byte	0
04799 1071                        30            .byte	$30
04800 1072                        00            .byte	0
04801                                           ! 884  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04802 1073                        6C            .byte	$6C
04803 1074                        6C            .byte	$6C
04804 1075                        6C            .byte	$6C
04805 1076                        00            .byte	0
04806 1077                        00            .byte	0
04807 1078                        00            .byte	0
04808 1079                        00            .byte	0
04809 107A                        00            .byte	0
04810                                           ! 885  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04811 107B                        6C            .byte	$6C
04812 107C                        6C            .byte	$6C
04813 107D                        FE            .byte	$FE
04814 107E                        6C            .byte	$6C
04815 107F                        FE            .byte	$FE
04816 1080                        6C            .byte	$6C
04817 1081                        6C            .byte	$6C
04818 1082                        00            .byte	0
04819                                           ! 886  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04820 1083                        30            .byte	$30
04821 1084                        7C            .byte	$7C
04822 1085                        C0            .byte	$C0
04823 1086                        78            .byte	$78
04824 1087                        0C            .byte	$C
04825 1088                        F8            .byte	$F8
04826 1089                        30            .byte	$30
04827 108A                        00            .byte	0
04828                                           ! 887  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04829 108B                        00            .byte	0
04830 108C                        C6            .byte	$C6
04831 108D                        CC            .byte	$CC
04832 108E                        18            .byte	$18
04833 108F                        30            .byte	$30
04834 1090                        66            .byte	$66
04835 1091                        C6            .byte	$C6
04836 1092                        00            .byte	0
04837                                           ! 888  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04838 1093                        38            .byte	$38
04839 1094                        6C            .byte	$6C
04840 1095                        38            .byte	$38
04841 1096                        76            .byte	$76
04842 1097                        DC            .byte	$DC
04843 1098                        CC            .byte	$CC
04844 1099                        76            .byte	$76
04845 109A                        00            .byte	0
04846                                           ! 889  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04847 109B                        60            .byte	$60
04848 109C                        60            .byte	$60
04849 109D                        C0            .byte	$C0
04850 109E                        00            .byte	0
04851 109F                        00            .byte	0
04852 10A0                        00            .byte	0
04853 10A1                        00            .byte	0
04854 10A2                        00            .byte	0
04855                                           ! 890  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04856 10A3                        18            .byte	$18
04857 10A4                        30            .byte	$30
04858 10A5                        60            .byte	$60
04859 10A6                        60            .byte	$60
04860 10A7                        60            .byte	$60
04861 10A8                        30            .byte	$30
04862 10A9                        18            .byte	$18
04863 10AA                        00            .byte	0
04864                                           ! 891  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04865 10AB                        60            .byte	$60
04866 10AC                        30            .byte	$30
04867 10AD                        18            .byte	$18
04868 10AE                        18            .byte	$18
04869 10AF                        18            .byte	$18
04870 10B0                        30            .byte	$30
04871 10B1                        60            .byte	$60
04872 10B2                        00            .byte	0
04873                                           ! 892  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04874 10B3                        00            .byte	0
04875 10B4                        66            .byte	$66
04876 10B5                        3C            .byte	$3C
04877 10B6                        FF            .byte	$FF
04878 10B7                        3C            .byte	$3C
04879 10B8                        66            .byte	$66
04880 10B9                        00            .byte	0
04881 10BA                        00            .byte	0
04882                                           ! 893  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04883 10BB                        00            .byte	0
04884 10BC                        30            .byte	$30
04885 10BD                        30            .byte	$30
04886 10BE                        FC            .byte	$FC
04887 10BF                        30            .byte	$30
04888 10C0                        30            .byte	$30
04889 10C1                        00            .byte	0
04890 10C2                        00            .byte	0
04891                                           ! 894  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04892 10C3                        00            .byte	0
04893 10C4                        00            .byte	0
04894 10C5                        00            .byte	0
04895 10C6                        00            .byte	0
04896 10C7                        00            .byte	0
04897 10C8                        30            .byte	$30
04898 10C9                        30            .byte	$30
04899 10CA                        60            .byte	$60
04900                                           ! 895  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04901 10CB                        00            .byte	0
04902 10CC                        00            .byte	0
04903 10CD                        00            .byte	0
04904 10CE                        FC            .byte	$FC
04905 10CF                        00            .byte	0
04906 10D0                        00            .byte	0
04907 10D1                        00            .byte	0
04908 10D2                        00            .byte	0
04909                                           ! 896  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04910 10D3                        00            .byte	0
04911 10D4                        00            .byte	0
04912 10D5                        00            .byte	0
04913 10D6                        00            .byte	0
04914 10D7                        00            .byte	0
04915 10D8                        30            .byte	$30
04916 10D9                        30            .byte	$30
04917 10DA                        00            .byte	0
04918                                           ! 897  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04919 10DB                        06            .byte	6
04920 10DC                        0C            .byte	$C
04921 10DD                        18            .byte	$18
04922 10DE                        30            .byte	$30
04923 10DF                        60            .byte	$60
04924 10E0                        C0            .byte	$C0
04925 10E1                        80            .byte	$80
04926 10E2                        00            .byte	0
04927                                           ! 898  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04928 10E3                        7C            .byte	$7C
04929 10E4                        C6            .byte	$C6
04930 10E5                        CE            .byte	$CE
04931 10E6                        DE            .byte	$DE
04932 10E7                        F6            .byte	$F6
04933 10E8                        E6            .byte	$E6
04934 10E9                        7C            .byte	$7C
04935 10EA                        00            .byte	0
04936                                           ! 899  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04937 10EB                        30            .byte	$30
04938 10EC                        70            .byte	$70
04939 10ED                        30            .byte	$30
04940 10EE                        30            .byte	$30
04941 10EF                        30            .byte	$30
04942 10F0                        30            .byte	$30
04943 10F1                        FC            .byte	$FC
04944 10F2                        00            .byte	0
04945                                           ! 900  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04946 10F3                        78            .byte	$78
04947 10F4                        CC            .byte	$CC
04948 10F5                        0C            .byte	$C
04949 10F6                        38            .byte	$38
04950 10F7                        60            .byte	$60
04951 10F8                        CC            .byte	$CC
04952 10F9                        FC            .byte	$FC
04953 10FA                        00            .byte	0
04954                                           ! 901  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04955 10FB                        78            .byte	$78
04956 10FC                        CC            .byte	$CC
04957 10FD                        0C            .byte	$C
04958 10FE                        38            .byte	$38
04959 10FF                        0C            .byte	$C
04960 1100                        CC            .byte	$CC
04961 1101                        78            .byte	$78
04962 1102                        00            .byte	0
04963                                           ! 902  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04964 1103                        1C            .byte	$1C
04965 1104                        3C            .byte	$3C
04966 1105                        6C            .byte	$6C
04967 1106                        CC            .byte	$CC
04968 1107                        FE            .byte	$FE
04969 1108                        0C            .byte	$C
04970 1109                        1E            .byte	$1E
04971 110A                        00            .byte	0
04972                                           ! 903  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04973 110B                        FC            .byte	$FC
04974 110C                        C0            .byte	$C0
04975 110D                        F8            .byte	$F8
04976 110E                        0C            .byte	$C
04977 110F                        0C            .byte	$C
04978 1110                        CC            .byte	$CC
04979 1111                        78            .byte	$78
04980 1112                        00            .byte	0
04981                                           ! 904  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
04982 1113                        38            .byte	$38
04983 1114                        60            .byte	$60
04984 1115                        C0            .byte	$C0
04985 1116                        F8            .byte	$F8
04986 1117                        CC            .byte	$CC
04987 1118                        CC            .byte	$CC
04988 1119                        78            .byte	$78
04989 111A                        00            .byte	0
04990                                           ! 905  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
04991 111B                        FC            .byte	$FC
04992 111C                        CC            .byte	$CC
04993 111D                        0C            .byte	$C
04994 111E                        18            .byte	$18
04995 111F                        30            .byte	$30
04996 1120                        30            .byte	$30
04997 1121                        30            .byte	$30
04998 1122                        00            .byte	0
04999                                           ! 906  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05000 1123                        78            .byte	$78
05001 1124                        CC            .byte	$CC
05002 1125                        CC            .byte	$CC
05003 1126                        78            .byte	$78
05004 1127                        CC            .byte	$CC
05005 1128                        CC            .byte	$CC
05006 1129                        78            .byte	$78
05007 112A                        00            .byte	0
05008                                           ! 907  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
05009 112B                        78            .byte	$78
05010 112C                        CC            .byte	$CC
05011 112D                        CC            .byte	$CC
05012 112E                        7C            .byte	$7C
05013 112F                        0C            .byte	$C
05014 1130                        18            .byte	$18
05015 1131                        70            .byte	$70
05016 1132                        00            .byte	0
05017                                           ! 908  0x00, 0x30, 0x30, 0x00, 0
05018 1133                        00            .byte	0
05019 1134                        30            .byte	$30
05020 1135                        30            .byte	$30
05021 1136                        00            .byte	0
05022                                           ! 908 x00, 0x30, 0x30, 0x00,
05023 1137                        00            .byte	0
05024 1138                        30            .byte	$30
05025 1139                        30            .byte	$30
05026 113A                        00            .byte	0
05027                                           ! 909  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05028 113B                        00            .byte	0
05029 113C                        30            .byte	$30
05030 113D                        30            .byte	$30
05031 113E                        00            .byte	0
05032 113F                        00            .byte	0
05033 1140                        30            .byte	$30
05034 1141                        30            .byte	$30
05035 1142                        60            .byte	$60
05036                                           ! 910  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05037 1143                        18            .byte	$18
05038 1144                        30            .byte	$30
05039 1145                        60            .byte	$60
05040 1146                        C0            .byte	$C0
05041 1147                        60            .byte	$60
05042 1148                        30            .byte	$30
05043 1149                        18            .byte	$18
05044 114A                        00            .byte	0
05045                                           ! 911  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05046 114B                        00            .byte	0
05047 114C                        00            .byte	0
05048 114D                        FC            .byte	$FC
05049 114E                        00            .byte	0
05050 114F                        00            .byte	0
05051 1150                        FC            .byte	$FC
05052 1151                        00            .byte	0
05053 1152                        00            .byte	0
05054                                           ! 912  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05055 1153                        60            .byte	$60
05056 1154                        30            .byte	$30
05057 1155                        18            .byte	$18
05058 1156                        0C            .byte	$C
05059 1157                        18            .byte	$18
05060 1158                        30            .byte	$30
05061 1159                        60            .byte	$60
05062 115A                        00            .byte	0
05063                                           ! 913  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05064 115B                        78            .byte	$78
05065 115C                        CC            .byte	$CC
05066 115D                        0C            .byte	$C
05067 115E                        18            .byte	$18
05068 115F                        30            .byte	$30
05069 1160                        00            .byte	0
05070 1161                        30            .byte	$30
05071 1162                        00            .byte	0
05072                                           ! 914  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05073 1163                        7C            .byte	$7C
05074 1164                        C6            .byte	$C6
05075 1165                        DE            .byte	$DE
05076 1166                        DE            .byte	$DE
05077 1167                        DE            .byte	$DE
05078 1168                        C0            .byte	$C0
05079 1169                        78            .byte	$78
05080 116A                        00            .byte	0
05081                                           ! 915  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05082 116B                        30            .byte	$30
05083 116C                        78            .byte	$78
05084 116D                        CC            .byte	$CC
05085 116E                        CC            .byte	$CC
05086 116F                        FC            .byte	$FC
05087 1170                        CC            .byte	$CC
05088 1171                        CC            .byte	$CC
05089 1172                        00            .byte	0
05090                                           ! 916  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05091 1173                        FC            .byte	$FC
05092 1174                        66            .byte	$66
05093 1175                        66            .byte	$66
05094 1176                        7C            .byte	$7C
05095 1177                        66            .byte	$66
05096 1178                        66            .byte	$66
05097 1179                        FC            .byte	$FC
05098 117A                        00            .byte	0
05099                                           ! 917  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05100 117B                        3C            .byte	$3C
05101 117C                        66            .byte	$66
05102 117D                        C0            .byte	$C0
05103 117E                        C0            .byte	$C0
05104 117F                        C0            .byte	$C0
05105 1180                        66            .byte	$66
05106 1181                        3C            .byte	$3C
05107 1182                        00            .byte	0
05108                                           ! 918  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05109 1183                        F8            .byte	$F8
05110 1184                        6C            .byte	$6C
05111 1185                        66            .byte	$66
05112 1186                        66            .byte	$66
05113 1187                        66            .byte	$66
05114 1188                        6C            .byte	$6C
05115 1189                        F8            .byte	$F8
05116 118A                        00            .byte	0
05117                                           ! 919  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05118 118B                        FE            .byte	$FE
05119 118C                        62            .byte	$62
05120 118D                        68            .byte	$68
05121 118E                        78            .byte	$78
05122 118F                        68            .byte	$68
05123 1190                        62            .byte	$62
05124 1191                        FE            .byte	$FE
05125 1192                        00            .byte	0
05126                                           ! 920  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05127 1193                        FE            .byte	$FE
05128 1194                        62            .byte	$62
05129 1195                        68            .byte	$68
05130 1196                        78            .byte	$78
05131 1197                        68            .byte	$68
05132 1198                        60            .byte	$60
05133 1199                        F0            .byte	$F0
05134 119A                        00            .byte	0
05135                                           ! 921  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05136 119B                        3C            .byte	$3C
05137 119C                        66            .byte	$66
05138 119D                        C0            .byte	$C0
05139 119E                        C0            .byte	$C0
05140 119F                        CE            .byte	$CE
05141 11A0                        66            .byte	$66
05142 11A1                        3E            .byte	$3E
05143 11A2                        00            .byte	0
05144                                           ! 922  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05145 11A3                        CC            .byte	$CC
05146 11A4                        CC            .byte	$CC
05147 11A5                        CC            .byte	$CC
05148 11A6                        FC            .byte	$FC
05149 11A7                        CC            .byte	$CC
05150 11A8                        CC            .byte	$CC
05151 11A9                        CC            .byte	$CC
05152 11AA                        00            .byte	0
05153                                           ! 923  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05154 11AB                        78            .byte	$78
05155 11AC                        30            .byte	$30
05156 11AD                        30            .byte	$30
05157 11AE                        30            .byte	$30
05158 11AF                        30            .byte	$30
05159 11B0                        30            .byte	$30
05160 11B1                        78            .byte	$78
05161 11B2                        00            .byte	0
05162                                           ! 924  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05163 11B3                        1E            .byte	$1E
05164 11B4                        0C            .byte	$C
05165 11B5                        0C            .byte	$C
05166 11B6                        0C            .byte	$C
05167 11B7                        CC            .byte	$CC
05168 11B8                        CC            .byte	$CC
05169 11B9                        78            .byte	$78
05170 11BA                        00            .byte	0
05171                                           ! 925  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05172 11BB                        E6            .byte	$E6
05173 11BC                        66            .byte	$66
05174 11BD                        6C            .byte	$6C
05175 11BE                        78            .byte	$78
05176 11BF                        6C            .byte	$6C
05177 11C0                        66            .byte	$66
05178 11C1                        E6            .byte	$E6
05179 11C2                        00            .byte	0
05180                                           ! 926  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05181 11C3                        F0            .byte	$F0
05182 11C4                        60            .byte	$60
05183 11C5                        60            .byte	$60
05184 11C6                        60            .byte	$60
05185 11C7                        62            .byte	$62
05186 11C8                        66            .byte	$66
05187 11C9                        FE            .byte	$FE
05188 11CA                        00            .byte	0
05189                                           ! 927  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05190 11CB                        C6            .byte	$C6
05191 11CC                        EE            .byte	$EE
05192 11CD                        FE            .byte	$FE
05193 11CE                        FE            .byte	$FE
05194 11CF                        D6            .byte	$D6
05195 11D0                        C6            .byte	$C6
05196 11D1                        C6            .byte	$C6
05197 11D2                        00            .byte	0
05198                                           ! 928  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05199 11D3                        C6            .byte	$C6
05200 11D4                        E6            .byte	$E6
05201 11D5                        F6            .byte	$F6
05202 11D6                        DE            .byte	$DE
05203 11D7                        CE            .byte	$CE
05204 11D8                        C6            .byte	$C6
05205 11D9                        C6            .byte	$C6
05206 11DA                        00            .byte	0
05207                                           ! 929  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05208 11DB                        38            .byte	$38
05209 11DC                        6C            .byte	$6C
05210 11DD                        C6            .byte	$C6
05211 11DE                        C6            .byte	$C6
05212 11DF                        C6            .byte	$C6
05213 11E0                        6C            .byte	$6C
05214 11E1                        38            .byte	$38
05215 11E2                        00            .byte	0
05216                                           ! 930  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05217 11E3                        FC            .byte	$FC
05218 11E4                        66            .byte	$66
05219 11E5                        66            .byte	$66
05220 11E6                        7C            .byte	$7C
05221 11E7                        60            .byte	$60
05222 11E8                        60            .byte	$60
05223 11E9                        F0            .byte	$F0
05224 11EA                        00            .byte	0
05225                                           ! 931  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05226 11EB                        78            .byte	$78
05227 11EC                        CC            .byte	$CC
05228 11ED                        CC            .byte	$CC
05229 11EE                        CC            .byte	$CC
05230 11EF                        DC            .byte	$DC
05231 11F0                        78            .byte	$78
05232 11F1                        1C            .byte	$1C
05233 11F2                        00            .byte	0
05234                                           ! 932  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05235 11F3                        FC            .byte	$FC
05236 11F4                        66            .byte	$66
05237 11F5                        66            .byte	$66
05238 11F6                        7C            .byte	$7C
05239 11F7                        6C            .byte	$6C
05240 11F8                        66            .byte	$66
05241 11F9                        E6            .byte	$E6
05242 11FA                        00            .byte	0
05243                                           ! 933  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05244 11FB                        78            .byte	$78
05245 11FC                        CC            .byte	$CC
05246 11FD                        E0            .byte	$E0
05247 11FE                        70            .byte	$70
05248 11FF                        1C            .byte	$1C
05249 1200                        CC            .byte	$CC
05250 1201                        78            .byte	$78
05251 1202                        00            .byte	0
05252                                           ! 934  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05253 1203                        FC            .byte	$FC
05254 1204                        B4            .byte	$B4
05255 1205                        30            .byte	$30
05256 1206                        30            .byte	$30
05257 1207                        30            .byte	$30
05258 1208                        30            .byte	$30
05259 1209                        78            .byte	$78
05260 120A                        00            .byte	0
05261                                           ! 935  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05262 120B                        CC            .byte	$CC
05263 120C                        CC            .byte	$CC
05264 120D                        CC            .byte	$CC
05265 120E                        CC            .byte	$CC
05266 120F                        CC            .byte	$CC
05267 1210                        CC            .byte	$CC
05268 1211                        FC            .byte	$FC
05269 1212                        00            .byte	0
05270                                           ! 936  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05271 1213                        CC            .byte	$CC
05272 1214                        CC            .byte	$CC
05273 1215                        CC            .byte	$CC
05274 1216                        CC            .byte	$CC
05275 1217                        CC            .byte	$CC
05276 1218                        78            .byte	$78
05277 1219                        30            .byte	$30
05278 121A                        00            .byte	0
05279                                           ! 937  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05280 121B                        C6            .byte	$C6
05281 121C                        C6            .byte	$C6
05282 121D                        C6            .byte	$C6
05283 121E                        D6            .byte	$D6
05284 121F                        FE            .byte	$FE
05285 1220                        EE            .byte	$EE
05286 1221                        C6            .byte	$C6
05287 1222                        00            .byte	0
05288                                           ! 938  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05289 1223                        C6            .byte	$C6
05290 1224                        C6            .byte	$C6
05291 1225                        6C            .byte	$6C
05292 1226                        38            .byte	$38
05293 1227                        38            .byte	$38
05294 1228                        6C            .byte	$6C
05295 1229                        C6            .byte	$C6
05296 122A                        00            .byte	0
05297                                           ! 939  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05298 122B                        CC            .byte	$CC
05299 122C                        CC            .byte	$CC
05300 122D                        CC            .byte	$CC
05301 122E                        78            .byte	$78
05302 122F                        30            .byte	$30
05303 1230                        30            .byte	$30
05304 1231                        78            .byte	$78
05305 1232                        00            .byte	0
05306                                           ! 940  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05307 1233                        FE            .byte	$FE
05308 1234                        C6            .byte	$C6
05309 1235                        8C            .byte	$8C
05310 1236                        18            .byte	$18
05311 1237                        32            .byte	$32
05312 1238                        66            .byte	$66
05313 1239                        FE            .byte	$FE
05314 123A                        00            .byte	0
05315                                           ! 941  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05316 123B                        78            .byte	$78
05317 123C                        60            .byte	$60
05318 123D                        60            .byte	$60
05319 123E                        60            .byte	$60
05320 123F                        60            .byte	$60
05321 1240                        60            .byte	$60
05322 1241                        78            .byte	$78
05323 1242                        00            .byte	0
05324                                           ! 942  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05325 1243                        C0            .byte	$C0
05326 1244                        60            .byte	$60
05327 1245                        30            .byte	$30
05328 1246                        18            .byte	$18
05329 1247                        0C            .byte	$C
05330 1248                        06            .byte	6
05331 1249                        02            .byte	2
05332 124A                        00            .byte	0
05333                                           ! 943  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05334 124B                        78            .byte	$78
05335 124C                        18            .byte	$18
05336 124D                        18            .byte	$18
05337 124E                        18            .byte	$18
05338 124F                        18            .byte	$18
05339 1250                        18            .byte	$18
05340 1251                        78            .byte	$78
05341 1252                        00            .byte	0
05342                                           ! 944  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05343 1253                        10            .byte	$10
05344 1254                        38            .byte	$38
05345 1255                        6C            .byte	$6C
05346 1256                        C6            .byte	$C6
05347 1257                        00            .byte	0
05348 1258                        00            .byte	0
05349 1259                        00            .byte	0
05350 125A                        00            .byte	0
05351                                           ! 945  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05352 125B                        00            .byte	0
05353 125C                        00            .byte	0
05354 125D                        00            .byte	0
05355 125E                        00            .byte	0
05356 125F                        00            .byte	0
05357 1260                        00            .byte	0
05358 1261                        00            .byte	0
05359 1262                        FF            .byte	$FF
05360                                           ! 946  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05361 1263                        30            .byte	$30
05362 1264                        30            .byte	$30
05363 1265                        18            .byte	$18
05364 1266                        00            .byte	0
05365 1267                        00            .byte	0
05366 1268                        00            .byte	0
05367 1269                        00            .byte	0
05368 126A                        00            .byte	0
05369                                           ! 947  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05370 126B                        00            .byte	0
05371 126C                        00            .byte	0
05372 126D                        78            .byte	$78
05373 126E                        0C            .byte	$C
05374 126F                        7C            .byte	$7C
05375 1270                        CC            .byte	$CC
05376 1271                        76            .byte	$76
05377 1272                        00            .byte	0
05378                                           ! 948  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05379 1273                        E0            .byte	$E0
05380 1274                        60            .byte	$60
05381 1275                        60            .byte	$60
05382 1276                        7C            .byte	$7C
05383 1277                        66            .byte	$66
05384 1278                        66            .byte	$66
05385 1279                        DC            .byte	$DC
05386 127A                        00            .byte	0
05387                                           ! 949  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05388 127B                        00            .byte	0
05389 127C                        00            .byte	0
05390 127D                        78            .byte	$78
05391 127E                        CC            .byte	$CC
05392 127F                        C0            .byte	$C0
05393 1280                        CC            .byte	$CC
05394 1281                        78            .byte	$78
05395 1282                        00            .byte	0
05396                                           ! 950  0x1c, 0x0c, 0x0
05397 1283                        1C            .byte	$1C
05398 1284                        0C            .byte	$C
05399                                           ! 950 c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05400 1285                        0C            .byte	$C
05401 1286                        7C            .byte	$7C
05402 1287                        CC            .byte	$CC
05403 1288                        CC            .byte	$CC
05404 1289                        76            .byte	$76
05405 128A                        00            .byte	0
05406                                           ! 951  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05407 128B                        00            .byte	0
05408 128C                        00            .byte	0
05409 128D                        78            .byte	$78
05410 128E                        CC            .byte	$CC
05411 128F                        FC            .byte	$FC
05412 1290                        C0            .byte	$C0
05413 1291                        78            .byte	$78
05414 1292                        00            .byte	0
05415                                           ! 952  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05416 1293                        38            .byte	$38
05417 1294                        6C            .byte	$6C
05418 1295                        60            .byte	$60
05419 1296                        F0            .byte	$F0
05420 1297                        60            .byte	$60
05421 1298                        60            .byte	$60
05422 1299                        F0            .byte	$F0
05423 129A                        00            .byte	0
05424                                           ! 953  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05425 129B                        00            .byte	0
05426 129C                        00            .byte	0
05427 129D                        76            .byte	$76
05428 129E                        CC            .byte	$CC
05429 129F                        CC            .byte	$CC
05430 12A0                        7C            .byte	$7C
05431 12A1                        0C            .byte	$C
05432 12A2                        F8            .byte	$F8
05433                                           ! 954  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05434 12A3                        E0            .byte	$E0
05435 12A4                        60            .byte	$60
05436 12A5                        6C            .byte	$6C
05437 12A6                        76            .byte	$76
05438 12A7                        66            .byte	$66
05439 12A8                        66            .byte	$66
05440 12A9                        E6            .byte	$E6
05441 12AA                        00            .byte	0
05442                                           ! 955  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05443 12AB                        30            .byte	$30
05444 12AC                        00            .byte	0
05445 12AD                        70            .byte	$70
05446 12AE                        30            .byte	$30
05447 12AF                        30            .byte	$30
05448 12B0                        30            .byte	$30
05449 12B1                        78            .byte	$78
05450 12B2                        00            .byte	0
05451                                           ! 956  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05452 12B3                        0C            .byte	$C
05453 12B4                        00            .byte	0
05454 12B5                        0C            .byte	$C
05455 12B6                        0C            .byte	$C
05456 12B7                        0C            .byte	$C
05457 12B8                        CC            .byte	$CC
05458 12B9                        CC            .byte	$CC
05459 12BA                        78            .byte	$78
05460                                           ! 957  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05461 12BB                        E0            .byte	$E0
05462 12BC                        60            .byte	$60
05463 12BD                        66            .byte	$66
05464 12BE                        6C            .byte	$6C
05465 12BF                        78            .byte	$78
05466 12C0                        6C            .byte	$6C
05467 12C1                        E6            .byte	$E6
05468 12C2                        00            .byte	0
05469                                           ! 958  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05470 12C3                        70            .byte	$70
05471 12C4                        30            .byte	$30
05472 12C5                        30            .byte	$30
05473 12C6                        30            .byte	$30
05474 12C7                        30            .byte	$30
05475 12C8                        30            .byte	$30
05476 12C9                        78            .byte	$78
05477 12CA                        00            .byte	0
05478                                           ! 959  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05479 12CB                        00            .byte	0
05480 12CC                        00            .byte	0
05481 12CD                        CC            .byte	$CC
05482 12CE                        FE            .byte	$FE
05483 12CF                        FE            .byte	$FE
05484 12D0                        D6            .byte	$D6
05485 12D1                        C6            .byte	$C6
05486 12D2                        00            .byte	0
05487                                           ! 960  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05488 12D3                        00            .byte	0
05489 12D4                        00            .byte	0
05490 12D5                        F8            .byte	$F8
05491 12D6                        CC            .byte	$CC
05492 12D7                        CC            .byte	$CC
05493 12D8                        CC            .byte	$CC
05494 12D9                        CC            .byte	$CC
05495 12DA                        00            .byte	0
05496                                           ! 961  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05497 12DB                        00            .byte	0
05498 12DC                        00            .byte	0
05499 12DD                        78            .byte	$78
05500 12DE                        CC            .byte	$CC
05501 12DF                        CC            .byte	$CC
05502 12E0                        CC            .byte	$CC
05503 12E1                        78            .byte	$78
05504 12E2                        00            .byte	0
05505                                           ! 962  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05506 12E3                        00            .byte	0
05507 12E4                        00            .byte	0
05508 12E5                        DC            .byte	$DC
05509 12E6                        66            .byte	$66
05510 12E7                        66            .byte	$66
05511 12E8                        7C            .byte	$7C
05512 12E9                        60            .byte	$60
05513 12EA                        F0            .byte	$F0
05514                                           ! 963  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05515 12EB                        00            .byte	0
05516 12EC                        00            .byte	0
05517 12ED                        76            .byte	$76
05518 12EE                        CC            .byte	$CC
05519 12EF                        CC            .byte	$CC
05520 12F0                        7C            .byte	$7C
05521 12F1                        0C            .byte	$C
05522 12F2                        1E            .byte	$1E
05523                                           ! 964  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05524 12F3                        00            .byte	0
05525 12F4                        00            .byte	0
05526 12F5                        DC            .byte	$DC
05527 12F6                        76            .byte	$76
05528 12F7                        66            .byte	$66
05529 12F8                        60            .byte	$60
05530 12F9                        F0            .byte	$F0
05531 12FA                        00            .byte	0
05532                                           ! 965  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05533 12FB                        00            .byte	0
05534 12FC                        00            .byte	0
05535 12FD                        7C            .byte	$7C
05536 12FE                        C0            .byte	$C0
05537 12FF                        78            .byte	$78
05538 1300                        0C            .byte	$C
05539 1301                        F8            .byte	$F8
05540 1302                        00            .byte	0
05541                                           ! 966  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05542 1303                        10            .byte	$10
05543 1304                        30            .byte	$30
05544 1305                        7C            .byte	$7C
05545 1306                        30            .byte	$30
05546 1307                        30            .byte	$30
05547 1308                        34            .byte	$34
05548 1309                        18            .byte	$18
05549 130A                        00            .byte	0
05550                                           ! 967  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05551 130B                        00            .byte	0
05552 130C                        00            .byte	0
05553 130D                        CC            .byte	$CC
05554 130E                        CC            .byte	$CC
05555 130F                        CC            .byte	$CC
05556 1310                        CC            .byte	$CC
05557 1311                        76            .byte	$76
05558 1312                        00            .byte	0
05559                                           ! 968  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05560 1313                        00            .byte	0
05561 1314                        00            .byte	0
05562 1315                        CC            .byte	$CC
05563 1316                        CC            .byte	$CC
05564 1317                        CC            .byte	$CC
05565 1318                        78            .byte	$78
05566 1319                        30            .byte	$30
05567 131A                        00            .byte	0
05568                                           ! 969  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05569 131B                        00            .byte	0
05570 131C                        00            .byte	0
05571 131D                        C6            .byte	$C6
05572 131E                        D6            .byte	$D6
05573 131F                        FE            .byte	$FE
05574 1320                        FE            .byte	$FE
05575 1321                        6C            .byte	$6C
05576 1322                        00            .byte	0
05577                                           ! 970  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05578 1323                        00            .byte	0
05579 1324                        00            .byte	0
05580 1325                        C6            .byte	$C6
05581 1326                        6C            .byte	$6C
05582 1327                        38            .byte	$38
05583 1328                        6C            .byte	$6C
05584 1329                        C6            .byte	$C6
05585 132A                        00            .byte	0
05586                                           ! 971  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05587 132B                        00            .byte	0
05588 132C                        00            .byte	0
05589 132D                        CC            .byte	$CC
05590 132E                        CC            .byte	$CC
05591 132F                        CC            .byte	$CC
05592 1330                        7C            .byte	$7C
05593 1331                        0C            .byte	$C
05594 1332                        F8            .byte	$F8
05595                                           ! 972  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05596 1333                        00            .byte	0
05597 1334                        00            .byte	0
05598 1335                        FC            .byte	$FC
05599 1336                        98            .byte	$98
05600 1337                        30            .byte	$30
05601 1338                        64            .byte	$64
05602 1339                        FC            .byte	$FC
05603 133A                        00            .byte	0
05604                                           ! 973  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05605 133B                        1C            .byte	$1C
05606 133C                        30            .byte	$30
05607 133D                        30            .byte	$30
05608 133E                        E0            .byte	$E0
05609 133F                        30            .byte	$30
05610 1340                        30            .byte	$30
05611 1341                        1C            .byte	$1C
05612 1342                        00            .byte	0
05613                                           ! 974  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05614 1343                        18            .byte	$18
05615 1344                        18            .byte	$18
05616 1345                        18            .byte	$18
05617 1346                        00            .byte	0
05618 1347                        18            .byte	$18
05619 1348                        18            .byte	$18
05620 1349                        18            .byte	$18
05621 134A                        00            .byte	0
05622                                           ! 975  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05623 134B                        E0            .byte	$E0
05624 134C                        30            .byte	$30
05625 134D                        30            .byte	$30
05626 134E                        1C            .byte	$1C
05627 134F                        30            .byte	$30
05628 1350                        30            .byte	$30
05629 1351                        E0            .byte	$E0
05630 1352                        00            .byte	0
05631                                           ! 976  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05632 1353                        76            .byte	$76
05633 1354                        DC            .byte	$DC
05634 1355                        00            .byte	0
05635 1356                        00            .byte	0
05636 1357                        00            .byte	0
05637 1358                        00            .byte	0
05638 1359                        00            .byte	0
05639 135A                        00            .byte	0
05640                                           ! 977  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05641 135B                        00            .byte	0
05642 135C                        10            .byte	$10
05643 135D                        38            .byte	$38
05644 135E                        6C            .byte	$6C
05645 135F                        C6            .byte	$C6
05646 1360                        C6            .byte	$C6
05647 1361                        FE            .byte	$FE
05648 1362                        00            .byte	0
05649                                           ! 978  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05650 1363                        78            .byte	$78
05651 1364                        CC            .byte	$CC
05652 1365                        C0            .byte	$C0
05653 1366                        CC            .byte	$CC
05654 1367                        78            .byte	$78
05655 1368                        18            .byte	$18
05656 1369                        0C            .byte	$C
05657 136A                        78            .byte	$78
05658                                           ! 979  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05659 136B                        00            .byte	0
05660 136C                        CC            .byte	$CC
05661 136D                        00            .byte	0
05662 136E                        CC            .byte	$CC
05663 136F                        CC            .byte	$CC
05664 1370                        CC            .byte	$CC
05665 1371                        7E            .byte	$7E
05666 1372                        00            .byte	0
05667                                           ! 980  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05668 1373                        1C            .byte	$1C
05669 1374                        00            .byte	0
05670 1375                        78            .byte	$78
05671 1376                        CC            .byte	$CC
05672 1377                        FC            .byte	$FC
05673 1378                        C0            .byte	$C0
05674 1379                        78            .byte	$78
05675 137A                        00            .byte	0
05676                                           ! 981  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05677 137B                        7E            .byte	$7E
05678 137C                        C3            .byte	$C3
05679 137D                        3C            .byte	$3C
05680 137E                        06            .byte	6
05681 137F                        3E            .byte	$3E
05682 1380                        66            .byte	$66
05683 1381                        3F            .byte	$3F
05684 1382                        00            .byte	0
05685                                           ! 982  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05686 1383                        CC            .byte	$CC
05687 1384                        00            .byte	0
05688 1385                        78            .byte	$78
05689 1386                        0C            .byte	$C
05690 1387                        7C            .byte	$7C
05691 1388                        CC            .byte	$CC
05692 1389                        7E            .byte	$7E
05693 138A                        00            .byte	0
05694                                           ! 983  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05695 138B                        E0            .byte	$E0
05696 138C                        00            .byte	0
05697 138D                        78            .byte	$78
05698 138E                        0C            .byte	$C
05699 138F                        7C            .byte	$7C
05700 1390                        CC            .byte	$CC
05701 1391                        7E            .byte	$7E
05702 1392                        00            .byte	0
05703                                           ! 984  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05704 1393                        30            .byte	$30
05705 1394                        30            .byte	$30
05706 1395                        78            .byte	$78
05707 1396                        0C            .byte	$C
05708 1397                        7C            .byte	$7C
05709 1398                        CC            .byte	$CC
05710 1399                        7E            .byte	$7E
05711 139A                        00            .byte	0
05712                                           ! 985  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05713 139B                        00            .byte	0
05714 139C                        00            .byte	0
05715 139D                        78            .byte	$78
05716 139E                        C0            .byte	$C0
05717 139F                        C0            .byte	$C0
05718 13A0                        78            .byte	$78
05719 13A1                        0C            .byte	$C
05720 13A2                        38            .byte	$38
05721                                           ! 986  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05722 13A3                        7E            .byte	$7E
05723 13A4                        C3            .byte	$C3
05724 13A5                        3C            .byte	$3C
05725 13A6                        66            .byte	$66
05726 13A7                        7E            .byte	$7E
05727 13A8                        60            .byte	$60
05728 13A9                        3C            .byte	$3C
05729 13AA                        00            .byte	0
05730                                           ! 987  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05731 13AB                        CC            .byte	$CC
05732 13AC                        00            .byte	0
05733 13AD                        78            .byte	$78
05734 13AE                        CC            .byte	$CC
05735 13AF                        FC            .byte	$FC
05736 13B0                        C0            .byte	$C0
05737 13B1                        78            .byte	$78
05738 13B2                        00            .byte	0
05739                                           ! 988  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05740 13B3                        E0            .byte	$E0
05741 13B4                        00            .byte	0
05742 13B5                        78            .byte	$78
05743 13B6                        CC            .byte	$CC
05744 13B7                        FC            .byte	$FC
05745 13B8                        C0            .byte	$C0
05746 13B9                        78            .byte	$78
05747 13BA                        00            .byte	0
05748                                           ! 989  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05749 13BB                        CC            .byte	$CC
05750 13BC                        00            .byte	0
05751 13BD                        70            .byte	$70
05752 13BE                        30            .byte	$30
05753 13BF                        30            .byte	$30
05754 13C0                        30            .byte	$30
05755 13C1                        78            .byte	$78
05756 13C2                        00            .byte	0
05757                                           ! 990  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05758 13C3                        7C            .byte	$7C
05759 13C4                        C6            .byte	$C6
05760 13C5                        38            .byte	$38
05761 13C6                        18            .byte	$18
05762 13C7                        18            .byte	$18
05763 13C8                        18            .byte	$18
05764 13C9                        3C            .byte	$3C
05765 13CA                        00            .byte	0
05766                                           ! 991  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05767 13CB                        E0            .byte	$E0
05768 13CC                        00            .byte	0
05769 13CD                        70            .byte	$70
05770 13CE                        30            .byte	$30
05771 13CF                        30            .byte	$30
05772 13D0                        30            .byte	$30
05773 13D1                        78            .byte	$78
05774 13D2                        00            .byte	0
05775                                           ! 992  0xc6,
05776                                           ! 992  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05777 13D3                        C6            .byte	$C6
05778 13D4                        38            .byte	$38
05779 13D5                        6C            .byte	$6C
05780 13D6                        C6            .byte	$C6
05781 13D7                        FE            .byte	$FE
05782 13D8                        C6            .byte	$C6
05783 13D9                        C6            .byte	$C6
05784 13DA                        00            .byte	0
05785                                           ! 993  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05786 13DB                        30            .byte	$30
05787 13DC                        30            .byte	$30
05788 13DD                        00            .byte	0
05789 13DE                        78            .byte	$78
05790 13DF                        CC            .byte	$CC
05791 13E0                        FC            .byte	$FC
05792 13E1                        CC            .byte	$CC
05793 13E2                        00            .byte	0
05794                                           ! 994  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05795 13E3                        1C            .byte	$1C
05796 13E4                        00            .byte	0
05797 13E5                        FC            .byte	$FC
05798 13E6                        60            .byte	$60
05799 13E7                        78            .byte	$78
05800 13E8                        60            .byte	$60
05801 13E9                        FC            .byte	$FC
05802 13EA                        00            .byte	0
05803                                           ! 995  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05804 13EB                        00            .byte	0
05805 13EC                        00            .byte	0
05806 13ED                        7F            .byte	$7F
05807 13EE                        0C            .byte	$C
05808 13EF                        7F            .byte	$7F
05809 13F0                        CC            .byte	$CC
05810 13F1                        7F            .byte	$7F
05811 13F2                        00            .byte	0
05812                                           ! 996  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05813 13F3                        3E            .byte	$3E
05814 13F4                        6C            .byte	$6C
05815 13F5                        CC            .byte	$CC
05816 13F6                        FE            .byte	$FE
05817 13F7                        CC            .byte	$CC
05818 13F8                        CC            .byte	$CC
05819 13F9                        CE            .byte	$CE
05820 13FA                        00            .byte	0
05821                                           ! 997  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05822 13FB                        78            .byte	$78
05823 13FC                        CC            .byte	$CC
05824 13FD                        00            .byte	0
05825 13FE                        78            .byte	$78
05826 13FF                        CC            .byte	$CC
05827 1400                        CC            .byte	$CC
05828 1401                        78            .byte	$78
05829 1402                        00            .byte	0
05830                                           ! 998  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05831 1403                        00            .byte	0
05832 1404                        CC            .byte	$CC
05833 1405                        00            .byte	0
05834 1406                        78            .byte	$78
05835 1407                        CC            .byte	$CC
05836 1408                        CC            .byte	$CC
05837 1409                        78            .byte	$78
05838 140A                        00            .byte	0
05839                                           ! 999  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05840 140B                        00            .byte	0
05841 140C                        E0            .byte	$E0
05842 140D                        00            .byte	0
05843 140E                        78            .byte	$78
05844 140F                        CC            .byte	$CC
05845 1410                        CC            .byte	$CC
05846 1411                        78            .byte	$78
05847 1412                        00            .byte	0
05848                                           ! 1000  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05849 1413                        78            .byte	$78
05850 1414                        CC            .byte	$CC
05851 1415                        00            .byte	0
05852 1416                        CC            .byte	$CC
05853 1417                        CC            .byte	$CC
05854 1418                        CC            .byte	$CC
05855 1419                        7E            .byte	$7E
05856 141A                        00            .byte	0
05857                                           ! 1001  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05858 141B                        00            .byte	0
05859 141C                        E0            .byte	$E0
05860 141D                        00            .byte	0
05861 141E                        CC            .byte	$CC
05862 141F                        CC            .byte	$CC
05863 1420                        CC            .byte	$CC
05864 1421                        7E            .byte	$7E
05865 1422                        00            .byte	0
05866                                           ! 1002  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05867 1423                        00            .byte	0
05868 1424                        CC            .byte	$CC
05869 1425                        00            .byte	0
05870 1426                        CC            .byte	$CC
05871 1427                        CC            .byte	$CC
05872 1428                        7C            .byte	$7C
05873 1429                        0C            .byte	$C
05874 142A                        F8            .byte	$F8
05875                                           ! 1003  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05876 142B                        C3            .byte	$C3
05877 142C                        18            .byte	$18
05878 142D                        3C            .byte	$3C
05879 142E                        66            .byte	$66
05880 142F                        66            .byte	$66
05881 1430                        3C            .byte	$3C
05882 1431                        18            .byte	$18
05883 1432                        00            .byte	0
05884                                           ! 1004  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05885 1433                        CC            .byte	$CC
05886 1434                        00            .byte	0
05887 1435                        CC            .byte	$CC
05888 1436                        CC            .byte	$CC
05889 1437                        CC            .byte	$CC
05890 1438                        CC            .byte	$CC
05891 1439                        78            .byte	$78
05892 143A                        00            .byte	0
05893                                           ! 1005  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05894 143B                        18            .byte	$18
05895 143C                        18            .byte	$18
05896 143D                        7E            .byte	$7E
05897 143E                        C0            .byte	$C0
05898 143F                        C0            .byte	$C0
05899 1440                        7E            .byte	$7E
05900 1441                        18            .byte	$18
05901 1442                        18            .byte	$18
05902                                           ! 1006  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05903 1443                        38            .byte	$38
05904 1444                        6C            .byte	$6C
05905 1445                        64            .byte	$64
05906 1446                        F0            .byte	$F0
05907 1447                        60            .byte	$60
05908 1448                        E6            .byte	$E6
05909 1449                        FC            .byte	$FC
05910 144A                        00            .byte	0
05911                                           ! 1007  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05912 144B                        CC            .byte	$CC
05913 144C                        CC            .byte	$CC
05914 144D                        78            .byte	$78
05915 144E                        FC            .byte	$FC
05916 144F                        30            .byte	$30
05917 1450                        FC            .byte	$FC
05918 1451                        30            .byte	$30
05919 1452                        30            .byte	$30
05920                                           ! 1008  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05921 1453                        F8            .byte	$F8
05922 1454                        CC            .byte	$CC
05923 1455                        CC            .byte	$CC
05924 1456                        FA            .byte	$FA
05925 1457                        C6            .byte	$C6
05926 1458                        CF            .byte	$CF
05927 1459                        C6            .byte	$C6
05928 145A                        C7            .byte	$C7
05929                                           ! 1009  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05930 145B                        0E            .byte	$E
05931 145C                        1B            .byte	$1B
05932 145D                        18            .byte	$18
05933 145E                        3C            .byte	$3C
05934 145F                        18            .byte	$18
05935 1460                        18            .byte	$18
05936 1461                        D8            .byte	$D8
05937 1462                        70            .byte	$70
05938                                           ! 1010  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05939 1463                        1C            .byte	$1C
05940 1464                        00            .byte	0
05941 1465                        78            .byte	$78
05942 1466                        0C            .byte	$C
05943 1467                        7C            .byte	$7C
05944 1468                        CC            .byte	$CC
05945 1469                        7E            .byte	$7E
05946 146A                        00            .byte	0
05947                                           ! 1011  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05948 146B                        38            .byte	$38
05949 146C                        00            .byte	0
05950 146D                        70            .byte	$70
05951 146E                        30            .byte	$30
05952 146F                        30            .byte	$30
05953 1470                        30            .byte	$30
05954 1471                        78            .byte	$78
05955 1472                        00            .byte	0
05956                                           ! 1012  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05957 1473                        00            .byte	0
05958 1474                        1C            .byte	$1C
05959 1475                        00            .byte	0
05960 1476                        78            .byte	$78
05961 1477                        CC            .byte	$CC
05962 1478                        CC            .byte	$CC
05963 1479                        78            .byte	$78
05964 147A                        00            .byte	0
05965                                           ! 1013  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05966 147B                        00            .byte	0
05967 147C                        1C            .byte	$1C
05968 147D                        00            .byte	0
05969 147E                        CC            .byte	$CC
05970 147F                        CC            .byte	$CC
05971 1480                        CC            .byte	$CC
05972 1481                        7E            .byte	$7E
05973 1482                        00            .byte	0
05974                                           ! 1014  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05975 1483                        00            .byte	0
05976 1484                        F8            .byte	$F8
05977 1485                        00            .byte	0
05978 1486                        F8            .byte	$F8
05979 1487                        CC            .byte	$CC
05980 1488                        CC            .byte	$CC
05981 1489                        CC            .byte	$CC
05982 148A                        00            .byte	0
05983                                           ! 1015  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05984 148B                        FC            .byte	$FC
05985 148C                        00            .byte	0
05986 148D                        CC            .byte	$CC
05987 148E                        EC            .byte	$EC
05988 148F                        FC            .byte	$FC
05989 1490                        DC            .byte	$DC
05990 1491                        CC            .byte	$CC
05991 1492                        00            .byte	0
05992                                           ! 1016  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05993 1493                        3C            .byte	$3C
05994 1494                        6C            .byte	$6C
05995 1495                        6C            .byte	$6C
05996 1496                        3E            .byte	$3E
05997 1497                        00            .byte	0
05998 1498                        7E            .byte	$7E
05999 1499                        00            .byte	0
06000 149A                        00            .byte	0
06001                                           ! 1017  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06002 149B                        38            .byte	$38
06003 149C                        6C            .byte	$6C
06004 149D                        6C            .byte	$6C
06005 149E                        38            .byte	$38
06006 149F                        00            .byte	0
06007 14A0                        7C            .byte	$7C
06008 14A1                        00            .byte	0
06009 14A2                        00            .byte	0
06010                                           ! 1018  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06011 14A3                        30            .byte	$30
06012 14A4                        00            .byte	0
06013 14A5                        30            .byte	$30
06014 14A6                        60            .byte	$60
06015 14A7                        C0            .byte	$C0
06016 14A8                        CC            .byte	$CC
06017 14A9                        78            .byte	$78
06018 14AA                        00            .byte	0
06019                                           ! 1019  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06020 14AB                        00            .byte	0
06021 14AC                        00            .byte	0
06022 14AD                        00            .byte	0
06023 14AE                        FC            .byte	$FC
06024 14AF                        C0            .byte	$C0
06025 14B0                        C0            .byte	$C0
06026 14B1                        00            .byte	0
06027 14B2                        00            .byte	0
06028                                           ! 1020  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06029 14B3                        00            .byte	0
06030 14B4                        00            .byte	0
06031 14B5                        00            .byte	0
06032 14B6                        FC            .byte	$FC
06033 14B7                        0C            .byte	$C
06034 14B8                        0C            .byte	$C
06035 14B9                        00            .byte	0
06036 14BA                        00            .byte	0
06037                                           ! 1021  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06038 14BB                        C3            .byte	$C3
06039 14BC                        C6            .byte	$C6
06040 14BD                        CC            .byte	$CC
06041 14BE                        DE            .byte	$DE
06042 14BF                        33            .byte	$33
06043 14C0                        66            .byte	$66
06044 14C1                        CC            .byte	$CC
06045 14C2                        0F            .byte	$F
06046                                           ! 1022  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06047 14C3                        C3            .byte	$C3
06048 14C4                        C6            .byte	$C6
06049 14C5                        CC            .byte	$CC
06050 14C6                        DB            .byte	$DB
06051 14C7                        37            .byte	$37
06052 14C8                        6F            .byte	$6F
06053 14C9                        CF            .byte	$CF
06054 14CA                        03            .byte	3
06055                                           ! 1023  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06056 14CB                        18            .byte	$18
06057 14CC                        18            .byte	$18
06058 14CD                        00            .byte	0
06059 14CE                        18            .byte	$18
06060 14CF                        18            .byte	$18
06061 14D0                        18            .byte	$18
06062 14D1                        18            .byte	$18
06063 14D2                        00            .byte	0
06064                                           ! 1024  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06065 14D3                        00            .byte	0
06066 14D4                        33            .byte	$33
06067 14D5                        66            .byte	$66
06068 14D6                        CC            .byte	$CC
06069 14D7                        66            .byte	$66
06070 14D8                        33            .byte	$33
06071 14D9                        00            .byte	0
06072 14DA                        00            .byte	0
06073                                           ! 1025  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06074 14DB                        00            .byte	0
06075 14DC                        CC            .byte	$CC
06076 14DD                        66            .byte	$66
06077 14DE                        33            .byte	$33
06078 14DF                        66            .byte	$66
06079 14E0                        CC            .byte	$CC
06080 14E1                        00            .byte	0
06081 14E2                        00            .byte	0
06082                                           ! 1026  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06083 14E3                        22            .byte	$22
06084 14E4                        88            .byte	$88
06085 14E5                        22            .byte	$22
06086 14E6                        88            .byte	$88
06087 14E7                        22            .byte	$22
06088 14E8                        88            .byte	$88
06089 14E9                        22            .byte	$22
06090 14EA                        88            .byte	$88
06091                                           ! 1027  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06092 14EB                        55            .byte	$55
06093 14EC                        AA            .byte	$AA
06094 14ED                        55            .byte	$55
06095 14EE                        AA            .byte	$AA
06096 14EF                        55            .byte	$55
06097 14F0                        AA            .byte	$AA
06098 14F1                        55            .byte	$55
06099 14F2                        AA            .byte	$AA
06100                                           ! 1028  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06101 14F3                        DB            .byte	$DB
06102 14F4                        77            .byte	$77
06103 14F5                        DB            .byte	$DB
06104 14F6                        EE            .byte	$EE
06105 14F7                        DB            .byte	$DB
06106 14F8                        77            .byte	$77
06107 14F9                        DB            .byte	$DB
06108 14FA                        EE            .byte	$EE
06109                                           ! 1029  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06110 14FB                        18            .byte	$18
06111 14FC                        18            .byte	$18
06112 14FD                        18            .byte	$18
06113 14FE                        18            .byte	$18
06114 14FF                        18            .byte	$18
06115 1500                        18            .byte	$18
06116 1501                        18            .byte	$18
06117 1502                        18            .byte	$18
06118                                           ! 1030  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06119 1503                        18            .byte	$18
06120 1504                        18            .byte	$18
06121 1505                        18            .byte	$18
06122 1506                        18            .byte	$18
06123 1507                        F8            .byte	$F8
06124 1508                        18            .byte	$18
06125 1509                        18            .byte	$18
06126 150A                        18            .byte	$18
06127                                           ! 1031  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06128 150B                        18            .byte	$18
06129 150C                        18            .byte	$18
06130 150D                        F8            .byte	$F8
06131 150E                        18            .byte	$18
06132 150F                        F8            .byte	$F8
06133 1510                        18            .byte	$18
06134 1511                        18            .byte	$18
06135 1512                        18            .byte	$18
06136                                           ! 1032  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06137 1513                        36            .byte	$36
06138 1514                        36            .byte	$36
06139 1515                        36            .byte	$36
06140 1516                        36            .byte	$36
06141 1517                        F6            .byte	$F6
06142 1518                        36            .byte	$36
06143 1519                        36            .byte	$36
06144 151A                        36            .byte	$36
06145                                           ! 1033  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x
06146 151B                        00            .byte	0
06147 151C                        00            .byte	0
06148 151D                        00            .byte	0
06149 151E                        00            .byte	0
06150 151F                        FE            .byte	$FE
06151 1520                        36            .byte	$36
06152 1521                        36            .byte	$36
06153                                           ! 1033 36,
06154 1522                        36            .byte	$36
06155                                           ! 1034  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06156 1523                        00            .byte	0
06157 1524                        00            .byte	0
06158 1525                        F8            .byte	$F8
06159 1526                        18            .byte	$18
06160 1527                        F8            .byte	$F8
06161 1528                        18            .byte	$18
06162 1529                        18            .byte	$18
06163 152A                        18            .byte	$18
06164                                           ! 1035  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06165 152B                        36            .byte	$36
06166 152C                        36            .byte	$36
06167 152D                        F6            .byte	$F6
06168 152E                        06            .byte	6
06169 152F                        F6            .byte	$F6
06170 1530                        36            .byte	$36
06171 1531                        36            .byte	$36
06172 1532                        36            .byte	$36
06173                                           ! 1036  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06174 1533                        36            .byte	$36
06175 1534                        36            .byte	$36
06176 1535                        36            .byte	$36
06177 1536                        36            .byte	$36
06178 1537                        36            .byte	$36
06179 1538                        36            .byte	$36
06180 1539                        36            .byte	$36
06181 153A                        36            .byte	$36
06182                                           ! 1037  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06183 153B                        00            .byte	0
06184 153C                        00            .byte	0
06185 153D                        FE            .byte	$FE
06186 153E                        06            .byte	6
06187 153F                        F6            .byte	$F6
06188 1540                        36            .byte	$36
06189 1541                        36            .byte	$36
06190 1542                        36            .byte	$36
06191                                           ! 1038  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06192 1543                        36            .byte	$36
06193 1544                        36            .byte	$36
06194 1545                        F6            .byte	$F6
06195 1546                        06            .byte	6
06196 1547                        FE            .byte	$FE
06197 1548                        00            .byte	0
06198 1549                        00            .byte	0
06199 154A                        00            .byte	0
06200                                           ! 1039  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06201 154B                        36            .byte	$36
06202 154C                        36            .byte	$36
06203 154D                        36            .byte	$36
06204 154E                        36            .byte	$36
06205 154F                        FE            .byte	$FE
06206 1550                        00            .byte	0
06207 1551                        00            .byte	0
06208 1552                        00            .byte	0
06209                                           ! 1040  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06210 1553                        18            .byte	$18
06211 1554                        18            .byte	$18
06212 1555                        F8            .byte	$F8
06213 1556                        18            .byte	$18
06214 1557                        F8            .byte	$F8
06215 1558                        00            .byte	0
06216 1559                        00            .byte	0
06217 155A                        00            .byte	0
06218                                           ! 1041  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06219 155B                        00            .byte	0
06220 155C                        00            .byte	0
06221 155D                        00            .byte	0
06222 155E                        00            .byte	0
06223 155F                        F8            .byte	$F8
06224 1560                        18            .byte	$18
06225 1561                        18            .byte	$18
06226 1562                        18            .byte	$18
06227                                           ! 1042  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06228 1563                        18            .byte	$18
06229 1564                        18            .byte	$18
06230 1565                        18            .byte	$18
06231 1566                        18            .byte	$18
06232 1567                        1F            .byte	$1F
06233 1568                        00            .byte	0
06234 1569                        00            .byte	0
06235 156A                        00            .byte	0
06236                                           ! 1043  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06237 156B                        18            .byte	$18
06238 156C                        18            .byte	$18
06239 156D                        18            .byte	$18
06240 156E                        18            .byte	$18
06241 156F                        FF            .byte	$FF
06242 1570                        00            .byte	0
06243 1571                        00            .byte	0
06244 1572                        00            .byte	0
06245                                           ! 1044  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06246 1573                        00            .byte	0
06247 1574                        00            .byte	0
06248 1575                        00            .byte	0
06249 1576                        00            .byte	0
06250 1577                        FF            .byte	$FF
06251 1578                        18            .byte	$18
06252 1579                        18            .byte	$18
06253 157A                        18            .byte	$18
06254                                           ! 1045  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06255 157B                        18            .byte	$18
06256 157C                        18            .byte	$18
06257 157D                        18            .byte	$18
06258 157E                        18            .byte	$18
06259 157F                        1F            .byte	$1F
06260 1580                        18            .byte	$18
06261 1581                        18            .byte	$18
06262 1582                        18            .byte	$18
06263                                           ! 1046  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06264 1583                        00            .byte	0
06265 1584                        00            .byte	0
06266 1585                        00            .byte	0
06267 1586                        00            .byte	0
06268 1587                        FF            .byte	$FF
06269 1588                        00            .byte	0
06270 1589                        00            .byte	0
06271 158A                        00            .byte	0
06272                                           ! 1047  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06273 158B                        18            .byte	$18
06274 158C                        18            .byte	$18
06275 158D                        18            .byte	$18
06276 158E                        18            .byte	$18
06277 158F                        FF            .byte	$FF
06278 1590                        18            .byte	$18
06279 1591                        18            .byte	$18
06280 1592                        18            .byte	$18
06281                                           ! 1048  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06282 1593                        18            .byte	$18
06283 1594                        18            .byte	$18
06284 1595                        1F            .byte	$1F
06285 1596                        18            .byte	$18
06286 1597                        1F            .byte	$1F
06287 1598                        18            .byte	$18
06288 1599                        18            .byte	$18
06289 159A                        18            .byte	$18
06290                                           ! 1049  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06291 159B                        36            .byte	$36
06292 159C                        36            .byte	$36
06293 159D                        36            .byte	$36
06294 159E                        36            .byte	$36
06295 159F                        37            .byte	$37
06296 15A0                        36            .byte	$36
06297 15A1                        36            .byte	$36
06298 15A2                        36            .byte	$36
06299                                           ! 1050  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06300 15A3                        36            .byte	$36
06301 15A4                        36            .byte	$36
06302 15A5                        37            .byte	$37
06303 15A6                        30            .byte	$30
06304 15A7                        3F            .byte	$3F
06305 15A8                        00            .byte	0
06306 15A9                        00            .byte	0
06307 15AA                        00            .byte	0
06308                                           ! 1051  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06309 15AB                        00            .byte	0
06310 15AC                        00            .byte	0
06311 15AD                        3F            .byte	$3F
06312 15AE                        30            .byte	$30
06313 15AF                        37            .byte	$37
06314 15B0                        36            .byte	$36
06315 15B1                        36            .byte	$36
06316 15B2                        36            .byte	$36
06317                                           ! 1052  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06318 15B3                        36            .byte	$36
06319 15B4                        36            .byte	$36
06320 15B5                        F7            .byte	$F7
06321 15B6                        00            .byte	0
06322 15B7                        FF            .byte	$FF
06323 15B8                        00            .byte	0
06324 15B9                        00            .byte	0
06325 15BA                        00            .byte	0
06326                                           ! 1053  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06327 15BB                        00            .byte	0
06328 15BC                        00            .byte	0
06329 15BD                        FF            .byte	$FF
06330 15BE                        00            .byte	0
06331 15BF                        F7            .byte	$F7
06332 15C0                        36            .byte	$36
06333 15C1                        36            .byte	$36
06334 15C2                        36            .byte	$36
06335                                           ! 1054  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06336 15C3                        36            .byte	$36
06337 15C4                        36            .byte	$36
06338 15C5                        37            .byte	$37
06339 15C6                        30            .byte	$30
06340 15C7                        37            .byte	$37
06341 15C8                        36            .byte	$36
06342 15C9                        36            .byte	$36
06343 15CA                        36            .byte	$36
06344                                           ! 1055  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06345 15CB                        00            .byte	0
06346 15CC                        00            .byte	0
06347 15CD                        FF            .byte	$FF
06348 15CE                        00            .byte	0
06349 15CF                        FF            .byte	$FF
06350 15D0                        00            .byte	0
06351 15D1                        00            .byte	0
06352 15D2                        00            .byte	0
06353                                           ! 1056  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06354 15D3                        36            .byte	$36
06355 15D4                        36            .byte	$36
06356 15D5                        F7            .byte	$F7
06357 15D6                        00            .byte	0
06358 15D7                        F7            .byte	$F7
06359 15D8                        36            .byte	$36
06360 15D9                        36            .byte	$36
06361 15DA                        36            .byte	$36
06362                                           ! 1057  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06363 15DB                        18            .byte	$18
06364 15DC                        18            .byte	$18
06365 15DD                        FF            .byte	$FF
06366 15DE                        00            .byte	0
06367 15DF                        FF            .byte	$FF
06368 15E0                        00            .byte	0
06369 15E1                        00            .byte	0
06370 15E2                        00            .byte	0
06371                                           ! 1058  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06372 15E3                        36            .byte	$36
06373 15E4                        36            .byte	$36
06374 15E5                        36            .byte	$36
06375 15E6                        36            .byte	$36
06376 15E7                        FF            .byte	$FF
06377 15E8                        00            .byte	0
06378 15E9                        00            .byte	0
06379 15EA                        00            .byte	0
06380                                           ! 1059  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06381 15EB                        00            .byte	0
06382 15EC                        00            .byte	0
06383 15ED                        FF            .byte	$FF
06384 15EE                        00            .byte	0
06385 15EF                        FF            .byte	$FF
06386 15F0                        18            .byte	$18
06387 15F1                        18            .byte	$18
06388 15F2                        18            .byte	$18
06389                                           ! 1060  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06390 15F3                        00            .byte	0
06391 15F4                        00            .byte	0
06392 15F5                        00            .byte	0
06393 15F6                        00            .byte	0
06394 15F7                        FF            .byte	$FF
06395 15F8                        36            .byte	$36
06396 15F9                        36            .byte	$36
06397 15FA                        36            .byte	$36
06398                                           ! 1061  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06399 15FB                        36            .byte	$36
06400 15FC                        36            .byte	$36
06401 15FD                        36            .byte	$36
06402 15FE                        36            .byte	$36
06403 15FF                        3F            .byte	$3F
06404 1600                        00            .byte	0
06405 1601                        00            .byte	0
06406 1602                        00            .byte	0
06407                                           ! 1062  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06408 1603                        18            .byte	$18
06409 1604                        18            .byte	$18
06410 1605                        1F            .byte	$1F
06411 1606                        18            .byte	$18
06412 1607                        1F            .byte	$1F
06413 1608                        00            .byte	0
06414 1609                        00            .byte	0
06415 160A                        00            .byte	0
06416                                           ! 1063  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06417 160B                        00            .byte	0
06418 160C                        00            .byte	0
06419 160D                        1F            .byte	$1F
06420 160E                        18            .byte	$18
06421 160F                        1F            .byte	$1F
06422 1610                        18            .byte	$18
06423 1611                        18            .byte	$18
06424 1612                        18            .byte	$18
06425                                           ! 1064  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06426 1613                        00            .byte	0
06427 1614                        00            .byte	0
06428 1615                        00            .byte	0
06429 1616                        00            .byte	0
06430 1617                        3F            .byte	$3F
06431 1618                        36            .byte	$36
06432 1619                        36            .byte	$36
06433 161A                        36            .byte	$36
06434                                           ! 1065  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06435 161B                        36            .byte	$36
06436 161C                        36            .byte	$36
06437 161D                        36            .byte	$36
06438 161E                        36            .byte	$36
06439 161F                        FF            .byte	$FF
06440 1620                        36            .byte	$36
06441 1621                        36            .byte	$36
06442 1622                        36            .byte	$36
06443                                           ! 1066  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06444 1623                        18            .byte	$18
06445 1624                        18            .byte	$18
06446 1625                        FF            .byte	$FF
06447 1626                        18            .byte	$18
06448 1627                        FF            .byte	$FF
06449 1628                        18            .byte	$18
06450 1629                        18            .byte	$18
06451 162A                        18            .byte	$18
06452                                           ! 1067  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06453 162B                        18            .byte	$18
06454 162C                        18            .byte	$18
06455 162D                        18            .byte	$18
06456 162E                        18            .byte	$18
06457 162F                        F8            .byte	$F8
06458 1630                        00            .byte	0
06459 1631                        00            .byte	0
06460 1632                        00            .byte	0
06461                                           ! 1068  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06462 1633                        00            .byte	0
06463 1634                        00            .byte	0
06464 1635                        00            .byte	0
06465 1636                        00            .byte	0
06466 1637                        1F            .byte	$1F
06467 1638                        18            .byte	$18
06468 1639                        18            .byte	$18
06469 163A                        18            .byte	$18
06470                                           ! 1069  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06471 163B                        FF            .byte	$FF
06472 163C                        FF            .byte	$FF
06473 163D                        FF            .byte	$FF
06474 163E                        FF            .byte	$FF
06475 163F                        FF            .byte	$FF
06476 1640                        FF            .byte	$FF
06477 1641                        FF            .byte	$FF
06478 1642                        FF            .byte	$FF
06479                                           ! 1070  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06480 1643                        00            .byte	0
06481 1644                        00            .byte	0
06482 1645                        00            .byte	0
06483 1646                        00            .byte	0
06484 1647                        FF            .byte	$FF
06485 1648                        FF            .byte	$FF
06486 1649                        FF            .byte	$FF
06487 164A                        FF            .byte	$FF
06488                                           ! 1071  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06489 164B                        F0            .byte	$F0
06490 164C                        F0            .byte	$F0
06491 164D                        F0            .byte	$F0
06492 164E                        F0            .byte	$F0
06493 164F                        F0            .byte	$F0
06494 1650                        F0            .byte	$F0
06495 1651                        F0            .byte	$F0
06496 1652                        F0            .byte	$F0
06497                                           ! 1072  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06498 1653                        0F            .byte	$F
06499 1654                        0F            .byte	$F
06500 1655                        0F            .byte	$F
06501 1656                        0F            .byte	$F
06502 1657                        0F            .byte	$F
06503 1658                        0F            .byte	$F
06504 1659                        0F            .byte	$F
06505 165A                        0F            .byte	$F
06506                                           ! 1073  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06507 165B                        FF            .byte	$FF
06508 165C                        FF            .byte	$FF
06509 165D                        FF            .byte	$FF
06510 165E                        FF            .byte	$FF
06511 165F                        00            .byte	0
06512 1660                        00            .byte	0
06513 1661                        00            .byte	0
06514 1662                        00            .byte	0
06515                                           ! 1074  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06516 1663                        00            .byte	0
06517 1664                        00            .byte	0
06518 1665                        76            .byte	$76
06519 1666                        DC            .byte	$DC
06520 1667                        C8            .byte	$C8
06521 1668                        DC            .byte	$DC
06522 1669                        76            .byte	$76
06523 166A                        00            .byte	0
06524                                           ! 1075  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8
06525 166B                        00            .byte	0
06526 166C                        78            .byte	$78
06527 166D                        CC            .byte	$CC
06528 166E                        F8            .byte	$F8
06529 166F                        CC            .byte	$CC
06530                                           ! 1075 , 0xc0, 0xc0,
06531 1670                        F8            .byte	$F8
06532 1671                        C0            .byte	$C0
06533 1672                        C0            .byte	$C0
06534                                           ! 1076  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06535 1673                        00            .byte	0
06536 1674                        FC            .byte	$FC
06537 1675                        CC            .byte	$CC
06538 1676                        C0            .byte	$C0
06539 1677                        C0            .byte	$C0
06540 1678                        C0            .byte	$C0
06541 1679                        C0            .byte	$C0
06542 167A                        00            .byte	0
06543                                           ! 1077  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06544 167B                        00            .byte	0
06545 167C                        FE            .byte	$FE
06546 167D                        6C            .byte	$6C
06547 167E                        6C            .byte	$6C
06548 167F                        6C            .byte	$6C
06549 1680                        6C            .byte	$6C
06550 1681                        6C            .byte	$6C
06551 1682                        00            .byte	0
06552                                           ! 1078  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06553 1683                        FC            .byte	$FC
06554 1684                        CC            .byte	$CC
06555 1685                        60            .byte	$60
06556 1686                        30            .byte	$30
06557 1687                        60            .byte	$60
06558 1688                        CC            .byte	$CC
06559 1689                        FC            .byte	$FC
06560 168A                        00            .byte	0
06561                                           ! 1079  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06562 168B                        00            .byte	0
06563 168C                        00            .byte	0
06564 168D                        7E            .byte	$7E
06565 168E                        D8            .byte	$D8
06566 168F                        D8            .byte	$D8
06567 1690                        D8            .byte	$D8
06568 1691                        70            .byte	$70
06569 1692                        00            .byte	0
06570                                           ! 1080  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06571 1693                        00            .byte	0
06572 1694                        66            .byte	$66
06573 1695                        66            .byte	$66
06574 1696                        66            .byte	$66
06575 1697                        66            .byte	$66
06576 1698                        7C            .byte	$7C
06577 1699                        60            .byte	$60
06578 169A                        C0            .byte	$C0
06579                                           ! 1081  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06580 169B                        00            .byte	0
06581 169C                        76            .byte	$76
06582 169D                        DC            .byte	$DC
06583 169E                        18            .byte	$18
06584 169F                        18            .byte	$18
06585 16A0                        18            .byte	$18
06586 16A1                        18            .byte	$18
06587 16A2                        00            .byte	0
06588                                           ! 1082  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06589 16A3                        FC            .byte	$FC
06590 16A4                        30            .byte	$30
06591 16A5                        78            .byte	$78
06592 16A6                        CC            .byte	$CC
06593 16A7                        CC            .byte	$CC
06594 16A8                        78            .byte	$78
06595 16A9                        30            .byte	$30
06596 16AA                        FC            .byte	$FC
06597                                           ! 1083  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06598 16AB                        38            .byte	$38
06599 16AC                        6C            .byte	$6C
06600 16AD                        C6            .byte	$C6
06601 16AE                        FE            .byte	$FE
06602 16AF                        C6            .byte	$C6
06603 16B0                        6C            .byte	$6C
06604 16B1                        38            .byte	$38
06605 16B2                        00            .byte	0
06606                                           ! 1084  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06607 16B3                        38            .byte	$38
06608 16B4                        6C            .byte	$6C
06609 16B5                        C6            .byte	$C6
06610 16B6                        C6            .byte	$C6
06611 16B7                        6C            .byte	$6C
06612 16B8                        6C            .byte	$6C
06613 16B9                        EE            .byte	$EE
06614 16BA                        00            .byte	0
06615                                           ! 1085  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06616 16BB                        1C            .byte	$1C
06617 16BC                        30            .byte	$30
06618 16BD                        18            .byte	$18
06619 16BE                        7C            .byte	$7C
06620 16BF                        CC            .byte	$CC
06621 16C0                        CC            .byte	$CC
06622 16C1                        78            .byte	$78
06623 16C2                        00            .byte	0
06624                                           ! 1086  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06625 16C3                        00            .byte	0
06626 16C4                        00            .byte	0
06627 16C5                        7E            .byte	$7E
06628 16C6                        DB            .byte	$DB
06629 16C7                        DB            .byte	$DB
06630 16C8                        7E            .byte	$7E
06631 16C9                        00            .byte	0
06632 16CA                        00            .byte	0
06633                                           ! 1087  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06634 16CB                        06            .byte	6
06635 16CC                        0C            .byte	$C
06636 16CD                        7E            .byte	$7E
06637 16CE                        DB            .byte	$DB
06638 16CF                        DB            .byte	$DB
06639 16D0                        7E            .byte	$7E
06640 16D1                        60            .byte	$60
06641 16D2                        C0            .byte	$C0
06642                                           ! 1088  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06643 16D3                        38            .byte	$38
06644 16D4                        60            .byte	$60
06645 16D5                        C0            .byte	$C0
06646 16D6                        F8            .byte	$F8
06647 16D7                        C0            .byte	$C0
06648 16D8                        60            .byte	$60
06649 16D9                        38            .byte	$38
06650 16DA                        00            .byte	0
06651                                           ! 1089  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06652 16DB                        78            .byte	$78
06653 16DC                        CC            .byte	$CC
06654 16DD                        CC            .byte	$CC
06655 16DE                        CC            .byte	$CC
06656 16DF                        CC            .byte	$CC
06657 16E0                        CC            .byte	$CC
06658 16E1                        CC            .byte	$CC
06659 16E2                        00            .byte	0
06660                                           ! 1090  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06661 16E3                        00            .byte	0
06662 16E4                        FC            .byte	$FC
06663 16E5                        00            .byte	0
06664 16E6                        FC            .byte	$FC
06665 16E7                        00            .byte	0
06666 16E8                        FC            .byte	$FC
06667 16E9                        00            .byte	0
06668 16EA                        00            .byte	0
06669                                           ! 1091  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06670 16EB                        30            .byte	$30
06671 16EC                        30            .byte	$30
06672 16ED                        FC            .byte	$FC
06673 16EE                        30            .byte	$30
06674 16EF                        30            .byte	$30
06675 16F0                        00            .byte	0
06676 16F1                        FC            .byte	$FC
06677 16F2                        00            .byte	0
06678                                           ! 1092  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06679 16F3                        60            .byte	$60
06680 16F4                        30            .byte	$30
06681 16F5                        18            .byte	$18
06682 16F6                        30            .byte	$30
06683 16F7                        60            .byte	$60
06684 16F8                        00            .byte	0
06685 16F9                        FC            .byte	$FC
06686 16FA                        00            .byte	0
06687                                           ! 1093  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06688 16FB                        18            .byte	$18
06689 16FC                        30            .byte	$30
06690 16FD                        60            .byte	$60
06691 16FE                        30            .byte	$30
06692 16FF                        18            .byte	$18
06693 1700                        00            .byte	0
06694 1701                        FC            .byte	$FC
06695 1702                        00            .byte	0
06696                                           ! 1094  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06697 1703                        0E            .byte	$E
06698 1704                        1B            .byte	$1B
06699 1705                        1B            .byte	$1B
06700 1706                        18            .byte	$18
06701 1707                        18            .byte	$18
06702 1708                        18            .byte	$18
06703 1709                        18            .byte	$18
06704 170A                        18            .byte	$18
06705                                           ! 1095  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06706 170B                        18            .byte	$18
06707 170C                        18            .byte	$18
06708 170D                        18            .byte	$18
06709 170E                        18            .byte	$18
06710 170F                        18            .byte	$18
06711 1710                        D8            .byte	$D8
06712 1711                        D8            .byte	$D8
06713 1712                        70            .byte	$70
06714                                           ! 1096  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06715 1713                        30            .byte	$30
06716 1714                        30            .byte	$30
06717 1715                        00            .byte	0
06718 1716                        FC            .byte	$FC
06719 1717                        00            .byte	0
06720 1718                        30            .byte	$30
06721 1719                        30            .byte	$30
06722 171A                        00            .byte	0
06723                                           ! 1097  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06724 171B                        00            .byte	0
06725 171C                        76            .byte	$76
06726 171D                        DC            .byte	$DC
06727 171E                        00            .byte	0
06728 171F                        76            .byte	$76
06729 1720                        DC            .byte	$DC
06730 1721                        00            .byte	0
06731 1722                        00            .byte	0
06732                                           ! 1098  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06733 1723                        38            .byte	$38
06734 1724                        6C            .byte	$6C
06735 1725                        6C            .byte	$6C
06736 1726                        38            .byte	$38
06737 1727                        00            .byte	0
06738 1728                        00            .byte	0
06739 1729                        00            .byte	0
06740 172A                        00            .byte	0
06741                                           ! 1099  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06742 172B                        00            .byte	0
06743 172C                        00            .byte	0
06744 172D                        00            .byte	0
06745 172E                        18            .byte	$18
06746 172F                        18            .byte	$18
06747 1730                        00            .byte	0
06748 1731                        00            .byte	0
06749 1732                        00            .byte	0
06750                                           ! 1100  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06751 1733                        00            .byte	0
06752 1734                        00            .byte	0
06753 1735                        00            .byte	0
06754 1736                        00            .byte	0
06755 1737                        18            .byte	$18
06756 1738                        00            .byte	0
06757 1739                        00            .byte	0
06758 173A                        00            .byte	0
06759                                           ! 1101  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06760 173B                        0F            .byte	$F
06761 173C                        0C            .byte	$C
06762 173D                        0C            .byte	$C
06763 173E                        0C            .byte	$C
06764 173F                        EC            .byte	$EC
06765 1740                        6C            .byte	$6C
06766 1741                        3C            .byte	$3C
06767 1742                        1C            .byte	$1C
06768                                           ! 1102  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06769 1743                        78            .byte	$78
06770 1744                        6C            .byte	$6C
06771 1745                        6C            .byte	$6C
06772 1746                        6C            .byte	$6C
06773 1747                        6C            .byte	$6C
06774 1748                        00            .byte	0
06775 1749                        00            .byte	0
06776 174A                        00            .byte	0
06777                                           ! 1103  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06778 174B                        70            .byte	$70
06779 174C                        18            .byte	$18
06780 174D                        30            .byte	$30
06781 174E                        60            .byte	$60
06782 174F                        78            .byte	$78
06783 1750                        00            .byte	0
06784 1751                        00            .byte	0
06785 1752                        00            .byte	0
06786                                           ! 1104  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06787 1753                        00            .byte	0
06788 1754                        00            .byte	0
06789 1755                        3C            .byte	$3C
06790 1756                        3C            .byte	$3C
06791 1757                        3C            .byte	$3C
06792 1758                        3C            .byte	$3C
06793 1759                        00            .byte	0
06794 175A                        00            .byte	0
06795                                           ! 1105  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06796 175B                        00            .byte	0
06797 175C                        00            .byte	0
06798 175D                        00            .byte	0
06799 175E                        00            .byte	0
06800 175F                        00            .byte	0
06801 1760                        00            .byte	0
06802 1761                        00            .byte	0
06803                                           ! 1106 };
06804 1762                        00            .byte	0
06805                                           !BCC_EOS
06806                                           ! 1107 static Bit8u vgafont14[256*14]=
06807                                           ! 1108 {
06808                       00001763            _vgafont14:
06809                                           ! 1109  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06810 1763                        00            .byte	0
06811 1764                        00            .byte	0
06812 1765                        00            .byte	0
06813 1766                        00            .byte	0
06814 1767                        00            .byte	0
06815 1768                        00            .byte	0
06816 1769                        00            .byte	0
06817 176A                        00            .byte	0
06818 176B                        00            .byte	0
06819 176C                        00            .byte	0
06820 176D                        00            .byte	0
06821 176E                        00            .byte	0
06822 176F                        00            .byte	0
06823 1770                        00            .byte	0
06824                                           ! 1110  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06825 1771                        00            .byte	0
06826 1772                        00            .byte	0
06827 1773                        7E            .byte	$7E
06828 1774                        81            .byte	$81
06829 1775                        A5            .byte	$A5
06830 1776                        81            .byte	$81
06831 1777                        81            .byte	$81
06832 1778                        BD            .byte	$BD
06833 1779                        99            .byte	$99
06834 177A                        81            .byte	$81
06835 177B                        7E            .byte	$7E
06836 177C                        00            .byte	0
06837 177D                        00            .byte	0
06838 177E                        00            .byte	0
06839                                           ! 1111  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06840 177F                        00            .byte	0
06841 1780                        00            .byte	0
06842 1781                        7E            .byte	$7E
06843 1782                        FF            .byte	$FF
06844 1783                        DB            .byte	$DB
06845 1784                        FF            .byte	$FF
06846 1785                        FF            .byte	$FF
06847 1786                        C3            .byte	$C3
06848 1787                        E7            .byte	$E7
06849 1788                        FF            .byte	$FF
06850 1789                        7E            .byte	$7E
06851 178A                        00            .byte	0
06852 178B                        00            .byte	0
06853 178C                        00            .byte	0
06854                                           ! 1112  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06855 178D                        00            .byte	0
06856 178E                        00            .byte	0
06857 178F                        00            .byte	0
06858 1790                        6C            .byte	$6C
06859 1791                        FE            .byte	$FE
06860 1792                        FE            .byte	$FE
06861 1793                        FE            .byte	$FE
06862 1794                        FE            .byte	$FE
06863 1795                        7C            .byte	$7C
06864 1796                        38            .byte	$38
06865 1797                        10            .byte	$10
06866 1798                        00            .byte	0
06867 1799                        00            .byte	0
06868 179A                        00            .byte	0
06869                                           ! 1113  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06870 179B                        00            .byte	0
06871 179C                        00            .byte	0
06872 179D                        00            .byte	0
06873 179E                        10            .byte	$10
06874 179F                        38            .byte	$38
06875 17A0                        7C            .byte	$7C
06876 17A1                        FE            .byte	$FE
06877 17A2                        7C            .byte	$7C
06878 17A3                        38            .byte	$38
06879 17A4                        10            .byte	$10
06880 17A5                        00            .byte	0
06881 17A6                        00            .byte	0
06882 17A7                        00            .byte	0
06883 17A8                        00            .byte	0
06884                                           ! 1114  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06885 17A9                        00            .byte	0
06886 17AA                        00            .byte	0
06887 17AB                        18            .byte	$18
06888 17AC                        3C            .byte	$3C
06889 17AD                        3C            .byte	$3C
06890 17AE                        E7            .byte	$E7
06891 17AF                        E7            .byte	$E7
06892 17B0                        E7            .byte	$E7
06893 17B1                        18            .byte	$18
06894 17B2                        18            .byte	$18
06895 17B3                        3C            .byte	$3C
06896 17B4                        00            .byte	0
06897 17B5                        00            .byte	0
06898 17B6                        00            .byte	0
06899                                           ! 1115  0x00, 0x00, 0x18,
06900 17B7                        00            .byte	0
06901 17B8                        00            .byte	0
06902                                           ! 1115  0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06903 17B9                        18            .byte	$18
06904 17BA                        3C            .byte	$3C
06905 17BB                        7E            .byte	$7E
06906 17BC                        FF            .byte	$FF
06907 17BD                        FF            .byte	$FF
06908 17BE                        7E            .byte	$7E
06909 17BF                        18            .byte	$18
06910 17C0                        18            .byte	$18
06911 17C1                        3C            .byte	$3C
06912 17C2                        00            .byte	0
06913 17C3                        00            .byte	0
06914 17C4                        00            .byte	0
06915                                           ! 1116  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06916 17C5                        00            .byte	0
06917 17C6                        00            .byte	0
06918 17C7                        00            .byte	0
06919 17C8                        00            .byte	0
06920 17C9                        00            .byte	0
06921 17CA                        18            .byte	$18
06922 17CB                        3C            .byte	$3C
06923 17CC                        3C            .byte	$3C
06924 17CD                        18            .byte	$18
06925 17CE                        00            .byte	0
06926 17CF                        00            .byte	0
06927 17D0                        00            .byte	0
06928 17D1                        00            .byte	0
06929 17D2                        00            .byte	0
06930                                           ! 1117  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06931 17D3                        FF            .byte	$FF
06932 17D4                        FF            .byte	$FF
06933 17D5                        FF            .byte	$FF
06934 17D6                        FF            .byte	$FF
06935 17D7                        FF            .byte	$FF
06936 17D8                        E7            .byte	$E7
06937 17D9                        C3            .byte	$C3
06938 17DA                        C3            .byte	$C3
06939 17DB                        E7            .byte	$E7
06940 17DC                        FF            .byte	$FF
06941 17DD                        FF            .byte	$FF
06942 17DE                        FF            .byte	$FF
06943 17DF                        FF            .byte	$FF
06944 17E0                        FF            .byte	$FF
06945                                           ! 1118  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06946 17E1                        00            .byte	0
06947 17E2                        00            .byte	0
06948 17E3                        00            .byte	0
06949 17E4                        00            .byte	0
06950 17E5                        3C            .byte	$3C
06951 17E6                        66            .byte	$66
06952 17E7                        42            .byte	$42
06953 17E8                        42            .byte	$42
06954 17E9                        66            .byte	$66
06955 17EA                        3C            .byte	$3C
06956 17EB                        00            .byte	0
06957 17EC                        00            .byte	0
06958 17ED                        00            .byte	0
06959 17EE                        00            .byte	0
06960                                           ! 1119  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06961 17EF                        FF            .byte	$FF
06962 17F0                        FF            .byte	$FF
06963 17F1                        FF            .byte	$FF
06964 17F2                        FF            .byte	$FF
06965 17F3                        C3            .byte	$C3
06966 17F4                        99            .byte	$99
06967 17F5                        BD            .byte	$BD
06968 17F6                        BD            .byte	$BD
06969 17F7                        99            .byte	$99
06970 17F8                        C3            .byte	$C3
06971 17F9                        FF            .byte	$FF
06972 17FA                        FF            .byte	$FF
06973 17FB                        FF            .byte	$FF
06974 17FC                        FF            .byte	$FF
06975                                           ! 1120  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06976 17FD                        00            .byte	0
06977 17FE                        00            .byte	0
06978 17FF                        1E            .byte	$1E
06979 1800                        0E            .byte	$E
06980 1801                        1A            .byte	$1A
06981 1802                        32            .byte	$32
06982 1803                        78            .byte	$78
06983 1804                        CC            .byte	$CC
06984 1805                        CC            .byte	$CC
06985 1806                        CC            .byte	$CC
06986 1807                        78            .byte	$78
06987 1808                        00            .byte	0
06988 1809                        00            .byte	0
06989 180A                        00            .byte	0
06990                                           ! 1121  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06991 180B                        00            .byte	0
06992 180C                        00            .byte	0
06993 180D                        3C            .byte	$3C
06994 180E                        66            .byte	$66
06995 180F                        66            .byte	$66
06996 1810                        66            .byte	$66
06997 1811                        3C            .byte	$3C
06998 1812                        18            .byte	$18
06999 1813                        7E            .byte	$7E
07000 1814                        18            .byte	$18
07001 1815                        18            .byte	$18
07002 1816                        00            .byte	0
07003 1817                        00            .byte	0
07004 1818                        00            .byte	0
07005                                           ! 1122  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07006 1819                        00            .byte	0
07007 181A                        00            .byte	0
07008 181B                        3F            .byte	$3F
07009 181C                        33            .byte	$33
07010 181D                        3F            .byte	$3F
07011 181E                        30            .byte	$30
07012 181F                        30            .byte	$30
07013 1820                        30            .byte	$30
07014 1821                        70            .byte	$70
07015 1822                        F0            .byte	$F0
07016 1823                        E0            .byte	$E0
07017 1824                        00            .byte	0
07018 1825                        00            .byte	0
07019 1826                        00            .byte	0
07020                                           ! 1123  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07021 1827                        00            .byte	0
07022 1828                        00            .byte	0
07023 1829                        7F            .byte	$7F
07024 182A                        63            .byte	$63
07025 182B                        7F            .byte	$7F
07026 182C                        63            .byte	$63
07027 182D                        63            .byte	$63
07028 182E                        63            .byte	$63
07029 182F                        67            .byte	$67
07030 1830                        E7            .byte	$E7
07031 1831                        E6            .byte	$E6
07032 1832                        C0            .byte	$C0
07033 1833                        00            .byte	0
07034 1834                        00            .byte	0
07035                                           ! 1124  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07036 1835                        00            .byte	0
07037 1836                        00            .byte	0
07038 1837                        18            .byte	$18
07039 1838                        18            .byte	$18
07040 1839                        DB            .byte	$DB
07041 183A                        3C            .byte	$3C
07042 183B                        E7            .byte	$E7
07043 183C                        3C            .byte	$3C
07044 183D                        DB            .byte	$DB
07045 183E                        18            .byte	$18
07046 183F                        18            .byte	$18
07047 1840                        00            .byte	0
07048 1841                        00            .byte	0
07049 1842                        00            .byte	0
07050                                           ! 1125  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07051 1843                        00            .byte	0
07052 1844                        00            .byte	0
07053 1845                        80            .byte	$80
07054 1846                        C0            .byte	$C0
07055 1847                        E0            .byte	$E0
07056 1848                        F8            .byte	$F8
07057 1849                        FE            .byte	$FE
07058 184A                        F8            .byte	$F8
07059 184B                        E0            .byte	$E0
07060 184C                        C0            .byte	$C0
07061 184D                        80            .byte	$80
07062 184E                        00            .byte	0
07063 184F                        00            .byte	0
07064 1850                        00            .byte	0
07065                                           ! 1126  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07066 1851                        00            .byte	0
07067 1852                        00            .byte	0
07068 1853                        02            .byte	2
07069 1854                        06            .byte	6
07070 1855                        0E            .byte	$E
07071 1856                        3E            .byte	$3E
07072 1857                        FE            .byte	$FE
07073 1858                        3E            .byte	$3E
07074 1859                        0E            .byte	$E
07075 185A                        06            .byte	6
07076 185B                        02            .byte	2
07077 185C                        00            .byte	0
07078 185D                        00            .byte	0
07079 185E                        00            .byte	0
07080                                           ! 1127  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07081 185F                        00            .byte	0
07082 1860                        00            .byte	0
07083 1861                        18            .byte	$18
07084 1862                        3C            .byte	$3C
07085 1863                        7E            .byte	$7E
07086 1864                        18            .byte	$18
07087 1865                        18            .byte	$18
07088 1866                        18            .byte	$18
07089 1867                        7E            .byte	$7E
07090 1868                        3C            .byte	$3C
07091 1869                        18            .byte	$18
07092 186A                        00            .byte	0
07093 186B                        00            .byte	0
07094 186C                        00            .byte	0
07095                                           ! 1128  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07096 186D                        00            .byte	0
07097 186E                        00            .byte	0
07098 186F                        66            .byte	$66
07099 1870                        66            .byte	$66
07100 1871                        66            .byte	$66
07101 1872                        66            .byte	$66
07102 1873                        66            .byte	$66
07103 1874                        66            .byte	$66
07104 1875                        00            .byte	0
07105 1876                        66            .byte	$66
07106 1877                        66            .byte	$66
07107 1878                        00            .byte	0
07108 1879                        00            .byte	0
07109 187A                        00            .byte	0
07110                                           ! 1129  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07111 187B                        00            .byte	0
07112 187C                        00            .byte	0
07113 187D                        7F            .byte	$7F
07114 187E                        DB            .byte	$DB
07115 187F                        DB            .byte	$DB
07116 1880                        DB            .byte	$DB
07117 1881                        7B            .byte	$7B
07118 1882                        1B            .byte	$1B
07119 1883                        1B            .byte	$1B
07120 1884                        1B            .byte	$1B
07121 1885                        1B            .byte	$1B
07122 1886                        00            .byte	0
07123 1887                        00            .byte	0
07124 1888                        00            .byte	0
07125                                           ! 1130  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07126 1889                        00            .byte	0
07127 188A                        7C            .byte	$7C
07128 188B                        C6            .byte	$C6
07129 188C                        60            .byte	$60
07130 188D                        38            .byte	$38
07131 188E                        6C            .byte	$6C
07132 188F                        C6            .byte	$C6
07133 1890                        C6            .byte	$C6
07134 1891                        6C            .byte	$6C
07135 1892                        38            .byte	$38
07136 1893                        0C            .byte	$C
07137 1894                        C6            .byte	$C6
07138 1895                        7C            .byte	$7C
07139 1896                        00            .byte	0
07140                                           ! 1131  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07141 1897                        00            .byte	0
07142 1898                        00            .byte	0
07143 1899                        00            .byte	0
07144 189A                        00            .byte	0
07145 189B                        00            .byte	0
07146 189C                        00            .byte	0
07147 189D                        00            .byte	0
07148 189E                        00            .byte	0
07149 189F                        FE            .byte	$FE
07150 18A0                        FE            .byte	$FE
07151 18A1                        FE            .byte	$FE
07152 18A2                        00            .byte	0
07153 18A3                        00            .byte	0
07154 18A4                        00            .byte	0
07155                                           ! 1132  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07156 18A5                        00            .byte	0
07157 18A6                        00            .byte	0
07158 18A7                        18            .byte	$18
07159 18A8                        3C            .byte	$3C
07160 18A9                        7E            .byte	$7E
07161 18AA                        18            .byte	$18
07162 18AB                        18            .byte	$18
07163 18AC                        18            .byte	$18
07164 18AD                        7E            .byte	$7E
07165 18AE                        3C            .byte	$3C
07166 18AF                        18            .byte	$18
07167 18B0                        7E            .byte	$7E
07168 18B1                        00            .byte	0
07169 18B2                        00            .byte	0
07170                                           ! 1133  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07171 18B3                        00            .byte	0
07172 18B4                        00            .byte	0
07173 18B5                        18            .byte	$18
07174 18B6                        3C            .byte	$3C
07175 18B7                        7E            .byte	$7E
07176 18B8                        18            .byte	$18
07177 18B9                        18            .byte	$18
07178 18BA                        18            .byte	$18
07179 18BB                        18            .byte	$18
07180 18BC                        18            .byte	$18
07181 18BD                        18            .byte	$18
07182 18BE                        00            .byte	0
07183 18BF                        00            .byte	0
07184 18C0                        00            .byte	0
07185                                           ! 1134  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07186 18C1                        00            .byte	0
07187 18C2                        00            .byte	0
07188 18C3                        18            .byte	$18
07189 18C4                        18            .byte	$18
07190 18C5                        18            .byte	$18
07191 18C6                        18            .byte	$18
07192 18C7                        18            .byte	$18
07193 18C8                        18            .byte	$18
07194 18C9                        7E            .byte	$7E
07195 18CA                        3C            .byte	$3C
07196 18CB                        18            .byte	$18
07197 18CC                        00            .byte	0
07198 18CD                        00            .byte	0
07199 18CE                        00            .byte	0
07200                                           ! 1135  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07201 18CF                        00            .byte	0
07202 18D0                        00            .byte	0
07203 18D1                        00            .byte	0
07204 18D2                        00            .byte	0
07205 18D3                        18            .byte	$18
07206 18D4                        0C            .byte	$C
07207 18D5                        FE            .byte	$FE
07208 18D6                        0C            .byte	$C
07209 18D7                        18            .byte	$18
07210 18D8                        00            .byte	0
07211 18D9                        00            .byte	0
07212 18DA                        00            .byte	0
07213 18DB                        00            .byte	0
07214 18DC                        00            .byte	0
07215                                           ! 1136  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07216 18DD                        00            .byte	0
07217 18DE                        00            .byte	0
07218 18DF                        00            .byte	0
07219 18E0                        00            .byte	0
07220 18E1                        30            .byte	$30
07221 18E2                        60            .byte	$60
07222 18E3                        FE            .byte	$FE
07223 18E4                        60            .byte	$60
07224 18E5                        30            .byte	$30
07225 18E6                        00            .byte	0
07226 18E7                        00            .byte	0
07227 18E8                        00            .byte	0
07228 18E9                        00            .byte	0
07229 18EA                        00            .byte	0
07230                                           ! 1137  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
07231 18EB                        00            .byte	0
07232 18EC                        00            .byte	0
07233 18ED                        00            .byte	0
07234 18EE                        00            .byte	0
07235 18EF                        00            .byte	0
07236 18F0                        C0            .byte	$C0
07237 18F1                        C0            .byte	$C0
07238 18F2                        C0            .byte	$C0
07239 18F3                        FE            .byte	$FE
07240 18F4                        00            .byte	0
07241 18F5                        00            .byte	0
07242 18F6                        00            .byte	0
07243 18F7                        00            .byte	0
07244 18F8                        00            .byte	0
07245                                           ! 1138  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07246 18F9                        00            .byte	0
07247 18FA                        00            .byte	0
07248 18FB                        00            .byte	0
07249 18FC                        00            .byte	0
07250 18FD                        28            .byte	$28
07251 18FE                        6C            .byte	$6C
07252 18FF                        FE            .byte	$FE
07253 1900                        6C            .byte	$6C
07254 1901                        28            .byte	$28
07255 1902                        00            .byte	0
07256 1903                        00            .byte	0
07257 1904                        00            .byte	0
07258 1905                        00            .byte	0
07259 1906                        00            .byte	0
07260                                           ! 1139  0x00, 0x00, 0x00, 0x10, 0
07261 1907                        00            .byte	0
07262 1908                        00            .byte	0
07263 1909                        00            .byte	0
07264 190A                        10            .byte	$10
07265                                           ! 1139 x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07266 190B                        38            .byte	$38
07267 190C                        38            .byte	$38
07268 190D                        7C            .byte	$7C
07269 190E                        7C            .byte	$7C
07270 190F                        FE            .byte	$FE
07271 1910                        FE            .byte	$FE
07272 1911                        00            .byte	0
07273 1912                        00            .byte	0
07274 1913                        00            .byte	0
07275 1914                        00            .byte	0
07276                                           ! 1140  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07277 1915                        00            .byte	0
07278 1916                        00            .byte	0
07279 1917                        00            .byte	0
07280 1918                        FE            .byte	$FE
07281 1919                        FE            .byte	$FE
07282 191A                        7C            .byte	$7C
07283 191B                        7C            .byte	$7C
07284 191C                        38            .byte	$38
07285 191D                        38            .byte	$38
07286 191E                        10            .byte	$10
07287 191F                        00            .byte	0
07288 1920                        00            .byte	0
07289 1921                        00            .byte	0
07290 1922                        00            .byte	0
07291                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07292 1923                        00            .byte	0
07293 1924                        00            .byte	0
07294 1925                        00            .byte	0
07295 1926                        00            .byte	0
07296 1927                        00            .byte	0
07297 1928                        00            .byte	0
07298 1929                        00            .byte	0
07299 192A                        00            .byte	0
07300 192B                        00            .byte	0
07301 192C                        00            .byte	0
07302 192D                        00            .byte	0
07303 192E                        00            .byte	0
07304 192F                        00            .byte	0
07305 1930                        00            .byte	0
07306                                           ! 1142  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07307 1931                        00            .byte	0
07308 1932                        00            .byte	0
07309 1933                        18            .byte	$18
07310 1934                        3C            .byte	$3C
07311 1935                        3C            .byte	$3C
07312 1936                        3C            .byte	$3C
07313 1937                        18            .byte	$18
07314 1938                        18            .byte	$18
07315 1939                        00            .byte	0
07316 193A                        18            .byte	$18
07317 193B                        18            .byte	$18
07318 193C                        00            .byte	0
07319 193D                        00            .byte	0
07320 193E                        00            .byte	0
07321                                           ! 1143  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07322 193F                        00            .byte	0
07323 1940                        66            .byte	$66
07324 1941                        66            .byte	$66
07325 1942                        66            .byte	$66
07326 1943                        24            .byte	$24
07327 1944                        00            .byte	0
07328 1945                        00            .byte	0
07329 1946                        00            .byte	0
07330 1947                        00            .byte	0
07331 1948                        00            .byte	0
07332 1949                        00            .byte	0
07333 194A                        00            .byte	0
07334 194B                        00            .byte	0
07335 194C                        00            .byte	0
07336                                           ! 1144  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07337 194D                        00            .byte	0
07338 194E                        00            .byte	0
07339 194F                        6C            .byte	$6C
07340 1950                        6C            .byte	$6C
07341 1951                        FE            .byte	$FE
07342 1952                        6C            .byte	$6C
07343 1953                        6C            .byte	$6C
07344 1954                        6C            .byte	$6C
07345 1955                        FE            .byte	$FE
07346 1956                        6C            .byte	$6C
07347 1957                        6C            .byte	$6C
07348 1958                        00            .byte	0
07349 1959                        00            .byte	0
07350 195A                        00            .byte	0
07351                                           ! 1145  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07352 195B                        18            .byte	$18
07353 195C                        18            .byte	$18
07354 195D                        7C            .byte	$7C
07355 195E                        C6            .byte	$C6
07356 195F                        C2            .byte	$C2
07357 1960                        C0            .byte	$C0
07358 1961                        7C            .byte	$7C
07359 1962                        06            .byte	6
07360 1963                        86            .byte	$86
07361 1964                        C6            .byte	$C6
07362 1965                        7C            .byte	$7C
07363 1966                        18            .byte	$18
07364 1967                        18            .byte	$18
07365 1968                        00            .byte	0
07366                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07367 1969                        00            .byte	0
07368 196A                        00            .byte	0
07369 196B                        00            .byte	0
07370 196C                        00            .byte	0
07371 196D                        C2            .byte	$C2
07372 196E                        C6            .byte	$C6
07373 196F                        0C            .byte	$C
07374 1970                        18            .byte	$18
07375 1971                        30            .byte	$30
07376 1972                        66            .byte	$66
07377 1973                        C6            .byte	$C6
07378 1974                        00            .byte	0
07379 1975                        00            .byte	0
07380 1976                        00            .byte	0
07381                                           ! 1147  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07382 1977                        00            .byte	0
07383 1978                        00            .byte	0
07384 1979                        38            .byte	$38
07385 197A                        6C            .byte	$6C
07386 197B                        6C            .byte	$6C
07387 197C                        38            .byte	$38
07388 197D                        76            .byte	$76
07389 197E                        DC            .byte	$DC
07390 197F                        CC            .byte	$CC
07391 1980                        CC            .byte	$CC
07392 1981                        76            .byte	$76
07393 1982                        00            .byte	0
07394 1983                        00            .byte	0
07395 1984                        00            .byte	0
07396                                           ! 1148  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07397 1985                        00            .byte	0
07398 1986                        30            .byte	$30
07399 1987                        30            .byte	$30
07400 1988                        30            .byte	$30
07401 1989                        60            .byte	$60
07402 198A                        00            .byte	0
07403 198B                        00            .byte	0
07404 198C                        00            .byte	0
07405 198D                        00            .byte	0
07406 198E                        00            .byte	0
07407 198F                        00            .byte	0
07408 1990                        00            .byte	0
07409 1991                        00            .byte	0
07410 1992                        00            .byte	0
07411                                           ! 1149  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07412 1993                        00            .byte	0
07413 1994                        00            .byte	0
07414 1995                        0C            .byte	$C
07415 1996                        18            .byte	$18
07416 1997                        30            .byte	$30
07417 1998                        30            .byte	$30
07418 1999                        30            .byte	$30
07419 199A                        30            .byte	$30
07420 199B                        30            .byte	$30
07421 199C                        18            .byte	$18
07422 199D                        0C            .byte	$C
07423 199E                        00            .byte	0
07424 199F                        00            .byte	0
07425 19A0                        00            .byte	0
07426                                           ! 1150  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07427 19A1                        00            .byte	0
07428 19A2                        00            .byte	0
07429 19A3                        30            .byte	$30
07430 19A4                        18            .byte	$18
07431 19A5                        0C            .byte	$C
07432 19A6                        0C            .byte	$C
07433 19A7                        0C            .byte	$C
07434 19A8                        0C            .byte	$C
07435 19A9                        0C            .byte	$C
07436 19AA                        18            .byte	$18
07437 19AB                        30            .byte	$30
07438 19AC                        00            .byte	0
07439 19AD                        00            .byte	0
07440 19AE                        00            .byte	0
07441                                           ! 1151  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07442 19AF                        00            .byte	0
07443 19B0                        00            .byte	0
07444 19B1                        00            .byte	0
07445 19B2                        00            .byte	0
07446 19B3                        66            .byte	$66
07447 19B4                        3C            .byte	$3C
07448 19B5                        FF            .byte	$FF
07449 19B6                        3C            .byte	$3C
07450 19B7                        66            .byte	$66
07451 19B8                        00            .byte	0
07452 19B9                        00            .byte	0
07453 19BA                        00            .byte	0
07454 19BB                        00            .byte	0
07455 19BC                        00            .byte	0
07456                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07457 19BD                        00            .byte	0
07458 19BE                        00            .byte	0
07459 19BF                        00            .byte	0
07460 19C0                        00            .byte	0
07461 19C1                        18            .byte	$18
07462 19C2                        18            .byte	$18
07463 19C3                        7E            .byte	$7E
07464 19C4                        18            .byte	$18
07465 19C5                        18            .byte	$18
07466 19C6                        00            .byte	0
07467 19C7                        00            .byte	0
07468 19C8                        00            .byte	0
07469 19C9                        00            .byte	0
07470 19CA                        00            .byte	0
07471                                           ! 1153  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07472 19CB                        00            .byte	0
07473 19CC                        00            .byte	0
07474 19CD                        00            .byte	0
07475 19CE                        00            .byte	0
07476 19CF                        00            .byte	0
07477 19D0                        00            .byte	0
07478 19D1                        00            .byte	0
07479 19D2                        00            .byte	0
07480 19D3                        18            .byte	$18
07481 19D4                        18            .byte	$18
07482 19D5                        18            .byte	$18
07483 19D6                        30            .byte	$30
07484 19D7                        00            .byte	0
07485 19D8                        00            .byte	0
07486                                           ! 1154  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07487 19D9                        00            .byte	0
07488 19DA                        00            .byte	0
07489 19DB                        00            .byte	0
07490 19DC                        00            .byte	0
07491 19DD                        00            .byte	0
07492 19DE                        00            .byte	0
07493 19DF                        FE            .byte	$FE
07494 19E0                        00            .byte	0
07495 19E1                        00            .byte	0
07496 19E2                        00            .byte	0
07497 19E3                        00            .byte	0
07498 19E4                        00            .byte	0
07499 19E5                        00            .byte	0
07500 19E6                        00            .byte	0
07501                                           ! 1155  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07502 19E7                        00            .byte	0
07503 19E8                        00            .byte	0
07504 19E9                        00            .byte	0
07505 19EA                        00            .byte	0
07506 19EB                        00            .byte	0
07507 19EC                        00            .byte	0
07508 19ED                        00            .byte	0
07509 19EE                        00            .byte	0
07510 19EF                        00            .byte	0
07511 19F0                        18            .byte	$18
07512 19F1                        18            .byte	$18
07513 19F2                        00            .byte	0
07514 19F3                        00            .byte	0
07515 19F4                        00            .byte	0
07516                                           ! 1156  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07517 19F5                        00            .byte	0
07518 19F6                        00            .byte	0
07519 19F7                        02            .byte	2
07520 19F8                        06            .byte	6
07521 19F9                        0C            .byte	$C
07522 19FA                        18            .byte	$18
07523 19FB                        30            .byte	$30
07524 19FC                        60            .byte	$60
07525 19FD                        C0            .byte	$C0
07526 19FE                        80            .byte	$80
07527 19FF                        00            .byte	0
07528 1A00                        00            .byte	0
07529 1A01                        00            .byte	0
07530 1A02                        00            .byte	0
07531                                           ! 1157  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07532 1A03                        00            .byte	0
07533 1A04                        00            .byte	0
07534 1A05                        7C            .byte	$7C
07535 1A06                        C6            .byte	$C6
07536 1A07                        CE            .byte	$CE
07537 1A08                        DE            .byte	$DE
07538 1A09                        F6            .byte	$F6
07539 1A0A                        E6            .byte	$E6
07540 1A0B                        C6            .byte	$C6
07541 1A0C                        C6            .byte	$C6
07542 1A0D                        7C            .byte	$7C
07543 1A0E                        00            .byte	0
07544 1A0F                        00            .byte	0
07545 1A10                        00            .byte	0
07546                                           ! 1158  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07547 1A11                        00            .byte	0
07548 1A12                        00            .byte	0
07549 1A13                        18            .byte	$18
07550 1A14                        38            .byte	$38
07551 1A15                        78            .byte	$78
07552 1A16                        18            .byte	$18
07553 1A17                        18            .byte	$18
07554 1A18                        18            .byte	$18
07555 1A19                        18            .byte	$18
07556 1A1A                        18            .byte	$18
07557 1A1B                        7E            .byte	$7E
07558 1A1C                        00            .byte	0
07559 1A1D                        00            .byte	0
07560 1A1E                        00            .byte	0
07561                                           ! 1159  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07562 1A1F                        00            .byte	0
07563 1A20                        00            .byte	0
07564 1A21                        7C            .byte	$7C
07565 1A22                        C6            .byte	$C6
07566 1A23                        06            .byte	6
07567 1A24                        0C            .byte	$C
07568 1A25                        18            .byte	$18
07569 1A26                        30            .byte	$30
07570 1A27                        60            .byte	$60
07571 1A28                        C6            .byte	$C6
07572 1A29                        FE            .byte	$FE
07573 1A2A                        00            .byte	0
07574 1A2B                        00            .byte	0
07575 1A2C                        00            .byte	0
07576                                           ! 1160  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07577 1A2D                        00            .byte	0
07578 1A2E                        00            .byte	0
07579 1A2F                        7C            .byte	$7C
07580 1A30                        C6            .byte	$C6
07581 1A31                        06            .byte	6
07582 1A32                        06            .byte	6
07583 1A33                        3C            .byte	$3C
07584 1A34                        06            .byte	6
07585 1A35                        06            .byte	6
07586 1A36                        C6            .byte	$C6
07587 1A37                        7C            .byte	$7C
07588 1A38                        00            .byte	0
07589 1A39                        00            .byte	0
07590 1A3A                        00            .byte	0
07591                                           ! 1161  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07592 1A3B                        00            .byte	0
07593 1A3C                        00            .byte	0
07594 1A3D                        0C            .byte	$C
07595 1A3E                        1C            .byte	$1C
07596 1A3F                        3C            .byte	$3C
07597 1A40                        6C            .byte	$6C
07598 1A41                        CC            .byte	$CC
07599 1A42                        FE            .byte	$FE
07600 1A43                        0C            .byte	$C
07601 1A44                        0C            .byte	$C
07602 1A45                        1E            .byte	$1E
07603 1A46                        00            .byte	0
07604 1A47                        00            .byte	0
07605 1A48                        00            .byte	0
07606                                           ! 1162  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07607 1A49                        00            .byte	0
07608 1A4A                        00            .byte	0
07609 1A4B                        FE            .byte	$FE
07610 1A4C                        C0            .byte	$C0
07611 1A4D                        C0            .byte	$C0
07612 1A4E                        C0            .byte	$C0
07613 1A4F                        FC            .byte	$FC
07614 1A50                        06            .byte	6
07615 1A51                        06            .byte	6
07616 1A52                        C6            .byte	$C6
07617 1A53                        7C            .byte	$7C
07618 1A54                        00            .byte	0
07619 1A55                        00            .byte	0
07620 1A56                        00            .byte	0
07621                                           ! 1163  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc
07622 1A57                        00            .byte	0
07623 1A58                        00            .byte	0
07624 1A59                        38            .byte	$38
07625 1A5A                        60            .byte	$60
07626 1A5B                        C0            .byte	$C0
07627                                           ! 1163 0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07628 1A5C                        C0            .byte	$C0
07629 1A5D                        FC            .byte	$FC
07630 1A5E                        C6            .byte	$C6
07631 1A5F                        C6            .byte	$C6
07632 1A60                        C6            .byte	$C6
07633 1A61                        7C            .byte	$7C
07634 1A62                        00            .byte	0
07635 1A63                        00            .byte	0
07636 1A64                        00            .byte	0
07637                                           ! 1164  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07638 1A65                        00            .byte	0
07639 1A66                        00            .byte	0
07640 1A67                        FE            .byte	$FE
07641 1A68                        C6            .byte	$C6
07642 1A69                        06            .byte	6
07643 1A6A                        0C            .byte	$C
07644 1A6B                        18            .byte	$18
07645 1A6C                        30            .byte	$30
07646 1A6D                        30            .byte	$30
07647 1A6E                        30            .byte	$30
07648 1A6F                        30            .byte	$30
07649 1A70                        00            .byte	0
07650 1A71                        00            .byte	0
07651 1A72                        00            .byte	0
07652                                           ! 1165  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07653 1A73                        00            .byte	0
07654 1A74                        00            .byte	0
07655 1A75                        7C            .byte	$7C
07656 1A76                        C6            .byte	$C6
07657 1A77                        C6            .byte	$C6
07658 1A78                        C6            .byte	$C6
07659 1A79                        7C            .byte	$7C
07660 1A7A                        C6            .byte	$C6
07661 1A7B                        C6            .byte	$C6
07662 1A7C                        C6            .byte	$C6
07663 1A7D                        7C            .byte	$7C
07664 1A7E                        00            .byte	0
07665 1A7F                        00            .byte	0
07666 1A80                        00            .byte	0
07667                                           ! 1166  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07668 1A81                        00            .byte	0
07669 1A82                        00            .byte	0
07670 1A83                        7C            .byte	$7C
07671 1A84                        C6            .byte	$C6
07672 1A85                        C6            .byte	$C6
07673 1A86                        C6            .byte	$C6
07674 1A87                        7E            .byte	$7E
07675 1A88                        06            .byte	6
07676 1A89                        06            .byte	6
07677 1A8A                        0C            .byte	$C
07678 1A8B                        78            .byte	$78
07679 1A8C                        00            .byte	0
07680 1A8D                        00            .byte	0
07681 1A8E                        00            .byte	0
07682                                           ! 1167  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07683 1A8F                        00            .byte	0
07684 1A90                        00            .byte	0
07685 1A91                        00            .byte	0
07686 1A92                        18            .byte	$18
07687 1A93                        18            .byte	$18
07688 1A94                        00            .byte	0
07689 1A95                        00            .byte	0
07690 1A96                        00            .byte	0
07691 1A97                        18            .byte	$18
07692 1A98                        18            .byte	$18
07693 1A99                        00            .byte	0
07694 1A9A                        00            .byte	0
07695 1A9B                        00            .byte	0
07696 1A9C                        00            .byte	0
07697                                           ! 1168  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07698 1A9D                        00            .byte	0
07699 1A9E                        00            .byte	0
07700 1A9F                        00            .byte	0
07701 1AA0                        18            .byte	$18
07702 1AA1                        18            .byte	$18
07703 1AA2                        00            .byte	0
07704 1AA3                        00            .byte	0
07705 1AA4                        00            .byte	0
07706 1AA5                        18            .byte	$18
07707 1AA6                        18            .byte	$18
07708 1AA7                        30            .byte	$30
07709 1AA8                        00            .byte	0
07710 1AA9                        00            .byte	0
07711 1AAA                        00            .byte	0
07712                                           ! 1169  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07713 1AAB                        00            .byte	0
07714 1AAC                        00            .byte	0
07715 1AAD                        06            .byte	6
07716 1AAE                        0C            .byte	$C
07717 1AAF                        18            .byte	$18
07718 1AB0                        30            .byte	$30
07719 1AB1                        60            .byte	$60
07720 1AB2                        30            .byte	$30
07721 1AB3                        18            .byte	$18
07722 1AB4                        0C            .byte	$C
07723 1AB5                        06            .byte	6
07724 1AB6                        00            .byte	0
07725 1AB7                        00            .byte	0
07726 1AB8                        00            .byte	0
07727                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07728 1AB9                        00            .byte	0
07729 1ABA                        00            .byte	0
07730 1ABB                        00            .byte	0
07731 1ABC                        00            .byte	0
07732 1ABD                        00            .byte	0
07733 1ABE                        7E            .byte	$7E
07734 1ABF                        00            .byte	0
07735 1AC0                        00            .byte	0
07736 1AC1                        7E            .byte	$7E
07737 1AC2                        00            .byte	0
07738 1AC3                        00            .byte	0
07739 1AC4                        00            .byte	0
07740 1AC5                        00            .byte	0
07741 1AC6                        00            .byte	0
07742                                           ! 1171  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07743 1AC7                        00            .byte	0
07744 1AC8                        00            .byte	0
07745 1AC9                        60            .byte	$60
07746 1ACA                        30            .byte	$30
07747 1ACB                        18            .byte	$18
07748 1ACC                        0C            .byte	$C
07749 1ACD                        06            .byte	6
07750 1ACE                        0C            .byte	$C
07751 1ACF                        18            .byte	$18
07752 1AD0                        30            .byte	$30
07753 1AD1                        60            .byte	$60
07754 1AD2                        00            .byte	0
07755 1AD3                        00            .byte	0
07756 1AD4                        00            .byte	0
07757                                           ! 1172  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07758 1AD5                        00            .byte	0
07759 1AD6                        00            .byte	0
07760 1AD7                        7C            .byte	$7C
07761 1AD8                        C6            .byte	$C6
07762 1AD9                        C6            .byte	$C6
07763 1ADA                        0C            .byte	$C
07764 1ADB                        18            .byte	$18
07765 1ADC                        18            .byte	$18
07766 1ADD                        00            .byte	0
07767 1ADE                        18            .byte	$18
07768 1ADF                        18            .byte	$18
07769 1AE0                        00            .byte	0
07770 1AE1                        00            .byte	0
07771 1AE2                        00            .byte	0
07772                                           ! 1173  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07773 1AE3                        00            .byte	0
07774 1AE4                        00            .byte	0
07775 1AE5                        7C            .byte	$7C
07776 1AE6                        C6            .byte	$C6
07777 1AE7                        C6            .byte	$C6
07778 1AE8                        DE            .byte	$DE
07779 1AE9                        DE            .byte	$DE
07780 1AEA                        DE            .byte	$DE
07781 1AEB                        DC            .byte	$DC
07782 1AEC                        C0            .byte	$C0
07783 1AED                        7C            .byte	$7C
07784 1AEE                        00            .byte	0
07785 1AEF                        00            .byte	0
07786 1AF0                        00            .byte	0
07787                                           ! 1174  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07788 1AF1                        00            .byte	0
07789 1AF2                        00            .byte	0
07790 1AF3                        10            .byte	$10
07791 1AF4                        38            .byte	$38
07792 1AF5                        6C            .byte	$6C
07793 1AF6                        C6            .byte	$C6
07794 1AF7                        C6            .byte	$C6
07795 1AF8                        FE            .byte	$FE
07796 1AF9                        C6            .byte	$C6
07797 1AFA                        C6            .byte	$C6
07798 1AFB                        C6            .byte	$C6
07799 1AFC                        00            .byte	0
07800 1AFD                        00            .byte	0
07801 1AFE                        00            .byte	0
07802                                           ! 1175  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07803 1AFF                        00            .byte	0
07804 1B00                        00            .byte	0
07805 1B01                        FC            .byte	$FC
07806 1B02                        66            .byte	$66
07807 1B03                        66            .byte	$66
07808 1B04                        66            .byte	$66
07809 1B05                        7C            .byte	$7C
07810 1B06                        66            .byte	$66
07811 1B07                        66            .byte	$66
07812 1B08                        66            .byte	$66
07813 1B09                        FC            .byte	$FC
07814 1B0A                        00            .byte	0
07815 1B0B                        00            .byte	0
07816 1B0C                        00            .byte	0
07817                                           ! 1176  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07818 1B0D                        00            .byte	0
07819 1B0E                        00            .byte	0
07820 1B0F                        3C            .byte	$3C
07821 1B10                        66            .byte	$66
07822 1B11                        C2            .byte	$C2
07823 1B12                        C0            .byte	$C0
07824 1B13                        C0            .byte	$C0
07825 1B14                        C0            .byte	$C0
07826 1B15                        C2            .byte	$C2
07827 1B16                        66            .byte	$66
07828 1B17                        3C            .byte	$3C
07829 1B18                        00            .byte	0
07830 1B19                        00            .byte	0
07831 1B1A                        00            .byte	0
07832                                           ! 1177  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07833 1B1B                        00            .byte	0
07834 1B1C                        00            .byte	0
07835 1B1D                        F8            .byte	$F8
07836 1B1E                        6C            .byte	$6C
07837 1B1F                        66            .byte	$66
07838 1B20                        66            .byte	$66
07839 1B21                        66            .byte	$66
07840 1B22                        66            .byte	$66
07841 1B23                        66            .byte	$66
07842 1B24                        6C            .byte	$6C
07843 1B25                        F8            .byte	$F8
07844 1B26                        00            .byte	0
07845 1B27                        00            .byte	0
07846 1B28                        00            .byte	0
07847                                           ! 1178  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07848 1B29                        00            .byte	0
07849 1B2A                        00            .byte	0
07850 1B2B                        FE            .byte	$FE
07851 1B2C                        66            .byte	$66
07852 1B2D                        62            .byte	$62
07853 1B2E                        68            .byte	$68
07854 1B2F                        78            .byte	$78
07855 1B30                        68            .byte	$68
07856 1B31                        62            .byte	$62
07857 1B32                        66            .byte	$66
07858 1B33                        FE            .byte	$FE
07859 1B34                        00            .byte	0
07860 1B35                        00            .byte	0
07861 1B36                        00            .byte	0
07862                                           ! 1179  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07863 1B37                        00            .byte	0
07864 1B38                        00            .byte	0
07865 1B39                        FE            .byte	$FE
07866 1B3A                        66            .byte	$66
07867 1B3B                        62            .byte	$62
07868 1B3C                        68            .byte	$68
07869 1B3D                        78            .byte	$78
07870 1B3E                        68            .byte	$68
07871 1B3F                        60            .byte	$60
07872 1B40                        60            .byte	$60
07873 1B41                        F0            .byte	$F0
07874 1B42                        00            .byte	0
07875 1B43                        00            .byte	0
07876 1B44                        00            .byte	0
07877                                           ! 1180  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07878 1B45                        00            .byte	0
07879 1B46                        00            .byte	0
07880 1B47                        3C            .byte	$3C
07881 1B48                        66            .byte	$66
07882 1B49                        C2            .byte	$C2
07883 1B4A                        C0            .byte	$C0
07884 1B4B                        C0            .byte	$C0
07885 1B4C                        DE            .byte	$DE
07886 1B4D                        C6            .byte	$C6
07887 1B4E                        66            .byte	$66
07888 1B4F                        3A            .byte	$3A
07889 1B50                        00            .byte	0
07890 1B51                        00            .byte	0
07891 1B52                        00            .byte	0
07892                                           ! 1181  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07893 1B53                        00            .byte	0
07894 1B54                        00            .byte	0
07895 1B55                        C6            .byte	$C6
07896 1B56                        C6            .byte	$C6
07897 1B57                        C6            .byte	$C6
07898 1B58                        C6            .byte	$C6
07899 1B59                        FE            .byte	$FE
07900 1B5A                        C6            .byte	$C6
07901 1B5B                        C6            .byte	$C6
07902 1B5C                        C6            .byte	$C6
07903 1B5D                        C6            .byte	$C6
07904 1B5E                        00            .byte	0
07905 1B5F                        00            .byte	0
07906 1B60                        00            .byte	0
07907                                           ! 1182  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07908 1B61                        00            .byte	0
07909 1B62                        00            .byte	0
07910 1B63                        3C            .byte	$3C
07911 1B64                        18            .byte	$18
07912 1B65                        18            .byte	$18
07913 1B66                        18            .byte	$18
07914 1B67                        18            .byte	$18
07915 1B68                        18            .byte	$18
07916 1B69                        18            .byte	$18
07917 1B6A                        18            .byte	$18
07918 1B6B                        3C            .byte	$3C
07919 1B6C                        00            .byte	0
07920 1B6D                        00            .byte	0
07921 1B6E                        00            .byte	0
07922                                           ! 1183  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07923 1B6F                        00            .byte	0
07924 1B70                        00            .byte	0
07925 1B71                        1E            .byte	$1E
07926 1B72                        0C            .byte	$C
07927 1B73                        0C            .byte	$C
07928 1B74                        0C            .byte	$C
07929 1B75                        0C            .byte	$C
07930 1B76                        0C            .byte	$C
07931 1B77                        CC            .byte	$CC
07932 1B78                        CC            .byte	$CC
07933 1B79                        78            .byte	$78
07934 1B7A                        00            .byte	0
07935 1B7B                        00            .byte	0
07936 1B7C                        00            .byte	0
07937                                           ! 1184  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07938 1B7D                        00            .byte	0
07939 1B7E                        00            .byte	0
07940 1B7F                        E6            .byte	$E6
07941 1B80                        66            .byte	$66
07942 1B81                        6C            .byte	$6C
07943 1B82                        6C            .byte	$6C
07944 1B83                        78            .byte	$78
07945 1B84                        6C            .byte	$6C
07946 1B85                        6C            .byte	$6C
07947 1B86                        66            .byte	$66
07948 1B87                        E6            .byte	$E6
07949 1B88                        00            .byte	0
07950 1B89                        00            .byte	0
07951 1B8A                        00            .byte	0
07952                                           ! 1185  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07953 1B8B                        00            .byte	0
07954 1B8C                        00            .byte	0
07955 1B8D                        F0            .byte	$F0
07956 1B8E                        60            .byte	$60
07957 1B8F                        60            .byte	$60
07958 1B90                        60            .byte	$60
07959 1B91                        60            .byte	$60
07960 1B92                        60            .byte	$60
07961 1B93                        62            .byte	$62
07962 1B94                        66            .byte	$66
07963 1B95                        FE            .byte	$FE
07964 1B96                        00            .byte	0
07965 1B97                        00            .byte	0
07966 1B98                        00            .byte	0
07967                                           ! 1186  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07968 1B99                        00            .byte	0
07969 1B9A                        00            .byte	0
07970 1B9B                        C6            .byte	$C6
07971 1B9C                        EE            .byte	$EE
07972 1B9D                        FE            .byte	$FE
07973 1B9E                        FE            .byte	$FE
07974 1B9F                        D6            .byte	$D6
07975 1BA0                        C6            .byte	$C6
07976 1BA1                        C6            .byte	$C6
07977 1BA2                        C6            .byte	$C6
07978 1BA3                        C6            .byte	$C6
07979 1BA4                        00            .byte	0
07980 1BA5                        00            .byte	0
07981 1BA6                        00            .byte	0
07982                                           ! 1187  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde,
07983 1BA7                        00            .byte	0
07984 1BA8                        00            .byte	0
07985 1BA9                        C6            .byte	$C6
07986 1BAA                        E6            .byte	$E6
07987 1BAB                        F6            .byte	$F6
07988 1BAC                        FE            .byte	$FE
07989                                           ! 1187  0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07990 1BAD                        DE            .byte	$DE
07991 1BAE                        CE            .byte	$CE
07992 1BAF                        C6            .byte	$C6
07993 1BB0                        C6            .byte	$C6
07994 1BB1                        C6            .byte	$C6
07995 1BB2                        00            .byte	0
07996 1BB3                        00            .byte	0
07997 1BB4                        00            .byte	0
07998                                           ! 1188  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07999 1BB5                        00            .byte	0
08000 1BB6                        00            .byte	0
08001 1BB7                        38            .byte	$38
08002 1BB8                        6C            .byte	$6C
08003 1BB9                        C6            .byte	$C6
08004 1BBA                        C6            .byte	$C6
08005 1BBB                        C6            .byte	$C6
08006 1BBC                        C6            .byte	$C6
08007 1BBD                        C6            .byte	$C6
08008 1BBE                        6C            .byte	$6C
08009 1BBF                        38            .byte	$38
08010 1BC0                        00            .byte	0
08011 1BC1                        00            .byte	0
08012 1BC2                        00            .byte	0
08013                                           ! 1189  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08014 1BC3                        00            .byte	0
08015 1BC4                        00            .byte	0
08016 1BC5                        FC            .byte	$FC
08017 1BC6                        66            .byte	$66
08018 1BC7                        66            .byte	$66
08019 1BC8                        66            .byte	$66
08020 1BC9                        7C            .byte	$7C
08021 1BCA                        60            .byte	$60
08022 1BCB                        60            .byte	$60
08023 1BCC                        60            .byte	$60
08024 1BCD                        F0            .byte	$F0
08025 1BCE                        00            .byte	0
08026 1BCF                        00            .byte	0
08027 1BD0                        00            .byte	0
08028                                           ! 1190  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08029 1BD1                        00            .byte	0
08030 1BD2                        00            .byte	0
08031 1BD3                        7C            .byte	$7C
08032 1BD4                        C6            .byte	$C6
08033 1BD5                        C6            .byte	$C6
08034 1BD6                        C6            .byte	$C6
08035 1BD7                        C6            .byte	$C6
08036 1BD8                        D6            .byte	$D6
08037 1BD9                        DE            .byte	$DE
08038 1BDA                        7C            .byte	$7C
08039 1BDB                        0C            .byte	$C
08040 1BDC                        0E            .byte	$E
08041 1BDD                        00            .byte	0
08042 1BDE                        00            .byte	0
08043                                           ! 1191  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08044 1BDF                        00            .byte	0
08045 1BE0                        00            .byte	0
08046 1BE1                        FC            .byte	$FC
08047 1BE2                        66            .byte	$66
08048 1BE3                        66            .byte	$66
08049 1BE4                        66            .byte	$66
08050 1BE5                        7C            .byte	$7C
08051 1BE6                        6C            .byte	$6C
08052 1BE7                        66            .byte	$66
08053 1BE8                        66            .byte	$66
08054 1BE9                        E6            .byte	$E6
08055 1BEA                        00            .byte	0
08056 1BEB                        00            .byte	0
08057 1BEC                        00            .byte	0
08058                                           ! 1192  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08059 1BED                        00            .byte	0
08060 1BEE                        00            .byte	0
08061 1BEF                        7C            .byte	$7C
08062 1BF0                        C6            .byte	$C6
08063 1BF1                        C6            .byte	$C6
08064 1BF2                        60            .byte	$60
08065 1BF3                        38            .byte	$38
08066 1BF4                        0C            .byte	$C
08067 1BF5                        C6            .byte	$C6
08068 1BF6                        C6            .byte	$C6
08069 1BF7                        7C            .byte	$7C
08070 1BF8                        00            .byte	0
08071 1BF9                        00            .byte	0
08072 1BFA                        00            .byte	0
08073                                           ! 1193  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08074 1BFB                        00            .byte	0
08075 1BFC                        00            .byte	0
08076 1BFD                        7E            .byte	$7E
08077 1BFE                        7E            .byte	$7E
08078 1BFF                        5A            .byte	$5A
08079 1C00                        18            .byte	$18
08080 1C01                        18            .byte	$18
08081 1C02                        18            .byte	$18
08082 1C03                        18            .byte	$18
08083 1C04                        18            .byte	$18
08084 1C05                        3C            .byte	$3C
08085 1C06                        00            .byte	0
08086 1C07                        00            .byte	0
08087 1C08                        00            .byte	0
08088                                           ! 1194  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08089 1C09                        00            .byte	0
08090 1C0A                        00            .byte	0
08091 1C0B                        C6            .byte	$C6
08092 1C0C                        C6            .byte	$C6
08093 1C0D                        C6            .byte	$C6
08094 1C0E                        C6            .byte	$C6
08095 1C0F                        C6            .byte	$C6
08096 1C10                        C6            .byte	$C6
08097 1C11                        C6            .byte	$C6
08098 1C12                        C6            .byte	$C6
08099 1C13                        7C            .byte	$7C
08100 1C14                        00            .byte	0
08101 1C15                        00            .byte	0
08102 1C16                        00            .byte	0
08103                                           ! 1195  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08104 1C17                        00            .byte	0
08105 1C18                        00            .byte	0
08106 1C19                        C6            .byte	$C6
08107 1C1A                        C6            .byte	$C6
08108 1C1B                        C6            .byte	$C6
08109 1C1C                        C6            .byte	$C6
08110 1C1D                        C6            .byte	$C6
08111 1C1E                        C6            .byte	$C6
08112 1C1F                        6C            .byte	$6C
08113 1C20                        38            .byte	$38
08114 1C21                        10            .byte	$10
08115 1C22                        00            .byte	0
08116 1C23                        00            .byte	0
08117 1C24                        00            .byte	0
08118                                           ! 1196  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08119 1C25                        00            .byte	0
08120 1C26                        00            .byte	0
08121 1C27                        C6            .byte	$C6
08122 1C28                        C6            .byte	$C6
08123 1C29                        C6            .byte	$C6
08124 1C2A                        C6            .byte	$C6
08125 1C2B                        D6            .byte	$D6
08126 1C2C                        D6            .byte	$D6
08127 1C2D                        FE            .byte	$FE
08128 1C2E                        7C            .byte	$7C
08129 1C2F                        6C            .byte	$6C
08130 1C30                        00            .byte	0
08131 1C31                        00            .byte	0
08132 1C32                        00            .byte	0
08133                                           ! 1197  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08134 1C33                        00            .byte	0
08135 1C34                        00            .byte	0
08136 1C35                        C6            .byte	$C6
08137 1C36                        C6            .byte	$C6
08138 1C37                        6C            .byte	$6C
08139 1C38                        38            .byte	$38
08140 1C39                        38            .byte	$38
08141 1C3A                        38            .byte	$38
08142 1C3B                        6C            .byte	$6C
08143 1C3C                        C6            .byte	$C6
08144 1C3D                        C6            .byte	$C6
08145 1C3E                        00            .byte	0
08146 1C3F                        00            .byte	0
08147 1C40                        00            .byte	0
08148                                           ! 1198  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08149 1C41                        00            .byte	0
08150 1C42                        00            .byte	0
08151 1C43                        66            .byte	$66
08152 1C44                        66            .byte	$66
08153 1C45                        66            .byte	$66
08154 1C46                        66            .byte	$66
08155 1C47                        3C            .byte	$3C
08156 1C48                        18            .byte	$18
08157 1C49                        18            .byte	$18
08158 1C4A                        18            .byte	$18
08159 1C4B                        3C            .byte	$3C
08160 1C4C                        00            .byte	0
08161 1C4D                        00            .byte	0
08162 1C4E                        00            .byte	0
08163                                           ! 1199  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08164 1C4F                        00            .byte	0
08165 1C50                        00            .byte	0
08166 1C51                        FE            .byte	$FE
08167 1C52                        C6            .byte	$C6
08168 1C53                        8C            .byte	$8C
08169 1C54                        18            .byte	$18
08170 1C55                        30            .byte	$30
08171 1C56                        60            .byte	$60
08172 1C57                        C2            .byte	$C2
08173 1C58                        C6            .byte	$C6
08174 1C59                        FE            .byte	$FE
08175 1C5A                        00            .byte	0
08176 1C5B                        00            .byte	0
08177 1C5C                        00            .byte	0
08178                                           ! 1200  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08179 1C5D                        00            .byte	0
08180 1C5E                        00            .byte	0
08181 1C5F                        3C            .byte	$3C
08182 1C60                        30            .byte	$30
08183 1C61                        30            .byte	$30
08184 1C62                        30            .byte	$30
08185 1C63                        30            .byte	$30
08186 1C64                        30            .byte	$30
08187 1C65                        30            .byte	$30
08188 1C66                        30            .byte	$30
08189 1C67                        3C            .byte	$3C
08190 1C68                        00            .byte	0
08191 1C69                        00            .byte	0
08192 1C6A                        00            .byte	0
08193                                           ! 1201  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08194 1C6B                        00            .byte	0
08195 1C6C                        00            .byte	0
08196 1C6D                        80            .byte	$80
08197 1C6E                        C0            .byte	$C0
08198 1C6F                        E0            .byte	$E0
08199 1C70                        70            .byte	$70
08200 1C71                        38            .byte	$38
08201 1C72                        1C            .byte	$1C
08202 1C73                        0E            .byte	$E
08203 1C74                        06            .byte	6
08204 1C75                        02            .byte	2
08205 1C76                        00            .byte	0
08206 1C77                        00            .byte	0
08207 1C78                        00            .byte	0
08208                                           ! 1202  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08209 1C79                        00            .byte	0
08210 1C7A                        00            .byte	0
08211 1C7B                        3C            .byte	$3C
08212 1C7C                        0C            .byte	$C
08213 1C7D                        0C            .byte	$C
08214 1C7E                        0C            .byte	$C
08215 1C7F                        0C            .byte	$C
08216 1C80                        0C            .byte	$C
08217 1C81                        0C            .byte	$C
08218 1C82                        0C            .byte	$C
08219 1C83                        3C            .byte	$3C
08220 1C84                        00            .byte	0
08221 1C85                        00            .byte	0
08222 1C86                        00            .byte	0
08223                                           ! 1203  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08224 1C87                        10            .byte	$10
08225 1C88                        38            .byte	$38
08226 1C89                        6C            .byte	$6C
08227 1C8A                        C6            .byte	$C6
08228 1C8B                        00            .byte	0
08229 1C8C                        00            .byte	0
08230 1C8D                        00            .byte	0
08231 1C8E                        00            .byte	0
08232 1C8F                        00            .byte	0
08233 1C90                        00            .byte	0
08234 1C91                        00            .byte	0
08235 1C92                        00            .byte	0
08236 1C93                        00            .byte	0
08237 1C94                        00            .byte	0
08238                                           ! 1204  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08239 1C95                        00            .byte	0
08240 1C96                        00            .byte	0
08241 1C97                        00            .byte	0
08242 1C98                        00            .byte	0
08243 1C99                        00            .byte	0
08244 1C9A                        00            .byte	0
08245 1C9B                        00            .byte	0
08246 1C9C                        00            .byte	0
08247 1C9D                        00            .byte	0
08248 1C9E                        00            .byte	0
08249 1C9F                        00            .byte	0
08250 1CA0                        00            .byte	0
08251 1CA1                        FF            .byte	$FF
08252 1CA2                        00            .byte	0
08253                                           ! 1205  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08254 1CA3                        30            .byte	$30
08255 1CA4                        30            .byte	$30
08256 1CA5                        18            .byte	$18
08257 1CA6                        00            .byte	0
08258 1CA7                        00            .byte	0
08259 1CA8                        00            .byte	0
08260 1CA9                        00            .byte	0
08261 1CAA                        00            .byte	0
08262 1CAB                        00            .byte	0
08263 1CAC                        00            .byte	0
08264 1CAD                        00            .byte	0
08265 1CAE                        00            .byte	0
08266 1CAF                        00            .byte	0
08267 1CB0                        00            .byte	0
08268                                           ! 1206  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08269 1CB1                        00            .byte	0
08270 1CB2                        00            .byte	0
08271 1CB3                        00            .byte	0
08272 1CB4                        00            .byte	0
08273 1CB5                        00            .byte	0
08274 1CB6                        78            .byte	$78
08275 1CB7                        0C            .byte	$C
08276 1CB8                        7C            .byte	$7C
08277 1CB9                        CC            .byte	$CC
08278 1CBA                        CC            .byte	$CC
08279 1CBB                        76            .byte	$76
08280 1CBC                        00            .byte	0
08281 1CBD                        00            .byte	0
08282 1CBE                        00            .byte	0
08283                                           ! 1207  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08284 1CBF                        00            .byte	0
08285 1CC0                        00            .byte	0
08286 1CC1                        E0            .byte	$E0
08287 1CC2                        60            .byte	$60
08288 1CC3                        60            .byte	$60
08289 1CC4                        78            .byte	$78
08290 1CC5                        6C            .byte	$6C
08291 1CC6                        66            .byte	$66
08292 1CC7                        66            .byte	$66
08293 1CC8                        66            .byte	$66
08294 1CC9                        7C            .byte	$7C
08295 1CCA                        00            .byte	0
08296 1CCB                        00            .byte	0
08297 1CCC                        00            .byte	0
08298                                           ! 1208  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08299 1CCD                        00            .byte	0
08300 1CCE                        00            .byte	0
08301 1CCF                        00            .byte	0
08302 1CD0                        00            .byte	0
08303 1CD1                        00            .byte	0
08304 1CD2                        7C            .byte	$7C
08305 1CD3                        C6            .byte	$C6
08306 1CD4                        C0            .byte	$C0
08307 1CD5                        C0            .byte	$C0
08308 1CD6                        C6            .byte	$C6
08309 1CD7                        7C            .byte	$7C
08310 1CD8                        00            .byte	0
08311 1CD9                        00            .byte	0
08312 1CDA                        00            .byte	0
08313                                           ! 1209  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08314 1CDB                        00            .byte	0
08315 1CDC                        00            .byte	0
08316 1CDD                        1C            .byte	$1C
08317 1CDE                        0C            .byte	$C
08318 1CDF                        0C            .byte	$C
08319 1CE0                        3C            .byte	$3C
08320 1CE1                        6C            .byte	$6C
08321 1CE2                        CC            .byte	$CC
08322 1CE3                        CC            .byte	$CC
08323 1CE4                        CC            .byte	$CC
08324 1CE5                        76            .byte	$76
08325 1CE6                        00            .byte	0
08326 1CE7                        00            .byte	0
08327 1CE8                        00            .byte	0
08328                                           ! 1210  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08329 1CE9                        00            .byte	0
08330 1CEA                        00            .byte	0
08331 1CEB                        00            .byte	0
08332 1CEC                        00            .byte	0
08333 1CED                        00            .byte	0
08334 1CEE                        7C            .byte	$7C
08335 1CEF                        C6            .byte	$C6
08336 1CF0                        FE            .byte	$FE
08337 1CF1                        C0            .byte	$C0
08338 1CF2                        C6            .byte	$C6
08339 1CF3                        7C            .byte	$7C
08340 1CF4                        00            .byte	0
08341 1CF5                        00            .byte	0
08342 1CF6                        00            .byte	0
08343                                           ! 1211  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0
08344 1CF7                        00            .byte	0
08345 1CF8                        00            .byte	0
08346 1CF9                        38            .byte	$38
08347 1CFA                        6C            .byte	$6C
08348 1CFB                        64            .byte	$64
08349 1CFC                        60            .byte	$60
08350 1CFD                        F0            .byte	$F0
08351 1CFE                        60            .byte	$60
08352                                           ! 1211 x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08353 1CFF                        60            .byte	$60
08354 1D00                        60            .byte	$60
08355 1D01                        F0            .byte	$F0
08356 1D02                        00            .byte	0
08357 1D03                        00            .byte	0
08358 1D04                        00            .byte	0
08359                                           ! 1212  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08360 1D05                        00            .byte	0
08361 1D06                        00            .byte	0
08362 1D07                        00            .byte	0
08363 1D08                        00            .byte	0
08364 1D09                        00            .byte	0
08365 1D0A                        76            .byte	$76
08366 1D0B                        CC            .byte	$CC
08367 1D0C                        CC            .byte	$CC
08368 1D0D                        CC            .byte	$CC
08369 1D0E                        7C            .byte	$7C
08370 1D0F                        0C            .byte	$C
08371 1D10                        CC            .byte	$CC
08372 1D11                        78            .byte	$78
08373 1D12                        00            .byte	0
08374                                           ! 1213  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08375 1D13                        00            .byte	0
08376 1D14                        00            .byte	0
08377 1D15                        E0            .byte	$E0
08378 1D16                        60            .byte	$60
08379 1D17                        60            .byte	$60
08380 1D18                        6C            .byte	$6C
08381 1D19                        76            .byte	$76
08382 1D1A                        66            .byte	$66
08383 1D1B                        66            .byte	$66
08384 1D1C                        66            .byte	$66
08385 1D1D                        E6            .byte	$E6
08386 1D1E                        00            .byte	0
08387 1D1F                        00            .byte	0
08388 1D20                        00            .byte	0
08389                                           ! 1214  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08390 1D21                        00            .byte	0
08391 1D22                        00            .byte	0
08392 1D23                        18            .byte	$18
08393 1D24                        18            .byte	$18
08394 1D25                        00            .byte	0
08395 1D26                        38            .byte	$38
08396 1D27                        18            .byte	$18
08397 1D28                        18            .byte	$18
08398 1D29                        18            .byte	$18
08399 1D2A                        18            .byte	$18
08400 1D2B                        3C            .byte	$3C
08401 1D2C                        00            .byte	0
08402 1D2D                        00            .byte	0
08403 1D2E                        00            .byte	0
08404                                           ! 1215  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08405 1D2F                        00            .byte	0
08406 1D30                        00            .byte	0
08407 1D31                        06            .byte	6
08408 1D32                        06            .byte	6
08409 1D33                        00            .byte	0
08410 1D34                        0E            .byte	$E
08411 1D35                        06            .byte	6
08412 1D36                        06            .byte	6
08413 1D37                        06            .byte	6
08414 1D38                        06            .byte	6
08415 1D39                        66            .byte	$66
08416 1D3A                        66            .byte	$66
08417 1D3B                        3C            .byte	$3C
08418 1D3C                        00            .byte	0
08419                                           ! 1216  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08420 1D3D                        00            .byte	0
08421 1D3E                        00            .byte	0
08422 1D3F                        E0            .byte	$E0
08423 1D40                        60            .byte	$60
08424 1D41                        60            .byte	$60
08425 1D42                        66            .byte	$66
08426 1D43                        6C            .byte	$6C
08427 1D44                        78            .byte	$78
08428 1D45                        6C            .byte	$6C
08429 1D46                        66            .byte	$66
08430 1D47                        E6            .byte	$E6
08431 1D48                        00            .byte	0
08432 1D49                        00            .byte	0
08433 1D4A                        00            .byte	0
08434                                           ! 1217  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08435 1D4B                        00            .byte	0
08436 1D4C                        00            .byte	0
08437 1D4D                        38            .byte	$38
08438 1D4E                        18            .byte	$18
08439 1D4F                        18            .byte	$18
08440 1D50                        18            .byte	$18
08441 1D51                        18            .byte	$18
08442 1D52                        18            .byte	$18
08443 1D53                        18            .byte	$18
08444 1D54                        18            .byte	$18
08445 1D55                        3C            .byte	$3C
08446 1D56                        00            .byte	0
08447 1D57                        00            .byte	0
08448 1D58                        00            .byte	0
08449                                           ! 1218  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08450 1D59                        00            .byte	0
08451 1D5A                        00            .byte	0
08452 1D5B                        00            .byte	0
08453 1D5C                        00            .byte	0
08454 1D5D                        00            .byte	0
08455 1D5E                        EC            .byte	$EC
08456 1D5F                        FE            .byte	$FE
08457 1D60                        D6            .byte	$D6
08458 1D61                        D6            .byte	$D6
08459 1D62                        D6            .byte	$D6
08460 1D63                        C6            .byte	$C6
08461 1D64                        00            .byte	0
08462 1D65                        00            .byte	0
08463 1D66                        00            .byte	0
08464                                           ! 1219  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08465 1D67                        00            .byte	0
08466 1D68                        00            .byte	0
08467 1D69                        00            .byte	0
08468 1D6A                        00            .byte	0
08469 1D6B                        00            .byte	0
08470 1D6C                        DC            .byte	$DC
08471 1D6D                        66            .byte	$66
08472 1D6E                        66            .byte	$66
08473 1D6F                        66            .byte	$66
08474 1D70                        66            .byte	$66
08475 1D71                        66            .byte	$66
08476 1D72                        00            .byte	0
08477 1D73                        00            .byte	0
08478 1D74                        00            .byte	0
08479                                           ! 1220  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08480 1D75                        00            .byte	0
08481 1D76                        00            .byte	0
08482 1D77                        00            .byte	0
08483 1D78                        00            .byte	0
08484 1D79                        00            .byte	0
08485 1D7A                        7C            .byte	$7C
08486 1D7B                        C6            .byte	$C6
08487 1D7C                        C6            .byte	$C6
08488 1D7D                        C6            .byte	$C6
08489 1D7E                        C6            .byte	$C6
08490 1D7F                        7C            .byte	$7C
08491 1D80                        00            .byte	0
08492 1D81                        00            .byte	0
08493 1D82                        00            .byte	0
08494                                           ! 1221  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08495 1D83                        00            .byte	0
08496 1D84                        00            .byte	0
08497 1D85                        00            .byte	0
08498 1D86                        00            .byte	0
08499 1D87                        00            .byte	0
08500 1D88                        DC            .byte	$DC
08501 1D89                        66            .byte	$66
08502 1D8A                        66            .byte	$66
08503 1D8B                        66            .byte	$66
08504 1D8C                        7C            .byte	$7C
08505 1D8D                        60            .byte	$60
08506 1D8E                        60            .byte	$60
08507 1D8F                        F0            .byte	$F0
08508 1D90                        00            .byte	0
08509                                           ! 1222  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08510 1D91                        00            .byte	0
08511 1D92                        00            .byte	0
08512 1D93                        00            .byte	0
08513 1D94                        00            .byte	0
08514 1D95                        00            .byte	0
08515 1D96                        76            .byte	$76
08516 1D97                        CC            .byte	$CC
08517 1D98                        CC            .byte	$CC
08518 1D99                        CC            .byte	$CC
08519 1D9A                        7C            .byte	$7C
08520 1D9B                        0C            .byte	$C
08521 1D9C                        0C            .byte	$C
08522 1D9D                        1E            .byte	$1E
08523 1D9E                        00            .byte	0
08524                                           ! 1223  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08525 1D9F                        00            .byte	0
08526 1DA0                        00            .byte	0
08527 1DA1                        00            .byte	0
08528 1DA2                        00            .byte	0
08529 1DA3                        00            .byte	0
08530 1DA4                        DC            .byte	$DC
08531 1DA5                        76            .byte	$76
08532 1DA6                        66            .byte	$66
08533 1DA7                        60            .byte	$60
08534 1DA8                        60            .byte	$60
08535 1DA9                        F0            .byte	$F0
08536 1DAA                        00            .byte	0
08537 1DAB                        00            .byte	0
08538 1DAC                        00            .byte	0
08539                                           ! 1224  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08540 1DAD                        00            .byte	0
08541 1DAE                        00            .byte	0
08542 1DAF                        00            .byte	0
08543 1DB0                        00            .byte	0
08544 1DB1                        00            .byte	0
08545 1DB2                        7C            .byte	$7C
08546 1DB3                        C6            .byte	$C6
08547 1DB4                        70            .byte	$70
08548 1DB5                        1C            .byte	$1C
08549 1DB6                        C6            .byte	$C6
08550 1DB7                        7C            .byte	$7C
08551 1DB8                        00            .byte	0
08552 1DB9                        00            .byte	0
08553 1DBA                        00            .byte	0
08554                                           ! 1225  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08555 1DBB                        00            .byte	0
08556 1DBC                        00            .byte	0
08557 1DBD                        10            .byte	$10
08558 1DBE                        30            .byte	$30
08559 1DBF                        30            .byte	$30
08560 1DC0                        FC            .byte	$FC
08561 1DC1                        30            .byte	$30
08562 1DC2                        30            .byte	$30
08563 1DC3                        30            .byte	$30
08564 1DC4                        36            .byte	$36
08565 1DC5                        1C            .byte	$1C
08566 1DC6                        00            .byte	0
08567 1DC7                        00            .byte	0
08568 1DC8                        00            .byte	0
08569                                           ! 1226  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08570 1DC9                        00            .byte	0
08571 1DCA                        00            .byte	0
08572 1DCB                        00            .byte	0
08573 1DCC                        00            .byte	0
08574 1DCD                        00            .byte	0
08575 1DCE                        CC            .byte	$CC
08576 1DCF                        CC            .byte	$CC
08577 1DD0                        CC            .byte	$CC
08578 1DD1                        CC            .byte	$CC
08579 1DD2                        CC            .byte	$CC
08580 1DD3                        76            .byte	$76
08581 1DD4                        00            .byte	0
08582 1DD5                        00            .byte	0
08583 1DD6                        00            .byte	0
08584                                           ! 1227  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08585 1DD7                        00            .byte	0
08586 1DD8                        00            .byte	0
08587 1DD9                        00            .byte	0
08588 1DDA                        00            .byte	0
08589 1DDB                        00            .byte	0
08590 1DDC                        66            .byte	$66
08591 1DDD                        66            .byte	$66
08592 1DDE                        66            .byte	$66
08593 1DDF                        66            .byte	$66
08594 1DE0                        3C            .byte	$3C
08595 1DE1                        18            .byte	$18
08596 1DE2                        00            .byte	0
08597 1DE3                        00            .byte	0
08598 1DE4                        00            .byte	0
08599                                           ! 1228  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08600 1DE5                        00            .byte	0
08601 1DE6                        00            .byte	0
08602 1DE7                        00            .byte	0
08603 1DE8                        00            .byte	0
08604 1DE9                        00            .byte	0
08605 1DEA                        C6            .byte	$C6
08606 1DEB                        C6            .byte	$C6
08607 1DEC                        D6            .byte	$D6
08608 1DED                        D6            .byte	$D6
08609 1DEE                        FE            .byte	$FE
08610 1DEF                        6C            .byte	$6C
08611 1DF0                        00            .byte	0
08612 1DF1                        00            .byte	0
08613 1DF2                        00            .byte	0
08614                                           ! 1229  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08615 1DF3                        00            .byte	0
08616 1DF4                        00            .byte	0
08617 1DF5                        00            .byte	0
08618 1DF6                        00            .byte	0
08619 1DF7                        00            .byte	0
08620 1DF8                        C6            .byte	$C6
08621 1DF9                        6C            .byte	$6C
08622 1DFA                        38            .byte	$38
08623 1DFB                        38            .byte	$38
08624 1DFC                        6C            .byte	$6C
08625 1DFD                        C6            .byte	$C6
08626 1DFE                        00            .byte	0
08627 1DFF                        00            .byte	0
08628 1E00                        00            .byte	0
08629                                           ! 1230  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08630 1E01                        00            .byte	0
08631 1E02                        00            .byte	0
08632 1E03                        00            .byte	0
08633 1E04                        00            .byte	0
08634 1E05                        00            .byte	0
08635 1E06                        C6            .byte	$C6
08636 1E07                        C6            .byte	$C6
08637 1E08                        C6            .byte	$C6
08638 1E09                        C6            .byte	$C6
08639 1E0A                        7E            .byte	$7E
08640 1E0B                        06            .byte	6
08641 1E0C                        0C            .byte	$C
08642 1E0D                        F8            .byte	$F8
08643 1E0E                        00            .byte	0
08644                                           ! 1231  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08645 1E0F                        00            .byte	0
08646 1E10                        00            .byte	0
08647 1E11                        00            .byte	0
08648 1E12                        00            .byte	0
08649 1E13                        00            .byte	0
08650 1E14                        FE            .byte	$FE
08651 1E15                        CC            .byte	$CC
08652 1E16                        18            .byte	$18
08653 1E17                        30            .byte	$30
08654 1E18                        66            .byte	$66
08655 1E19                        FE            .byte	$FE
08656 1E1A                        00            .byte	0
08657 1E1B                        00            .byte	0
08658 1E1C                        00            .byte	0
08659                                           ! 1232  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08660 1E1D                        00            .byte	0
08661 1E1E                        00            .byte	0
08662 1E1F                        0E            .byte	$E
08663 1E20                        18            .byte	$18
08664 1E21                        18            .byte	$18
08665 1E22                        18            .byte	$18
08666 1E23                        70            .byte	$70
08667 1E24                        18            .byte	$18
08668 1E25                        18            .byte	$18
08669 1E26                        18            .byte	$18
08670 1E27                        0E            .byte	$E
08671 1E28                        00            .byte	0
08672 1E29                        00            .byte	0
08673 1E2A                        00            .byte	0
08674                                           ! 1233  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08675 1E2B                        00            .byte	0
08676 1E2C                        00            .byte	0
08677 1E2D                        18            .byte	$18
08678 1E2E                        18            .byte	$18
08679 1E2F                        18            .byte	$18
08680 1E30                        18            .byte	$18
08681 1E31                        00            .byte	0
08682 1E32                        18            .byte	$18
08683 1E33                        18            .byte	$18
08684 1E34                        18            .byte	$18
08685 1E35                        18            .byte	$18
08686 1E36                        00            .byte	0
08687 1E37                        00            .byte	0
08688 1E38                        00            .byte	0
08689                                           ! 1234  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08690 1E39                        00            .byte	0
08691 1E3A                        00            .byte	0
08692 1E3B                        70            .byte	$70
08693 1E3C                        18            .byte	$18
08694 1E3D                        18            .byte	$18
08695 1E3E                        18            .byte	$18
08696 1E3F                        0E            .byte	$E
08697 1E40                        18            .byte	$18
08698 1E41                        18            .byte	$18
08699 1E42                        18            .byte	$18
08700 1E43                        70            .byte	$70
08701 1E44                        00            .byte	0
08702 1E45                        00            .byte	0
08703 1E46                        00            .byte	0
08704                                           ! 1235  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
08705 1E47                        00            .byte	0
08706 1E48                        00            .byte	0
08707 1E49                        76            .byte	$76
08708 1E4A                        DC            .byte	$DC
08709 1E4B                        00            .byte	0
08710 1E4C                        00            .byte	0
08711 1E4D                        00            .byte	0
08712 1E4E                        00            .byte	0
08713 1E4F                        00            .byte	0
08714                                           ! 1235 0, 0x00, 0x00, 0x00, 0x00,
08715 1E50                        00            .byte	0
08716 1E51                        00            .byte	0
08717 1E52                        00            .byte	0
08718 1E53                        00            .byte	0
08719 1E54                        00            .byte	0
08720                                           ! 1236  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08721 1E55                        00            .byte	0
08722 1E56                        00            .byte	0
08723 1E57                        00            .byte	0
08724 1E58                        00            .byte	0
08725 1E59                        10            .byte	$10
08726 1E5A                        38            .byte	$38
08727 1E5B                        6C            .byte	$6C
08728 1E5C                        C6            .byte	$C6
08729 1E5D                        C6            .byte	$C6
08730 1E5E                        FE            .byte	$FE
08731 1E5F                        00            .byte	0
08732 1E60                        00            .byte	0
08733 1E61                        00            .byte	0
08734 1E62                        00            .byte	0
08735                                           ! 1237  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08736 1E63                        00            .byte	0
08737 1E64                        00            .byte	0
08738 1E65                        3C            .byte	$3C
08739 1E66                        66            .byte	$66
08740 1E67                        C2            .byte	$C2
08741 1E68                        C0            .byte	$C0
08742 1E69                        C0            .byte	$C0
08743 1E6A                        C2            .byte	$C2
08744 1E6B                        66            .byte	$66
08745 1E6C                        3C            .byte	$3C
08746 1E6D                        0C            .byte	$C
08747 1E6E                        06            .byte	6
08748 1E6F                        7C            .byte	$7C
08749 1E70                        00            .byte	0
08750                                           ! 1238  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08751 1E71                        00            .byte	0
08752 1E72                        00            .byte	0
08753 1E73                        CC            .byte	$CC
08754 1E74                        CC            .byte	$CC
08755 1E75                        00            .byte	0
08756 1E76                        CC            .byte	$CC
08757 1E77                        CC            .byte	$CC
08758 1E78                        CC            .byte	$CC
08759 1E79                        CC            .byte	$CC
08760 1E7A                        CC            .byte	$CC
08761 1E7B                        76            .byte	$76
08762 1E7C                        00            .byte	0
08763 1E7D                        00            .byte	0
08764 1E7E                        00            .byte	0
08765                                           ! 1239  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08766 1E7F                        00            .byte	0
08767 1E80                        0C            .byte	$C
08768 1E81                        18            .byte	$18
08769 1E82                        30            .byte	$30
08770 1E83                        00            .byte	0
08771 1E84                        7C            .byte	$7C
08772 1E85                        C6            .byte	$C6
08773 1E86                        FE            .byte	$FE
08774 1E87                        C0            .byte	$C0
08775 1E88                        C6            .byte	$C6
08776 1E89                        7C            .byte	$7C
08777 1E8A                        00            .byte	0
08778 1E8B                        00            .byte	0
08779 1E8C                        00            .byte	0
08780                                           ! 1240  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08781 1E8D                        00            .byte	0
08782 1E8E                        10            .byte	$10
08783 1E8F                        38            .byte	$38
08784 1E90                        6C            .byte	$6C
08785 1E91                        00            .byte	0
08786 1E92                        78            .byte	$78
08787 1E93                        0C            .byte	$C
08788 1E94                        7C            .byte	$7C
08789 1E95                        CC            .byte	$CC
08790 1E96                        CC            .byte	$CC
08791 1E97                        76            .byte	$76
08792 1E98                        00            .byte	0
08793 1E99                        00            .byte	0
08794 1E9A                        00            .byte	0
08795                                           ! 1241  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08796 1E9B                        00            .byte	0
08797 1E9C                        00            .byte	0
08798 1E9D                        CC            .byte	$CC
08799 1E9E                        CC            .byte	$CC
08800 1E9F                        00            .byte	0
08801 1EA0                        78            .byte	$78
08802 1EA1                        0C            .byte	$C
08803 1EA2                        7C            .byte	$7C
08804 1EA3                        CC            .byte	$CC
08805 1EA4                        CC            .byte	$CC
08806 1EA5                        76            .byte	$76
08807 1EA6                        00            .byte	0
08808 1EA7                        00            .byte	0
08809 1EA8                        00            .byte	0
08810                                           ! 1242  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08811 1EA9                        00            .byte	0
08812 1EAA                        60            .byte	$60
08813 1EAB                        30            .byte	$30
08814 1EAC                        18            .byte	$18
08815 1EAD                        00            .byte	0
08816 1EAE                        78            .byte	$78
08817 1EAF                        0C            .byte	$C
08818 1EB0                        7C            .byte	$7C
08819 1EB1                        CC            .byte	$CC
08820 1EB2                        CC            .byte	$CC
08821 1EB3                        76            .byte	$76
08822 1EB4                        00            .byte	0
08823 1EB5                        00            .byte	0
08824 1EB6                        00            .byte	0
08825                                           ! 1243  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08826 1EB7                        00            .byte	0
08827 1EB8                        38            .byte	$38
08828 1EB9                        6C            .byte	$6C
08829 1EBA                        38            .byte	$38
08830 1EBB                        00            .byte	0
08831 1EBC                        78            .byte	$78
08832 1EBD                        0C            .byte	$C
08833 1EBE                        7C            .byte	$7C
08834 1EBF                        CC            .byte	$CC
08835 1EC0                        CC            .byte	$CC
08836 1EC1                        76            .byte	$76
08837 1EC2                        00            .byte	0
08838 1EC3                        00            .byte	0
08839 1EC4                        00            .byte	0
08840                                           ! 1244  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08841 1EC5                        00            .byte	0
08842 1EC6                        00            .byte	0
08843 1EC7                        00            .byte	0
08844 1EC8                        00            .byte	0
08845 1EC9                        3C            .byte	$3C
08846 1ECA                        66            .byte	$66
08847 1ECB                        60            .byte	$60
08848 1ECC                        66            .byte	$66
08849 1ECD                        3C            .byte	$3C
08850 1ECE                        0C            .byte	$C
08851 1ECF                        06            .byte	6
08852 1ED0                        3C            .byte	$3C
08853 1ED1                        00            .byte	0
08854 1ED2                        00            .byte	0
08855                                           ! 1245  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08856 1ED3                        00            .byte	0
08857 1ED4                        10            .byte	$10
08858 1ED5                        38            .byte	$38
08859 1ED6                        6C            .byte	$6C
08860 1ED7                        00            .byte	0
08861 1ED8                        7C            .byte	$7C
08862 1ED9                        C6            .byte	$C6
08863 1EDA                        FE            .byte	$FE
08864 1EDB                        C0            .byte	$C0
08865 1EDC                        C6            .byte	$C6
08866 1EDD                        7C            .byte	$7C
08867 1EDE                        00            .byte	0
08868 1EDF                        00            .byte	0
08869 1EE0                        00            .byte	0
08870                                           ! 1246  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08871 1EE1                        00            .byte	0
08872 1EE2                        00            .byte	0
08873 1EE3                        CC            .byte	$CC
08874 1EE4                        CC            .byte	$CC
08875 1EE5                        00            .byte	0
08876 1EE6                        7C            .byte	$7C
08877 1EE7                        C6            .byte	$C6
08878 1EE8                        FE            .byte	$FE
08879 1EE9                        C0            .byte	$C0
08880 1EEA                        C6            .byte	$C6
08881 1EEB                        7C            .byte	$7C
08882 1EEC                        00            .byte	0
08883 1EED                        00            .byte	0
08884 1EEE                        00            .byte	0
08885                                           ! 1247  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08886 1EEF                        00            .byte	0
08887 1EF0                        60            .byte	$60
08888 1EF1                        30            .byte	$30
08889 1EF2                        18            .byte	$18
08890 1EF3                        00            .byte	0
08891 1EF4                        7C            .byte	$7C
08892 1EF5                        C6            .byte	$C6
08893 1EF6                        FE            .byte	$FE
08894 1EF7                        C0            .byte	$C0
08895 1EF8                        C6            .byte	$C6
08896 1EF9                        7C            .byte	$7C
08897 1EFA                        00            .byte	0
08898 1EFB                        00            .byte	0
08899 1EFC                        00            .byte	0
08900                                           ! 1248  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08901 1EFD                        00            .byte	0
08902 1EFE                        00            .byte	0
08903 1EFF                        66            .byte	$66
08904 1F00                        66            .byte	$66
08905 1F01                        00            .byte	0
08906 1F02                        38            .byte	$38
08907 1F03                        18            .byte	$18
08908 1F04                        18            .byte	$18
08909 1F05                        18            .byte	$18
08910 1F06                        18            .byte	$18
08911 1F07                        3C            .byte	$3C
08912 1F08                        00            .byte	0
08913 1F09                        00            .byte	0
08914 1F0A                        00            .byte	0
08915                                           ! 1249  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08916 1F0B                        00            .byte	0
08917 1F0C                        18            .byte	$18
08918 1F0D                        3C            .byte	$3C
08919 1F0E                        66            .byte	$66
08920 1F0F                        00            .byte	0
08921 1F10                        38            .byte	$38
08922 1F11                        18            .byte	$18
08923 1F12                        18            .byte	$18
08924 1F13                        18            .byte	$18
08925 1F14                        18            .byte	$18
08926 1F15                        3C            .byte	$3C
08927 1F16                        00            .byte	0
08928 1F17                        00            .byte	0
08929 1F18                        00            .byte	0
08930                                           ! 1250  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08931 1F19                        00            .byte	0
08932 1F1A                        60            .byte	$60
08933 1F1B                        30            .byte	$30
08934 1F1C                        18            .byte	$18
08935 1F1D                        00            .byte	0
08936 1F1E                        38            .byte	$38
08937 1F1F                        18            .byte	$18
08938 1F20                        18            .byte	$18
08939 1F21                        18            .byte	$18
08940 1F22                        18            .byte	$18
08941 1F23                        3C            .byte	$3C
08942 1F24                        00            .byte	0
08943 1F25                        00            .byte	0
08944 1F26                        00            .byte	0
08945                                           ! 1251  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08946 1F27                        00            .byte	0
08947 1F28                        C6            .byte	$C6
08948 1F29                        C6            .byte	$C6
08949 1F2A                        10            .byte	$10
08950 1F2B                        38            .byte	$38
08951 1F2C                        6C            .byte	$6C
08952 1F2D                        C6            .byte	$C6
08953 1F2E                        C6            .byte	$C6
08954 1F2F                        FE            .byte	$FE
08955 1F30                        C6            .byte	$C6
08956 1F31                        C6            .byte	$C6
08957 1F32                        00            .byte	0
08958 1F33                        00            .byte	0
08959 1F34                        00            .byte	0
08960                                           ! 1252  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08961 1F35                        38            .byte	$38
08962 1F36                        6C            .byte	$6C
08963 1F37                        38            .byte	$38
08964 1F38                        00            .byte	0
08965 1F39                        38            .byte	$38
08966 1F3A                        6C            .byte	$6C
08967 1F3B                        C6            .byte	$C6
08968 1F3C                        C6            .byte	$C6
08969 1F3D                        FE            .byte	$FE
08970 1F3E                        C6            .byte	$C6
08971 1F3F                        C6            .byte	$C6
08972 1F40                        00            .byte	0
08973 1F41                        00            .byte	0
08974 1F42                        00            .byte	0
08975                                           ! 1253  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08976 1F43                        18            .byte	$18
08977 1F44                        30            .byte	$30
08978 1F45                        60            .byte	$60
08979 1F46                        00            .byte	0
08980 1F47                        FE            .byte	$FE
08981 1F48                        66            .byte	$66
08982 1F49                        60            .byte	$60
08983 1F4A                        7C            .byte	$7C
08984 1F4B                        60            .byte	$60
08985 1F4C                        66            .byte	$66
08986 1F4D                        FE            .byte	$FE
08987 1F4E                        00            .byte	0
08988 1F4F                        00            .byte	0
08989 1F50                        00            .byte	0
08990                                           ! 1254  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08991 1F51                        00            .byte	0
08992 1F52                        00            .byte	0
08993 1F53                        00            .byte	0
08994 1F54                        00            .byte	0
08995 1F55                        CC            .byte	$CC
08996 1F56                        76            .byte	$76
08997 1F57                        36            .byte	$36
08998 1F58                        7E            .byte	$7E
08999 1F59                        D8            .byte	$D8
09000 1F5A                        D8            .byte	$D8
09001 1F5B                        6E            .byte	$6E
09002 1F5C                        00            .byte	0
09003 1F5D                        00            .byte	0
09004 1F5E                        00            .byte	0
09005                                           ! 1255  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09006 1F5F                        00            .byte	0
09007 1F60                        00            .byte	0
09008 1F61                        3E            .byte	$3E
09009 1F62                        6C            .byte	$6C
09010 1F63                        CC            .byte	$CC
09011 1F64                        CC            .byte	$CC
09012 1F65                        FE            .byte	$FE
09013 1F66                        CC            .byte	$CC
09014 1F67                        CC            .byte	$CC
09015 1F68                        CC            .byte	$CC
09016 1F69                        CE            .byte	$CE
09017 1F6A                        00            .byte	0
09018 1F6B                        00            .byte	0
09019 1F6C                        00            .byte	0
09020                                           ! 1256  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09021 1F6D                        00            .byte	0
09022 1F6E                        10            .byte	$10
09023 1F6F                        38            .byte	$38
09024 1F70                        6C            .byte	$6C
09025 1F71                        00            .byte	0
09026 1F72                        7C            .byte	$7C
09027 1F73                        C6            .byte	$C6
09028 1F74                        C6            .byte	$C6
09029 1F75                        C6            .byte	$C6
09030 1F76                        C6            .byte	$C6
09031 1F77                        7C            .byte	$7C
09032 1F78                        00            .byte	0
09033 1F79                        00            .byte	0
09034 1F7A                        00            .byte	0
09035                                           ! 1257  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09036 1F7B                        00            .byte	0
09037 1F7C                        00            .byte	0
09038 1F7D                        C6            .byte	$C6
09039 1F7E                        C6            .byte	$C6
09040 1F7F                        00            .byte	0
09041 1F80                        7C            .byte	$7C
09042 1F81                        C6            .byte	$C6
09043 1F82                        C6            .byte	$C6
09044 1F83                        C6            .byte	$C6
09045 1F84                        C6            .byte	$C6
09046 1F85                        7C            .byte	$7C
09047 1F86                        00            .byte	0
09048 1F87                        00            .byte	0
09049 1F88                        00            .byte	0
09050                                           ! 1258  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09051 1F89                        00            .byte	0
09052 1F8A                        60            .byte	$60
09053 1F8B                        30            .byte	$30
09054 1F8C                        18            .byte	$18
09055 1F8D                        00            .byte	0
09056 1F8E                        7C            .byte	$7C
09057 1F8F                        C6            .byte	$C6
09058 1F90                        C6            .byte	$C6
09059 1F91                        C6            .byte	$C6
09060 1F92                        C6            .byte	$C6
09061 1F93                        7C            .byte	$7C
09062 1F94                        00            .byte	0
09063 1F95                        00            .byte	0
09064 1F96                        00            .byte	0
09065                                           ! 1259  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76,
09066 1F97                        00            .byte	0
09067 1F98                        30            .byte	$30
09068 1F99                        78            .byte	$78
09069 1F9A                        CC            .byte	$CC
09070 1F9B                        00            .byte	0
09071 1F9C                        CC            .byte	$CC
09072 1F9D                        CC            .byte	$CC
09073 1F9E                        CC            .byte	$CC
09074 1F9F                        CC            .byte	$CC
09075 1FA0                        CC            .byte	$CC
09076                                           ! 1259  0x00, 0x00, 0x00,
09077 1FA1                        76            .byte	$76
09078 1FA2                        00            .byte	0
09079 1FA3                        00            .byte	0
09080 1FA4                        00            .byte	0
09081                                           ! 1260  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09082 1FA5                        00            .byte	0
09083 1FA6                        60            .byte	$60
09084 1FA7                        30            .byte	$30
09085 1FA8                        18            .byte	$18
09086 1FA9                        00            .byte	0
09087 1FAA                        CC            .byte	$CC
09088 1FAB                        CC            .byte	$CC
09089 1FAC                        CC            .byte	$CC
09090 1FAD                        CC            .byte	$CC
09091 1FAE                        CC            .byte	$CC
09092 1FAF                        76            .byte	$76
09093 1FB0                        00            .byte	0
09094 1FB1                        00            .byte	0
09095 1FB2                        00            .byte	0
09096                                           ! 1261  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09097 1FB3                        00            .byte	0
09098 1FB4                        00            .byte	0
09099 1FB5                        C6            .byte	$C6
09100 1FB6                        C6            .byte	$C6
09101 1FB7                        00            .byte	0
09102 1FB8                        C6            .byte	$C6
09103 1FB9                        C6            .byte	$C6
09104 1FBA                        C6            .byte	$C6
09105 1FBB                        C6            .byte	$C6
09106 1FBC                        7E            .byte	$7E
09107 1FBD                        06            .byte	6
09108 1FBE                        0C            .byte	$C
09109 1FBF                        78            .byte	$78
09110 1FC0                        00            .byte	0
09111                                           ! 1262  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09112 1FC1                        00            .byte	0
09113 1FC2                        C6            .byte	$C6
09114 1FC3                        C6            .byte	$C6
09115 1FC4                        38            .byte	$38
09116 1FC5                        6C            .byte	$6C
09117 1FC6                        C6            .byte	$C6
09118 1FC7                        C6            .byte	$C6
09119 1FC8                        C6            .byte	$C6
09120 1FC9                        C6            .byte	$C6
09121 1FCA                        6C            .byte	$6C
09122 1FCB                        38            .byte	$38
09123 1FCC                        00            .byte	0
09124 1FCD                        00            .byte	0
09125 1FCE                        00            .byte	0
09126                                           ! 1263  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09127 1FCF                        00            .byte	0
09128 1FD0                        C6            .byte	$C6
09129 1FD1                        C6            .byte	$C6
09130 1FD2                        00            .byte	0
09131 1FD3                        C6            .byte	$C6
09132 1FD4                        C6            .byte	$C6
09133 1FD5                        C6            .byte	$C6
09134 1FD6                        C6            .byte	$C6
09135 1FD7                        C6            .byte	$C6
09136 1FD8                        C6            .byte	$C6
09137 1FD9                        7C            .byte	$7C
09138 1FDA                        00            .byte	0
09139 1FDB                        00            .byte	0
09140 1FDC                        00            .byte	0
09141                                           ! 1264  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09142 1FDD                        00            .byte	0
09143 1FDE                        18            .byte	$18
09144 1FDF                        18            .byte	$18
09145 1FE0                        3C            .byte	$3C
09146 1FE1                        66            .byte	$66
09147 1FE2                        60            .byte	$60
09148 1FE3                        60            .byte	$60
09149 1FE4                        66            .byte	$66
09150 1FE5                        3C            .byte	$3C
09151 1FE6                        18            .byte	$18
09152 1FE7                        18            .byte	$18
09153 1FE8                        00            .byte	0
09154 1FE9                        00            .byte	0
09155 1FEA                        00            .byte	0
09156                                           ! 1265  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09157 1FEB                        00            .byte	0
09158 1FEC                        38            .byte	$38
09159 1FED                        6C            .byte	$6C
09160 1FEE                        64            .byte	$64
09161 1FEF                        60            .byte	$60
09162 1FF0                        F0            .byte	$F0
09163 1FF1                        60            .byte	$60
09164 1FF2                        60            .byte	$60
09165 1FF3                        60            .byte	$60
09166 1FF4                        E6            .byte	$E6
09167 1FF5                        FC            .byte	$FC
09168 1FF6                        00            .byte	0
09169 1FF7                        00            .byte	0
09170 1FF8                        00            .byte	0
09171                                           ! 1266  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09172 1FF9                        00            .byte	0
09173 1FFA                        00            .byte	0
09174 1FFB                        66            .byte	$66
09175 1FFC                        66            .byte	$66
09176 1FFD                        3C            .byte	$3C
09177 1FFE                        18            .byte	$18
09178 1FFF                        7E            .byte	$7E
09179 2000                        18            .byte	$18
09180 2001                        7E            .byte	$7E
09181 2002                        18            .byte	$18
09182 2003                        18            .byte	$18
09183 2004                        00            .byte	0
09184 2005                        00            .byte	0
09185 2006                        00            .byte	0
09186                                           ! 1267  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09187 2007                        00            .byte	0
09188 2008                        F8            .byte	$F8
09189 2009                        CC            .byte	$CC
09190 200A                        CC            .byte	$CC
09191 200B                        F8            .byte	$F8
09192 200C                        C4            .byte	$C4
09193 200D                        CC            .byte	$CC
09194 200E                        DE            .byte	$DE
09195 200F                        CC            .byte	$CC
09196 2010                        CC            .byte	$CC
09197 2011                        C6            .byte	$C6
09198 2012                        00            .byte	0
09199 2013                        00            .byte	0
09200 2014                        00            .byte	0
09201                                           ! 1268  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09202 2015                        00            .byte	0
09203 2016                        0E            .byte	$E
09204 2017                        1B            .byte	$1B
09205 2018                        18            .byte	$18
09206 2019                        18            .byte	$18
09207 201A                        18            .byte	$18
09208 201B                        7E            .byte	$7E
09209 201C                        18            .byte	$18
09210 201D                        18            .byte	$18
09211 201E                        18            .byte	$18
09212 201F                        18            .byte	$18
09213 2020                        D8            .byte	$D8
09214 2021                        70            .byte	$70
09215 2022                        00            .byte	0
09216                                           ! 1269  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09217 2023                        00            .byte	0
09218 2024                        18            .byte	$18
09219 2025                        30            .byte	$30
09220 2026                        60            .byte	$60
09221 2027                        00            .byte	0
09222 2028                        78            .byte	$78
09223 2029                        0C            .byte	$C
09224 202A                        7C            .byte	$7C
09225 202B                        CC            .byte	$CC
09226 202C                        CC            .byte	$CC
09227 202D                        76            .byte	$76
09228 202E                        00            .byte	0
09229 202F                        00            .byte	0
09230 2030                        00            .byte	0
09231                                           ! 1270  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09232 2031                        00            .byte	0
09233 2032                        0C            .byte	$C
09234 2033                        18            .byte	$18
09235 2034                        30            .byte	$30
09236 2035                        00            .byte	0
09237 2036                        38            .byte	$38
09238 2037                        18            .byte	$18
09239 2038                        18            .byte	$18
09240 2039                        18            .byte	$18
09241 203A                        18            .byte	$18
09242 203B                        3C            .byte	$3C
09243 203C                        00            .byte	0
09244 203D                        00            .byte	0
09245 203E                        00            .byte	0
09246                                           ! 1271  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09247 203F                        00            .byte	0
09248 2040                        18            .byte	$18
09249 2041                        30            .byte	$30
09250 2042                        60            .byte	$60
09251 2043                        00            .byte	0
09252 2044                        7C            .byte	$7C
09253 2045                        C6            .byte	$C6
09254 2046                        C6            .byte	$C6
09255 2047                        C6            .byte	$C6
09256 2048                        C6            .byte	$C6
09257 2049                        7C            .byte	$7C
09258 204A                        00            .byte	0
09259 204B                        00            .byte	0
09260 204C                        00            .byte	0
09261                                           ! 1272  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09262 204D                        00            .byte	0
09263 204E                        18            .byte	$18
09264 204F                        30            .byte	$30
09265 2050                        60            .byte	$60
09266 2051                        00            .byte	0
09267 2052                        CC            .byte	$CC
09268 2053                        CC            .byte	$CC
09269 2054                        CC            .byte	$CC
09270 2055                        CC            .byte	$CC
09271 2056                        CC            .byte	$CC
09272 2057                        76            .byte	$76
09273 2058                        00            .byte	0
09274 2059                        00            .byte	0
09275 205A                        00            .byte	0
09276                                           ! 1273  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09277 205B                        00            .byte	0
09278 205C                        00            .byte	0
09279 205D                        76            .byte	$76
09280 205E                        DC            .byte	$DC
09281 205F                        00            .byte	0
09282 2060                        DC            .byte	$DC
09283 2061                        66            .byte	$66
09284 2062                        66            .byte	$66
09285 2063                        66            .byte	$66
09286 2064                        66            .byte	$66
09287 2065                        66            .byte	$66
09288 2066                        00            .byte	0
09289 2067                        00            .byte	0
09290 2068                        00            .byte	0
09291                                           ! 1274  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09292 2069                        76            .byte	$76
09293 206A                        DC            .byte	$DC
09294 206B                        00            .byte	0
09295 206C                        C6            .byte	$C6
09296 206D                        E6            .byte	$E6
09297 206E                        F6            .byte	$F6
09298 206F                        FE            .byte	$FE
09299 2070                        DE            .byte	$DE
09300 2071                        CE            .byte	$CE
09301 2072                        C6            .byte	$C6
09302 2073                        C6            .byte	$C6
09303 2074                        00            .byte	0
09304 2075                        00            .byte	0
09305 2076                        00            .byte	0
09306                                           ! 1275  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09307 2077                        00            .byte	0
09308 2078                        3C            .byte	$3C
09309 2079                        6C            .byte	$6C
09310 207A                        6C            .byte	$6C
09311 207B                        3E            .byte	$3E
09312 207C                        00            .byte	0
09313 207D                        7E            .byte	$7E
09314 207E                        00            .byte	0
09315 207F                        00            .byte	0
09316 2080                        00            .byte	0
09317 2081                        00            .byte	0
09318 2082                        00            .byte	0
09319 2083                        00            .byte	0
09320 2084                        00            .byte	0
09321                                           ! 1276  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09322 2085                        00            .byte	0
09323 2086                        38            .byte	$38
09324 2087                        6C            .byte	$6C
09325 2088                        6C            .byte	$6C
09326 2089                        38            .byte	$38
09327 208A                        00            .byte	0
09328 208B                        7C            .byte	$7C
09329 208C                        00            .byte	0
09330 208D                        00            .byte	0
09331 208E                        00            .byte	0
09332 208F                        00            .byte	0
09333 2090                        00            .byte	0
09334 2091                        00            .byte	0
09335 2092                        00            .byte	0
09336                                           ! 1277  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09337 2093                        00            .byte	0
09338 2094                        00            .byte	0
09339 2095                        30            .byte	$30
09340 2096                        30            .byte	$30
09341 2097                        00            .byte	0
09342 2098                        30            .byte	$30
09343 2099                        30            .byte	$30
09344 209A                        60            .byte	$60
09345 209B                        C6            .byte	$C6
09346 209C                        C6            .byte	$C6
09347 209D                        7C            .byte	$7C
09348 209E                        00            .byte	0
09349 209F                        00            .byte	0
09350 20A0                        00            .byte	0
09351                                           ! 1278  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09352 20A1                        00            .byte	0
09353 20A2                        00            .byte	0
09354 20A3                        00            .byte	0
09355 20A4                        00            .byte	0
09356 20A5                        00            .byte	0
09357 20A6                        00            .byte	0
09358 20A7                        FE            .byte	$FE
09359 20A8                        C0            .byte	$C0
09360 20A9                        C0            .byte	$C0
09361 20AA                        C0            .byte	$C0
09362 20AB                        00            .byte	0
09363 20AC                        00            .byte	0
09364 20AD                        00            .byte	0
09365 20AE                        00            .byte	0
09366                                           ! 1279  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09367 20AF                        00            .byte	0
09368 20B0                        00            .byte	0
09369 20B1                        00            .byte	0
09370 20B2                        00            .byte	0
09371 20B3                        00            .byte	0
09372 20B4                        00            .byte	0
09373 20B5                        FE            .byte	$FE
09374 20B6                        06            .byte	6
09375 20B7                        06            .byte	6
09376 20B8                        06            .byte	6
09377 20B9                        00            .byte	0
09378 20BA                        00            .byte	0
09379 20BB                        00            .byte	0
09380 20BC                        00            .byte	0
09381                                           ! 1280  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09382 20BD                        00            .byte	0
09383 20BE                        C0            .byte	$C0
09384 20BF                        C0            .byte	$C0
09385 20C0                        C6            .byte	$C6
09386 20C1                        CC            .byte	$CC
09387 20C2                        D8            .byte	$D8
09388 20C3                        30            .byte	$30
09389 20C4                        60            .byte	$60
09390 20C5                        DC            .byte	$DC
09391 20C6                        86            .byte	$86
09392 20C7                        0C            .byte	$C
09393 20C8                        18            .byte	$18
09394 20C9                        3E            .byte	$3E
09395 20CA                        00            .byte	0
09396                                           ! 1281  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09397 20CB                        00            .byte	0
09398 20CC                        C0            .byte	$C0
09399 20CD                        C0            .byte	$C0
09400 20CE                        C6            .byte	$C6
09401 20CF                        CC            .byte	$CC
09402 20D0                        D8            .byte	$D8
09403 20D1                        30            .byte	$30
09404 20D2                        66            .byte	$66
09405 20D3                        CE            .byte	$CE
09406 20D4                        9E            .byte	$9E
09407 20D5                        3E            .byte	$3E
09408 20D6                        06            .byte	6
09409 20D7                        06            .byte	6
09410 20D8                        00            .byte	0
09411                                           ! 1282  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09412 20D9                        00            .byte	0
09413 20DA                        00            .byte	0
09414 20DB                        18            .byte	$18
09415 20DC                        18            .byte	$18
09416 20DD                        00            .byte	0
09417 20DE                        18            .byte	$18
09418 20DF                        18            .byte	$18
09419 20E0                        3C            .byte	$3C
09420 20E1                        3C            .byte	$3C
09421 20E2                        3C            .byte	$3C
09422 20E3                        18            .byte	$18
09423 20E4                        00            .byte	0
09424 20E5                        00            .byte	0
09425 20E6                        00            .byte	0
09426                                           ! 1283  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0
09427 20E7                        00            .byte	0
09428 20E8                        00            .byte	0
09429 20E9                        00            .byte	0
09430 20EA                        00            .byte	0
09431 20EB                        36            .byte	$36
09432 20EC                        6C            .byte	$6C
09433 20ED                        D8            .byte	$D8
09434 20EE                        6C            .byte	$6C
09435 20EF                        36            .byte	$36
09436 20F0                        00            .byte	0
09437 20F1                        00            .byte	0
09438 20F2                        00            .byte	0
09439                                           ! 1283 x00, 0x00,
09440 20F3                        00            .byte	0
09441 20F4                        00            .byte	0
09442                                           ! 1284  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09443 20F5                        00            .byte	0
09444 20F6                        00            .byte	0
09445 20F7                        00            .byte	0
09446 20F8                        00            .byte	0
09447 20F9                        D8            .byte	$D8
09448 20FA                        6C            .byte	$6C
09449 20FB                        36            .byte	$36
09450 20FC                        6C            .byte	$6C
09451 20FD                        D8            .byte	$D8
09452 20FE                        00            .byte	0
09453 20FF                        00            .byte	0
09454 2100                        00            .byte	0
09455 2101                        00            .byte	0
09456 2102                        00            .byte	0
09457                                           ! 1285  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09458 2103                        11            .byte	$11
09459 2104                        44            .byte	$44
09460 2105                        11            .byte	$11
09461 2106                        44            .byte	$44
09462 2107                        11            .byte	$11
09463 2108                        44            .byte	$44
09464 2109                        11            .byte	$11
09465 210A                        44            .byte	$44
09466 210B                        11            .byte	$11
09467 210C                        44            .byte	$44
09468 210D                        11            .byte	$11
09469 210E                        44            .byte	$44
09470 210F                        11            .byte	$11
09471 2110                        44            .byte	$44
09472                                           ! 1286  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09473 2111                        55            .byte	$55
09474 2112                        AA            .byte	$AA
09475 2113                        55            .byte	$55
09476 2114                        AA            .byte	$AA
09477 2115                        55            .byte	$55
09478 2116                        AA            .byte	$AA
09479 2117                        55            .byte	$55
09480 2118                        AA            .byte	$AA
09481 2119                        55            .byte	$55
09482 211A                        AA            .byte	$AA
09483 211B                        55            .byte	$55
09484 211C                        AA            .byte	$AA
09485 211D                        55            .byte	$55
09486 211E                        AA            .byte	$AA
09487                                           ! 1287  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09488 211F                        DD            .byte	$DD
09489 2120                        77            .byte	$77
09490 2121                        DD            .byte	$DD
09491 2122                        77            .byte	$77
09492 2123                        DD            .byte	$DD
09493 2124                        77            .byte	$77
09494 2125                        DD            .byte	$DD
09495 2126                        77            .byte	$77
09496 2127                        DD            .byte	$DD
09497 2128                        77            .byte	$77
09498 2129                        DD            .byte	$DD
09499 212A                        77            .byte	$77
09500 212B                        DD            .byte	$DD
09501 212C                        77            .byte	$77
09502                                           ! 1288  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09503 212D                        18            .byte	$18
09504 212E                        18            .byte	$18
09505 212F                        18            .byte	$18
09506 2130                        18            .byte	$18
09507 2131                        18            .byte	$18
09508 2132                        18            .byte	$18
09509 2133                        18            .byte	$18
09510 2134                        18            .byte	$18
09511 2135                        18            .byte	$18
09512 2136                        18            .byte	$18
09513 2137                        18            .byte	$18
09514 2138                        18            .byte	$18
09515 2139                        18            .byte	$18
09516 213A                        18            .byte	$18
09517                                           ! 1289  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09518 213B                        18            .byte	$18
09519 213C                        18            .byte	$18
09520 213D                        18            .byte	$18
09521 213E                        18            .byte	$18
09522 213F                        18            .byte	$18
09523 2140                        18            .byte	$18
09524 2141                        18            .byte	$18
09525 2142                        F8            .byte	$F8
09526 2143                        18            .byte	$18
09527 2144                        18            .byte	$18
09528 2145                        18            .byte	$18
09529 2146                        18            .byte	$18
09530 2147                        18            .byte	$18
09531 2148                        18            .byte	$18
09532                                           ! 1290  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09533 2149                        18            .byte	$18
09534 214A                        18            .byte	$18
09535 214B                        18            .byte	$18
09536 214C                        18            .byte	$18
09537 214D                        18            .byte	$18
09538 214E                        F8            .byte	$F8
09539 214F                        18            .byte	$18
09540 2150                        F8            .byte	$F8
09541 2151                        18            .byte	$18
09542 2152                        18            .byte	$18
09543 2153                        18            .byte	$18
09544 2154                        18            .byte	$18
09545 2155                        18            .byte	$18
09546 2156                        18            .byte	$18
09547                                           ! 1291  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09548 2157                        36            .byte	$36
09549 2158                        36            .byte	$36
09550 2159                        36            .byte	$36
09551 215A                        36            .byte	$36
09552 215B                        36            .byte	$36
09553 215C                        36            .byte	$36
09554 215D                        36            .byte	$36
09555 215E                        F6            .byte	$F6
09556 215F                        36            .byte	$36
09557 2160                        36            .byte	$36
09558 2161                        36            .byte	$36
09559 2162                        36            .byte	$36
09560 2163                        36            .byte	$36
09561 2164                        36            .byte	$36
09562                                           ! 1292  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09563 2165                        00            .byte	0
09564 2166                        00            .byte	0
09565 2167                        00            .byte	0
09566 2168                        00            .byte	0
09567 2169                        00            .byte	0
09568 216A                        00            .byte	0
09569 216B                        00            .byte	0
09570 216C                        FE            .byte	$FE
09571 216D                        36            .byte	$36
09572 216E                        36            .byte	$36
09573 216F                        36            .byte	$36
09574 2170                        36            .byte	$36
09575 2171                        36            .byte	$36
09576 2172                        36            .byte	$36
09577                                           ! 1293  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09578 2173                        00            .byte	0
09579 2174                        00            .byte	0
09580 2175                        00            .byte	0
09581 2176                        00            .byte	0
09582 2177                        00            .byte	0
09583 2178                        F8            .byte	$F8
09584 2179                        18            .byte	$18
09585 217A                        F8            .byte	$F8
09586 217B                        18            .byte	$18
09587 217C                        18            .byte	$18
09588 217D                        18            .byte	$18
09589 217E                        18            .byte	$18
09590 217F                        18            .byte	$18
09591 2180                        18            .byte	$18
09592                                           ! 1294  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09593 2181                        36            .byte	$36
09594 2182                        36            .byte	$36
09595 2183                        36            .byte	$36
09596 2184                        36            .byte	$36
09597 2185                        36            .byte	$36
09598 2186                        F6            .byte	$F6
09599 2187                        06            .byte	6
09600 2188                        F6            .byte	$F6
09601 2189                        36            .byte	$36
09602 218A                        36            .byte	$36
09603 218B                        36            .byte	$36
09604 218C                        36            .byte	$36
09605 218D                        36            .byte	$36
09606 218E                        36            .byte	$36
09607                                           ! 1295  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09608 218F                        36            .byte	$36
09609 2190                        36            .byte	$36
09610 2191                        36            .byte	$36
09611 2192                        36            .byte	$36
09612 2193                        36            .byte	$36
09613 2194                        36            .byte	$36
09614 2195                        36            .byte	$36
09615 2196                        36            .byte	$36
09616 2197                        36            .byte	$36
09617 2198                        36            .byte	$36
09618 2199                        36            .byte	$36
09619 219A                        36            .byte	$36
09620 219B                        36            .byte	$36
09621 219C                        36            .byte	$36
09622                                           ! 1296  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09623 219D                        00            .byte	0
09624 219E                        00            .byte	0
09625 219F                        00            .byte	0
09626 21A0                        00            .byte	0
09627 21A1                        00            .byte	0
09628 21A2                        FE            .byte	$FE
09629 21A3                        06            .byte	6
09630 21A4                        F6            .byte	$F6
09631 21A5                        36            .byte	$36
09632 21A6                        36            .byte	$36
09633 21A7                        36            .byte	$36
09634 21A8                        36            .byte	$36
09635 21A9                        36            .byte	$36
09636 21AA                        36            .byte	$36
09637                                           ! 1297  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09638 21AB                        36            .byte	$36
09639 21AC                        36            .byte	$36
09640 21AD                        36            .byte	$36
09641 21AE                        36            .byte	$36
09642 21AF                        36            .byte	$36
09643 21B0                        F6            .byte	$F6
09644 21B1                        06            .byte	6
09645 21B2                        FE            .byte	$FE
09646 21B3                        00            .byte	0
09647 21B4                        00            .byte	0
09648 21B5                        00            .byte	0
09649 21B6                        00            .byte	0
09650 21B7                        00            .byte	0
09651 21B8                        00            .byte	0
09652                                           ! 1298  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09653 21B9                        36            .byte	$36
09654 21BA                        36            .byte	$36
09655 21BB                        36            .byte	$36
09656 21BC                        36            .byte	$36
09657 21BD                        36            .byte	$36
09658 21BE                        36            .byte	$36
09659 21BF                        36            .byte	$36
09660 21C0                        FE            .byte	$FE
09661 21C1                        00            .byte	0
09662 21C2                        00            .byte	0
09663 21C3                        00            .byte	0
09664 21C4                        00            .byte	0
09665 21C5                        00            .byte	0
09666 21C6                        00            .byte	0
09667                                           ! 1299  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09668 21C7                        18            .byte	$18
09669 21C8                        18            .byte	$18
09670 21C9                        18            .byte	$18
09671 21CA                        18            .byte	$18
09672 21CB                        18            .byte	$18
09673 21CC                        F8            .byte	$F8
09674 21CD                        18            .byte	$18
09675 21CE                        F8            .byte	$F8
09676 21CF                        00            .byte	0
09677 21D0                        00            .byte	0
09678 21D1                        00            .byte	0
09679 21D2                        00            .byte	0
09680 21D3                        00            .byte	0
09681 21D4                        00            .byte	0
09682                                           ! 1300  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09683 21D5                        00            .byte	0
09684 21D6                        00            .byte	0
09685 21D7                        00            .byte	0
09686 21D8                        00            .byte	0
09687 21D9                        00            .byte	0
09688 21DA                        00            .byte	0
09689 21DB                        00            .byte	0
09690 21DC                        F8            .byte	$F8
09691 21DD                        18            .byte	$18
09692 21DE                        18            .byte	$18
09693 21DF                        18            .byte	$18
09694 21E0                        18            .byte	$18
09695 21E1                        18            .byte	$18
09696 21E2                        18            .byte	$18
09697                                           ! 1301  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09698 21E3                        18            .byte	$18
09699 21E4                        18            .byte	$18
09700 21E5                        18            .byte	$18
09701 21E6                        18            .byte	$18
09702 21E7                        18            .byte	$18
09703 21E8                        18            .byte	$18
09704 21E9                        18            .byte	$18
09705 21EA                        1F            .byte	$1F
09706 21EB                        00            .byte	0
09707 21EC                        00            .byte	0
09708 21ED                        00            .byte	0
09709 21EE                        00            .byte	0
09710 21EF                        00            .byte	0
09711 21F0                        00            .byte	0
09712                                           ! 1302  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09713 21F1                        18            .byte	$18
09714 21F2                        18            .byte	$18
09715 21F3                        18            .byte	$18
09716 21F4                        18            .byte	$18
09717 21F5                        18            .byte	$18
09718 21F6                        18            .byte	$18
09719 21F7                        18            .byte	$18
09720 21F8                        FF            .byte	$FF
09721 21F9                        00            .byte	0
09722 21FA                        00            .byte	0
09723 21FB                        00            .byte	0
09724 21FC                        00            .byte	0
09725 21FD                        00            .byte	0
09726 21FE                        00            .byte	0
09727                                           ! 1303  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09728 21FF                        00            .byte	0
09729 2200                        00            .byte	0
09730 2201                        00            .byte	0
09731 2202                        00            .byte	0
09732 2203                        00            .byte	0
09733 2204                        00            .byte	0
09734 2205                        00            .byte	0
09735 2206                        FF            .byte	$FF
09736 2207                        18            .byte	$18
09737 2208                        18            .byte	$18
09738 2209                        18            .byte	$18
09739 220A                        18            .byte	$18
09740 220B                        18            .byte	$18
09741 220C                        18            .byte	$18
09742                                           ! 1304  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09743 220D                        18            .byte	$18
09744 220E                        18            .byte	$18
09745 220F                        18            .byte	$18
09746 2210                        18            .byte	$18
09747 2211                        18            .byte	$18
09748 2212                        18            .byte	$18
09749 2213                        18            .byte	$18
09750 2214                        1F            .byte	$1F
09751 2215                        18            .byte	$18
09752 2216                        18            .byte	$18
09753 2217                        18            .byte	$18
09754 2218                        18            .byte	$18
09755 2219                        18            .byte	$18
09756 221A                        18            .byte	$18
09757                                           ! 1305  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09758 221B                        00            .byte	0
09759 221C                        00            .byte	0
09760 221D                        00            .byte	0
09761 221E                        00            .byte	0
09762 221F                        00            .byte	0
09763 2220                        00            .byte	0
09764 2221                        00            .byte	0
09765 2222                        FF            .byte	$FF
09766 2223                        00            .byte	0
09767 2224                        00            .byte	0
09768 2225                        00            .byte	0
09769 2226                        00            .byte	0
09770 2227                        00            .byte	0
09771 2228                        00            .byte	0
09772                                           ! 1306  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09773 2229                        18            .byte	$18
09774 222A                        18            .byte	$18
09775 222B                        18            .byte	$18
09776 222C                        18            .byte	$18
09777 222D                        18            .byte	$18
09778 222E                        18            .byte	$18
09779 222F                        18            .byte	$18
09780 2230                        FF            .byte	$FF
09781 2231                        18            .byte	$18
09782 2232                        18            .byte	$18
09783 2233                        18            .byte	$18
09784 2234                        18            .byte	$18
09785 2235                        18            .byte	$18
09786 2236                        18            .byte	$18
09787                                           ! 1307  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1
09788 2237                        18            .byte	$18
09789 2238                        18            .byte	$18
09790 2239                        18            .byte	$18
09791 223A                        18            .byte	$18
09792 223B                        18            .byte	$18
09793 223C                        1F            .byte	$1F
09794 223D                        18            .byte	$18
09795 223E                        1F            .byte	$1F
09796 223F                        18            .byte	$18
09797 2240                        18            .byte	$18
09798 2241                        18            .byte	$18
09799 2242                        18            .byte	$18
09800 2243                        18            .byte	$18
09801                                           ! 1307 8,
09802 2244                        18            .byte	$18
09803                                           ! 1308  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09804 2245                        36            .byte	$36
09805 2246                        36            .byte	$36
09806 2247                        36            .byte	$36
09807 2248                        36            .byte	$36
09808 2249                        36            .byte	$36
09809 224A                        36            .byte	$36
09810 224B                        36            .byte	$36
09811 224C                        37            .byte	$37
09812 224D                        36            .byte	$36
09813 224E                        36            .byte	$36
09814 224F                        36            .byte	$36
09815 2250                        36            .byte	$36
09816 2251                        36            .byte	$36
09817 2252                        36            .byte	$36
09818                                           ! 1309  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09819 2253                        36            .byte	$36
09820 2254                        36            .byte	$36
09821 2255                        36            .byte	$36
09822 2256                        36            .byte	$36
09823 2257                        36            .byte	$36
09824 2258                        37            .byte	$37
09825 2259                        30            .byte	$30
09826 225A                        3F            .byte	$3F
09827 225B                        00            .byte	0
09828 225C                        00            .byte	0
09829 225D                        00            .byte	0
09830 225E                        00            .byte	0
09831 225F                        00            .byte	0
09832 2260                        00            .byte	0
09833                                           ! 1310  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09834 2261                        00            .byte	0
09835 2262                        00            .byte	0
09836 2263                        00            .byte	0
09837 2264                        00            .byte	0
09838 2265                        00            .byte	0
09839 2266                        3F            .byte	$3F
09840 2267                        30            .byte	$30
09841 2268                        37            .byte	$37
09842 2269                        36            .byte	$36
09843 226A                        36            .byte	$36
09844 226B                        36            .byte	$36
09845 226C                        36            .byte	$36
09846 226D                        36            .byte	$36
09847 226E                        36            .byte	$36
09848                                           ! 1311  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09849 226F                        36            .byte	$36
09850 2270                        36            .byte	$36
09851 2271                        36            .byte	$36
09852 2272                        36            .byte	$36
09853 2273                        36            .byte	$36
09854 2274                        F7            .byte	$F7
09855 2275                        00            .byte	0
09856 2276                        FF            .byte	$FF
09857 2277                        00            .byte	0
09858 2278                        00            .byte	0
09859 2279                        00            .byte	0
09860 227A                        00            .byte	0
09861 227B                        00            .byte	0
09862 227C                        00            .byte	0
09863                                           ! 1312  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09864 227D                        00            .byte	0
09865 227E                        00            .byte	0
09866 227F                        00            .byte	0
09867 2280                        00            .byte	0
09868 2281                        00            .byte	0
09869 2282                        FF            .byte	$FF
09870 2283                        00            .byte	0
09871 2284                        F7            .byte	$F7
09872 2285                        36            .byte	$36
09873 2286                        36            .byte	$36
09874 2287                        36            .byte	$36
09875 2288                        36            .byte	$36
09876 2289                        36            .byte	$36
09877 228A                        36            .byte	$36
09878                                           ! 1313  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09879 228B                        36            .byte	$36
09880 228C                        36            .byte	$36
09881 228D                        36            .byte	$36
09882 228E                        36            .byte	$36
09883 228F                        36            .byte	$36
09884 2290                        37            .byte	$37
09885 2291                        30            .byte	$30
09886 2292                        37            .byte	$37
09887 2293                        36            .byte	$36
09888 2294                        36            .byte	$36
09889 2295                        36            .byte	$36
09890 2296                        36            .byte	$36
09891 2297                        36            .byte	$36
09892 2298                        36            .byte	$36
09893                                           ! 1314  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09894 2299                        00            .byte	0
09895 229A                        00            .byte	0
09896 229B                        00            .byte	0
09897 229C                        00            .byte	0
09898 229D                        00            .byte	0
09899 229E                        FF            .byte	$FF
09900 229F                        00            .byte	0
09901 22A0                        FF            .byte	$FF
09902 22A1                        00            .byte	0
09903 22A2                        00            .byte	0
09904 22A3                        00            .byte	0
09905 22A4                        00            .byte	0
09906 22A5                        00            .byte	0
09907 22A6                        00            .byte	0
09908                                           ! 1315  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09909 22A7                        36            .byte	$36
09910 22A8                        36            .byte	$36
09911 22A9                        36            .byte	$36
09912 22AA                        36            .byte	$36
09913 22AB                        36            .byte	$36
09914 22AC                        F7            .byte	$F7
09915 22AD                        00            .byte	0
09916 22AE                        F7            .byte	$F7
09917 22AF                        36            .byte	$36
09918 22B0                        36            .byte	$36
09919 22B1                        36            .byte	$36
09920 22B2                        36            .byte	$36
09921 22B3                        36            .byte	$36
09922 22B4                        36            .byte	$36
09923                                           ! 1316  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09924 22B5                        18            .byte	$18
09925 22B6                        18            .byte	$18
09926 22B7                        18            .byte	$18
09927 22B8                        18            .byte	$18
09928 22B9                        18            .byte	$18
09929 22BA                        FF            .byte	$FF
09930 22BB                        00            .byte	0
09931 22BC                        FF            .byte	$FF
09932 22BD                        00            .byte	0
09933 22BE                        00            .byte	0
09934 22BF                        00            .byte	0
09935 22C0                        00            .byte	0
09936 22C1                        00            .byte	0
09937 22C2                        00            .byte	0
09938                                           ! 1317  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09939 22C3                        36            .byte	$36
09940 22C4                        36            .byte	$36
09941 22C5                        36            .byte	$36
09942 22C6                        36            .byte	$36
09943 22C7                        36            .byte	$36
09944 22C8                        36            .byte	$36
09945 22C9                        36            .byte	$36
09946 22CA                        FF            .byte	$FF
09947 22CB                        00            .byte	0
09948 22CC                        00            .byte	0
09949 22CD                        00            .byte	0
09950 22CE                        00            .byte	0
09951 22CF                        00            .byte	0
09952 22D0                        00            .byte	0
09953                                           ! 1318  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09954 22D1                        00            .byte	0
09955 22D2                        00            .byte	0
09956 22D3                        00            .byte	0
09957 22D4                        00            .byte	0
09958 22D5                        00            .byte	0
09959 22D6                        FF            .byte	$FF
09960 22D7                        00            .byte	0
09961 22D8                        FF            .byte	$FF
09962 22D9                        18            .byte	$18
09963 22DA                        18            .byte	$18
09964 22DB                        18            .byte	$18
09965 22DC                        18            .byte	$18
09966 22DD                        18            .byte	$18
09967 22DE                        18            .byte	$18
09968                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09969 22DF                        00            .byte	0
09970 22E0                        00            .byte	0
09971 22E1                        00            .byte	0
09972 22E2                        00            .byte	0
09973 22E3                        00            .byte	0
09974 22E4                        00            .byte	0
09975 22E5                        00            .byte	0
09976 22E6                        FF            .byte	$FF
09977 22E7                        36            .byte	$36
09978 22E8                        36            .byte	$36
09979 22E9                        36            .byte	$36
09980 22EA                        36            .byte	$36
09981 22EB                        36            .byte	$36
09982 22EC                        36            .byte	$36
09983                                           ! 1320  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09984 22ED                        36            .byte	$36
09985 22EE                        36            .byte	$36
09986 22EF                        36            .byte	$36
09987 22F0                        36            .byte	$36
09988 22F1                        36            .byte	$36
09989 22F2                        36            .byte	$36
09990 22F3                        36            .byte	$36
09991 22F4                        3F            .byte	$3F
09992 22F5                        00            .byte	0
09993 22F6                        00            .byte	0
09994 22F7                        00            .byte	0
09995 22F8                        00            .byte	0
09996 22F9                        00            .byte	0
09997 22FA                        00            .byte	0
09998                                           ! 1321  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09999 22FB                        18            .byte	$18
10000 22FC                        18            .byte	$18
10001 22FD                        18            .byte	$18
10002 22FE                        18            .byte	$18
10003 22FF                        18            .byte	$18
10004 2300                        1F            .byte	$1F
10005 2301                        18            .byte	$18
10006 2302                        1F            .byte	$1F
10007 2303                        00            .byte	0
10008 2304                        00            .byte	0
10009 2305                        00            .byte	0
10010 2306                        00            .byte	0
10011 2307                        00            .byte	0
10012 2308                        00            .byte	0
10013                                           ! 1322  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10014 2309                        00            .byte	0
10015 230A                        00            .byte	0
10016 230B                        00            .byte	0
10017 230C                        00            .byte	0
10018 230D                        00            .byte	0
10019 230E                        1F            .byte	$1F
10020 230F                        18            .byte	$18
10021 2310                        1F            .byte	$1F
10022 2311                        18            .byte	$18
10023 2312                        18            .byte	$18
10024 2313                        18            .byte	$18
10025 2314                        18            .byte	$18
10026 2315                        18            .byte	$18
10027 2316                        18            .byte	$18
10028                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10029 2317                        00            .byte	0
10030 2318                        00            .byte	0
10031 2319                        00            .byte	0
10032 231A                        00            .byte	0
10033 231B                        00            .byte	0
10034 231C                        00            .byte	0
10035 231D                        00            .byte	0
10036 231E                        3F            .byte	$3F
10037 231F                        36            .byte	$36
10038 2320                        36            .byte	$36
10039 2321                        36            .byte	$36
10040 2322                        36            .byte	$36
10041 2323                        36            .byte	$36
10042 2324                        36            .byte	$36
10043                                           ! 1324  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10044 2325                        36            .byte	$36
10045 2326                        36            .byte	$36
10046 2327                        36            .byte	$36
10047 2328                        36            .byte	$36
10048 2329                        36            .byte	$36
10049 232A                        36            .byte	$36
10050 232B                        36            .byte	$36
10051 232C                        FF            .byte	$FF
10052 232D                        36            .byte	$36
10053 232E                        36            .byte	$36
10054 232F                        36            .byte	$36
10055 2330                        36            .byte	$36
10056 2331                        36            .byte	$36
10057 2332                        36            .byte	$36
10058                                           ! 1325  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10059 2333                        18            .byte	$18
10060 2334                        18            .byte	$18
10061 2335                        18            .byte	$18
10062 2336                        18            .byte	$18
10063 2337                        18            .byte	$18
10064 2338                        FF            .byte	$FF
10065 2339                        18            .byte	$18
10066 233A                        FF            .byte	$FF
10067 233B                        18            .byte	$18
10068 233C                        18            .byte	$18
10069 233D                        18            .byte	$18
10070 233E                        18            .byte	$18
10071 233F                        18            .byte	$18
10072 2340                        18            .byte	$18
10073                                           ! 1326  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10074 2341                        18            .byte	$18
10075 2342                        18            .byte	$18
10076 2343                        18            .byte	$18
10077 2344                        18            .byte	$18
10078 2345                        18            .byte	$18
10079 2346                        18            .byte	$18
10080 2347                        18            .byte	$18
10081 2348                        F8            .byte	$F8
10082 2349                        00            .byte	0
10083 234A                        00            .byte	0
10084 234B                        00            .byte	0
10085 234C                        00            .byte	0
10086 234D                        00            .byte	0
10087 234E                        00            .byte	0
10088                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10089 234F                        00            .byte	0
10090 2350                        00            .byte	0
10091 2351                        00            .byte	0
10092 2352                        00            .byte	0
10093 2353                        00            .byte	0
10094 2354                        00            .byte	0
10095 2355                        00            .byte	0
10096 2356                        1F            .byte	$1F
10097 2357                        18            .byte	$18
10098 2358                        18            .byte	$18
10099 2359                        18            .byte	$18
10100 235A                        18            .byte	$18
10101 235B                        18            .byte	$18
10102 235C                        18            .byte	$18
10103                                           ! 1328  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10104 235D                        FF            .byte	$FF
10105 235E                        FF            .byte	$FF
10106 235F                        FF            .byte	$FF
10107 2360                        FF            .byte	$FF
10108 2361                        FF            .byte	$FF
10109 2362                        FF            .byte	$FF
10110 2363                        FF            .byte	$FF
10111 2364                        FF            .byte	$FF
10112 2365                        FF            .byte	$FF
10113 2366                        FF            .byte	$FF
10114 2367                        FF            .byte	$FF
10115 2368                        FF            .byte	$FF
10116 2369                        FF            .byte	$FF
10117 236A                        FF            .byte	$FF
10118                                           ! 1329  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10119 236B                        00            .byte	0
10120 236C                        00            .byte	0
10121 236D                        00            .byte	0
10122 236E                        00            .byte	0
10123 236F                        00            .byte	0
10124 2370                        00            .byte	0
10125 2371                        00            .byte	0
10126 2372                        FF            .byte	$FF
10127 2373                        FF            .byte	$FF
10128 2374                        FF            .byte	$FF
10129 2375                        FF            .byte	$FF
10130 2376                        FF            .byte	$FF
10131 2377                        FF            .byte	$FF
10132 2378                        FF            .byte	$FF
10133                                           ! 1330  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10134 2379                        F0            .byte	$F0
10135 237A                        F0            .byte	$F0
10136 237B                        F0            .byte	$F0
10137 237C                        F0            .byte	$F0
10138 237D                        F0            .byte	$F0
10139 237E                        F0            .byte	$F0
10140 237F                        F0            .byte	$F0
10141 2380                        F0            .byte	$F0
10142 2381                        F0            .byte	$F0
10143 2382                        F0            .byte	$F0
10144 2383                        F0            .byte	$F0
10145 2384                        F0            .byte	$F0
10146 2385                        F0            .byte	$F0
10147 2386                        F0            .byte	$F0
10148                                           ! 1331  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10149 2387                        0F            .byte	$F
10150 2388                        0F            .byte	$F
10151 2389                        0F            .byte	$F
10152 238A                        0F            .byte	$F
10153 238B                        0F            .byte	$F
10154 238C                        0F            .byte	$F
10155 238D                        0F            .byte	$F
10156 238E                        0F            .byte	$F
10157 238F                        0F            .byte	$F
10158 2390                        0F            .byte	$F
10159 2391                        0F            .byte	$F
10160 2392                        0F            .byte	$F
10161 2393                        0F            .byte	$F
10162 2394                        0F            .byte	$F
10163                                           ! 1332  0xff
10164                                           ! 1332 , 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10165 2395                        FF            .byte	$FF
10166 2396                        FF            .byte	$FF
10167 2397                        FF            .byte	$FF
10168 2398                        FF            .byte	$FF
10169 2399                        FF            .byte	$FF
10170 239A                        FF            .byte	$FF
10171 239B                        FF            .byte	$FF
10172 239C                        00            .byte	0
10173 239D                        00            .byte	0
10174 239E                        00            .byte	0
10175 239F                        00            .byte	0
10176 23A0                        00            .byte	0
10177 23A1                        00            .byte	0
10178 23A2                        00            .byte	0
10179                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10180 23A3                        00            .byte	0
10181 23A4                        00            .byte	0
10182 23A5                        00            .byte	0
10183 23A6                        00            .byte	0
10184 23A7                        00            .byte	0
10185 23A8                        76            .byte	$76
10186 23A9                        DC            .byte	$DC
10187 23AA                        D8            .byte	$D8
10188 23AB                        D8            .byte	$D8
10189 23AC                        DC            .byte	$DC
10190 23AD                        76            .byte	$76
10191 23AE                        00            .byte	0
10192 23AF                        00            .byte	0
10193 23B0                        00            .byte	0
10194                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10195 23B1                        00            .byte	0
10196 23B2                        00            .byte	0
10197 23B3                        00            .byte	0
10198 23B4                        00            .byte	0
10199 23B5                        7C            .byte	$7C
10200 23B6                        C6            .byte	$C6
10201 23B7                        FC            .byte	$FC
10202 23B8                        C6            .byte	$C6
10203 23B9                        C6            .byte	$C6
10204 23BA                        FC            .byte	$FC
10205 23BB                        C0            .byte	$C0
10206 23BC                        C0            .byte	$C0
10207 23BD                        40            .byte	$40
10208 23BE                        00            .byte	0
10209                                           ! 1335  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10210 23BF                        00            .byte	0
10211 23C0                        00            .byte	0
10212 23C1                        FE            .byte	$FE
10213 23C2                        C6            .byte	$C6
10214 23C3                        C6            .byte	$C6
10215 23C4                        C0            .byte	$C0
10216 23C5                        C0            .byte	$C0
10217 23C6                        C0            .byte	$C0
10218 23C7                        C0            .byte	$C0
10219 23C8                        C0            .byte	$C0
10220 23C9                        C0            .byte	$C0
10221 23CA                        00            .byte	0
10222 23CB                        00            .byte	0
10223 23CC                        00            .byte	0
10224                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10225 23CD                        00            .byte	0
10226 23CE                        00            .byte	0
10227 23CF                        00            .byte	0
10228 23D0                        00            .byte	0
10229 23D1                        FE            .byte	$FE
10230 23D2                        6C            .byte	$6C
10231 23D3                        6C            .byte	$6C
10232 23D4                        6C            .byte	$6C
10233 23D5                        6C            .byte	$6C
10234 23D6                        6C            .byte	$6C
10235 23D7                        6C            .byte	$6C
10236 23D8                        00            .byte	0
10237 23D9                        00            .byte	0
10238 23DA                        00            .byte	0
10239                                           ! 1337  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10240 23DB                        00            .byte	0
10241 23DC                        00            .byte	0
10242 23DD                        FE            .byte	$FE
10243 23DE                        C6            .byte	$C6
10244 23DF                        60            .byte	$60
10245 23E0                        30            .byte	$30
10246 23E1                        18            .byte	$18
10247 23E2                        30            .byte	$30
10248 23E3                        60            .byte	$60
10249 23E4                        C6            .byte	$C6
10250 23E5                        FE            .byte	$FE
10251 23E6                        00            .byte	0
10252 23E7                        00            .byte	0
10253 23E8                        00            .byte	0
10254                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10255 23E9                        00            .byte	0
10256 23EA                        00            .byte	0
10257 23EB                        00            .byte	0
10258 23EC                        00            .byte	0
10259 23ED                        00            .byte	0
10260 23EE                        7E            .byte	$7E
10261 23EF                        D8            .byte	$D8
10262 23F0                        D8            .byte	$D8
10263 23F1                        D8            .byte	$D8
10264 23F2                        D8            .byte	$D8
10265 23F3                        70            .byte	$70
10266 23F4                        00            .byte	0
10267 23F5                        00            .byte	0
10268 23F6                        00            .byte	0
10269                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10270 23F7                        00            .byte	0
10271 23F8                        00            .byte	0
10272 23F9                        00            .byte	0
10273 23FA                        00            .byte	0
10274 23FB                        66            .byte	$66
10275 23FC                        66            .byte	$66
10276 23FD                        66            .byte	$66
10277 23FE                        66            .byte	$66
10278 23FF                        7C            .byte	$7C
10279 2400                        60            .byte	$60
10280 2401                        60            .byte	$60
10281 2402                        C0            .byte	$C0
10282 2403                        00            .byte	0
10283 2404                        00            .byte	0
10284                                           ! 1340  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10285 2405                        00            .byte	0
10286 2406                        00            .byte	0
10287 2407                        00            .byte	0
10288 2408                        00            .byte	0
10289 2409                        76            .byte	$76
10290 240A                        DC            .byte	$DC
10291 240B                        18            .byte	$18
10292 240C                        18            .byte	$18
10293 240D                        18            .byte	$18
10294 240E                        18            .byte	$18
10295 240F                        18            .byte	$18
10296 2410                        00            .byte	0
10297 2411                        00            .byte	0
10298 2412                        00            .byte	0
10299                                           ! 1341  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10300 2413                        00            .byte	0
10301 2414                        00            .byte	0
10302 2415                        7E            .byte	$7E
10303 2416                        18            .byte	$18
10304 2417                        3C            .byte	$3C
10305 2418                        66            .byte	$66
10306 2419                        66            .byte	$66
10307 241A                        66            .byte	$66
10308 241B                        3C            .byte	$3C
10309 241C                        18            .byte	$18
10310 241D                        7E            .byte	$7E
10311 241E                        00            .byte	0
10312 241F                        00            .byte	0
10313 2420                        00            .byte	0
10314                                           ! 1342  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10315 2421                        00            .byte	0
10316 2422                        00            .byte	0
10317 2423                        38            .byte	$38
10318 2424                        6C            .byte	$6C
10319 2425                        C6            .byte	$C6
10320 2426                        C6            .byte	$C6
10321 2427                        FE            .byte	$FE
10322 2428                        C6            .byte	$C6
10323 2429                        C6            .byte	$C6
10324 242A                        6C            .byte	$6C
10325 242B                        38            .byte	$38
10326 242C                        00            .byte	0
10327 242D                        00            .byte	0
10328 242E                        00            .byte	0
10329                                           ! 1343  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10330 242F                        00            .byte	0
10331 2430                        00            .byte	0
10332 2431                        38            .byte	$38
10333 2432                        6C            .byte	$6C
10334 2433                        C6            .byte	$C6
10335 2434                        C6            .byte	$C6
10336 2435                        C6            .byte	$C6
10337 2436                        6C            .byte	$6C
10338 2437                        6C            .byte	$6C
10339 2438                        6C            .byte	$6C
10340 2439                        EE            .byte	$EE
10341 243A                        00            .byte	0
10342 243B                        00            .byte	0
10343 243C                        00            .byte	0
10344                                           ! 1344  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10345 243D                        00            .byte	0
10346 243E                        00            .byte	0
10347 243F                        1E            .byte	$1E
10348 2440                        30            .byte	$30
10349 2441                        18            .byte	$18
10350 2442                        0C            .byte	$C
10351 2443                        3E            .byte	$3E
10352 2444                        66            .byte	$66
10353 2445                        66            .byte	$66
10354 2446                        66            .byte	$66
10355 2447                        3C            .byte	$3C
10356 2448                        00            .byte	0
10357 2449                        00            .byte	0
10358 244A                        00            .byte	0
10359                                           ! 1345  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10360 244B                        00            .byte	0
10361 244C                        00            .byte	0
10362 244D                        00            .byte	0
10363 244E                        00            .byte	0
10364 244F                        00            .byte	0
10365 2450                        7E            .byte	$7E
10366 2451                        DB            .byte	$DB
10367 2452                        DB            .byte	$DB
10368 2453                        7E            .byte	$7E
10369 2454                        00            .byte	0
10370 2455                        00            .byte	0
10371 2456                        00            .byte	0
10372 2457                        00            .byte	0
10373 2458                        00            .byte	0
10374                                           ! 1346  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10375 2459                        00            .byte	0
10376 245A                        00            .byte	0
10377 245B                        03            .byte	3
10378 245C                        06            .byte	6
10379 245D                        7E            .byte	$7E
10380 245E                        DB            .byte	$DB
10381 245F                        DB            .byte	$DB
10382 2460                        F3            .byte	$F3
10383 2461                        7E            .byte	$7E
10384 2462                        60            .byte	$60
10385 2463                        C0            .byte	$C0
10386 2464                        00            .byte	0
10387 2465                        00            .byte	0
10388 2466                        00            .byte	0
10389                                           ! 1347  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10390 2467                        00            .byte	0
10391 2468                        00            .byte	0
10392 2469                        1C            .byte	$1C
10393 246A                        30            .byte	$30
10394 246B                        60            .byte	$60
10395 246C                        60            .byte	$60
10396 246D                        7C            .byte	$7C
10397 246E                        60            .byte	$60
10398 246F                        60            .byte	$60
10399 2470                        30            .byte	$30
10400 2471                        1C            .byte	$1C
10401 2472                        00            .byte	0
10402 2473                        00            .byte	0
10403 2474                        00            .byte	0
10404                                           ! 1348  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10405 2475                        00            .byte	0
10406 2476                        00            .byte	0
10407 2477                        00            .byte	0
10408 2478                        7C            .byte	$7C
10409 2479                        C6            .byte	$C6
10410 247A                        C6            .byte	$C6
10411 247B                        C6            .byte	$C6
10412 247C                        C6            .byte	$C6
10413 247D                        C6            .byte	$C6
10414 247E                        C6            .byte	$C6
10415 247F                        C6            .byte	$C6
10416 2480                        00            .byte	0
10417 2481                        00            .byte	0
10418 2482                        00            .byte	0
10419                                           ! 1349  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10420 2483                        00            .byte	0
10421 2484                        00            .byte	0
10422 2485                        00            .byte	0
10423 2486                        FE            .byte	$FE
10424 2487                        00            .byte	0
10425 2488                        00            .byte	0
10426 2489                        FE            .byte	$FE
10427 248A                        00            .byte	0
10428 248B                        00            .byte	0
10429 248C                        FE            .byte	$FE
10430 248D                        00            .byte	0
10431 248E                        00            .byte	0
10432 248F                        00            .byte	0
10433 2490                        00            .byte	0
10434                                           ! 1350  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10435 2491                        00            .byte	0
10436 2492                        00            .byte	0
10437 2493                        00            .byte	0
10438 2494                        18            .byte	$18
10439 2495                        18            .byte	$18
10440 2496                        7E            .byte	$7E
10441 2497                        18            .byte	$18
10442 2498                        18            .byte	$18
10443 2499                        00            .byte	0
10444 249A                        00            .byte	0
10445 249B                        FF            .byte	$FF
10446 249C                        00            .byte	0
10447 249D                        00            .byte	0
10448 249E                        00            .byte	0
10449                                           ! 1351  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10450 249F                        00            .byte	0
10451 24A0                        00            .byte	0
10452 24A1                        30            .byte	$30
10453 24A2                        18            .byte	$18
10454 24A3                        0C            .byte	$C
10455 24A4                        06            .byte	6
10456 24A5                        0C            .byte	$C
10457 24A6                        18            .byte	$18
10458 24A7                        30            .byte	$30
10459 24A8                        00            .byte	0
10460 24A9                        7E            .byte	$7E
10461 24AA                        00            .byte	0
10462 24AB                        00            .byte	0
10463 24AC                        00            .byte	0
10464                                           ! 1352  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10465 24AD                        00            .byte	0
10466 24AE                        00            .byte	0
10467 24AF                        0C            .byte	$C
10468 24B0                        18            .byte	$18
10469 24B1                        30            .byte	$30
10470 24B2                        60            .byte	$60
10471 24B3                        30            .byte	$30
10472 24B4                        18            .byte	$18
10473 24B5                        0C            .byte	$C
10474 24B6                        00            .byte	0
10475 24B7                        7E            .byte	$7E
10476 24B8                        00            .byte	0
10477 24B9                        00            .byte	0
10478 24BA                        00            .byte	0
10479                                           ! 1353  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10480 24BB                        00            .byte	0
10481 24BC                        00            .byte	0
10482 24BD                        0E            .byte	$E
10483 24BE                        1B            .byte	$1B
10484 24BF                        1B            .byte	$1B
10485 24C0                        18            .byte	$18
10486 24C1                        18            .byte	$18
10487 24C2                        18            .byte	$18
10488 24C3                        18            .byte	$18
10489 24C4                        18            .byte	$18
10490 24C5                        18            .byte	$18
10491 24C6                        18            .byte	$18
10492 24C7                        18            .byte	$18
10493 24C8                        18            .byte	$18
10494                                           ! 1354  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10495 24C9                        18            .byte	$18
10496 24CA                        18            .byte	$18
10497 24CB                        18            .byte	$18
10498 24CC                        18            .byte	$18
10499 24CD                        18            .byte	$18
10500 24CE                        18            .byte	$18
10501 24CF                        18            .byte	$18
10502 24D0                        18            .byte	$18
10503 24D1                        D8            .byte	$D8
10504 24D2                        D8            .byte	$D8
10505 24D3                        70            .byte	$70
10506 24D4                        00            .byte	0
10507 24D5                        00            .byte	0
10508 24D6                        00            .byte	0
10509                                           ! 1355  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10510 24D7                        00            .byte	0
10511 24D8                        00            .byte	0
10512 24D9                        00            .byte	0
10513 24DA                        18            .byte	$18
10514 24DB                        18            .byte	$18
10515 24DC                        00            .byte	0
10516 24DD                        7E            .byte	$7E
10517 24DE                        00            .byte	0
10518 24DF                        18            .byte	$18
10519 24E0                        18            .byte	$18
10520 24E1                        00            .byte	0
10521 24E2                        00            .byte	0
10522 24E3                        00            .byte	0
10523 24E4                        00            .byte	0
10524                                           ! 1356  0x00, 0x00, 
10525 24E5                        00            .byte	0
10526 24E6                        00            .byte	0
10527                                           ! 1356 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10528 24E7                        00            .byte	0
10529 24E8                        00            .byte	0
10530 24E9                        76            .byte	$76
10531 24EA                        DC            .byte	$DC
10532 24EB                        00            .byte	0
10533 24EC                        76            .byte	$76
10534 24ED                        DC            .byte	$DC
10535 24EE                        00            .byte	0
10536 24EF                        00            .byte	0
10537 24F0                        00            .byte	0
10538 24F1                        00            .byte	0
10539 24F2                        00            .byte	0
10540                                           ! 1357  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10541 24F3                        00            .byte	0
10542 24F4                        38            .byte	$38
10543 24F5                        6C            .byte	$6C
10544 24F6                        6C            .byte	$6C
10545 24F7                        38            .byte	$38
10546 24F8                        00            .byte	0
10547 24F9                        00            .byte	0
10548 24FA                        00            .byte	0
10549 24FB                        00            .byte	0
10550 24FC                        00            .byte	0
10551 24FD                        00            .byte	0
10552 24FE                        00            .byte	0
10553 24FF                        00            .byte	0
10554 2500                        00            .byte	0
10555                                           ! 1358  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10556 2501                        00            .byte	0
10557 2502                        00            .byte	0
10558 2503                        00            .byte	0
10559 2504                        00            .byte	0
10560 2505                        00            .byte	0
10561 2506                        00            .byte	0
10562 2507                        18            .byte	$18
10563 2508                        18            .byte	$18
10564 2509                        00            .byte	0
10565 250A                        00            .byte	0
10566 250B                        00            .byte	0
10567 250C                        00            .byte	0
10568 250D                        00            .byte	0
10569 250E                        00            .byte	0
10570                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10571 250F                        00            .byte	0
10572 2510                        00            .byte	0
10573 2511                        00            .byte	0
10574 2512                        00            .byte	0
10575 2513                        00            .byte	0
10576 2514                        00            .byte	0
10577 2515                        00            .byte	0
10578 2516                        18            .byte	$18
10579 2517                        00            .byte	0
10580 2518                        00            .byte	0
10581 2519                        00            .byte	0
10582 251A                        00            .byte	0
10583 251B                        00            .byte	0
10584 251C                        00            .byte	0
10585                                           ! 1360  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10586 251D                        00            .byte	0
10587 251E                        0F            .byte	$F
10588 251F                        0C            .byte	$C
10589 2520                        0C            .byte	$C
10590 2521                        0C            .byte	$C
10591 2522                        0C            .byte	$C
10592 2523                        0C            .byte	$C
10593 2524                        EC            .byte	$EC
10594 2525                        6C            .byte	$6C
10595 2526                        3C            .byte	$3C
10596 2527                        1C            .byte	$1C
10597 2528                        00            .byte	0
10598 2529                        00            .byte	0
10599 252A                        00            .byte	0
10600                                           ! 1361  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10601 252B                        00            .byte	0
10602 252C                        D8            .byte	$D8
10603 252D                        6C            .byte	$6C
10604 252E                        6C            .byte	$6C
10605 252F                        6C            .byte	$6C
10606 2530                        6C            .byte	$6C
10607 2531                        6C            .byte	$6C
10608 2532                        00            .byte	0
10609 2533                        00            .byte	0
10610 2534                        00            .byte	0
10611 2535                        00            .byte	0
10612 2536                        00            .byte	0
10613 2537                        00            .byte	0
10614 2538                        00            .byte	0
10615                                           ! 1362  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10616 2539                        00            .byte	0
10617 253A                        70            .byte	$70
10618 253B                        D8            .byte	$D8
10619 253C                        30            .byte	$30
10620 253D                        60            .byte	$60
10621 253E                        C8            .byte	$C8
10622 253F                        F8            .byte	$F8
10623 2540                        00            .byte	0
10624 2541                        00            .byte	0
10625 2542                        00            .byte	0
10626 2543                        00            .byte	0
10627 2544                        00            .byte	0
10628 2545                        00            .byte	0
10629 2546                        00            .byte	0
10630                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10631 2547                        00            .byte	0
10632 2548                        00            .byte	0
10633 2549                        00            .byte	0
10634 254A                        00            .byte	0
10635 254B                        7C            .byte	$7C
10636 254C                        7C            .byte	$7C
10637 254D                        7C            .byte	$7C
10638 254E                        7C            .byte	$7C
10639 254F                        7C            .byte	$7C
10640 2550                        7C            .byte	$7C
10641 2551                        00            .byte	0
10642 2552                        00            .byte	0
10643 2553                        00            .byte	0
10644 2554                        00            .byte	0
10645                                           ! 1364  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10646 2555                        00            .byte	0
10647 2556                        00            .byte	0
10648 2557                        00            .byte	0
10649 2558                        00            .byte	0
10650 2559                        00            .byte	0
10651 255A                        00            .byte	0
10652 255B                        00            .byte	0
10653 255C                        00            .byte	0
10654 255D                        00            .byte	0
10655 255E                        00            .byte	0
10656 255F                        00            .byte	0
10657 2560                        00            .byte	0
10658 2561                        00            .byte	0
10659                                           ! 1365 };
10660 2562                        00            .byte	0
10661                                           !BCC_EOS
10662                                           ! 1366 static Bit8u vgafont16[256*16]=
10663                                           ! 1367 {
10664                       00002563            _vgafont16:
10665                                           ! 1368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10666 2563                        00            .byte	0
10667 2564                        00            .byte	0
10668 2565                        00            .byte	0
10669 2566                        00            .byte	0
10670 2567                        00            .byte	0
10671 2568                        00            .byte	0
10672 2569                        00            .byte	0
10673 256A                        00            .byte	0
10674 256B                        00            .byte	0
10675 256C                        00            .byte	0
10676 256D                        00            .byte	0
10677 256E                        00            .byte	0
10678 256F                        00            .byte	0
10679 2570                        00            .byte	0
10680 2571                        00            .byte	0
10681 2572                        00            .byte	0
10682                                           ! 1369  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10683 2573                        00            .byte	0
10684 2574                        00            .byte	0
10685 2575                        7E            .byte	$7E
10686 2576                        81            .byte	$81
10687 2577                        A5            .byte	$A5
10688 2578                        81            .byte	$81
10689 2579                        81            .byte	$81
10690 257A                        BD            .byte	$BD
10691 257B                        99            .byte	$99
10692 257C                        81            .byte	$81
10693 257D                        81            .byte	$81
10694 257E                        7E            .byte	$7E
10695 257F                        00            .byte	0
10696 2580                        00            .byte	0
10697 2581                        00            .byte	0
10698 2582                        00            .byte	0
10699                                           ! 1370  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10700 2583                        00            .byte	0
10701 2584                        00            .byte	0
10702 2585                        7E            .byte	$7E
10703 2586                        FF            .byte	$FF
10704 2587                        DB            .byte	$DB
10705 2588                        FF            .byte	$FF
10706 2589                        FF            .byte	$FF
10707 258A                        C3            .byte	$C3
10708 258B                        E7            .byte	$E7
10709 258C                        FF            .byte	$FF
10710 258D                        FF            .byte	$FF
10711 258E                        7E            .byte	$7E
10712 258F                        00            .byte	0
10713 2590                        00            .byte	0
10714 2591                        00            .byte	0
10715 2592                        00            .byte	0
10716                                           ! 1371  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10717 2593                        00            .byte	0
10718 2594                        00            .byte	0
10719 2595                        00            .byte	0
10720 2596                        00            .byte	0
10721 2597                        6C            .byte	$6C
10722 2598                        FE            .byte	$FE
10723 2599                        FE            .byte	$FE
10724 259A                        FE            .byte	$FE
10725 259B                        FE            .byte	$FE
10726 259C                        7C            .byte	$7C
10727 259D                        38            .byte	$38
10728 259E                        10            .byte	$10
10729 259F                        00            .byte	0
10730 25A0                        00            .byte	0
10731 25A1                        00            .byte	0
10732 25A2                        00            .byte	0
10733                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10734 25A3                        00            .byte	0
10735 25A4                        00            .byte	0
10736 25A5                        00            .byte	0
10737 25A6                        00            .byte	0
10738 25A7                        10            .byte	$10
10739 25A8                        38            .byte	$38
10740 25A9                        7C            .byte	$7C
10741 25AA                        FE            .byte	$FE
10742 25AB                        7C            .byte	$7C
10743 25AC                        38            .byte	$38
10744 25AD                        10            .byte	$10
10745 25AE                        00            .byte	0
10746 25AF                        00            .byte	0
10747 25B0                        00            .byte	0
10748 25B1                        00            .byte	0
10749 25B2                        00            .byte	0
10750                                           ! 1373  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10751 25B3                        00            .byte	0
10752 25B4                        00            .byte	0
10753 25B5                        00            .byte	0
10754 25B6                        18            .byte	$18
10755 25B7                        3C            .byte	$3C
10756 25B8                        3C            .byte	$3C
10757 25B9                        E7            .byte	$E7
10758 25BA                        E7            .byte	$E7
10759 25BB                        E7            .byte	$E7
10760 25BC                        18            .byte	$18
10761 25BD                        18            .byte	$18
10762 25BE                        3C            .byte	$3C
10763 25BF                        00            .byte	0
10764 25C0                        00            .byte	0
10765 25C1                        00            .byte	0
10766 25C2                        00            .byte	0
10767                                           ! 1374  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10768 25C3                        00            .byte	0
10769 25C4                        00            .byte	0
10770 25C5                        00            .byte	0
10771 25C6                        18            .byte	$18
10772 25C7                        3C            .byte	$3C
10773 25C8                        7E            .byte	$7E
10774 25C9                        FF            .byte	$FF
10775 25CA                        FF            .byte	$FF
10776 25CB                        7E            .byte	$7E
10777 25CC                        18            .byte	$18
10778 25CD                        18            .byte	$18
10779 25CE                        3C            .byte	$3C
10780 25CF                        00            .byte	0
10781 25D0                        00            .byte	0
10782 25D1                        00            .byte	0
10783 25D2                        00            .byte	0
10784                                           ! 1375  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10785 25D3                        00            .byte	0
10786 25D4                        00            .byte	0
10787 25D5                        00            .byte	0
10788 25D6                        00            .byte	0
10789 25D7                        00            .byte	0
10790 25D8                        00            .byte	0
10791 25D9                        18            .byte	$18
10792 25DA                        3C            .byte	$3C
10793 25DB                        3C            .byte	$3C
10794 25DC                        18            .byte	$18
10795 25DD                        00            .byte	0
10796 25DE                        00            .byte	0
10797 25DF                        00            .byte	0
10798 25E0                        00            .byte	0
10799 25E1                        00            .byte	0
10800 25E2                        00            .byte	0
10801                                           ! 1376  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10802 25E3                        FF            .byte	$FF
10803 25E4                        FF            .byte	$FF
10804 25E5                        FF            .byte	$FF
10805 25E6                        FF            .byte	$FF
10806 25E7                        FF            .byte	$FF
10807 25E8                        FF            .byte	$FF
10808 25E9                        E7            .byte	$E7
10809 25EA                        C3            .byte	$C3
10810 25EB                        C3            .byte	$C3
10811 25EC                        E7            .byte	$E7
10812 25ED                        FF            .byte	$FF
10813 25EE                        FF            .byte	$FF
10814 25EF                        FF            .byte	$FF
10815 25F0                        FF            .byte	$FF
10816 25F1                        FF            .byte	$FF
10817 25F2                        FF            .byte	$FF
10818                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10819 25F3                        00            .byte	0
10820 25F4                        00            .byte	0
10821 25F5                        00            .byte	0
10822 25F6                        00            .byte	0
10823 25F7                        00            .byte	0
10824 25F8                        3C            .byte	$3C
10825 25F9                        66            .byte	$66
10826 25FA                        42            .byte	$42
10827 25FB                        42            .byte	$42
10828 25FC                        66            .byte	$66
10829 25FD                        3C            .byte	$3C
10830 25FE                        00            .byte	0
10831 25FF                        00            .byte	0
10832 2600                        00            .byte	0
10833 2601                        00            .byte	0
10834 2602                        00            .byte	0
10835                                           ! 1378  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10836 2603                        FF            .byte	$FF
10837 2604                        FF            .byte	$FF
10838 2605                        FF            .byte	$FF
10839 2606                        FF            .byte	$FF
10840 2607                        FF            .byte	$FF
10841 2608                        C3            .byte	$C3
10842 2609                        99            .byte	$99
10843 260A                        BD            .byte	$BD
10844 260B                        BD            .byte	$BD
10845 260C                        99            .byte	$99
10846 260D                        C3            .byte	$C3
10847 260E                        FF            .byte	$FF
10848 260F                        FF            .byte	$FF
10849 2610                        FF            .byte	$FF
10850 2611                        FF            .byte	$FF
10851 2612                        FF            .byte	$FF
10852                                           ! 1379  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10853 2613                        00            .byte	0
10854 2614                        00            .byte	0
10855 2615                        1E            .byte	$1E
10856 2616                        0E            .byte	$E
10857 2617                        1A            .byte	$1A
10858 2618                        32            .byte	$32
10859 2619                        78            .byte	$78
10860 261A                        CC            .byte	$CC
10861 261B                        CC            .byte	$CC
10862 261C                        CC            .byte	$CC
10863 261D                        CC            .byte	$CC
10864 261E                        78            .byte	$78
10865 261F                        00            .byte	0
10866 2620                        00            .byte	0
10867 2621                        00            .byte	0
10868 2622                        00            .byte	0
10869                                           ! 1380  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10870 2623                        00            .byte	0
10871 2624                        00            .byte	0
10872 2625                        3C            .byte	$3C
10873 2626                        66            .byte	$66
10874 2627                        66            .byte	$66
10875 2628                        66            .byte	$66
10876 2629                        66            .byte	$66
10877 262A                        3C            .byte	$3C
10878 262B                        18            .byte	$18
10879 262C                        7E            .byte	$7E
10880 262D                        18            .byte	$18
10881 262E                        18            .byte	$18
10882 262F                        00            .byte	0
10883 2630                        00            .byte	0
10884 2631                        00            .byte	0
10885                                           ! 1380 
10886 2632                        00            .byte	0
10887                                           ! 1381  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10888 2633                        00            .byte	0
10889 2634                        00            .byte	0
10890 2635                        3F            .byte	$3F
10891 2636                        33            .byte	$33
10892 2637                        3F            .byte	$3F
10893 2638                        30            .byte	$30
10894 2639                        30            .byte	$30
10895 263A                        30            .byte	$30
10896 263B                        30            .byte	$30
10897 263C                        70            .byte	$70
10898 263D                        F0            .byte	$F0
10899 263E                        E0            .byte	$E0
10900 263F                        00            .byte	0
10901 2640                        00            .byte	0
10902 2641                        00            .byte	0
10903 2642                        00            .byte	0
10904                                           ! 1382  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10905 2643                        00            .byte	0
10906 2644                        00            .byte	0
10907 2645                        7F            .byte	$7F
10908 2646                        63            .byte	$63
10909 2647                        7F            .byte	$7F
10910 2648                        63            .byte	$63
10911 2649                        63            .byte	$63
10912 264A                        63            .byte	$63
10913 264B                        63            .byte	$63
10914 264C                        67            .byte	$67
10915 264D                        E7            .byte	$E7
10916 264E                        E6            .byte	$E6
10917 264F                        C0            .byte	$C0
10918 2650                        00            .byte	0
10919 2651                        00            .byte	0
10920 2652                        00            .byte	0
10921                                           ! 1383  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10922 2653                        00            .byte	0
10923 2654                        00            .byte	0
10924 2655                        00            .byte	0
10925 2656                        18            .byte	$18
10926 2657                        18            .byte	$18
10927 2658                        DB            .byte	$DB
10928 2659                        3C            .byte	$3C
10929 265A                        E7            .byte	$E7
10930 265B                        3C            .byte	$3C
10931 265C                        DB            .byte	$DB
10932 265D                        18            .byte	$18
10933 265E                        18            .byte	$18
10934 265F                        00            .byte	0
10935 2660                        00            .byte	0
10936 2661                        00            .byte	0
10937 2662                        00            .byte	0
10938                                           ! 1384  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10939 2663                        00            .byte	0
10940 2664                        80            .byte	$80
10941 2665                        C0            .byte	$C0
10942 2666                        E0            .byte	$E0
10943 2667                        F0            .byte	$F0
10944 2668                        F8            .byte	$F8
10945 2669                        FE            .byte	$FE
10946 266A                        F8            .byte	$F8
10947 266B                        F0            .byte	$F0
10948 266C                        E0            .byte	$E0
10949 266D                        C0            .byte	$C0
10950 266E                        80            .byte	$80
10951 266F                        00            .byte	0
10952 2670                        00            .byte	0
10953 2671                        00            .byte	0
10954 2672                        00            .byte	0
10955                                           ! 1385  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10956 2673                        00            .byte	0
10957 2674                        02            .byte	2
10958 2675                        06            .byte	6
10959 2676                        0E            .byte	$E
10960 2677                        1E            .byte	$1E
10961 2678                        3E            .byte	$3E
10962 2679                        FE            .byte	$FE
10963 267A                        3E            .byte	$3E
10964 267B                        1E            .byte	$1E
10965 267C                        0E            .byte	$E
10966 267D                        06            .byte	6
10967 267E                        02            .byte	2
10968 267F                        00            .byte	0
10969 2680                        00            .byte	0
10970 2681                        00            .byte	0
10971 2682                        00            .byte	0
10972                                           ! 1386  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10973 2683                        00            .byte	0
10974 2684                        00            .byte	0
10975 2685                        18            .byte	$18
10976 2686                        3C            .byte	$3C
10977 2687                        7E            .byte	$7E
10978 2688                        18            .byte	$18
10979 2689                        18            .byte	$18
10980 268A                        18            .byte	$18
10981 268B                        7E            .byte	$7E
10982 268C                        3C            .byte	$3C
10983 268D                        18            .byte	$18
10984 268E                        00            .byte	0
10985 268F                        00            .byte	0
10986 2690                        00            .byte	0
10987 2691                        00            .byte	0
10988 2692                        00            .byte	0
10989                                           ! 1387  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10990 2693                        00            .byte	0
10991 2694                        00            .byte	0
10992 2695                        66            .byte	$66
10993 2696                        66            .byte	$66
10994 2697                        66            .byte	$66
10995 2698                        66            .byte	$66
10996 2699                        66            .byte	$66
10997 269A                        66            .byte	$66
10998 269B                        66            .byte	$66
10999 269C                        00            .byte	0
11000 269D                        66            .byte	$66
11001 269E                        66            .byte	$66
11002 269F                        00            .byte	0
11003 26A0                        00            .byte	0
11004 26A1                        00            .byte	0
11005 26A2                        00            .byte	0
11006                                           ! 1388  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11007 26A3                        00            .byte	0
11008 26A4                        00            .byte	0
11009 26A5                        7F            .byte	$7F
11010 26A6                        DB            .byte	$DB
11011 26A7                        DB            .byte	$DB
11012 26A8                        DB            .byte	$DB
11013 26A9                        7B            .byte	$7B
11014 26AA                        1B            .byte	$1B
11015 26AB                        1B            .byte	$1B
11016 26AC                        1B            .byte	$1B
11017 26AD                        1B            .byte	$1B
11018 26AE                        1B            .byte	$1B
11019 26AF                        00            .byte	0
11020 26B0                        00            .byte	0
11021 26B1                        00            .byte	0
11022 26B2                        00            .byte	0
11023                                           ! 1389  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11024 26B3                        00            .byte	0
11025 26B4                        7C            .byte	$7C
11026 26B5                        C6            .byte	$C6
11027 26B6                        60            .byte	$60
11028 26B7                        38            .byte	$38
11029 26B8                        6C            .byte	$6C
11030 26B9                        C6            .byte	$C6
11031 26BA                        C6            .byte	$C6
11032 26BB                        6C            .byte	$6C
11033 26BC                        38            .byte	$38
11034 26BD                        0C            .byte	$C
11035 26BE                        C6            .byte	$C6
11036 26BF                        7C            .byte	$7C
11037 26C0                        00            .byte	0
11038 26C1                        00            .byte	0
11039 26C2                        00            .byte	0
11040                                           ! 1390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11041 26C3                        00            .byte	0
11042 26C4                        00            .byte	0
11043 26C5                        00            .byte	0
11044 26C6                        00            .byte	0
11045 26C7                        00            .byte	0
11046 26C8                        00            .byte	0
11047 26C9                        00            .byte	0
11048 26CA                        00            .byte	0
11049 26CB                        FE            .byte	$FE
11050 26CC                        FE            .byte	$FE
11051 26CD                        FE            .byte	$FE
11052 26CE                        FE            .byte	$FE
11053 26CF                        00            .byte	0
11054 26D0                        00            .byte	0
11055 26D1                        00            .byte	0
11056 26D2                        00            .byte	0
11057                                           ! 1391  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11058 26D3                        00            .byte	0
11059 26D4                        00            .byte	0
11060 26D5                        18            .byte	$18
11061 26D6                        3C            .byte	$3C
11062 26D7                        7E            .byte	$7E
11063 26D8                        18            .byte	$18
11064 26D9                        18            .byte	$18
11065 26DA                        18            .byte	$18
11066 26DB                        7E            .byte	$7E
11067 26DC                        3C            .byte	$3C
11068 26DD                        18            .byte	$18
11069 26DE                        7E            .byte	$7E
11070 26DF                        00            .byte	0
11071 26E0                        00            .byte	0
11072 26E1                        00            .byte	0
11073 26E2                        00            .byte	0
11074                                           ! 1392  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11075 26E3                        00            .byte	0
11076 26E4                        00            .byte	0
11077 26E5                        18            .byte	$18
11078 26E6                        3C            .byte	$3C
11079 26E7                        7E            .byte	$7E
11080 26E8                        18            .byte	$18
11081 26E9                        18            .byte	$18
11082 26EA                        18            .byte	$18
11083 26EB                        18            .byte	$18
11084 26EC                        18            .byte	$18
11085 26ED                        18            .byte	$18
11086 26EE                        18            .byte	$18
11087 26EF                        00            .byte	0
11088 26F0                        00            .byte	0
11089 26F1                        00            .byte	0
11090 26F2                        00            .byte	0
11091                                           ! 1393  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11092 26F3                        00            .byte	0
11093 26F4                        00            .byte	0
11094 26F5                        18            .byte	$18
11095 26F6                        18            .byte	$18
11096 26F7                        18            .byte	$18
11097 26F8                        18            .byte	$18
11098 26F9                        18            .byte	$18
11099 26FA                        18            .byte	$18
11100 26FB                        18            .byte	$18
11101 26FC                        7E            .byte	$7E
11102 26FD                        3C            .byte	$3C
11103 26FE                        18            .byte	$18
11104 26FF                        00            .byte	0
11105 2700                        00            .byte	0
11106 2701                        00            .byte	0
11107 2702                        00            .byte	0
11108                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11109 2703                        00            .byte	0
11110 2704                        00            .byte	0
11111 2705                        00            .byte	0
11112 2706                        00            .byte	0
11113 2707                        00            .byte	0
11114 2708                        18            .byte	$18
11115 2709                        0C            .byte	$C
11116 270A                        FE            .byte	$FE
11117 270B                        0C            .byte	$C
11118 270C                        18            .byte	$18
11119 270D                        00            .byte	0
11120 270E                        00            .byte	0
11121 270F                        00            .byte	0
11122 2710                        00            .byte	0
11123 2711                        00            .byte	0
11124 2712                        00            .byte	0
11125                                           ! 1395  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11126 2713                        00            .byte	0
11127 2714                        00            .byte	0
11128 2715                        00            .byte	0
11129 2716                        00            .byte	0
11130 2717                        00            .byte	0
11131 2718                        30            .byte	$30
11132 2719                        60            .byte	$60
11133 271A                        FE            .byte	$FE
11134 271B                        60            .byte	$60
11135 271C                        30            .byte	$30
11136 271D                        00            .byte	0
11137 271E                        00            .byte	0
11138 271F                        00            .byte	0
11139 2720                        00            .byte	0
11140 2721                        00            .byte	0
11141 2722                        00            .byte	0
11142                                           ! 1396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11143 2723                        00            .byte	0
11144 2724                        00            .byte	0
11145 2725                        00            .byte	0
11146 2726                        00            .byte	0
11147 2727                        00            .byte	0
11148 2728                        00            .byte	0
11149 2729                        C0            .byte	$C0
11150 272A                        C0            .byte	$C0
11151 272B                        C0            .byte	$C0
11152 272C                        FE            .byte	$FE
11153 272D                        00            .byte	0
11154 272E                        00            .byte	0
11155 272F                        00            .byte	0
11156 2730                        00            .byte	0
11157 2731                        00            .byte	0
11158 2732                        00            .byte	0
11159                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11160 2733                        00            .byte	0
11161 2734                        00            .byte	0
11162 2735                        00            .byte	0
11163 2736                        00            .byte	0
11164 2737                        00            .byte	0
11165 2738                        24            .byte	$24
11166 2739                        66            .byte	$66
11167 273A                        FF            .byte	$FF
11168 273B                        66            .byte	$66
11169 273C                        24            .byte	$24
11170 273D                        00            .byte	0
11171 273E                        00            .byte	0
11172 273F                        00            .byte	0
11173 2740                        00            .byte	0
11174 2741                        00            .byte	0
11175 2742                        00            .byte	0
11176                                           ! 1398  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11177 2743                        00            .byte	0
11178 2744                        00            .byte	0
11179 2745                        00            .byte	0
11180 2746                        00            .byte	0
11181 2747                        10            .byte	$10
11182 2748                        38            .byte	$38
11183 2749                        38            .byte	$38
11184 274A                        7C            .byte	$7C
11185 274B                        7C            .byte	$7C
11186 274C                        FE            .byte	$FE
11187 274D                        FE            .byte	$FE
11188 274E                        00            .byte	0
11189 274F                        00            .byte	0
11190 2750                        00            .byte	0
11191 2751                        00            .byte	0
11192 2752                        00            .byte	0
11193                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11194 2753                        00            .byte	0
11195 2754                        00            .byte	0
11196 2755                        00            .byte	0
11197 2756                        00            .byte	0
11198 2757                        FE            .byte	$FE
11199 2758                        FE            .byte	$FE
11200 2759                        7C            .byte	$7C
11201 275A                        7C            .byte	$7C
11202 275B                        38            .byte	$38
11203 275C                        38            .byte	$38
11204 275D                        10            .byte	$10
11205 275E                        00            .byte	0
11206 275F                        00            .byte	0
11207 2760                        00            .byte	0
11208 2761                        00            .byte	0
11209 2762                        00            .byte	0
11210                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11211 2763                        00            .byte	0
11212 2764                        00            .byte	0
11213 2765                        00            .byte	0
11214 2766                        00            .byte	0
11215 2767                        00            .byte	0
11216 2768                        00            .byte	0
11217 2769                        00            .byte	0
11218 276A                        00            .byte	0
11219 276B                        00            .byte	0
11220 276C                        00            .byte	0
11221 276D                        00            .byte	0
11222 276E                        00            .byte	0
11223 276F                        00            .byte	0
11224 2770                        00            .byte	0
11225 2771                        00            .byte	0
11226 2772                        00            .byte	0
11227                                           ! 1401  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11228 2773                        00            .byte	0
11229 2774                        00            .byte	0
11230 2775                        18            .byte	$18
11231 2776                        3C            .byte	$3C
11232 2777                        3C            .byte	$3C
11233 2778                        3C            .byte	$3C
11234 2779                        18            .byte	$18
11235 277A                        18            .byte	$18
11236 277B                        18            .byte	$18
11237 277C                        00            .byte	0
11238 277D                        18            .byte	$18
11239 277E                        18            .byte	$18
11240 277F                        00            .byte	0
11241 2780                        00            .byte	0
11242 2781                        00            .byte	0
11243 2782                        00            .byte	0
11244                                           ! 1402  0x00, 0x6
11245 2783                        00            .byte	0
11246                                           ! 1402 6, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11247 2784                        66            .byte	$66
11248 2785                        66            .byte	$66
11249 2786                        66            .byte	$66
11250 2787                        24            .byte	$24
11251 2788                        00            .byte	0
11252 2789                        00            .byte	0
11253 278A                        00            .byte	0
11254 278B                        00            .byte	0
11255 278C                        00            .byte	0
11256 278D                        00            .byte	0
11257 278E                        00            .byte	0
11258 278F                        00            .byte	0
11259 2790                        00            .byte	0
11260 2791                        00            .byte	0
11261 2792                        00            .byte	0
11262                                           ! 1403  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11263 2793                        00            .byte	0
11264 2794                        00            .byte	0
11265 2795                        00            .byte	0
11266 2796                        6C            .byte	$6C
11267 2797                        6C            .byte	$6C
11268 2798                        FE            .byte	$FE
11269 2799                        6C            .byte	$6C
11270 279A                        6C            .byte	$6C
11271 279B                        6C            .byte	$6C
11272 279C                        FE            .byte	$FE
11273 279D                        6C            .byte	$6C
11274 279E                        6C            .byte	$6C
11275 279F                        00            .byte	0
11276 27A0                        00            .byte	0
11277 27A1                        00            .byte	0
11278 27A2                        00            .byte	0
11279                                           ! 1404  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11280 27A3                        18            .byte	$18
11281 27A4                        18            .byte	$18
11282 27A5                        7C            .byte	$7C
11283 27A6                        C6            .byte	$C6
11284 27A7                        C2            .byte	$C2
11285 27A8                        C0            .byte	$C0
11286 27A9                        7C            .byte	$7C
11287 27AA                        06            .byte	6
11288 27AB                        06            .byte	6
11289 27AC                        86            .byte	$86
11290 27AD                        C6            .byte	$C6
11291 27AE                        7C            .byte	$7C
11292 27AF                        18            .byte	$18
11293 27B0                        18            .byte	$18
11294 27B1                        00            .byte	0
11295 27B2                        00            .byte	0
11296                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11297 27B3                        00            .byte	0
11298 27B4                        00            .byte	0
11299 27B5                        00            .byte	0
11300 27B6                        00            .byte	0
11301 27B7                        C2            .byte	$C2
11302 27B8                        C6            .byte	$C6
11303 27B9                        0C            .byte	$C
11304 27BA                        18            .byte	$18
11305 27BB                        30            .byte	$30
11306 27BC                        60            .byte	$60
11307 27BD                        C6            .byte	$C6
11308 27BE                        86            .byte	$86
11309 27BF                        00            .byte	0
11310 27C0                        00            .byte	0
11311 27C1                        00            .byte	0
11312 27C2                        00            .byte	0
11313                                           ! 1406  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11314 27C3                        00            .byte	0
11315 27C4                        00            .byte	0
11316 27C5                        38            .byte	$38
11317 27C6                        6C            .byte	$6C
11318 27C7                        6C            .byte	$6C
11319 27C8                        38            .byte	$38
11320 27C9                        76            .byte	$76
11321 27CA                        DC            .byte	$DC
11322 27CB                        CC            .byte	$CC
11323 27CC                        CC            .byte	$CC
11324 27CD                        CC            .byte	$CC
11325 27CE                        76            .byte	$76
11326 27CF                        00            .byte	0
11327 27D0                        00            .byte	0
11328 27D1                        00            .byte	0
11329 27D2                        00            .byte	0
11330                                           ! 1407  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11331 27D3                        00            .byte	0
11332 27D4                        30            .byte	$30
11333 27D5                        30            .byte	$30
11334 27D6                        30            .byte	$30
11335 27D7                        60            .byte	$60
11336 27D8                        00            .byte	0
11337 27D9                        00            .byte	0
11338 27DA                        00            .byte	0
11339 27DB                        00            .byte	0
11340 27DC                        00            .byte	0
11341 27DD                        00            .byte	0
11342 27DE                        00            .byte	0
11343 27DF                        00            .byte	0
11344 27E0                        00            .byte	0
11345 27E1                        00            .byte	0
11346 27E2                        00            .byte	0
11347                                           ! 1408  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11348 27E3                        00            .byte	0
11349 27E4                        00            .byte	0
11350 27E5                        0C            .byte	$C
11351 27E6                        18            .byte	$18
11352 27E7                        30            .byte	$30
11353 27E8                        30            .byte	$30
11354 27E9                        30            .byte	$30
11355 27EA                        30            .byte	$30
11356 27EB                        30            .byte	$30
11357 27EC                        30            .byte	$30
11358 27ED                        18            .byte	$18
11359 27EE                        0C            .byte	$C
11360 27EF                        00            .byte	0
11361 27F0                        00            .byte	0
11362 27F1                        00            .byte	0
11363 27F2                        00            .byte	0
11364                                           ! 1409  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11365 27F3                        00            .byte	0
11366 27F4                        00            .byte	0
11367 27F5                        30            .byte	$30
11368 27F6                        18            .byte	$18
11369 27F7                        0C            .byte	$C
11370 27F8                        0C            .byte	$C
11371 27F9                        0C            .byte	$C
11372 27FA                        0C            .byte	$C
11373 27FB                        0C            .byte	$C
11374 27FC                        0C            .byte	$C
11375 27FD                        18            .byte	$18
11376 27FE                        30            .byte	$30
11377 27FF                        00            .byte	0
11378 2800                        00            .byte	0
11379 2801                        00            .byte	0
11380 2802                        00            .byte	0
11381                                           ! 1410  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11382 2803                        00            .byte	0
11383 2804                        00            .byte	0
11384 2805                        00            .byte	0
11385 2806                        00            .byte	0
11386 2807                        00            .byte	0
11387 2808                        66            .byte	$66
11388 2809                        3C            .byte	$3C
11389 280A                        FF            .byte	$FF
11390 280B                        3C            .byte	$3C
11391 280C                        66            .byte	$66
11392 280D                        00            .byte	0
11393 280E                        00            .byte	0
11394 280F                        00            .byte	0
11395 2810                        00            .byte	0
11396 2811                        00            .byte	0
11397 2812                        00            .byte	0
11398                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11399 2813                        00            .byte	0
11400 2814                        00            .byte	0
11401 2815                        00            .byte	0
11402 2816                        00            .byte	0
11403 2817                        00            .byte	0
11404 2818                        18            .byte	$18
11405 2819                        18            .byte	$18
11406 281A                        7E            .byte	$7E
11407 281B                        18            .byte	$18
11408 281C                        18            .byte	$18
11409 281D                        00            .byte	0
11410 281E                        00            .byte	0
11411 281F                        00            .byte	0
11412 2820                        00            .byte	0
11413 2821                        00            .byte	0
11414 2822                        00            .byte	0
11415                                           ! 1412  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11416 2823                        00            .byte	0
11417 2824                        00            .byte	0
11418 2825                        00            .byte	0
11419 2826                        00            .byte	0
11420 2827                        00            .byte	0
11421 2828                        00            .byte	0
11422 2829                        00            .byte	0
11423 282A                        00            .byte	0
11424 282B                        00            .byte	0
11425 282C                        18            .byte	$18
11426 282D                        18            .byte	$18
11427 282E                        18            .byte	$18
11428 282F                        30            .byte	$30
11429 2830                        00            .byte	0
11430 2831                        00            .byte	0
11431 2832                        00            .byte	0
11432                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11433 2833                        00            .byte	0
11434 2834                        00            .byte	0
11435 2835                        00            .byte	0
11436 2836                        00            .byte	0
11437 2837                        00            .byte	0
11438 2838                        00            .byte	0
11439 2839                        00            .byte	0
11440 283A                        FE            .byte	$FE
11441 283B                        00            .byte	0
11442 283C                        00            .byte	0
11443 283D                        00            .byte	0
11444 283E                        00            .byte	0
11445 283F                        00            .byte	0
11446 2840                        00            .byte	0
11447 2841                        00            .byte	0
11448 2842                        00            .byte	0
11449                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11450 2843                        00            .byte	0
11451 2844                        00            .byte	0
11452 2845                        00            .byte	0
11453 2846                        00            .byte	0
11454 2847                        00            .byte	0
11455 2848                        00            .byte	0
11456 2849                        00            .byte	0
11457 284A                        00            .byte	0
11458 284B                        00            .byte	0
11459 284C                        00            .byte	0
11460 284D                        18            .byte	$18
11461 284E                        18            .byte	$18
11462 284F                        00            .byte	0
11463 2850                        00            .byte	0
11464 2851                        00            .byte	0
11465 2852                        00            .byte	0
11466                                           ! 1415  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11467 2853                        00            .byte	0
11468 2854                        00            .byte	0
11469 2855                        00            .byte	0
11470 2856                        00            .byte	0
11471 2857                        02            .byte	2
11472 2858                        06            .byte	6
11473 2859                        0C            .byte	$C
11474 285A                        18            .byte	$18
11475 285B                        30            .byte	$30
11476 285C                        60            .byte	$60
11477 285D                        C0            .byte	$C0
11478 285E                        80            .byte	$80
11479 285F                        00            .byte	0
11480 2860                        00            .byte	0
11481 2861                        00            .byte	0
11482 2862                        00            .byte	0
11483                                           ! 1416  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11484 2863                        00            .byte	0
11485 2864                        00            .byte	0
11486 2865                        3C            .byte	$3C
11487 2866                        66            .byte	$66
11488 2867                        C3            .byte	$C3
11489 2868                        C3            .byte	$C3
11490 2869                        DB            .byte	$DB
11491 286A                        DB            .byte	$DB
11492 286B                        C3            .byte	$C3
11493 286C                        C3            .byte	$C3
11494 286D                        66            .byte	$66
11495 286E                        3C            .byte	$3C
11496 286F                        00            .byte	0
11497 2870                        00            .byte	0
11498 2871                        00            .byte	0
11499 2872                        00            .byte	0
11500                                           ! 1417  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11501 2873                        00            .byte	0
11502 2874                        00            .byte	0
11503 2875                        18            .byte	$18
11504 2876                        38            .byte	$38
11505 2877                        78            .byte	$78
11506 2878                        18            .byte	$18
11507 2879                        18            .byte	$18
11508 287A                        18            .byte	$18
11509 287B                        18            .byte	$18
11510 287C                        18            .byte	$18
11511 287D                        18            .byte	$18
11512 287E                        7E            .byte	$7E
11513 287F                        00            .byte	0
11514 2880                        00            .byte	0
11515 2881                        00            .byte	0
11516 2882                        00            .byte	0
11517                                           ! 1418  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11518 2883                        00            .byte	0
11519 2884                        00            .byte	0
11520 2885                        7C            .byte	$7C
11521 2886                        C6            .byte	$C6
11522 2887                        06            .byte	6
11523 2888                        0C            .byte	$C
11524 2889                        18            .byte	$18
11525 288A                        30            .byte	$30
11526 288B                        60            .byte	$60
11527 288C                        C0            .byte	$C0
11528 288D                        C6            .byte	$C6
11529 288E                        FE            .byte	$FE
11530 288F                        00            .byte	0
11531 2890                        00            .byte	0
11532 2891                        00            .byte	0
11533 2892                        00            .byte	0
11534                                           ! 1419  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11535 2893                        00            .byte	0
11536 2894                        00            .byte	0
11537 2895                        7C            .byte	$7C
11538 2896                        C6            .byte	$C6
11539 2897                        06            .byte	6
11540 2898                        06            .byte	6
11541 2899                        3C            .byte	$3C
11542 289A                        06            .byte	6
11543 289B                        06            .byte	6
11544 289C                        06            .byte	6
11545 289D                        C6            .byte	$C6
11546 289E                        7C            .byte	$7C
11547 289F                        00            .byte	0
11548 28A0                        00            .byte	0
11549 28A1                        00            .byte	0
11550 28A2                        00            .byte	0
11551                                           ! 1420  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11552 28A3                        00            .byte	0
11553 28A4                        00            .byte	0
11554 28A5                        0C            .byte	$C
11555 28A6                        1C            .byte	$1C
11556 28A7                        3C            .byte	$3C
11557 28A8                        6C            .byte	$6C
11558 28A9                        CC            .byte	$CC
11559 28AA                        FE            .byte	$FE
11560 28AB                        0C            .byte	$C
11561 28AC                        0C            .byte	$C
11562 28AD                        0C            .byte	$C
11563 28AE                        1E            .byte	$1E
11564 28AF                        00            .byte	0
11565 28B0                        00            .byte	0
11566 28B1                        00            .byte	0
11567 28B2                        00            .byte	0
11568                                           ! 1421  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11569 28B3                        00            .byte	0
11570 28B4                        00            .byte	0
11571 28B5                        FE            .byte	$FE
11572 28B6                        C0            .byte	$C0
11573 28B7                        C0            .byte	$C0
11574 28B8                        C0            .byte	$C0
11575 28B9                        FC            .byte	$FC
11576 28BA                        06            .byte	6
11577 28BB                        06            .byte	6
11578 28BC                        06            .byte	6
11579 28BD                        C6            .byte	$C6
11580 28BE                        7C            .byte	$7C
11581 28BF                        00            .byte	0
11582 28C0                        00            .byte	0
11583 28C1                        00            .byte	0
11584 28C2                        00            .byte	0
11585                                           ! 1422  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11586 28C3                        00            .byte	0
11587 28C4                        00            .byte	0
11588 28C5                        38            .byte	$38
11589 28C6                        60            .byte	$60
11590 28C7                        C0            .byte	$C0
11591 28C8                        C0            .byte	$C0
11592 28C9                        FC            .byte	$FC
11593 28CA                        C6            .byte	$C6
11594 28CB                        C6            .byte	$C6
11595 28CC                        C6            .byte	$C6
11596 28CD                        C6            .byte	$C6
11597 28CE                        7C            .byte	$7C
11598 28CF                        00            .byte	0
11599 28D0                        00            .byte	0
11600 28D1                        00            .byte	0
11601 28D2                        00            .byte	0
11602                                           ! 1423  0x00, 0x00, 0xfe, 0x
11603 28D3                        00            .byte	0
11604 28D4                        00            .byte	0
11605 28D5                        FE            .byte	$FE
11606                                           ! 1423 c6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11607 28D6                        C6            .byte	$C6
11608 28D7                        06            .byte	6
11609 28D8                        06            .byte	6
11610 28D9                        0C            .byte	$C
11611 28DA                        18            .byte	$18
11612 28DB                        30            .byte	$30
11613 28DC                        30            .byte	$30
11614 28DD                        30            .byte	$30
11615 28DE                        30            .byte	$30
11616 28DF                        00            .byte	0
11617 28E0                        00            .byte	0
11618 28E1                        00            .byte	0
11619 28E2                        00            .byte	0
11620                                           ! 1424  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11621 28E3                        00            .byte	0
11622 28E4                        00            .byte	0
11623 28E5                        7C            .byte	$7C
11624 28E6                        C6            .byte	$C6
11625 28E7                        C6            .byte	$C6
11626 28E8                        C6            .byte	$C6
11627 28E9                        7C            .byte	$7C
11628 28EA                        C6            .byte	$C6
11629 28EB                        C6            .byte	$C6
11630 28EC                        C6            .byte	$C6
11631 28ED                        C6            .byte	$C6
11632 28EE                        7C            .byte	$7C
11633 28EF                        00            .byte	0
11634 28F0                        00            .byte	0
11635 28F1                        00            .byte	0
11636 28F2                        00            .byte	0
11637                                           ! 1425  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11638 28F3                        00            .byte	0
11639 28F4                        00            .byte	0
11640 28F5                        7C            .byte	$7C
11641 28F6                        C6            .byte	$C6
11642 28F7                        C6            .byte	$C6
11643 28F8                        C6            .byte	$C6
11644 28F9                        7E            .byte	$7E
11645 28FA                        06            .byte	6
11646 28FB                        06            .byte	6
11647 28FC                        06            .byte	6
11648 28FD                        0C            .byte	$C
11649 28FE                        78            .byte	$78
11650 28FF                        00            .byte	0
11651 2900                        00            .byte	0
11652 2901                        00            .byte	0
11653 2902                        00            .byte	0
11654                                           ! 1426  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11655 2903                        00            .byte	0
11656 2904                        00            .byte	0
11657 2905                        00            .byte	0
11658 2906                        00            .byte	0
11659 2907                        18            .byte	$18
11660 2908                        18            .byte	$18
11661 2909                        00            .byte	0
11662 290A                        00            .byte	0
11663 290B                        00            .byte	0
11664 290C                        18            .byte	$18
11665 290D                        18            .byte	$18
11666 290E                        00            .byte	0
11667 290F                        00            .byte	0
11668 2910                        00            .byte	0
11669 2911                        00            .byte	0
11670 2912                        00            .byte	0
11671                                           ! 1427  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11672 2913                        00            .byte	0
11673 2914                        00            .byte	0
11674 2915                        00            .byte	0
11675 2916                        00            .byte	0
11676 2917                        18            .byte	$18
11677 2918                        18            .byte	$18
11678 2919                        00            .byte	0
11679 291A                        00            .byte	0
11680 291B                        00            .byte	0
11681 291C                        18            .byte	$18
11682 291D                        18            .byte	$18
11683 291E                        30            .byte	$30
11684 291F                        00            .byte	0
11685 2920                        00            .byte	0
11686 2921                        00            .byte	0
11687 2922                        00            .byte	0
11688                                           ! 1428  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11689 2923                        00            .byte	0
11690 2924                        00            .byte	0
11691 2925                        00            .byte	0
11692 2926                        06            .byte	6
11693 2927                        0C            .byte	$C
11694 2928                        18            .byte	$18
11695 2929                        30            .byte	$30
11696 292A                        60            .byte	$60
11697 292B                        30            .byte	$30
11698 292C                        18            .byte	$18
11699 292D                        0C            .byte	$C
11700 292E                        06            .byte	6
11701 292F                        00            .byte	0
11702 2930                        00            .byte	0
11703 2931                        00            .byte	0
11704 2932                        00            .byte	0
11705                                           ! 1429  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11706 2933                        00            .byte	0
11707 2934                        00            .byte	0
11708 2935                        00            .byte	0
11709 2936                        00            .byte	0
11710 2937                        00            .byte	0
11711 2938                        7E            .byte	$7E
11712 2939                        00            .byte	0
11713 293A                        00            .byte	0
11714 293B                        7E            .byte	$7E
11715 293C                        00            .byte	0
11716 293D                        00            .byte	0
11717 293E                        00            .byte	0
11718 293F                        00            .byte	0
11719 2940                        00            .byte	0
11720 2941                        00            .byte	0
11721 2942                        00            .byte	0
11722                                           ! 1430  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11723 2943                        00            .byte	0
11724 2944                        00            .byte	0
11725 2945                        00            .byte	0
11726 2946                        60            .byte	$60
11727 2947                        30            .byte	$30
11728 2948                        18            .byte	$18
11729 2949                        0C            .byte	$C
11730 294A                        06            .byte	6
11731 294B                        0C            .byte	$C
11732 294C                        18            .byte	$18
11733 294D                        30            .byte	$30
11734 294E                        60            .byte	$60
11735 294F                        00            .byte	0
11736 2950                        00            .byte	0
11737 2951                        00            .byte	0
11738 2952                        00            .byte	0
11739                                           ! 1431  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11740 2953                        00            .byte	0
11741 2954                        00            .byte	0
11742 2955                        7C            .byte	$7C
11743 2956                        C6            .byte	$C6
11744 2957                        C6            .byte	$C6
11745 2958                        0C            .byte	$C
11746 2959                        18            .byte	$18
11747 295A                        18            .byte	$18
11748 295B                        18            .byte	$18
11749 295C                        00            .byte	0
11750 295D                        18            .byte	$18
11751 295E                        18            .byte	$18
11752 295F                        00            .byte	0
11753 2960                        00            .byte	0
11754 2961                        00            .byte	0
11755 2962                        00            .byte	0
11756                                           ! 1432  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11757 2963                        00            .byte	0
11758 2964                        00            .byte	0
11759 2965                        00            .byte	0
11760 2966                        7C            .byte	$7C
11761 2967                        C6            .byte	$C6
11762 2968                        C6            .byte	$C6
11763 2969                        DE            .byte	$DE
11764 296A                        DE            .byte	$DE
11765 296B                        DE            .byte	$DE
11766 296C                        DC            .byte	$DC
11767 296D                        C0            .byte	$C0
11768 296E                        7C            .byte	$7C
11769 296F                        00            .byte	0
11770 2970                        00            .byte	0
11771 2971                        00            .byte	0
11772 2972                        00            .byte	0
11773                                           ! 1433  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11774 2973                        00            .byte	0
11775 2974                        00            .byte	0
11776 2975                        10            .byte	$10
11777 2976                        38            .byte	$38
11778 2977                        6C            .byte	$6C
11779 2978                        C6            .byte	$C6
11780 2979                        C6            .byte	$C6
11781 297A                        FE            .byte	$FE
11782 297B                        C6            .byte	$C6
11783 297C                        C6            .byte	$C6
11784 297D                        C6            .byte	$C6
11785 297E                        C6            .byte	$C6
11786 297F                        00            .byte	0
11787 2980                        00            .byte	0
11788 2981                        00            .byte	0
11789 2982                        00            .byte	0
11790                                           ! 1434  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11791 2983                        00            .byte	0
11792 2984                        00            .byte	0
11793 2985                        FC            .byte	$FC
11794 2986                        66            .byte	$66
11795 2987                        66            .byte	$66
11796 2988                        66            .byte	$66
11797 2989                        7C            .byte	$7C
11798 298A                        66            .byte	$66
11799 298B                        66            .byte	$66
11800 298C                        66            .byte	$66
11801 298D                        66            .byte	$66
11802 298E                        FC            .byte	$FC
11803 298F                        00            .byte	0
11804 2990                        00            .byte	0
11805 2991                        00            .byte	0
11806 2992                        00            .byte	0
11807                                           ! 1435  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11808 2993                        00            .byte	0
11809 2994                        00            .byte	0
11810 2995                        3C            .byte	$3C
11811 2996                        66            .byte	$66
11812 2997                        C2            .byte	$C2
11813 2998                        C0            .byte	$C0
11814 2999                        C0            .byte	$C0
11815 299A                        C0            .byte	$C0
11816 299B                        C0            .byte	$C0
11817 299C                        C2            .byte	$C2
11818 299D                        66            .byte	$66
11819 299E                        3C            .byte	$3C
11820 299F                        00            .byte	0
11821 29A0                        00            .byte	0
11822 29A1                        00            .byte	0
11823 29A2                        00            .byte	0
11824                                           ! 1436  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11825 29A3                        00            .byte	0
11826 29A4                        00            .byte	0
11827 29A5                        F8            .byte	$F8
11828 29A6                        6C            .byte	$6C
11829 29A7                        66            .byte	$66
11830 29A8                        66            .byte	$66
11831 29A9                        66            .byte	$66
11832 29AA                        66            .byte	$66
11833 29AB                        66            .byte	$66
11834 29AC                        66            .byte	$66
11835 29AD                        6C            .byte	$6C
11836 29AE                        F8            .byte	$F8
11837 29AF                        00            .byte	0
11838 29B0                        00            .byte	0
11839 29B1                        00            .byte	0
11840 29B2                        00            .byte	0
11841                                           ! 1437  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11842 29B3                        00            .byte	0
11843 29B4                        00            .byte	0
11844 29B5                        FE            .byte	$FE
11845 29B6                        66            .byte	$66
11846 29B7                        62            .byte	$62
11847 29B8                        68            .byte	$68
11848 29B9                        78            .byte	$78
11849 29BA                        68            .byte	$68
11850 29BB                        60            .byte	$60
11851 29BC                        62            .byte	$62
11852 29BD                        66            .byte	$66
11853 29BE                        FE            .byte	$FE
11854 29BF                        00            .byte	0
11855 29C0                        00            .byte	0
11856 29C1                        00            .byte	0
11857 29C2                        00            .byte	0
11858                                           ! 1438  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11859 29C3                        00            .byte	0
11860 29C4                        00            .byte	0
11861 29C5                        FE            .byte	$FE
11862 29C6                        66            .byte	$66
11863 29C7                        62            .byte	$62
11864 29C8                        68            .byte	$68
11865 29C9                        78            .byte	$78
11866 29CA                        68            .byte	$68
11867 29CB                        60            .byte	$60
11868 29CC                        60            .byte	$60
11869 29CD                        60            .byte	$60
11870 29CE                        F0            .byte	$F0
11871 29CF                        00            .byte	0
11872 29D0                        00            .byte	0
11873 29D1                        00            .byte	0
11874 29D2                        00            .byte	0
11875                                           ! 1439  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11876 29D3                        00            .byte	0
11877 29D4                        00            .byte	0
11878 29D5                        3C            .byte	$3C
11879 29D6                        66            .byte	$66
11880 29D7                        C2            .byte	$C2
11881 29D8                        C0            .byte	$C0
11882 29D9                        C0            .byte	$C0
11883 29DA                        DE            .byte	$DE
11884 29DB                        C6            .byte	$C6
11885 29DC                        C6            .byte	$C6
11886 29DD                        66            .byte	$66
11887 29DE                        3A            .byte	$3A
11888 29DF                        00            .byte	0
11889 29E0                        00            .byte	0
11890 29E1                        00            .byte	0
11891 29E2                        00            .byte	0
11892                                           ! 1440  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11893 29E3                        00            .byte	0
11894 29E4                        00            .byte	0
11895 29E5                        C6            .byte	$C6
11896 29E6                        C6            .byte	$C6
11897 29E7                        C6            .byte	$C6
11898 29E8                        C6            .byte	$C6
11899 29E9                        FE            .byte	$FE
11900 29EA                        C6            .byte	$C6
11901 29EB                        C6            .byte	$C6
11902 29EC                        C6            .byte	$C6
11903 29ED                        C6            .byte	$C6
11904 29EE                        C6            .byte	$C6
11905 29EF                        00            .byte	0
11906 29F0                        00            .byte	0
11907 29F1                        00            .byte	0
11908 29F2                        00            .byte	0
11909                                           ! 1441  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11910 29F3                        00            .byte	0
11911 29F4                        00            .byte	0
11912 29F5                        3C            .byte	$3C
11913 29F6                        18            .byte	$18
11914 29F7                        18            .byte	$18
11915 29F8                        18            .byte	$18
11916 29F9                        18            .byte	$18
11917 29FA                        18            .byte	$18
11918 29FB                        18            .byte	$18
11919 29FC                        18            .byte	$18
11920 29FD                        18            .byte	$18
11921 29FE                        3C            .byte	$3C
11922 29FF                        00            .byte	0
11923 2A00                        00            .byte	0
11924 2A01                        00            .byte	0
11925 2A02                        00            .byte	0
11926                                           ! 1442  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11927 2A03                        00            .byte	0
11928 2A04                        00            .byte	0
11929 2A05                        1E            .byte	$1E
11930 2A06                        0C            .byte	$C
11931 2A07                        0C            .byte	$C
11932 2A08                        0C            .byte	$C
11933 2A09                        0C            .byte	$C
11934 2A0A                        0C            .byte	$C
11935 2A0B                        CC            .byte	$CC
11936 2A0C                        CC            .byte	$CC
11937 2A0D                        CC            .byte	$CC
11938 2A0E                        78            .byte	$78
11939 2A0F                        00            .byte	0
11940 2A10                        00            .byte	0
11941 2A11                        00            .byte	0
11942 2A12                        00            .byte	0
11943                                           ! 1443  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11944 2A13                        00            .byte	0
11945 2A14                        00            .byte	0
11946 2A15                        E6            .byte	$E6
11947 2A16                        66            .byte	$66
11948 2A17                        66            .byte	$66
11949 2A18                        6C            .byte	$6C
11950 2A19                        78            .byte	$78
11951 2A1A                        78            .byte	$78
11952 2A1B                        6C            .byte	$6C
11953 2A1C                        66            .byte	$66
11954 2A1D                        66            .byte	$66
11955 2A1E                        E6            .byte	$E6
11956 2A1F                        00            .byte	0
11957 2A20                        00            .byte	0
11958 2A21                        00            .byte	0
11959 2A22                        00            .byte	0
11960                                           ! 1444  0x00, 0x00, 0xf0, 0x60, 0x60, 0
11961 2A23                        00            .byte	0
11962 2A24                        00            .byte	0
11963 2A25                        F0            .byte	$F0
11964 2A26                        60            .byte	$60
11965 2A27                        60            .byte	$60
11966                                           ! 1444 x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11967 2A28                        60            .byte	$60
11968 2A29                        60            .byte	$60
11969 2A2A                        60            .byte	$60
11970 2A2B                        60            .byte	$60
11971 2A2C                        62            .byte	$62
11972 2A2D                        66            .byte	$66
11973 2A2E                        FE            .byte	$FE
11974 2A2F                        00            .byte	0
11975 2A30                        00            .byte	0
11976 2A31                        00            .byte	0
11977 2A32                        00            .byte	0
11978                                           ! 1445  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11979 2A33                        00            .byte	0
11980 2A34                        00            .byte	0
11981 2A35                        C3            .byte	$C3
11982 2A36                        E7            .byte	$E7
11983 2A37                        FF            .byte	$FF
11984 2A38                        FF            .byte	$FF
11985 2A39                        DB            .byte	$DB
11986 2A3A                        C3            .byte	$C3
11987 2A3B                        C3            .byte	$C3
11988 2A3C                        C3            .byte	$C3
11989 2A3D                        C3            .byte	$C3
11990 2A3E                        C3            .byte	$C3
11991 2A3F                        00            .byte	0
11992 2A40                        00            .byte	0
11993 2A41                        00            .byte	0
11994 2A42                        00            .byte	0
11995                                           ! 1446  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11996 2A43                        00            .byte	0
11997 2A44                        00            .byte	0
11998 2A45                        C6            .byte	$C6
11999 2A46                        E6            .byte	$E6
12000 2A47                        F6            .byte	$F6
12001 2A48                        FE            .byte	$FE
12002 2A49                        DE            .byte	$DE
12003 2A4A                        CE            .byte	$CE
12004 2A4B                        C6            .byte	$C6
12005 2A4C                        C6            .byte	$C6
12006 2A4D                        C6            .byte	$C6
12007 2A4E                        C6            .byte	$C6
12008 2A4F                        00            .byte	0
12009 2A50                        00            .byte	0
12010 2A51                        00            .byte	0
12011 2A52                        00            .byte	0
12012                                           ! 1447  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12013 2A53                        00            .byte	0
12014 2A54                        00            .byte	0
12015 2A55                        7C            .byte	$7C
12016 2A56                        C6            .byte	$C6
12017 2A57                        C6            .byte	$C6
12018 2A58                        C6            .byte	$C6
12019 2A59                        C6            .byte	$C6
12020 2A5A                        C6            .byte	$C6
12021 2A5B                        C6            .byte	$C6
12022 2A5C                        C6            .byte	$C6
12023 2A5D                        C6            .byte	$C6
12024 2A5E                        7C            .byte	$7C
12025 2A5F                        00            .byte	0
12026 2A60                        00            .byte	0
12027 2A61                        00            .byte	0
12028 2A62                        00            .byte	0
12029                                           ! 1448  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12030 2A63                        00            .byte	0
12031 2A64                        00            .byte	0
12032 2A65                        FC            .byte	$FC
12033 2A66                        66            .byte	$66
12034 2A67                        66            .byte	$66
12035 2A68                        66            .byte	$66
12036 2A69                        7C            .byte	$7C
12037 2A6A                        60            .byte	$60
12038 2A6B                        60            .byte	$60
12039 2A6C                        60            .byte	$60
12040 2A6D                        60            .byte	$60
12041 2A6E                        F0            .byte	$F0
12042 2A6F                        00            .byte	0
12043 2A70                        00            .byte	0
12044 2A71                        00            .byte	0
12045 2A72                        00            .byte	0
12046                                           ! 1449  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12047 2A73                        00            .byte	0
12048 2A74                        00            .byte	0
12049 2A75                        7C            .byte	$7C
12050 2A76                        C6            .byte	$C6
12051 2A77                        C6            .byte	$C6
12052 2A78                        C6            .byte	$C6
12053 2A79                        C6            .byte	$C6
12054 2A7A                        C6            .byte	$C6
12055 2A7B                        C6            .byte	$C6
12056 2A7C                        D6            .byte	$D6
12057 2A7D                        DE            .byte	$DE
12058 2A7E                        7C            .byte	$7C
12059 2A7F                        0C            .byte	$C
12060 2A80                        0E            .byte	$E
12061 2A81                        00            .byte	0
12062 2A82                        00            .byte	0
12063                                           ! 1450  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12064 2A83                        00            .byte	0
12065 2A84                        00            .byte	0
12066 2A85                        FC            .byte	$FC
12067 2A86                        66            .byte	$66
12068 2A87                        66            .byte	$66
12069 2A88                        66            .byte	$66
12070 2A89                        7C            .byte	$7C
12071 2A8A                        6C            .byte	$6C
12072 2A8B                        66            .byte	$66
12073 2A8C                        66            .byte	$66
12074 2A8D                        66            .byte	$66
12075 2A8E                        E6            .byte	$E6
12076 2A8F                        00            .byte	0
12077 2A90                        00            .byte	0
12078 2A91                        00            .byte	0
12079 2A92                        00            .byte	0
12080                                           ! 1451  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12081 2A93                        00            .byte	0
12082 2A94                        00            .byte	0
12083 2A95                        7C            .byte	$7C
12084 2A96                        C6            .byte	$C6
12085 2A97                        C6            .byte	$C6
12086 2A98                        60            .byte	$60
12087 2A99                        38            .byte	$38
12088 2A9A                        0C            .byte	$C
12089 2A9B                        06            .byte	6
12090 2A9C                        C6            .byte	$C6
12091 2A9D                        C6            .byte	$C6
12092 2A9E                        7C            .byte	$7C
12093 2A9F                        00            .byte	0
12094 2AA0                        00            .byte	0
12095 2AA1                        00            .byte	0
12096 2AA2                        00            .byte	0
12097                                           ! 1452  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12098 2AA3                        00            .byte	0
12099 2AA4                        00            .byte	0
12100 2AA5                        FF            .byte	$FF
12101 2AA6                        DB            .byte	$DB
12102 2AA7                        99            .byte	$99
12103 2AA8                        18            .byte	$18
12104 2AA9                        18            .byte	$18
12105 2AAA                        18            .byte	$18
12106 2AAB                        18            .byte	$18
12107 2AAC                        18            .byte	$18
12108 2AAD                        18            .byte	$18
12109 2AAE                        3C            .byte	$3C
12110 2AAF                        00            .byte	0
12111 2AB0                        00            .byte	0
12112 2AB1                        00            .byte	0
12113 2AB2                        00            .byte	0
12114                                           ! 1453  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12115 2AB3                        00            .byte	0
12116 2AB4                        00            .byte	0
12117 2AB5                        C6            .byte	$C6
12118 2AB6                        C6            .byte	$C6
12119 2AB7                        C6            .byte	$C6
12120 2AB8                        C6            .byte	$C6
12121 2AB9                        C6            .byte	$C6
12122 2ABA                        C6            .byte	$C6
12123 2ABB                        C6            .byte	$C6
12124 2ABC                        C6            .byte	$C6
12125 2ABD                        C6            .byte	$C6
12126 2ABE                        7C            .byte	$7C
12127 2ABF                        00            .byte	0
12128 2AC0                        00            .byte	0
12129 2AC1                        00            .byte	0
12130 2AC2                        00            .byte	0
12131                                           ! 1454  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12132 2AC3                        00            .byte	0
12133 2AC4                        00            .byte	0
12134 2AC5                        C3            .byte	$C3
12135 2AC6                        C3            .byte	$C3
12136 2AC7                        C3            .byte	$C3
12137 2AC8                        C3            .byte	$C3
12138 2AC9                        C3            .byte	$C3
12139 2ACA                        C3            .byte	$C3
12140 2ACB                        C3            .byte	$C3
12141 2ACC                        66            .byte	$66
12142 2ACD                        3C            .byte	$3C
12143 2ACE                        18            .byte	$18
12144 2ACF                        00            .byte	0
12145 2AD0                        00            .byte	0
12146 2AD1                        00            .byte	0
12147 2AD2                        00            .byte	0
12148                                           ! 1455  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12149 2AD3                        00            .byte	0
12150 2AD4                        00            .byte	0
12151 2AD5                        C3            .byte	$C3
12152 2AD6                        C3            .byte	$C3
12153 2AD7                        C3            .byte	$C3
12154 2AD8                        C3            .byte	$C3
12155 2AD9                        C3            .byte	$C3
12156 2ADA                        DB            .byte	$DB
12157 2ADB                        DB            .byte	$DB
12158 2ADC                        FF            .byte	$FF
12159 2ADD                        66            .byte	$66
12160 2ADE                        66            .byte	$66
12161 2ADF                        00            .byte	0
12162 2AE0                        00            .byte	0
12163 2AE1                        00            .byte	0
12164 2AE2                        00            .byte	0
12165                                           ! 1456  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12166 2AE3                        00            .byte	0
12167 2AE4                        00            .byte	0
12168 2AE5                        C3            .byte	$C3
12169 2AE6                        C3            .byte	$C3
12170 2AE7                        66            .byte	$66
12171 2AE8                        3C            .byte	$3C
12172 2AE9                        18            .byte	$18
12173 2AEA                        18            .byte	$18
12174 2AEB                        3C            .byte	$3C
12175 2AEC                        66            .byte	$66
12176 2AED                        C3            .byte	$C3
12177 2AEE                        C3            .byte	$C3
12178 2AEF                        00            .byte	0
12179 2AF0                        00            .byte	0
12180 2AF1                        00            .byte	0
12181 2AF2                        00            .byte	0
12182                                           ! 1457  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12183 2AF3                        00            .byte	0
12184 2AF4                        00            .byte	0
12185 2AF5                        C3            .byte	$C3
12186 2AF6                        C3            .byte	$C3
12187 2AF7                        C3            .byte	$C3
12188 2AF8                        66            .byte	$66
12189 2AF9                        3C            .byte	$3C
12190 2AFA                        18            .byte	$18
12191 2AFB                        18            .byte	$18
12192 2AFC                        18            .byte	$18
12193 2AFD                        18            .byte	$18
12194 2AFE                        3C            .byte	$3C
12195 2AFF                        00            .byte	0
12196 2B00                        00            .byte	0
12197 2B01                        00            .byte	0
12198 2B02                        00            .byte	0
12199                                           ! 1458  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12200 2B03                        00            .byte	0
12201 2B04                        00            .byte	0
12202 2B05                        FF            .byte	$FF
12203 2B06                        C3            .byte	$C3
12204 2B07                        86            .byte	$86
12205 2B08                        0C            .byte	$C
12206 2B09                        18            .byte	$18
12207 2B0A                        30            .byte	$30
12208 2B0B                        60            .byte	$60
12209 2B0C                        C1            .byte	$C1
12210 2B0D                        C3            .byte	$C3
12211 2B0E                        FF            .byte	$FF
12212 2B0F                        00            .byte	0
12213 2B10                        00            .byte	0
12214 2B11                        00            .byte	0
12215 2B12                        00            .byte	0
12216                                           ! 1459  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12217 2B13                        00            .byte	0
12218 2B14                        00            .byte	0
12219 2B15                        3C            .byte	$3C
12220 2B16                        30            .byte	$30
12221 2B17                        30            .byte	$30
12222 2B18                        30            .byte	$30
12223 2B19                        30            .byte	$30
12224 2B1A                        30            .byte	$30
12225 2B1B                        30            .byte	$30
12226 2B1C                        30            .byte	$30
12227 2B1D                        30            .byte	$30
12228 2B1E                        3C            .byte	$3C
12229 2B1F                        00            .byte	0
12230 2B20                        00            .byte	0
12231 2B21                        00            .byte	0
12232 2B22                        00            .byte	0
12233                                           ! 1460  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12234 2B23                        00            .byte	0
12235 2B24                        00            .byte	0
12236 2B25                        00            .byte	0
12237 2B26                        80            .byte	$80
12238 2B27                        C0            .byte	$C0
12239 2B28                        E0            .byte	$E0
12240 2B29                        70            .byte	$70
12241 2B2A                        38            .byte	$38
12242 2B2B                        1C            .byte	$1C
12243 2B2C                        0E            .byte	$E
12244 2B2D                        06            .byte	6
12245 2B2E                        02            .byte	2
12246 2B2F                        00            .byte	0
12247 2B30                        00            .byte	0
12248 2B31                        00            .byte	0
12249 2B32                        00            .byte	0
12250                                           ! 1461  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12251 2B33                        00            .byte	0
12252 2B34                        00            .byte	0
12253 2B35                        3C            .byte	$3C
12254 2B36                        0C            .byte	$C
12255 2B37                        0C            .byte	$C
12256 2B38                        0C            .byte	$C
12257 2B39                        0C            .byte	$C
12258 2B3A                        0C            .byte	$C
12259 2B3B                        0C            .byte	$C
12260 2B3C                        0C            .byte	$C
12261 2B3D                        0C            .byte	$C
12262 2B3E                        3C            .byte	$3C
12263 2B3F                        00            .byte	0
12264 2B40                        00            .byte	0
12265 2B41                        00            .byte	0
12266 2B42                        00            .byte	0
12267                                           ! 1462  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12268 2B43                        10            .byte	$10
12269 2B44                        38            .byte	$38
12270 2B45                        6C            .byte	$6C
12271 2B46                        C6            .byte	$C6
12272 2B47                        00            .byte	0
12273 2B48                        00            .byte	0
12274 2B49                        00            .byte	0
12275 2B4A                        00            .byte	0
12276 2B4B                        00            .byte	0
12277 2B4C                        00            .byte	0
12278 2B4D                        00            .byte	0
12279 2B4E                        00            .byte	0
12280 2B4F                        00            .byte	0
12281 2B50                        00            .byte	0
12282 2B51                        00            .byte	0
12283 2B52                        00            .byte	0
12284                                           ! 1463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12285 2B53                        00            .byte	0
12286 2B54                        00            .byte	0
12287 2B55                        00            .byte	0
12288 2B56                        00            .byte	0
12289 2B57                        00            .byte	0
12290 2B58                        00            .byte	0
12291 2B59                        00            .byte	0
12292 2B5A                        00            .byte	0
12293 2B5B                        00            .byte	0
12294 2B5C                        00            .byte	0
12295 2B5D                        00            .byte	0
12296 2B5E                        00            .byte	0
12297 2B5F                        00            .byte	0
12298 2B60                        FF            .byte	$FF
12299 2B61                        00            .byte	0
12300 2B62                        00            .byte	0
12301                                           ! 1464  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12302 2B63                        30            .byte	$30
12303 2B64                        30            .byte	$30
12304 2B65                        18            .byte	$18
12305 2B66                        00            .byte	0
12306 2B67                        00            .byte	0
12307 2B68                        00            .byte	0
12308 2B69                        00            .byte	0
12309 2B6A                        00            .byte	0
12310 2B6B                        00            .byte	0
12311 2B6C                        00            .byte	0
12312 2B6D                        00            .byte	0
12313 2B6E                        00            .byte	0
12314 2B6F                        00            .byte	0
12315 2B70                        00            .byte	0
12316 2B71                        00            .byte	0
12317 2B72                        00            .byte	0
12318                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 
12319 2B73                        00            .byte	0
12320 2B74                        00            .byte	0
12321 2B75                        00            .byte	0
12322 2B76                        00            .byte	0
12323 2B77                        00            .byte	0
12324 2B78                        78            .byte	$78
12325 2B79                        0C            .byte	$C
12326                                           ! 1465 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12327 2B7A                        7C            .byte	$7C
12328 2B7B                        CC            .byte	$CC
12329 2B7C                        CC            .byte	$CC
12330 2B7D                        CC            .byte	$CC
12331 2B7E                        76            .byte	$76
12332 2B7F                        00            .byte	0
12333 2B80                        00            .byte	0
12334 2B81                        00            .byte	0
12335 2B82                        00            .byte	0
12336                                           ! 1466  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12337 2B83                        00            .byte	0
12338 2B84                        00            .byte	0
12339 2B85                        E0            .byte	$E0
12340 2B86                        60            .byte	$60
12341 2B87                        60            .byte	$60
12342 2B88                        78            .byte	$78
12343 2B89                        6C            .byte	$6C
12344 2B8A                        66            .byte	$66
12345 2B8B                        66            .byte	$66
12346 2B8C                        66            .byte	$66
12347 2B8D                        66            .byte	$66
12348 2B8E                        7C            .byte	$7C
12349 2B8F                        00            .byte	0
12350 2B90                        00            .byte	0
12351 2B91                        00            .byte	0
12352 2B92                        00            .byte	0
12353                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12354 2B93                        00            .byte	0
12355 2B94                        00            .byte	0
12356 2B95                        00            .byte	0
12357 2B96                        00            .byte	0
12358 2B97                        00            .byte	0
12359 2B98                        7C            .byte	$7C
12360 2B99                        C6            .byte	$C6
12361 2B9A                        C0            .byte	$C0
12362 2B9B                        C0            .byte	$C0
12363 2B9C                        C0            .byte	$C0
12364 2B9D                        C6            .byte	$C6
12365 2B9E                        7C            .byte	$7C
12366 2B9F                        00            .byte	0
12367 2BA0                        00            .byte	0
12368 2BA1                        00            .byte	0
12369 2BA2                        00            .byte	0
12370                                           ! 1468  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12371 2BA3                        00            .byte	0
12372 2BA4                        00            .byte	0
12373 2BA5                        1C            .byte	$1C
12374 2BA6                        0C            .byte	$C
12375 2BA7                        0C            .byte	$C
12376 2BA8                        3C            .byte	$3C
12377 2BA9                        6C            .byte	$6C
12378 2BAA                        CC            .byte	$CC
12379 2BAB                        CC            .byte	$CC
12380 2BAC                        CC            .byte	$CC
12381 2BAD                        CC            .byte	$CC
12382 2BAE                        76            .byte	$76
12383 2BAF                        00            .byte	0
12384 2BB0                        00            .byte	0
12385 2BB1                        00            .byte	0
12386 2BB2                        00            .byte	0
12387                                           ! 1469  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12388 2BB3                        00            .byte	0
12389 2BB4                        00            .byte	0
12390 2BB5                        00            .byte	0
12391 2BB6                        00            .byte	0
12392 2BB7                        00            .byte	0
12393 2BB8                        7C            .byte	$7C
12394 2BB9                        C6            .byte	$C6
12395 2BBA                        FE            .byte	$FE
12396 2BBB                        C0            .byte	$C0
12397 2BBC                        C0            .byte	$C0
12398 2BBD                        C6            .byte	$C6
12399 2BBE                        7C            .byte	$7C
12400 2BBF                        00            .byte	0
12401 2BC0                        00            .byte	0
12402 2BC1                        00            .byte	0
12403 2BC2                        00            .byte	0
12404                                           ! 1470  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12405 2BC3                        00            .byte	0
12406 2BC4                        00            .byte	0
12407 2BC5                        38            .byte	$38
12408 2BC6                        6C            .byte	$6C
12409 2BC7                        64            .byte	$64
12410 2BC8                        60            .byte	$60
12411 2BC9                        F0            .byte	$F0
12412 2BCA                        60            .byte	$60
12413 2BCB                        60            .byte	$60
12414 2BCC                        60            .byte	$60
12415 2BCD                        60            .byte	$60
12416 2BCE                        F0            .byte	$F0
12417 2BCF                        00            .byte	0
12418 2BD0                        00            .byte	0
12419 2BD1                        00            .byte	0
12420 2BD2                        00            .byte	0
12421                                           ! 1471  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12422 2BD3                        00            .byte	0
12423 2BD4                        00            .byte	0
12424 2BD5                        00            .byte	0
12425 2BD6                        00            .byte	0
12426 2BD7                        00            .byte	0
12427 2BD8                        76            .byte	$76
12428 2BD9                        CC            .byte	$CC
12429 2BDA                        CC            .byte	$CC
12430 2BDB                        CC            .byte	$CC
12431 2BDC                        CC            .byte	$CC
12432 2BDD                        CC            .byte	$CC
12433 2BDE                        7C            .byte	$7C
12434 2BDF                        0C            .byte	$C
12435 2BE0                        CC            .byte	$CC
12436 2BE1                        78            .byte	$78
12437 2BE2                        00            .byte	0
12438                                           ! 1472  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12439 2BE3                        00            .byte	0
12440 2BE4                        00            .byte	0
12441 2BE5                        E0            .byte	$E0
12442 2BE6                        60            .byte	$60
12443 2BE7                        60            .byte	$60
12444 2BE8                        6C            .byte	$6C
12445 2BE9                        76            .byte	$76
12446 2BEA                        66            .byte	$66
12447 2BEB                        66            .byte	$66
12448 2BEC                        66            .byte	$66
12449 2BED                        66            .byte	$66
12450 2BEE                        E6            .byte	$E6
12451 2BEF                        00            .byte	0
12452 2BF0                        00            .byte	0
12453 2BF1                        00            .byte	0
12454 2BF2                        00            .byte	0
12455                                           ! 1473  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12456 2BF3                        00            .byte	0
12457 2BF4                        00            .byte	0
12458 2BF5                        18            .byte	$18
12459 2BF6                        18            .byte	$18
12460 2BF7                        00            .byte	0
12461 2BF8                        38            .byte	$38
12462 2BF9                        18            .byte	$18
12463 2BFA                        18            .byte	$18
12464 2BFB                        18            .byte	$18
12465 2BFC                        18            .byte	$18
12466 2BFD                        18            .byte	$18
12467 2BFE                        3C            .byte	$3C
12468 2BFF                        00            .byte	0
12469 2C00                        00            .byte	0
12470 2C01                        00            .byte	0
12471 2C02                        00            .byte	0
12472                                           ! 1474  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12473 2C03                        00            .byte	0
12474 2C04                        00            .byte	0
12475 2C05                        06            .byte	6
12476 2C06                        06            .byte	6
12477 2C07                        00            .byte	0
12478 2C08                        0E            .byte	$E
12479 2C09                        06            .byte	6
12480 2C0A                        06            .byte	6
12481 2C0B                        06            .byte	6
12482 2C0C                        06            .byte	6
12483 2C0D                        06            .byte	6
12484 2C0E                        06            .byte	6
12485 2C0F                        66            .byte	$66
12486 2C10                        66            .byte	$66
12487 2C11                        3C            .byte	$3C
12488 2C12                        00            .byte	0
12489                                           ! 1475  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12490 2C13                        00            .byte	0
12491 2C14                        00            .byte	0
12492 2C15                        E0            .byte	$E0
12493 2C16                        60            .byte	$60
12494 2C17                        60            .byte	$60
12495 2C18                        66            .byte	$66
12496 2C19                        6C            .byte	$6C
12497 2C1A                        78            .byte	$78
12498 2C1B                        78            .byte	$78
12499 2C1C                        6C            .byte	$6C
12500 2C1D                        66            .byte	$66
12501 2C1E                        E6            .byte	$E6
12502 2C1F                        00            .byte	0
12503 2C20                        00            .byte	0
12504 2C21                        00            .byte	0
12505 2C22                        00            .byte	0
12506                                           ! 1476  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12507 2C23                        00            .byte	0
12508 2C24                        00            .byte	0
12509 2C25                        38            .byte	$38
12510 2C26                        18            .byte	$18
12511 2C27                        18            .byte	$18
12512 2C28                        18            .byte	$18
12513 2C29                        18            .byte	$18
12514 2C2A                        18            .byte	$18
12515 2C2B                        18            .byte	$18
12516 2C2C                        18            .byte	$18
12517 2C2D                        18            .byte	$18
12518 2C2E                        3C            .byte	$3C
12519 2C2F                        00            .byte	0
12520 2C30                        00            .byte	0
12521 2C31                        00            .byte	0
12522 2C32                        00            .byte	0
12523                                           ! 1477  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12524 2C33                        00            .byte	0
12525 2C34                        00            .byte	0
12526 2C35                        00            .byte	0
12527 2C36                        00            .byte	0
12528 2C37                        00            .byte	0
12529 2C38                        E6            .byte	$E6
12530 2C39                        FF            .byte	$FF
12531 2C3A                        DB            .byte	$DB
12532 2C3B                        DB            .byte	$DB
12533 2C3C                        DB            .byte	$DB
12534 2C3D                        DB            .byte	$DB
12535 2C3E                        DB            .byte	$DB
12536 2C3F                        00            .byte	0
12537 2C40                        00            .byte	0
12538 2C41                        00            .byte	0
12539 2C42                        00            .byte	0
12540                                           ! 1478  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12541 2C43                        00            .byte	0
12542 2C44                        00            .byte	0
12543 2C45                        00            .byte	0
12544 2C46                        00            .byte	0
12545 2C47                        00            .byte	0
12546 2C48                        DC            .byte	$DC
12547 2C49                        66            .byte	$66
12548 2C4A                        66            .byte	$66
12549 2C4B                        66            .byte	$66
12550 2C4C                        66            .byte	$66
12551 2C4D                        66            .byte	$66
12552 2C4E                        66            .byte	$66
12553 2C4F                        00            .byte	0
12554 2C50                        00            .byte	0
12555 2C51                        00            .byte	0
12556 2C52                        00            .byte	0
12557                                           ! 1479  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12558 2C53                        00            .byte	0
12559 2C54                        00            .byte	0
12560 2C55                        00            .byte	0
12561 2C56                        00            .byte	0
12562 2C57                        00            .byte	0
12563 2C58                        7C            .byte	$7C
12564 2C59                        C6            .byte	$C6
12565 2C5A                        C6            .byte	$C6
12566 2C5B                        C6            .byte	$C6
12567 2C5C                        C6            .byte	$C6
12568 2C5D                        C6            .byte	$C6
12569 2C5E                        7C            .byte	$7C
12570 2C5F                        00            .byte	0
12571 2C60                        00            .byte	0
12572 2C61                        00            .byte	0
12573 2C62                        00            .byte	0
12574                                           ! 1480  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12575 2C63                        00            .byte	0
12576 2C64                        00            .byte	0
12577 2C65                        00            .byte	0
12578 2C66                        00            .byte	0
12579 2C67                        00            .byte	0
12580 2C68                        DC            .byte	$DC
12581 2C69                        66            .byte	$66
12582 2C6A                        66            .byte	$66
12583 2C6B                        66            .byte	$66
12584 2C6C                        66            .byte	$66
12585 2C6D                        66            .byte	$66
12586 2C6E                        7C            .byte	$7C
12587 2C6F                        60            .byte	$60
12588 2C70                        60            .byte	$60
12589 2C71                        F0            .byte	$F0
12590 2C72                        00            .byte	0
12591                                           ! 1481  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12592 2C73                        00            .byte	0
12593 2C74                        00            .byte	0
12594 2C75                        00            .byte	0
12595 2C76                        00            .byte	0
12596 2C77                        00            .byte	0
12597 2C78                        76            .byte	$76
12598 2C79                        CC            .byte	$CC
12599 2C7A                        CC            .byte	$CC
12600 2C7B                        CC            .byte	$CC
12601 2C7C                        CC            .byte	$CC
12602 2C7D                        CC            .byte	$CC
12603 2C7E                        7C            .byte	$7C
12604 2C7F                        0C            .byte	$C
12605 2C80                        0C            .byte	$C
12606 2C81                        1E            .byte	$1E
12607 2C82                        00            .byte	0
12608                                           ! 1482  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12609 2C83                        00            .byte	0
12610 2C84                        00            .byte	0
12611 2C85                        00            .byte	0
12612 2C86                        00            .byte	0
12613 2C87                        00            .byte	0
12614 2C88                        DC            .byte	$DC
12615 2C89                        76            .byte	$76
12616 2C8A                        66            .byte	$66
12617 2C8B                        60            .byte	$60
12618 2C8C                        60            .byte	$60
12619 2C8D                        60            .byte	$60
12620 2C8E                        F0            .byte	$F0
12621 2C8F                        00            .byte	0
12622 2C90                        00            .byte	0
12623 2C91                        00            .byte	0
12624 2C92                        00            .byte	0
12625                                           ! 1483  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12626 2C93                        00            .byte	0
12627 2C94                        00            .byte	0
12628 2C95                        00            .byte	0
12629 2C96                        00            .byte	0
12630 2C97                        00            .byte	0
12631 2C98                        7C            .byte	$7C
12632 2C99                        C6            .byte	$C6
12633 2C9A                        60            .byte	$60
12634 2C9B                        38            .byte	$38
12635 2C9C                        0C            .byte	$C
12636 2C9D                        C6            .byte	$C6
12637 2C9E                        7C            .byte	$7C
12638 2C9F                        00            .byte	0
12639 2CA0                        00            .byte	0
12640 2CA1                        00            .byte	0
12641 2CA2                        00            .byte	0
12642                                           ! 1484  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12643 2CA3                        00            .byte	0
12644 2CA4                        00            .byte	0
12645 2CA5                        10            .byte	$10
12646 2CA6                        30            .byte	$30
12647 2CA7                        30            .byte	$30
12648 2CA8                        FC            .byte	$FC
12649 2CA9                        30            .byte	$30
12650 2CAA                        30            .byte	$30
12651 2CAB                        30            .byte	$30
12652 2CAC                        30            .byte	$30
12653 2CAD                        36            .byte	$36
12654 2CAE                        1C            .byte	$1C
12655 2CAF                        00            .byte	0
12656 2CB0                        00            .byte	0
12657 2CB1                        00            .byte	0
12658 2CB2                        00            .byte	0
12659                                           ! 1485  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12660 2CB3                        00            .byte	0
12661 2CB4                        00            .byte	0
12662 2CB5                        00            .byte	0
12663 2CB6                        00            .byte	0
12664 2CB7                        00            .byte	0
12665 2CB8                        CC            .byte	$CC
12666 2CB9                        CC            .byte	$CC
12667 2CBA                        CC            .byte	$CC
12668 2CBB                        CC            .byte	$CC
12669 2CBC                        CC            .byte	$CC
12670 2CBD                        CC            .byte	$CC
12671 2CBE                        76            .byte	$76
12672 2CBF                        00            .byte	0
12673 2CC0                        00            .byte	0
12674 2CC1                        00            .byte	0
12675 2CC2                        00            .byte	0
12676                                           ! 1486  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3,
12677 2CC3                        00            .byte	0
12678 2CC4                        00            .byte	0
12679 2CC5                        00            .byte	0
12680 2CC6                        00            .byte	0
12681 2CC7                        00            .byte	0
12682 2CC8                        C3            .byte	$C3
12683 2CC9                        C3            .byte	$C3
12684 2CCA                        C3            .byte	$C3
12685                                           ! 1486  0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12686 2CCB                        C3            .byte	$C3
12687 2CCC                        66            .byte	$66
12688 2CCD                        3C            .byte	$3C
12689 2CCE                        18            .byte	$18
12690 2CCF                        00            .byte	0
12691 2CD0                        00            .byte	0
12692 2CD1                        00            .byte	0
12693 2CD2                        00            .byte	0
12694                                           ! 1487  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12695 2CD3                        00            .byte	0
12696 2CD4                        00            .byte	0
12697 2CD5                        00            .byte	0
12698 2CD6                        00            .byte	0
12699 2CD7                        00            .byte	0
12700 2CD8                        C3            .byte	$C3
12701 2CD9                        C3            .byte	$C3
12702 2CDA                        C3            .byte	$C3
12703 2CDB                        DB            .byte	$DB
12704 2CDC                        DB            .byte	$DB
12705 2CDD                        FF            .byte	$FF
12706 2CDE                        66            .byte	$66
12707 2CDF                        00            .byte	0
12708 2CE0                        00            .byte	0
12709 2CE1                        00            .byte	0
12710 2CE2                        00            .byte	0
12711                                           ! 1488  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12712 2CE3                        00            .byte	0
12713 2CE4                        00            .byte	0
12714 2CE5                        00            .byte	0
12715 2CE6                        00            .byte	0
12716 2CE7                        00            .byte	0
12717 2CE8                        C3            .byte	$C3
12718 2CE9                        66            .byte	$66
12719 2CEA                        3C            .byte	$3C
12720 2CEB                        18            .byte	$18
12721 2CEC                        3C            .byte	$3C
12722 2CED                        66            .byte	$66
12723 2CEE                        C3            .byte	$C3
12724 2CEF                        00            .byte	0
12725 2CF0                        00            .byte	0
12726 2CF1                        00            .byte	0
12727 2CF2                        00            .byte	0
12728                                           ! 1489  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12729 2CF3                        00            .byte	0
12730 2CF4                        00            .byte	0
12731 2CF5                        00            .byte	0
12732 2CF6                        00            .byte	0
12733 2CF7                        00            .byte	0
12734 2CF8                        C6            .byte	$C6
12735 2CF9                        C6            .byte	$C6
12736 2CFA                        C6            .byte	$C6
12737 2CFB                        C6            .byte	$C6
12738 2CFC                        C6            .byte	$C6
12739 2CFD                        C6            .byte	$C6
12740 2CFE                        7E            .byte	$7E
12741 2CFF                        06            .byte	6
12742 2D00                        0C            .byte	$C
12743 2D01                        F8            .byte	$F8
12744 2D02                        00            .byte	0
12745                                           ! 1490  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12746 2D03                        00            .byte	0
12747 2D04                        00            .byte	0
12748 2D05                        00            .byte	0
12749 2D06                        00            .byte	0
12750 2D07                        00            .byte	0
12751 2D08                        FE            .byte	$FE
12752 2D09                        CC            .byte	$CC
12753 2D0A                        18            .byte	$18
12754 2D0B                        30            .byte	$30
12755 2D0C                        60            .byte	$60
12756 2D0D                        C6            .byte	$C6
12757 2D0E                        FE            .byte	$FE
12758 2D0F                        00            .byte	0
12759 2D10                        00            .byte	0
12760 2D11                        00            .byte	0
12761 2D12                        00            .byte	0
12762                                           ! 1491  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12763 2D13                        00            .byte	0
12764 2D14                        00            .byte	0
12765 2D15                        0E            .byte	$E
12766 2D16                        18            .byte	$18
12767 2D17                        18            .byte	$18
12768 2D18                        18            .byte	$18
12769 2D19                        70            .byte	$70
12770 2D1A                        18            .byte	$18
12771 2D1B                        18            .byte	$18
12772 2D1C                        18            .byte	$18
12773 2D1D                        18            .byte	$18
12774 2D1E                        0E            .byte	$E
12775 2D1F                        00            .byte	0
12776 2D20                        00            .byte	0
12777 2D21                        00            .byte	0
12778 2D22                        00            .byte	0
12779                                           ! 1492  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12780 2D23                        00            .byte	0
12781 2D24                        00            .byte	0
12782 2D25                        18            .byte	$18
12783 2D26                        18            .byte	$18
12784 2D27                        18            .byte	$18
12785 2D28                        18            .byte	$18
12786 2D29                        00            .byte	0
12787 2D2A                        18            .byte	$18
12788 2D2B                        18            .byte	$18
12789 2D2C                        18            .byte	$18
12790 2D2D                        18            .byte	$18
12791 2D2E                        18            .byte	$18
12792 2D2F                        00            .byte	0
12793 2D30                        00            .byte	0
12794 2D31                        00            .byte	0
12795 2D32                        00            .byte	0
12796                                           ! 1493  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12797 2D33                        00            .byte	0
12798 2D34                        00            .byte	0
12799 2D35                        70            .byte	$70
12800 2D36                        18            .byte	$18
12801 2D37                        18            .byte	$18
12802 2D38                        18            .byte	$18
12803 2D39                        0E            .byte	$E
12804 2D3A                        18            .byte	$18
12805 2D3B                        18            .byte	$18
12806 2D3C                        18            .byte	$18
12807 2D3D                        18            .byte	$18
12808 2D3E                        70            .byte	$70
12809 2D3F                        00            .byte	0
12810 2D40                        00            .byte	0
12811 2D41                        00            .byte	0
12812 2D42                        00            .byte	0
12813                                           ! 1494  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12814 2D43                        00            .byte	0
12815 2D44                        00            .byte	0
12816 2D45                        76            .byte	$76
12817 2D46                        DC            .byte	$DC
12818 2D47                        00            .byte	0
12819 2D48                        00            .byte	0
12820 2D49                        00            .byte	0
12821 2D4A                        00            .byte	0
12822 2D4B                        00            .byte	0
12823 2D4C                        00            .byte	0
12824 2D4D                        00            .byte	0
12825 2D4E                        00            .byte	0
12826 2D4F                        00            .byte	0
12827 2D50                        00            .byte	0
12828 2D51                        00            .byte	0
12829 2D52                        00            .byte	0
12830                                           ! 1495  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12831 2D53                        00            .byte	0
12832 2D54                        00            .byte	0
12833 2D55                        00            .byte	0
12834 2D56                        00            .byte	0
12835 2D57                        10            .byte	$10
12836 2D58                        38            .byte	$38
12837 2D59                        6C            .byte	$6C
12838 2D5A                        C6            .byte	$C6
12839 2D5B                        C6            .byte	$C6
12840 2D5C                        C6            .byte	$C6
12841 2D5D                        FE            .byte	$FE
12842 2D5E                        00            .byte	0
12843 2D5F                        00            .byte	0
12844 2D60                        00            .byte	0
12845 2D61                        00            .byte	0
12846 2D62                        00            .byte	0
12847                                           ! 1496  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12848 2D63                        00            .byte	0
12849 2D64                        00            .byte	0
12850 2D65                        3C            .byte	$3C
12851 2D66                        66            .byte	$66
12852 2D67                        C2            .byte	$C2
12853 2D68                        C0            .byte	$C0
12854 2D69                        C0            .byte	$C0
12855 2D6A                        C0            .byte	$C0
12856 2D6B                        C2            .byte	$C2
12857 2D6C                        66            .byte	$66
12858 2D6D                        3C            .byte	$3C
12859 2D6E                        0C            .byte	$C
12860 2D6F                        06            .byte	6
12861 2D70                        7C            .byte	$7C
12862 2D71                        00            .byte	0
12863 2D72                        00            .byte	0
12864                                           ! 1497  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12865 2D73                        00            .byte	0
12866 2D74                        00            .byte	0
12867 2D75                        CC            .byte	$CC
12868 2D76                        00            .byte	0
12869 2D77                        00            .byte	0
12870 2D78                        CC            .byte	$CC
12871 2D79                        CC            .byte	$CC
12872 2D7A                        CC            .byte	$CC
12873 2D7B                        CC            .byte	$CC
12874 2D7C                        CC            .byte	$CC
12875 2D7D                        CC            .byte	$CC
12876 2D7E                        76            .byte	$76
12877 2D7F                        00            .byte	0
12878 2D80                        00            .byte	0
12879 2D81                        00            .byte	0
12880 2D82                        00            .byte	0
12881                                           ! 1498  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12882 2D83                        00            .byte	0
12883 2D84                        0C            .byte	$C
12884 2D85                        18            .byte	$18
12885 2D86                        30            .byte	$30
12886 2D87                        00            .byte	0
12887 2D88                        7C            .byte	$7C
12888 2D89                        C6            .byte	$C6
12889 2D8A                        FE            .byte	$FE
12890 2D8B                        C0            .byte	$C0
12891 2D8C                        C0            .byte	$C0
12892 2D8D                        C6            .byte	$C6
12893 2D8E                        7C            .byte	$7C
12894 2D8F                        00            .byte	0
12895 2D90                        00            .byte	0
12896 2D91                        00            .byte	0
12897 2D92                        00            .byte	0
12898                                           ! 1499  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12899 2D93                        00            .byte	0
12900 2D94                        10            .byte	$10
12901 2D95                        38            .byte	$38
12902 2D96                        6C            .byte	$6C
12903 2D97                        00            .byte	0
12904 2D98                        78            .byte	$78
12905 2D99                        0C            .byte	$C
12906 2D9A                        7C            .byte	$7C
12907 2D9B                        CC            .byte	$CC
12908 2D9C                        CC            .byte	$CC
12909 2D9D                        CC            .byte	$CC
12910 2D9E                        76            .byte	$76
12911 2D9F                        00            .byte	0
12912 2DA0                        00            .byte	0
12913 2DA1                        00            .byte	0
12914 2DA2                        00            .byte	0
12915                                           ! 1500  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12916 2DA3                        00            .byte	0
12917 2DA4                        00            .byte	0
12918 2DA5                        CC            .byte	$CC
12919 2DA6                        00            .byte	0
12920 2DA7                        00            .byte	0
12921 2DA8                        78            .byte	$78
12922 2DA9                        0C            .byte	$C
12923 2DAA                        7C            .byte	$7C
12924 2DAB                        CC            .byte	$CC
12925 2DAC                        CC            .byte	$CC
12926 2DAD                        CC            .byte	$CC
12927 2DAE                        76            .byte	$76
12928 2DAF                        00            .byte	0
12929 2DB0                        00            .byte	0
12930 2DB1                        00            .byte	0
12931 2DB2                        00            .byte	0
12932                                           ! 1501  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12933 2DB3                        00            .byte	0
12934 2DB4                        60            .byte	$60
12935 2DB5                        30            .byte	$30
12936 2DB6                        18            .byte	$18
12937 2DB7                        00            .byte	0
12938 2DB8                        78            .byte	$78
12939 2DB9                        0C            .byte	$C
12940 2DBA                        7C            .byte	$7C
12941 2DBB                        CC            .byte	$CC
12942 2DBC                        CC            .byte	$CC
12943 2DBD                        CC            .byte	$CC
12944 2DBE                        76            .byte	$76
12945 2DBF                        00            .byte	0
12946 2DC0                        00            .byte	0
12947 2DC1                        00            .byte	0
12948 2DC2                        00            .byte	0
12949                                           ! 1502  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12950 2DC3                        00            .byte	0
12951 2DC4                        38            .byte	$38
12952 2DC5                        6C            .byte	$6C
12953 2DC6                        38            .byte	$38
12954 2DC7                        00            .byte	0
12955 2DC8                        78            .byte	$78
12956 2DC9                        0C            .byte	$C
12957 2DCA                        7C            .byte	$7C
12958 2DCB                        CC            .byte	$CC
12959 2DCC                        CC            .byte	$CC
12960 2DCD                        CC            .byte	$CC
12961 2DCE                        76            .byte	$76
12962 2DCF                        00            .byte	0
12963 2DD0                        00            .byte	0
12964 2DD1                        00            .byte	0
12965 2DD2                        00            .byte	0
12966                                           ! 1503  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12967 2DD3                        00            .byte	0
12968 2DD4                        00            .byte	0
12969 2DD5                        00            .byte	0
12970 2DD6                        00            .byte	0
12971 2DD7                        3C            .byte	$3C
12972 2DD8                        66            .byte	$66
12973 2DD9                        60            .byte	$60
12974 2DDA                        60            .byte	$60
12975 2DDB                        66            .byte	$66
12976 2DDC                        3C            .byte	$3C
12977 2DDD                        0C            .byte	$C
12978 2DDE                        06            .byte	6
12979 2DDF                        3C            .byte	$3C
12980 2DE0                        00            .byte	0
12981 2DE1                        00            .byte	0
12982 2DE2                        00            .byte	0
12983                                           ! 1504  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12984 2DE3                        00            .byte	0
12985 2DE4                        10            .byte	$10
12986 2DE5                        38            .byte	$38
12987 2DE6                        6C            .byte	$6C
12988 2DE7                        00            .byte	0
12989 2DE8                        7C            .byte	$7C
12990 2DE9                        C6            .byte	$C6
12991 2DEA                        FE            .byte	$FE
12992 2DEB                        C0            .byte	$C0
12993 2DEC                        C0            .byte	$C0
12994 2DED                        C6            .byte	$C6
12995 2DEE                        7C            .byte	$7C
12996 2DEF                        00            .byte	0
12997 2DF0                        00            .byte	0
12998 2DF1                        00            .byte	0
12999 2DF2                        00            .byte	0
13000                                           ! 1505  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13001 2DF3                        00            .byte	0
13002 2DF4                        00            .byte	0
13003 2DF5                        C6            .byte	$C6
13004 2DF6                        00            .byte	0
13005 2DF7                        00            .byte	0
13006 2DF8                        7C            .byte	$7C
13007 2DF9                        C6            .byte	$C6
13008 2DFA                        FE            .byte	$FE
13009 2DFB                        C0            .byte	$C0
13010 2DFC                        C0            .byte	$C0
13011 2DFD                        C6            .byte	$C6
13012 2DFE                        7C            .byte	$7C
13013 2DFF                        00            .byte	0
13014 2E00                        00            .byte	0
13015 2E01                        00            .byte	0
13016 2E02                        00            .byte	0
13017                                           ! 1506  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13018 2E03                        00            .byte	0
13019 2E04                        60            .byte	$60
13020 2E05                        30            .byte	$30
13021 2E06                        18            .byte	$18
13022 2E07                        00            .byte	0
13023 2E08                        7C            .byte	$7C
13024 2E09                        C6            .byte	$C6
13025 2E0A                        FE            .byte	$FE
13026 2E0B                        C0            .byte	$C0
13027 2E0C                        C0            .byte	$C0
13028 2E0D                        C6            .byte	$C6
13029 2E0E                        7C            .byte	$7C
13030 2E0F                        00            .byte	0
13031 2E10                        00            .byte	0
13032 2E11                        00            .byte	0
13033 2E12                        00            .byte	0
13034                                           ! 1507  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18
13035 2E13                        00            .byte	0
13036 2E14                        00            .byte	0
13037 2E15                        66            .byte	$66
13038 2E16                        00            .byte	0
13039 2E17                        00            .byte	0
13040 2E18                        38            .byte	$38
13041 2E19                        18            .byte	$18
13042 2E1A                        18            .byte	$18
13043 2E1B                        18            .byte	$18
13044 2E1C                        18            .byte	$18
13045                                           ! 1507 , 0x3c, 0x00, 0x00, 0x00, 0x00,
13046 2E1D                        18            .byte	$18
13047 2E1E                        3C            .byte	$3C
13048 2E1F                        00            .byte	0
13049 2E20                        00            .byte	0
13050 2E21                        00            .byte	0
13051 2E22                        00            .byte	0
13052                                           ! 1508  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13053 2E23                        00            .byte	0
13054 2E24                        18            .byte	$18
13055 2E25                        3C            .byte	$3C
13056 2E26                        66            .byte	$66
13057 2E27                        00            .byte	0
13058 2E28                        38            .byte	$38
13059 2E29                        18            .byte	$18
13060 2E2A                        18            .byte	$18
13061 2E2B                        18            .byte	$18
13062 2E2C                        18            .byte	$18
13063 2E2D                        18            .byte	$18
13064 2E2E                        3C            .byte	$3C
13065 2E2F                        00            .byte	0
13066 2E30                        00            .byte	0
13067 2E31                        00            .byte	0
13068 2E32                        00            .byte	0
13069                                           ! 1509  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13070 2E33                        00            .byte	0
13071 2E34                        60            .byte	$60
13072 2E35                        30            .byte	$30
13073 2E36                        18            .byte	$18
13074 2E37                        00            .byte	0
13075 2E38                        38            .byte	$38
13076 2E39                        18            .byte	$18
13077 2E3A                        18            .byte	$18
13078 2E3B                        18            .byte	$18
13079 2E3C                        18            .byte	$18
13080 2E3D                        18            .byte	$18
13081 2E3E                        3C            .byte	$3C
13082 2E3F                        00            .byte	0
13083 2E40                        00            .byte	0
13084 2E41                        00            .byte	0
13085 2E42                        00            .byte	0
13086                                           ! 1510  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13087 2E43                        00            .byte	0
13088 2E44                        C6            .byte	$C6
13089 2E45                        00            .byte	0
13090 2E46                        10            .byte	$10
13091 2E47                        38            .byte	$38
13092 2E48                        6C            .byte	$6C
13093 2E49                        C6            .byte	$C6
13094 2E4A                        C6            .byte	$C6
13095 2E4B                        FE            .byte	$FE
13096 2E4C                        C6            .byte	$C6
13097 2E4D                        C6            .byte	$C6
13098 2E4E                        C6            .byte	$C6
13099 2E4F                        00            .byte	0
13100 2E50                        00            .byte	0
13101 2E51                        00            .byte	0
13102 2E52                        00            .byte	0
13103                                           ! 1511  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13104 2E53                        38            .byte	$38
13105 2E54                        6C            .byte	$6C
13106 2E55                        38            .byte	$38
13107 2E56                        00            .byte	0
13108 2E57                        38            .byte	$38
13109 2E58                        6C            .byte	$6C
13110 2E59                        C6            .byte	$C6
13111 2E5A                        C6            .byte	$C6
13112 2E5B                        FE            .byte	$FE
13113 2E5C                        C6            .byte	$C6
13114 2E5D                        C6            .byte	$C6
13115 2E5E                        C6            .byte	$C6
13116 2E5F                        00            .byte	0
13117 2E60                        00            .byte	0
13118 2E61                        00            .byte	0
13119 2E62                        00            .byte	0
13120                                           ! 1512  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13121 2E63                        18            .byte	$18
13122 2E64                        30            .byte	$30
13123 2E65                        60            .byte	$60
13124 2E66                        00            .byte	0
13125 2E67                        FE            .byte	$FE
13126 2E68                        66            .byte	$66
13127 2E69                        60            .byte	$60
13128 2E6A                        7C            .byte	$7C
13129 2E6B                        60            .byte	$60
13130 2E6C                        60            .byte	$60
13131 2E6D                        66            .byte	$66
13132 2E6E                        FE            .byte	$FE
13133 2E6F                        00            .byte	0
13134 2E70                        00            .byte	0
13135 2E71                        00            .byte	0
13136 2E72                        00            .byte	0
13137                                           ! 1513  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13138 2E73                        00            .byte	0
13139 2E74                        00            .byte	0
13140 2E75                        00            .byte	0
13141 2E76                        00            .byte	0
13142 2E77                        00            .byte	0
13143 2E78                        6E            .byte	$6E
13144 2E79                        3B            .byte	$3B
13145 2E7A                        1B            .byte	$1B
13146 2E7B                        7E            .byte	$7E
13147 2E7C                        D8            .byte	$D8
13148 2E7D                        DC            .byte	$DC
13149 2E7E                        77            .byte	$77
13150 2E7F                        00            .byte	0
13151 2E80                        00            .byte	0
13152 2E81                        00            .byte	0
13153 2E82                        00            .byte	0
13154                                           ! 1514  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13155 2E83                        00            .byte	0
13156 2E84                        00            .byte	0
13157 2E85                        3E            .byte	$3E
13158 2E86                        6C            .byte	$6C
13159 2E87                        CC            .byte	$CC
13160 2E88                        CC            .byte	$CC
13161 2E89                        FE            .byte	$FE
13162 2E8A                        CC            .byte	$CC
13163 2E8B                        CC            .byte	$CC
13164 2E8C                        CC            .byte	$CC
13165 2E8D                        CC            .byte	$CC
13166 2E8E                        CE            .byte	$CE
13167 2E8F                        00            .byte	0
13168 2E90                        00            .byte	0
13169 2E91                        00            .byte	0
13170 2E92                        00            .byte	0
13171                                           ! 1515  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13172 2E93                        00            .byte	0
13173 2E94                        10            .byte	$10
13174 2E95                        38            .byte	$38
13175 2E96                        6C            .byte	$6C
13176 2E97                        00            .byte	0
13177 2E98                        7C            .byte	$7C
13178 2E99                        C6            .byte	$C6
13179 2E9A                        C6            .byte	$C6
13180 2E9B                        C6            .byte	$C6
13181 2E9C                        C6            .byte	$C6
13182 2E9D                        C6            .byte	$C6
13183 2E9E                        7C            .byte	$7C
13184 2E9F                        00            .byte	0
13185 2EA0                        00            .byte	0
13186 2EA1                        00            .byte	0
13187 2EA2                        00            .byte	0
13188                                           ! 1516  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13189 2EA3                        00            .byte	0
13190 2EA4                        00            .byte	0
13191 2EA5                        C6            .byte	$C6
13192 2EA6                        00            .byte	0
13193 2EA7                        00            .byte	0
13194 2EA8                        7C            .byte	$7C
13195 2EA9                        C6            .byte	$C6
13196 2EAA                        C6            .byte	$C6
13197 2EAB                        C6            .byte	$C6
13198 2EAC                        C6            .byte	$C6
13199 2EAD                        C6            .byte	$C6
13200 2EAE                        7C            .byte	$7C
13201 2EAF                        00            .byte	0
13202 2EB0                        00            .byte	0
13203 2EB1                        00            .byte	0
13204 2EB2                        00            .byte	0
13205                                           ! 1517  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13206 2EB3                        00            .byte	0
13207 2EB4                        60            .byte	$60
13208 2EB5                        30            .byte	$30
13209 2EB6                        18            .byte	$18
13210 2EB7                        00            .byte	0
13211 2EB8                        7C            .byte	$7C
13212 2EB9                        C6            .byte	$C6
13213 2EBA                        C6            .byte	$C6
13214 2EBB                        C6            .byte	$C6
13215 2EBC                        C6            .byte	$C6
13216 2EBD                        C6            .byte	$C6
13217 2EBE                        7C            .byte	$7C
13218 2EBF                        00            .byte	0
13219 2EC0                        00            .byte	0
13220 2EC1                        00            .byte	0
13221 2EC2                        00            .byte	0
13222                                           ! 1518  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13223 2EC3                        00            .byte	0
13224 2EC4                        30            .byte	$30
13225 2EC5                        78            .byte	$78
13226 2EC6                        CC            .byte	$CC
13227 2EC7                        00            .byte	0
13228 2EC8                        CC            .byte	$CC
13229 2EC9                        CC            .byte	$CC
13230 2ECA                        CC            .byte	$CC
13231 2ECB                        CC            .byte	$CC
13232 2ECC                        CC            .byte	$CC
13233 2ECD                        CC            .byte	$CC
13234 2ECE                        76            .byte	$76
13235 2ECF                        00            .byte	0
13236 2ED0                        00            .byte	0
13237 2ED1                        00            .byte	0
13238 2ED2                        00            .byte	0
13239                                           ! 1519  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13240 2ED3                        00            .byte	0
13241 2ED4                        60            .byte	$60
13242 2ED5                        30            .byte	$30
13243 2ED6                        18            .byte	$18
13244 2ED7                        00            .byte	0
13245 2ED8                        CC            .byte	$CC
13246 2ED9                        CC            .byte	$CC
13247 2EDA                        CC            .byte	$CC
13248 2EDB                        CC            .byte	$CC
13249 2EDC                        CC            .byte	$CC
13250 2EDD                        CC            .byte	$CC
13251 2EDE                        76            .byte	$76
13252 2EDF                        00            .byte	0
13253 2EE0                        00            .byte	0
13254 2EE1                        00            .byte	0
13255 2EE2                        00            .byte	0
13256                                           ! 1520  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13257 2EE3                        00            .byte	0
13258 2EE4                        00            .byte	0
13259 2EE5                        C6            .byte	$C6
13260 2EE6                        00            .byte	0
13261 2EE7                        00            .byte	0
13262 2EE8                        C6            .byte	$C6
13263 2EE9                        C6            .byte	$C6
13264 2EEA                        C6            .byte	$C6
13265 2EEB                        C6            .byte	$C6
13266 2EEC                        C6            .byte	$C6
13267 2EED                        C6            .byte	$C6
13268 2EEE                        7E            .byte	$7E
13269 2EEF                        06            .byte	6
13270 2EF0                        0C            .byte	$C
13271 2EF1                        78            .byte	$78
13272 2EF2                        00            .byte	0
13273                                           ! 1521  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13274 2EF3                        00            .byte	0
13275 2EF4                        C6            .byte	$C6
13276 2EF5                        00            .byte	0
13277 2EF6                        7C            .byte	$7C
13278 2EF7                        C6            .byte	$C6
13279 2EF8                        C6            .byte	$C6
13280 2EF9                        C6            .byte	$C6
13281 2EFA                        C6            .byte	$C6
13282 2EFB                        C6            .byte	$C6
13283 2EFC                        C6            .byte	$C6
13284 2EFD                        C6            .byte	$C6
13285 2EFE                        7C            .byte	$7C
13286 2EFF                        00            .byte	0
13287 2F00                        00            .byte	0
13288 2F01                        00            .byte	0
13289 2F02                        00            .byte	0
13290                                           ! 1522  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13291 2F03                        00            .byte	0
13292 2F04                        C6            .byte	$C6
13293 2F05                        00            .byte	0
13294 2F06                        C6            .byte	$C6
13295 2F07                        C6            .byte	$C6
13296 2F08                        C6            .byte	$C6
13297 2F09                        C6            .byte	$C6
13298 2F0A                        C6            .byte	$C6
13299 2F0B                        C6            .byte	$C6
13300 2F0C                        C6            .byte	$C6
13301 2F0D                        C6            .byte	$C6
13302 2F0E                        7C            .byte	$7C
13303 2F0F                        00            .byte	0
13304 2F10                        00            .byte	0
13305 2F11                        00            .byte	0
13306 2F12                        00            .byte	0
13307                                           ! 1523  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13308 2F13                        00            .byte	0
13309 2F14                        18            .byte	$18
13310 2F15                        18            .byte	$18
13311 2F16                        7E            .byte	$7E
13312 2F17                        C3            .byte	$C3
13313 2F18                        C0            .byte	$C0
13314 2F19                        C0            .byte	$C0
13315 2F1A                        C0            .byte	$C0
13316 2F1B                        C3            .byte	$C3
13317 2F1C                        7E            .byte	$7E
13318 2F1D                        18            .byte	$18
13319 2F1E                        18            .byte	$18
13320 2F1F                        00            .byte	0
13321 2F20                        00            .byte	0
13322 2F21                        00            .byte	0
13323 2F22                        00            .byte	0
13324                                           ! 1524  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13325 2F23                        00            .byte	0
13326 2F24                        38            .byte	$38
13327 2F25                        6C            .byte	$6C
13328 2F26                        64            .byte	$64
13329 2F27                        60            .byte	$60
13330 2F28                        F0            .byte	$F0
13331 2F29                        60            .byte	$60
13332 2F2A                        60            .byte	$60
13333 2F2B                        60            .byte	$60
13334 2F2C                        60            .byte	$60
13335 2F2D                        E6            .byte	$E6
13336 2F2E                        FC            .byte	$FC
13337 2F2F                        00            .byte	0
13338 2F30                        00            .byte	0
13339 2F31                        00            .byte	0
13340 2F32                        00            .byte	0
13341                                           ! 1525  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13342 2F33                        00            .byte	0
13343 2F34                        00            .byte	0
13344 2F35                        C3            .byte	$C3
13345 2F36                        66            .byte	$66
13346 2F37                        3C            .byte	$3C
13347 2F38                        18            .byte	$18
13348 2F39                        FF            .byte	$FF
13349 2F3A                        18            .byte	$18
13350 2F3B                        FF            .byte	$FF
13351 2F3C                        18            .byte	$18
13352 2F3D                        18            .byte	$18
13353 2F3E                        18            .byte	$18
13354 2F3F                        00            .byte	0
13355 2F40                        00            .byte	0
13356 2F41                        00            .byte	0
13357 2F42                        00            .byte	0
13358                                           ! 1526  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13359 2F43                        00            .byte	0
13360 2F44                        FC            .byte	$FC
13361 2F45                        66            .byte	$66
13362 2F46                        66            .byte	$66
13363 2F47                        7C            .byte	$7C
13364 2F48                        62            .byte	$62
13365 2F49                        66            .byte	$66
13366 2F4A                        6F            .byte	$6F
13367 2F4B                        66            .byte	$66
13368 2F4C                        66            .byte	$66
13369 2F4D                        66            .byte	$66
13370 2F4E                        F3            .byte	$F3
13371 2F4F                        00            .byte	0
13372 2F50                        00            .byte	0
13373 2F51                        00            .byte	0
13374 2F52                        00            .byte	0
13375                                           ! 1527  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13376 2F53                        00            .byte	0
13377 2F54                        0E            .byte	$E
13378 2F55                        1B            .byte	$1B
13379 2F56                        18            .byte	$18
13380 2F57                        18            .byte	$18
13381 2F58                        18            .byte	$18
13382 2F59                        7E            .byte	$7E
13383 2F5A                        18            .byte	$18
13384 2F5B                        18            .byte	$18
13385 2F5C                        18            .byte	$18
13386 2F5D                        18            .byte	$18
13387 2F5E                        18            .byte	$18
13388 2F5F                        D8            .byte	$D8
13389 2F60                        70            .byte	$70
13390 2F61                        00            .byte	0
13391 2F62                        00            .byte	0
13392                                           ! 1528  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x0
13393 2F63                        00            .byte	0
13394 2F64                        18            .byte	$18
13395 2F65                        30            .byte	$30
13396 2F66                        60            .byte	$60
13397 2F67                        00            .byte	0
13398 2F68                        78            .byte	$78
13399 2F69                        0C            .byte	$C
13400 2F6A                        7C            .byte	$7C
13401 2F6B                        CC            .byte	$CC
13402 2F6C                        CC            .byte	$CC
13403 2F6D                        CC            .byte	$CC
13404 2F6E                        76            .byte	$76
13405                                           ! 1528 0, 0x00, 0x00, 0x00,
13406 2F6F                        00            .byte	0
13407 2F70                        00            .byte	0
13408 2F71                        00            .byte	0
13409 2F72                        00            .byte	0
13410                                           ! 1529  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13411 2F73                        00            .byte	0
13412 2F74                        0C            .byte	$C
13413 2F75                        18            .byte	$18
13414 2F76                        30            .byte	$30
13415 2F77                        00            .byte	0
13416 2F78                        38            .byte	$38
13417 2F79                        18            .byte	$18
13418 2F7A                        18            .byte	$18
13419 2F7B                        18            .byte	$18
13420 2F7C                        18            .byte	$18
13421 2F7D                        18            .byte	$18
13422 2F7E                        3C            .byte	$3C
13423 2F7F                        00            .byte	0
13424 2F80                        00            .byte	0
13425 2F81                        00            .byte	0
13426 2F82                        00            .byte	0
13427                                           ! 1530  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13428 2F83                        00            .byte	0
13429 2F84                        18            .byte	$18
13430 2F85                        30            .byte	$30
13431 2F86                        60            .byte	$60
13432 2F87                        00            .byte	0
13433 2F88                        7C            .byte	$7C
13434 2F89                        C6            .byte	$C6
13435 2F8A                        C6            .byte	$C6
13436 2F8B                        C6            .byte	$C6
13437 2F8C                        C6            .byte	$C6
13438 2F8D                        C6            .byte	$C6
13439 2F8E                        7C            .byte	$7C
13440 2F8F                        00            .byte	0
13441 2F90                        00            .byte	0
13442 2F91                        00            .byte	0
13443 2F92                        00            .byte	0
13444                                           ! 1531  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13445 2F93                        00            .byte	0
13446 2F94                        18            .byte	$18
13447 2F95                        30            .byte	$30
13448 2F96                        60            .byte	$60
13449 2F97                        00            .byte	0
13450 2F98                        CC            .byte	$CC
13451 2F99                        CC            .byte	$CC
13452 2F9A                        CC            .byte	$CC
13453 2F9B                        CC            .byte	$CC
13454 2F9C                        CC            .byte	$CC
13455 2F9D                        CC            .byte	$CC
13456 2F9E                        76            .byte	$76
13457 2F9F                        00            .byte	0
13458 2FA0                        00            .byte	0
13459 2FA1                        00            .byte	0
13460 2FA2                        00            .byte	0
13461                                           ! 1532  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13462 2FA3                        00            .byte	0
13463 2FA4                        00            .byte	0
13464 2FA5                        76            .byte	$76
13465 2FA6                        DC            .byte	$DC
13466 2FA7                        00            .byte	0
13467 2FA8                        DC            .byte	$DC
13468 2FA9                        66            .byte	$66
13469 2FAA                        66            .byte	$66
13470 2FAB                        66            .byte	$66
13471 2FAC                        66            .byte	$66
13472 2FAD                        66            .byte	$66
13473 2FAE                        66            .byte	$66
13474 2FAF                        00            .byte	0
13475 2FB0                        00            .byte	0
13476 2FB1                        00            .byte	0
13477 2FB2                        00            .byte	0
13478                                           ! 1533  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13479 2FB3                        76            .byte	$76
13480 2FB4                        DC            .byte	$DC
13481 2FB5                        00            .byte	0
13482 2FB6                        C6            .byte	$C6
13483 2FB7                        E6            .byte	$E6
13484 2FB8                        F6            .byte	$F6
13485 2FB9                        FE            .byte	$FE
13486 2FBA                        DE            .byte	$DE
13487 2FBB                        CE            .byte	$CE
13488 2FBC                        C6            .byte	$C6
13489 2FBD                        C6            .byte	$C6
13490 2FBE                        C6            .byte	$C6
13491 2FBF                        00            .byte	0
13492 2FC0                        00            .byte	0
13493 2FC1                        00            .byte	0
13494 2FC2                        00            .byte	0
13495                                           ! 1534  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13496 2FC3                        00            .byte	0
13497 2FC4                        3C            .byte	$3C
13498 2FC5                        6C            .byte	$6C
13499 2FC6                        6C            .byte	$6C
13500 2FC7                        3E            .byte	$3E
13501 2FC8                        00            .byte	0
13502 2FC9                        7E            .byte	$7E
13503 2FCA                        00            .byte	0
13504 2FCB                        00            .byte	0
13505 2FCC                        00            .byte	0
13506 2FCD                        00            .byte	0
13507 2FCE                        00            .byte	0
13508 2FCF                        00            .byte	0
13509 2FD0                        00            .byte	0
13510 2FD1                        00            .byte	0
13511 2FD2                        00            .byte	0
13512                                           ! 1535  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13513 2FD3                        00            .byte	0
13514 2FD4                        38            .byte	$38
13515 2FD5                        6C            .byte	$6C
13516 2FD6                        6C            .byte	$6C
13517 2FD7                        38            .byte	$38
13518 2FD8                        00            .byte	0
13519 2FD9                        7C            .byte	$7C
13520 2FDA                        00            .byte	0
13521 2FDB                        00            .byte	0
13522 2FDC                        00            .byte	0
13523 2FDD                        00            .byte	0
13524 2FDE                        00            .byte	0
13525 2FDF                        00            .byte	0
13526 2FE0                        00            .byte	0
13527 2FE1                        00            .byte	0
13528 2FE2                        00            .byte	0
13529                                           ! 1536  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13530 2FE3                        00            .byte	0
13531 2FE4                        00            .byte	0
13532 2FE5                        30            .byte	$30
13533 2FE6                        30            .byte	$30
13534 2FE7                        00            .byte	0
13535 2FE8                        30            .byte	$30
13536 2FE9                        30            .byte	$30
13537 2FEA                        60            .byte	$60
13538 2FEB                        C0            .byte	$C0
13539 2FEC                        C6            .byte	$C6
13540 2FED                        C6            .byte	$C6
13541 2FEE                        7C            .byte	$7C
13542 2FEF                        00            .byte	0
13543 2FF0                        00            .byte	0
13544 2FF1                        00            .byte	0
13545 2FF2                        00            .byte	0
13546                                           ! 1537  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13547 2FF3                        00            .byte	0
13548 2FF4                        00            .byte	0
13549 2FF5                        00            .byte	0
13550 2FF6                        00            .byte	0
13551 2FF7                        00            .byte	0
13552 2FF8                        00            .byte	0
13553 2FF9                        FE            .byte	$FE
13554 2FFA                        C0            .byte	$C0
13555 2FFB                        C0            .byte	$C0
13556 2FFC                        C0            .byte	$C0
13557 2FFD                        C0            .byte	$C0
13558 2FFE                        00            .byte	0
13559 2FFF                        00            .byte	0
13560 3000                        00            .byte	0
13561 3001                        00            .byte	0
13562 3002                        00            .byte	0
13563                                           ! 1538  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13564 3003                        00            .byte	0
13565 3004                        00            .byte	0
13566 3005                        00            .byte	0
13567 3006                        00            .byte	0
13568 3007                        00            .byte	0
13569 3008                        00            .byte	0
13570 3009                        FE            .byte	$FE
13571 300A                        06            .byte	6
13572 300B                        06            .byte	6
13573 300C                        06            .byte	6
13574 300D                        06            .byte	6
13575 300E                        00            .byte	0
13576 300F                        00            .byte	0
13577 3010                        00            .byte	0
13578 3011                        00            .byte	0
13579 3012                        00            .byte	0
13580                                           ! 1539  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13581 3013                        00            .byte	0
13582 3014                        C0            .byte	$C0
13583 3015                        C0            .byte	$C0
13584 3016                        C2            .byte	$C2
13585 3017                        C6            .byte	$C6
13586 3018                        CC            .byte	$CC
13587 3019                        18            .byte	$18
13588 301A                        30            .byte	$30
13589 301B                        60            .byte	$60
13590 301C                        CE            .byte	$CE
13591 301D                        9B            .byte	$9B
13592 301E                        06            .byte	6
13593 301F                        0C            .byte	$C
13594 3020                        1F            .byte	$1F
13595 3021                        00            .byte	0
13596 3022                        00            .byte	0
13597                                           ! 1540  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13598 3023                        00            .byte	0
13599 3024                        C0            .byte	$C0
13600 3025                        C0            .byte	$C0
13601 3026                        C2            .byte	$C2
13602 3027                        C6            .byte	$C6
13603 3028                        CC            .byte	$CC
13604 3029                        18            .byte	$18
13605 302A                        30            .byte	$30
13606 302B                        66            .byte	$66
13607 302C                        CE            .byte	$CE
13608 302D                        96            .byte	$96
13609 302E                        3E            .byte	$3E
13610 302F                        06            .byte	6
13611 3030                        06            .byte	6
13612 3031                        00            .byte	0
13613 3032                        00            .byte	0
13614                                           ! 1541  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13615 3033                        00            .byte	0
13616 3034                        00            .byte	0
13617 3035                        18            .byte	$18
13618 3036                        18            .byte	$18
13619 3037                        00            .byte	0
13620 3038                        18            .byte	$18
13621 3039                        18            .byte	$18
13622 303A                        18            .byte	$18
13623 303B                        3C            .byte	$3C
13624 303C                        3C            .byte	$3C
13625 303D                        3C            .byte	$3C
13626 303E                        18            .byte	$18
13627 303F                        00            .byte	0
13628 3040                        00            .byte	0
13629 3041                        00            .byte	0
13630 3042                        00            .byte	0
13631                                           ! 1542  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13632 3043                        00            .byte	0
13633 3044                        00            .byte	0
13634 3045                        00            .byte	0
13635 3046                        00            .byte	0
13636 3047                        00            .byte	0
13637 3048                        36            .byte	$36
13638 3049                        6C            .byte	$6C
13639 304A                        D8            .byte	$D8
13640 304B                        6C            .byte	$6C
13641 304C                        36            .byte	$36
13642 304D                        00            .byte	0
13643 304E                        00            .byte	0
13644 304F                        00            .byte	0
13645 3050                        00            .byte	0
13646 3051                        00            .byte	0
13647 3052                        00            .byte	0
13648                                           ! 1543  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13649 3053                        00            .byte	0
13650 3054                        00            .byte	0
13651 3055                        00            .byte	0
13652 3056                        00            .byte	0
13653 3057                        00            .byte	0
13654 3058                        D8            .byte	$D8
13655 3059                        6C            .byte	$6C
13656 305A                        36            .byte	$36
13657 305B                        6C            .byte	$6C
13658 305C                        D8            .byte	$D8
13659 305D                        00            .byte	0
13660 305E                        00            .byte	0
13661 305F                        00            .byte	0
13662 3060                        00            .byte	0
13663 3061                        00            .byte	0
13664 3062                        00            .byte	0
13665                                           ! 1544  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13666 3063                        11            .byte	$11
13667 3064                        44            .byte	$44
13668 3065                        11            .byte	$11
13669 3066                        44            .byte	$44
13670 3067                        11            .byte	$11
13671 3068                        44            .byte	$44
13672 3069                        11            .byte	$11
13673 306A                        44            .byte	$44
13674 306B                        11            .byte	$11
13675 306C                        44            .byte	$44
13676 306D                        11            .byte	$11
13677 306E                        44            .byte	$44
13678 306F                        11            .byte	$11
13679 3070                        44            .byte	$44
13680 3071                        11            .byte	$11
13681 3072                        44            .byte	$44
13682                                           ! 1545  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13683 3073                        55            .byte	$55
13684 3074                        AA            .byte	$AA
13685 3075                        55            .byte	$55
13686 3076                        AA            .byte	$AA
13687 3077                        55            .byte	$55
13688 3078                        AA            .byte	$AA
13689 3079                        55            .byte	$55
13690 307A                        AA            .byte	$AA
13691 307B                        55            .byte	$55
13692 307C                        AA            .byte	$AA
13693 307D                        55            .byte	$55
13694 307E                        AA            .byte	$AA
13695 307F                        55            .byte	$55
13696 3080                        AA            .byte	$AA
13697 3081                        55            .byte	$55
13698 3082                        AA            .byte	$AA
13699                                           ! 1546  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13700 3083                        DD            .byte	$DD
13701 3084                        77            .byte	$77
13702 3085                        DD            .byte	$DD
13703 3086                        77            .byte	$77
13704 3087                        DD            .byte	$DD
13705 3088                        77            .byte	$77
13706 3089                        DD            .byte	$DD
13707 308A                        77            .byte	$77
13708 308B                        DD            .byte	$DD
13709 308C                        77            .byte	$77
13710 308D                        DD            .byte	$DD
13711 308E                        77            .byte	$77
13712 308F                        DD            .byte	$DD
13713 3090                        77            .byte	$77
13714 3091                        DD            .byte	$DD
13715 3092                        77            .byte	$77
13716                                           ! 1547  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13717 3093                        18            .byte	$18
13718 3094                        18            .byte	$18
13719 3095                        18            .byte	$18
13720 3096                        18            .byte	$18
13721 3097                        18            .byte	$18
13722 3098                        18            .byte	$18
13723 3099                        18            .byte	$18
13724 309A                        18            .byte	$18
13725 309B                        18            .byte	$18
13726 309C                        18            .byte	$18
13727 309D                        18            .byte	$18
13728 309E                        18            .byte	$18
13729 309F                        18            .byte	$18
13730 30A0                        18            .byte	$18
13731 30A1                        18            .byte	$18
13732 30A2                        18            .byte	$18
13733                                           ! 1548  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13734 30A3                        18            .byte	$18
13735 30A4                        18            .byte	$18
13736 30A5                        18            .byte	$18
13737 30A6                        18            .byte	$18
13738 30A7                        18            .byte	$18
13739 30A8                        18            .byte	$18
13740 30A9                        18            .byte	$18
13741 30AA                        F8            .byte	$F8
13742 30AB                        18            .byte	$18
13743 30AC                        18            .byte	$18
13744 30AD                        18            .byte	$18
13745 30AE                        18            .byte	$18
13746 30AF                        18            .byte	$18
13747 30B0                        18            .byte	$18
13748 30B1                        18            .byte	$18
13749 30B2                        18            .byte	$18
13750                                           ! 1549  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x
13751 30B3                        18            .byte	$18
13752 30B4                        18            .byte	$18
13753 30B5                        18            .byte	$18
13754 30B6                        18            .byte	$18
13755 30B7                        18            .byte	$18
13756 30B8                        F8            .byte	$F8
13757 30B9                        18            .byte	$18
13758 30BA                        F8            .byte	$F8
13759 30BB                        18            .byte	$18
13760 30BC                        18            .byte	$18
13761 30BD                        18            .byte	$18
13762 30BE                        18            .byte	$18
13763 30BF                        18            .byte	$18
13764 30C0                        18            .byte	$18
13765                                           ! 1549 18, 0x18,
13766 30C1                        18            .byte	$18
13767 30C2                        18            .byte	$18
13768                                           ! 1550  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13769 30C3                        36            .byte	$36
13770 30C4                        36            .byte	$36
13771 30C5                        36            .byte	$36
13772 30C6                        36            .byte	$36
13773 30C7                        36            .byte	$36
13774 30C8                        36            .byte	$36
13775 30C9                        36            .byte	$36
13776 30CA                        F6            .byte	$F6
13777 30CB                        36            .byte	$36
13778 30CC                        36            .byte	$36
13779 30CD                        36            .byte	$36
13780 30CE                        36            .byte	$36
13781 30CF                        36            .byte	$36
13782 30D0                        36            .byte	$36
13783 30D1                        36            .byte	$36
13784 30D2                        36            .byte	$36
13785                                           ! 1551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13786 30D3                        00            .byte	0
13787 30D4                        00            .byte	0
13788 30D5                        00            .byte	0
13789 30D6                        00            .byte	0
13790 30D7                        00            .byte	0
13791 30D8                        00            .byte	0
13792 30D9                        00            .byte	0
13793 30DA                        FE            .byte	$FE
13794 30DB                        36            .byte	$36
13795 30DC                        36            .byte	$36
13796 30DD                        36            .byte	$36
13797 30DE                        36            .byte	$36
13798 30DF                        36            .byte	$36
13799 30E0                        36            .byte	$36
13800 30E1                        36            .byte	$36
13801 30E2                        36            .byte	$36
13802                                           ! 1552  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13803 30E3                        00            .byte	0
13804 30E4                        00            .byte	0
13805 30E5                        00            .byte	0
13806 30E6                        00            .byte	0
13807 30E7                        00            .byte	0
13808 30E8                        F8            .byte	$F8
13809 30E9                        18            .byte	$18
13810 30EA                        F8            .byte	$F8
13811 30EB                        18            .byte	$18
13812 30EC                        18            .byte	$18
13813 30ED                        18            .byte	$18
13814 30EE                        18            .byte	$18
13815 30EF                        18            .byte	$18
13816 30F0                        18            .byte	$18
13817 30F1                        18            .byte	$18
13818 30F2                        18            .byte	$18
13819                                           ! 1553  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13820 30F3                        36            .byte	$36
13821 30F4                        36            .byte	$36
13822 30F5                        36            .byte	$36
13823 30F6                        36            .byte	$36
13824 30F7                        36            .byte	$36
13825 30F8                        F6            .byte	$F6
13826 30F9                        06            .byte	6
13827 30FA                        F6            .byte	$F6
13828 30FB                        36            .byte	$36
13829 30FC                        36            .byte	$36
13830 30FD                        36            .byte	$36
13831 30FE                        36            .byte	$36
13832 30FF                        36            .byte	$36
13833 3100                        36            .byte	$36
13834 3101                        36            .byte	$36
13835 3102                        36            .byte	$36
13836                                           ! 1554  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13837 3103                        36            .byte	$36
13838 3104                        36            .byte	$36
13839 3105                        36            .byte	$36
13840 3106                        36            .byte	$36
13841 3107                        36            .byte	$36
13842 3108                        36            .byte	$36
13843 3109                        36            .byte	$36
13844 310A                        36            .byte	$36
13845 310B                        36            .byte	$36
13846 310C                        36            .byte	$36
13847 310D                        36            .byte	$36
13848 310E                        36            .byte	$36
13849 310F                        36            .byte	$36
13850 3110                        36            .byte	$36
13851 3111                        36            .byte	$36
13852 3112                        36            .byte	$36
13853                                           ! 1555  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13854 3113                        00            .byte	0
13855 3114                        00            .byte	0
13856 3115                        00            .byte	0
13857 3116                        00            .byte	0
13858 3117                        00            .byte	0
13859 3118                        FE            .byte	$FE
13860 3119                        06            .byte	6
13861 311A                        F6            .byte	$F6
13862 311B                        36            .byte	$36
13863 311C                        36            .byte	$36
13864 311D                        36            .byte	$36
13865 311E                        36            .byte	$36
13866 311F                        36            .byte	$36
13867 3120                        36            .byte	$36
13868 3121                        36            .byte	$36
13869 3122                        36            .byte	$36
13870                                           ! 1556  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13871 3123                        36            .byte	$36
13872 3124                        36            .byte	$36
13873 3125                        36            .byte	$36
13874 3126                        36            .byte	$36
13875 3127                        36            .byte	$36
13876 3128                        F6            .byte	$F6
13877 3129                        06            .byte	6
13878 312A                        FE            .byte	$FE
13879 312B                        00            .byte	0
13880 312C                        00            .byte	0
13881 312D                        00            .byte	0
13882 312E                        00            .byte	0
13883 312F                        00            .byte	0
13884 3130                        00            .byte	0
13885 3131                        00            .byte	0
13886 3132                        00            .byte	0
13887                                           ! 1557  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13888 3133                        36            .byte	$36
13889 3134                        36            .byte	$36
13890 3135                        36            .byte	$36
13891 3136                        36            .byte	$36
13892 3137                        36            .byte	$36
13893 3138                        36            .byte	$36
13894 3139                        36            .byte	$36
13895 313A                        FE            .byte	$FE
13896 313B                        00            .byte	0
13897 313C                        00            .byte	0
13898 313D                        00            .byte	0
13899 313E                        00            .byte	0
13900 313F                        00            .byte	0
13901 3140                        00            .byte	0
13902 3141                        00            .byte	0
13903 3142                        00            .byte	0
13904                                           ! 1558  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13905 3143                        18            .byte	$18
13906 3144                        18            .byte	$18
13907 3145                        18            .byte	$18
13908 3146                        18            .byte	$18
13909 3147                        18            .byte	$18
13910 3148                        F8            .byte	$F8
13911 3149                        18            .byte	$18
13912 314A                        F8            .byte	$F8
13913 314B                        00            .byte	0
13914 314C                        00            .byte	0
13915 314D                        00            .byte	0
13916 314E                        00            .byte	0
13917 314F                        00            .byte	0
13918 3150                        00            .byte	0
13919 3151                        00            .byte	0
13920 3152                        00            .byte	0
13921                                           ! 1559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13922 3153                        00            .byte	0
13923 3154                        00            .byte	0
13924 3155                        00            .byte	0
13925 3156                        00            .byte	0
13926 3157                        00            .byte	0
13927 3158                        00            .byte	0
13928 3159                        00            .byte	0
13929 315A                        F8            .byte	$F8
13930 315B                        18            .byte	$18
13931 315C                        18            .byte	$18
13932 315D                        18            .byte	$18
13933 315E                        18            .byte	$18
13934 315F                        18            .byte	$18
13935 3160                        18            .byte	$18
13936 3161                        18            .byte	$18
13937 3162                        18            .byte	$18
13938                                           ! 1560  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13939 3163                        18            .byte	$18
13940 3164                        18            .byte	$18
13941 3165                        18            .byte	$18
13942 3166                        18            .byte	$18
13943 3167                        18            .byte	$18
13944 3168                        18            .byte	$18
13945 3169                        18            .byte	$18
13946 316A                        1F            .byte	$1F
13947 316B                        00            .byte	0
13948 316C                        00            .byte	0
13949 316D                        00            .byte	0
13950 316E                        00            .byte	0
13951 316F                        00            .byte	0
13952 3170                        00            .byte	0
13953 3171                        00            .byte	0
13954 3172                        00            .byte	0
13955                                           ! 1561  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13956 3173                        18            .byte	$18
13957 3174                        18            .byte	$18
13958 3175                        18            .byte	$18
13959 3176                        18            .byte	$18
13960 3177                        18            .byte	$18
13961 3178                        18            .byte	$18
13962 3179                        18            .byte	$18
13963 317A                        FF            .byte	$FF
13964 317B                        00            .byte	0
13965 317C                        00            .byte	0
13966 317D                        00            .byte	0
13967 317E                        00            .byte	0
13968 317F                        00            .byte	0
13969 3180                        00            .byte	0
13970 3181                        00            .byte	0
13971 3182                        00            .byte	0
13972                                           ! 1562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13973 3183                        00            .byte	0
13974 3184                        00            .byte	0
13975 3185                        00            .byte	0
13976 3186                        00            .byte	0
13977 3187                        00            .byte	0
13978 3188                        00            .byte	0
13979 3189                        00            .byte	0
13980 318A                        FF            .byte	$FF
13981 318B                        18            .byte	$18
13982 318C                        18            .byte	$18
13983 318D                        18            .byte	$18
13984 318E                        18            .byte	$18
13985 318F                        18            .byte	$18
13986 3190                        18            .byte	$18
13987 3191                        18            .byte	$18
13988 3192                        18            .byte	$18
13989                                           ! 1563  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13990 3193                        18            .byte	$18
13991 3194                        18            .byte	$18
13992 3195                        18            .byte	$18
13993 3196                        18            .byte	$18
13994 3197                        18            .byte	$18
13995 3198                        18            .byte	$18
13996 3199                        18            .byte	$18
13997 319A                        1F            .byte	$1F
13998 319B                        18            .byte	$18
13999 319C                        18            .byte	$18
14000 319D                        18            .byte	$18
14001 319E                        18            .byte	$18
14002 319F                        18            .byte	$18
14003 31A0                        18            .byte	$18
14004 31A1                        18            .byte	$18
14005 31A2                        18            .byte	$18
14006                                           ! 1564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14007 31A3                        00            .byte	0
14008 31A4                        00            .byte	0
14009 31A5                        00            .byte	0
14010 31A6                        00            .byte	0
14011 31A7                        00            .byte	0
14012 31A8                        00            .byte	0
14013 31A9                        00            .byte	0
14014 31AA                        FF            .byte	$FF
14015 31AB                        00            .byte	0
14016 31AC                        00            .byte	0
14017 31AD                        00            .byte	0
14018 31AE                        00            .byte	0
14019 31AF                        00            .byte	0
14020 31B0                        00            .byte	0
14021 31B1                        00            .byte	0
14022 31B2                        00            .byte	0
14023                                           ! 1565  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14024 31B3                        18            .byte	$18
14025 31B4                        18            .byte	$18
14026 31B5                        18            .byte	$18
14027 31B6                        18            .byte	$18
14028 31B7                        18            .byte	$18
14029 31B8                        18            .byte	$18
14030 31B9                        18            .byte	$18
14031 31BA                        FF            .byte	$FF
14032 31BB                        18            .byte	$18
14033 31BC                        18            .byte	$18
14034 31BD                        18            .byte	$18
14035 31BE                        18            .byte	$18
14036 31BF                        18            .byte	$18
14037 31C0                        18            .byte	$18
14038 31C1                        18            .byte	$18
14039 31C2                        18            .byte	$18
14040                                           ! 1566  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14041 31C3                        18            .byte	$18
14042 31C4                        18            .byte	$18
14043 31C5                        18            .byte	$18
14044 31C6                        18            .byte	$18
14045 31C7                        18            .byte	$18
14046 31C8                        1F            .byte	$1F
14047 31C9                        18            .byte	$18
14048 31CA                        1F            .byte	$1F
14049 31CB                        18            .byte	$18
14050 31CC                        18            .byte	$18
14051 31CD                        18            .byte	$18
14052 31CE                        18            .byte	$18
14053 31CF                        18            .byte	$18
14054 31D0                        18            .byte	$18
14055 31D1                        18            .byte	$18
14056 31D2                        18            .byte	$18
14057                                           ! 1567  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14058 31D3                        36            .byte	$36
14059 31D4                        36            .byte	$36
14060 31D5                        36            .byte	$36
14061 31D6                        36            .byte	$36
14062 31D7                        36            .byte	$36
14063 31D8                        36            .byte	$36
14064 31D9                        36            .byte	$36
14065 31DA                        37            .byte	$37
14066 31DB                        36            .byte	$36
14067 31DC                        36            .byte	$36
14068 31DD                        36            .byte	$36
14069 31DE                        36            .byte	$36
14070 31DF                        36            .byte	$36
14071 31E0                        36            .byte	$36
14072 31E1                        36            .byte	$36
14073 31E2                        36            .byte	$36
14074                                           ! 1568  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14075 31E3                        36            .byte	$36
14076 31E4                        36            .byte	$36
14077 31E5                        36            .byte	$36
14078 31E6                        36            .byte	$36
14079 31E7                        36            .byte	$36
14080 31E8                        37            .byte	$37
14081 31E9                        30            .byte	$30
14082 31EA                        3F            .byte	$3F
14083 31EB                        00            .byte	0
14084 31EC                        00            .byte	0
14085 31ED                        00            .byte	0
14086 31EE                        00            .byte	0
14087 31EF                        00            .byte	0
14088 31F0                        00            .byte	0
14089 31F1                        00            .byte	0
14090 31F2                        00            .byte	0
14091                                           ! 1569  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14092 31F3                        00            .byte	0
14093 31F4                        00            .byte	0
14094 31F5                        00            .byte	0
14095 31F6                        00            .byte	0
14096 31F7                        00            .byte	0
14097 31F8                        3F            .byte	$3F
14098 31F9                        30            .byte	$30
14099 31FA                        37            .byte	$37
14100 31FB                        36            .byte	$36
14101 31FC                        36            .byte	$36
14102 31FD                        36            .byte	$36
14103 31FE                        36            .byte	$36
14104 31FF                        36            .byte	$36
14105 3200                        36            .byte	$36
14106 3201                        36            .byte	$36
14107 3202                        36            .byte	$36
14108                                           ! 1570  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14109 3203                        36            .byte	$36
14110 3204                        36            .byte	$36
14111 3205                        36            .byte	$36
14112 3206                        36            .byte	$36
14113 3207                        36            .byte	$36
14114 3208                        F7            .byte	$F7
14115 3209                        00            .byte	0
14116 320A                        FF            .byte	$FF
14117 320B                        00            .byte	0
14118 320C                        00            .byte	0
14119 320D                        00            .byte	0
14120 320E                        00            .byte	0
14121 320F                        00            .byte	0
14122 3210                        00            .byte	0
14123 3211                        00            .byte	0
14124 3212                        00            .byte	0
14125                                           ! 1571  
14126                                           ! 1571 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14127 3213                        00            .byte	0
14128 3214                        00            .byte	0
14129 3215                        00            .byte	0
14130 3216                        00            .byte	0
14131 3217                        00            .byte	0
14132 3218                        FF            .byte	$FF
14133 3219                        00            .byte	0
14134 321A                        F7            .byte	$F7
14135 321B                        36            .byte	$36
14136 321C                        36            .byte	$36
14137 321D                        36            .byte	$36
14138 321E                        36            .byte	$36
14139 321F                        36            .byte	$36
14140 3220                        36            .byte	$36
14141 3221                        36            .byte	$36
14142 3222                        36            .byte	$36
14143                                           ! 1572  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14144 3223                        36            .byte	$36
14145 3224                        36            .byte	$36
14146 3225                        36            .byte	$36
14147 3226                        36            .byte	$36
14148 3227                        36            .byte	$36
14149 3228                        37            .byte	$37
14150 3229                        30            .byte	$30
14151 322A                        37            .byte	$37
14152 322B                        36            .byte	$36
14153 322C                        36            .byte	$36
14154 322D                        36            .byte	$36
14155 322E                        36            .byte	$36
14156 322F                        36            .byte	$36
14157 3230                        36            .byte	$36
14158 3231                        36            .byte	$36
14159 3232                        36            .byte	$36
14160                                           ! 1573  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14161 3233                        00            .byte	0
14162 3234                        00            .byte	0
14163 3235                        00            .byte	0
14164 3236                        00            .byte	0
14165 3237                        00            .byte	0
14166 3238                        FF            .byte	$FF
14167 3239                        00            .byte	0
14168 323A                        FF            .byte	$FF
14169 323B                        00            .byte	0
14170 323C                        00            .byte	0
14171 323D                        00            .byte	0
14172 323E                        00            .byte	0
14173 323F                        00            .byte	0
14174 3240                        00            .byte	0
14175 3241                        00            .byte	0
14176 3242                        00            .byte	0
14177                                           ! 1574  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14178 3243                        36            .byte	$36
14179 3244                        36            .byte	$36
14180 3245                        36            .byte	$36
14181 3246                        36            .byte	$36
14182 3247                        36            .byte	$36
14183 3248                        F7            .byte	$F7
14184 3249                        00            .byte	0
14185 324A                        F7            .byte	$F7
14186 324B                        36            .byte	$36
14187 324C                        36            .byte	$36
14188 324D                        36            .byte	$36
14189 324E                        36            .byte	$36
14190 324F                        36            .byte	$36
14191 3250                        36            .byte	$36
14192 3251                        36            .byte	$36
14193 3252                        36            .byte	$36
14194                                           ! 1575  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14195 3253                        18            .byte	$18
14196 3254                        18            .byte	$18
14197 3255                        18            .byte	$18
14198 3256                        18            .byte	$18
14199 3257                        18            .byte	$18
14200 3258                        FF            .byte	$FF
14201 3259                        00            .byte	0
14202 325A                        FF            .byte	$FF
14203 325B                        00            .byte	0
14204 325C                        00            .byte	0
14205 325D                        00            .byte	0
14206 325E                        00            .byte	0
14207 325F                        00            .byte	0
14208 3260                        00            .byte	0
14209 3261                        00            .byte	0
14210 3262                        00            .byte	0
14211                                           ! 1576  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14212 3263                        36            .byte	$36
14213 3264                        36            .byte	$36
14214 3265                        36            .byte	$36
14215 3266                        36            .byte	$36
14216 3267                        36            .byte	$36
14217 3268                        36            .byte	$36
14218 3269                        36            .byte	$36
14219 326A                        FF            .byte	$FF
14220 326B                        00            .byte	0
14221 326C                        00            .byte	0
14222 326D                        00            .byte	0
14223 326E                        00            .byte	0
14224 326F                        00            .byte	0
14225 3270                        00            .byte	0
14226 3271                        00            .byte	0
14227 3272                        00            .byte	0
14228                                           ! 1577  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14229 3273                        00            .byte	0
14230 3274                        00            .byte	0
14231 3275                        00            .byte	0
14232 3276                        00            .byte	0
14233 3277                        00            .byte	0
14234 3278                        FF            .byte	$FF
14235 3279                        00            .byte	0
14236 327A                        FF            .byte	$FF
14237 327B                        18            .byte	$18
14238 327C                        18            .byte	$18
14239 327D                        18            .byte	$18
14240 327E                        18            .byte	$18
14241 327F                        18            .byte	$18
14242 3280                        18            .byte	$18
14243 3281                        18            .byte	$18
14244 3282                        18            .byte	$18
14245                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14246 3283                        00            .byte	0
14247 3284                        00            .byte	0
14248 3285                        00            .byte	0
14249 3286                        00            .byte	0
14250 3287                        00            .byte	0
14251 3288                        00            .byte	0
14252 3289                        00            .byte	0
14253 328A                        FF            .byte	$FF
14254 328B                        36            .byte	$36
14255 328C                        36            .byte	$36
14256 328D                        36            .byte	$36
14257 328E                        36            .byte	$36
14258 328F                        36            .byte	$36
14259 3290                        36            .byte	$36
14260 3291                        36            .byte	$36
14261 3292                        36            .byte	$36
14262                                           ! 1579  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14263 3293                        36            .byte	$36
14264 3294                        36            .byte	$36
14265 3295                        36            .byte	$36
14266 3296                        36            .byte	$36
14267 3297                        36            .byte	$36
14268 3298                        36            .byte	$36
14269 3299                        36            .byte	$36
14270 329A                        3F            .byte	$3F
14271 329B                        00            .byte	0
14272 329C                        00            .byte	0
14273 329D                        00            .byte	0
14274 329E                        00            .byte	0
14275 329F                        00            .byte	0
14276 32A0                        00            .byte	0
14277 32A1                        00            .byte	0
14278 32A2                        00            .byte	0
14279                                           ! 1580  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14280 32A3                        18            .byte	$18
14281 32A4                        18            .byte	$18
14282 32A5                        18            .byte	$18
14283 32A6                        18            .byte	$18
14284 32A7                        18            .byte	$18
14285 32A8                        1F            .byte	$1F
14286 32A9                        18            .byte	$18
14287 32AA                        1F            .byte	$1F
14288 32AB                        00            .byte	0
14289 32AC                        00            .byte	0
14290 32AD                        00            .byte	0
14291 32AE                        00            .byte	0
14292 32AF                        00            .byte	0
14293 32B0                        00            .byte	0
14294 32B1                        00            .byte	0
14295 32B2                        00            .byte	0
14296                                           ! 1581  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14297 32B3                        00            .byte	0
14298 32B4                        00            .byte	0
14299 32B5                        00            .byte	0
14300 32B6                        00            .byte	0
14301 32B7                        00            .byte	0
14302 32B8                        1F            .byte	$1F
14303 32B9                        18            .byte	$18
14304 32BA                        1F            .byte	$1F
14305 32BB                        18            .byte	$18
14306 32BC                        18            .byte	$18
14307 32BD                        18            .byte	$18
14308 32BE                        18            .byte	$18
14309 32BF                        18            .byte	$18
14310 32C0                        18            .byte	$18
14311 32C1                        18            .byte	$18
14312 32C2                        18            .byte	$18
14313                                           ! 1582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14314 32C3                        00            .byte	0
14315 32C4                        00            .byte	0
14316 32C5                        00            .byte	0
14317 32C6                        00            .byte	0
14318 32C7                        00            .byte	0
14319 32C8                        00            .byte	0
14320 32C9                        00            .byte	0
14321 32CA                        3F            .byte	$3F
14322 32CB                        36            .byte	$36
14323 32CC                        36            .byte	$36
14324 32CD                        36            .byte	$36
14325 32CE                        36            .byte	$36
14326 32CF                        36            .byte	$36
14327 32D0                        36            .byte	$36
14328 32D1                        36            .byte	$36
14329 32D2                        36            .byte	$36
14330                                           ! 1583  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14331 32D3                        36            .byte	$36
14332 32D4                        36            .byte	$36
14333 32D5                        36            .byte	$36
14334 32D6                        36            .byte	$36
14335 32D7                        36            .byte	$36
14336 32D8                        36            .byte	$36
14337 32D9                        36            .byte	$36
14338 32DA                        FF            .byte	$FF
14339 32DB                        36            .byte	$36
14340 32DC                        36            .byte	$36
14341 32DD                        36            .byte	$36
14342 32DE                        36            .byte	$36
14343 32DF                        36            .byte	$36
14344 32E0                        36            .byte	$36
14345 32E1                        36            .byte	$36
14346 32E2                        36            .byte	$36
14347                                           ! 1584  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14348 32E3                        18            .byte	$18
14349 32E4                        18            .byte	$18
14350 32E5                        18            .byte	$18
14351 32E6                        18            .byte	$18
14352 32E7                        18            .byte	$18
14353 32E8                        FF            .byte	$FF
14354 32E9                        18            .byte	$18
14355 32EA                        FF            .byte	$FF
14356 32EB                        18            .byte	$18
14357 32EC                        18            .byte	$18
14358 32ED                        18            .byte	$18
14359 32EE                        18            .byte	$18
14360 32EF                        18            .byte	$18
14361 32F0                        18            .byte	$18
14362 32F1                        18            .byte	$18
14363 32F2                        18            .byte	$18
14364                                           ! 1585  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14365 32F3                        18            .byte	$18
14366 32F4                        18            .byte	$18
14367 32F5                        18            .byte	$18
14368 32F6                        18            .byte	$18
14369 32F7                        18            .byte	$18
14370 32F8                        18            .byte	$18
14371 32F9                        18            .byte	$18
14372 32FA                        F8            .byte	$F8
14373 32FB                        00            .byte	0
14374 32FC                        00            .byte	0
14375 32FD                        00            .byte	0
14376 32FE                        00            .byte	0
14377 32FF                        00            .byte	0
14378 3300                        00            .byte	0
14379 3301                        00            .byte	0
14380 3302                        00            .byte	0
14381                                           ! 1586  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14382 3303                        00            .byte	0
14383 3304                        00            .byte	0
14384 3305                        00            .byte	0
14385 3306                        00            .byte	0
14386 3307                        00            .byte	0
14387 3308                        00            .byte	0
14388 3309                        00            .byte	0
14389 330A                        1F            .byte	$1F
14390 330B                        18            .byte	$18
14391 330C                        18            .byte	$18
14392 330D                        18            .byte	$18
14393 330E                        18            .byte	$18
14394 330F                        18            .byte	$18
14395 3310                        18            .byte	$18
14396 3311                        18            .byte	$18
14397 3312                        18            .byte	$18
14398                                           ! 1587  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14399 3313                        FF            .byte	$FF
14400 3314                        FF            .byte	$FF
14401 3315                        FF            .byte	$FF
14402 3316                        FF            .byte	$FF
14403 3317                        FF            .byte	$FF
14404 3318                        FF            .byte	$FF
14405 3319                        FF            .byte	$FF
14406 331A                        FF            .byte	$FF
14407 331B                        FF            .byte	$FF
14408 331C                        FF            .byte	$FF
14409 331D                        FF            .byte	$FF
14410 331E                        FF            .byte	$FF
14411 331F                        FF            .byte	$FF
14412 3320                        FF            .byte	$FF
14413 3321                        FF            .byte	$FF
14414 3322                        FF            .byte	$FF
14415                                           ! 1588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14416 3323                        00            .byte	0
14417 3324                        00            .byte	0
14418 3325                        00            .byte	0
14419 3326                        00            .byte	0
14420 3327                        00            .byte	0
14421 3328                        00            .byte	0
14422 3329                        00            .byte	0
14423 332A                        FF            .byte	$FF
14424 332B                        FF            .byte	$FF
14425 332C                        FF            .byte	$FF
14426 332D                        FF            .byte	$FF
14427 332E                        FF            .byte	$FF
14428 332F                        FF            .byte	$FF
14429 3330                        FF            .byte	$FF
14430 3331                        FF            .byte	$FF
14431 3332                        FF            .byte	$FF
14432                                           ! 1589  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14433 3333                        F0            .byte	$F0
14434 3334                        F0            .byte	$F0
14435 3335                        F0            .byte	$F0
14436 3336                        F0            .byte	$F0
14437 3337                        F0            .byte	$F0
14438 3338                        F0            .byte	$F0
14439 3339                        F0            .byte	$F0
14440 333A                        F0            .byte	$F0
14441 333B                        F0            .byte	$F0
14442 333C                        F0            .byte	$F0
14443 333D                        F0            .byte	$F0
14444 333E                        F0            .byte	$F0
14445 333F                        F0            .byte	$F0
14446 3340                        F0            .byte	$F0
14447 3341                        F0            .byte	$F0
14448 3342                        F0            .byte	$F0
14449                                           ! 1590  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14450 3343                        0F            .byte	$F
14451 3344                        0F            .byte	$F
14452 3345                        0F            .byte	$F
14453 3346                        0F            .byte	$F
14454 3347                        0F            .byte	$F
14455 3348                        0F            .byte	$F
14456 3349                        0F            .byte	$F
14457 334A                        0F            .byte	$F
14458 334B                        0F            .byte	$F
14459 334C                        0F            .byte	$F
14460 334D                        0F            .byte	$F
14461 334E                        0F            .byte	$F
14462 334F                        0F            .byte	$F
14463 3350                        0F            .byte	$F
14464 3351                        0F            .byte	$F
14465 3352                        0F            .byte	$F
14466                                           ! 1591  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14467 3353                        FF            .byte	$FF
14468 3354                        FF            .byte	$FF
14469 3355                        FF            .byte	$FF
14470 3356                        FF            .byte	$FF
14471 3357                        FF            .byte	$FF
14472 3358                        FF            .byte	$FF
14473 3359                        FF            .byte	$FF
14474 335A                        00            .byte	0
14475 335B                        00            .byte	0
14476 335C                        00            .byte	0
14477 335D                        00            .byte	0
14478 335E                        00            .byte	0
14479 335F                        00            .byte	0
14480 3360                        00            .byte	0
14481 3361                        00            .byte	0
14482 3362                        00            .byte	0
14483                                           ! 1592  0x00, 0x00,
14484 3363                        00            .byte	0
14485                                           ! 1592  0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14486 3364                        00            .byte	0
14487 3365                        00            .byte	0
14488 3366                        00            .byte	0
14489 3367                        00            .byte	0
14490 3368                        76            .byte	$76
14491 3369                        DC            .byte	$DC
14492 336A                        D8            .byte	$D8
14493 336B                        D8            .byte	$D8
14494 336C                        D8            .byte	$D8
14495 336D                        DC            .byte	$DC
14496 336E                        76            .byte	$76
14497 336F                        00            .byte	0
14498 3370                        00            .byte	0
14499 3371                        00            .byte	0
14500 3372                        00            .byte	0
14501                                           ! 1593  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14502 3373                        00            .byte	0
14503 3374                        00            .byte	0
14504 3375                        78            .byte	$78
14505 3376                        CC            .byte	$CC
14506 3377                        CC            .byte	$CC
14507 3378                        CC            .byte	$CC
14508 3379                        D8            .byte	$D8
14509 337A                        CC            .byte	$CC
14510 337B                        C6            .byte	$C6
14511 337C                        C6            .byte	$C6
14512 337D                        C6            .byte	$C6
14513 337E                        CC            .byte	$CC
14514 337F                        00            .byte	0
14515 3380                        00            .byte	0
14516 3381                        00            .byte	0
14517 3382                        00            .byte	0
14518                                           ! 1594  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14519 3383                        00            .byte	0
14520 3384                        00            .byte	0
14521 3385                        FE            .byte	$FE
14522 3386                        C6            .byte	$C6
14523 3387                        C6            .byte	$C6
14524 3388                        C0            .byte	$C0
14525 3389                        C0            .byte	$C0
14526 338A                        C0            .byte	$C0
14527 338B                        C0            .byte	$C0
14528 338C                        C0            .byte	$C0
14529 338D                        C0            .byte	$C0
14530 338E                        C0            .byte	$C0
14531 338F                        00            .byte	0
14532 3390                        00            .byte	0
14533 3391                        00            .byte	0
14534 3392                        00            .byte	0
14535                                           ! 1595  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14536 3393                        00            .byte	0
14537 3394                        00            .byte	0
14538 3395                        00            .byte	0
14539 3396                        00            .byte	0
14540 3397                        FE            .byte	$FE
14541 3398                        6C            .byte	$6C
14542 3399                        6C            .byte	$6C
14543 339A                        6C            .byte	$6C
14544 339B                        6C            .byte	$6C
14545 339C                        6C            .byte	$6C
14546 339D                        6C            .byte	$6C
14547 339E                        6C            .byte	$6C
14548 339F                        00            .byte	0
14549 33A0                        00            .byte	0
14550 33A1                        00            .byte	0
14551 33A2                        00            .byte	0
14552                                           ! 1596  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14553 33A3                        00            .byte	0
14554 33A4                        00            .byte	0
14555 33A5                        00            .byte	0
14556 33A6                        FE            .byte	$FE
14557 33A7                        C6            .byte	$C6
14558 33A8                        60            .byte	$60
14559 33A9                        30            .byte	$30
14560 33AA                        18            .byte	$18
14561 33AB                        30            .byte	$30
14562 33AC                        60            .byte	$60
14563 33AD                        C6            .byte	$C6
14564 33AE                        FE            .byte	$FE
14565 33AF                        00            .byte	0
14566 33B0                        00            .byte	0
14567 33B1                        00            .byte	0
14568 33B2                        00            .byte	0
14569                                           ! 1597  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14570 33B3                        00            .byte	0
14571 33B4                        00            .byte	0
14572 33B5                        00            .byte	0
14573 33B6                        00            .byte	0
14574 33B7                        00            .byte	0
14575 33B8                        7E            .byte	$7E
14576 33B9                        D8            .byte	$D8
14577 33BA                        D8            .byte	$D8
14578 33BB                        D8            .byte	$D8
14579 33BC                        D8            .byte	$D8
14580 33BD                        D8            .byte	$D8
14581 33BE                        70            .byte	$70
14582 33BF                        00            .byte	0
14583 33C0                        00            .byte	0
14584 33C1                        00            .byte	0
14585 33C2                        00            .byte	0
14586                                           ! 1598  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14587 33C3                        00            .byte	0
14588 33C4                        00            .byte	0
14589 33C5                        00            .byte	0
14590 33C6                        00            .byte	0
14591 33C7                        66            .byte	$66
14592 33C8                        66            .byte	$66
14593 33C9                        66            .byte	$66
14594 33CA                        66            .byte	$66
14595 33CB                        66            .byte	$66
14596 33CC                        7C            .byte	$7C
14597 33CD                        60            .byte	$60
14598 33CE                        60            .byte	$60
14599 33CF                        C0            .byte	$C0
14600 33D0                        00            .byte	0
14601 33D1                        00            .byte	0
14602 33D2                        00            .byte	0
14603                                           ! 1599  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14604 33D3                        00            .byte	0
14605 33D4                        00            .byte	0
14606 33D5                        00            .byte	0
14607 33D6                        00            .byte	0
14608 33D7                        76            .byte	$76
14609 33D8                        DC            .byte	$DC
14610 33D9                        18            .byte	$18
14611 33DA                        18            .byte	$18
14612 33DB                        18            .byte	$18
14613 33DC                        18            .byte	$18
14614 33DD                        18            .byte	$18
14615 33DE                        18            .byte	$18
14616 33DF                        00            .byte	0
14617 33E0                        00            .byte	0
14618 33E1                        00            .byte	0
14619 33E2                        00            .byte	0
14620                                           ! 1600  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14621 33E3                        00            .byte	0
14622 33E4                        00            .byte	0
14623 33E5                        00            .byte	0
14624 33E6                        7E            .byte	$7E
14625 33E7                        18            .byte	$18
14626 33E8                        3C            .byte	$3C
14627 33E9                        66            .byte	$66
14628 33EA                        66            .byte	$66
14629 33EB                        66            .byte	$66
14630 33EC                        3C            .byte	$3C
14631 33ED                        18            .byte	$18
14632 33EE                        7E            .byte	$7E
14633 33EF                        00            .byte	0
14634 33F0                        00            .byte	0
14635 33F1                        00            .byte	0
14636 33F2                        00            .byte	0
14637                                           ! 1601  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14638 33F3                        00            .byte	0
14639 33F4                        00            .byte	0
14640 33F5                        00            .byte	0
14641 33F6                        38            .byte	$38
14642 33F7                        6C            .byte	$6C
14643 33F8                        C6            .byte	$C6
14644 33F9                        C6            .byte	$C6
14645 33FA                        FE            .byte	$FE
14646 33FB                        C6            .byte	$C6
14647 33FC                        C6            .byte	$C6
14648 33FD                        6C            .byte	$6C
14649 33FE                        38            .byte	$38
14650 33FF                        00            .byte	0
14651 3400                        00            .byte	0
14652 3401                        00            .byte	0
14653 3402                        00            .byte	0
14654                                           ! 1602  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14655 3403                        00            .byte	0
14656 3404                        00            .byte	0
14657 3405                        38            .byte	$38
14658 3406                        6C            .byte	$6C
14659 3407                        C6            .byte	$C6
14660 3408                        C6            .byte	$C6
14661 3409                        C6            .byte	$C6
14662 340A                        6C            .byte	$6C
14663 340B                        6C            .byte	$6C
14664 340C                        6C            .byte	$6C
14665 340D                        6C            .byte	$6C
14666 340E                        EE            .byte	$EE
14667 340F                        00            .byte	0
14668 3410                        00            .byte	0
14669 3411                        00            .byte	0
14670 3412                        00            .byte	0
14671                                           ! 1603  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14672 3413                        00            .byte	0
14673 3414                        00            .byte	0
14674 3415                        1E            .byte	$1E
14675 3416                        30            .byte	$30
14676 3417                        18            .byte	$18
14677 3418                        0C            .byte	$C
14678 3419                        3E            .byte	$3E
14679 341A                        66            .byte	$66
14680 341B                        66            .byte	$66
14681 341C                        66            .byte	$66
14682 341D                        66            .byte	$66
14683 341E                        3C            .byte	$3C
14684 341F                        00            .byte	0
14685 3420                        00            .byte	0
14686 3421                        00            .byte	0
14687 3422                        00            .byte	0
14688                                           ! 1604  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14689 3423                        00            .byte	0
14690 3424                        00            .byte	0
14691 3425                        00            .byte	0
14692 3426                        00            .byte	0
14693 3427                        00            .byte	0
14694 3428                        7E            .byte	$7E
14695 3429                        DB            .byte	$DB
14696 342A                        DB            .byte	$DB
14697 342B                        DB            .byte	$DB
14698 342C                        7E            .byte	$7E
14699 342D                        00            .byte	0
14700 342E                        00            .byte	0
14701 342F                        00            .byte	0
14702 3430                        00            .byte	0
14703 3431                        00            .byte	0
14704 3432                        00            .byte	0
14705                                           ! 1605  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14706 3433                        00            .byte	0
14707 3434                        00            .byte	0
14708 3435                        00            .byte	0
14709 3436                        03            .byte	3
14710 3437                        06            .byte	6
14711 3438                        7E            .byte	$7E
14712 3439                        DB            .byte	$DB
14713 343A                        DB            .byte	$DB
14714 343B                        F3            .byte	$F3
14715 343C                        7E            .byte	$7E
14716 343D                        60            .byte	$60
14717 343E                        C0            .byte	$C0
14718 343F                        00            .byte	0
14719 3440                        00            .byte	0
14720 3441                        00            .byte	0
14721 3442                        00            .byte	0
14722                                           ! 1606  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14723 3443                        00            .byte	0
14724 3444                        00            .byte	0
14725 3445                        1C            .byte	$1C
14726 3446                        30            .byte	$30
14727 3447                        60            .byte	$60
14728 3448                        60            .byte	$60
14729 3449                        7C            .byte	$7C
14730 344A                        60            .byte	$60
14731 344B                        60            .byte	$60
14732 344C                        60            .byte	$60
14733 344D                        30            .byte	$30
14734 344E                        1C            .byte	$1C
14735 344F                        00            .byte	0
14736 3450                        00            .byte	0
14737 3451                        00            .byte	0
14738 3452                        00            .byte	0
14739                                           ! 1607  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14740 3453                        00            .byte	0
14741 3454                        00            .byte	0
14742 3455                        00            .byte	0
14743 3456                        7C            .byte	$7C
14744 3457                        C6            .byte	$C6
14745 3458                        C6            .byte	$C6
14746 3459                        C6            .byte	$C6
14747 345A                        C6            .byte	$C6
14748 345B                        C6            .byte	$C6
14749 345C                        C6            .byte	$C6
14750 345D                        C6            .byte	$C6
14751 345E                        C6            .byte	$C6
14752 345F                        00            .byte	0
14753 3460                        00            .byte	0
14754 3461                        00            .byte	0
14755 3462                        00            .byte	0
14756                                           ! 1608  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14757 3463                        00            .byte	0
14758 3464                        00            .byte	0
14759 3465                        00            .byte	0
14760 3466                        00            .byte	0
14761 3467                        FE            .byte	$FE
14762 3468                        00            .byte	0
14763 3469                        00            .byte	0
14764 346A                        FE            .byte	$FE
14765 346B                        00            .byte	0
14766 346C                        00            .byte	0
14767 346D                        FE            .byte	$FE
14768 346E                        00            .byte	0
14769 346F                        00            .byte	0
14770 3470                        00            .byte	0
14771 3471                        00            .byte	0
14772 3472                        00            .byte	0
14773                                           ! 1609  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14774 3473                        00            .byte	0
14775 3474                        00            .byte	0
14776 3475                        00            .byte	0
14777 3476                        00            .byte	0
14778 3477                        18            .byte	$18
14779 3478                        18            .byte	$18
14780 3479                        7E            .byte	$7E
14781 347A                        18            .byte	$18
14782 347B                        18            .byte	$18
14783 347C                        00            .byte	0
14784 347D                        00            .byte	0
14785 347E                        FF            .byte	$FF
14786 347F                        00            .byte	0
14787 3480                        00            .byte	0
14788 3481                        00            .byte	0
14789 3482                        00            .byte	0
14790                                           ! 1610  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14791 3483                        00            .byte	0
14792 3484                        00            .byte	0
14793 3485                        00            .byte	0
14794 3486                        30            .byte	$30
14795 3487                        18            .byte	$18
14796 3488                        0C            .byte	$C
14797 3489                        06            .byte	6
14798 348A                        0C            .byte	$C
14799 348B                        18            .byte	$18
14800 348C                        30            .byte	$30
14801 348D                        00            .byte	0
14802 348E                        7E            .byte	$7E
14803 348F                        00            .byte	0
14804 3490                        00            .byte	0
14805 3491                        00            .byte	0
14806 3492                        00            .byte	0
14807                                           ! 1611  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14808 3493                        00            .byte	0
14809 3494                        00            .byte	0
14810 3495                        00            .byte	0
14811 3496                        0C            .byte	$C
14812 3497                        18            .byte	$18
14813 3498                        30            .byte	$30
14814 3499                        60            .byte	$60
14815 349A                        30            .byte	$30
14816 349B                        18            .byte	$18
14817 349C                        0C            .byte	$C
14818 349D                        00            .byte	0
14819 349E                        7E            .byte	$7E
14820 349F                        00            .byte	0
14821 34A0                        00            .byte	0
14822 34A1                        00            .byte	0
14823 34A2                        00            .byte	0
14824                                           ! 1612  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14825 34A3                        00            .byte	0
14826 34A4                        00            .byte	0
14827 34A5                        0E            .byte	$E
14828 34A6                        1B            .byte	$1B
14829 34A7                        1B            .byte	$1B
14830 34A8                        18            .byte	$18
14831 34A9                        18            .byte	$18
14832 34AA                        18            .byte	$18
14833 34AB                        18            .byte	$18
14834 34AC                        18            .byte	$18
14835 34AD                        18            .byte	$18
14836 34AE                        18            .byte	$18
14837 34AF                        18            .byte	$18
14838 34B0                        18            .byte	$18
14839 34B1                        18            .byte	$18
14840 34B2                        18            .byte	$18
14841                                           ! 1613  0x18, 0x18, 0x18, 0x18
14842 34B3                        18            .byte	$18
14843 34B4                        18            .byte	$18
14844 34B5                        18            .byte	$18
14845                                           ! 1613 , 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14846 34B6                        18            .byte	$18
14847 34B7                        18            .byte	$18
14848 34B8                        18            .byte	$18
14849 34B9                        18            .byte	$18
14850 34BA                        18            .byte	$18
14851 34BB                        D8            .byte	$D8
14852 34BC                        D8            .byte	$D8
14853 34BD                        D8            .byte	$D8
14854 34BE                        70            .byte	$70
14855 34BF                        00            .byte	0
14856 34C0                        00            .byte	0
14857 34C1                        00            .byte	0
14858 34C2                        00            .byte	0
14859                                           ! 1614  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14860 34C3                        00            .byte	0
14861 34C4                        00            .byte	0
14862 34C5                        00            .byte	0
14863 34C6                        00            .byte	0
14864 34C7                        18            .byte	$18
14865 34C8                        18            .byte	$18
14866 34C9                        00            .byte	0
14867 34CA                        7E            .byte	$7E
14868 34CB                        00            .byte	0
14869 34CC                        18            .byte	$18
14870 34CD                        18            .byte	$18
14871 34CE                        00            .byte	0
14872 34CF                        00            .byte	0
14873 34D0                        00            .byte	0
14874 34D1                        00            .byte	0
14875 34D2                        00            .byte	0
14876                                           ! 1615  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14877 34D3                        00            .byte	0
14878 34D4                        00            .byte	0
14879 34D5                        00            .byte	0
14880 34D6                        00            .byte	0
14881 34D7                        00            .byte	0
14882 34D8                        76            .byte	$76
14883 34D9                        DC            .byte	$DC
14884 34DA                        00            .byte	0
14885 34DB                        76            .byte	$76
14886 34DC                        DC            .byte	$DC
14887 34DD                        00            .byte	0
14888 34DE                        00            .byte	0
14889 34DF                        00            .byte	0
14890 34E0                        00            .byte	0
14891 34E1                        00            .byte	0
14892 34E2                        00            .byte	0
14893                                           ! 1616  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14894 34E3                        00            .byte	0
14895 34E4                        38            .byte	$38
14896 34E5                        6C            .byte	$6C
14897 34E6                        6C            .byte	$6C
14898 34E7                        38            .byte	$38
14899 34E8                        00            .byte	0
14900 34E9                        00            .byte	0
14901 34EA                        00            .byte	0
14902 34EB                        00            .byte	0
14903 34EC                        00            .byte	0
14904 34ED                        00            .byte	0
14905 34EE                        00            .byte	0
14906 34EF                        00            .byte	0
14907 34F0                        00            .byte	0
14908 34F1                        00            .byte	0
14909 34F2                        00            .byte	0
14910                                           ! 1617  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14911 34F3                        00            .byte	0
14912 34F4                        00            .byte	0
14913 34F5                        00            .byte	0
14914 34F6                        00            .byte	0
14915 34F7                        00            .byte	0
14916 34F8                        00            .byte	0
14917 34F9                        00            .byte	0
14918 34FA                        18            .byte	$18
14919 34FB                        18            .byte	$18
14920 34FC                        00            .byte	0
14921 34FD                        00            .byte	0
14922 34FE                        00            .byte	0
14923 34FF                        00            .byte	0
14924 3500                        00            .byte	0
14925 3501                        00            .byte	0
14926 3502                        00            .byte	0
14927                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14928 3503                        00            .byte	0
14929 3504                        00            .byte	0
14930 3505                        00            .byte	0
14931 3506                        00            .byte	0
14932 3507                        00            .byte	0
14933 3508                        00            .byte	0
14934 3509                        00            .byte	0
14935 350A                        00            .byte	0
14936 350B                        18            .byte	$18
14937 350C                        00            .byte	0
14938 350D                        00            .byte	0
14939 350E                        00            .byte	0
14940 350F                        00            .byte	0
14941 3510                        00            .byte	0
14942 3511                        00            .byte	0
14943 3512                        00            .byte	0
14944                                           ! 1619  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14945 3513                        00            .byte	0
14946 3514                        0F            .byte	$F
14947 3515                        0C            .byte	$C
14948 3516                        0C            .byte	$C
14949 3517                        0C            .byte	$C
14950 3518                        0C            .byte	$C
14951 3519                        0C            .byte	$C
14952 351A                        EC            .byte	$EC
14953 351B                        6C            .byte	$6C
14954 351C                        6C            .byte	$6C
14955 351D                        3C            .byte	$3C
14956 351E                        1C            .byte	$1C
14957 351F                        00            .byte	0
14958 3520                        00            .byte	0
14959 3521                        00            .byte	0
14960 3522                        00            .byte	0
14961                                           ! 1620  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14962 3523                        00            .byte	0
14963 3524                        D8            .byte	$D8
14964 3525                        6C            .byte	$6C
14965 3526                        6C            .byte	$6C
14966 3527                        6C            .byte	$6C
14967 3528                        6C            .byte	$6C
14968 3529                        6C            .byte	$6C
14969 352A                        00            .byte	0
14970 352B                        00            .byte	0
14971 352C                        00            .byte	0
14972 352D                        00            .byte	0
14973 352E                        00            .byte	0
14974 352F                        00            .byte	0
14975 3530                        00            .byte	0
14976 3531                        00            .byte	0
14977 3532                        00            .byte	0
14978                                           ! 1621  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14979 3533                        00            .byte	0
14980 3534                        70            .byte	$70
14981 3535                        D8            .byte	$D8
14982 3536                        30            .byte	$30
14983 3537                        60            .byte	$60
14984 3538                        C8            .byte	$C8
14985 3539                        F8            .byte	$F8
14986 353A                        00            .byte	0
14987 353B                        00            .byte	0
14988 353C                        00            .byte	0
14989 353D                        00            .byte	0
14990 353E                        00            .byte	0
14991 353F                        00            .byte	0
14992 3540                        00            .byte	0
14993 3541                        00            .byte	0
14994 3542                        00            .byte	0
14995                                           ! 1622  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14996 3543                        00            .byte	0
14997 3544                        00            .byte	0
14998 3545                        00            .byte	0
14999 3546                        00            .byte	0
15000 3547                        7C            .byte	$7C
15001 3548                        7C            .byte	$7C
15002 3549                        7C            .byte	$7C
15003 354A                        7C            .byte	$7C
15004 354B                        7C            .byte	$7C
15005 354C                        7C            .byte	$7C
15006 354D                        7C            .byte	$7C
15007 354E                        00            .byte	0
15008 354F                        00            .byte	0
15009 3550                        00            .byte	0
15010 3551                        00            .byte	0
15011 3552                        00            .byte	0
15012                                           ! 1623  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15013 3553                        00            .byte	0
15014 3554                        00            .byte	0
15015 3555                        00            .byte	0
15016 3556                        00            .byte	0
15017 3557                        00            .byte	0
15018 3558                        00            .byte	0
15019 3559                        00            .byte	0
15020 355A                        00            .byte	0
15021 355B                        00            .byte	0
15022 355C                        00            .byte	0
15023 355D                        00            .byte	0
15024 355E                        00            .byte	0
15025 355F                        00            .byte	0
15026 3560                        00            .byte	0
15027 3561                        00            .byte	0
15028                                           ! 1624 };
15029 3562                        00            .byte	0
15030                                           !BCC_EOS
15031                                           ! 1625 static Bit8u vgafont14alt[1]={0x00};
15032                       00003563            _vgafont14alt:
15033 3563                        00            .byte	0
15034                                           !BCC_EOS
15035                                           ! 1626 static Bit8u vgafont16alt[1]={0x00};
15036                       00003564            _vgafont16alt:
15037 3564                        00            .byte	0
15038                                           !BCC_EOS
15039                                           ! 1627 #asm
15040                                           !BCC_ASM
15041                       00003565            init_vga_card:
15042                                           ;; switch to color mode and enable CPU access 480 lines
15043 3565           BA                   03C2    mov dx, #0x3C2
15044 3568           B0                     C3    mov al, #0xC3
15045 356A           EE                           outb dx,al
15046                                           ;; more than 64k 3C4/04
15047 356B           BA                   03C4    mov dx, #0x3C4
15048 356E           B0                     04    mov al, #0x04
15049 3570           EE                           outb dx,al
15050 3571           BA                   03C5    mov dx, #0x3C5
15051 3574           B0                     02    mov al, #0x02
15052 3576           EE                           outb dx,al
15053 3577           BB                   3581    mov bx, #msg_vga_init
15054 357A           53                           push bx
15055 357B           E8         46A3              call _printf
15056 357E           44                           inc sp
15057 357F           44                           inc sp
15058 3580           C3                           ret
15059                       00003581            msg_vga_init:
15060 3581                        56            .ascii "VGABios $Id: vgabios.c,v 1.67 2008/01/27 09:44:12 vruppert Exp $"
15061 35C1                        0D            .byte 0x0d,0x0a,0x00
15062                                           ! 1649 endasm
15063                                           !BCC_ENDASM
15064                                           ! 1650 #asm
15065                                           !BCC_ASM
15066                       000035C4            init_bios_area:
15067 35C4           1E                           push ds
15068 35C5           B8                   0040    mov ax, # 0x40
15069 35C8           8ED8                         mov ds, ax
15070                                           ;; init detected hardware BIOS Area
15071 35CA           BB                   0010    mov bx, # 0x10
15072 35CD           8B07                         mov ax, [bx]
15073 35CF           25                   FFCF    and ax, #0xffcf
15074                                           ;; set 80x25 color (not clear from RBIL but usual)
15075 35D2           0D                   0020    or ax, #0x0020
15076 35D5           8907                         mov [bx], ax
15077                                           ;; Just for the first int10 find its children
15078                                           ;; the default char height
15079 35D7           BB                   0085    mov bx, # 0x85
15080 35DA           B0                     10    mov al, #0x10
15081 35DC           8807                         mov [bx], al
15082                                           ;; Clear the screen
15083 35DE           BB                   0087    mov bx, # 0x87
15084 35E1           B0                     60    mov al, #0x60
15085 35E3           8807                         mov [bx], al
15086                                           ;; Set the basic screen we have
15087 35E5           BB                   0088    mov bx, # 0x88
15088 35E8           B0                     F9    mov al, #0xf9
15089 35EA           8807                         mov [bx], al
15090                                           ;; Set the basic modeset options
15091 35EC           BB                   0089    mov bx, # 0x89
15092 35EF           B0                     51    mov al, #0x51
15093 35F1           8807                         mov [bx], al
15094                                           ;; Set the default MSR
15095 35F3           BB                   0065    mov bx, # 0x65
15096 35F6           B0                     09    mov al, #0x09
15097 35F8           8807                         mov [bx], al
15098 35FA           1F                           pop ds
15099 35FB           C3                           ret
15100                       000035FC            _video_save_pointer_table:
15101 35FC                      0293              .word _video_param_table
15102 35FE                      C000              .word 0xc000
15103 3600                      0000              .word 0
15104 3602                      0000              .word 0
15105 3604                      0000              .word 0
15106 3606                      0000              .word 0
15107 3608                      0000              .word 0
15108 360A                      0000              .word 0
15109 360C                      0000              .word 0
15110 360E                      0000              .word 0
15111 3610                      0000              .word 0
15112 3612                      0000              .word 0
15113 3614                      0000              .word 0
15114 3616                      0000              .word 0
15115                                           ! 1700 endasm
15116                                           !BCC_ENDASM
15117                                           ! 1701 static void display_splash_screen()
15118                                           ! 1702 {
15119                                           
15120                       00003618            _display_splash_screen:
15121                                           ! 1703 }
15122 3618           C3                         ret
15123                                           ! 1704 static void display_info()
15124                                           ! 1705 {
15125                       00003619            _display_info:
15126                                           ! 1706 #asm
15127                                           !BCC_ASM
15128 3619           B8                   C000   mov ax,#0xc000
15129 361C           8ED8                        mov ds,ax
15130 361E           BE                   0022   mov si,#vgabios_name
15131 3621           E8         0013             call _display_string
15132 3624           BE                   0038   mov si,#vgabios_version
15133 3627           E8         000D             call _display_string
15134                                            ;;mov si,#vgabios_copyright
15135                                            ;;call _display_string
15136                                            ;;mov si,#crlf
15137                                            ;;call _display_string
15138 362A           BE                   0080   mov si,#vgabios_license
15139 362D           E8         0007             call _display_string
15140 3630           BE                   00B5   mov si,#vgabios_website
15141 3633           E8         0001             call _display_string
15142                                           ! 1721 endasm
15143                                           !BCC_ENDASM
15144                                           ! 1722 }
15145 3636           C3                         ret
15146                                           ! 1723 static void display_string()
15147                                           ! 1724 {
15148                       00003637            _display_string:
15149                                           ! 1725 #asm
15150                                           !BCC_ASM
15151 3637           8CD8                        mov ax,ds
15152 3639           8EC0                        mov es,ax
15153 363B           89F7                        mov di,si
15154 363D           31C9                        xor cx,cx
15155 363F           F7D1                        not cx
15156 3641           30C0                        xor al,al
15157 3643           FC                          cld
15158 3644           F2                          repne
15159 3645           AE                           scasb
15160 3646           F7D1                        not cx
15161 3648           49                          dec cx
15162 3649           51                          push cx
15163 364A           B8                   0300   mov ax,#0x0300
15164 364D           BB                   0000   mov bx,#0x0000
15165 3650           CD                     10   int #0x10
15166 3652           59                          pop cx
15167 3653           B8                   1301   mov ax,#0x1301
15168 3656           BB                   000B   mov bx,#0x000b
15169 3659           89F5                        mov bp,si
15170 365B           CD                     10   int #0x10
15171                                           ! 1746 endasm
15172                                           !BCC_ENDASM
15173                                           ! 1747 }
15174 365D           C3                         ret
15175                                           ! 1748 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15176                                           ! 1749   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15177                       0000365E            _int10_func:
15178                                           !BCC_EOS
15179                                           ! 1750 {
15180                                           ! 1751  switch(( AX >> 8 ))
15181 365E           55                         push	bp
15182 365F           89E5                       mov	bp,sp
15183                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15184 3661           8B46         12            mov	ax,$12[bp]
15185 3664           88E0                       mov	al,ah
15186 3666           30E4                       xor	ah,ah
15187                                           ! 1752   {
15188 3668           E9         04D8            br 	.3
15189                                           ! 1753    case 0x00:
15190                                           ! 1754      biosfn_set_video_mode(( AX & 0x00ff ));
15191                       0000366B            .4:
15192                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15193 366B           8A46         12            mov	al,$12[bp]
15194                                           ! Debug: list unsigned char = al+0 (used reg = )
15195 366E           30E4                       xor	ah,ah
15196 3670           50                         push	ax
15197                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15198 3671           E8         0525            call	_biosfn_set_video_mode
15199 3674           44                         inc	sp
15200 3675           44                         inc	sp
15201                                           !BCC_EOS
15202                                           ! 1755      switch(( AX & 0x00ff )&0x7F)
15203                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15204 3676           8A46         12            mov	al,$12[bp]
15205                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15206 3679           24                     7F  and	al,*$7F
15207                                           ! 1756       {case 6:
15208 367B           EB           24            jmp .7
15209                                           ! 1757         AX = ((AX & 0xff00) | (0x3F));
15210                       0000367D            .8:
15211                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15212 367D           8B46         12            mov	ax,$12[bp]
15213 3680           30C0                       xor	al,al
15214                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15215 3682           0C                     3F  or	al,*$3F
15216                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15217 3684           8946         12            mov	$12[bp],ax
15218                                           !BCC_EOS
15219                                           ! 1758         break;
15220 3687           EB           3D            jmp .5
15221                                           !BCC_EOS
15222                                           ! 1759        case 0:
15223                                           ! 1760        case 1:
15224                       00003689            .9:
15225                                           ! 1761        case 2:
15226                       00003689            .A:
15227                                           ! 1762        case 3:
15228                       00003689            .B:
15229                                           ! 1763        case 4:
15230                       00003689            .C:
15231                                           ! 1764        case 5:
15232                       00003689            .D:
15233                                           ! 1765        case 7:
15234                       00003689            .E:
15235                                           ! 1766         AX = ((AX & 0xff00) | (0x30));
15236                       00003689            .F:
15237                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15238 3689           8B46         12            mov	ax,$12[bp]
15239 368C           30C0                       xor	al,al
15240                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15241 368E           0C                     30  or	al,*$30
15242                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15243 3690           8946         12            mov	$12[bp],ax
15244                                           !BCC_EOS
15245                                           ! 1767         break;
15246 3693           EB           31            jmp .5
15247                                           !BCC_EOS
15248                                           ! 1768       default:
15249                                           ! 1769         AX = ((AX & 0xff00) | (0x20));
15250                       00003695            .10:
15251                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15252 3695           8B46         12            mov	ax,$12[bp]
15253 3698           30C0                       xor	al,al
15254                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15255 369A           0C                     20  or	al,*$20
15256                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15257 369C           8946         12            mov	$12[bp],ax
15258                                           !BCC_EOS
15259                                           ! 1770       }
15260                                           ! 1771      break;
15261 369F           EB           25            jmp .5
15262                       000036A1            .7:
15263 36A1           2C                     00  sub	al,*0
15264 36A3           72           F0            jb 	.10
15265 36A5           3C                     07  cmp	al,*7
15266 36A7           77           1B            ja  	.11
15267 36A9           30E4                       xor	ah,ah
15268 36AB           D1E0                       shl	ax,*1
15269 36AD           89C3                       mov	bx,ax
15270 36AF           2E                         seg	cs
15271 36B0           FFA7       36B4            br	.12[bx]
15272                       000036B4            .12:
15273 36B4                      3689            .word	.9
15274 36B6                      3689            .word	.A
15275 36B8                      3689            .word	.B
15276 36BA                      3689            .word	.C
15277 36BC                      3689            .word	.D
15278 36BE                      3689            .word	.E
15279 36C0                      367D            .word	.8
15280 36C2                      3689            .word	.F
15281                       000036C4            .11:
15282 36C4           EB           CF            jmp	.10
15283                       000036C6            .5:
15284 36C6           E9         04CE            br 	.1
15285                                           !BCC_EOS
15286                                           ! 1772    case 0x01:
15287                                           ! 1773      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15288                       000036C9            .13:
15289                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15290 36C9           8A46         10            mov	al,$10[bp]
15291                                           ! Debug: list unsigned char = al+0 (used reg = )
15292 36CC           30E4                       xor	ah,ah
15293 36CE           50                         push	ax
15294                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15295 36CF           8B46         10            mov	ax,$10[bp]
15296 36D2           88E0                       mov	al,ah
15297 36D4           30E4                       xor	ah,ah
15298                                           ! Debug: list unsigned int = ax+0 (used reg = )
15299 36D6           50                         push	ax
15300                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15301 36D7           E8         0B57            call	_biosfn_set_cursor_shape
15302 36DA           83C4                   04  add	sp,*4
15303                                           !BCC_EOS
15304                                           ! 1774      break;
15305 36DD           E9         04B7            br 	.1
15306                                           !BCC_EOS
15307                                           ! 1775    case 0x02:
15308                                           ! 1776      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15309                       000036E0            .14:
15310                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15311 36E0           FF76         0E            push	$E[bp]
15312                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15313 36E3           8B46         0C            mov	ax,$C[bp]
15314 36E6           88E0                       mov	al,ah
15315 36E8           30E4                       xor	ah,ah
15316                                           ! Debug: list unsigned int = ax+0 (used reg = )
15317 36EA           50                         push	ax
15318                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15319 36EB           E8         0C5E            call	_biosfn_set_cursor_pos
15320 36EE           83C4                   04  add	sp,*4
15321                                           !BCC_EOS
15322                                           ! 1777      break;
15323 36F1           E9         04A3            br 	.1
15324                                           !BCC_EOS
15325                                           ! 1778    case 0x03:
15326                                           ! 1779      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15327                       000036F4            .15:
15328                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15329 36F4           8D5E         0E            lea	bx,$E[bp]
15330 36F7           53                         push	bx
15331                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15332 36F8           8D5E         10            lea	bx,$10[bp]
15333 36FB           53                         push	bx
15334                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15335 36FC           8B46         0C            mov	ax,$C[bp]
15336 36FF           88E0                       mov	al,ah
15337 3701           30E4                       xor	ah,ah
15338                                           ! Debug: list unsigned int = ax+0 (used reg = )
15339 3703           50                         push	ax
15340                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15341 3704           E8         0D45            call	_biosfn_get_cursor_pos
15342 3707           83C4                   06  add	sp,*6
15343                                           !BCC_EOS
15344                                           ! 1780      break;
15345 370A           E9         048A            br 	.1
15346                                           !BCC_EOS
15347                                           ! 1781    case 0x04:
15348                                           ! 1782      AX=0x00;
15349                       0000370D            .16:
15350                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15351 370D           31C0                       xor	ax,ax
15352 370F           8946         12            mov	$12[bp],ax
15353                                           !BCC_EOS
15354                                           ! 1783      BX=0x00;
15355                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15356 3712           31C0                       xor	ax,ax
15357 3714           8946         0C            mov	$C[bp],ax
15358                                           !BCC_EOS
15359                                           ! 1784      CX=0x00;
15360                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15361 3717           31C0                       xor	ax,ax
15362 3719           8946         10            mov	$10[bp],ax
15363                                           !BCC_EOS
15364                                           ! 1785      DX=0x00;
15365                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15366 371C           31C0                       xor	ax,ax
15367 371E           8946         0E            mov	$E[bp],ax
15368                                           !BCC_EOS
15369                                           ! 1786      break;
15370 3721           E9         0473            br 	.1
15371                                           !BCC_EOS
15372                                           ! 1787    case 0x05:
15373                                           ! 1788      biosfn_set_active_page(( AX & 0x00ff ));
15374                       00003724            .17:
15375                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15376 3724           8A46         12            mov	al,$12[bp]
15377                                           ! Debug: list unsigned char = al+0 (used reg = )
15378 3727           30E4                       xor	ah,ah
15379 3729           50                         push	ax
15380                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15381 372A           E8         0D94            call	_biosfn_set_active_page
15382 372D           44                         inc	sp
15383 372E           44                         inc	sp
15384                                           !BCC_EOS
15385                                           ! 1789      break;
15386 372F           E9         0465            br 	.1
15387                                           !BCC_EOS
15388                                           ! 1790    case 0x06:
15389                                           ! 1791      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX
15390                       00003732            .18:
15391                                           ! 1791  & 0x00ff ),0xFF,1);
15392                                           ! Debug: list int = const 1 (used reg = )
15393 3732           B8                   0001  mov	ax,*1
15394 3735           50                         push	ax
15395                                           ! Debug: list int = const $FF (used reg = )
15396 3736           B8                   00FF  mov	ax,#$FF
15397 3739           50                         push	ax
15398                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15399 373A           8A46         0E            mov	al,$E[bp]
15400                                           ! Debug: list unsigned char = al+0 (used reg = )
15401 373D           30E4                       xor	ah,ah
15402 373F           50                         push	ax
15403                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15404 3740           8B46         0E            mov	ax,$E[bp]
15405 3743           88E0                       mov	al,ah
15406 3745           30E4                       xor	ah,ah
15407                                           ! Debug: list unsigned int = ax+0 (used reg = )
15408 3747           50                         push	ax
15409                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15410 3748           8A46         10            mov	al,$10[bp]
15411                                           ! Debug: list unsigned char = al+0 (used reg = )
15412 374B           30E4                       xor	ah,ah
15413 374D           50                         push	ax
15414                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15415 374E           8B46         10            mov	ax,$10[bp]
15416 3751           88E0                       mov	al,ah
15417 3753           30E4                       xor	ah,ah
15418                                           ! Debug: list unsigned int = ax+0 (used reg = )
15419 3755           50                         push	ax
15420                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15421 3756           8B46         0C            mov	ax,$C[bp]
15422 3759           88E0                       mov	al,ah
15423 375B           30E4                       xor	ah,ah
15424                                           ! Debug: list unsigned int = ax+0 (used reg = )
15425 375D           50                         push	ax
15426                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15427 375E           8A46         12            mov	al,$12[bp]
15428                                           ! Debug: list unsigned char = al+0 (used reg = )
15429 3761           30E4                       xor	ah,ah
15430 3763           50                         push	ax
15431                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15432 3764           E8         11DD            call	_biosfn_scroll
15433 3767           83C4                   10  add	sp,*$10
15434                                           !BCC_EOS
15435                                           ! 1792      break;
15436 376A           E9         042A            br 	.1
15437                                           !BCC_EOS
15438                                           ! 1793    case 0x07:
15439                                           ! 1794      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15440                       0000376D            .19:
15441                                           ! Debug: list int = const 0 (used reg = )
15442 376D           31C0                       xor	ax,ax
15443 376F           50                         push	ax
15444                                           ! Debug: list int = const $FF (used reg = )
15445 3770           B8                   00FF  mov	ax,#$FF
15446 3773           50                         push	ax
15447                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15448 3774           8A46         0E            mov	al,$E[bp]
15449                                           ! Debug: list unsigned char = al+0 (used reg = )
15450 3777           30E4                       xor	ah,ah
15451 3779           50                         push	ax
15452                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15453 377A           8B46         0E            mov	ax,$E[bp]
15454 377D           88E0                       mov	al,ah
15455 377F           30E4                       xor	ah,ah
15456                                           ! Debug: list unsigned int = ax+0 (used reg = )
15457 3781           50                         push	ax
15458                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15459 3782           8A46         10            mov	al,$10[bp]
15460                                           ! Debug: list unsigned char = al+0 (used reg = )
15461 3785           30E4                       xor	ah,ah
15462 3787           50                         push	ax
15463                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15464 3788           8B46         10            mov	ax,$10[bp]
15465 378B           88E0                       mov	al,ah
15466 378D           30E4                       xor	ah,ah
15467                                           ! Debug: list unsigned int = ax+0 (used reg = )
15468 378F           50                         push	ax
15469                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15470 3790           8B46         0C            mov	ax,$C[bp]
15471 3793           88E0                       mov	al,ah
15472 3795           30E4                       xor	ah,ah
15473                                           ! Debug: list unsigned int = ax+0 (used reg = )
15474 3797           50                         push	ax
15475                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15476 3798           8A46         12            mov	al,$12[bp]
15477                                           ! Debug: list unsigned char = al+0 (used reg = )
15478 379B           30E4                       xor	ah,ah
15479 379D           50                         push	ax
15480                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15481 379E           E8         11A3            call	_biosfn_scroll
15482 37A1           83C4                   10  add	sp,*$10
15483                                           !BCC_EOS
15484                                           ! 1795      break;
15485 37A4           E9         03F0            br 	.1
15486                                           !BCC_EOS
15487                                           ! 1796    case 0x08:
15488                                           ! 1797      biosfn_read_char_attr(( BX >> 8 ),&AX);
15489                       000037A7            .1A:
15490                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15491 37A7           8D5E         12            lea	bx,$12[bp]
15492 37AA           53                         push	bx
15493                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15494 37AB           8B46         0C            mov	ax,$C[bp]
15495 37AE           88E0                       mov	al,ah
15496 37B0           30E4                       xor	ah,ah
15497                                           ! Debug: list unsigned int = ax+0 (used reg = )
15498 37B2           50                         push	ax
15499                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15500 37B3           E8         1894            call	_biosfn_read_char_attr
15501 37B6           83C4                   04  add	sp,*4
15502                                           !BCC_EOS
15503                                           ! 1798      break;
15504 37B9           E9         03DB            br 	.1
15505                                           !BCC_EOS
15506                                           ! 1799    case 0x09:
15507                                           ! 1800      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15508                       000037BC            .1B:
15509                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15510 37BC           FF76         10            push	$10[bp]
15511                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15512 37BF           8A46         0C            mov	al,$C[bp]
15513                                           ! Debug: list unsigned char = al+0 (used reg = )
15514 37C2           30E4                       xor	ah,ah
15515 37C4           50                         push	ax
15516                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15517 37C5           8B46         0C            mov	ax,$C[bp]
15518 37C8           88E0                       mov	al,ah
15519 37CA           30E4                       xor	ah,ah
15520                                           ! Debug: list unsigned int = ax+0 (used reg = )
15521 37CC           50                         push	ax
15522                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15523 37CD           8A46         12            mov	al,$12[bp]
15524                                           ! Debug: list unsigned char = al+0 (used reg = )
15525 37D0           30E4                       xor	ah,ah
15526 37D2           50                         push	ax
15527                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15528 37D3           E8         1DB9            call	_biosfn_write_char_attr
15529 37D6           83C4                   08  add	sp,*8
15530                                           !BCC_EOS
15531                                           ! 1801      break;
15532 37D9           E9         03BB            br 	.1
15533                                           !BCC_EOS
15534                                           ! 1802    case 0x0A:
15535                                           ! 1803      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15536                       000037DC            .1C:
15537                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15538 37DC           FF76         10            push	$10[bp]
15539                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15540 37DF           8A46         0C            mov	al,$C[bp]
15541                                           ! Debug: list unsigned char = al+0 (used reg = )
15542 37E2           30E4                       xor	ah,ah
15543 37E4           50                         push	ax
15544                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15545 37E5           8B46         0C            mov	ax,$C[bp]
15546 37E8           88E0                       mov	al,ah
15547 37EA           30E4                       xor	ah,ah
15548                                           ! Debug: list unsigned int = ax+0 (used reg = )
15549 37EC           50                         push	ax
15550                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15551 37ED           8A46         12            mov	al,$12[bp]
15552                                           ! Debug: list unsigned char = al+0 (used reg = )
15553 37F0           30E4                       xor	ah,ah
15554 37F2           50                         push	ax
15555                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15556 37F3           E8         1F8E            call	_biosfn_write_char_only
15557 37F6           83C4                   08  add	sp,*8
15558                                           !BCC_EOS
15559                                           ! 1804      break;
15560 37F9           E9         039B            br 	.1
15561                                           !BCC_EOS
15562                                           ! 1805    case 0x0C:
15563                                           ! 1806      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15564                       000037FC            .1D:
15565                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15566 37FC           FF76         0E            push	$E[bp]
15567                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15568 37FF           FF76         10            push	$10[bp]
15569                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15570 3802           8A46         12            mov	al,$12[bp]
15571                                           ! Debug: list unsigned char = al+0 (used reg = )
15572 3805           30E4                       xor	ah,ah
15573 3807           50                         push	ax
15574                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15575 3808           8B46         0C            mov	ax,$C[bp]
15576 380B           88E0                       mov	al,ah
15577 380D           30E4                       xor	ah,ah
15578                                           ! Debug: list unsigned int = ax+0 (used reg = )
15579 380F           50                         push	ax
15580                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15581 3810           E8         21DF            call	_biosfn_write_pixel
15582 3813           83C4                   08  add	sp,*8
15583                                           !BCC_EOS
15584                                           ! 1807      break;
15585 3816           E9         037E            br 	.1
15586                                           !BCC_EOS
15587                                           ! 1808    case 0x0D:
15588                                           ! 1809      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15589                       00003819            .1E:
15590                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15591 3819           8D5E         12            lea	bx,$12[bp]
15592 381C           53                         push	bx
15593                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15594 381D           FF76         0E            push	$E[bp]
15595                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15596 3820           FF76         10            push	$10[bp]
15597                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15598 3823           8B46         0C            mov	ax,$C[bp]
15599 3826           88E0                       mov	al,ah
15600 3828           30E4                       xor	ah,ah
15601                                           ! Debug: list unsigned int = ax+0 (used reg = )
15602 382A           50                         push	ax
15603                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15604 382B           E8         2460            call	_biosfn_read_pixel
15605 382E           83C4                   08  add	sp,*8
15606                                           !BCC_EOS
15607                                           ! 1810      break;
15608 3831           E9         0363            br 	.1
15609                                           !BCC_EOS
15610                                           ! 1811    case 0x0E:
15611                                           ! 1812      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15612                       00003834            .1F:
15613                                           ! Debug: list int = const 2 (used reg = )
15614 3834           B8                   0002  mov	ax,*2
15615 3837           50                         push	ax
15616                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15617 3838           8A46         0C            mov	al,$C[bp]
15618                                           ! Debug: list unsigned char = al+0 (used reg = )
15619 383B           30E4                       xor	ah,ah
15620 383D           50                         push	ax
15621                                           ! Debug: list int = const $FF (used reg = )
15622 383E           B8                   00FF  mov	ax,#$FF
15623 3841           50                         push	ax
15624                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15625 3842           8A46         12            mov	al,$12[bp]
15626                                           ! Debug: list unsigned char = al+0 (used reg = )
15627 3845           30E4                       xor	ah,ah
15628 3847           50                         push	ax
15629                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15630 3848           E8         264B            call	_biosfn_write_teletype
15631 384B           83C4                   08  add	sp,*8
15632                                           !BCC_EOS
15633                                           ! 1813      break;
15634 384E           E9         0346            br 	.1
15635                                           !BCC_EOS
15636                                           ! 1814    case 0x10:
15637                                           ! 1815      biosfn_perform_gray_scale_summing(BX,CX);
15638                       00003851            .20:
15639                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15640 3851           FF76         10            push	$10[bp]
15641                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15642 3854           FF76         0C            push	$C[bp]
15643                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15644 3857           E8         2C31            call	_biosfn_perform_gray_scale_summing
15645 385A           83C4                   04  add	sp,*4
15646                                           !BCC_EOS
15647                                           ! 1816      break;
15648 385D           E9         0337            br 	.1
15649                                           !BCC_EOS
15650                                           ! 1817    case 0x11:
15651                                           ! 1818      switch(( AX & 0x00ff ))
15652                       00003860            .21:
15653                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15654 3860           8A46         12            mov	al,$12[bp]
15655                                           ! 1819       {
15656 3863           E9         00E1            br 	.24
15657                                           ! 1820        case 0x00:
15658                                           ! 1821        case 0x10:
15659                       00003866            .25:
15660                                           ! 1822         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15661                       00003866            .26:
15662                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15663 3866           8B46         0C            mov	ax,$C[bp]
15664 3869           88E0                       mov	al,ah
15665 386B           30E4                       xor	ah,ah
15666                                           ! Debug: list unsigned int = ax+0 (used reg = )
15667 386D           50                         push	ax
15668                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15669 386E           8A46         0C            mov	al,$C[bp]
15670                                           ! Debug: list unsigned char = al+0 (used reg = )
15671 3871           30E4                       xor	ah,ah
15672 3873           50                         push	ax
15673                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15674 3874           FF76         0E            push	$E[bp]
15675                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15676 3877           FF76         10            push	$10[bp]
15677                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15678 387A           FF76         08            push	8[bp]
15679                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15680 387D           FF76         16            push	$16[bp]
15681                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15682 3880           8A46         12            mov	al,$12[bp]
15683                                           ! Debug: list unsigned char = al+0 (used reg = )
15684 3883           30E4                       xor	ah,ah
15685 3885           50                         push	ax
15686                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15687 3886           E8         2EA9            call	_biosfn_load_text_user_pat
15688 3889           83C4                   0E  add	sp,*$E
15689                                           !BCC_EOS
15690                                           ! 1823         break;
15691 388C           E9         010C            br 	.22
15692                                           !BCC_EOS
15693                                           ! 1824        case 0x01:
15694                                           ! 1825        case 0x11:
15695                       0000388F            .27:
15696                                           ! 1826         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15697                       0000388F            .28:
15698                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15699 388F           8A46         0C            mov	al,$C[bp]
15700                                           ! Debug: list unsigned char = al+0 (used reg = )
15701 3892           30E4                       xor	ah,ah
15702 3894           50                         push	ax
15703                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15704 3895           8A46         12            mov	al,$12[bp]
15705                                           ! Debug: list unsigned char = al+0 (used reg = )
15706 3898           30E4                       xor	ah,ah
15707 389A           50                         push	ax
15708                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15709 389B           E8         2F30            call	_biosfn_load_text_8_14_pat
15710 389E           83C4                   04  add	sp,*4
15711                                           !BCC_EOS
15712                                           ! 1827         break;
15713 38A1           E9         00F7            br 	.22
15714                                           !BCC_EOS
15715                                           ! 1828        case 0x02:
15716                                           ! 1829        case 0x12:
15717                       000038A4            .29:
15718                                           ! 1830         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15719                       000038A4            .2A:
15720                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15721 38A4           8A46         0C            mov	al,$C[bp]
15722                                           ! Debug: list unsigned char = al+0 (used reg = )
15723 38A7           30E4                       xor	ah,ah
15724 38A9           50                         push	ax
15725                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15726 38AA           8A46         12            mov	al,$12[bp]
15727                                           ! Debug: list unsigned char = al+0 (used reg = )
15728 38AD           30E4                       xor	ah,ah
15729 38AF           50                         push	ax
15730                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15731 38B0           E8         2FB2            call	_biosfn_load_text_8_8_pat
15732 38B3           83C4                   04  add	sp,*4
15733                                           !BCC_EOS
15734                                           ! 1831         break;
15735 38B6           E9         00E2            br 	.22
15736                                           !BCC_EOS
15737                                           ! 1832        case 0x04:
15738                                           ! 1833        case 0x14:
15739                       000038B9            .2B:
15740                                           ! 1834         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15741                       000038B9            .2C:
15742                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15743 38B9           8A46         0C            mov	al,$C[bp]
15744                                           ! Debug: list unsigned char = al+0 (used reg = )
15745 38BC           30E4                       xor	ah,ah
15746 38BE           50                         push	ax
15747                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15748 38BF           8A46         12            mov	al,$12[bp]
15749                                           ! Debug: list unsigned char = al+0 (used reg = )
15750 38C2           30E4                       xor	ah,ah
15751 38C4           50                         push	ax
15752                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15753 38C5           E8         303B            call	_biosfn_load_text_8_16_pat
15754 38C8           83C4                   04  add	sp,*4
15755                                           !BCC_EOS
15756                                           ! 1835         break;
15757 38CB           E9         00CD            br 	.22
15758                                           !BCC_EOS
15759                                           ! 1836        case 0x20:
15760                                           ! 1837         biosfn_load_gfx_8_8_chars(ES,BP);
15761                       000038CE            .2D:
15762                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15763 38CE           FF76         08            push	8[bp]
15764                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15765 38D1           FF76         16            push	$16[bp]
15766                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15767 38D4           E8         30BD            call	_biosfn_load_gfx_8_8_chars
15768 38D7           83C4                   04  add	sp,*4
15769                                           !BCC_EOS
15770                                           ! 1838         break;
15771 38DA           E9         00BE            br 	.22
15772                                           !BCC_EOS
15773                                           ! 1839        case 0x21:
15774                                           ! 1840         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15775                       000038DD            .2E:
15776                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15777 38DD           8A46         0E            mov	al,$E[bp]
15778                                           ! Debug: list unsigned char = al+0 (used reg = )
15779 38E0           30E4                       xor	ah,ah
15780 38E2           50                         push	ax
15781                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15782 38E3           8A46         0C            mov	al,$C[bp]
15783                                           ! Debug: list unsigned char = al+0 (used reg = )
15784 38E6           30E4                       xor	ah,ah
15785 38E8           50                         push	ax
15786                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15787 38E9           FF76         10            push	$10[bp]
15788                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15789 38EC           FF76         08            push	8[bp]
15790                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15791 38EF           FF76         16            push	$16[bp]
15792                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15793 38F2           E8         30A0            call	_biosfn_load_gfx_user_chars
15794 38F5           83C4                   0A  add	sp,*$A
15795                                           !BCC_EOS
15796                                           ! 1841         break;
15797 38F8           E9         00A0            br 	.22
15798                                           !BCC_EOS
15799                                           ! 1842        case 0x22:
15800                                           ! 1843         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15801                       000038FB            .2F:
15802                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15803 38FB           8A46         0C            mov	al,$C[bp]
15804                                           ! Debug: list unsigned char = al+0 (used reg = )
15805 38FE           30E4                       xor	ah,ah
15806 3900           50                         push	ax
15807                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15808 3901           E8         3092            call	_biosfn_load_gfx_8_14_chars
15809 3904           44                         inc	sp
15810 3905           44                         inc	sp
15811                                           !BCC_EOS
15812                                           ! 1844         break;
15813 3906           E9         0092            br 	.22
15814                                           !BCC_EOS
15815                                           ! 1845        case 0x23:
15816                                           ! 1846         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15817                       00003909            .30:
15818                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15819 3909           8A46         0C            mov	al,$C[bp]
15820                                           ! Debug: list unsigned char = al+0 (used reg = )
15821 390C           30E4                       xor	ah,ah
15822 390E           50                         push	ax
15823                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15824 390F           E8         3085            call	_biosfn_load_gfx_8_8_dd_chars
15825 3912           44                         inc	sp
15826 3913           44                         inc	sp
15827                                           !BCC_EOS
15828                                           ! 1847         break;
15829 3914           E9         0084            br 	.22
15830                                           !BCC_EOS
15831                                           ! 1848        case 0x24:
15832                                           ! 1849         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15833                       00003917            .31:
15834                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15835 3917           8A46         0C            mov	al,$C[bp]
15836                                           ! Debug: list unsigned char = al+0 (used reg = )
15837 391A           30E4                       xor	ah,ah
15838 391C           50                         push	ax
15839                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15840 391D           E8         3078            call	_biosfn_load_gfx_8_16_chars
15841 3920           44                         inc	sp
15842 3921           44                         inc	sp
15843                                           !BCC_EOS
15844                                           ! 1850         break;
15845 3922           E9         0076            br 	.22
15846                                           !BCC_EOS
15847                                           ! 1851        case 0x30:
15848                                           ! 1852         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15849                       00003925            .32:
15850                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15851 3925           8D5E         0E            lea	bx,$E[bp]
15852 3928           53                         push	bx
15853                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15854 3929           8D5E         10            lea	bx,$10[bp]
15855 392C           53                         push	bx
15856                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15857 392D           8D5E         08            lea	bx,8[bp]
15858 3930           53                         push	bx
15859                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15860 3931           8D5E         16            lea	bx,$16[bp]
15861 3934           53                         push	bx
15862                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15863 3935           8B46         0C            mov	ax,$C[bp]
15864 3938           88E0                       mov	al,ah
15865 393A           30E4                       xor	ah,ah
15866                                           ! Debug: list unsigned int = ax+0 (used reg = )
15867 393C           50                         push	ax
15868                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15869 393D           E8         3059            call	_biosfn_get_font_info
15870 3940           83C4                   0A  add	sp,*$A
15871                                           !BCC_EOS
15872                                           ! 1853         break;
15873 3943           EB           56            jmp .22
15874                                           !BCC_EOS
15875                                           ! 1854       }
15876                                           ! 1855      break;
15877 3945           EB           54            jmp .22
15878                       00003947            .24:
15879 3947           2C                     00  sub	al,*0
15880 3949         0F84         FF19            beq 	.25
15881 394D           2C                     01  sub	al,*1
15882 394F         0F84         FF3C            beq 	.27
15883 3953           2C                     01  sub	al,*1
15884 3955         0F84         FF4B            beq 	.29
15885 3959           2C                     02  sub	al,*2
15886 395B         0F84         FF5A            beq 	.2B
15887 395F           2C                     0C  sub	al,*$C
15888 3961         0F84         FF01            beq 	.26
15889 3965           2C                     01  sub	al,*1
15890 3967         0F84         FF24            beq 	.28
15891 396B           2C                     01  sub	al,*1
15892 396D         0F84         FF33            beq 	.2A
15893 3971           2C                     02  sub	al,*2
15894 3973         0F84         FF42            beq 	.2C
15895 3977           2C                     0C  sub	al,*$C
15896 3979         0F84         FF51            beq 	.2D
15897 397D           2C                     01  sub	al,*1
15898 397F         0F84         FF5A            beq 	.2E
15899 3983           2C                     01  sub	al,*1
15900 3985         0F84         FF72            beq 	.2F
15901 3989           2C                     01  sub	al,*1
15902 398B         0F84         FF7A            beq 	.30
15903 398F           2C                     01  sub	al,*1
15904 3991         0F84         FF82            beq 	.31
15905 3995           2C                     0C  sub	al,*$C
15906 3997         0F84         FF8A            beq 	.32
15907                       0000399B            .22:
15908 399B           E9         01F9            br 	.1
15909                                           !BCC_EOS
15910                                           ! 1856    case 0x12:
15911                                           ! 1857      switch(( BX & 0x00ff ))
15912                       0000399E            .33:
15913                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15914 399E           8A46         0C            mov	al,$C[bp]
15915                                           ! 1858       {
15916 39A1           EB           3C            jmp .36
15917                                           ! 1859        case 0x20:
15918                                           ! 1860         biosfn_alternate_prtsc();
15919                       000039A3            .37:
15920                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15921 39A3           E8         31CD            call	_biosfn_alternate_prtsc
15922                                           !BCC_EOS
15923                                           ! 1861         break;
15924 39A6           EB           43            jmp .34
15925                                           !BCC_EOS
15926                                           ! 1862        case 0x35:
15927                                           ! 1863         biosfn_switch_video_in
15928                                           ! 1863 terface(( AX & 0x00ff ),ES,DX);
15929                       000039A8            .38:
15930                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15931 39A8           FF76         0E            push	$E[bp]
15932                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15933 39AB           FF76         16            push	$16[bp]
15934                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15935 39AE           8A46         12            mov	al,$12[bp]
15936                                           ! Debug: list unsigned char = al+0 (used reg = )
15937 39B1           30E4                       xor	ah,ah
15938 39B3           50                         push	ax
15939                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15940 39B4           E8         3296            call	_biosfn_switch_video_interface
15941 39B7           83C4                   06  add	sp,*6
15942                                           !BCC_EOS
15943                                           ! 1864         AX = ((AX & 0xff00) | (0x12));
15944                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15945 39BA           8B46         12            mov	ax,$12[bp]
15946 39BD           30C0                       xor	al,al
15947                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15948 39BF           0C                     12  or	al,*$12
15949                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15950 39C1           8946         12            mov	$12[bp],ax
15951                                           !BCC_EOS
15952                                           ! 1865         break;
15953 39C4           EB           25            jmp .34
15954                                           !BCC_EOS
15955                                           ! 1866        case 0x36:
15956                                           ! 1867         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15957                       000039C6            .39:
15958                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15959 39C6           8A46         12            mov	al,$12[bp]
15960                                           ! Debug: list unsigned char = al+0 (used reg = )
15961 39C9           30E4                       xor	ah,ah
15962 39CB           50                         push	ax
15963                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15964 39CC           E8         327F            call	_biosfn_enable_video_refresh_control
15965 39CF           44                         inc	sp
15966 39D0           44                         inc	sp
15967                                           !BCC_EOS
15968                                           ! 1868         AX = ((AX & 0xff00) | (0x12));
15969                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15970 39D1           8B46         12            mov	ax,$12[bp]
15971 39D4           30C0                       xor	al,al
15972                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15973 39D6           0C                     12  or	al,*$12
15974                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15975 39D8           8946         12            mov	$12[bp],ax
15976                                           !BCC_EOS
15977                                           ! 1869         break;
15978 39DB           EB           0E            jmp .34
15979                                           !BCC_EOS
15980                                           ! 1870       }
15981                                           ! 1871      break;
15982 39DD           EB           0C            jmp .34
15983                       000039DF            .36:
15984 39DF           2C                     20  sub	al,*$20
15985 39E1           74           C0            je 	.37
15986 39E3           2C                     15  sub	al,*$15
15987 39E5           74           C1            je 	.38
15988 39E7           2C                     01  sub	al,*1
15989 39E9           74           DB            je 	.39
15990                       000039EB            .34:
15991 39EB           E9         01A9            br 	.1
15992                                           !BCC_EOS
15993                                           ! 1872    case 0x13:
15994                                           ! 1873      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15995                       000039EE            .3A:
15996                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15997 39EE           FF76         08            push	8[bp]
15998                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15999 39F1           FF76         16            push	$16[bp]
16000                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16001 39F4           8A46         0E            mov	al,$E[bp]
16002                                           ! Debug: list unsigned char = al+0 (used reg = )
16003 39F7           30E4                       xor	ah,ah
16004 39F9           50                         push	ax
16005                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16006 39FA           8B46         0E            mov	ax,$E[bp]
16007 39FD           88E0                       mov	al,ah
16008 39FF           30E4                       xor	ah,ah
16009                                           ! Debug: list unsigned int = ax+0 (used reg = )
16010 3A01           50                         push	ax
16011                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16012 3A02           FF76         10            push	$10[bp]
16013                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16014 3A05           8A46         0C            mov	al,$C[bp]
16015                                           ! Debug: list unsigned char = al+0 (used reg = )
16016 3A08           30E4                       xor	ah,ah
16017 3A0A           50                         push	ax
16018                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16019 3A0B           8B46         0C            mov	ax,$C[bp]
16020 3A0E           88E0                       mov	al,ah
16021 3A10           30E4                       xor	ah,ah
16022                                           ! Debug: list unsigned int = ax+0 (used reg = )
16023 3A12           50                         push	ax
16024                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16025 3A13           8A46         12            mov	al,$12[bp]
16026                                           ! Debug: list unsigned char = al+0 (used reg = )
16027 3A16           30E4                       xor	ah,ah
16028 3A18           50                         push	ax
16029                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16030 3A19           E8         3233            call	_biosfn_write_string
16031 3A1C           83C4                   10  add	sp,*$10
16032                                           !BCC_EOS
16033                                           ! 1874      break;
16034 3A1F           E9         0175            br 	.1
16035                                           !BCC_EOS
16036                                           ! 1875    case 0x1B:
16037                                           ! 1876      biosfn_read_state_info(BX,ES,DI);
16038                       00003A22            .3B:
16039                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16040 3A22           FF76         04            push	4[bp]
16041                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16042 3A25           FF76         16            push	$16[bp]
16043                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16044 3A28           FF76         0C            push	$C[bp]
16045                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16046 3A2B           E8         332D            call	_biosfn_read_state_info
16047 3A2E           83C4                   06  add	sp,*6
16048                                           !BCC_EOS
16049                                           ! 1877      AX = ((AX & 0xff00) | (0x1B));
16050                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16051 3A31           8B46         12            mov	ax,$12[bp]
16052 3A34           30C0                       xor	al,al
16053                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16054 3A36           0C                     1B  or	al,*$1B
16055                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16056 3A38           8946         12            mov	$12[bp],ax
16057                                           !BCC_EOS
16058                                           ! 1878      break;
16059 3A3B           E9         0159            br 	.1
16060                                           !BCC_EOS
16061                                           ! 1879    case 0x1C:
16062                                           ! 1880      switch(( AX & 0x00ff ))
16063                       00003A3E            .3C:
16064                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16065 3A3E           8A46         12            mov	al,$12[bp]
16066                                           ! 1881       {
16067 3A41           E9         0033            br 	.3F
16068                                           ! 1882        case 0x00:
16069                                           ! 1883         biosfn_read_video_state_size(CX,&BX);
16070                       00003A44            .40:
16071                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16072 3A44           8D5E         0C            lea	bx,$C[bp]
16073 3A47           53                         push	bx
16074                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16075 3A48           FF76         10            push	$10[bp]
16076                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16077 3A4B           E8         348C            call	_biosfn_read_video_state_size
16078 3A4E           83C4                   04  add	sp,*4
16079                                           !BCC_EOS
16080                                           ! 1884         break;
16081 3A51           EB           30            jmp .3D
16082                                           !BCC_EOS
16083                                           ! 1885        case 0x01:
16084                                           ! 1886         biosfn_save_video_state(CX,ES,BX);
16085                       00003A53            .41:
16086                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16087 3A53           FF76         0C            push	$C[bp]
16088                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16089 3A56           FF76         16            push	$16[bp]
16090                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16091 3A59           FF76         10            push	$10[bp]
16092                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16093 3A5C           E8         349F            call	_biosfn_save_video_state
16094 3A5F           83C4                   06  add	sp,*6
16095                                           !BCC_EOS
16096                                           ! 1887         break;
16097 3A62           EB           1F            jmp .3D
16098                                           !BCC_EOS
16099                                           ! 1888        case 0x02:
16100                                           ! 1889         biosfn_restore_video_state(CX,ES,BX);
16101                       00003A64            .42:
16102                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16103 3A64           FF76         0C            push	$C[bp]
16104                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16105 3A67           FF76         16            push	$16[bp]
16106                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16107 3A6A           FF76         10            push	$10[bp]
16108                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16109 3A6D           E8         3A58            call	_biosfn_restore_video_state
16110 3A70           83C4                   06  add	sp,*6
16111                                           !BCC_EOS
16112                                           ! 1890         break;
16113 3A73           EB           0E            jmp .3D
16114                                           !BCC_EOS
16115                                           ! 1891       }
16116                                           ! 1892      AX = ((AX & 0xff00) | (0x1C));
16117 3A75           EB           0C            jmp .3D
16118                       00003A77            .3F:
16119 3A77           2C                     00  sub	al,*0
16120 3A79           74           C9            je 	.40
16121 3A7B           2C                     01  sub	al,*1
16122 3A7D           74           D4            je 	.41
16123 3A7F           2C                     01  sub	al,*1
16124 3A81           74           E1            je 	.42
16125                       00003A83            .3D:
16126                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16127 3A83           8B46         12            mov	ax,$12[bp]
16128 3A86           30C0                       xor	al,al
16129                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16130 3A88           0C                     1C  or	al,*$1C
16131                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16132 3A8A           8946         12            mov	$12[bp],ax
16133                                           !BCC_EOS
16134                                           ! 1893      break;
16135 3A8D           E9         0107            br 	.1
16136                                           !BCC_EOS
16137                                           ! 1894    case 0x4f:
16138                                           ! 1895      if (vbe_has_vbe_display()) {
16139                       00003A90            .43:
16140                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16141 3A90           E8         587B            call	_vbe_has_vbe_display
16142 3A93           85C0                       test	ax,ax
16143 3A95         0F84         00A0            beq 	.44
16144                       00003A99            .45:
16145                                           ! 1896        switch(( AX & 0x00ff ))
16146                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16147 3A99           8A46         12            mov	al,$12[bp]
16148                                           ! 1897        {
16149 3A9C           EB           6E            jmp .48
16150                                           ! 1898          case 0x00:
16151                                           ! 1899           vbe_biosfn_return_controller_information(&AX,ES,DI);
16152                       00003A9E            .49:
16153                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16154 3A9E           FF76         04            push	4[bp]
16155                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16156 3AA1           FF76         16            push	$16[bp]
16157                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16158 3AA4           8D5E         12            lea	bx,$12[bp]
16159 3AA7           53                         push	bx
16160                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16161 3AA8           E8         58DC            call	_vbe_biosfn_return_controller_information
16162 3AAB           83C4                   06  add	sp,*6
16163                                           !BCC_EOS
16164                                           ! 1900           break;
16165 3AAE           E9         0086            br 	.46
16166                                           !BCC_EOS
16167                                           ! 1901          case 0x01:
16168                                           ! 1902           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16169                       00003AB1            .4A:
16170                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16171 3AB1           FF76         04            push	4[bp]
16172                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16173 3AB4           FF76         16            push	$16[bp]
16174                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16175 3AB7           FF76         10            push	$10[bp]
16176                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16177 3ABA           8D5E         12            lea	bx,$12[bp]
16178 3ABD           53                         push	bx
16179                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16180 3ABE           E8         5B0A            call	_vbe_biosfn_return_mode_information
16181 3AC1           83C4                   08  add	sp,*8
16182                                           !BCC_EOS
16183                                           ! 1903           break;
16184 3AC4           EB           71            jmp .46
16185                                           !BCC_EOS
16186                                           ! 1904          case 0x02:
16187                                           ! 1905           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16188                       00003AC6            .4B:
16189                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16190 3AC6           FF76         04            push	4[bp]
16191                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16192 3AC9           FF76         16            push	$16[bp]
16193                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16194 3ACC           FF76         0C            push	$C[bp]
16195                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16196 3ACF           8D5E         12            lea	bx,$12[bp]
16197 3AD2           53                         push	bx
16198                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16199 3AD3           E8         5C52            call	_vbe_biosfn_set_mode
16200 3AD6           83C4                   08  add	sp,*8
16201                                           !BCC_EOS
16202                                           ! 1906           break;
16203 3AD9           EB           5C            jmp .46
16204                                           !BCC_EOS
16205                                           ! 1907          case 0x04:
16206                                           ! 1908           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16207                       00003ADB            .4C:
16208                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16209 3ADB           8D5E         0C            lea	bx,$C[bp]
16210 3ADE           53                         push	bx
16211                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16212 3ADF           FF76         16            push	$16[bp]
16213                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16214 3AE2           FF76         0E            push	$E[bp]
16215                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16216 3AE5           FF76         10            push	$10[bp]
16217                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16218 3AE8           8D5E         12            lea	bx,$12[bp]
16219 3AEB           53                         push	bx
16220                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16221 3AEC           E8         5F6D            call	_vbe_biosfn_save_restore_state
16222 3AEF           83C4                   0A  add	sp,*$A
16223                                           !BCC_EOS
16224                                           ! 1909           break;
16225 3AF2           EB           43            jmp .46
16226                                           !BCC_EOS
16227                                           ! 1910          case 0x09:
16228                                           ! 1911           AX=0x100;
16229                       00003AF4            .4D:
16230                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16231 3AF4           B8                   0100  mov	ax,#$100
16232 3AF7           8946         12            mov	$12[bp],ax
16233                                           !BCC_EOS
16234                                           ! 1912           break;
16235 3AFA           EB           3B            jmp .46
16236                                           !BCC_EOS
16237                                           ! 1913          case 0x0A:
16238                                           ! 1914           AX=0x100;
16239                       00003AFC            .4E:
16240                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16241 3AFC           B8                   0100  mov	ax,#$100
16242 3AFF           8946         12            mov	$12[bp],ax
16243                                           !BCC_EOS
16244                                           ! 1915           break;
16245 3B02           EB           33            jmp .46
16246                                           !BCC_EOS
16247                                           ! 1916          default:
16248                                           ! 1917           AX=0x100;
16249                       00003B04            .4F:
16250                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16251 3B04           B8                   0100  mov	ax,#$100
16252 3B07           8946         12            mov	$12[bp],ax
16253                                           !BCC_EOS
16254                                           ! 1918           }
16255                                           ! 1919         }
16256 3B0A           EB           2B            jmp .46
16257                       00003B0C            .48:
16258 3B0C           2C                     00  sub	al,*0
16259 3B0E           72           F4            jb 	.4F
16260 3B10           3C                     0A  cmp	al,*$A
16261 3B12           77           21            ja  	.50
16262 3B14           30E4                       xor	ah,ah
16263 3B16           D1E0                       shl	ax,*1
16264 3B18           89C3                       mov	bx,ax
16265 3B1A           2E                         seg	cs
16266 3B1B           FFA7       3B1F            br	.51[bx]
16267                       00003B1F            .51:
16268 3B1F                      3A9E            .word	.49
16269 3B21                      3AB1            .word	.4A
16270 3B23                      3AC6            .word	.4B
16271 3B25                      3B04            .word	.4F
16272 3B27                      3ADB            .word	.4C
16273 3B29                      3B04            .word	.4F
16274 3B2B                      3B04            .word	.4F
16275 3B2D                      3B04            .word	.4F
16276 3B2F                      3B04            .word	.4F
16277 3B31                      3AF4            .word	.4D
16278 3B33                      3AFC            .word	.4E
16279                       00003B35            .50:
16280 3B35           EB           CD            jmp	.4F
16281                       00003B37            .46:
16282                                           ! 1920         else {
16283 3B37           EB           06            jmp .52
16284                       00003B39            .44:
16285                                           ! 1921           AX=0x0100;
16286                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16287 3B39           B8                   0100  mov	ax,#$100
16288 3B3C           8946         12            mov	$12[bp],ax
16289                                           !BCC_EOS
16290                                           ! 1922           }
16291                                           ! 1923         break;
16292                       00003B3F            .52:
16293 3B3F           EB           56            jmp .1
16294                                           !BCC_EOS
16295                                           ! 1924   }
16296                                           ! 1925 }
16297 3B41           EB           54            jmp .1
16298                       00003B43            .3:
16299 3B43           2D                   0000  sub	ax,*0
16300 3B46           7C           4F            jl  	.1
16301 3B48           3D                   001C  cmp	ax,*$1C
16302 3B4B           77           43            ja  	.53
16303 3B4D           D1E0                       shl	ax,*1
16304 3B4F           89C3                       mov	bx,ax
16305 3B51           2E                         seg	cs
16306 3B52           FFA7       3B56            br	.54[bx]
16307                       00003B56            .54:
16308 3B56                      366B            .word	.4
16309 3B58                      36C9            .word	.13
16310 3B5A                      36E0            .word	.14
16311 3B5C                      36F4            .word	.15
16312 3B5E                      370D            .word	.16
16313 3B60                      3724            .word	.17
16314 3B62                      3732            .word	.18
16315 3B64                      376D            .word	.19
16316 3B66                      37A7            .word	.1A
16317 3B68                      37BC            .word	.1B
16318 3B6A                      37DC            .word	.1C
16319 3B6C                      3B97            .word	.1
16320 3B6E                      37FC            .word	.1D
16321 3B70                      3819            .word	.1E
16322 3B72                      3834            .word	.1F
16323 3B74                      3B97            .word	.1
16324 3B76                      3851            .word	.20
16325 3B78                      3860            .word	.21
16326 3B7A                      399E            .word	.33
16327 3B7C                      39EE            .word	.3A
16328 3B7E                      3B97            .word	.1
16329 3B80                      3B97            .word	.1
16330 3B82                      3B97            .word	.1
16331 3B84                      3B97            .word	.1
16332 3B86                      3B97            .word	.1
16333 3B88                      3B97            .word	.1
16334 3B8A                      3B97            .word	.1
16335 3B8C                      3A22            .word	.3B
16336 3B8E                      3A3E            .word	.3C
16337                       00003B90            .53:
16338 3B90           2D                   004F  sub	ax,*$4F
16339 3B93         0F84         FEF9            beq 	.43
16340                       00003B97            .1:
16341                       FFFFFFFE            ..FFFF	=	-2
16342 3B97           5D                         pop	bp
16343 3B98           C3                         ret
16344                                           ! 1926 static void biosfn_set_video_mode(mode) Bit8u mode;
16345                                           ! Register BX used in function int10_func
16346                       00003B99            _biosfn_set_video_mode:
16347                                           !BCC_EOS
16348                                           ! 1927 {
16349                                           ! 1928  Bit8u noclearmem=mode&0x80;
16350 3B99           55                         push	bp
16351 3B9A           89E5                       mov	bp,sp
16352 3B9C           4C                         dec	sp
16353                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16354 3B9D           8A46         04            mov	al,4[bp]
16355 3BA0           24                     80  and	al,#$80
16356                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16357 3BA2           8846         FF            mov	-1[bp],al
16358                                           !BCC_EOS
16359                                           ! 1929  Bit8u line,mmask,*palette,vpti;
16360                                           !BCC_EOS
16361                                           ! 1930  Bit16u i,twidth,theightm1,cheight;
16362                                           !BCC_EOS
16363                                           ! 1931  Bit8u modeset_ctl,video_ctl,vga_switches;
16364                                           !BCC_EOS
16365                                           ! 1932  Bit16u crtc_addr;
16366                                           !BCC_EOS
16367                                           ! 1933  if (vbe_has_vbe_display()) {
16368 3BA5           83C4                   EB  add	sp,*-$15
16369                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16370 3BA8           E8         5763            call	_vbe_has_vbe_display
16371 3BAB           85C0                       test	ax,ax
16372 3BAD           74           08            je  	.55
16373                       00003BAF            .56:
16374                                           ! 1934    dispi_set_enable(0x00);
16375                                           ! Debug: list int = const 0 (used reg = )
16376 3BAF           31C0                       xor	ax,ax
16377 3BB1           50                         push	ax
16378                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16379 3BB2           E8         5526            call	_dispi_set_enable
16380 3BB5           44                         inc	sp
16381 3BB6           44                         inc	sp
16382                                           !BCC_EOS
16383                                           ! 1935   }
16384                                           ! 1936  mode=mode&0x7f;
16385                       00003BB7            .55:
16386                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16387 3BB7           8A46         04            mov	al,4[bp]
16388 3BBA           24                     7F  and	al,*$7F
16389                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16390 3BBC           8846         04            mov	4[bp],al
16391                                           !BCC_EOS
16392                                           ! 1937  line=find_vga_entry(mode);
16393                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16394 3BBF           8A46         04            mov	al,4[bp]
16395 3BC2           30E4                       xor	ah,ah
16396 3BC4           50                         push	ax
16397                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16398 3BC5           E8         3EDE            call	_find_vga_entry
16399 3BC8           44                         inc	sp
16400 3BC9           44                         inc	sp
16401                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16402 3BCA           8846         FE            mov	-2[bp],al
16403                                           !BCC_EOS
16404                                           ! 1938  if(line==0xFF)
16405                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16406 3BCD           8A46         FE            mov	al,-2[bp]
16407 3BD0           3C                     FF  cmp	al,#$FF
16408 3BD2           75           04            jne 	.57
16409                       00003BD4            .58:
16410                                           ! 1939   return;
16411 3BD4           89EC                       mov	sp,bp
16412 3BD6           5D                         pop	bp
16413 3BD7           C3                         ret
16414                                           !BCC_EOS
16415                                           ! 1940  vpti=line_to_vpti[line];
16416                       00003BD8            .57:
16417                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16418 3BD8           8A46         FE            mov	al,-2[bp]
16419 3BDB           30E4                       xor	ah,ah
16420 3BDD           89C3                       mov	bx,ax
16421                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16422 3BDF           8A87       027F            mov	al,_line_to_vpti[bx]
16423 3BE3           8846         F9            mov	-7[bp],al
16424                                           !BCC_EOS
16425                                           ! 1941  twidth=video_param_table[vpti].twidth;
16426                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16427 3BE6           8A46         F9            mov	al,-7[bp]
16428 3BE9           30E4                       xor	ah,ah
16429 3BEB           B1                     06  mov	cl,*6
16430 3BED           D3E0                       shl	ax,cl
16431 3BEF           89C3                       mov	bx,ax
16432                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16433 3BF1           8A87       0293            mov	al,_video_param_table[bx]
16434 3BF5           30E4                       xor	ah,ah
16435 3BF7           8946         F4            mov	-$C[bp],ax
16436                                           !BCC_EOS
16437                                           ! 1942  theightm1=video_param_table[vpti].theightm1;
16438                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16439 3BFA           8A46         F9            mov	al,-7[bp]
16440 3BFD           30E4                       xor	ah,ah
16441 3BFF           B1                     06  mov	cl,*6
16442 3C01           D3E0                       shl	ax,cl
16443 3C03           89C3                       mov	bx,ax
16444 3C05           81C3                 0293  add	bx,#_video_param_table
16445                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16446 3C09           8A47         01            mov	al,1[bx]
16447 3C0C           30E4                       xor	ah,ah
16448 3C0E           8946         F2            mov	-$E[bp],ax
16449                                           !BCC_EOS
16450                                           ! 1943  cheight=video_param_table[vpti].cheight;
16451                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16452 3C11           8A46         F9            mov	al,-7[bp]
16453 3C14           30E4                       xor	ah,ah
16454 3C16           B1                     06  mov	cl,*6
16455 3C18           D3E0                       shl	ax,cl
16456 3C1A           89C3                       mov	bx,ax
16457 3C1C           81C3                 0293  add	bx,#_video_param_table
16458                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16459 3C20           8A47         02            mov	al,2[bx]
16460 3C23           30E4                       xor	ah,ah
16461 3C25           8946         F0            mov	-$10[bp],ax
16462                                           !BCC_EOS
16463                                           ! 1944  video_ctl=read_byte(0
16464                                           ! 1944 x40,0x87);
16465                                           ! Debug: list int = const $87 (used reg = )
16466 3C28           B8                   0087  mov	ax,#$87
16467 3C2B           50                         push	ax
16468                                           ! Debug: list int = const $40 (used reg = )
16469 3C2C           B8                   0040  mov	ax,*$40
16470 3C2F           50                         push	ax
16471                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16472 3C30           E8         3F5F            call	_read_byte
16473 3C33           83C4                   04  add	sp,*4
16474                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16475 3C36           8846         EE            mov	-$12[bp],al
16476                                           !BCC_EOS
16477                                           ! 1945  vga_switches=read_byte(0x40,0x88);
16478                                           ! Debug: list int = const $88 (used reg = )
16479 3C39           B8                   0088  mov	ax,#$88
16480 3C3C           50                         push	ax
16481                                           ! Debug: list int = const $40 (used reg = )
16482 3C3D           B8                   0040  mov	ax,*$40
16483 3C40           50                         push	ax
16484                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16485 3C41           E8         3F4E            call	_read_byte
16486 3C44           83C4                   04  add	sp,*4
16487                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16488 3C47           8846         ED            mov	-$13[bp],al
16489                                           !BCC_EOS
16490                                           ! 1946  modeset_ctl=read_byte(0x40,0x89);
16491                                           ! Debug: list int = const $89 (used reg = )
16492 3C4A           B8                   0089  mov	ax,#$89
16493 3C4D           50                         push	ax
16494                                           ! Debug: list int = const $40 (used reg = )
16495 3C4E           B8                   0040  mov	ax,*$40
16496 3C51           50                         push	ax
16497                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16498 3C52           E8         3F3D            call	_read_byte
16499 3C55           83C4                   04  add	sp,*4
16500                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16501 3C58           8846         EF            mov	-$11[bp],al
16502                                           !BCC_EOS
16503                                           ! 1947  if((modeset_ctl&0x08)==0)
16504                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16505 3C5B           8A46         EF            mov	al,-$11[bp]
16506 3C5E           24                     08  and	al,*8
16507                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16508 3C60           84C0                       test	al,al
16509 3C62         0F85         0145            bne 	.59
16510                       00003C66            .5A:
16511                                           ! 1948   {
16512                                           ! 1949    outb(0x3c6,vga_modes[line].pelmask);
16513                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16514 3C66           8A46         FE            mov	al,-2[bp]
16515 3C69           30E4                       xor	ah,ah
16516 3C6B           B1                     03  mov	cl,*3
16517 3C6D           D3E0                       shl	ax,cl
16518 3C6F           89C3                       mov	bx,ax
16519 3C71           81C3                 01FF  add	bx,#_vga_modes
16520                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16521 3C75           8A47         06            mov	al,6[bx]
16522 3C78           30E4                       xor	ah,ah
16523 3C7A           50                         push	ax
16524                                           ! Debug: list int = const $3C6 (used reg = )
16525 3C7B           B8                   03C6  mov	ax,#$3C6
16526 3C7E           50                         push	ax
16527                                           ! Debug: func () void = outb+0 (used reg = )
16528 3C7F           E8         3F7C            call	_outb
16529 3C82           83C4                   04  add	sp,*4
16530                                           !BCC_EOS
16531                                           ! 1950    outb(0x3c8,0x00);
16532                                           ! Debug: list int = const 0 (used reg = )
16533 3C85           31C0                       xor	ax,ax
16534 3C87           50                         push	ax
16535                                           ! Debug: list int = const $3C8 (used reg = )
16536 3C88           B8                   03C8  mov	ax,#$3C8
16537 3C8B           50                         push	ax
16538                                           ! Debug: func () void = outb+0 (used reg = )
16539 3C8C           E8         3F6F            call	_outb
16540 3C8F           83C4                   04  add	sp,*4
16541                                           !BCC_EOS
16542                                           ! 1951    switch(vga_modes[line].dacmodel)
16543                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16544 3C92           8A46         FE            mov	al,-2[bp]
16545 3C95           30E4                       xor	ah,ah
16546 3C97           B1                     03  mov	cl,*3
16547 3C99           D3E0                       shl	ax,cl
16548 3C9B           89C3                       mov	bx,ax
16549 3C9D           81C3                 01FF  add	bx,#_vga_modes
16550 3CA1           8A47         07            mov	al,7[bx]
16551                                           ! 1952     {case 0:
16552 3CA4           EB           22            jmp .5D
16553                                           ! 1953       palette=&palette0;
16554                       00003CA6            .5E:
16555                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16556 3CA6           BB                   0A13  mov	bx,#_palette0
16557 3CA9           895E         FA            mov	-6[bp],bx
16558                                           !BCC_EOS
16559                                           ! 1954       break;
16560 3CAC           EB           2A            jmp .5B
16561                                           !BCC_EOS
16562                                           ! 1955      case 1:
16563                                           ! 1956       palette=&palette1;
16564                       00003CAE            .5F:
16565                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16566 3CAE           BB                   0AD3  mov	bx,#_palette1
16567 3CB1           895E         FA            mov	-6[bp],bx
16568                                           !BCC_EOS
16569                                           ! 1957       break;
16570 3CB4           EB           22            jmp .5B
16571                                           !BCC_EOS
16572                                           ! 1958      case 2:
16573                                           ! 1959       palette=&palette2;
16574                       00003CB6            .60:
16575                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16576 3CB6           BB                   0B93  mov	bx,#_palette2
16577 3CB9           895E         FA            mov	-6[bp],bx
16578                                           !BCC_EOS
16579                                           ! 1960       break;
16580 3CBC           EB           1A            jmp .5B
16581                                           !BCC_EOS
16582                                           ! 1961      case 3:
16583                                           ! 1962       palette=&palette3;
16584                       00003CBE            .61:
16585                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16586 3CBE           BB                   0C53  mov	bx,#_palette3
16587 3CC1           895E         FA            mov	-6[bp],bx
16588                                           !BCC_EOS
16589                                           ! 1963       break;
16590 3CC4           EB           12            jmp .5B
16591                                           !BCC_EOS
16592                                           ! 1964     }
16593                                           ! 1965    for(i=0;i<0x0100;i++)
16594 3CC6           EB           10            jmp .5B
16595                       00003CC8            .5D:
16596 3CC8           2C                     00  sub	al,*0
16597 3CCA           74           DA            je 	.5E
16598 3CCC           2C                     01  sub	al,*1
16599 3CCE           74           DE            je 	.5F
16600 3CD0           2C                     01  sub	al,*1
16601 3CD2           74           E2            je 	.60
16602 3CD4           2C                     01  sub	al,*1
16603 3CD6           74           E6            je 	.61
16604                       00003CD8            .5B:
16605                       FFFFFFE8            ..FFFE	=	-$18
16606                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16607 3CD8           31C0                       xor	ax,ax
16608 3CDA           8946         F6            mov	-$A[bp],ax
16609                                           !BCC_EOS
16610                                           !BCC_EOS
16611                                           ! 1966     {if(i<=dac_regs[vga_modes[line].dacmodel])
16612 3CDD           E9         00AB            br 	.64
16613                       00003CE0            .65:
16614                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16615 3CE0           8A46         FE            mov	al,-2[bp]
16616 3CE3           30E4                       xor	ah,ah
16617 3CE5           B1                     03  mov	cl,*3
16618 3CE7           D3E0                       shl	ax,cl
16619 3CE9           89C3                       mov	bx,ax
16620 3CEB           81C3                 01FF  add	bx,#_vga_modes
16621                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16622 3CEF           8A47         07            mov	al,7[bx]
16623 3CF2           30E4                       xor	ah,ah
16624 3CF4           89C3                       mov	bx,ax
16625                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16626 3CF6           8A87       028F            mov	al,_dac_regs[bx]
16627 3CFA           30E4                       xor	ah,ah
16628 3CFC           3B46         F6            cmp	ax,-$A[bp]
16629 3CFF           72           5C            jb  	.66
16630                       00003D01            .67:
16631                                           ! 1967       {outb(0x3c9,palette[(i*3)+0]);
16632                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16633 3D01           8B46         F6            mov	ax,-$A[bp]
16634 3D04           89C2                       mov	dx,ax
16635 3D06           D1E0                       shl	ax,*1
16636 3D08           01D0                       add	ax,dx
16637                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16638                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16639 3D0A           0346         FA            add	ax,-6[bp]
16640 3D0D           89C3                       mov	bx,ax
16641                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16642 3D0F           8A07                       mov	al,[bx]
16643 3D11           30E4                       xor	ah,ah
16644 3D13           50                         push	ax
16645                                           ! Debug: list int = const $3C9 (used reg = )
16646 3D14           B8                   03C9  mov	ax,#$3C9
16647 3D17           50                         push	ax
16648                                           ! Debug: func () void = outb+0 (used reg = )
16649 3D18           E8         3EE3            call	_outb
16650 3D1B           83C4                   04  add	sp,*4
16651                                           !BCC_EOS
16652                                           ! 1968        outb(0x3c9,palette[(i*3)+1]);
16653                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16654 3D1E           8B46         F6            mov	ax,-$A[bp]
16655 3D21           89C2                       mov	dx,ax
16656 3D23           D1E0                       shl	ax,*1
16657 3D25           01D0                       add	ax,dx
16658                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16659                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16660 3D27           40                         inc	ax
16661 3D28           0346         FA            add	ax,-6[bp]
16662 3D2B           89C3                       mov	bx,ax
16663                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16664 3D2D           8A07                       mov	al,[bx]
16665 3D2F           30E4                       xor	ah,ah
16666 3D31           50                         push	ax
16667                                           ! Debug: list int = const $3C9 (used reg = )
16668 3D32           B8                   03C9  mov	ax,#$3C9
16669 3D35           50                         push	ax
16670                                           ! Debug: func () void = outb+0 (used reg = )
16671 3D36           E8         3EC5            call	_outb
16672 3D39           83C4                   04  add	sp,*4
16673                                           !BCC_EOS
16674                                           ! 1969        outb(0x3c9,palette[(i*3)+2]);
16675                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16676 3D3C           8B46         F6            mov	ax,-$A[bp]
16677 3D3F           89C2                       mov	dx,ax
16678 3D41           D1E0                       shl	ax,*1
16679 3D43           01D0                       add	ax,dx
16680                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16681                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16682 3D45           40                         inc	ax
16683 3D46           40                         inc	ax
16684 3D47           0346         FA            add	ax,-6[bp]
16685 3D4A           89C3                       mov	bx,ax
16686                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16687 3D4C           8A07                       mov	al,[bx]
16688 3D4E           30E4                       xor	ah,ah
16689 3D50           50                         push	ax
16690                                           ! Debug: list int = const $3C9 (used reg = )
16691 3D51           B8                   03C9  mov	ax,#$3C9
16692 3D54           50                         push	ax
16693                                           ! Debug: func () void = outb+0 (used reg = )
16694 3D55           E8         3EA6            call	_outb
16695 3D58           83C4                   04  add	sp,*4
16696                                           !BCC_EOS
16697                                           ! 1970       }
16698                                           ! 1971      else
16699                                           ! 1972       {outb(0x3c9,0);
16700 3D5B           EB           27            jmp .68
16701                       00003D5D            .66:
16702                                           ! Debug: list int = const 0 (used reg = )
16703 3D5D           31C0                       xor	ax,ax
16704 3D5F           50                         push	ax
16705                                           ! Debug: list int = const $3C9 (used reg = )
16706 3D60           B8                   03C9  mov	ax,#$3C9
16707 3D63           50                         push	ax
16708                                           ! Debug: func () void = outb+0 (used reg = )
16709 3D64           E8         3E97            call	_outb
16710 3D67           83C4                   04  add	sp,*4
16711                                           !BCC_EOS
16712                                           ! 1973        outb(0x3c9,0);
16713                                           ! Debug: list int = const 0 (used reg = )
16714 3D6A           31C0                       xor	ax,ax
16715 3D6C           50                         push	ax
16716                                           ! Debug: list int = const $3C9 (used reg = )
16717 3D6D           B8                   03C9  mov	ax,#$3C9
16718 3D70           50                         push	ax
16719                                           ! Debug: func () void = outb+0 (used reg = )
16720 3D71           E8         3E8A            call	_outb
16721 3D74           83C4                   04  add	sp,*4
16722                                           !BCC_EOS
16723                                           ! 1974        outb(0x3c9,0);
16724                                           ! Debug: list int = const 0 (used reg = )
16725 3D77           31C0                       xor	ax,ax
16726 3D79           50                         push	ax
16727                                           ! Debug: list int = const $3C9 (used reg = )
16728 3D7A           B8                   03C9  mov	ax,#$3C9
16729 3D7D           50                         push	ax
16730                                           ! Debug: func () void = outb+0 (used reg = )
16731 3D7E           E8         3E7D            call	_outb
16732 3D81           83C4                   04  add	sp,*4
16733                                           !BCC_EOS
16734                                           ! 1975       }
16735                                           ! 1976     }
16736                       00003D84            .68:
16737                                           ! 1977    if((modeset_ctl&0x02)==0x02)
16738                       00003D84            .63:
16739                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16740 3D84           8B46         F6            mov	ax,-$A[bp]
16741 3D87           40                         inc	ax
16742 3D88           8946         F6            mov	-$A[bp],ax
16743                       00003D8B            .64:
16744                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16745 3D8B           8B46         F6            mov	ax,-$A[bp]
16746 3D8E           3D                   0100  cmp	ax,#$100
16747 3D91         0F82         FF4B            blo 	.65
16748                       00003D95            .69:
16749                       00003D95            .62:
16750                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16751 3D95           8A46         EF            mov	al,-$11[bp]
16752 3D98           24                     02  and	al,*2
16753                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16754 3D9A           3C                     02  cmp	al,*2
16755 3D9C           75           0D            jne 	.6A
16756                       00003D9E            .6B:
16757                                           ! 1978     {
16758                                           ! 1979      biosfn_perform_gray_scale_summing(0x00, 0x100);
16759                                           ! Debug: list int = const $100 (used reg = )
16760 3D9E           B8                   0100  mov	ax,#$100
16761 3DA1           50                         push	ax
16762                                           ! Debug: list int = const 0 (used reg = )
16763 3DA2           31C0                       xor	ax,ax
16764 3DA4           50                         push	ax
16765                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16766 3DA5           E8         26E3            call	_biosfn_perform_gray_scale_summing
16767 3DA8           83C4                   04  add	sp,*4
16768                                           !BCC_EOS
16769                                           ! 1980     }
16770                                           ! 1981   }
16771                       00003DAB            .6A:
16772                                           ! 1982  inb(0x3da);
16773                       00003DAB            .59:
16774                                           ! Debug: list int = const $3DA (used reg = )
16775 3DAB           B8                   03DA  mov	ax,#$3DA
16776 3DAE           50                         push	ax
16777                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16778 3DAF           E8         3E36            call	_inb
16779 3DB2           44                         inc	sp
16780 3DB3           44                         inc	sp
16781                                           !BCC_EOS
16782                                           ! 1983  for(i=0;i<=0x13;i++)
16783                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16784 3DB4           31C0                       xor	ax,ax
16785 3DB6           8946         F6            mov	-$A[bp],ax
16786                                           !BCC_EOS
16787                                           !BCC_EOS
16788                                           ! 1984   {outb(0x3c0,i);
16789 3DB9           EB           38            jmp .6E
16790                       00003DBB            .6F:
16791                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16792 3DBB           FF76         F6            push	-$A[bp]
16793                                           ! Debug: list int = const $3C0 (used reg = )
16794 3DBE           B8                   03C0  mov	ax,#$3C0
16795 3DC1           50                         push	ax
16796                                           ! Debug: func () void = outb+0 (used reg = )
16797 3DC2           E8         3E39            call	_outb
16798 3DC5           83C4                   04  add	sp,*4
16799                                           !BCC_EOS
16800                                           ! 1985    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16801                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16802 3DC8           8A46         F9            mov	al,-7[bp]
16803 3DCB           30E4                       xor	ah,ah
16804 3DCD           B1                     06  mov	cl,*6
16805 3DCF           D3E0                       shl	ax,cl
16806 3DD1           89C3                       mov	bx,ax
16807 3DD3           81C3                 0293  add	bx,#_video_param_table
16808                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16809 3DD7           8B46         F6            mov	ax,-$A[bp]
16810 3DDA           01C3                       add	bx,ax
16811                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16812 3DDC           8A47         23            mov	al,$23[bx]
16813 3DDF           30E4                       xor	ah,ah
16814 3DE1           50                         push	ax
16815                                           ! Debug: list int = const $3C0 (used reg = )
16816 3DE2           B8                   03C0  mov	ax,#$3C0
16817 3DE5           50                         push	ax
16818                                           ! Debug: func () void = outb+0 (used reg = )
16819 3DE6           E8         3E15            call	_outb
16820 3DE9           83C4                   04  add	sp,*4
16821                                           !BCC_EOS
16822                                           ! 1986   }
16823                                           ! 1987  outb(0x3c0,0x14);
16824                       00003DEC            .6D:
16825                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16826 3DEC           8B46         F6            mov	ax,-$A[bp]
16827 3DEF           40                         inc	ax
16828 3DF0           8946         F6            mov	-$A[bp],ax
16829                       00003DF3            .6E:
16830                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16831 3DF3           8B46         F6            mov	ax,-$A[bp]
16832 3DF6           3D                   0013  cmp	ax,*$13
16833 3DF9           76           C0            jbe	.6F
16834                       00003DFB            .70:
16835                       00003DFB            .6C:
16836                                           ! Debug: list int = const $14 (used reg = )
16837 3DFB           B8                   0014  mov	ax,*$14
16838 3DFE           50                         push	ax
16839                                           ! Debug: list int = const $3C0 (used reg = )
16840 3DFF           B8                   03C0  mov	ax,#$3C0
16841 3E02           50                         push	ax
16842                                           ! Debug: func () void = outb+0 (used reg = )
16843 3E03           E8         3DF8            call	_outb
16844 3E06           83C4                   04  add	sp,*4
16845                                           !BCC_EOS
16846                                           ! 1988  outb(0x3c0,0x00);
16847                                           ! Debug: list int = const 0 (used reg = )
16848 3E09           31C0                       xor	ax,ax
16849 3E0B           50                         push	ax
16850                                           ! Debug: list int = const $3C0 (used reg = )
16851 3E0C           B8                   03C0  mov	ax,#$3C0
16852 3E0F           50                         push	ax
16853                                           ! Debug: func () void = outb+0 (used reg = )
16854 3E10           E8         3DEB            call	_outb
16855 3E13           83C4                   04  add	sp,*4
16856                                           !BCC_EOS
16857                                           ! 1989  outb(0x3c4,0);
16858                                           ! Debug: list int = const 0 (used reg = )
16859 3E16           31C0                       xor	ax,ax
16860 3E18           50                         push	ax
16861                                           ! Debug: list int = const $3C4 (used reg = )
16862 3E19           B8                   03C4  mov	ax,#$3C4
16863 3E1C           50                         push	ax
16864                                           ! Debug: func () void = outb+0 (used reg = )
16865 3E1D           E8         3DDE            call	_outb
16866 3E20           83C4                   04  add	sp,*4
16867                                           !BCC_EOS
16868                                           ! 1990  outb(0x3c5,0x03);
16869                                           ! Debug: list int = const 3 (used reg = )
16870 3E23           B8                   0003  mov	ax,*3
16871 3E26           50                         push	ax
16872                                           ! Debug: list int = const $3C5 (used reg = )
16873 3E27           B8                   03C5  mov	ax,#$3C5
16874 3E2A           50                         push	ax
16875                                           ! Debug: func () void = outb+0 (used reg = )
16876 3E2B           E8         3DD0            call	_outb
16877 3E2E           83C4                   04  add	sp,*4
16878                                           !BCC_EOS
16879                                           ! 1991  for(i=1;i<=4;i++)
16880                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16881 3E31           B8                   0001  mov	ax,*1
16882 3E34           8946         F6            mov	-$A[bp],ax
16883                                           !BCC_EOS
16884                                           !BCC_EOS
16885                                           ! 1992   {outb(0x3c4,i);
16886 3E37           EB           3F            jmp .73
16887                       00003E39            .74:
16888                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16889 3E39           FF76         F6            push	-$A[bp]
16890                                           ! Debug: list int = const $3C4 (used reg = )
16891 3E3C           B8                   03C4  mov	ax,#$3C4
16892 3E3F           50                         push	ax
16893                                           ! Debug: func () void = outb+0 (used reg = )
16894 3E40           E8         3DBB            call	_outb
16895 3E43           83C4                   04  add	sp,*4
16896                                           !BCC_EOS
16897                                           ! 1993    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16898                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16899 3E46           8B46         F6            mov	ax,-$A[bp]
16900 3E49           48                         dec	ax
16901 3E4A           50                         push	ax
16902                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16903 3E4B           8A46         F9            mov	al,-7[bp]
16904 3E4E           30E4                       xor	ah,ah
16905 3E50           B1                     06  mov	cl,*6
16906 3E52           D3E0                       shl	ax,cl
16907 3E54           89C3                       mov	bx,ax
16908 3E56           81C3                 0293  add	bx,#_video_param_table
16909                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16910 3E5A           8B46         E8            mov	ax,-$18[bp]
16911 3E5D           01C3                       add	bx,ax
16912 3E5F           44                         inc	sp
16913 3E60           44                         inc	sp
16914                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16915 3E61           8A47         05            mov	al,5[bx]
16916 3E64           30E4                       xor	ah,ah
16917 3E66           50                         push	ax
16918                                           ! Debug: list int = const $3C5 (used reg = )
16919 3E67           B8                   03C5  mov	ax,#$3C5
16920 3E6A           50                         push	ax
16921                                           ! Debug: func () void = outb+0 (used reg = )
16922 3E6B           E8         3D90            call	_outb
16923 3E6E           83C4                   04  add	sp,*4
16924                                           !BCC_EOS
16925                                           ! 1994   }
16926                                           ! 1995  for(i=0;i<=8;i++)
16927                       00003E71            .72:
16928                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16929 3E71           8B46         F6            mov	ax,-$A[bp]
16930 3E74           40                         inc	ax
16931 3E75           8946         F6            mov	-$A[bp],ax
16932                       00003E78            .73:
16933                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16934 3E78           8B46         F6            mov	ax,-$A[bp]
16935 3E7B           3D                   0004  cmp	ax,*4
16936 3E7E           76           B9            jbe	.74
16937                       00003E80            .75:
16938                       00003E80            .71:
16939                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16940 3E80           31C0                       xor	ax,ax
16941 3E82           8946         F6            mov	-$A[bp],ax
16942                                           !BCC_EOS
16943                                           !BCC_EOS
16944                                           ! 1996   {outb(0x3ce,i);
16945 3E85           EB           38            jmp .78
16946                       00003E87            .79:
16947                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16948 3E87           FF76         F6            push	-$A[bp]
16949                                           ! Debug: list int = const $3CE (used reg = )
16950 3E8A           B8                   03CE  mov	ax,#$3CE
16951 3E8D           50                         push	ax
16952                                           ! Debug: func () void = outb+0 (used reg = )
16953 3E8E           E8         3D6D            call	_outb
16954 3E91           83C4                   04  add	sp,*4
16955                                           !BCC_EOS
16956                                           ! 1997    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16957                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16958 3E94           8A46         F9            mov	al,-7[bp]
16959 3E97           30E4                       xor	ah,ah
16960 3E99           B1                     06  mov	cl,*6
16961 3E9B           D3E0                       shl	ax,cl
16962 3E9D           89C3                       mov	bx,ax
16963 3E9F           81C3                 0293  add	bx,#_video_param_table
16964                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16965 3EA3           8B46         F6            mov	ax,-$A[bp]
16966 3EA6           01C3                       add	bx,ax
16967                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16968 3EA8           8A47         37            mov	al,$37[bx]
16969 3EAB           30E4                       xor	ah,ah
16970 3EAD           50                         push	ax
16971                                           ! Debug: list int = const $3CF (used reg = )
16972 3EAE           B8                   03CF  mov	ax,#$3CF
16973 3EB1           50                         push	ax
16974                                           ! Debug: func () void = outb+0 (used reg = )
16975 3EB2           E8         3D49            call	_outb
16976 3EB5           83C4                   04  add	sp,*4
16977                                           !BCC_EOS
16978                                           ! 1998   }
16979                                           ! 1999  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16980                       00003EB8            .77:
16981                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16982 3EB8           8B46         F6            mov	ax,-$A[bp]
16983 3EBB           40                         inc	ax
16984 3EBC           8946         F6            mov	-$A[bp],ax
16985                       00003EBF            .78:
16986                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16987 3EBF           8B46         F6            mov	ax,-$A[bp]
16988 3EC2           3D                   0008  cmp	ax,*8
16989 3EC5           76           C0            jbe	.79
16990                       00003EC7            .7A:
16991                       00003EC7            .76:
16992                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16993 3EC7           8A46         FE            mov	al,-2[bp]
16994 3ECA           30E4                       xor	ah,ah
16995 3ECC           B1                     03  mov	cl,*3
16996 3ECE           D3E0                       shl	ax,cl
16997 3ED0           89C3                       mov	bx,ax
16998 3ED2           81C3                 01FF  add	bx,#_vga_modes
16999                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17000 3ED6           8A47         02            mov	al,2[bx]
17001 3ED9           3C                     01  cmp	al,*1
17002 3EDB           75           05            jne 	.7B
17003                       00003EDD            .7C:
17004 3EDD           B8                   03B4  mov	ax,#$3B4
17005 3EE0           EB           03            jmp .7D
17006                       00003EE2            .7B:
17007 3EE2           B8                   03D4  mov	ax,#$3D4
17008                       00003EE5            .7D:
17009                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17010 3EE5           8946         EA            mov	-$16[bp],ax
17011                                           !BCC_EOS
17012                                           ! 2000  outw(crtc_addr,0x0011);
17013                                           ! Debug: list int = const $11 (used reg = )
17014 3EE8           B8                   0011  mov	ax,*$11
17015 3EEB           50                         push	ax
17016                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17017 3EEC           FF76         EA            push	-$16[bp]
17018                                           ! Debug: func () void = outw+0 (used reg = )
17019 3EEF           E8         3D1C            call	_outw
17020 3EF2           83C4                   04  add	sp,*4
17021                                           !BCC_EOS
17022                                           ! 2001  for(i=0;i<=0x18;i++)
17023                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17024 3EF5           31C0                       xor	ax,ax
17025 3EF7           8946         F6            mov	-$A[bp],ax
17026                                           !BCC_EOS
17027                                           !BCC_EOS
17028                                           ! 2002   {outb(crtc_addr,i);
17029 3EFA           EB           38            jmp .80
17030                       00003EFC            .81:
17031                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17032 3EFC           FF76         F6            push	-$A[bp]
17033                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17034 3EFF           FF76         EA            push	-$16[bp]
17035                                           ! Debug: func () void = outb+0 (used reg = )
17036 3F02           E8         3CF9            call	_outb
17037 3F05           83C4                   04  add	sp,*4
17038                                           !BCC_EOS
17039                                           ! 2003    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17040                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17041 3F08           8A46         F9            mov	al,-7[bp]
17042 3F0B           30E4                       xor	ah,ah
17043 3F0D           B1                     06  mov	cl,*6
17044 3F0F           D3E0                       shl	ax,cl
17045 3F11           89C3                       mov	bx,ax
17046 3F13           81C3                 0293  add	bx,#_video_param_table
17047                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17048 3F17           8B46         F6            mov	ax,-$A[bp]
17049 3F1A           01C3                       add	bx,ax
17050                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17051 3F1C           8A47         0A            mov	al,$A[bx]
17052 3F1F           30E4                       xor	ah,ah
17053 3F21           50                         push	ax
17054                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17055 3F22           8B46         EA            mov	ax,-$16[bp]
17056                                           ! Debug: list unsigned int = ax+1 (used reg = )
17057 3F25           40                         inc	ax
17058 3F26           50                         push	ax
17059                                           ! Debug: func () void = outb+0 (used reg = )
17060 3F27           E8         3CD4            call	_outb
17061 3F2A           83C4                   04  add	sp,*4
17062                                           !BCC_EOS
17063                                           ! 2004   }
17064                                           ! 2005  outb(0x3c2,video_param_table[vpti].miscreg);
17065                       00003F2D            .7F:
17066                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17067 3F2D           8B46         F6            mov	ax,-$A[bp]
17068 3F30           40                         inc	ax
17069 3F31           8946         F6            mov	-$A[bp],ax
17070                       00003F34            .80:
17071                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17072 3F34           8B46         F6            mov	ax,-$A[bp]
17073 3F37           3D                   0018  cmp	ax,*$18
17074 3F3A           76           C0            jbe	.81
17075                       00003F3C            .82:
17076                       00003F3C            .7E:
17077                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17078 3F3C           8A46         F9            mov	al,-7[bp]
17079 3F3F           30E4                       xor	ah,ah
17080 3F41           B1                     06  mov	cl,*6
17081 3F43           D3E0                       shl	ax,cl
17082 3F45           89C3                       mov	bx,ax
17083 3F47           81C3                 0293  add	bx,#_video_param_table
17084                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17085 3F4B           8A47         09            mov	al,9[bx]
17086 3F4E           30E4                       xor	ah,ah
17087 3F50           50                         push	ax
17088                                           ! Debug: list int = const $3C2 (used reg = )
17089 3F51           B8                   03C2  mov	ax,#$3C2
17090 3F54           50                         push	ax
17091                                           ! Debug: func () void = outb+0 (used reg = )
17092 3F55           E8         3CA6            call	_outb
17093 3F58           83C4                   04  add	sp,*4
17094                                           !BCC_EOS
17095                                           ! 2006  outb(0x3c0,0x20);
17096                                           ! Debug: list int = const $20 (used reg = )
17097 3F5B           B8                   0020  mov	ax,*$20
17098 3F5E           50                         push	ax
17099                                           ! Debug: list int = const $3C0 (used reg = )
17100 3F5F           B8                   03C0  mov	ax,#$3C0
17101 3F62           50                         push	ax
17102                                           ! Debug: func () void = outb+0 (used reg = )
17103 3F63           E8         3C98            call	_outb
17104 3F66           83C4                   04  add	sp,*4
17105                                           !BCC_EOS
17106                                           ! 2007  inb(0x3da);
17107                                           ! Debug: list int = const $3DA (used reg = )
17108 3F69           B8                   03DA  mov	ax,#$3DA
17109 3F6C           50                         push	ax
17110                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17111 3F6D           E8         3C78            call	_inb
17112 3F70           44                         inc	sp
17113 3F71           44                         inc	sp
17114                                           !BCC_EOS
17115                                           ! 2008  if(noclearmem==0x00)
17116                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17117 3F72           8A46         FF            mov	al,-1[bp]
17118 3F75           84C0                       test	al,al
17119 3F77         0F85         00C1            bne 	.83
17120                       00003F7B            .84:
17121                                           ! 2009   {
17122                                           ! 2010    if(vga_modes[line].class==0x00)
17123                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17124 3F7B           8A46         FE            mov	al,-2[bp]
17125 3F7E           30E4                       xor	ah,ah
17126 3F80           B1                     03  mov	cl,*3
17127 3F82           D3E0                       shl	ax,cl
17128 3F84           89C3                       mov	bx,ax
17129 3F86           81C3                 01FF  add	bx,#_vga_modes
17130                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17131 3F8A           8A47         01            mov	al,1[bx]
17132 3F8D           84C0                       test	al,al
17133 3F8F           75           26            jne 	.85
17134                       00003F91            .86:
17135                                           ! 2011     {
17136                                           ! 2012      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17137                                           ! Debug: list int = const $4000 (used reg = )
17138 3F91           B8                   4000  mov	ax,#$4000
17139 3F94           50                         push	ax
17140                                           ! Debug: list int = const $720 (used reg = )
17141 3F95           B8                   0720  mov	ax,#$720
17142 3F98           50                         push	ax
17143                                           ! Debug: list int = const 0 (used reg = )
17144 3F99           31C0                       xor	ax,ax
17145 3F9B           50                         push	ax
17146                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17147 3F9C           8A46         FE            mov	al,-2[bp]
17148 3F9F           30E4                       xor	ah,ah
17149 3FA1           B1                     03  mov	cl,*3
17150 3FA3           D3E0                       shl	ax,cl
17151 3FA5           89C3                       mov	bx,ax
17152 3FA7           81C3                 01FF  add	bx,#_vga_modes
17153                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17154 3FAB           FF77         04            push	4[bx]
17155                                           ! Debug: func () void = memsetw+0 (used reg = )
17156 3FAE           E8         3B5C            call	_memsetw
17157 3FB1           83C4                   08  add	sp,*8
17158                                           !BCC_EOS
17159                                           ! 2013     }
17160                                           ! 2014    else
17161                                           ! 2015     {
17162 3FB4           E9         0085            br 	.87
17163                       00003FB7            .85:
17164                                           ! 2016      if(mode<0x0d)
17165                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17166 3FB7           8A46         04            mov	al,4[bp]
17167 3FBA           3C                     0D  cmp	al,*$D
17168 3FBC           73           24            jae 	.88
17169                       00003FBE            .89:
17170                                           ! 2017       {
17171                                           ! 2018        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17172                                           ! Debug: list int = const $4000 (used reg = )
17173 3FBE           B8                   4000  mov	ax,#$4000
17174 3FC1           50                         push	ax
17175                                           ! Debug: list int = const 0 (used reg = )
17176 3FC2           31C0                       xor	ax,ax
17177 3FC4           50                         push	ax
17178                                           ! Debug: list int = const 0 (used reg = )
17179 3FC5           31C0                       xor	ax,ax
17180 3FC7           50                         push	ax
17181                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17182 3FC8           8A46         FE            mov	al,-2[bp]
17183 3FCB           30E4                       xor	ah,ah
17184 3FCD           B1                     03  mov	cl,*3
17185 3FCF           D3E0                       shl	ax,cl
17186 3FD1           89C3                       mov	bx,ax
17187 3FD3           81C3                 01FF  add	bx,#_vga_modes
17188                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17189 3FD7           FF77         04            push	4[bx]
17190                                           ! Debug: func () void = memsetw+0 (used reg = )
17191 3FDA           E8         3B30            call	_memsetw
17192 3FDD           83C4                   08  add	sp,*8
17193                                           !BCC_EOS
17194                                           ! 2019       }
17195                                           ! 2020      else
17196                                           ! 2021       {
17197 3FE0           EB           5A            jmp .8A
17198                       00003FE2            .88:
17199                                           ! 2022        outb( 0x3c4, 0x02 );
17200                                           ! Debug: list int = const 2 (used reg = )
17201 3FE2           B8                   0002  mov	ax,*2
17202 3FE5           50                         push	ax
17203                                           ! Debug: list int = const $3C4 (used reg = )
17204 3FE6           B8                   03C4  mov	ax,#$3C4
17205 3FE9           50                         push	ax
17206                                           ! Debug: func () void = outb+0 (used reg = )
17207 3FEA           E8         3C11            call	_outb
17208 3FED           83C4                   04  add	sp,*4
17209                                           !BCC_EOS
17210                                           ! 2023        mmask = inb( 0x3c5 );
17211                                           ! Debug: list int = const $3C5 (used reg = )
17212 3FF0           B8                   03C5  mov	ax,#$3C5
17213 3FF3           50                         push	ax
17214                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17215 3FF4           E8         3BF1            call	_inb
17216 3FF7           44                         inc	sp
17217 3FF8           44                         inc	sp
17218                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17219 3FF9           8846         FD            mov	-3[bp],al
17220                                           !BCC_EOS
17221                                           ! 2024        outb( 0x3c5, 0x0f );
17222                                           ! Debug: list int = const $F (used reg = )
17223 3FFC           B8                   000F  mov	ax,*$F
17224 3FFF           50                         push	ax
17225                                           ! Debug: list int = const $3C5 (used reg = )
17226 4000           B8                   03C5  mov	ax,#$3C5
17227 4003           50                         push	ax
17228                                           ! Debug: func () void = outb+0 (used reg = )
17229 4004           E8         3BF7            call	_outb
17230 4007           83C4                   04  add	sp,*4
17231                                           !BCC_EOS
17232                                           ! 2025        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17233                                           ! Debug: list unsigned int = const $8000 (used reg = )
17234 400A           B8                   8000  mov	ax,#$8000
17235 400D           50                         push	ax
17236                                           ! Debug: list int = const 0 (used reg = )
17237 400E           31C0                       xor	ax,ax
17238 4010           50                         push	ax
17239                                           ! Debug: list int = const 0 (used reg = )
17240 4011           31C0                       xor	ax,ax
17241 4013           50                         push	ax
17242                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17243 4014           8A46         FE            mov	al,-2[bp]
17244 4017           30E4                       xor	ah,ah
17245 4019           B1                     03  mov	cl,*3
17246 401B           D3E0                       shl	ax,cl
17247 401D           89C3                       mov	bx,ax
17248 401F           81C3                 01FF  add	bx,#_vga_modes
17249                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17250 4023           FF77         04            push	4[bx]
17251                                           ! Debug: func () void = memsetw+0 (used reg = )
17252 4026           E8         3AE4            call	_memsetw
17253 4029           83C4                   08  add	sp,*8
17254                                           !BCC_EOS
17255                                           ! 2026        outb( 0x3c5, mmask );
17256                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17257 402C           8A46         FD            mov	al,-3[bp]
17258 402F           30E4                       xor	ah,ah
17259 4031           50                         push	ax
17260                                           ! Debug: list int = const $3C5 (used reg = )
17261 4032           B8                   03C5  mov	ax,#$3C5
17262 4035           50                         push	ax
17263                                           ! Debug: func () void = outb+0 (used reg = )
17264 4036           E8         3BC5            call	_outb
17265 4039           83C4                   04  add	sp,*4
17266                                           !BCC_EOS
17267                                           ! 2027       }
17268                                           ! 2028     }
17269                       0000403C            .8A:
17270                                           ! 2029   }
17271                       0000403C            .87:
17272                                           ! 2030  write_byte(0x40,0x49,mode);
17273                       0000403C            .83:
17274                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17275 403C           8A46         04            mov	al,4[bp]
17276 403F           30E4                       xor	ah,ah
17277 4041           50                         push	ax
17278                                           ! Debug: list int = const $49 (used reg = )
17279 4042           B8                   0049  mov	ax,*$49
17280 4045           50                         push	ax
17281                                           ! Debug: list int = const $40 (used reg = )
17282 4046           B8                   0040  mov	ax,*$40
17283 4049           50                         push	ax
17284                                           ! Debug: func () void = write_byte+0 (used reg = )
17285 404A           E8         3B6B            call	_write_byte
17286 404D           83C4                   06  add	sp,*6
17287                                           !BCC_EOS
17288                                           ! 2031  write_word(0x40,0x4A,twidth);
17289                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17290 4050           FF76         F4            push	-$C[bp]
17291                                           ! Debug: list int = const $4A (used reg = )
17292 4053           B8                   004A  mov	ax,*$4A
17293 4056           50                         push	ax
17294                                           ! Debug: list int = const $40 (used reg = )
17295 4057           B8                   0040  mov	ax,*$40
17296 405A           50                         push	ax
17297                                           ! Debug: func () void = write_word+0 (used reg = )
17298 405B           E8         3B72            call	_write_word
17299 405E           83C4                   06  add	sp,*6
17300                                           !BCC_EOS
17301                                           ! 2032  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17302                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17303 4061           8A46         F9            mov	al,-7[bp]
17304 4064           30E4                       xor	ah,ah
17305 4066           B1                     06  mov	cl,*6
17306 4068           D3E0                       shl	ax,cl
17307 406A           89C3                       mov	bx,ax
17308 406C           81C3                 0293  add	bx,#_video_param_table
17309                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17310                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17311                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17312 4070           FF77         03            push	3[bx]
17313                                           ! Debug: list int = const $4C (used reg = )
17314 4073           B8                   004C  mov	ax,*$4C
17315 4076           50                         push	ax
17316                                           ! Debug: list int = const $40 (used reg = )
17317 4077           B8                   0040  mov	ax,*$40
17318 407A           50                         push	ax
17319                                           ! Debug: func () void = write_word+0 (used reg = )
17320 407B           E8         3B52            call	_write_word
17321 407E           83C4                   06  add	sp,*6
17322                                           !BCC_EOS
17323                                           ! 2033  write_word(0x40,0x63,crtc_addr);
17324                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17325 4081           FF76         EA            push	-$16[bp]
17326                                           ! Debug: list int = const $63 (used reg = )
17327 4084           B8                   0063  mov	ax,*$63
17328 4087           50                         push	ax
17329                                           ! Debug: list int = const $40 (used reg = )
17330 4088           B8                   0040  mov	ax,*$40
17331 408B           50                         push	ax
17332                                           ! Debug: func () void = write_word+0 (used reg = )
17333 408C           E8         3B41            call	_write_word
17334 408F           83C4                   06  add	sp,*6
17335                                           !BCC_EOS
17336                                           ! 2034  wri
17337                                           ! 2034 te_byte(0x40,0x84,theightm1);
17338                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17339 4092           FF76         F2            push	-$E[bp]
17340                                           ! Debug: list int = const $84 (used reg = )
17341 4095           B8                   0084  mov	ax,#$84
17342 4098           50                         push	ax
17343                                           ! Debug: list int = const $40 (used reg = )
17344 4099           B8                   0040  mov	ax,*$40
17345 409C           50                         push	ax
17346                                           ! Debug: func () void = write_byte+0 (used reg = )
17347 409D           E8         3B18            call	_write_byte
17348 40A0           83C4                   06  add	sp,*6
17349                                           !BCC_EOS
17350                                           ! 2035  write_word(0x40,0x85,cheight);
17351                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17352 40A3           FF76         F0            push	-$10[bp]
17353                                           ! Debug: list int = const $85 (used reg = )
17354 40A6           B8                   0085  mov	ax,#$85
17355 40A9           50                         push	ax
17356                                           ! Debug: list int = const $40 (used reg = )
17357 40AA           B8                   0040  mov	ax,*$40
17358 40AD           50                         push	ax
17359                                           ! Debug: func () void = write_word+0 (used reg = )
17360 40AE           E8         3B1F            call	_write_word
17361 40B1           83C4                   06  add	sp,*6
17362                                           !BCC_EOS
17363                                           ! 2036  write_byte(0x40,0x87,(0x60|noclearmem));
17364                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17365                                           ! Debug: expression subtree swapping
17366 40B4           8A46         FF            mov	al,-1[bp]
17367 40B7           0C                     60  or	al,*$60
17368                                           ! Debug: list unsigned char = al+0 (used reg = )
17369 40B9           30E4                       xor	ah,ah
17370 40BB           50                         push	ax
17371                                           ! Debug: list int = const $87 (used reg = )
17372 40BC           B8                   0087  mov	ax,#$87
17373 40BF           50                         push	ax
17374                                           ! Debug: list int = const $40 (used reg = )
17375 40C0           B8                   0040  mov	ax,*$40
17376 40C3           50                         push	ax
17377                                           ! Debug: func () void = write_byte+0 (used reg = )
17378 40C4           E8         3AF1            call	_write_byte
17379 40C7           83C4                   06  add	sp,*6
17380                                           !BCC_EOS
17381                                           ! 2037  write_byte(0x40,0x88,0xF9);
17382                                           ! Debug: list int = const $F9 (used reg = )
17383 40CA           B8                   00F9  mov	ax,#$F9
17384 40CD           50                         push	ax
17385                                           ! Debug: list int = const $88 (used reg = )
17386 40CE           B8                   0088  mov	ax,#$88
17387 40D1           50                         push	ax
17388                                           ! Debug: list int = const $40 (used reg = )
17389 40D2           B8                   0040  mov	ax,*$40
17390 40D5           50                         push	ax
17391                                           ! Debug: func () void = write_byte+0 (used reg = )
17392 40D6           E8         3ADF            call	_write_byte
17393 40D9           83C4                   06  add	sp,*6
17394                                           !BCC_EOS
17395                                           ! 2038  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17396                                           ! Debug: list int = const $89 (used reg = )
17397 40DC           B8                   0089  mov	ax,#$89
17398 40DF           50                         push	ax
17399                                           ! Debug: list int = const $40 (used reg = )
17400 40E0           B8                   0040  mov	ax,*$40
17401 40E3           50                         push	ax
17402                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17403 40E4           E8         3AAB            call	_read_byte
17404 40E7           83C4                   04  add	sp,*4
17405                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17406 40EA           24                     7F  and	al,*$7F
17407                                           ! Debug: list unsigned char = al+0 (used reg = )
17408 40EC           30E4                       xor	ah,ah
17409 40EE           50                         push	ax
17410                                           ! Debug: list int = const $89 (used reg = )
17411 40EF           B8                   0089  mov	ax,#$89
17412 40F2           50                         push	ax
17413                                           ! Debug: list int = const $40 (used reg = )
17414 40F3           B8                   0040  mov	ax,*$40
17415 40F6           50                         push	ax
17416                                           ! Debug: func () void = write_byte+0 (used reg = )
17417 40F7           E8         3ABE            call	_write_byte
17418 40FA           83C4                   06  add	sp,*6
17419                                           !BCC_EOS
17420                                           ! 2039  write_byte(0x40,0x8A,0x08);
17421                                           ! Debug: list int = const 8 (used reg = )
17422 40FD           B8                   0008  mov	ax,*8
17423 4100           50                         push	ax
17424                                           ! Debug: list int = const $8A (used reg = )
17425 4101           B8                   008A  mov	ax,#$8A
17426 4104           50                         push	ax
17427                                           ! Debug: list int = const $40 (used reg = )
17428 4105           B8                   0040  mov	ax,*$40
17429 4108           50                         push	ax
17430                                           ! Debug: func () void = write_byte+0 (used reg = )
17431 4109           E8         3AAC            call	_write_byte
17432 410C           83C4                   06  add	sp,*6
17433                                           !BCC_EOS
17434                                           ! 2040  write_word(0x40,0xA8, video_save_pointer_table);
17435                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17436 410F           BB                   35FC  mov	bx,#_video_save_pointer_table
17437 4112           53                         push	bx
17438                                           ! Debug: list int = const $A8 (used reg = )
17439 4113           B8                   00A8  mov	ax,#$A8
17440 4116           50                         push	ax
17441                                           ! Debug: list int = const $40 (used reg = )
17442 4117           B8                   0040  mov	ax,*$40
17443 411A           50                         push	ax
17444                                           ! Debug: func () void = write_word+0 (used reg = )
17445 411B           E8         3AB2            call	_write_word
17446 411E           83C4                   06  add	sp,*6
17447                                           !BCC_EOS
17448                                           ! 2041  write_word(0x40,0xA8 +2, 0xc000);
17449                                           ! Debug: list unsigned int = const $C000 (used reg = )
17450 4121           B8                   C000  mov	ax,#$C000
17451 4124           50                         push	ax
17452                                           ! Debug: list int = const $AA (used reg = )
17453 4125           B8                   00AA  mov	ax,#$AA
17454 4128           50                         push	ax
17455                                           ! Debug: list int = const $40 (used reg = )
17456 4129           B8                   0040  mov	ax,*$40
17457 412C           50                         push	ax
17458                                           ! Debug: func () void = write_word+0 (used reg = )
17459 412D           E8         3AA0            call	_write_word
17460 4130           83C4                   06  add	sp,*6
17461                                           !BCC_EOS
17462                                           ! 2042  write_byte(0x40,0x65,0x00);
17463                                           ! Debug: list int = const 0 (used reg = )
17464 4133           31C0                       xor	ax,ax
17465 4135           50                         push	ax
17466                                           ! Debug: list int = const $65 (used reg = )
17467 4136           B8                   0065  mov	ax,*$65
17468 4139           50                         push	ax
17469                                           ! Debug: list int = const $40 (used reg = )
17470 413A           B8                   0040  mov	ax,*$40
17471 413D           50                         push	ax
17472                                           ! Debug: func () void = write_byte+0 (used reg = )
17473 413E           E8         3A77            call	_write_byte
17474 4141           83C4                   06  add	sp,*6
17475                                           !BCC_EOS
17476                                           ! 2043  write_byte(0x40,0x66,0x00);
17477                                           ! Debug: list int = const 0 (used reg = )
17478 4144           31C0                       xor	ax,ax
17479 4146           50                         push	ax
17480                                           ! Debug: list int = const $66 (used reg = )
17481 4147           B8                   0066  mov	ax,*$66
17482 414A           50                         push	ax
17483                                           ! Debug: list int = const $40 (used reg = )
17484 414B           B8                   0040  mov	ax,*$40
17485 414E           50                         push	ax
17486                                           ! Debug: func () void = write_byte+0 (used reg = )
17487 414F           E8         3A66            call	_write_byte
17488 4152           83C4                   06  add	sp,*6
17489                                           !BCC_EOS
17490                                           ! 2044  if(vga_modes[line].class==0x00)
17491                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17492 4155           8A46         FE            mov	al,-2[bp]
17493 4158           30E4                       xor	ah,ah
17494 415A           B1                     03  mov	cl,*3
17495 415C           D3E0                       shl	ax,cl
17496 415E           89C3                       mov	bx,ax
17497 4160           81C3                 01FF  add	bx,#_vga_modes
17498                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17499 4164           8A47         01            mov	al,1[bx]
17500 4167           84C0                       test	al,al
17501 4169           75           0E            jne 	.8B
17502                       0000416B            .8C:
17503                                           ! 2045   {
17504                                           ! 2046    biosfn_set_cursor_shape(0x06,0x07);
17505                                           ! Debug: list int = const 7 (used reg = )
17506 416B           B8                   0007  mov	ax,*7
17507 416E           50                         push	ax
17508                                           ! Debug: list int = const 6 (used reg = )
17509 416F           B8                   0006  mov	ax,*6
17510 4172           50                         push	ax
17511                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17512 4173           E8         00BB            call	_biosfn_set_cursor_shape
17513 4176           83C4                   04  add	sp,*4
17514                                           !BCC_EOS
17515                                           ! 2047   }
17516                                           ! 2048  for(i=0;i<8;i++)
17517                       00004179            .8B:
17518                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17519 4179           31C0                       xor	ax,ax
17520 417B           8946         F6            mov	-$A[bp],ax
17521                                           !BCC_EOS
17522                                           !BCC_EOS
17523                                           ! 2049   biosfn_set_cursor_pos(i,0x0000);
17524 417E           EB           13            jmp .8F
17525                       00004180            .90:
17526                                           ! Debug: list int = const 0 (used reg = )
17527 4180           31C0                       xor	ax,ax
17528 4182           50                         push	ax
17529                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17530 4183           FF76         F6            push	-$A[bp]
17531                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17532 4186           E8         01C3            call	_biosfn_set_cursor_pos
17533 4189           83C4                   04  add	sp,*4
17534                                           !BCC_EOS
17535                                           ! 2050  biosfn_set_active_page(0x00);
17536                       0000418C            .8E:
17537                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17538 418C           8B46         F6            mov	ax,-$A[bp]
17539 418F           40                         inc	ax
17540 4190           8946         F6            mov	-$A[bp],ax
17541                       00004193            .8F:
17542                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17543 4193           8B46         F6            mov	ax,-$A[bp]
17544 4196           3D                   0008  cmp	ax,*8
17545 4199           72           E5            jb 	.90
17546                       0000419B            .91:
17547                       0000419B            .8D:
17548                                           ! Debug: list int = const 0 (used reg = )
17549 419B           31C0                       xor	ax,ax
17550 419D           50                         push	ax
17551                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17552 419E           E8         0320            call	_biosfn_set_active_page
17553 41A1           44                         inc	sp
17554 41A2           44                         inc	sp
17555                                           !BCC_EOS
17556                                           ! 2051  if(vga_modes[line].class==0x00)
17557                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17558 41A3           8A46         FE            mov	al,-2[bp]
17559 41A6           30E4                       xor	ah,ah
17560 41A8           B1                     03  mov	cl,*3
17561 41AA           D3E0                       shl	ax,cl
17562 41AC           89C3                       mov	bx,ax
17563 41AE           81C3                 01FF  add	bx,#_vga_modes
17564                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17565 41B2           8A47         01            mov	al,1[bx]
17566 41B5           84C0                       test	al,al
17567 41B7           75           0E            jne 	.92
17568                       000041B9            .93:
17569                                           ! 2052   {
17570                                           ! 2053 #asm
17571                                           !BCC_EOS
17572                                           !BCC_ASM
17573                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17574                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17575                       00000008            _biosfn_set_video_mode.theightm1	set	8
17576                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17577                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17578                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17579                       00000014            _biosfn_set_video_mode.line	set	$14
17580                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17581                       00000006            _biosfn_set_video_mode.cheight	set	6
17582                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17583                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17584                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17585                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17586                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17587                       0000000C            _biosfn_set_video_mode.i	set	$C
17588                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17589                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17590                       00000004            .biosfn_set_video_mode.mode	set	4
17591                       00000010            _biosfn_set_video_mode.palette	set	$10
17592                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17593                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17594                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17595                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17596                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17597                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17598                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17599                       00000013            _biosfn_set_video_mode.mmask	set	$13
17600                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17601                                             ;; copy and activate 8x16 font
17602 41B9           B8                   1104    mov ax, #0x1104
17603 41BC           B3                     00    mov bl, #0x00
17604 41BE           CD                     10    int #0x10
17605 41C0           B8                   1103    mov ax, #0x1103
17606 41C3           B3                     00    mov bl, #0x00
17607 41C5           CD                     10    int #0x10
17608                                           ! 2061 endasm
17609                                           !BCC_ENDASM
17610                                           !BCC_EOS
17611                                           ! 2062   }
17612                                           ! 2063 #asm
17613                       000041C7            .92:
17614                                           !BCC_EOS
17615                                           !BCC_ASM
17616                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17617                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17618                       00000008            _biosfn_set_video_mode.theightm1	set	8
17619                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17620                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17621                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17622                       00000014            _biosfn_set_video_mode.line	set	$14
17623                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17624                       00000006            _biosfn_set_video_mode.cheight	set	6
17625                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17626                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17627                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17628                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17629                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17630                       0000000C            _biosfn_set_video_mode.i	set	$C
17631                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17632                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17633                       00000004            .biosfn_set_video_mode.mode	set	4
17634                       00000010            _biosfn_set_video_mode.palette	set	$10
17635                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17636                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17637                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17638                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17639                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17640                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17641                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17642                       00000013            _biosfn_set_video_mode.mmask	set	$13
17643                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17644                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   41C7           1E                           push ds
 +a   41C8           31C0                         xor ax, ax
 +a   41CA           8ED8                         mov ds, ax
 +a   41CC           B8                   1363    mov ax,  #_vgafont8+128*8
 +a   41CF           A3         007C              mov 0x1f*4, ax
 +a   41D2           B8                   C000    mov ax,  #0xC000
 +a   41D5           A3         007E              mov 0x1f*4+2, ax
 +a   41D8           1F                           pop ds
17645                                           ! 2065 endasm
17646                                           !BCC_ENDASM
17647                                           !BCC_EOS
17648                                           ! 2066   switch(cheight)
17649 41D9           8B46         F0            mov	ax,-$10[bp]
17650                                           ! 2067    {case 8:
17651 41DC           E9         003F            br 	.96
17652                                           ! 2068 #asm
17653                       000041DF            .97:
17654                                           !BCC_EOS
17655                                           !BCC_ASM
17656                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17657                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17658                       00000008            _biosfn_set_video_mode.theightm1	set	8
17659                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17660                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17661                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17662                       00000014            _biosfn_set_video_mode.line	set	$14
17663                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17664                       00000006            _biosfn_set_video_mode.cheight	set	6
17665                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17666                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17667                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17668                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17669                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17670                       0000000C            _biosfn_set_video_mode.i	set	$C
17671                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17672                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17673                       00000004            .biosfn_set_video_mode.mode	set	4
17674                       00000010            _biosfn_set_video_mode.palette	set	$10
17675                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17676                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17677                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17678                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17679                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17680                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17681                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17682                       00000013            _biosfn_set_video_mode.mmask	set	$13
17683                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17684                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   41DF           1E                           push ds
 +a   41E0           31C0                         xor ax, ax
 +a   41E2           8ED8                         mov ds, ax
 +a   41E4           B8                   0F63    mov ax,  #_vgafont8
 +a   41E7           A3         010C              mov 0x43*4, ax
 +a   41EA           B8                   C000    mov ax,  #0xC000
 +a   41ED           A3         010E              mov 0x43*4+2, ax
 +a   41F0           1F                           pop ds
17685                                           ! 2070 endasm
17686                                           !BCC_ENDASM
17687                                           !BCC_EOS
17688                                           ! 2071      break;
17689 41F1           E9         0039            br 	.94
17690                                           !BCC_EOS
17691                                           ! 2072     case 14:
17692                                           ! 2073 #asm
17693                       000041F4            .98:
17694                                           !BCC_EOS
17695                                           !BCC_ASM
17696                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17697                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17698                       00000008            _biosfn_set_video_mode.theightm1	set	8
17699                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17700                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17701                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17702                       00000014            _biosfn_set_video_mode.line	set	$14
17703                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17704                       00000006            _biosfn_set_video_mode.cheight	set	6
17705                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17706                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17707                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17708                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17709                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17710                       0000000C            _biosfn_set_video_mode.i	set	$C
17711                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17712                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17713                       00000004            .biosfn_set_video_mode.mode	set	4
17714                       00000010            _biosfn_set_video_mode.palette	set	$10
17715                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17716                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17717                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17718                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17719                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17720                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17721                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17722                       00000013            _biosfn_set_video_mode.mmask	set	$13
17723                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17724                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   41F4           1E                           push ds
 +a   41F5           31C0                         xor ax, ax
 +a   41F7           8ED8                         mov ds, ax
 +a   41F9           B8                   1763    mov ax,  #_vgafont14
 +a   41FC           A3         010C              mov 0x43*4, ax
 +a   41FF           B8                   C000    mov ax,  #0xC000
 +a   4202           A3         010E              mov 0x43*4+2, ax
 +a   4205           1F                           pop ds
17725                                           ! 2075 endasm
17726                                           !BCC_ENDASM
17727                                           !BCC_EOS
17728                                           ! 2076      break;
17729 4206           EB           25            jmp .94
17730                                           !BCC_EOS
17731                                           ! 2077     case 16:
17732                                           ! 2078 #asm
17733                       00004208            .99:
17734                                           !BCC_EOS
17735                                           !BCC_ASM
17736                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17737                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17738                       00000008            _biosfn_set_video_mode.theightm1	set	8
17739                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17740                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17741                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17742                       00000014            _biosfn_set_video_mode.line	set	$14
17743                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17744                       00000006            _biosfn_set_video_mode.cheight	set	6
17745                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17746                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17747                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17748                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17749                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17750                       0000000C            _biosfn_set_video_mode.i	set	$C
17751                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17752                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17753                       00000004            .biosfn_set_video_mode.mode	set	4
17754                       00000010            _biosfn_set_video_mode.palette	set	$10
17755                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17756                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17757                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17758                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17759                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17760                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17761                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17762                       00000013            _biosfn_set_video_mode.mmask	set	$13
17763                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17764                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4208           1E                           push ds
 +a   4209           31C0                         xor ax, ax
 +a   420B           8ED8                         mov ds, ax
 +a   420D           B8                   2563    mov ax,  #_vgafont16
 +a   4210           A3         010C              mov 0x43*4, ax
 +a   4213           B8                   C000    mov ax,  #0xC000
 +a   4216           A3         010E              mov 0x43*4+2, ax
 +a   4219           1F                           pop ds
17765                                           ! 2080 endasm
17766                                           !BCC_ENDASM
17767                                           !BCC_EOS
17768                                           ! 2081      break;
17769 421A           EB           11            jmp .94
17770                                           !BCC_EOS
17771                                           ! 2082    }
17772                                           ! 2083 }
17773 421C           EB           0F            jmp .94
17774                       0000421E            .96:
17775 421E           2D                   0008  sub	ax,*8
17776 4221           74           BC            je 	.97
17777 4223           2D                   0006  sub	ax,*6
17778 4226           74           CC            je 	.98
17779 4228           2D                   0002  sub	ax,*2
17780 422B           74           DB            je 	.99
17781                       0000422D            .94:
17782                       FFFFFFE8            ..FFFD	=	-$18
17783 422D           89EC                       mov	sp,bp
17784 422F           5D                         pop	bp
17785 4230           C3                         ret
17786                                           ! 2084 static void biosfn_set_cursor_shape (CH,CL)
17787                                           ! Register BX used in function biosfn_set_video_mode
17788                                           ! 2085 Bit8u CH;Bit8u CL;
17789                       00004231            _biosfn_set_cursor_shape:
17790                                           !BCC_EOS
17791                                           !BCC_EOS
17792                                           ! 2086 {Bit16u cheight,curs,crtc_addr;
17793                                           !BCC_EOS
17794                                           ! 2087  Bit8u modeset_ctl;
17795                                           !BCC_EOS
17796                                           ! 2088  CH&=0x3f;
17797 4231           55                         push	bp
17798 4232           89E5                       mov	bp,sp
17799 4234           83C4                   F8  add	sp,*-8
17800                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17801 4237           8A46         04            mov	al,4[bp]
17802 423A           24                     3F  and	al,*$3F
17803 423C           8846         04            mov	4[bp],al
17804                                           !BCC_EOS
17805                                           ! 2089  CL&=0x1f;
17806                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17807 423F           8A46         06            mov	al,6[bp]
17808 4242           24                     1F  and	al,*$1F
17809 4244           8846         06            mov	6[bp],al
17810                                           !BCC_EOS
17811                                           ! 2090  curs=(CH<<8)+CL;
17812                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17813 4247           8A46         04            mov	al,4[bp]
17814 424A           30E4                       xor	ah,ah
17815 424C           88C4                       mov	ah,al
17816 424E           30C0                       xor	al,al
17817                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17818 4250           0246         06            add	al,6[bp]
17819 4253           80D4                   00  adc	ah,*0
17820                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17821 4256           8946         FC            mov	-4[bp],ax
17822                                           !BCC_EOS
17823                                           ! 2091  write_word(0x40,0x60,curs);
17824                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17825 4259           FF76         FC            push	-4[bp]
17826                                           ! Debug: list int = const $60 (used reg = )
17827 425C           B8                   0060  mov	ax,*$60
17828 425F           50                         push	ax
17829                                           ! Debug: list int = const $40 (used reg = )
17830 4260           B8                   0040  mov	ax,*$40
17831 4263           50                         push	ax
17832                                           ! Debug: func () void = write_word+0 (used reg = )
17833 4264           E8         3969            call	_write_word
17834 4267           83C4                   06  add	sp,*6
17835                                           !BCC_EOS
17836                                           ! 2092  modeset_ctl=read_byte(0x40,0x89);
17837                                           ! Debug: list int = const $89 (used reg = )
17838 426A           B8                   0089  mov	ax,#$89
17839 426D           50                         push	ax
17840                                           ! Debug: list int = const $40 (used reg = )
17841 426E           B8                   0040  mov	ax,*$40
17842 4271           50                         push	ax
17843                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17844 4272           E8         391D            call	_read_byte
17845 4275           83C4                   04  add	sp,*4
17846                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17847 4278           8846         F9            mov	-7[bp],al
17848                                           !BCC_EOS
17849                                           ! 2093  cheight = read_word(0x40,0x85);
17850                                           ! Debug: list int = const $85 (used reg = )
17851 427B           B8                   0085  mov	ax,#$85
17852 427E           50                         push	ax
17853                                           ! Debug: list int = const $40 (used reg = )
17854 427F           B8                   0040  mov	ax,*$40
17855 4282           50                         push	ax
17856                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17857 4283           E8         391F            call	_read_word
17858 4286           83C4                   04  add	sp,*4
17859                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17860 4289           8946         FE            mov	-2[bp],ax
17861                                           !BCC_EOS
17862                                           ! 2094  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17863                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17864 428C           8A46         F9            mov	al,-7[bp]
17865 428F           24                     01  and	al,*1
17866 4291           84C0                       test	al,al
17867 4293           74           66            je  	.9A
17868                       00004295            .9E:
17869                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17870 4295           8B46         FE            mov	ax,-2[bp]
17871 4298           3D                   0008  cmp	ax,*8
17872 429B           76           5E            jbe 	.9A
17873                       0000429D            .9D:
17874                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17875 429D           8A46         06            mov	al,6[bp]
17876 42A0           3C                     08  cmp	al,*8
17877 42A2           73           57            jae 	.9A
17878                       000042A4            .9C:
17879                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17880 42A4           8A46         04            mov	al,4[bp]
17881 42A7           3C                     20  cmp	al,*$20
17882 42A9           73           50            jae 	.9A
17883                       000042AB            .9B:
17884                                           ! 2095   {
17885                                           ! 2096    if(CL!=(CH+1))
17886                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17887 42AB           8A46         04            mov	al,4[bp]
17888 42AE           30E4                       xor	ah,ah
17889                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17890                                           ! Debug: expression subtree swapping
17891 42B0           40                         inc	ax
17892 42B1           50                         push	ax
17893 42B2           8A46         06            mov	al,6[bp]
17894 42B5           30E4                       xor	ah,ah
17895 42B7           3B46         F6            cmp	ax,-$A[bp]
17896 42BA           8D66         F8            lea	sp,-8[bp]
17897 42BD           74           15            je  	.9F
17898                       000042BF            .A0:
17899                                           ! 2097     {
17900                                           ! 2098      CH = ((CH+1) * cheight / 8) -1;
17901                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17902 42BF           8A46         04            mov	al,4[bp]
17903 42C2           30E4                       xor	ah,ah
17904                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17905 42C4           40                         inc	ax
17906 42C5           8B4E         FE            mov	cx,-2[bp]
17907 42C8           F7E9                       imul	cx
17908                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17909 42CA           B1                     03  mov	cl,*3
17910 42CC           D3E8                       shr	ax,cl
17911                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17912                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17913 42CE           48                         dec	ax
17914 42CF           8846         04            mov	4[bp],al
17915                                           !BCC_EOS
17916                                           ! 2099     }
17917                                           ! 2100    else
17918                                           ! 2101     {
17919 42D2           EB           14            jmp .A1
17920                       000042D4            .9F:
17921                                           ! 2102      CH = ((CL+1) * cheight / 8) - 2;
17922                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17923 42D4           8A46         06            mov	al,6[bp]
17924 42D7           30E4                       xor	ah,ah
17925                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17926 42D9           40                         inc	ax
17927 42DA           8B4E         FE            mov	cx,-2[bp]
17928 42DD           F7E9                       imul	cx
17929                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17930 42DF           B1                     03  mov	cl,*3
17931 42E1           D3E8                       shr	ax,cl
17932                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17933                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17934 42E3           48                         dec	ax
17935 42E4           48                         dec	ax
17936 42E5           8846         04            mov	4[bp],al
17937                                           !BCC_EOS
17938                                           ! 2103     }
17939                                           ! 2104    CL = ((CL+1) * cheight / 8) - 1;
17940                       000042E8            .A1:
17941                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17942 42E8           8A46         06            mov	al,6[bp]
17943 42EB           30E4                       xor	ah,ah
17944                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17945 42ED           40                         inc	ax
17946 42EE           8B4E         FE            mov	cx,-2[bp]
17947 42F1           F7E9                       imul	cx
17948                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17949 42F3           B1                     03  mov	cl,*3
17950 42F5           D3E8                       shr	ax,cl
17951                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17952                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17953 42F7           48                         dec	ax
17954 42F8           8846         06            mov	6[bp],al
17955                                           !BCC_EOS
17956                                           ! 2105   }
17957                                           ! 2106  crtc_addr=read_word(0x40,0x63);
17958                       000042FB            .9A:
17959                                           ! Debug: list int = const $63 (used reg = )
17960 42FB           B8                   0063  mov	ax,*$63
17961 42FE           50                         push	ax
17962                                           ! Debug: list int = const $40 (used reg = )
17963 42FF           B8                   0040  mov	ax,*$40
17964 4302           50                         push	ax
17965                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17966 4303           E8         389F            call	_read_word
17967 4306           83C4                   04  add	sp,*4
17968                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17969 4309           8946         FA            mov	-6[bp],ax
17970                                           !BCC_EOS
17971                                           ! 2107  outb(crtc_addr,0x0a);
17972                                           ! Debug: list int = const $A (used reg = )
17973 430C           B8                   000A  mov	ax,*$A
17974 430F           50                         push	ax
17975                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17976 4310           FF76         FA            push	-6[bp]
17977                                           ! Debug: func () void = outb+0 (used reg = )
17978 4313           E8         38E8            call	_outb
17979 4316           83C4                   04  add	sp,*4
17980                                           !BCC_EOS
17981                                           ! 2108  outb(crtc_addr+1,CH);
17982                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17983 4319           8A46         04            mov	al,4[bp]
17984 431C           30E4                       xor	ah,ah
17985 431E           50                         push	ax
17986                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17987 431F           8B46         FA            mov	ax,-6[bp]
17988                                           ! Debug: list unsigned int = ax+1 (used reg = )
17989 4322           40                         inc	ax
17990 4323           50                         push	ax
17991                                           ! Debug: func () void = outb+0 (used reg = )
17992 4324           E8         38D7            call	_outb
17993 4327           83C4                   04  add	sp,*4
17994                                           !BCC_EOS
17995                                           ! 2109  outb(crtc_addr,0x0b);
17996                                           ! Debug: list int = const $B (used reg = )
17997 432A           B8                   000B  mov	ax,*$B
17998 432D           50                         push	ax
17999                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18000 432E           FF76         FA            push	-6[bp]
18001                                           ! Debug: func () void = outb+0 (used reg = )
18002 4331           E8         38CA            call	_outb
18003 4334           83C4                   04  add	sp,*4
18004                                           !BCC_EOS
18005                                           ! 2110  outb(crtc_addr+1,CL);
18006                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18007 4337           8A46         06            mov	al,6[bp]
18008 433A           30E4                       xor	ah,ah
18009 433C           50                         push	ax
18010                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18011 433D           8B46         FA            mov	ax,-6[bp]
18012                                           ! Debug: list unsigned int = ax+1 (used reg = )
18013 4340           40                         inc	ax
18014 4341           50                         push	ax
18015                                           ! Debug: func () void = outb+0 (used reg = )
18016 4342           E8         38B9            call	_outb
18017 4345           83C4                   04  add	sp,*4
18018                                           !BCC_EOS
18019                                           ! 2111 }
18020 4348           89EC                       mov	sp,bp
18021 434A           5D                         pop	bp
18022 434B           C3                         ret
18023                                           ! 2112 static void biosfn_set_cursor_pos (page, cursor)
18024                                           ! 2113 Bit8u page;Bit16u cursor;
18025                       0000434C            _biosfn_set_cursor_pos:
18026                                           !BCC_EOS
18027                                           !BCC_EOS
18028                                           ! 2114 {
18029                                           ! 2115  Bit8u xcurs,ycurs,current;
18030                                           !BCC_EOS
18031                                           ! 2116  Bit16u nbcols,nbrows,address,crtc_addr;
18032                                           !BCC_EOS
18033                                           ! 2117  if(page>7)return;
18034 434C           55                         push	bp
18035 434D           89E5                       mov	bp,sp
18036 434F           83C4                   F4  add	sp,*-$C
18037                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18038 4352           8A46         04            mov	al,4[bp]
18039 4355           3C                     07  cmp	al,*7
18040 4357           76           04            jbe 	.A2
18041                       00004359            .A3:
18042 4359           89EC                       mov	sp,bp
18043 435B           5D                         pop	bp
18044 435C           C3                         ret
18045                                           !BCC_EOS
18046                                           ! 2118  write_word(0x40, 0x50 +2*page, cursor);
18047                       0000435D            .A2:
18048                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18049 435D           FF76         06            push	6[bp]
18050                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18051                                           ! Debug: expression subtree swapping
18052 4360           8A46         04            mov	al,4[bp]
18053 4363           30E4                       xor	ah,ah
18054 4365           D1E0                       shl	ax,*1
18055                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18056                                           ! Debug: expression subtree swapping
18057                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18058 4367           05                   0050  add	ax,*$50
18059 436A           50                         push	ax
18060                                           ! Debug: list int = const $40 (used reg = )
18061 436B           B8                   0040  mov	ax,*$40
18062 436E           50                         push	ax
18063                                           ! Debug: func () void = write_word+0 (used reg = )
18064 436F           E8         385E            call	_write_word
18065 4372           83C4                   06  add	sp,*6
18066                                           !BCC_EOS
18067                                           ! 2119  current=read_byte(0x40,0x62);
18068                                           ! Debug: list int = const $62 (used reg = )
18069 4375           B8                   0062  mov	ax,*$62
18070 4378           50                         push	ax
18071                                           ! Debug: list int = const $40 (used reg = )
18072 4379           B8                   0040  mov	ax,*$40
18073 437C           50                         push	ax
18074                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18075 437D           E8         3812            call	_read_byte
18076 4380           83C4                   04  add	sp,*4
18077                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18078 4383           8846         FD            mov	-3[bp],al
18079                                           !BCC_EOS
18080                                           ! 2120  if(page==current)
18081                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18082 4386           8A46         04            mov	al,4[bp]
18083 4389           3A46         FD            cmp	al,-3[bp]
18084 438C         0F85         00B8            bne 	.A4
18085                       00004390            .A5:
18086                                           ! 2121   {
18087                                           ! 2122    nbcols=read_word(0x40,0x4A);
18088                                           ! Debug: list int = const $4A (used reg = )
18089 4390           B8                   004A  mov	ax,*$4A
18090 4393           50                         push	ax
18091                                           ! Debug: list int = const $40 (used reg = )
18092 4394           B8                   0040  mov	ax,*$40
18093 4397           50                         push	ax
18094                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18095 4398           E8         380A            call	_read_word
18096 439B           83C4                   04  add	sp,*4
18097                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18098 439E           8946         FA            mov	-6[bp],ax
18099                                           !BCC_EOS
18100                                           ! 2123    nbrows=read_byte(0x40,0x84)+1;
18101                                           ! Debug: list int = const $84 (used reg = )
18102 43A1           B8                   0084  mov	ax,#$84
18103 43A4           50                         push	ax
18104                                           ! Debug: list int = const $40 (used reg = )
18105 43A5           B8                   0040  mov	ax,*$40
18106 43A8           50                         push	ax
18107                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18108 43A9           E8         37E6            call	_read_byte
18109 43AC           83C4                   04  add	sp,*4
18110                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18111 43AF           30E4                       xor	ah,ah
18112                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18113 43B1           40                         inc	ax
18114 43B2           8946         F8            mov	-8[bp],ax
18115                                           !BCC_EOS
18116                                           ! 2124    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18117                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18118 43B5           8A46         06            mov	al,6[bp]
18119                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18120 43B8           8846         FF            mov	-1[bp],al
18121                                           !BCC_EOS
18122                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18123 43BB           8B46         06            mov	ax,6[bp]
18124 43BE           30C0                       xor	al,al
18125                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18126 43C0           88E0                       mov	al,ah
18127 43C2           30E4                       xor	ah,ah
18128                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18129 43C4           8846         FE            mov	-2[bp],al
18130                                           !BCC_EOS
18131                                           ! 2125    address=((((nbcols*
18132                                           ! 2125 nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18133                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18134 43C7           8A46         FE            mov	al,-2[bp]
18135 43CA           30E4                       xor	ah,ah
18136 43CC           8B4E         FA            mov	cx,-6[bp]
18137 43CF           F7E9                       imul	cx
18138 43D1           50                         push	ax
18139                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18140 43D2           8B46         FA            mov	ax,-6[bp]
18141 43D5           8B4E         F8            mov	cx,-8[bp]
18142 43D8           F7E9                       imul	cx
18143                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18144 43DA           0C                     FF  or	al,#$FF
18145                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18146                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18147 43DC           89C3                       mov	bx,ax
18148 43DE           8A46         04            mov	al,4[bp]
18149 43E1           30E4                       xor	ah,ah
18150 43E3           93                         xchg	ax,bx
18151 43E4           40                         inc	ax
18152 43E5           89D9                       mov	cx,bx
18153 43E7           F7E9                       imul	cx
18154                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18155 43E9           0246         FF            add	al,-1[bp]
18156 43EC           80D4                   00  adc	ah,*0
18157                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18158 43EF           0346         F2            add	ax,-$E[bp]
18159 43F2           44                         inc	sp
18160 43F3           44                         inc	sp
18161                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18162 43F4           8946         F6            mov	-$A[bp],ax
18163                                           !BCC_EOS
18164                                           ! 2126    crtc_addr=read_word(0x40,0x63);
18165                                           ! Debug: list int = const $63 (used reg = )
18166 43F7           B8                   0063  mov	ax,*$63
18167 43FA           50                         push	ax
18168                                           ! Debug: list int = const $40 (used reg = )
18169 43FB           B8                   0040  mov	ax,*$40
18170 43FE           50                         push	ax
18171                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18172 43FF           E8         37A3            call	_read_word
18173 4402           83C4                   04  add	sp,*4
18174                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18175 4405           8946         F4            mov	-$C[bp],ax
18176                                           !BCC_EOS
18177                                           ! 2127    outb(crtc_addr,0x0e);
18178                                           ! Debug: list int = const $E (used reg = )
18179 4408           B8                   000E  mov	ax,*$E
18180 440B           50                         push	ax
18181                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18182 440C           FF76         F4            push	-$C[bp]
18183                                           ! Debug: func () void = outb+0 (used reg = )
18184 440F           E8         37EC            call	_outb
18185 4412           83C4                   04  add	sp,*4
18186                                           !BCC_EOS
18187                                           ! 2128    outb(crtc_addr+1,(address&0xff00)>>8);
18188                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18189 4415           8B46         F6            mov	ax,-$A[bp]
18190 4418           30C0                       xor	al,al
18191                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18192 441A           88E0                       mov	al,ah
18193 441C           30E4                       xor	ah,ah
18194                                           ! Debug: list unsigned int = ax+0 (used reg = )
18195 441E           50                         push	ax
18196                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18197 441F           8B46         F4            mov	ax,-$C[bp]
18198                                           ! Debug: list unsigned int = ax+1 (used reg = )
18199 4422           40                         inc	ax
18200 4423           50                         push	ax
18201                                           ! Debug: func () void = outb+0 (used reg = )
18202 4424           E8         37D7            call	_outb
18203 4427           83C4                   04  add	sp,*4
18204                                           !BCC_EOS
18205                                           ! 2129    outb(crtc_addr,0x0f);
18206                                           ! Debug: list int = const $F (used reg = )
18207 442A           B8                   000F  mov	ax,*$F
18208 442D           50                         push	ax
18209                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18210 442E           FF76         F4            push	-$C[bp]
18211                                           ! Debug: func () void = outb+0 (used reg = )
18212 4431           E8         37CA            call	_outb
18213 4434           83C4                   04  add	sp,*4
18214                                           !BCC_EOS
18215                                           ! 2130    outb(crtc_addr+1,address&0x00ff);
18216                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18217 4437           8A46         F6            mov	al,-$A[bp]
18218                                           ! Debug: list unsigned char = al+0 (used reg = )
18219 443A           30E4                       xor	ah,ah
18220 443C           50                         push	ax
18221                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18222 443D           8B46         F4            mov	ax,-$C[bp]
18223                                           ! Debug: list unsigned int = ax+1 (used reg = )
18224 4440           40                         inc	ax
18225 4441           50                         push	ax
18226                                           ! Debug: func () void = outb+0 (used reg = )
18227 4442           E8         37B9            call	_outb
18228 4445           83C4                   04  add	sp,*4
18229                                           !BCC_EOS
18230                                           ! 2131   }
18231                                           ! 2132 }
18232                       00004448            .A4:
18233 4448           89EC                       mov	sp,bp
18234 444A           5D                         pop	bp
18235 444B           C3                         ret
18236                                           ! 2133 static void biosfn_get_cursor_pos (page,shape, pos)
18237                                           ! Register BX used in function biosfn_set_cursor_pos
18238                                           ! 2134 Bit8u page;Bit16u *shape;Bit16u *pos;
18239                       0000444C            _biosfn_get_cursor_pos:
18240                                           !BCC_EOS
18241                                           !BCC_EOS
18242                                           !BCC_EOS
18243                                           ! 2135 {
18244                                           ! 2136  Bit16u ss=get_SS();
18245 444C           55                         push	bp
18246 444D           89E5                       mov	bp,sp
18247 444F           4C                         dec	sp
18248 4450           4C                         dec	sp
18249                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18250 4451           E8         37CA            call	_get_SS
18251                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18252 4454           8946         FE            mov	-2[bp],ax
18253                                           !BCC_EOS
18254                                           ! 2137  write_word(ss, shape, 0);
18255                                           ! Debug: list int = const 0 (used reg = )
18256 4457           31C0                       xor	ax,ax
18257 4459           50                         push	ax
18258                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18259 445A           FF76         06            push	6[bp]
18260                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18261 445D           FF76         FE            push	-2[bp]
18262                                           ! Debug: func () void = write_word+0 (used reg = )
18263 4460           E8         376D            call	_write_word
18264 4463           83C4                   06  add	sp,*6
18265                                           !BCC_EOS
18266                                           ! 2138  write_word(ss, pos, 0);
18267                                           ! Debug: list int = const 0 (used reg = )
18268 4466           31C0                       xor	ax,ax
18269 4468           50                         push	ax
18270                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18271 4469           FF76         08            push	8[bp]
18272                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18273 446C           FF76         FE            push	-2[bp]
18274                                           ! Debug: func () void = write_word+0 (used reg = )
18275 446F           E8         375E            call	_write_word
18276 4472           83C4                   06  add	sp,*6
18277                                           !BCC_EOS
18278                                           ! 2139  if(page>7)return;
18279                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18280 4475           8A46         04            mov	al,4[bp]
18281 4478           3C                     07  cmp	al,*7
18282 447A           76           04            jbe 	.A6
18283                       0000447C            .A7:
18284 447C           89EC                       mov	sp,bp
18285 447E           5D                         pop	bp
18286 447F           C3                         ret
18287                                           !BCC_EOS
18288                                           ! 2140  write_word(ss,shape,read_word(0x40,0x60));
18289                       00004480            .A6:
18290                                           ! Debug: list int = const $60 (used reg = )
18291 4480           B8                   0060  mov	ax,*$60
18292 4483           50                         push	ax
18293                                           ! Debug: list int = const $40 (used reg = )
18294 4484           B8                   0040  mov	ax,*$40
18295 4487           50                         push	ax
18296                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18297 4488           E8         371A            call	_read_word
18298 448B           83C4                   04  add	sp,*4
18299                                           ! Debug: list unsigned short = ax+0 (used reg = )
18300 448E           50                         push	ax
18301                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18302 448F           FF76         06            push	6[bp]
18303                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18304 4492           FF76         FE            push	-2[bp]
18305                                           ! Debug: func () void = write_word+0 (used reg = )
18306 4495           E8         3738            call	_write_word
18307 4498           83C4                   06  add	sp,*6
18308                                           !BCC_EOS
18309                                           ! 2141  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18310                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18311 449B           8A46         04            mov	al,4[bp]
18312 449E           30E4                       xor	ah,ah
18313 44A0           D1E0                       shl	ax,*1
18314                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18315                                           ! Debug: expression subtree swapping
18316                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18317 44A2           05                   0050  add	ax,*$50
18318 44A5           50                         push	ax
18319                                           ! Debug: list int = const $40 (used reg = )
18320 44A6           B8                   0040  mov	ax,*$40
18321 44A9           50                         push	ax
18322                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18323 44AA           E8         36F8            call	_read_word
18324 44AD           83C4                   04  add	sp,*4
18325                                           ! Debug: list unsigned short = ax+0 (used reg = )
18326 44B0           50                         push	ax
18327                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18328 44B1           FF76         08            push	8[bp]
18329                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18330 44B4           FF76         FE            push	-2[bp]
18331                                           ! Debug: func () void = write_word+0 (used reg = )
18332 44B7           E8         3716            call	_write_word
18333 44BA           83C4                   06  add	sp,*6
18334                                           !BCC_EOS
18335                                           ! 2142 }
18336 44BD           89EC                       mov	sp,bp
18337 44BF           5D                         pop	bp
18338 44C0           C3                         ret
18339                                           ! 2143 static void biosfn_set_active_page (page)
18340                                           ! 2144 Bit8u page;
18341                       000044C1            _biosfn_set_active_page:
18342                                           !BCC_EOS
18343                                           ! 2145 {
18344                                           ! 2146  Bit16u cursor,dummy,crtc_addr;
18345                                           !BCC_EOS
18346                                           ! 2147  Bit16u nbcols,nbrows,address;
18347                                           !BCC_EOS
18348                                           ! 2148  Bit8u mode,line;
18349                                           !BCC_EOS
18350                                           ! 2149  if(page>7)return;
18351 44C1           55                         push	bp
18352 44C2           89E5                       mov	bp,sp
18353 44C4           83C4                   F2  add	sp,*-$E
18354                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18355 44C7           8A46         04            mov	al,4[bp]
18356 44CA           3C                     07  cmp	al,*7
18357 44CC           76           04            jbe 	.A8
18358                       000044CE            .A9:
18359 44CE           89EC                       mov	sp,bp
18360 44D0           5D                         pop	bp
18361 44D1           C3                         ret
18362                                           !BCC_EOS
18363                                           ! 2150  mode=read_byte(0x40,0x49);
18364                       000044D2            .A8:
18365                                           ! Debug: list int = const $49 (used reg = )
18366 44D2           B8                   0049  mov	ax,*$49
18367 44D5           50                         push	ax
18368                                           ! Debug: list int = const $40 (used reg = )
18369 44D6           B8                   0040  mov	ax,*$40
18370 44D9           50                         push	ax
18371                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18372 44DA           E8         36B5            call	_read_byte
18373 44DD           83C4                   04  add	sp,*4
18374                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18375 44E0           8846         F3            mov	-$D[bp],al
18376                                           !BCC_EOS
18377                                           ! 2151  line=find_vga_entry(mode);
18378                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18379 44E3           8A46         F3            mov	al,-$D[bp]
18380 44E6           30E4                       xor	ah,ah
18381 44E8           50                         push	ax
18382                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18383 44E9           E8         35BA            call	_find_vga_entry
18384 44EC           44                         inc	sp
18385 44ED           44                         inc	sp
18386                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18387 44EE           8846         F2            mov	-$E[bp],al
18388                                           !BCC_EOS
18389                                           ! 2152  if(line==0xFF)return;
18390                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18391 44F1           8A46         F2            mov	al,-$E[bp]
18392 44F4           3C                     FF  cmp	al,#$FF
18393 44F6           75           04            jne 	.AA
18394                       000044F8            .AB:
18395 44F8           89EC                       mov	sp,bp
18396 44FA           5D                         pop	bp
18397 44FB           C3                         ret
18398                                           !BCC_EOS
18399                                           ! 2153  biosfn_get_cursor_pos(page,&dummy,&cursor);
18400                       000044FC            .AA:
18401                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18402 44FC           8D5E         FE            lea	bx,-2[bp]
18403 44FF           53                         push	bx
18404                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18405 4500           8D5E         FC            lea	bx,-4[bp]
18406 4503           53                         push	bx
18407                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18408 4504           8A46         04            mov	al,4[bp]
18409 4507           30E4                       xor	ah,ah
18410 4509           50                         push	ax
18411                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18412 450A           E8         FF3F            call	_biosfn_get_cursor_pos
18413 450D           83C4                   06  add	sp,*6
18414                                           !BCC_EOS
18415                                           ! 2154  if(vga_modes[line].class==0x00)
18416                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18417 4510           8A46         F2            mov	al,-$E[bp]
18418 4513           30E4                       xor	ah,ah
18419 4515           B1                     03  mov	cl,*3
18420 4517           D3E0                       shl	ax,cl
18421 4519           89C3                       mov	bx,ax
18422 451B           81C3                 01FF  add	bx,#_vga_modes
18423                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18424 451F           8A47         01            mov	al,1[bx]
18425 4522           84C0                       test	al,al
18426 4524           75           6E            jne 	.AC
18427                       00004526            .AD:
18428                                           ! 2155   {
18429                                           ! 2156    nbcols=read_word(0x40,0x4A);
18430                                           ! Debug: list int = const $4A (used reg = )
18431 4526           B8                   004A  mov	ax,*$4A
18432 4529           50                         push	ax
18433                                           ! Debug: list int = const $40 (used reg = )
18434 452A           B8                   0040  mov	ax,*$40
18435 452D           50                         push	ax
18436                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18437 452E           E8         3674            call	_read_word
18438 4531           83C4                   04  add	sp,*4
18439                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18440 4534           8946         F8            mov	-8[bp],ax
18441                                           !BCC_EOS
18442                                           ! 2157    nbrows=read_byte(0x40,0x84)+1;
18443                                           ! Debug: list int = const $84 (used reg = )
18444 4537           B8                   0084  mov	ax,#$84
18445 453A           50                         push	ax
18446                                           ! Debug: list int = const $40 (used reg = )
18447 453B           B8                   0040  mov	ax,*$40
18448 453E           50                         push	ax
18449                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18450 453F           E8         3650            call	_read_byte
18451 4542           83C4                   04  add	sp,*4
18452                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18453 4545           30E4                       xor	ah,ah
18454                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18455 4547           40                         inc	ax
18456 4548           8946         F6            mov	-$A[bp],ax
18457                                           !BCC_EOS
18458                                           ! 2158    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18459                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18460 454B           8B46         F8            mov	ax,-8[bp]
18461 454E           8B4E         F6            mov	cx,-$A[bp]
18462 4551           F7E9                       imul	cx
18463                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18464 4553           D1E0                       shl	ax,*1
18465                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18466 4555           0C                     FF  or	al,#$FF
18467                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18468                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18469 4557           89C3                       mov	bx,ax
18470 4559           8A46         04            mov	al,4[bp]
18471 455C           30E4                       xor	ah,ah
18472 455E           93                         xchg	ax,bx
18473 455F           40                         inc	ax
18474 4560           89D9                       mov	cx,bx
18475 4562           F7E9                       imul	cx
18476                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18477 4564           8946         F4            mov	-$C[bp],ax
18478                                           !BCC_EOS
18479                                           ! 2159    write_word(0x40,0x4E,address);
18480                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18481 4567           FF76         F4            push	-$C[bp]
18482                                           ! Debug: list int = const $4E (used reg = )
18483 456A           B8                   004E  mov	ax,*$4E
18484 456D           50                         push	ax
18485                                           ! Debug: list int = const $40 (used reg = )
18486 456E           B8                   0040  mov	ax,*$40
18487 4571           50                         push	ax
18488                                           ! Debug: func () void = write_word+0 (used reg = )
18489 4572           E8         365B            call	_write_word
18490 4575           83C4                   06  add	sp,*6
18491                                           !BCC_EOS
18492                                           ! 2160    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18493                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18494 4578           8B46         F8            mov	ax,-8[bp]
18495 457B           8B4E         F6            mov	cx,-$A[bp]
18496 457E           F7E9                       imul	cx
18497                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18498 4580           0C                     FF  or	al,#$FF
18499                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18500                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18501 4582           89C3                       mov	bx,ax
18502 4584           8A46         04            mov	al,4[bp]
18503 4587           30E4                       xor	ah,ah
18504 4589           93                         xchg	ax,bx
18505 458A           40                         inc	ax
18506 458B           89D9                       mov	cx,bx
18507 458D           F7E9                       imul	cx
18508                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18509 458F           8946         F4            mov	-$C[bp],ax
18510                                           !BCC_EOS
18511                                           ! 2161   }
18512                                           ! 2162  else
18513                                           ! 2163   {
18514 4592           EB           24            jmp .AE
18515                       00004594            .AC:
18516                                           ! 2164    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18517                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18518 4594           8A46         F2            mov	al,-$E[bp]
18519 4597           30E4                       xor	ah,ah
18520 4599           89C3                       mov	bx,ax
18521                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18522 459B           8A87       027F            mov	al,_line_to_vpti[bx]
18523 459F           30E4                       xor	ah,ah
18524 45A1           B1                     06  mov	cl,*6
18525 45A3           D3E0                       shl	ax,cl
18526 45A5           89C3                       mov	bx,ax
18527 45A7           81C3                 0293  add	bx,#_video_param_table
18528                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18529                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18530                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18531 45AB           8A46         04            mov	al,4[bp]
18532 45AE           30E4                       xor	ah,ah
18533 45B0           8B4F         03            mov	cx,3[bx]
18534 45B3           F7E9                       imul	cx
18535                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18536 45B5           8946         F4            mov	-$C[bp],ax
18537                                           !BCC_EOS
18538                                           ! 2165   }
18539                                           ! 2166  crtc_addr=read_word(0x40,0x63);
18540                       000045B8            .AE:
18541                                           ! Debug: list int = const $63 (used reg = )
18542 45B8           B8                   0063  mov	ax,*$63
18543 45BB           50                         push	ax
18544                                           ! Debug: list int = const $40 (used reg = )
18545 45BC           B8                   0040  mov	ax,*$40
18546 45BF           50                         push	ax
18547                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18548 45C0           E8         35E2            call	_read_word
18549 45C3           83C4                   04  add	sp,*4
18550                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18551 45C6           8946         FA            mov	-6[bp],ax
18552                                           !BCC_EOS
18553                                           ! 2167  outb(crtc_addr,0x0c);
18554                                           ! Debug: list int = const $C (used reg = )
18555 45C9           B8                   000C  mov	ax,*$C
18556 45CC           50                         push	ax
18557                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18558 45CD           FF76         FA            push	-6[bp]
18559                                           ! Debug: func () void = outb+0 (used reg = )
18560 45D0           E8         362B            call	_outb
18561 45D3           83C4                   04  add	sp,*4
18562                                           !BCC_EOS
18563                                           ! 2168  outb(crtc_addr+1,(address&0xff00)>>8);
18564                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18565 45D6           8B46         F4            mov	ax,-$C[bp]
18566 45D9           30C0                       xor	al,al
18567                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18568 45DB           88E0                       mov	al,ah
18569 45DD           30E4                       xor	ah,ah
18570                                           ! Debug: list unsigned int = ax+0 (used reg = )
18571 45DF           50                         push	ax
18572                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18573 45E0           8B46         FA            mov	ax,-6[bp]
18574                                           ! Debug: list unsigned int = ax+1 (used reg = )
18575 45E3           40                         inc	ax
18576 45E4           50                         push	ax
18577                                           ! Debug: func () void = outb+0 (used reg = )
18578 45E5           E8         3616            call	_outb
18579 45E8           83C4                   04  add	sp,*4
18580                                           !BCC_EOS
18581                                           ! 2169  outb(crtc_addr,0x0d);
18582                                           ! Debug: list int = const $D (used reg = )
18583 45EB           B8                   000D  mov	ax,*$D
18584 45EE           50                         push	ax
18585                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18586 45EF           FF76         FA            push	-6[bp]
18587                                           ! Debug: func () void = outb+0 (used reg = )
18588 45F2           E8         3609            call	_outb
18589 45F5           83C4                   04  add	sp,*4
18590                                           !BCC_EOS
18591                                           ! 2170  outb(crtc_addr+1,address&0x00ff);
18592                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18593 45F8           8A46         F4            mov	al,-$C[bp]
18594                                           ! Debug: list unsigned char = al+0 (used reg = )
18595 45FB           30E4                       xor	ah,ah
18596 45FD           50                         push	ax
18597                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18598 45FE           8B46         FA            mov	ax,-6[bp]
18599                                           ! Debug: list unsigned int = ax+1 (used reg = )
18600 4601           40                         inc	ax
18601 4602           50                         push	ax
18602                                           ! Debug: func () void = outb+0 (used reg = )
18603 4603           E8         35F8            call	_outb
18604 4606           83C4                   04  add	sp,*4
18605                                           !BCC_EOS
18606                                           ! 2171  write_byte(0x40,0x62,page);
18607                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18608 4609           8A46         04            mov	al,4[bp]
18609 460C           30E4                       xor	ah,ah
18610 460E           50                         push	ax
18611                                           ! Debug: list int = const $62 (used reg = )
18612 460F           B8                   0062  mov	ax,*$62
18613 4612           50                         push	ax
18614                                           ! Debug: list int = const $40 (used reg = )
18615 4613           B8                   0040  mov	ax,*$40
18616 4616           50                         push	ax
18617                                           ! Debug: func () void = write_byte+0 (used reg = )
18618 4617           E8         359E            call	_write_byte
18619 461A           83C4                   06  add	sp,*6
18620                                           !BCC_EOS
18621                                           ! 2172  biosfn_set_cursor_pos(page,cursor);
18622                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18623 461D           FF76         FE            push	-2[bp]
18624                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18625 4620           8A46         04            mov	al,4[bp]
18626 4623           30E4                       xor	ah,ah
18627 4625           50                         push	ax
18628                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18629 4626           E8         FD23            call	_biosfn_set_cursor_pos
18630 4629           83C4                   04  add	sp,*4
18631                                           !BCC_EOS
18632                                           ! 2173 }
18633 462C           89EC                       mov	sp,bp
18634 462E           5D                         pop	bp
18635 462F           C3                         ret
18636                                           ! 2174 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18637                                           ! Register BX used in function biosfn_set_active_page
18638                                           ! 2175 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18639                       00004630            _vgamem_copy_pl4:
18640                                           !BCC_EOS
18641                                           !BCC_EOS
18642                                           !BCC_EOS
18643                                           !BCC_EOS
18644                                           !BCC_EOS
18645                                           !BCC_EOS
18646                                           ! 2176 {
18647                                           ! 2177  Bit16u src,dest;
18648                                           !BCC_EOS
18649                                           ! 2178  Bit8u i;
18650                                           !BCC_EOS
18651                                           ! 2179  src=ysrc*cheight*nbcols+xstart;
18652 4630           55                         push	bp
18653 4631           89E5                       mov	bp,sp
18654 4633           83C4                   FA  add	sp,*-6
18655                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18656 4636           8A46         0E            mov	al,$E[bp]
18657 4639           30E4                       xor	ah,ah
18658 463B           89C3                       mov	bx,ax
18659 463D           8A46         06            mov	al,6[bp]
18660 4640           30E4                       xor	ah,ah
18661 4642           89D9                       mov	cx,bx
18662 4644           F7E9                       imul	cx
18663                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18664 4646           89C3                       mov	bx,ax
18665 4648           8A46         0C            mov	al,$C[bp]
18666 464B           30E4                       xor	ah,ah
18667 464D           93                         xchg	ax,bx
18668 464E           89D9                       mov	cx,bx
18669 4650           F7E9                       imul	cx
18670                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18671 4652           0246         04            add	al,4[bp]
18672 4655           80D4                   00  adc	ah,*0
18673                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18674 4658           8946         FE            mov	-2[bp],ax
18675                                           !BCC_EOS
18676                                           ! 2180  dest=ydest*cheight*nbcols+xstart;
18677                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18678 465B           8A46         0E            mov	al,$E[bp]
18679 465E           30E4                       xor	ah,ah
18680 4660           89C3                       mov	bx,ax
18681 4662           8A46         08            mov	al,8[bp]
18682 4665           30E4                       xor	ah,ah
18683 4667           89D9                       mov	cx,bx
18684 4669           F7E9                       imul	cx
18685                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18686 466B           89C3                       mov	bx,ax
18687 466D           8A46         0C            mov	al,$C[bp]
18688 4670           30E4                       xor	ah,ah
18689 4672           93                         xchg	ax,bx
18690 4673           89D9                       mov	cx,bx
18691 4675           F7E9                       imul	cx
18692                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18693 4677           0246         04            add	al,4[bp]
18694 467A           80D4                   00  adc	ah,*0
18695                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18696 467D           8946         FC            mov	-4[bp],ax
18697                                           !BCC_EOS
18698                                           ! 2181  outw(0x3ce, 0x0105);
18699                                           ! Debug: list int = const $105 (used reg = )
18700 4680           B8                   0105  mov	ax,#$105
18701 4683           50                         push	ax
18702                                           ! Debug: list int = const $3CE (used reg = )
18703 4684           B8                   03CE  mov	ax,#$3CE
18704 4687           50                         push	ax
18705                                           ! Debug: func () void = outw+0 (used reg = )
18706 4688           E8         3583            call	_outw
18707 468B           83C4                   04  add	sp,*4
18708                                           !BCC_EOS
18709                                           ! 2182  for(i=0;i<cheight;i++)
18710                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18711 468E           30C0                       xor	al,al
18712 4690           8846         FB            mov	-5[bp],al
18713                                           !BCC_EOS
18714                                           !BCC_EOS
18715                                           ! 2183   {
18716 4693           EB           43            jmp .B1
18717                       00004695            .B2:
18718                                           ! 2184    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18719                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18720 4695           8A46         0A            mov	al,$A[bp]
18721 4698           30E4                       xor	ah,ah
18722 469A           50                         push	ax
18723                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18724 469B           8A46         0C            mov	al,$C[bp]
18725 469E           30E4                       xor	ah,ah
18726 46A0           89C3                       mov	bx,ax
18727 46A2           8A46         FB            mov	al,-5[bp]
18728 46A5           30E4                       xor	ah,ah
18729 46A7           89D9                       mov	cx,bx
18730 46A9           F7E9                       imul	cx
18731                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18732                                           ! Debug: expression subtree swapping
18733 46AB           0346         FE            add	ax,-2[bp]
18734                                           ! Debug: list unsigned int = ax+0 (used reg = )
18735 46AE           50                         push	ax
18736                                           ! Debug: list unsigned int = const $A000 (used reg = )
18737 46AF           B8                   A000  mov	ax,#$A000
18738 46B2           50                         push	ax
18739                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18740 46B3           8A46         0C            mov	al,$C[bp]
18741 46B6           30E4                       xor	ah,ah
18742 46B8           89C3                       mov	bx,ax
18743 46BA           8A46         FB            mov	al,-5[bp]
18744 46BD           30E4                       xor	ah,ah
18745 46BF           89D9                       mov	cx,bx
18746 46C1           F7E9                       imul	cx
18747                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18748                                           ! Debug: expression subtree swapping
18749 46C3           0346         FC            add	ax,-4[bp]
18750                                           ! Debug: list unsigned int = ax+0 (used reg = )
18751 46C6           50                         push	ax
18752                                           ! Debug: list unsigned int = const $A000 (used reg = )
18753 46C7           B8                   A000  mov	ax,#$A000
18754 46CA           50                         push	ax
18755                                           ! Debug: func () void = memcpyb+0 (used reg = )
18756 46CB           E8         3464            call	_memcpyb
18757 46CE           83C4                   0A  add	sp,*$A
18758                                           !BCC_EOS
18759                                           ! 2185   }
18760                                           ! 2186  outw(0x3ce, 0x0005);
18761                       000046D1            .B0:
18762                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18763 46D1           8A46         FB            mov	al,-5[bp]
18764 46D4           40                         inc	ax
18765 46D5           8846         FB            mov	-5[bp],al
18766                       000046D8            .B1:
18767                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18768 46D8           8A46         FB            mov	al,-5[bp]
18769 46DB           3A46         0E            cmp	al,$E[bp]
18770 46DE           72           B5            jb 	.B2
18771                       000046E0            .B3:
18772                       000046E0            .AF:
18773                                           ! Debug: list int = const 5 (used reg = )
18774 46E0           B8                   0005  mov	ax,*5
18775 46E3           50                         push	ax
18776                                           ! Debug: list int = const $3CE (used reg = )
18777 46E4           B8                   03CE  mov	ax,#$3CE
18778 46E7           50                         push	ax
18779                                           ! Debug: func () void = outw+0 (used reg = )
18780 46E8           E8         3523            call	_outw
18781 46EB           83C4                   04  add	sp,*4
18782                                           !BCC_EOS
18783                                           ! 2187 }
18784 46EE           89EC                       mov	sp,bp
18785 46F0           5D                         pop	bp
18786 46F1           C3                         ret
18787                                           ! 2188 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18788                                           ! Register BX used in function vgamem_copy_pl4
18789                                           ! 2189 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18790                       000046F2            _vgamem_fill_pl4:
18791                                           !BCC_EOS
18792                                           !BCC_EOS
18793                                           !BCC_EOS
18794                                           !BCC_EOS
18795                                           !BCC_EOS
18796                                           !BCC_EOS
18797                                           ! 2190 {
18798                                           ! 2191  Bit16u dest;
18799                                           !BCC_EOS
18800                                           ! 2192  Bit8u i;
18801                                           !BCC_EOS
18802                                           ! 2193  dest=ystart*cheight*nbcols+xstart;
18803 46F2           55                         push	bp
18804 46F3           89E5                       mov	bp,sp
18805 46F5           83C4                   FC  add	sp,*-4
18806                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18807 46F8           8A46         0C            mov	al,$C[bp]
18808 46FB           30E4                       xor	ah,ah
18809 46FD           89C3                       mov	bx,ax
18810 46FF           8A46         06            mov	al,6[bp]
18811 4702           30E4                       xor	ah,ah
18812 4704           89D9                       mov	cx,bx
18813 4706           F7E9                       imul	cx
18814                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18815 4708           89C3                       mov	bx,ax
18816 470A           8A46         0A            mov	al,$A[bp]
18817 470D           30E4                       xor	ah,ah
18818 470F           93                         xchg	ax,bx
18819 4710           89D9                       mov	cx,bx
18820 4712           F7E9                       imul	cx
18821                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18822 4714           0246         04            add	al,4[bp]
18823 4717           80D4                   00  adc	ah,*0
18824                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18825 471A           8946         FE            mov	-2[bp],ax
18826                                           !BCC_EOS
18827                                           ! 2194  outw(0x3ce, 0x0205);
18828                                           ! Debug: list int = const $205 (used reg = )
18829 471D           B8                   0205  mov	ax,#$205
18830 4720           50                         push	ax
18831                                           ! Debug: list int = const $3CE (used reg = )
18832 4721           B8                   03CE  mov	ax,#$3CE
18833 4724           50                         push	ax
18834                                           ! Debug: func () void = outw+0 (used reg = )
18835 4725           E8         34E6            call	_outw
18836 4728           83C4                   04  add	sp,*4
18837                                           !BCC_EOS
18838                                           ! 2195  for(i=0;i<cheight;i++)
18839                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18840 472B           30C0                       xor	al,al
18841 472D           8846         FD            mov	-3[bp],al
18842                                           !BCC_EOS
18843                                           !BCC_EOS
18844                                           ! 2196   {
18845 4730           EB           31            jmp .B6
18846                       00004732            .B7:
18847                                           ! 2197    memsetb(0xa000,dest+i*nbcols,attr,cols);
18848                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18849 4732           8A46         08            mov	al,8[bp]
18850 4735           30E4                       xor	ah,ah
18851 4737           50                         push	ax
18852                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18853 4738           8A46         0E            mov	al,$E[bp]
18854 473B           30E4                       xor	ah,ah
18855 473D           50                         push	ax
18856                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18857 473E           8A46         0A            mov	al,$A[bp]
18858 4741           30E4                       xor	ah,ah
18859 4743           89C3                       mov	bx,ax
18860 4745           8A46         FD            mov	al,-3[bp]
18861 4748           30E4                       xor	ah,ah
18862 474A           89D9                       mov	cx,bx
18863 474C           F7E9                       imul	cx
18864                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18865                                           ! Debug: expression subtree swapping
18866 474E           0346         FE            add	ax,-2[bp]
18867                                           ! Debug: list unsigned int = ax+0 (used reg = )
18868 4751           50                         push	ax
18869                                           ! Debug: list unsigned int = const $A000 (used reg = )
18870 4752           B8                   A000  mov	ax,#$A000
18871 4755           50                         push	ax
18872                                           ! Debug: func () void = memsetb+0 (used reg = )
18873 4756           E8         338F            call	_memsetb
18874 4759           83C4                   08  add	sp,*8
18875                                           !BCC_EOS
18876                                           ! 2198   }
18877                                           ! 2199  outw(0x3ce, 0x0005);
18878                       0000475C            .B5:
18879                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18880 475C           8A46         FD            mov	al,-3[bp]
18881 475F           40                         inc	ax
18882 4760           8846         FD            mov	-3[bp],al
18883                       00004763            .B6:
18884                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18885 4763           8A46         FD            mov	al,-3[bp]
18886 4766           3A46         0C            cmp	al,$C[bp]
18887 4769           72           C7            jb 	.B7
18888                       0000476B            .B8:
18889                       0000476B            .B4:
18890                                           ! Debug: list int = const 5 (used reg = )
18891 476B           B8                   0005  mov	ax,*5
18892 476E           50                         push	ax
18893                                           ! Debug: list int = const $3CE (used reg = )
18894 476F           B8                   03CE  mov	ax,#$3CE
18895 4772           50                         push	ax
18896                                           ! Debug: func () void = outw+0 (used reg = )
18897 4773           E8         3498            call	_outw
18898 4776           83C4                   04  add	sp,*4
18899                                           !BCC_EOS
18900                                           ! 2200 }
18901 4779           89EC                       mov	sp,bp
18902 477B           5D                         pop	bp
18903 477C           C3                         ret
18904                                           ! 2201 static voi
18905                                           ! Register BX used in function vgamem_fill_pl4
18906                                           ! 2201 d vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18907                                           ! 2202 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18908                       0000477D            _vgamem_copy_cga:
18909                                           !BCC_EOS
18910                                           !BCC_EOS
18911                                           !BCC_EOS
18912                                           !BCC_EOS
18913                                           !BCC_EOS
18914                                           !BCC_EOS
18915                                           ! 2203 {
18916                                           ! 2204  Bit16u src,dest;
18917                                           !BCC_EOS
18918                                           ! 2205  Bit8u i;
18919                                           !BCC_EOS
18920                                           ! 2206  src=((ysrc*cheight*nbcols)>>1)+xstart;
18921 477D           55                         push	bp
18922 477E           89E5                       mov	bp,sp
18923 4780           83C4                   FA  add	sp,*-6
18924                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18925 4783           8A46         0E            mov	al,$E[bp]
18926 4786           30E4                       xor	ah,ah
18927 4788           89C3                       mov	bx,ax
18928 478A           8A46         06            mov	al,6[bp]
18929 478D           30E4                       xor	ah,ah
18930 478F           89D9                       mov	cx,bx
18931 4791           F7E9                       imul	cx
18932                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18933 4793           89C3                       mov	bx,ax
18934 4795           8A46         0C            mov	al,$C[bp]
18935 4798           30E4                       xor	ah,ah
18936 479A           93                         xchg	ax,bx
18937 479B           89D9                       mov	cx,bx
18938 479D           F7E9                       imul	cx
18939                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18940 479F           D1E8                       shr	ax,*1
18941                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18942 47A1           0246         04            add	al,4[bp]
18943 47A4           80D4                   00  adc	ah,*0
18944                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18945 47A7           8946         FE            mov	-2[bp],ax
18946                                           !BCC_EOS
18947                                           ! 2207  dest=((ydest*cheight*nbcols)>>1)+xstart;
18948                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18949 47AA           8A46         0E            mov	al,$E[bp]
18950 47AD           30E4                       xor	ah,ah
18951 47AF           89C3                       mov	bx,ax
18952 47B1           8A46         08            mov	al,8[bp]
18953 47B4           30E4                       xor	ah,ah
18954 47B6           89D9                       mov	cx,bx
18955 47B8           F7E9                       imul	cx
18956                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18957 47BA           89C3                       mov	bx,ax
18958 47BC           8A46         0C            mov	al,$C[bp]
18959 47BF           30E4                       xor	ah,ah
18960 47C1           93                         xchg	ax,bx
18961 47C2           89D9                       mov	cx,bx
18962 47C4           F7E9                       imul	cx
18963                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18964 47C6           D1E8                       shr	ax,*1
18965                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18966 47C8           0246         04            add	al,4[bp]
18967 47CB           80D4                   00  adc	ah,*0
18968                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18969 47CE           8946         FC            mov	-4[bp],ax
18970                                           !BCC_EOS
18971                                           ! 2208  for(i=0;i<cheight;i++)
18972                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18973 47D1           30C0                       xor	al,al
18974 47D3           8846         FB            mov	-5[bp],al
18975                                           !BCC_EOS
18976                                           !BCC_EOS
18977                                           ! 2209   {
18978 47D6           E9         00A8            br 	.BB
18979                       000047D9            .BC:
18980                                           ! 2210    if (i & 1)
18981                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18982 47D9           8A46         FB            mov	al,-5[bp]
18983 47DC           24                     01  and	al,*1
18984 47DE           84C0                       test	al,al
18985 47E0           74           56            je  	.BD
18986                       000047E2            .BE:
18987                                           ! 2211      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18988                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18989 47E2           8A46         0A            mov	al,$A[bp]
18990 47E5           30E4                       xor	ah,ah
18991 47E7           50                         push	ax
18992                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18993 47E8           8A46         FB            mov	al,-5[bp]
18994 47EB           30E4                       xor	ah,ah
18995 47ED           D1E8                       shr	ax,*1
18996                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18997 47EF           89C3                       mov	bx,ax
18998 47F1           8A46         0C            mov	al,$C[bp]
18999 47F4           30E4                       xor	ah,ah
19000 47F6           93                         xchg	ax,bx
19001 47F7           89D9                       mov	cx,bx
19002 47F9           F7E9                       imul	cx
19003 47FB           50                         push	ax
19004                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19005                                           ! Debug: expression subtree swapping
19006 47FC           8B46         FE            mov	ax,-2[bp]
19007                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19008 47FF           05                   2000  add	ax,#$2000
19009 4802           0346         F6            add	ax,-$A[bp]
19010 4805           44                         inc	sp
19011 4806           44                         inc	sp
19012                                           ! Debug: list unsigned int = ax+0 (used reg = )
19013 4807           50                         push	ax
19014                                           ! Debug: list unsigned int = const $B800 (used reg = )
19015 4808           B8                   B800  mov	ax,#$B800
19016 480B           50                         push	ax
19017                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19018 480C           8A46         FB            mov	al,-5[bp]
19019 480F           30E4                       xor	ah,ah
19020 4811           D1E8                       shr	ax,*1
19021                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19022 4813           89C3                       mov	bx,ax
19023 4815           8A46         0C            mov	al,$C[bp]
19024 4818           30E4                       xor	ah,ah
19025 481A           93                         xchg	ax,bx
19026 481B           89D9                       mov	cx,bx
19027 481D           F7E9                       imul	cx
19028 481F           50                         push	ax
19029                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19030                                           ! Debug: expression subtree swapping
19031 4820           8B46         FC            mov	ax,-4[bp]
19032                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19033 4823           05                   2000  add	ax,#$2000
19034 4826           0346         F2            add	ax,-$E[bp]
19035 4829           44                         inc	sp
19036 482A           44                         inc	sp
19037                                           ! Debug: list unsigned int = ax+0 (used reg = )
19038 482B           50                         push	ax
19039                                           ! Debug: list unsigned int = const $B800 (used reg = )
19040 482C           B8                   B800  mov	ax,#$B800
19041 482F           50                         push	ax
19042                                           ! Debug: func () void = memcpyb+0 (used reg = )
19043 4830           E8         32FF            call	_memcpyb
19044 4833           83C4                   0A  add	sp,*$A
19045                                           !BCC_EOS
19046                                           ! 2212    else
19047                                           ! 2213      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19048 4836           EB           42            jmp .BF
19049                       00004838            .BD:
19050                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19051 4838           8A46         0A            mov	al,$A[bp]
19052 483B           30E4                       xor	ah,ah
19053 483D           50                         push	ax
19054                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19055 483E           8A46         FB            mov	al,-5[bp]
19056 4841           30E4                       xor	ah,ah
19057 4843           D1E8                       shr	ax,*1
19058                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19059 4845           89C3                       mov	bx,ax
19060 4847           8A46         0C            mov	al,$C[bp]
19061 484A           30E4                       xor	ah,ah
19062 484C           93                         xchg	ax,bx
19063 484D           89D9                       mov	cx,bx
19064 484F           F7E9                       imul	cx
19065                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19066                                           ! Debug: expression subtree swapping
19067 4851           0346         FE            add	ax,-2[bp]
19068                                           ! Debug: list unsigned int = ax+0 (used reg = )
19069 4854           50                         push	ax
19070                                           ! Debug: list unsigned int = const $B800 (used reg = )
19071 4855           B8                   B800  mov	ax,#$B800
19072 4858           50                         push	ax
19073                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19074 4859           8A46         FB            mov	al,-5[bp]
19075 485C           30E4                       xor	ah,ah
19076 485E           D1E8                       shr	ax,*1
19077                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19078 4860           89C3                       mov	bx,ax
19079 4862           8A46         0C            mov	al,$C[bp]
19080 4865           30E4                       xor	ah,ah
19081 4867           93                         xchg	ax,bx
19082 4868           89D9                       mov	cx,bx
19083 486A           F7E9                       imul	cx
19084                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19085                                           ! Debug: expression subtree swapping
19086 486C           0346         FC            add	ax,-4[bp]
19087                                           ! Debug: list unsigned int = ax+0 (used reg = )
19088 486F           50                         push	ax
19089                                           ! Debug: list unsigned int = const $B800 (used reg = )
19090 4870           B8                   B800  mov	ax,#$B800
19091 4873           50                         push	ax
19092                                           ! Debug: func () void = memcpyb+0 (used reg = )
19093 4874           E8         32BB            call	_memcpyb
19094 4877           83C4                   0A  add	sp,*$A
19095                                           !BCC_EOS
19096                                           ! 2214   }
19097                       0000487A            .BF:
19098                                           ! 2215 }
19099                       0000487A            .BA:
19100                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19101 487A           8A46         FB            mov	al,-5[bp]
19102 487D           40                         inc	ax
19103 487E           8846         FB            mov	-5[bp],al
19104                       00004881            .BB:
19105                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19106 4881           8A46         FB            mov	al,-5[bp]
19107 4884           3A46         0E            cmp	al,$E[bp]
19108 4887         0F82         FF4E            blo 	.BC
19109                       0000488B            .C0:
19110                       0000488B            .B9:
19111 488B           89EC                       mov	sp,bp
19112 488D           5D                         pop	bp
19113 488E           C3                         ret
19114                                           ! 2216 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19115                                           ! Register BX used in function vgamem_copy_cga
19116                                           ! 2217 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19117                       0000488F            _vgamem_fill_cga:
19118                                           !BCC_EOS
19119                                           !BCC_EOS
19120                                           !BCC_EOS
19121                                           !BCC_EOS
19122                                           !BCC_EOS
19123                                           !BCC_EOS
19124                                           ! 2218 {
19125                                           ! 2219  Bit16u dest;
19126                                           !BCC_EOS
19127                                           ! 2220  Bit8u i;
19128                                           !BCC_EOS
19129                                           ! 2221  dest=((ystart*cheight*nbcols)>>1)+xstart;
19130 488F           55                         push	bp
19131 4890           89E5                       mov	bp,sp
19132 4892           83C4                   FC  add	sp,*-4
19133                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19134 4895           8A46         0C            mov	al,$C[bp]
19135 4898           30E4                       xor	ah,ah
19136 489A           89C3                       mov	bx,ax
19137 489C           8A46         06            mov	al,6[bp]
19138 489F           30E4                       xor	ah,ah
19139 48A1           89D9                       mov	cx,bx
19140 48A3           F7E9                       imul	cx
19141                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19142 48A5           89C3                       mov	bx,ax
19143 48A7           8A46         0A            mov	al,$A[bp]
19144 48AA           30E4                       xor	ah,ah
19145 48AC           93                         xchg	ax,bx
19146 48AD           89D9                       mov	cx,bx
19147 48AF           F7E9                       imul	cx
19148                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19149 48B1           D1E8                       shr	ax,*1
19150                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19151 48B3           0246         04            add	al,4[bp]
19152 48B6           80D4                   00  adc	ah,*0
19153                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19154 48B9           8946         FE            mov	-2[bp],ax
19155                                           !BCC_EOS
19156                                           ! 2222  for(i=0;i<cheight;i++)
19157                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19158 48BC           30C0                       xor	al,al
19159 48BE           8846         FD            mov	-3[bp],al
19160                                           !BCC_EOS
19161                                           !BCC_EOS
19162                                           ! 2223   {
19163 48C1           EB           75            jmp .C3
19164                       000048C3            .C4:
19165                                           ! 2224    if (i & 1)
19166                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19167 48C3           8A46         FD            mov	al,-3[bp]
19168 48C6           24                     01  and	al,*1
19169 48C8           84C0                       test	al,al
19170 48CA           74           38            je  	.C5
19171                       000048CC            .C6:
19172                                           ! 2225      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19173                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19174 48CC           8A46         08            mov	al,8[bp]
19175 48CF           30E4                       xor	ah,ah
19176 48D1           50                         push	ax
19177                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19178 48D2           8A46         0E            mov	al,$E[bp]
19179 48D5           30E4                       xor	ah,ah
19180 48D7           50                         push	ax
19181                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19182 48D8           8A46         FD            mov	al,-3[bp]
19183 48DB           30E4                       xor	ah,ah
19184 48DD           D1E8                       shr	ax,*1
19185                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19186 48DF           89C3                       mov	bx,ax
19187 48E1           8A46         0A            mov	al,$A[bp]
19188 48E4           30E4                       xor	ah,ah
19189 48E6           93                         xchg	ax,bx
19190 48E7           89D9                       mov	cx,bx
19191 48E9           F7E9                       imul	cx
19192 48EB           50                         push	ax
19193                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19194                                           ! Debug: expression subtree swapping
19195 48EC           8B46         FE            mov	ax,-2[bp]
19196                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19197 48EF           05                   2000  add	ax,#$2000
19198 48F2           0346         F6            add	ax,-$A[bp]
19199 48F5           44                         inc	sp
19200 48F6           44                         inc	sp
19201                                           ! Debug: list unsigned int = ax+0 (used reg = )
19202 48F7           50                         push	ax
19203                                           ! Debug: list unsigned int = const $B800 (used reg = )
19204 48F8           B8                   B800  mov	ax,#$B800
19205 48FB           50                         push	ax
19206                                           ! Debug: func () void = memsetb+0 (used reg = )
19207 48FC           E8         31E9            call	_memsetb
19208 48FF           83C4                   08  add	sp,*8
19209                                           !BCC_EOS
19210                                           ! 2226    else
19211                                           ! 2227      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19212 4902           EB           2D            jmp .C7
19213                       00004904            .C5:
19214                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19215 4904           8A46         08            mov	al,8[bp]
19216 4907           30E4                       xor	ah,ah
19217 4909           50                         push	ax
19218                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19219 490A           8A46         0E            mov	al,$E[bp]
19220 490D           30E4                       xor	ah,ah
19221 490F           50                         push	ax
19222                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19223 4910           8A46         FD            mov	al,-3[bp]
19224 4913           30E4                       xor	ah,ah
19225 4915           D1E8                       shr	ax,*1
19226                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19227 4917           89C3                       mov	bx,ax
19228 4919           8A46         0A            mov	al,$A[bp]
19229 491C           30E4                       xor	ah,ah
19230 491E           93                         xchg	ax,bx
19231 491F           89D9                       mov	cx,bx
19232 4921           F7E9                       imul	cx
19233                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19234                                           ! Debug: expression subtree swapping
19235 4923           0346         FE            add	ax,-2[bp]
19236                                           ! Debug: list unsigned int = ax+0 (used reg = )
19237 4926           50                         push	ax
19238                                           ! Debug: list unsigned int = const $B800 (used reg = )
19239 4927           B8                   B800  mov	ax,#$B800
19240 492A           50                         push	ax
19241                                           ! Debug: func () void = memsetb+0 (used reg = )
19242 492B           E8         31BA            call	_memsetb
19243 492E           83C4                   08  add	sp,*8
19244                                           !BCC_EOS
19245                                           ! 2228   }
19246                       00004931            .C7:
19247                                           ! 2229 }
19248                       00004931            .C2:
19249                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19250 4931           8A46         FD            mov	al,-3[bp]
19251 4934           40                         inc	ax
19252 4935           8846         FD            mov	-3[bp],al
19253                       00004938            .C3:
19254                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19255 4938           8A46         FD            mov	al,-3[bp]
19256 493B           3A46         0C            cmp	al,$C[bp]
19257 493E           72           83            jb 	.C4
19258                       00004940            .C8:
19259                       00004940            .C1:
19260 4940           89EC                       mov	sp,bp
19261 4942           5D                         pop	bp
19262 4943           C3                         ret
19263                                           ! 2230 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19264                                           ! Register BX used in function vgamem_fill_cga
19265                                           ! 2231 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19266                       00004944            _biosfn_scroll:
19267                                           !BCC_EOS
19268                                           !BCC_EOS
19269                                           !BCC_EOS
19270                                           !BCC_EOS
19271                                           !BCC_EOS
19272                                           !BCC_EOS
19273                                           !BCC_EOS
19274                                           !BCC_EOS
19275                                           ! 2232 {
19276                                           ! 2233  Bit8u mode,line,cheight,bpp,cols;
19277                                           !BCC_EOS
19278                                           ! 2234  Bit16u nbcols,nbrows,i;
19279                                           !BCC_EOS
19280                                           ! 2235  Bit16u address;
19281                                           !BCC_EOS
19282                                           ! 2236  if(rul>rlr)return;
19283 4944           55                         push	bp
19284 4945           89E5                       mov	bp,sp
19285 4947           83C4                   F2  add	sp,*-$E
19286                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19287 494A           8A46         08            mov	al,8[bp]
19288 494D           3A46         0C            cmp	al,$C[bp]
19289 4950           76           04            jbe 	.C9
19290                       00004952            .CA:
19291 4952           89EC                       mov	sp,bp
19292 4954           5D                         pop	bp
19293 4955           C3                         ret
19294                                           !BCC_EOS
19295                                           ! 2237  if(cul>clr)return;
19296                       00004956            .C9:
19297                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19298 4956           8A46         0A            mov	al,$A[bp]
19299 4959           3A46         0E            cmp	al,$E[bp]
19300 495C           76           04            jbe 	.CB
19301                       0000495E            .CC:
19302 495E           89EC                       mov	sp,bp
19303 4960           5D                         pop	bp
19304 4961           C3                         ret
19305                                           !BCC_EOS
19306                                           ! 2238  mode=read_byte(0x40,0x49);
19307                       00004962            .CB:
19308                                           ! Debug: list int = const $49 (used reg = )
19309 4962           B8                   0049  mov	ax,*$49
19310 4965           50                         push	ax
19311                                           ! Debug: list int = const $40 (used reg = )
19312 4966           B8                   0040  mov	ax,*$40
19313 4969           50                         push	ax
19314                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19315 496A           E8         3225            call	_read_byte
19316 496D           83C4                   04  add	sp,*4
19317                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19318 4970           8846         FF            mov	-1[bp],al
19319                                           !BCC_EOS
19320                                           ! 2239  line=find_vga_entry(mode);
19321                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19322 4973           8A46         FF            mov	al,-1[bp]
19323 4976           30E4                       xor	ah,ah
19324 4978           50                         push	ax
19325                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19326 4979           E8         312A            call	_find_vga_entry
19327 497C           44                         inc	sp
19328 497D           44                         inc	sp
19329                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19330 497E           8846         FE            mov	-2[bp],al
19331                                           !BCC_EOS
19332                                           ! 2240  if(line==0xFF)return;
19333                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19334 4981           8A46         FE            mov	al,-2[bp]
19335 4984           3C                     FF  cmp	al,#$FF
19336 4986           75           04            jne 	.CD
19337                       00004988            .CE:
19338 4988           89EC                       mov	sp,bp
19339 498A           5D                         pop	bp
19340 498B           C3                         ret
19341                                           !BCC_EOS
19342                                           ! 2241  nbrows=read_byte(0x40,0x84)+1;
19343                       0000498C            .CD:
19344                                           ! Debug: list int = const $84 (used reg = )
19345 498C           B8                   0084  mov	ax,#$84
19346 498F           50                         push	ax
19347                                           ! Debug: list int = const $40 (used reg = )
19348 4990           B8                   0040  mov	ax,*$40
19349 4993           50                         push	ax
19350                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19351 4994           E8         31FB            call	_read_byte
19352 4997           83C4                   04  add	sp,*4
19353                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19354 499A           30E4                       xor	ah,ah
19355                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19356 499C           40                         inc	ax
19357 499D           8946         F6            mov	-$A[bp],ax
19358                                           !BCC_EOS
19359                                           ! 2242  nbcols=read_word(0x40,0x4A);
19360                                           ! Debug: list int = const $4A (used reg = )
19361 49A0           B8                   004A  mov	ax,*$4A
19362 49A3           50                         push	ax
19363                                           ! Debug: list int = const $40 (used reg = )
19364 49A4           B8                   0040  mov	ax,*$40
19365 49A7           50                         push	ax
19366                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19367 49A8           E8         31FA            call	_read_word
19368 49AB           83C4                   04  add	sp,*4
19369                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19370 49AE           8946         F8            mov	-8[bp],ax
19371                                           !BCC_EOS
19372                                           ! 2243  if(page==0xFF)
19373                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19374 49B1           8A46         10            mov	al,$10[bp]
19375 49B4           3C                     FF  cmp	al,#$FF
19376 49B6           75           11            jne 	.CF
19377                       000049B8            .D0:
19378                                           ! 2244   page=read_byte(0x40,0x62);
19379                                           ! Debug: list int = const $62 (used reg = )
19380 49B8           B8                   0062  mov	ax,*$62
19381 49BB           50                         push	ax
19382                                           ! Debug: list int = const $40 (used reg = )
19383 49BC           B8                   0040  mov	ax,*$40
19384 49BF           50                         push	ax
19385                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19386 49C0           E8         31CF            call	_read_byte
19387 49C3           83C4                   04  add	sp,*4
19388                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19389 49C6           8846         10            mov	$10[bp],al
19390                                           !BCC_EOS
19391                                           ! 2245  if(rlr>=nbrows)rlr=nbrows-1;
19392                       000049C9            .CF:
19393                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19394 49C9           8A46         0C            mov	al,$C[bp]
19395 49CC           30E4                       xor	ah,ah
19396 49CE           3B46         F6            cmp	ax,-$A[bp]
19397 49D1           72           07            jb  	.D1
19398                       000049D3            .D2:
19399                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19400 49D3           8B46         F6            mov	ax,-$A[bp]
19401                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19402 49D6           48                         dec	ax
19403 49D7           8846         0C            mov	$C[bp],al
19404                                           !BCC_EOS
19405                                           ! 2246  if(clr>=nbcols)clr=nbcols-1;
19406                       000049DA            .D1:
19407                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19408 49DA           8A46         0E            mov	al,$E[bp]
19409 49DD           30E4                       xor	ah,ah
19410 49DF           3B46         F8            cmp	ax,-8[bp]
19411 49E2           72           07            jb  	.D3
19412                       000049E4            .D4:
19413                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19414 49E4           8B46         F8            mov	ax,-8[bp]
19415                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19416 49E7           48                         dec	ax
19417 49E8           8846         0E            mov	$E[bp],al
19418                                           !BCC_EOS
19419                                           ! 2247  if(nblines>nbrows)nblines=0;
19420                       000049EB            .D3:
19421                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19422 49EB           8A46         04            mov	al,4[bp]
19423 49EE           30E4                       xor	ah,ah
19424 49F0           3B46         F6            cmp	ax,-$A[bp]
19425 49F3           76           05            jbe 	.D5
19426                       000049F5            .D6:
19427                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19428 49F5           30C0                       xor	al,al
19429 49F7           8846         04            mov	4[bp],al
19430                                           !BCC_EOS
19431                                           ! 2248  cols=clr-cul+1;
19432                       000049FA            .D5:
19433                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19434 49FA           8A46         0E            mov	al,$E[bp]
19435 49FD           30E4                       xor	ah,ah
19436 49FF           2A46         0A            sub	al,$A[bp]
19437 4A02           80DC                   00  sbb	ah,*0
19438                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19439                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19440 4A05           40                         inc	ax
19441 4A06           8846         FB            mov	-5[bp],al
19442                                           !BCC_EOS
19443                                           ! 2249  if(vga_modes[line].class==0x00)
19444                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19445 4A09           8A46         FE            mov	al,-2[bp]
19446 4A0C           30E4                       xor	ah,ah
19447 4A0E           B1                     03  mov	cl,*3
19448 4A10           D3E0                       shl	ax,cl
19449 4A12           89C3                       mov	bx,ax
19450 4A14           81C3                 01FF  add	bx,#_vga_modes
19451                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19452 4A18           8A47         01            mov	al,1[bx]
19453 4A1B           84C0                       test	al,al
19454 4A1D         0F85         0250            bne 	.D7
19455                       00004A21            .D8:
19456                                           ! 2250   {
19457                                           ! 2251    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19458                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19459 4A21           8B46         F8            mov	ax,-8[bp]
19460 4A24           8B4E         F6            mov	cx,-$A[bp]
19461 4A27           F7E9                       imul	cx
19462                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19463 4A29           D1E0                       shl	ax,*1
19464                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19465 4A2B           0C                     FF  or	al,#$FF
19466                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19467                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19468 4A2D           89C3                       mov	bx,ax
19469 4A2F           8A46         10            mov	al,$10[bp]
19470 4A32           30E4                       xor	ah,ah
19471 4A34           93                         xchg	ax,bx
19472 4A35           40                         inc	ax
19473 4A36           89D9                       mov	cx,bx
19474 4A38           F7E9                       imul	cx
19475                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19476 4A3A           8946         F2            mov	-$E[bp],ax
19477                                           !BCC_EOS
19478                                           ! 2252    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19479                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19480 4A3D           8A46         04            mov	al,4[bp]
19481 4A40           84C0                       test	al,al
19482 4A42           75           67            jne 	.D9
19483                       00004A44            .DE:
19484                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19485 4A44           8A46         08            mov	al,8[bp]
19486 4A47           84C0                       test	al,al
19487 4A49           75           60            jne 	.D9
19488                       00004A4B            .DD:
19489                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19490 4A4B           8A46         0A            mov	al,$A[bp]
19491 4A4E           84C0                       test	al,al
19492 4A50           75           59            jne 	.D9
19493                       00004A52            .DC:
19494                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19495 4A52           8B46         F6            mov	ax,-$A[bp]
19496                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19497                                           ! Debug: expression subtree swapping
19498 4A55           48                         dec	ax
19499 4A56           50                         push	ax
19500 4A57           8A46         0C            mov	al,$C[bp]
19501 4A5A           30E4                       xor	ah,ah
19502 4A5C           3B46         F0            cmp	ax,-$10[bp]
19503 4A5F           8D66         F2            lea	sp,-$E[bp]
19504 4A62           75           47            jne 	.D9
19505                       00004A64            .DB:
19506                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19507 4A64           8B46         F8            mov	ax,-8[bp]
19508                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19509                                           ! Debug: expression subtree swapping
19510 4A67           48                         dec	ax
19511 4A68           50                         push	ax
19512 4A69           8A46         0E            mov	al,$E[bp]
19513 4A6C           30E4                       xor	ah,ah
19514 4A6E           3B46         F0            cmp	ax,-$10[bp]
19515 4A71           8D66         F2            lea	sp,-$E[bp]
19516 4A74           75           35            jne 	.D9
19517                       00004A76            .DA:
19518                                           ! 2253     {
19519                                           ! 2254      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19520                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19521 4A76           8B46         F6            mov	ax,-$A[bp]
19522 4A79           8B4E         F8            mov	cx,-8[bp]
19523 4A7C           F7E9                       imul	cx
19524                                           ! Debug: list unsigned int = ax+0 (used reg = )
19525 4A7E           50                         push	ax
19526                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19527 4A7F           8A46         06            mov	al,6[bp]
19528 4A82           30E4                       xor	ah,ah
19529                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19530 4A84           B9                   0100  mov	cx,#$100
19531 4A87           F7E9                       imul	cx
19532                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19533                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19534 4A89           05                   0020  add	ax,*$20
19535 4A8C           50                         push	ax
19536                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19537 4A8D           FF76         F2            push	-$E[bp]
19538                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19539 4A90           8A46         FE            mov	al,-2[bp]
19540 4A93           30E4                       xor	ah,ah
19541 4A95           B1                     03  mov	cl,*3
19542 4A97           D3E0                       shl	ax,cl
19543 4A99           89C3                       mov	bx,ax
19544 4A9B           81C3                 01FF  add	bx,#_vga_modes
19545                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19546 4A9F           FF77         04            push	4[bx]
19547                                           ! Debug: func () void = memsetw+0 (used reg = )
19548 4AA2           E8         3068            call	_memsetw
19549 4AA5           83C4                   08  add	sp,*8
19550                                           !BCC_EOS
19551                                           ! 2255     }
19552                                           ! 2256    else
19553                                           ! 2257     {
19554 4AA8           E9         01C3            br 	.DF
19555                       00004AAB            .D9:
19556                                           ! 2258      if(dir==1)
19557                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19558 4AAB           8A46         12            mov	al,$12[bp]
19559 4AAE           3C                     01  cmp	al,*1
19560 4AB0         0F85         00DC            bne 	.E0
19561                       00004AB4            .E1:
19562                                           ! 2259       {for(i=rul;i<=rlr;i++)
19563                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19564 4AB4           8A46         08            mov	al,8[bp]
19565 4AB7           30E4                       xor	ah,ah
19566 4AB9           8946         F4            mov	-$C[bp],ax
19567                                           !BCC_EOS
19568                                           !BCC_EOS
19569                                           ! 2260         {
19570 4ABC           E9         00C2            br 	.E4
19571                       00004ABF            .E5:
19572                                           ! 2261          if((i+nblines>rlr)||(nblines==0))
19573                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19574 4ABF           8B46         F4            mov	ax,-$C[bp]
19575 4AC2           0246         04            add	al,4[bp]
19576 4AC5           80D4                   00  adc	ah,*0
19577                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19578 4AC8           50                         push	ax
19579 4AC9           8A46         0C            mov	al,$C[bp]
19580 4ACC           30E4                       xor	ah,ah
19581 4ACE           3B46         F0            cmp	ax,-$10[bp]
19582 4AD1           8D66         F2            lea	sp,-$E[bp]
19583 4AD4           72           07            jb  	.E7
19584                       00004AD6            .E8:
19585                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19586 4AD6           8A46         04            mov	al,4[bp]
19587 4AD9           84C0                       test	al,al
19588 4ADB           75           42            jne 	.E6
19589                       00004ADD            .E7:
19590                                           ! 2262           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19591                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19592 4ADD           8A46         FB            mov	al,-5[bp]
19593 4AE0           30E4                       xor	ah,ah
19594 4AE2           50                         push	ax
19595                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19596 4AE3           8A46         06            mov	al,6[bp]
19597 4AE6           30E4                       xor	ah,ah
19598                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19599 4AE8           B9                   0100  mov	cx,#$100
19600 4AEB           F7E9                       imul	cx
19601                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19602                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19603 4AED           05                   0020  add	ax,*$20
19604 4AF0           50                         push	ax
19605                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19606 4AF1           8B46         F4            mov	ax,-$C[bp]
19607 4AF4           8B4E         F8            mov	cx,-8[bp]
19608 4AF7           F7E9                       imul	cx
19609                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19610 4AF9           0246         0A            add	al,$A[bp]
19611 4AFC           80D4                   00  adc	ah,*0
19612                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19613 4AFF           D1E0                       shl	ax,*1
19614                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19615                                           ! Debug: expression subtree swapping
19616 4B01           0346         F2            add	ax,-$E[bp]
19617                                           ! Debug: list unsigned int = ax+0 (used reg = )
19618 4B04           50                         push	ax
19619                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19620 4B05           8A46         FE            mov	al,-2[bp]
19621 4B08           30E4                       xor	ah,ah
19622 4B0A           B1                     03  mov	cl,*3
19623 4B0C           D3E0                       shl	ax,cl
19624 4B0E           89C3                       mov	bx,ax
19625 4B10           81C3                 01FF  add	bx,#_vga_modes
19626                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19627 4B14           FF77         04            push	4[bx]
19628                                           ! Debug: func () void = memsetw+0 (used reg = )
19629 4B17           E8         2FF3            call	_memsetw
19630 4B1A           83C4                   08  add	sp,*8
19631                                           !BCC_EOS
19632                                           ! 2263          else
19633                                           ! 2264           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19634 4B1D           EB           5B            jmp .E9
19635                       00004B1F            .E6:
19636                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19637 4B1F           8A46         FB            mov	al,-5[bp]
19638 4B22           30E4                       xor	ah,ah
19639 4B24           50                         push	ax
19640                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19641 4B25           8B46         F4            mov	ax,-$C[bp]
19642 4B28           0246         04            add	al,4[bp]
19643 4B2B           80D4                   00  adc	ah,*0
19644                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19645 4B2E           8B4E         F8            mov	cx,-8[bp]
19646 4B31           F7E9                       imul	cx
19647                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19648 4B33           0246         0A            add	al,$A[bp]
19649 4B36           80D4                   00  adc	ah,*0
19650                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19651 4B39           D1E0                       shl	ax,*1
19652                                           ! Debug: list unsigned int = ax+0 (used reg = )
19653 4B3B           50                         push	ax
19654                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19655 4B3C           8A46         FE            mov	al,-2[bp]
19656 4B3F           30E4                       xor	ah,ah
19657 4B41           B1                     03  mov	cl,*3
19658 4B43           D3E0                       shl	ax,cl
19659 4B45           89C3                       mov	bx,ax
19660 4B47           81C3                 01FF  add	bx,#_vga_modes
19661                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19662 4B4B           FF77         04            push	4[bx]
19663                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19664 4B4E           8B46         F4            mov	ax,-$C[bp]
19665 4B51           8B4E         F8            mov	cx,-8[bp]
19666 4B54           F7E9                       imul	cx
19667                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19668 4B56           0246         0A            add	al,$A[bp]
19669 4B59           80D4                   00  adc	ah,*0
19670                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19671 4B5C           D1E0                       shl	ax,*1
19672                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19673                                           ! Debug: expression subtree swapping
19674 4B5E           0346         F2            add	ax,-$E[bp]
19675                                           ! Debug: list unsigned int = ax+0 (used reg = )
19676 4B61           50                         push	ax
19677                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19678 4B62           8A46         FE            mov	al,-2[bp]
19679 4B65           30E4                       xor	ah,ah
19680 4B67           B1                     03  mov	cl,*3
19681 4B69           D3E0                       shl	ax,cl
19682 4B6B           89C3                       mov	bx,ax
19683 4B6D           81C3                 01FF  add	bx,#_vga_modes
19684                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19685 4B71           FF77         04            push	4[bx]
19686                                           ! Debug: func () void = memcpyw+0 (used reg = )
19687 4B74           E8         2FEB            call	_memcpyw
19688 4B77           83C4                   0A  add	sp,*$A
19689                                           !BCC_EOS
19690                                           ! 2265         }
19691                       00004B7A            .E9:
19692                                           ! 2266       }
19693                       00004B7A            .E3:
19694                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19695 4B7A           8B46         F4            mov	ax,-$C[bp]
19696 4B7D           40                         inc	ax
19697 4B7E           8946         F4            mov	-$C[bp],ax
19698                       00004B81            .E4:
19699                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19700 4B81           8A46         0C            mov	al,$C[bp]
19701 4B84           30E4                       xor	ah,ah
19702 4B86           3B46         F4            cmp	ax,-$C[bp]
19703 4B89         0F83         FF32            bhis	.E5
19704                       00004B8D            .EA:
19705                       00004B8D            .E2:
19706                                           ! 2267      else
19707                                           ! 2268       {for(i=rlr;i>=rul;i--)
19708 4B8D           E9         00DE            br 	.EB
19709                       00004B90            .E0:
19710                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19711 4B90           8A46         0C            mov	al,$C[bp]
19712 4B93           30E4                       xor	ah,ah
19713 4B95           8946         F4            mov	-$C[bp],ax
19714                                           !BCC_EOS
19715                                           !BCC_EOS
19716                                           ! 2269  
19717                                           ! 2269        {
19718 4B98           E9         00C7            br 	.EE
19719                       00004B9B            .EF:
19720                                           ! 2270          if((i<rul+nblines)||(nblines==0))
19721                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19722 4B9B           8A46         08            mov	al,8[bp]
19723 4B9E           30E4                       xor	ah,ah
19724 4BA0           0246         04            add	al,4[bp]
19725 4BA3           80D4                   00  adc	ah,*0
19726                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19727 4BA6           3B46         F4            cmp	ax,-$C[bp]
19728 4BA9           77           07            ja  	.F1
19729                       00004BAB            .F2:
19730                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19731 4BAB           8A46         04            mov	al,4[bp]
19732 4BAE           84C0                       test	al,al
19733 4BB0           75           42            jne 	.F0
19734                       00004BB2            .F1:
19735                                           ! 2271           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19736                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19737 4BB2           8A46         FB            mov	al,-5[bp]
19738 4BB5           30E4                       xor	ah,ah
19739 4BB7           50                         push	ax
19740                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19741 4BB8           8A46         06            mov	al,6[bp]
19742 4BBB           30E4                       xor	ah,ah
19743                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19744 4BBD           B9                   0100  mov	cx,#$100
19745 4BC0           F7E9                       imul	cx
19746                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19747                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19748 4BC2           05                   0020  add	ax,*$20
19749 4BC5           50                         push	ax
19750                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19751 4BC6           8B46         F4            mov	ax,-$C[bp]
19752 4BC9           8B4E         F8            mov	cx,-8[bp]
19753 4BCC           F7E9                       imul	cx
19754                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19755 4BCE           0246         0A            add	al,$A[bp]
19756 4BD1           80D4                   00  adc	ah,*0
19757                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19758 4BD4           D1E0                       shl	ax,*1
19759                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19760                                           ! Debug: expression subtree swapping
19761 4BD6           0346         F2            add	ax,-$E[bp]
19762                                           ! Debug: list unsigned int = ax+0 (used reg = )
19763 4BD9           50                         push	ax
19764                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19765 4BDA           8A46         FE            mov	al,-2[bp]
19766 4BDD           30E4                       xor	ah,ah
19767 4BDF           B1                     03  mov	cl,*3
19768 4BE1           D3E0                       shl	ax,cl
19769 4BE3           89C3                       mov	bx,ax
19770 4BE5           81C3                 01FF  add	bx,#_vga_modes
19771                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19772 4BE9           FF77         04            push	4[bx]
19773                                           ! Debug: func () void = memsetw+0 (used reg = )
19774 4BEC           E8         2F1E            call	_memsetw
19775 4BEF           83C4                   08  add	sp,*8
19776                                           !BCC_EOS
19777                                           ! 2272          else
19778                                           ! 2273           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19779 4BF2           EB           5B            jmp .F3
19780                       00004BF4            .F0:
19781                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19782 4BF4           8A46         FB            mov	al,-5[bp]
19783 4BF7           30E4                       xor	ah,ah
19784 4BF9           50                         push	ax
19785                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19786 4BFA           8B46         F4            mov	ax,-$C[bp]
19787 4BFD           2A46         04            sub	al,4[bp]
19788 4C00           80DC                   00  sbb	ah,*0
19789                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19790 4C03           8B4E         F8            mov	cx,-8[bp]
19791 4C06           F7E9                       imul	cx
19792                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19793 4C08           0246         0A            add	al,$A[bp]
19794 4C0B           80D4                   00  adc	ah,*0
19795                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19796 4C0E           D1E0                       shl	ax,*1
19797                                           ! Debug: list unsigned int = ax+0 (used reg = )
19798 4C10           50                         push	ax
19799                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19800 4C11           8A46         FE            mov	al,-2[bp]
19801 4C14           30E4                       xor	ah,ah
19802 4C16           B1                     03  mov	cl,*3
19803 4C18           D3E0                       shl	ax,cl
19804 4C1A           89C3                       mov	bx,ax
19805 4C1C           81C3                 01FF  add	bx,#_vga_modes
19806                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19807 4C20           FF77         04            push	4[bx]
19808                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19809 4C23           8B46         F4            mov	ax,-$C[bp]
19810 4C26           8B4E         F8            mov	cx,-8[bp]
19811 4C29           F7E9                       imul	cx
19812                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19813 4C2B           0246         0A            add	al,$A[bp]
19814 4C2E           80D4                   00  adc	ah,*0
19815                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19816 4C31           D1E0                       shl	ax,*1
19817                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19818                                           ! Debug: expression subtree swapping
19819 4C33           0346         F2            add	ax,-$E[bp]
19820                                           ! Debug: list unsigned int = ax+0 (used reg = )
19821 4C36           50                         push	ax
19822                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19823 4C37           8A46         FE            mov	al,-2[bp]
19824 4C3A           30E4                       xor	ah,ah
19825 4C3C           B1                     03  mov	cl,*3
19826 4C3E           D3E0                       shl	ax,cl
19827 4C40           89C3                       mov	bx,ax
19828 4C42           81C3                 01FF  add	bx,#_vga_modes
19829                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19830 4C46           FF77         04            push	4[bx]
19831                                           ! Debug: func () void = memcpyw+0 (used reg = )
19832 4C49           E8         2F16            call	_memcpyw
19833 4C4C           83C4                   0A  add	sp,*$A
19834                                           !BCC_EOS
19835                                           ! 2274          if (i>rlr) break;
19836                       00004C4F            .F3:
19837                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19838 4C4F           8A46         0C            mov	al,$C[bp]
19839 4C52           30E4                       xor	ah,ah
19840 4C54           3B46         F4            cmp	ax,-$C[bp]
19841 4C57           73           02            jae 	.F4
19842                       00004C59            .F5:
19843 4C59           EB           13            jmp .EC
19844                                           !BCC_EOS
19845                                           ! 2275         }
19846                       00004C5B            .F4:
19847                                           ! 2276       }
19848                       00004C5B            .ED:
19849                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19850 4C5B           8B46         F4            mov	ax,-$C[bp]
19851 4C5E           48                         dec	ax
19852 4C5F           8946         F4            mov	-$C[bp],ax
19853                       00004C62            .EE:
19854                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19855 4C62           8A46         08            mov	al,8[bp]
19856 4C65           30E4                       xor	ah,ah
19857 4C67           3B46         F4            cmp	ax,-$C[bp]
19858 4C6A         0F86         FF2D            blos	.EF
19859                       00004C6E            .F6:
19860                       00004C6E            .EC:
19861                                           ! 2277     }
19862                       00004C6E            .EB:
19863                                           ! 2278   }
19864                       00004C6E            .DF:
19865                                           ! 2279  else
19866                                           ! 2280   {
19867 4C6E           E9         03D5            br 	.F7
19868                       00004C71            .D7:
19869                                           ! 2281    cheight=video_param_table[line_to_vpti[line]].cheight;
19870                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19871 4C71           8A46         FE            mov	al,-2[bp]
19872 4C74           30E4                       xor	ah,ah
19873 4C76           89C3                       mov	bx,ax
19874                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19875 4C78           8A87       027F            mov	al,_line_to_vpti[bx]
19876 4C7C           30E4                       xor	ah,ah
19877 4C7E           B1                     06  mov	cl,*6
19878 4C80           D3E0                       shl	ax,cl
19879 4C82           89C3                       mov	bx,ax
19880 4C84           81C3                 0293  add	bx,#_video_param_table
19881                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19882 4C88           8A47         02            mov	al,2[bx]
19883 4C8B           8846         FD            mov	-3[bp],al
19884                                           !BCC_EOS
19885                                           ! 2282    switch(vga_modes[line].memmodel)
19886                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19887 4C8E           8A46         FE            mov	al,-2[bp]
19888 4C91           30E4                       xor	ah,ah
19889 4C93           B1                     03  mov	cl,*3
19890 4C95           D3E0                       shl	ax,cl
19891 4C97           89C3                       mov	bx,ax
19892 4C99           81C3                 01FF  add	bx,#_vga_modes
19893 4C9D           8A47         02            mov	al,2[bx]
19894                                           ! 2283     {
19895 4CA0           E9         0391            br 	.FA
19896                                           ! 2284      case 0x04:
19897                                           ! 2285      case 0x03:
19898                       00004CA3            .FB:
19899                                           ! 2286        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19900                       00004CA3            .FC:
19901                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19902 4CA3           8A46         04            mov	al,4[bp]
19903 4CA6           84C0                       test	al,al
19904 4CA8         0F85         0089            bne 	.FD
19905                       00004CAC            .102:
19906                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19907 4CAC           8A46         08            mov	al,8[bp]
19908 4CAF           84C0                       test	al,al
19909 4CB1         0F85         0080            bne 	.FD
19910                       00004CB5            .101:
19911                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19912 4CB5           8A46         0A            mov	al,$A[bp]
19913 4CB8           84C0                       test	al,al
19914 4CBA           75           79            jne 	.FD
19915                       00004CBC            .100:
19916                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19917 4CBC           8B46         F6            mov	ax,-$A[bp]
19918                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19919                                           ! Debug: expression subtree swapping
19920 4CBF           48                         dec	ax
19921 4CC0           50                         push	ax
19922 4CC1           8A46         0C            mov	al,$C[bp]
19923 4CC4           30E4                       xor	ah,ah
19924 4CC6           3B46         F0            cmp	ax,0+..FFFC[bp]
19925 4CC9           8D66         F2            lea	sp,2+..FFFC[bp]
19926 4CCC           75           67            jne 	.FD
19927                       00004CCE            .FF:
19928                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19929 4CCE           8B46         F8            mov	ax,-8[bp]
19930                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19931                                           ! Debug: expression subtree swapping
19932 4CD1           48                         dec	ax
19933 4CD2           50                         push	ax
19934 4CD3           8A46         0E            mov	al,$E[bp]
19935 4CD6           30E4                       xor	ah,ah
19936 4CD8           3B46         F0            cmp	ax,0+..FFFC[bp]
19937 4CDB           8D66         F2            lea	sp,2+..FFFC[bp]
19938 4CDE           75           55            jne 	.FD
19939                       00004CE0            .FE:
19940                                           ! 2287         {
19941                                           ! 2288          outw(0x3ce, 0x0205);
19942                                           ! Debug: list int = const $205 (used reg = )
19943 4CE0           B8                   0205  mov	ax,#$205
19944 4CE3           50                         push	ax
19945                                           ! Debug: list int = const $3CE (used reg = )
19946 4CE4           B8                   03CE  mov	ax,#$3CE
19947 4CE7           50                         push	ax
19948                                           ! Debug: func () void = outw+0 (used reg = )
19949 4CE8           E8         2F23            call	_outw
19950 4CEB           83C4                   04  add	sp,*4
19951                                           !BCC_EOS
19952                                           ! 2289          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19953                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19954 4CEE           8B46         F6            mov	ax,-$A[bp]
19955 4CF1           8B4E         F8            mov	cx,-8[bp]
19956 4CF4           F7E9                       imul	cx
19957                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19958 4CF6           89C3                       mov	bx,ax
19959 4CF8           8A46         FD            mov	al,-3[bp]
19960 4CFB           30E4                       xor	ah,ah
19961 4CFD           93                         xchg	ax,bx
19962 4CFE           89D9                       mov	cx,bx
19963 4D00           F7E9                       imul	cx
19964                                           ! Debug: list unsigned int = ax+0 (used reg = )
19965 4D02           50                         push	ax
19966                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19967 4D03           8A46         06            mov	al,6[bp]
19968 4D06           30E4                       xor	ah,ah
19969 4D08           50                         push	ax
19970                                           ! Debug: list int = const 0 (used reg = )
19971 4D09           31C0                       xor	ax,ax
19972 4D0B           50                         push	ax
19973                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19974 4D0C           8A46         FE            mov	al,-2[bp]
19975 4D0F           30E4                       xor	ah,ah
19976 4D11           B1                     03  mov	cl,*3
19977 4D13           D3E0                       shl	ax,cl
19978 4D15           89C3                       mov	bx,ax
19979 4D17           81C3                 01FF  add	bx,#_vga_modes
19980                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19981 4D1B           FF77         04            push	4[bx]
19982                                           ! Debug: func () void = memsetb+0 (used reg = )
19983 4D1E           E8         2DC7            call	_memsetb
19984 4D21           83C4                   08  add	sp,*8
19985                                           !BCC_EOS
19986                                           ! 2290          outw(0x3ce, 0x0005);
19987                                           ! Debug: list int = const 5 (used reg = )
19988 4D24           B8                   0005  mov	ax,*5
19989 4D27           50                         push	ax
19990                                           ! Debug: list int = const $3CE (used reg = )
19991 4D28           B8                   03CE  mov	ax,#$3CE
19992 4D2B           50                         push	ax
19993                                           ! Debug: func () void = outw+0 (used reg = )
19994 4D2C           E8         2EDF            call	_outw
19995 4D2F           83C4                   04  add	sp,*4
19996                                           !BCC_EOS
19997                                           ! 2291         }
19998                                           ! 2292        else
19999                                           ! 2293         {
20000 4D32           E9         0121            br 	.103
20001                       00004D35            .FD:
20002                                           ! 2294          if(dir==1)
20003                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20004 4D35           8A46         12            mov	al,$12[bp]
20005 4D38           3C                     01  cmp	al,*1
20006 4D3A         0F85         008A            bne 	.104
20007                       00004D3E            .105:
20008                                           ! 2295           {for(i=rul;i<=rlr;i++)
20009                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20010 4D3E           8A46         08            mov	al,8[bp]
20011 4D41           30E4                       xor	ah,ah
20012 4D43           8946         F4            mov	-$C[bp],ax
20013                                           !BCC_EOS
20014                                           !BCC_EOS
20015                                           ! 2296             {
20016 4D46           EB           73            jmp .108
20017                       00004D48            .109:
20018                                           ! 2297              if((i+nblines>rlr)||(nblines==0))
20019                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20020 4D48           8B46         F4            mov	ax,-$C[bp]
20021 4D4B           0246         04            add	al,4[bp]
20022 4D4E           80D4                   00  adc	ah,*0
20023                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20024 4D51           50                         push	ax
20025 4D52           8A46         0C            mov	al,$C[bp]
20026 4D55           30E4                       xor	ah,ah
20027 4D57           3B46         F0            cmp	ax,0+..FFFC[bp]
20028 4D5A           8D66         F2            lea	sp,2+..FFFC[bp]
20029 4D5D           72           07            jb  	.10B
20030                       00004D5F            .10C:
20031                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20032 4D5F           8A46         04            mov	al,4[bp]
20033 4D62           84C0                       test	al,al
20034 4D64           75           26            jne 	.10A
20035                       00004D66            .10B:
20036                                           ! 2298               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20037                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20038 4D66           8A46         06            mov	al,6[bp]
20039 4D69           30E4                       xor	ah,ah
20040 4D6B           50                         push	ax
20041                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20042 4D6C           8A46         FD            mov	al,-3[bp]
20043 4D6F           30E4                       xor	ah,ah
20044 4D71           50                         push	ax
20045                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20046 4D72           FF76         F8            push	-8[bp]
20047                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20048 4D75           8A46         FB            mov	al,-5[bp]
20049 4D78           30E4                       xor	ah,ah
20050 4D7A           50                         push	ax
20051                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20052 4D7B           FF76         F4            push	-$C[bp]
20053                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20054 4D7E           8A46         0A            mov	al,$A[bp]
20055 4D81           30E4                       xor	ah,ah
20056 4D83           50                         push	ax
20057                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20058 4D84           E8         F96B            call	_vgamem_fill_pl4
20059 4D87           83C4                   0C  add	sp,*$C
20060                                           !BCC_EOS
20061                                           ! 2299              else
20062                                           ! 2300               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20063 4D8A           EB           28            jmp .10D
20064                       00004D8C            .10A:
20065                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20066 4D8C           8A46         FD            mov	al,-3[bp]
20067 4D8F           30E4                       xor	ah,ah
20068 4D91           50                         push	ax
20069                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20070 4D92           FF76         F8            push	-8[bp]
20071                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20072 4D95           8A46         FB            mov	al,-5[bp]
20073 4D98           30E4                       xor	ah,ah
20074 4D9A           50                         push	ax
20075                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20076 4D9B           FF76         F4            push	-$C[bp]
20077                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20078 4D9E           8B46         F4            mov	ax,-$C[bp]
20079 4DA1           0246         04            add	al,4[bp]
20080 4DA4           80D4                   00  adc	ah,*0
20081                                           ! Debug: list unsigned int = ax+0 (used reg = )
20082 4DA7           50                         push	ax
20083                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20084 4DA8           8A46         0A            mov	al,$A[bp]
20085 4DAB           30E4                       xor	ah,ah
20086 4DAD           50                         push	ax
20087                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20088 4DAE           E8         F87F            call	_vgamem_copy_pl4
20089 4DB1           83C4                   0C  add	sp,*$C
20090                                           !BCC_EOS
20091                                           ! 2301             }
20092                       00004DB4            .10D:
20093                                           ! 2302           }
20094                       00004DB4            .107:
20095                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20096 4DB4           8B46         F4            mov	ax,-$C[bp]
20097 4DB7           40                         inc	ax
20098 4DB8           8946         F4            mov	-$C[bp],ax
20099                       00004DBB            .108:
20100                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20101 4DBB           8A46         0C            mov	al,$C[bp]
20102 4DBE           30E4                       xor	ah,ah
20103 4DC0           3B46         F4            cmp	ax,-$C[bp]
20104 4DC3           73           83            jae	.109
20105                       00004DC5            .10E:
20106                       00004DC5            .106:
20107                                           ! 2303          else
20108                                           ! 2304           {for(i=rlr;i>=rul;i--)
20109 4DC5           E9         008E            br 	.10F
20110                       00004DC8            .104:
20111                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20112 4DC8           8A46         0C            mov	al,$C[bp]
20113 4DCB           30E4                       xor	ah,ah
20114 4DCD           8946         F4            mov	-$C[bp],ax
20115                                           !BCC_EOS
20116                                           !BCC_EOS
20117                                           ! 2305             {
20118 4DD0           EB           78            jmp .112
20119                       00004DD2            .113:
20120                                           ! 2306              if((i<rul+nblines)||(nblines==0))
20121                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20122 4DD2           8A46         08            mov	al,8[bp]
20123 4DD5           30E4                       xor	ah,ah
20124 4DD7           0246         04            add	al,4[bp]
20125 4DDA           80D4                   00  adc	ah,*0
20126                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20127 4DDD           3B46         F4            cmp	ax,-$C[bp]
20128 4DE0           77           07            ja  	.115
20129                       00004DE2            .116:
20130                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20131 4DE2           8A46         04            mov	al,4[bp]
20132 4DE5           84C0                       test	al,al
20133 4DE7           75           26            jne 	.114
20134                       00004DE9            .115:
20135                                           ! 2307               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20136                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20137 4DE9           8A46         06            mov	al,6[bp]
20138 4DEC           30E4                       xor	ah,ah
20139 4DEE           50                         push	ax
20140                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20141 4DEF           8A46         FD            mov	al,-3[bp]
20142 4DF2           30E4                       xor	ah,ah
20143 4DF4           50                         push	ax
20144                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20145 4DF5           FF76         F8            push	-8[bp]
20146                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20147 4DF8           8A46         FB            mov	al,-5[bp]
20148 4DFB           30E4                       xor	ah,ah
20149 4DFD           50                         push	ax
20150                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20151 4DFE           FF76         F4            push	-$C[bp]
20152                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20153 4E01           8A46         0A            mov	al,$A[bp]
20154 4E04           30E4                       xor	ah,ah
20155 4E06           50                         push	ax
20156                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20157 4E07           E8         F8E8            call	_vgamem_fill_pl4
20158 4E0A           83C4                   0C  add	sp,*$C
20159                                           !BCC_EOS
20160                                           ! 2308              else
20161                                           ! 2309               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20162 4E0D           EB           28            jmp .117
20163                       00004E0F            .114:
20164                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20165 4E0F           8A46         FD            mov	al,-3[bp]
20166 4E12           30E4                       xor	ah,ah
20167 4E14           50                         push	ax
20168                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20169 4E15           FF76         F8            push	-8[bp]
20170                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20171 4E18           8A46         FB            mov	al,-5[bp]
20172 4E1B           30E4                       xor	ah,ah
20173 4E1D           50                         push	ax
20174                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20175 4E1E           8B46         F4            mov	ax,-$C[bp]
20176 4E21           2A46         04            sub	al,4[bp]
20177 4E24           80DC                   00  sbb	ah,*0
20178                                           ! Debug: list unsigned int = ax+0 (used reg = )
20179 4E27           50                         push	ax
20180                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20181 4E28           FF76         F4            push	-$C[bp]
20182                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20183 4E2B           8A46         0A            mov	al,$A[bp]
20184 4E2E           30E4                       xor	ah,ah
20185 4E30           50                         push	ax
20186                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20187 4E31           E8         F7FC            call	_vgamem_copy_pl4
20188 4E34           83C4                   0C  add	sp,*$C
20189                                           !BCC_EOS
20190                                           ! 2310              if (i>rlr) break;
20191                       00004E37            .117:
20192                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20193 4E37           8A46         0C            mov	al,$C[bp]
20194 4E3A           30E4                       xor	ah,ah
20195 4E3C           3B46         F4            cmp	ax,-$C[bp]
20196 4E3F           73           02            jae 	.118
20197                       00004E41            .119:
20198 4E41           EB           13            jmp .110
20199                                           !BCC_EOS
20200                                           ! 2311             }
20201                       00004E43            .118:
20202                                           ! 2312           }
20203                       00004E43            .111:
20204                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20205 4E43           8B46         F4            mov	ax,-$C[bp]
20206 4E46           48                         dec	ax
20207 4E47           8946         F4            mov	-$C[bp],ax
20208                       00004E4A            .112:
20209                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20210 4E4A           8A46         08            mov	al,8[bp]
20211 4E4D           30E4                       xor	ah,ah
20212 4E4F           3B46         F4            cmp	ax,-$C[bp]
20213 4E52         0F86         FF7C            blos	.113
20214                       00004E56            .11A:
20215                       00004E56            .110:
20216                                           ! 2313         }
20217                       00004E56            .10F:
20218                                           ! 2314        break;
20219                       00004E56            .103:
20220 4E56           E9         01ED            br 	.F8
20221                                           !BCC_EOS
20222                                           ! 2315      case 0x02:
20223                                           ! 2316        bpp=vga_modes[line].pixbits;
20224                       00004E59            .11B:
20225                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20226 4E59           8A46         FE            mov	al,-2[bp]
20227 4E5C           30E4                       xor	ah,ah
20228 4E5E           B1                     03  mov	cl,*3
20229 4E60           D3E0                       shl	ax,cl
20230 4E62           89C3                       mov	bx,ax
20231 4E64           81C3                 01FF  add	bx,#_vga_modes
20232                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20233 4E68           8A47         03            mov	al,3[bx]
20234 4E6B           8846         FC            mov	-4[bp],al
20235                                           !BCC_EOS
20236                                           ! 2317        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20237                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20238 4E6E           8A46         04            mov	al,4[bp]
20239 4E71           84C0                       test	al,al
20240 4E73           75           77            jne 	.11C
20241                       00004E75            .121:
20242                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20243 4E75           8A46         08            mov	al,8[bp]
20244 4E78           84C0                       test	al,al
20245 4E7A           75           70            jne 	.11C
20246                       00004E7C            .120:
20247                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20248 4E7C           8A46         0A            mov	al,$A[bp]
20249 4E7F           84C0                       test	al,al
20250 4E81           75           69            jne 	.11C
20251                       00004E83            .11F:
20252                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20253 4E83           8B46         F6            mov	ax,-$A[bp]
20254                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20255                                           ! Debug: expression subtree swapping
20256 4E86           48                         dec	ax
20257 4E87           50                         push	ax
20258 4E88           8A46         0C            mov	al,$C[bp]
20259 4E8B           30E4                       xor	ah,ah
20260 4E8D           3B46         F0            cmp	ax,0+..FFFC[bp]
20261 4E90           8D66         F2            lea	sp,2+..FFFC[bp]
20262 4E93           75           57            jne 	.11C
20263                       00004E95            .11E:
20264                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20265 4E95           8B46         F8            mov	ax,-8[bp]
20266                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20267                                           ! Debug: expression subtree swapping
20268 4E98           48                         dec	ax
20269 4E99           50                         push	ax
20270 4E9A           8A46         0E            mov	al,$E[bp]
20271 4E9D           30E4                       xor	ah,ah
20272 4E9F           3B46         F0            cmp	ax,0+..FFFC[bp]
20273 4EA2           8D66         F2            lea	sp,2+..FFFC[bp]
20274 4EA5           75           45            jne 	.11C
20275                       00004EA7            .11D:
20276                                           ! 2318         {
20277                                           ! 2319          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20278                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20279 4EA7           8B46         F6            mov	ax,-$A[bp]
20280 4EAA           8B4E         F8            mov	cx,-8[bp]
20281 4EAD           F7E9                       imul	cx
20282                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20283 4EAF           89C3                       mov	bx,ax
20284 4EB1           8A46         FD            mov	al,-3[bp]
20285 4EB4           30E4                       xor	ah,ah
20286 4EB6           93                         xchg	ax,bx
20287 4EB7           89D9                       mov	cx,bx
20288 4EB9           F7E9                       imul	cx
20289                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20290 4EBB           89C3                       mov	bx,ax
20291 4EBD           8A46         FC            mov	al,-4[bp]
20292 4EC0           30E4                       xor	ah,ah
20293 4EC2           93                         xchg	ax,bx
20294 4EC3           89D9                       mov	cx,bx
20295 4EC5           F7E9                       imul	cx
20296                                           ! Debug: list unsigned int = ax+0 (used reg = )
20297 4EC7           50                         push	ax
20298                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20299 4EC8           8A46         06            mov	al,6[bp]
20300 4ECB           30E4                       xor	ah,ah
20301 4ECD           50                         push	ax
20302                                           ! Debug: list int = const 0 (used reg = )
20303 4ECE           31C0                       xor	ax,ax
20304 4ED0           50                         push	ax
20305                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20306 4ED1           8A46         FE            mov	al,-2[bp]
20307 4ED4           30E4                       xor	ah,ah
20308 4ED6           B1                     03  mov	cl,*3
20309 4ED8           D3E0                       shl	ax,cl
20310 4EDA           89C3                       mov	bx,ax
20311 4EDC           81C3                 01FF  add	bx,#_vga_modes
20312                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20313 4EE0           FF77         04            push	4[bx]
20314                                           ! Debug: func () void = memsetb+0 (used reg = )
20315 4EE3           E8         2C02            call	_memsetb
20316 4EE6           83C4                   08  add	sp,*8
20317                                           !BCC_EOS
20318                                           ! 2320         }
20319                                           ! 2321        else
20320                                           ! 2322         {
20321 4EE9           E9         0144            br 	.122
20322                       00004EEC            .11C:
20323                                           ! 2323          if(bpp==2)
20324                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20325 4EEC           8A46         FC            mov	al,-4[bp]
20326 4EEF           3C                     02  cmp	al,*2
20327 4EF1           75           1C            jne 	.123
20328                       00004EF3            .124:
20329                                           ! 2324           {
20330                                           ! 2325            cul<<=1;
20331                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20332 4EF3           8A46         0A            mov	al,$A[bp]
20333 4EF6           30E4                       xor	ah,ah
20334 4EF8           D1E0                       shl	ax,*1
20335 4EFA           8846         0A            mov	$A[bp],al
20336                                           !BCC_EOS
20337                                           ! 2326            cols<<=1;
20338                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20339 4EFD           8A46         FB            mov	al,-5[bp]
20340 4F00           30E4                       xor	ah,ah
20341 4F02           D1E0                       shl	ax,*1
20342 4F04           8846         FB            mov	-5[bp],al
20343                                           !BCC_EOS
20344                                           ! 2327            nbcols<<=1;
20345                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20346 4F07           8B46         F8            mov	ax,-8[bp]
20347 4F0A           D1E0                       shl	ax,*1
20348 4F0C           8946         F8            mov	-8[bp],ax
20349                                           !BCC_EOS
20350                                           ! 2328           }
20351                                           ! 2329          if(dir==1)
20352                       00004F0F            .123:
20353                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20354 4F0F           8A46         12            mov	al,$12[bp]
20355 4F12           3C                     01  cmp	al,*1
20356 4F14         0F85         008A            bne 	.125
20357                       00004F18            .126:
20358                                           ! 2330           {for(i=rul;i<=rlr;i++)
20359                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20360 4F18           8A46         08            mov	al,8[bp]
20361 4F1B           30E4                       xor	ah,ah
20362 4F1D           8946         F4            mov	-$C[bp],ax
20363                                           !BCC_EOS
20364                                           !BCC_EOS
20365                                           ! 2331             {
20366 4F20           EB           73            jmp .129
20367                       00004F22            .12A:
20368                                           ! 2332              if((i+nblines>rlr)||(nblines==0))
20369                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20370 4F22           8B46         F4            mov	ax,-$C[bp]
20371 4F25           0246         04            add	al,4[bp]
20372 4F28           80D4                   00  adc	ah,*0
20373                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20374 4F2B           50                         push	ax
20375 4F2C           8A46         0C            mov	al,$C[bp]
20376 4F2F           30E4                       xor	ah,ah
20377 4F31           3B46         F0            cmp	ax,0+..FFFC[bp]
20378 4F34           8D66         F2            lea	sp,2+..FFFC[bp]
20379 4F37           72           07            jb  	.12C
20380                       00004F39            .12D:
20381                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20382 4F39           8A46         04            mov	al,4[bp]
20383 4F3C           84C0                       test	al,al
20384 4F3E           75           26            jne 	.12B
20385                       00004F40            .12C:
20386                                           ! 2333               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20387                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20388 4F40           8A46         06            mov	al,6[bp]
20389 4F43           30E4                       xor	ah,ah
20390 4F45           50                         push	ax
20391                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20392 4F46           8A46         FD            mov	al,-3[bp]
20393 4F49           30E4                       xor	ah,ah
20394 4F4B           50                         push	ax
20395                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20396 4F4C           FF76         F8            push	-8[bp]
20397                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20398 4F4F           8A46         FB            mov	al,-5[bp]
20399 4F52           30E4                       xor	ah,ah
20400 4F54           50                         push	ax
20401                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20402 4F55           FF76         F4            push	-$C[bp]
20403                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20404 4F58           8A46         0A            mov	al,$A[bp]
20405 4F5B           30E4                       xor	ah,ah
20406 4F5D           50                         push	ax
20407                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20408 4F5E           E8         F92E            call	_vgamem_fill_cga
20409 4F61           83C4                   0C  add	sp,*$C
20410                                           !BCC_EOS
20411                                           ! 2334              else
20412                                           ! 2335               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20413 4F64           EB           28            jmp .12E
20414                       00004F66            .12B:
20415                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20416 4F66           8A46         FD            mov	al,-3[bp]
20417 4F69           30E4                       xor	ah,ah
20418 4F6B           50                         push	ax
20419                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20420 4F6C           FF76         F8            push	-8[bp]
20421                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20422 4F6F           8A46         FB            mov	al,-5[bp]
20423 4F72           30E4                       xor	ah,ah
20424 4F74           50                         push	ax
20425                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20426 4F75           FF76         F4            push	-$C[bp]
20427                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20428 4F78           8B46         F4            mov	ax,-$C[bp]
20429 4F7B           0246         04            add	al,4[bp]
20430 4F7E           80D4                   00  adc	ah,*0
20431                                           ! Debug: list unsigned int = ax+0 (used reg = )
20432 4F81           50                         push	ax
20433                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20434 4F82           8A46         0A            mov	al,$A[bp]
20435 4F85           30E4                       xor	ah,ah
20436 4F87           50                         push	ax
20437                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20438 4F88           E8         F7F2            call	_vgamem_copy_cga
20439 4F8B           83C4                   0C  add	sp,*$C
20440                                           !BCC_EOS
20441                                           ! 2336             }
20442                       00004F8E            .12E:
20443                                           ! 2337           }
20444                       00004F8E            .128:
20445                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20446 4F8E           8B46         F4            mov	ax,-$C[bp]
20447 4F91           40                         inc	ax
20448 4F92           8946         F4            mov	-$C[bp],ax
20449                       00004F95            .129:
20450                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20451 4F95           8A46         0C            mov	al,$C[bp]
20452 4F98           30E4                       xor	ah,ah
20453 4F9A           3B46         F4            cmp	ax,-$C[bp]
20454 4F9D           73           83            jae	.12A
20455                       00004F9F            .12F:
20456                       00004F9F            .127:
20457                                           ! 2338          else
20458                                           ! 2339           {for(i=rlr;i>=rul;i--)
20459 4F9F           E9         008E            br 	.130
20460                       00004FA2            .125:
20461                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20462 4FA2           8A46         0C            mov	al,$C[bp]
20463 4FA5           30E4                       xor	ah,ah
20464 4FA7           8946         F4            mov	-$C[bp],ax
20465                                           !BCC_EOS
20466                                           !BCC_EOS
20467                                           ! 2340             {
20468 4FAA           EB           78            jmp .133
20469                       00004FAC            .134:
20470                                           ! 2341    
20471                                           ! 2341           if((i<rul+nblines)||(nblines==0))
20472                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20473 4FAC           8A46         08            mov	al,8[bp]
20474 4FAF           30E4                       xor	ah,ah
20475 4FB1           0246         04            add	al,4[bp]
20476 4FB4           80D4                   00  adc	ah,*0
20477                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20478 4FB7           3B46         F4            cmp	ax,-$C[bp]
20479 4FBA           77           07            ja  	.136
20480                       00004FBC            .137:
20481                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20482 4FBC           8A46         04            mov	al,4[bp]
20483 4FBF           84C0                       test	al,al
20484 4FC1           75           26            jne 	.135
20485                       00004FC3            .136:
20486                                           ! 2342               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20487                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20488 4FC3           8A46         06            mov	al,6[bp]
20489 4FC6           30E4                       xor	ah,ah
20490 4FC8           50                         push	ax
20491                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20492 4FC9           8A46         FD            mov	al,-3[bp]
20493 4FCC           30E4                       xor	ah,ah
20494 4FCE           50                         push	ax
20495                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20496 4FCF           FF76         F8            push	-8[bp]
20497                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20498 4FD2           8A46         FB            mov	al,-5[bp]
20499 4FD5           30E4                       xor	ah,ah
20500 4FD7           50                         push	ax
20501                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20502 4FD8           FF76         F4            push	-$C[bp]
20503                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20504 4FDB           8A46         0A            mov	al,$A[bp]
20505 4FDE           30E4                       xor	ah,ah
20506 4FE0           50                         push	ax
20507                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20508 4FE1           E8         F8AB            call	_vgamem_fill_cga
20509 4FE4           83C4                   0C  add	sp,*$C
20510                                           !BCC_EOS
20511                                           ! 2343              else
20512                                           ! 2344               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20513 4FE7           EB           28            jmp .138
20514                       00004FE9            .135:
20515                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20516 4FE9           8A46         FD            mov	al,-3[bp]
20517 4FEC           30E4                       xor	ah,ah
20518 4FEE           50                         push	ax
20519                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20520 4FEF           FF76         F8            push	-8[bp]
20521                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20522 4FF2           8A46         FB            mov	al,-5[bp]
20523 4FF5           30E4                       xor	ah,ah
20524 4FF7           50                         push	ax
20525                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20526 4FF8           8B46         F4            mov	ax,-$C[bp]
20527 4FFB           2A46         04            sub	al,4[bp]
20528 4FFE           80DC                   00  sbb	ah,*0
20529                                           ! Debug: list unsigned int = ax+0 (used reg = )
20530 5001           50                         push	ax
20531                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20532 5002           FF76         F4            push	-$C[bp]
20533                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20534 5005           8A46         0A            mov	al,$A[bp]
20535 5008           30E4                       xor	ah,ah
20536 500A           50                         push	ax
20537                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20538 500B           E8         F76F            call	_vgamem_copy_cga
20539 500E           83C4                   0C  add	sp,*$C
20540                                           !BCC_EOS
20541                                           ! 2345              if (i>rlr) break;
20542                       00005011            .138:
20543                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20544 5011           8A46         0C            mov	al,$C[bp]
20545 5014           30E4                       xor	ah,ah
20546 5016           3B46         F4            cmp	ax,-$C[bp]
20547 5019           73           02            jae 	.139
20548                       0000501B            .13A:
20549 501B           EB           13            jmp .131
20550                                           !BCC_EOS
20551                                           ! 2346             }
20552                       0000501D            .139:
20553                                           ! 2347           }
20554                       0000501D            .132:
20555                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20556 501D           8B46         F4            mov	ax,-$C[bp]
20557 5020           48                         dec	ax
20558 5021           8946         F4            mov	-$C[bp],ax
20559                       00005024            .133:
20560                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20561 5024           8A46         08            mov	al,8[bp]
20562 5027           30E4                       xor	ah,ah
20563 5029           3B46         F4            cmp	ax,-$C[bp]
20564 502C         0F86         FF7C            blos	.134
20565                       00005030            .13B:
20566                       00005030            .131:
20567                                           ! 2348         }
20568                       00005030            .130:
20569                                           ! 2349        break;
20570                       00005030            .122:
20571 5030           EB           14            jmp .F8
20572                                           !BCC_EOS
20573                                           ! 2350     }
20574                                           ! 2351   }
20575 5032           EB           12            jmp .F8
20576                       00005034            .FA:
20577 5034           2C                     02  sub	al,*2
20578 5036         0F84         FE1F            beq 	.11B
20579 503A           2C                     01  sub	al,*1
20580 503C         0F84         FC63            beq 	.FC
20581 5040           2C                     01  sub	al,*1
20582 5042         0F84         FC5D            beq 	.FB
20583                       00005046            .F8:
20584                       FFFFFFF0            ..FFFC	=	-$10
20585                                           ! 2352 }
20586                       00005046            .F7:
20587 5046           89EC                       mov	sp,bp
20588 5048           5D                         pop	bp
20589 5049           C3                         ret
20590                                           ! 2353 static void biosfn_read_char_attr (page,car)
20591                                           ! Register BX used in function biosfn_scroll
20592                                           ! 2354 Bit8u page;Bit16u *car;
20593                       0000504A            _biosfn_read_char_attr:
20594                                           !BCC_EOS
20595                                           !BCC_EOS
20596                                           ! 2355 {Bit16u ss=get_SS();
20597 504A           55                         push	bp
20598 504B           89E5                       mov	bp,sp
20599 504D           4C                         dec	sp
20600 504E           4C                         dec	sp
20601                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20602 504F           E8         2BCC            call	_get_SS
20603                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20604 5052           8946         FE            mov	-2[bp],ax
20605                                           !BCC_EOS
20606                                           ! 2356  Bit8u xcurs,ycurs,mode,line;
20607                                           !BCC_EOS
20608                                           ! 2357  Bit16u nbcols,nbrows,address;
20609                                           !BCC_EOS
20610                                           ! 2358  Bit16u cursor,dummy;
20611                                           !BCC_EOS
20612                                           ! 2359  mode=read_byte(0x40,0x49);
20613 5055           83C4                   F2  add	sp,*-$E
20614                                           ! Debug: list int = const $49 (used reg = )
20615 5058           B8                   0049  mov	ax,*$49
20616 505B           50                         push	ax
20617                                           ! Debug: list int = const $40 (used reg = )
20618 505C           B8                   0040  mov	ax,*$40
20619 505F           50                         push	ax
20620                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20621 5060           E8         2B2F            call	_read_byte
20622 5063           83C4                   04  add	sp,*4
20623                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20624 5066           8846         FB            mov	-5[bp],al
20625                                           !BCC_EOS
20626                                           ! 2360  line=find_vga_entry(mode);
20627                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20628 5069           8A46         FB            mov	al,-5[bp]
20629 506C           30E4                       xor	ah,ah
20630 506E           50                         push	ax
20631                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20632 506F           E8         2A34            call	_find_vga_entry
20633 5072           44                         inc	sp
20634 5073           44                         inc	sp
20635                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20636 5074           8846         FA            mov	-6[bp],al
20637                                           !BCC_EOS
20638                                           ! 2361  if(line==0xFF)return;
20639                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20640 5077           8A46         FA            mov	al,-6[bp]
20641 507A           3C                     FF  cmp	al,#$FF
20642 507C           75           04            jne 	.13C
20643                       0000507E            .13D:
20644 507E           89EC                       mov	sp,bp
20645 5080           5D                         pop	bp
20646 5081           C3                         ret
20647                                           !BCC_EOS
20648                                           ! 2362  biosfn_get_cursor_pos(page,&dummy,&cursor);
20649                       00005082            .13C:
20650                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20651 5082           8D5E         F2            lea	bx,-$E[bp]
20652 5085           53                         push	bx
20653                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20654 5086           8D5E         F0            lea	bx,-$10[bp]
20655 5089           53                         push	bx
20656                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20657 508A           8A46         04            mov	al,4[bp]
20658 508D           30E4                       xor	ah,ah
20659 508F           50                         push	ax
20660                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20661 5090           E8         F3B9            call	_biosfn_get_cursor_pos
20662 5093           83C4                   06  add	sp,*6
20663                                           !BCC_EOS
20664                                           ! 2363  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20665                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20666 5096           8A46         F2            mov	al,-$E[bp]
20667                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20668 5099           8846         FD            mov	-3[bp],al
20669                                           !BCC_EOS
20670                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20671 509C           8B46         F2            mov	ax,-$E[bp]
20672 509F           30C0                       xor	al,al
20673                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20674 50A1           88E0                       mov	al,ah
20675 50A3           30E4                       xor	ah,ah
20676                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20677 50A5           8846         FC            mov	-4[bp],al
20678                                           !BCC_EOS
20679                                           ! 2364  nbrows=read_byte(0x40,0x84)+1;
20680                                           ! Debug: list int = const $84 (used reg = )
20681 50A8           B8                   0084  mov	ax,#$84
20682 50AB           50                         push	ax
20683                                           ! Debug: list int = const $40 (used reg = )
20684 50AC           B8                   0040  mov	ax,*$40
20685 50AF           50                         push	ax
20686                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20687 50B0           E8         2ADF            call	_read_byte
20688 50B3           83C4                   04  add	sp,*4
20689                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20690 50B6           30E4                       xor	ah,ah
20691                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20692 50B8           40                         inc	ax
20693 50B9           8946         F6            mov	-$A[bp],ax
20694                                           !BCC_EOS
20695                                           ! 2365  nbcols=read_word(0x40,0x4A);
20696                                           ! Debug: list int = const $4A (used reg = )
20697 50BC           B8                   004A  mov	ax,*$4A
20698 50BF           50                         push	ax
20699                                           ! Debug: list int = const $40 (used reg = )
20700 50C0           B8                   0040  mov	ax,*$40
20701 50C3           50                         push	ax
20702                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20703 50C4           E8         2ADE            call	_read_word
20704 50C7           83C4                   04  add	sp,*4
20705                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20706 50CA           8946         F8            mov	-8[bp],ax
20707                                           !BCC_EOS
20708                                           ! 2366  if(vga_modes[line].class==0x00)
20709                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20710 50CD           8A46         FA            mov	al,-6[bp]
20711 50D0           30E4                       xor	ah,ah
20712 50D2           B1                     03  mov	cl,*3
20713 50D4           D3E0                       shl	ax,cl
20714 50D6           89C3                       mov	bx,ax
20715 50D8           81C3                 01FF  add	bx,#_vga_modes
20716                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20717 50DC           8A47         01            mov	al,1[bx]
20718 50DF           84C0                       test	al,al
20719 50E1           75           5E            jne 	.13E
20720                       000050E3            .13F:
20721                                           ! 2367   {
20722                                           ! 2368    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20723                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20724 50E3           8A46         FC            mov	al,-4[bp]
20725 50E6           30E4                       xor	ah,ah
20726 50E8           8B4E         F8            mov	cx,-8[bp]
20727 50EB           F7E9                       imul	cx
20728                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20729                                           ! Debug: expression subtree swapping
20730 50ED           0246         FD            add	al,-3[bp]
20731 50F0           80D4                   00  adc	ah,*0
20732                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20733 50F3           D1E0                       shl	ax,*1
20734 50F5           50                         push	ax
20735                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20736 50F6           8B46         F8            mov	ax,-8[bp]
20737 50F9           8B4E         F6            mov	cx,-$A[bp]
20738 50FC           F7E9                       imul	cx
20739                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20740 50FE           D1E0                       shl	ax,*1
20741                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20742 5100           0C                     FF  or	al,#$FF
20743                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20744                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20745 5102           89C3                       mov	bx,ax
20746 5104           8A46         04            mov	al,4[bp]
20747 5107           30E4                       xor	ah,ah
20748 5109           93                         xchg	ax,bx
20749 510A           40                         inc	ax
20750 510B           89D9                       mov	cx,bx
20751 510D           F7E9                       imul	cx
20752                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20753 510F           0346         EE            add	ax,-$12[bp]
20754 5112           44                         inc	sp
20755 5113           44                         inc	sp
20756                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20757 5114           8946         F4            mov	-$C[bp],ax
20758                                           !BCC_EOS
20759                                           ! 2369    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20760                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20761 5117           FF76         F4            push	-$C[bp]
20762                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20763 511A           8A46         FA            mov	al,-6[bp]
20764 511D           30E4                       xor	ah,ah
20765 511F           B1                     03  mov	cl,*3
20766 5121           D3E0                       shl	ax,cl
20767 5123           89C3                       mov	bx,ax
20768 5125           81C3                 01FF  add	bx,#_vga_modes
20769                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20770 5129           FF77         04            push	4[bx]
20771                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20772 512C           E8         2A76            call	_read_word
20773 512F           83C4                   04  add	sp,*4
20774                                           ! Debug: list unsigned short = ax+0 (used reg = )
20775 5132           50                         push	ax
20776                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20777 5133           FF76         06            push	6[bp]
20778                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20779 5136           FF76         FE            push	-2[bp]
20780                                           ! Debug: func () void = write_word+0 (used reg = )
20781 5139           E8         2A94            call	_write_word
20782 513C           83C4                   06  add	sp,*6
20783                                           !BCC_EOS
20784                                           ! 2370   }
20785                                           ! 2371  else
20786                                           ! 2372   {
20787 513F           EB           00            jmp .140
20788                       00005141            .13E:
20789                                           ! 2373   }
20790                                           ! 2374 }
20791                       00005141            .140:
20792 5141           89EC                       mov	sp,bp
20793 5143           5D                         pop	bp
20794 5144           C3                         ret
20795                                           ! 2375 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20796                                           ! Register BX used in function biosfn_read_char_attr
20797                                           ! 2376 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20798                       00005145            _write_gfx_char_pl4:
20799                                           !BCC_EOS
20800                                           !BCC_EOS
20801                                           !BCC_EOS
20802                                           !BCC_EOS
20803                                           !BCC_EOS
20804                                           !BCC_EOS
20805                                           ! 2377 {
20806                                           ! 2378  Bit8u i,j,mask;
20807                                           !BCC_EOS
20808                                           ! 2379  Bit8u *fdata;
20809                                           !BCC_EOS
20810                                           ! 2380  Bit16u addr,dest,src;
20811                                           !BCC_EOS
20812                                           ! 2381  switch(cheight)
20813 5145           55                         push	bp
20814 5146           89E5                       mov	bp,sp
20815 5148           83C4                   F4  add	sp,*-$C
20816 514B           8A46         0E            mov	al,$E[bp]
20817                                           ! 2382   {case 14:
20818 514E           EB           18            jmp .143
20819                                           ! 2383     fdata = &vgafont14;
20820                       00005150            .144:
20821                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20822 5150           BB                   1763  mov	bx,#_vgafont14
20823 5153           895E         FA            mov	-6[bp],bx
20824                                           !BCC_EOS
20825                                           ! 2384     break;
20826 5156           EB           1A            jmp .141
20827                                           !BCC_EOS
20828                                           ! 2385    case 16:
20829                                           ! 2386     fdata = &vgafont16;
20830                       00005158            .145:
20831                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20832 5158           BB                   2563  mov	bx,#_vgafont16
20833 515B           895E         FA            mov	-6[bp],bx
20834                                           !BCC_EOS
20835                                           ! 2387     break;
20836 515E           EB           12            jmp .141
20837                                           !BCC_EOS
20838                                           ! 2388    default:
20839                                           ! 2389     fdata = &vgafont8;
20840                       00005160            .146:
20841                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20842 5160           BB                   0F63  mov	bx,#_vgafont8
20843 5163           895E         FA            mov	-6[bp],bx
20844                                           !BCC_EOS
20845                                           ! 2390   }
20846                                           ! 2391  addr=xcurs+ycurs*cheight*nbcols;
20847 5166           EB           0A            jmp .141
20848                       00005168            .143:
20849 5168           2C                     0E  sub	al,*$E
20850 516A           74           E4            je 	.144
20851 516C           2C                     02  sub	al,*2
20852 516E           74           E8            je 	.145
20853 5170           EB           EE            jmp	.146
20854                       00005172            .141:
20855                       FFFFFFF2            ..FFFB	=	-$E
20856                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20857 5172           8A46         0E            mov	al,$E[bp]
20858 5175           30E4                       xor	ah,ah
20859 5177           89C3                       mov	bx,ax
20860 5179           8A46         0A            mov	al,$A[bp]
20861 517C           30E4                       xor	ah,ah
20862 517E           89D9                       mov	cx,bx
20863 5180           F7E9                       imul	cx
20864                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20865 5182           89C3                       mov	bx,ax
20866 5184           8A46         0C            mov	al,$C[bp]
20867 5187           30E4                       xor	ah,ah
20868 5189           93                         xchg	ax,bx
20869 518A           89D9                       mov	cx,bx
20870 518C           F7E9                       imul	cx
20871                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20872                                           ! Debug: expression subtree swapping
20873 518E           0246         08            add	al,8[bp]
20874 5191           80D4                   00  adc	ah,*0
20875                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20876 5194           8946         F8            mov	-8[bp],ax
20877                                           !BCC_EOS
20878                                           ! 2392  src = car * cheight;
20879                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20880 5197           8A46         0E            mov	al,$E[bp]
20881 519A           30E4                       xor	ah,ah
20882 519C           89C3                       mov	bx,ax
20883 519E           8A46         04            mov	al,4[bp]
20884 51A1           30E4                       xor	ah,ah
20885 51A3           89D9                       mov	cx,bx
20886 51A5           F7E9                       imul	cx
20887                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20888 51A7           8946         F4            mov	-$C[bp],ax
20889                                           !BCC_EOS
20890                                           ! 2393  outw(0x3c4, 0x0f02);
20891                                           ! Debug: list int = const $F02 (used reg = )
20892 51AA           B8                   0F02  mov	ax,#$F02
20893 51AD           50                         push	ax
20894                                           ! Debug: list int = const $3C4 (used reg = )
20895 51AE           B8                   03C4  mov	ax,#$3C4
20896 51B1           50                         push	ax
20897                                           ! Debug: func () void = outw+0 (used reg = )
20898 51B2           E8         2A59            call	_outw
20899 51B5           83C4                   04  add	sp,*4
20900                                           !BCC_EOS
20901                                           ! 2394  outw(0x3ce, 0x0205);
20902                                           ! Debug: list int = const $205 (used reg = )
20903 51B8           B8                   0205  mov	ax,#$205
20904 51BB           50                         push	ax
20905                                           ! Debug: list int = const $3CE (used reg = )
20906 51BC           B8                   03CE  mov	ax,#$3CE
20907 51BF           50                         push	ax
20908                                           ! Debug: func () void = outw+0 (used reg = )
20909 51C0           E8         2A4B            call	_outw
20910 51C3           83C4                   04  add	sp,*4
20911                                           !BCC_EOS
20912                                           ! 2395  if(attr&0x80)
20913                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20914 51C6           8A46         06            mov	al,6[bp]
20915 51C9           24                     80  and	al,#$80
20916 51CB           84C0                       test	al,al
20917 51CD           74           10            je  	.147
20918                       000051CF            .148:
20919                                           ! 2396   {
20920                                           ! 2397    outw(0x3ce, 0x1803);
20921                                           ! Debug: list int = const $1803 (used reg = )
20922 51CF           B8                   1803  mov	ax,#$1803
20923 51D2           50                         push	ax
20924                                           ! Debug: list int = const $3CE (used reg = )
20925 51D3           B8                   03CE  mov	ax,#$3CE
20926 51D6           50                         push	ax
20927                                           ! Debug: func () void = outw+0 (used reg = )
20928 51D7           E8         2A34            call	_outw
20929 51DA           83C4                   04  add	sp,*4
20930                                           !BCC_EOS
20931                                           ! 2398   }
20932                                           ! 2399  else
20933                                           ! 2400   {
20934 51DD           EB           0E            jmp .149
20935                       000051DF            .147:
20936                                           ! 2401    outw(0x3ce, 0x0003);
20937                                           ! Debug: list int = const 3 (used reg = )
20938 51DF           B8                   0003  mov	ax,*3
20939 51E2           50                         push	ax
20940                                           ! Debug: list int = const $3CE (used reg = )
20941 51E3           B8                   03CE  mov	ax,#$3CE
20942 51E6           50                         push	ax
20943                                           ! Debug: func () void = outw+0 (used reg = )
20944 51E7           E8         2A24            call	_outw
20945 51EA           83C4                   04  add	sp,*4
20946                                           !BCC_EOS
20947                                           ! 2402   }
20948                                           ! 2403  for(i=0;i<cheight;i++)
20949                       000051ED            .149:
20950                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20951 51ED           30C0                       xor	al,al
20952 51EF           8846         FF            mov	-1[bp],al
20953                                           !BCC_EOS
20954                                           !BCC_EOS
20955                                           ! 2404   {
20956 51F2           E9         00A6            br 	.14C
20957                       000051F5            .14D:
20958                                           ! 2405    dest=addr+i*nbcols;
20959                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20960 51F5           8A46         0C            mov	al,$C[bp]
20961 51F8           30E4                       xor	ah,ah
20962 51FA           89C3                       mov	bx,ax
20963 51FC           8A46         FF            mov	al,-1[bp]
20964 51FF           30E4                       xor	ah,ah
20965 5201           89D9                       mov	cx,bx
20966 5203           F7E9                       imul	cx
20967                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20968                                           ! Debug: expression subtree swapping
20969 5205           0346         F8            add	ax,-8[bp]
20970                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20971 5208           8946         F6            mov	-$A[bp],ax
20972                                           !BCC_EOS
20973                                           ! 2406    for(j=0;j<8;j++)
20974                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20975 520B           30C0                       xor	al,al
20976 520D           8846         FE            mov	-2[bp],al
20977                                           !BCC_EOS
20978                                           !BCC_EOS
20979                                           ! 2407     {
20980 5210           EB           79            jmp .150
20981                       00005212            .151:
20982                                           ! 2408      mask=0x80>>j;
20983                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20984 5212           8A46         FE            mov	al,-2[bp]
20985 5215           30E4                       xor	ah,ah
20986 5217           89C3                       mov	bx,ax
20987 5219           B8                   0080  mov	ax,#$80
20988 521C           89D9                       mov	cx,bx
20989 521E           D3F8                       sar	ax,cl
20990                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20991 5220           8846         FD            mov	-3[bp],al
20992                                           !BCC_EOS
20993                                           ! 2409      outw(0x3ce, (mask << 8) | 0x08);
20994                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20995 5223           8A46         FD            mov	al,-3[bp]
20996 5226           30E4                       xor	ah,ah
20997 5228           88C4                       mov	ah,al
20998 522A           30C0                       xor	al,al
20999                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21000 522C           0C                     08  or	al,*8
21001                                           ! Debug: list unsigned int = ax+0 (used reg = )
21002 522E           50                         push	ax
21003                                           ! Debug: list int = const $3CE (used reg = )
21004 522F           B8                   03CE  mov	ax,#$3CE
21005 5232           50                         push	ax
21006                                           ! Debug: func () void = outw+0 (used reg = )
21007 5233           E8         29D8            call	_outw
21008 5236           83C4                   04  add	sp,*4
21009                                           !BCC_EOS
21010                                           ! 2410      read_byte(0xa000,dest);
21011                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21012 5239           FF76         F6            push	-$A[bp]
21013                                           ! Debug: list unsigned int = const $A000 (used reg = )
21014 523C           B8                   A000  mov	ax,#$A000
21015 523F           50                         push	ax
21016                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21017 5240           E8         294F            call	_read_byte
21018 5243           83C4                   04  add	sp,*4
21019                                           !BCC_EOS
21020                                           ! 2411      if(fdata[src+i]&mask)
21021                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21022 5246           8B46         F4            mov	ax,-$C[bp]
21023 5249           0246         FF            add	al,-1[bp]
21024 524C           80D4                   00  adc	ah,*0
21025                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21026 524F           0346         FA            add	ax,-6[bp]
21027 5252           89C3                       mov	bx,ax
21028                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21029 5254           8A07                       mov	al,[bx]
21030 5256           2246         FD            and	al,-3[bp]
21031 5259           84C0                       test	al,al
21032 525B           74           17            je  	.152
21033                       0000525D            .153:
21034                                           ! 2412       {
21035                                           ! 2413        write_byte(0xa000,dest,attr&0x0f);
21036                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21037 525D           8A46         06            mov	al,6[bp]
21038 5260           24                     0F  and	al,*$F
21039                                           ! Debug: list unsigned char = al+0 (used reg = )
21040 5262           30E4                       xor	ah,ah
21041 5264           50                         push	ax
21042                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21043 5265           FF76         F6            push	-$A[bp]
21044                                           ! Debug: list unsigned int = const $A000 (used reg = )
21045 5268           B8                   A000  mov	ax,#$A000
21046 526B           50                         push	ax
21047                                           ! Debug: func () void = write_byte+0 (used reg = )
21048 526C           E8         2949            call	_write_byte
21049 526F           83C4                   06  add	sp,*6
21050                                           !BCC_EOS
21051                                           ! 2414       }
21052                                           ! 2415      else
21053                                           ! 2416       {
21054 5272           EB           10            jmp .154
21055                       00005274            .152:
21056                                           ! 2417        write_byte(0xa000,dest,0x00);
21057                                           ! Debug: list int = const 0 (used reg = )
21058 5274           31C0                       xor	ax,ax
21059 5276           50                         push	ax
21060                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21061 5277           FF76         F6            push	-$A[bp]
21062                                           ! Debug: list unsigned int = const $A000 (used reg = )
21063 527A           B8                   A000  mov	ax,#$A000
21064 527D           50                         push	ax
21065                                           ! Debug: func () void = write_byte+0 (used reg = )
21066 527E           E8         2937            call	_write_byte
21067 5281           83C4                   06  add	sp,*6
21068                                           !BCC_EOS
21069                                           ! 2418       }
21070                                           ! 2419     }
21071                       00005284            .154:
21072                                           ! 2420   }
21073                       00005284            .14F:
21074                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21075 5284           8A46         FE            mov	al,-2[bp]
21076 5287           40                         inc	ax
21077 5288           8846         FE            mov	-2[bp],al
21078                       0000528B            .150:
21079                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21080 528B           8A46         FE            mov	al,-2[bp]
21081 528E           3C                     08  cmp	al,*8
21082 5290         0F82         FF7E            blo 	.151
21083                       00005294            .155:
21084                       00005294            .14E:
21085                                           ! 2421 #asm
21086                       00005294            .14B:
21087                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21088 5294           8A46         FF            mov	al,-1[bp]
21089 5297           40                         inc	ax
21090 5298           8846         FF            mov	-1[bp],al
21091                       0000529B            .14C:
21092                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21093 529B           8A46         FF            mov	al,-1[bp]
21094 529E           3A46         0E            cmp	al,$E[bp]
21095 52A1         0F82         FF50            blo 	.14D
21096                       000052A5            .156:
21097                       000052A5            .14A:
21098                                           !BCC_EOS
21099                                           !BCC_ASM
21100                       0000000A            _write_gfx_char_pl4.j	set	$A
21101                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21102                       00000006            _write_gfx_char_pl4.fdata	set	6
21103                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21104                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21105                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21106                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21107                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21108                       0000000B            _write_gfx_char_pl4.i	set	$B
21109                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21110                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21111                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21112                       00000009            _write_gfx_char_pl4.mask	set	9
21113                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21114                       00000002            _write_gfx_char_pl4.dest	set	2
21115                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21116                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21117                       00000008            .write_gfx_char_pl4.xcurs	set	8
21118                       00000000            _write_gfx_char_pl4.src	set	0
21119                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21120                       00000012            _write_gfx_char_pl4.attr	set	$12
21121                       00000006            .write_gfx_char_pl4.attr	set	6
21122                       00000010            _write_gfx_char_pl4.car	set	$10
21123                       00000004            .write_gfx_char_pl4.car	set	4
21124                       00000004            _write_gfx_char_pl4.addr	set	4
21125                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21126 52A5           BA                   03CE    mov dx, # 0x3ce
21127 52A8           B8                   FF08    mov ax, #0xff08
21128 52AB           EF                           out dx, ax
21129 52AC           B8                   0005    mov ax, #0x0005
21130 52AF           EF                           out dx, ax
21131 52B0           B8                   0003    mov ax, #0x0003
21132 52B3           EF                           out dx, ax
21133                                           ! 2429 endasm
21134                                           !BCC_ENDASM
21135                                           !BCC_EOS
21136                                           ! 2430 }
21137 52B4           89EC                       mov	sp,bp
21138 52B6           5D                         pop	bp
21139 52B7           C3                         ret
21140                                           ! 2431 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21141                                           ! Register BX used in function write_gfx_char_pl4
21142                                           ! 2432 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21143                       000052B8            _write_gfx_char_cga:
21144                                           !BCC_EOS
21145                                           !BCC_EOS
21146                                           !BCC_EOS
21147                                           !BCC_EOS
21148                                           !BCC_EOS
21149                                           !BCC_EOS
21150                                           ! 2433 {
21151                                           ! 2434  Bit8u i,j,mask,data;
21152                                           !BCC_EOS
21153                                           ! 2435  Bit8u *fdata;
21154                                           !BCC_EOS
21155                                           ! 2436  Bit16u a
21156                                           ! 2436 ddr,dest,src;
21157                                           !BCC_EOS
21158                                           ! 2437  fdata = &vgafont8;
21159 52B8           55                         push	bp
21160 52B9           89E5                       mov	bp,sp
21161 52BB           83C4                   F4  add	sp,*-$C
21162                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21163 52BE           BB                   0F63  mov	bx,#_vgafont8
21164 52C1           895E         FA            mov	-6[bp],bx
21165                                           !BCC_EOS
21166                                           ! 2438  addr=(xcurs*bpp)+ycurs*320;
21167                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21168 52C4           8A46         0A            mov	al,$A[bp]
21169 52C7           30E4                       xor	ah,ah
21170 52C9           B9                   0140  mov	cx,#$140
21171 52CC           F7E9                       imul	cx
21172 52CE           50                         push	ax
21173                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21174 52CF           8A46         0E            mov	al,$E[bp]
21175 52D2           30E4                       xor	ah,ah
21176 52D4           89C3                       mov	bx,ax
21177 52D6           8A46         08            mov	al,8[bp]
21178 52D9           30E4                       xor	ah,ah
21179 52DB           89D9                       mov	cx,bx
21180 52DD           F7E9                       imul	cx
21181                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21182 52DF           0346         F2            add	ax,-$E[bp]
21183 52E2           44                         inc	sp
21184 52E3           44                         inc	sp
21185                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21186 52E4           8946         F8            mov	-8[bp],ax
21187                                           !BCC_EOS
21188                                           ! 2439  src = car * 8;
21189                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21190 52E7           8A46         04            mov	al,4[bp]
21191 52EA           30E4                       xor	ah,ah
21192 52EC           B1                     03  mov	cl,*3
21193 52EE           D3E0                       shl	ax,cl
21194                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21195 52F0           8946         F4            mov	-$C[bp],ax
21196                                           !BCC_EOS
21197                                           ! 2440  for(i=0;i<8;i++)
21198                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21199 52F3           30C0                       xor	al,al
21200 52F5           8846         FF            mov	-1[bp],al
21201                                           !BCC_EOS
21202                                           !BCC_EOS
21203                                           ! 2441   {
21204 52F8           E9         01B3            br 	.159
21205                       000052FB            .15A:
21206                                           ! 2442    dest=addr+(i>>1)*80;
21207                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21208 52FB           8A46         FF            mov	al,-1[bp]
21209 52FE           30E4                       xor	ah,ah
21210 5300           D1E8                       shr	ax,*1
21211                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21212 5302           B9                   0050  mov	cx,*$50
21213 5305           F7E9                       imul	cx
21214                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21215                                           ! Debug: expression subtree swapping
21216 5307           0346         F8            add	ax,-8[bp]
21217                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21218 530A           8946         F6            mov	-$A[bp],ax
21219                                           !BCC_EOS
21220                                           ! 2443    if (i & 1) dest += 0x2000;
21221                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21222 530D           8A46         FF            mov	al,-1[bp]
21223 5310           24                     01  and	al,*1
21224 5312           84C0                       test	al,al
21225 5314           74           09            je  	.15B
21226                       00005316            .15C:
21227                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21228 5316           8B46         F6            mov	ax,-$A[bp]
21229 5319           05                   2000  add	ax,#$2000
21230 531C           8946         F6            mov	-$A[bp],ax
21231                                           !BCC_EOS
21232                                           ! 2444    mask = 0x80;
21233                       0000531F            .15B:
21234                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21235 531F           B0                     80  mov	al,#$80
21236 5321           8846         FD            mov	-3[bp],al
21237                                           !BCC_EOS
21238                                           ! 2445    if (bpp == 1)
21239                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21240 5324           8A46         0E            mov	al,$E[bp]
21241 5327           3C                     01  cmp	al,*1
21242 5329         0F85         00B3            bne 	.15D
21243                       0000532D            .15E:
21244                                           ! 2446     {
21245                                           ! 2447      if (attr & 0x80)
21246                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21247 532D           8A46         06            mov	al,6[bp]
21248 5330           24                     80  and	al,#$80
21249 5332           84C0                       test	al,al
21250 5334           74           12            je  	.15F
21251                       00005336            .160:
21252                                           ! 2448       {
21253                                           ! 2449        data = read_byte(0xb800,dest);
21254                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21255 5336           FF76         F6            push	-$A[bp]
21256                                           ! Debug: list unsigned int = const $B800 (used reg = )
21257 5339           B8                   B800  mov	ax,#$B800
21258 533C           50                         push	ax
21259                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21260 533D           E8         2852            call	_read_byte
21261 5340           83C4                   04  add	sp,*4
21262                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21263 5343           8846         FC            mov	-4[bp],al
21264                                           !BCC_EOS
21265                                           ! 2450       }
21266                                           ! 2451      else
21267                                           ! 2452       {
21268 5346           EB           05            jmp .161
21269                       00005348            .15F:
21270                                           ! 2453        data = 0x00;
21271                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21272 5348           30C0                       xor	al,al
21273 534A           8846         FC            mov	-4[bp],al
21274                                           !BCC_EOS
21275                                           ! 2454       }
21276                                           ! 2455      for(j=0;j<8;j++)
21277                       0000534D            .161:
21278                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21279 534D           30C0                       xor	al,al
21280 534F           8846         FE            mov	-2[bp],al
21281                                           !BCC_EOS
21282                                           !BCC_EOS
21283                                           ! 2456       {
21284 5352           EB           6F            jmp .164
21285                       00005354            .165:
21286                                           ! 2457        if (fdata[src+i] & mask)
21287                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21288 5354           8B46         F4            mov	ax,-$C[bp]
21289 5357           0246         FF            add	al,-1[bp]
21290 535A           80D4                   00  adc	ah,*0
21291                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21292 535D           0346         FA            add	ax,-6[bp]
21293 5360           89C3                       mov	bx,ax
21294                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21295 5362           8A07                       mov	al,[bx]
21296 5364           2246         FD            and	al,-3[bp]
21297 5367           84C0                       test	al,al
21298 5369           74           47            je  	.166
21299                       0000536B            .167:
21300                                           ! 2458         {
21301                                           ! 2459          if (attr & 0x80)
21302                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21303 536B           8A46         06            mov	al,6[bp]
21304 536E           24                     80  and	al,#$80
21305 5370           84C0                       test	al,al
21306 5372           74           20            je  	.168
21307                       00005374            .169:
21308                                           ! 2460           {
21309                                           ! 2461            data ^= (attr & 0x01) << (7-j);
21310                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21311 5374           B8                   0007  mov	ax,*7
21312 5377           2A46         FE            sub	al,-2[bp]
21313 537A           80DC                   00  sbb	ah,*0
21314 537D           50                         push	ax
21315                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21316 537E           8A46         06            mov	al,6[bp]
21317 5381           24                     01  and	al,*1
21318                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21319 5383           30E4                       xor	ah,ah
21320 5385           8B4E         F2            mov	cx,-$E[bp]
21321 5388           D3E0                       shl	ax,cl
21322 538A           44                         inc	sp
21323 538B           44                         inc	sp
21324                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21325 538C           3246         FC            xor	al,-4[bp]
21326 538F           8846         FC            mov	-4[bp],al
21327                                           !BCC_EOS
21328                                           ! 2462           }
21329                                           ! 2463          else
21330                                           ! 2464           {
21331 5392           EB           1E            jmp .16A
21332                       00005394            .168:
21333                                           ! 2465            data |= (attr & 0x01) << (7-j);
21334                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21335 5394           B8                   0007  mov	ax,*7
21336 5397           2A46         FE            sub	al,-2[bp]
21337 539A           80DC                   00  sbb	ah,*0
21338 539D           50                         push	ax
21339                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21340 539E           8A46         06            mov	al,6[bp]
21341 53A1           24                     01  and	al,*1
21342                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21343 53A3           30E4                       xor	ah,ah
21344 53A5           8B4E         F2            mov	cx,-$E[bp]
21345 53A8           D3E0                       shl	ax,cl
21346 53AA           44                         inc	sp
21347 53AB           44                         inc	sp
21348                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21349 53AC           0A46         FC            or	al,-4[bp]
21350 53AF           8846         FC            mov	-4[bp],al
21351                                           !BCC_EOS
21352                                           ! 2466           }
21353                                           ! 2467         }
21354                       000053B2            .16A:
21355                                           ! 2468        mask >>= 1;
21356                       000053B2            .166:
21357                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21358 53B2           8A46         FD            mov	al,-3[bp]
21359 53B5           30E4                       xor	ah,ah
21360 53B7           D1E8                       shr	ax,*1
21361 53B9           8846         FD            mov	-3[bp],al
21362                                           !BCC_EOS
21363                                           ! 2469       }
21364                                           ! 2470      write_byte(0xb800,dest,data);
21365                       000053BC            .163:
21366                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21367 53BC           8A46         FE            mov	al,-2[bp]
21368 53BF           40                         inc	ax
21369 53C0           8846         FE            mov	-2[bp],al
21370                       000053C3            .164:
21371                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21372 53C3           8A46         FE            mov	al,-2[bp]
21373 53C6           3C                     08  cmp	al,*8
21374 53C8           72           8A            jb 	.165
21375                       000053CA            .16B:
21376                       000053CA            .162:
21377                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21378 53CA           8A46         FC            mov	al,-4[bp]
21379 53CD           30E4                       xor	ah,ah
21380 53CF           50                         push	ax
21381                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21382 53D0           FF76         F6            push	-$A[bp]
21383                                           ! Debug: list unsigned int = const $B800 (used reg = )
21384 53D3           B8                   B800  mov	ax,#$B800
21385 53D6           50                         push	ax
21386                                           ! Debug: func () void = write_byte+0 (used reg = )
21387 53D7           E8         27DE            call	_write_byte
21388 53DA           83C4                   06  add	sp,*6
21389                                           !BCC_EOS
21390                                           ! 2471     }
21391                                           ! 2472    else
21392                                           ! 2473     {
21393 53DD           E9         00C7            br 	.16C
21394                       000053E0            .15D:
21395                                           ! 2474      while (mask > 0)
21396                                           ! 2475       {
21397 53E0           E9         00BB            br 	.16E
21398                       000053E3            .16F:
21399                                           ! 2476        if (attr & 0x80)
21400                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21401 53E3           8A46         06            mov	al,6[bp]
21402 53E6           24                     80  and	al,#$80
21403 53E8           84C0                       test	al,al
21404 53EA           74           12            je  	.170
21405                       000053EC            .171:
21406                                           ! 2477         {
21407                                           ! 2478          data = read_byte(0xb800,dest);
21408                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21409 53EC           FF76         F6            push	-$A[bp]
21410                                           ! Debug: list unsigned int = const $B800 (used reg = )
21411 53EF           B8                   B800  mov	ax,#$B800
21412 53F2           50                         push	ax
21413                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21414 53F3           E8         279C            call	_read_byte
21415 53F6           83C4                   04  add	sp,*4
21416                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21417 53F9           8846         FC            mov	-4[bp],al
21418                                           !BCC_EOS
21419                                           ! 2479         }
21420                                           ! 2480        else
21421                                           ! 2481         {
21422 53FC           EB           05            jmp .172
21423                       000053FE            .170:
21424                                           ! 2482          data = 0x00;
21425                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21426 53FE           30C0                       xor	al,al
21427 5400           8846         FC            mov	-4[bp],al
21428                                           !BCC_EOS
21429                                           ! 2483         }
21430                                           ! 2484        for(j=0;j<4;j++)
21431                       00005403            .172:
21432                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21433 5403           30C0                       xor	al,al
21434 5405           8846         FE            mov	-2[bp],al
21435                                           !BCC_EOS
21436                                           !BCC_EOS
21437                                           ! 2485         {
21438 5408           EB           73            jmp .175
21439                       0000540A            .176:
21440                                           ! 2486          if (fdata[src+i] & mask)
21441                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21442 540A           8B46         F4            mov	ax,-$C[bp]
21443 540D           0246         FF            add	al,-1[bp]
21444 5410           80D4                   00  adc	ah,*0
21445                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21446 5413           0346         FA            add	ax,-6[bp]
21447 5416           89C3                       mov	bx,ax
21448                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21449 5418           8A07                       mov	al,[bx]
21450 541A           2246         FD            and	al,-3[bp]
21451 541D           84C0                       test	al,al
21452 541F           74           4B            je  	.177
21453                       00005421            .178:
21454                                           ! 2487           {
21455                                           ! 2488            if (attr & 0x80)
21456                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21457 5421           8A46         06            mov	al,6[bp]
21458 5424           24                     80  and	al,#$80
21459 5426           84C0                       test	al,al
21460 5428           74           22            je  	.179
21461                       0000542A            .17A:
21462                                           ! 2489             {
21463                                           ! 2490              data ^= (attr & 0x03) << ((3-j)*2);
21464                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21465 542A           B8                   0003  mov	ax,*3
21466 542D           2A46         FE            sub	al,-2[bp]
21467 5430           80DC                   00  sbb	ah,*0
21468                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21469 5433           D1E0                       shl	ax,*1
21470 5435           50                         push	ax
21471                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21472 5436           8A46         06            mov	al,6[bp]
21473 5439           24                     03  and	al,*3
21474                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21475 543B           30E4                       xor	ah,ah
21476 543D           8B4E         F2            mov	cx,-$E[bp]
21477 5440           D3E0                       shl	ax,cl
21478 5442           44                         inc	sp
21479 5443           44                         inc	sp
21480                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21481 5444           3246         FC            xor	al,-4[bp]
21482 5447           8846         FC            mov	-4[bp],al
21483                                           !BCC_EOS
21484                                           ! 2491             }
21485                                           ! 2492            else
21486                                           ! 2493             {
21487 544A           EB           20            jmp .17B
21488                       0000544C            .179:
21489                                           ! 2494              data |= (attr & 0x03) << ((3-j)*2);
21490                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21491 544C           B8                   0003  mov	ax,*3
21492 544F           2A46         FE            sub	al,-2[bp]
21493 5452           80DC                   00  sbb	ah,*0
21494                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21495 5455           D1E0                       shl	ax,*1
21496 5457           50                         push	ax
21497                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21498 5458           8A46         06            mov	al,6[bp]
21499 545B           24                     03  and	al,*3
21500                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21501 545D           30E4                       xor	ah,ah
21502 545F           8B4E         F2            mov	cx,-$E[bp]
21503 5462           D3E0                       shl	ax,cl
21504 5464           44                         inc	sp
21505 5465           44                         inc	sp
21506                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21507 5466           0A46         FC            or	al,-4[bp]
21508 5469           8846         FC            mov	-4[bp],al
21509                                           !BCC_EOS
21510                                           ! 2495             }
21511                                           ! 2496           }
21512                       0000546C            .17B:
21513                                           ! 2497          mask >>= 1;
21514                       0000546C            .177:
21515                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21516 546C           8A46         FD            mov	al,-3[bp]
21517 546F           30E4                       xor	ah,ah
21518 5471           D1E8                       shr	ax,*1
21519 5473           8846         FD            mov	-3[bp],al
21520                                           !BCC_EOS
21521                                           ! 2498         }
21522                                           ! 2499        write_byte(0xb800,dest,data);
21523                       00005476            .174:
21524                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21525 5476           8A46         FE            mov	al,-2[bp]
21526 5479           40                         inc	ax
21527 547A           8846         FE            mov	-2[bp],al
21528                       0000547D            .175:
21529                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21530 547D           8A46         FE            mov	al,-2[bp]
21531 5480           3C                     04  cmp	al,*4
21532 5482           72           86            jb 	.176
21533                       00005484            .17C:
21534                       00005484            .173:
21535                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21536 5484           8A46         FC            mov	al,-4[bp]
21537 5487           30E4                       xor	ah,ah
21538 5489           50                         push	ax
21539                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21540 548A           FF76         F6            push	-$A[bp]
21541                                           ! Debug: list unsigned int = const $B800 (used reg = )
21542 548D           B8                   B800  mov	ax,#$B800
21543 5490           50                         push	ax
21544                                           ! Debug: func () void = write_byte+0 (used reg = )
21545 5491           E8         2724            call	_write_byte
21546 5494           83C4                   06  add	sp,*6
21547                                           !BCC_EOS
21548                                           ! 2500        dest += 1;
21549                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21550 5497           8B46         F6            mov	ax,-$A[bp]
21551 549A           40                         inc	ax
21552 549B           8946         F6            mov	-$A[bp],ax
21553                                           !BCC_EOS
21554                                           ! 2501       }
21555                                           ! 2502     }
21556                       0000549E            .16E:
21557                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21558 549E           8A46         FD            mov	al,-3[bp]
21559 54A1           84C0                       test	al,al
21560 54A3         0F85         FF3C            bne 	.16F
21561                       000054A7            .17D:
21562                       000054A7            .16D:
21563                                           ! 2503   }
21564                       000054A7            .16C:
21565                                           ! 2504 }
21566                       000054A7            .158:
21567                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21568 54A7           8A46         FF            mov	al,-1[bp]
21569 54AA           40                         inc	ax
21570 54AB           8846         FF            mov	-1[bp],al
21571                       000054AE            .159:
21572                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21573 54AE           8A46         FF            mov	al,-1[bp]
21574 54B1           3C                     08  cmp	al,*8
21575 54B3         0F82         FE44            blo 	.15A
21576                       000054B7            .17E:
21577                       000054B7            .157:
21578 54B7           89EC                       mov	sp,bp
21579 54B9           5D                         pop	bp
21580 54BA           C3                         ret
21581                                           ! 2505 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21582                                           ! Register BX used in function write_gfx_char_cga
21583                                           ! 2506 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21584                       000054BB            _write_gfx_char_lin:
21585                                           !BCC_EOS
21586                                           !BCC_EOS
21587                                           !BCC_EOS
21588                                           !BCC_EOS
21589                                           !BCC_EOS
21590                                           ! 2507 {
21591                                           ! 2508  Bit8u i,j,mask,data;
21592                                           !BCC_EOS
21593                                           ! 2509  Bit8u *fdata;
21594                                           !BCC_EOS
21595                                           ! 2510  Bit16u addr,dest,src;
21596                                           !BCC_EOS
21597                                           ! 2511  fdata = &vgafont8;
21598 54BB           55                         push	bp
21599 54BC           89E5                       mov	bp,sp
21600 54BE           83C4                   F4  add	sp,*-$C
21601                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21602 54C1           BB                   0F63  mov	bx,#_vgafont8
21603 54C4           895E         FA            mov	-6[bp],bx
21604                                           !BCC_EOS
21605                                           ! 2512  addr=xcurs*8+ycurs*nbcols*64;
21606                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21607 54C7           8A46         0C            mov	al,$C[bp]
21608 54CA           30E4                       xor	ah,ah
21609 54CC           89C3                       mov	bx,ax
21610 54CE           8A46         0A            mov	al,$A[bp]
21611 54D1           30E4                       xor	ah,ah
21612 54D3           89D9                       mov	cx,bx
21613 54D5           F7E9                       imul	cx
21614                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21615 54D7           B1                     06  mov	cl,*6
21616 54D9           D3E0                       shl	ax,cl
21617 54DB           50                         push	ax
21618                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21619 54DC           8A46         08            mov	al,8[bp]
21620 54DF           30E4                       xor	ah,ah
21621 54E1           B1                     03  mov	cl,*3
21622 54E3           D3E0                       shl	ax,cl
21623                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21624 54E5           0346         F2            add	ax,-$E[bp]
21625 54E8           44                         inc	sp
21626 54E9           44                         inc	sp
21627                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21628 54EA           8946         F8            mov	-8[bp],ax
21629                                           !BCC_EOS
21630                                           ! 2513  src = car * 8;
21631                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21632 54ED           8A46         04            mov	al,4[bp]
21633 54F0           30E4                       xor	ah,ah
21634 54F2           B1                     03  mov	cl,*3
21635 54F4           D3E0                       shl	ax,cl
21636                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21637 54F6           8946         F4            mov	-$C[bp],ax
21638                                           !BCC_EOS
21639                                           ! 2514  for(i=0;i<8;i++)
21640                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21641 54F9           30C0                       xor	al,al
21642 54FB           8846         FF            mov	-1[bp],al
21643                                           !BCC_EOS
21644                                           !BCC_EOS
21645                                           ! 2515   {
21646 54FE           E9         0081            br 	.181
21647                       00005501            .182:
21648                                           ! 2516    dest=addr+i*nbcols*8;
21649                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21650 5501           8A46         0C            mov	al,$C[bp]
21651 5504           30E4                       xor	ah,ah
21652 5506           89C3                       mov	bx,ax
21653 5508           8A46         FF            mov	al,-1[bp]
21654 550B           30E4                       xor	ah,ah
21655 550D           89D9                       mov	cx,bx
21656 550F           F7E9                       imul	cx
21657                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21658 5511           B1                     03  mov	cl,*3
21659 5513           D3E0                       shl	ax,cl
21660                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21661                                           ! Debug: expression subtree swapping
21662 5515           0346         F8            add	ax,-8[bp]
21663                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21664 5518           8946         F6            mov	-$A[bp],ax
21665                                           !BCC_EOS
21666                                           ! 2517    mask = 0x80;
21667                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21668 551B           B0                     80  mov	al,#$80
21669 551D           8846         FD            mov	-3[bp],al
21670                                           !BCC_EOS
21671                                           ! 2518    for(j=0;j<8;j++)
21672                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21673 5520           30C0                       xor	al,al
21674 5522           8846         FE            mov	-2[bp],al
21675                                           !BCC_EOS
21676                                           !BCC_EOS
21677                                           ! 2519     {
21678 5525           EB           4D            jmp .185
21679                       00005527            .186:
21680                                           ! 2520      data = 0x00;
21681                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21682 5527           30C0                       xor	al,al
21683 5529           8846         FC            mov	-4[bp],al
21684                                           !BCC_EOS
21685                                           ! 2521      if (fdata[src+i] & mask)
21686                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21687 552C           8B46         F4            mov	ax,-$C[bp]
21688 552F           0246         FF            add	al,-1[bp]
21689 5532           80D4                   00  adc	ah,*0
21690                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21691 5535           0346         FA            add	ax,-6[bp]
21692 5538           89C3                       mov	bx,ax
21693                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21694 553A           8A07                       mov	al,[bx]
21695 553C           2246         FD            and	al,-3[bp]
21696 553F           84C0                       test	al,al
21697 5541           74           06            je  	.187
21698                       00005543            .188:
21699                                           ! 2522       {
21700                                           ! 2523        data = attr;
21701                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21702 5543           8A46         06            mov	al,6[bp]
21703 5546           8846         FC            mov	-4[bp],al
21704                                           !BCC_EOS
21705                                           ! 2524       }
21706                                           ! 2525      write_byte(0xa000,dest+j,data);
21707                       00005549            .187:
21708                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21709 5549           8A46         FC            mov	al,-4[bp]
21710 554C           30E4                       xor	ah,ah
21711 554E           50                         push	ax
21712                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21713 554F           8B46         F6            mov	ax,-$A[bp]
21714 5552           0246         FE            add	al,-2[bp]
21715 5555           80D4                   00  adc	ah,*0
21716                                           ! Debug: list unsigned int = ax+0 (used reg = )
21717 5558           50                         push	ax
21718                                           ! Debug: list unsigned int = const $A000 (used reg = )
21719 5559           B8                   A000  mov	ax,#$A000
21720 555C           50                         push	ax
21721                                           ! Debug: func () void = write_byte+0 (used reg = )
21722 555D           E8         2658            call	_write_byte
21723 5560           83C4                   06  add	sp,*6
21724                                           !BCC_EOS
21725                                           ! 2526      mask >>= 1;
21726                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21727 5563           8A46         FD            mov	al,-3[bp]
21728 5566           30E4                       xor	ah,ah
21729 5568           D1E8                       shr	ax,*1
21730 556A           8846         FD            mov	-3[bp],al
21731                                           !BCC_EOS
21732                                           ! 2527     }
21733                                           ! 2528   }
21734                       0000556D            .184:
21735                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21736 556D           8A46         FE            mov	al,-2[bp]
21737 5570           40                         inc	ax
21738 5571           8846         FE            mov	-2[bp],al
21739                       00005574            .185:
21740                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21741 5574           8A46         FE            mov	al,-2[bp]
21742 5577           3C                     08  cmp	al,*8
21743 5579           72           AC            jb 	.186
21744                       0000557B            .189:
21745                       0000557B            .183:
21746                                           ! 2529 }
21747                       0000557B            .180:
21748                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21749 557B           8A46         FF            mov	al,-1[bp]
21750 557E           40                         inc	ax
21751 557F           8846         FF            mov	-1[bp],al
21752                       00005582            .181:
21753                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21754 5582           8A46         FF            mov	al,-1[bp]
21755 5585           3C                     08  cmp	al,*8
21756 5587         0F82         FF76            blo 	.182
21757                       0000558B            .18A:
21758                       0000558B            .17F:
21759 558B           89EC                       mov	sp,bp
21760 558D           5D                         pop	bp
21761 558E           C3                         ret
21762                                           ! 2530 static void biosfn_write_char_attr (car,page,attr,count)
21763                                           ! Register BX used in function write_gfx_char_lin
21764                                           ! 2531 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21765                       0000558F            _biosfn_write_char_attr:
21766                                           !BCC_EOS
21767                                           !BCC_EOS
21768                                           !BCC_EOS
21769                                           !BCC_EOS
21770                                           ! 2532 {
21771                                           ! 2533  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21772                                           !BCC_EOS
21773                                           ! 2534  Bit16u nbcols,nbrows,address;
21774                                           !BCC_EOS
21775                                           ! 2535  Bit16u cursor,dummy;
21776                                           !BCC_EOS
21777                                           ! 2536  mode=read_byte(0x40,0x49);
21778 558F           55                         push	bp
21779 5590           89E5                       mov	bp,sp
21780 5592           83C4                   F0  add	sp,*-$10
21781                                           ! Debug: list int = const $49 (used reg = )
21782 5595           B8                   0049  mov	ax,*$49
21783 5598           50                         push	ax
21784                                           ! Debug: list int = const $40 (used reg = )
21785 5599           B8                   0040  mov	ax,*$40
21786 559C           50                         push	ax
21787                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21788 559D           E8         25F2            call	_read_byte
21789 55A0           83C4                   04  add	sp,*4
21790                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21791 55A3           8846         FC            mov	-4[bp],al
21792                                           !BCC_EOS
21793                                           ! 2537  line=find_vga_entry(mode);
21794                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21795 55A6           8A46         FC            mov	al,-4[bp]
21796 55A9           30E4                       xor	ah,ah
21797 55AB           50                         push	ax
21798                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21799 55AC           E8         24F7            call	_find_vga_entry
21800 55AF           44                         inc	sp
21801 55B0           44                         inc	sp
21802                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21803 55B1           8846         FB            mov	-5[bp],al
21804                                           !BCC_EOS
21805                                           ! 2538  if(line==0xFF)return;
21806                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21807 55B4           8A46         FB            mov	al,-5[bp]
21808 55B7           3C                     FF  cmp	al,#$FF
21809 55B9           75           04            jne 	.18B
21810                       000055BB            .18C:
21811 55BB           89EC                       mov	sp,bp
21812 55BD           5D                         pop	bp
21813 55BE           C3                         ret
21814                                           !BCC_EOS
21815                                           ! 2539  biosfn_get_cursor_pos(page,&dummy,&cursor);
21816                       000055BF            .18B:
21817                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21818 55BF           8D5E         F2            lea	bx,-$E[bp]
21819 55C2           53                         push	bx
21820                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21821 55C3           8D5E         F0            lea	bx,-$10[bp]
21822 55C6           53                         push	bx
21823                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21824 55C7           8A46         06            mov	al,6[bp]
21825 55CA           30E4                       xor	ah,ah
21826 55CC           50                         push	ax
21827                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21828 55CD           E8         EE7C            call	_biosfn_get_cursor_pos
21829 55D0           83C4                   06  add	sp,*6
21830                                           !BCC_EOS
21831                                           ! 2540  xcurs=cursor&0x00f
21832                                           ! 2540 f;ycurs=(cursor&0xff00)>>8;
21833                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21834 55D3           8A46         F2            mov	al,-$E[bp]
21835                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21836 55D6           8846         FE            mov	-2[bp],al
21837                                           !BCC_EOS
21838                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21839 55D9           8B46         F2            mov	ax,-$E[bp]
21840 55DC           30C0                       xor	al,al
21841                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21842 55DE           88E0                       mov	al,ah
21843 55E0           30E4                       xor	ah,ah
21844                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21845 55E2           8846         FD            mov	-3[bp],al
21846                                           !BCC_EOS
21847                                           ! 2541  nbrows=read_byte(0x40,0x84)+1;
21848                                           ! Debug: list int = const $84 (used reg = )
21849 55E5           B8                   0084  mov	ax,#$84
21850 55E8           50                         push	ax
21851                                           ! Debug: list int = const $40 (used reg = )
21852 55E9           B8                   0040  mov	ax,*$40
21853 55EC           50                         push	ax
21854                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21855 55ED           E8         25A2            call	_read_byte
21856 55F0           83C4                   04  add	sp,*4
21857                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21858 55F3           30E4                       xor	ah,ah
21859                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21860 55F5           40                         inc	ax
21861 55F6           8946         F6            mov	-$A[bp],ax
21862                                           !BCC_EOS
21863                                           ! 2542  nbcols=read_word(0x40,0x4A);
21864                                           ! Debug: list int = const $4A (used reg = )
21865 55F9           B8                   004A  mov	ax,*$4A
21866 55FC           50                         push	ax
21867                                           ! Debug: list int = const $40 (used reg = )
21868 55FD           B8                   0040  mov	ax,*$40
21869 5600           50                         push	ax
21870                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21871 5601           E8         25A1            call	_read_word
21872 5604           83C4                   04  add	sp,*4
21873                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21874 5607           8946         F8            mov	-8[bp],ax
21875                                           !BCC_EOS
21876                                           ! 2543  if(vga_modes[line].class==0x00)
21877                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21878 560A           8A46         FB            mov	al,-5[bp]
21879 560D           30E4                       xor	ah,ah
21880 560F           B1                     03  mov	cl,*3
21881 5611           D3E0                       shl	ax,cl
21882 5613           89C3                       mov	bx,ax
21883 5615           81C3                 01FF  add	bx,#_vga_modes
21884                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21885 5619           8A47         01            mov	al,1[bx]
21886 561C           84C0                       test	al,al
21887 561E         0F85         006A            bne 	.18D
21888                       00005622            .18E:
21889                                           ! 2544   {
21890                                           ! 2545    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21891                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21892 5622           8A46         FD            mov	al,-3[bp]
21893 5625           30E4                       xor	ah,ah
21894 5627           8B4E         F8            mov	cx,-8[bp]
21895 562A           F7E9                       imul	cx
21896                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21897                                           ! Debug: expression subtree swapping
21898 562C           0246         FE            add	al,-2[bp]
21899 562F           80D4                   00  adc	ah,*0
21900                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21901 5632           D1E0                       shl	ax,*1
21902 5634           50                         push	ax
21903                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21904 5635           8B46         F8            mov	ax,-8[bp]
21905 5638           8B4E         F6            mov	cx,-$A[bp]
21906 563B           F7E9                       imul	cx
21907                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21908 563D           D1E0                       shl	ax,*1
21909                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21910 563F           0C                     FF  or	al,#$FF
21911                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21912                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21913 5641           89C3                       mov	bx,ax
21914 5643           8A46         06            mov	al,6[bp]
21915 5646           30E4                       xor	ah,ah
21916 5648           93                         xchg	ax,bx
21917 5649           40                         inc	ax
21918 564A           89D9                       mov	cx,bx
21919 564C           F7E9                       imul	cx
21920                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21921 564E           0346         EE            add	ax,-$12[bp]
21922 5651           44                         inc	sp
21923 5652           44                         inc	sp
21924                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21925 5653           8946         F4            mov	-$C[bp],ax
21926                                           !BCC_EOS
21927                                           ! 2546    dummy=((Bit16u)attr<<8)+car;
21928                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21929 5656           8A46         08            mov	al,8[bp]
21930 5659           30E4                       xor	ah,ah
21931                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21932 565B           88C4                       mov	ah,al
21933 565D           30C0                       xor	al,al
21934                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21935 565F           0246         04            add	al,4[bp]
21936 5662           80D4                   00  adc	ah,*0
21937                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21938 5665           8946         F0            mov	-$10[bp],ax
21939                                           !BCC_EOS
21940                                           ! 2547    memsetw(vga_modes[line].sstart,address,dummy,count);
21941                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21942 5668           FF76         0A            push	$A[bp]
21943                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21944 566B           FF76         F0            push	-$10[bp]
21945                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21946 566E           FF76         F4            push	-$C[bp]
21947                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21948 5671           8A46         FB            mov	al,-5[bp]
21949 5674           30E4                       xor	ah,ah
21950 5676           B1                     03  mov	cl,*3
21951 5678           D3E0                       shl	ax,cl
21952 567A           89C3                       mov	bx,ax
21953 567C           81C3                 01FF  add	bx,#_vga_modes
21954                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21955 5680           FF77         04            push	4[bx]
21956                                           ! Debug: func () void = memsetw+0 (used reg = )
21957 5683           E8         2487            call	_memsetw
21958 5686           83C4                   08  add	sp,*8
21959                                           !BCC_EOS
21960                                           ! 2548   }
21961                                           ! 2549  else
21962                                           ! 2550   {
21963 5689           E9         00F4            br 	.18F
21964                       0000568C            .18D:
21965                                           ! 2551    cheight=video_param_table[line_to_vpti[line]].cheight;
21966                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21967 568C           8A46         FB            mov	al,-5[bp]
21968 568F           30E4                       xor	ah,ah
21969 5691           89C3                       mov	bx,ax
21970                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21971 5693           8A87       027F            mov	al,_line_to_vpti[bx]
21972 5697           30E4                       xor	ah,ah
21973 5699           B1                     06  mov	cl,*6
21974 569B           D3E0                       shl	ax,cl
21975 569D           89C3                       mov	bx,ax
21976 569F           81C3                 0293  add	bx,#_video_param_table
21977                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21978 56A3           8A47         02            mov	al,2[bx]
21979 56A6           8846         FF            mov	-1[bp],al
21980                                           !BCC_EOS
21981                                           ! 2552    bpp=vga_modes[line].pixbits;
21982                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21983 56A9           8A46         FB            mov	al,-5[bp]
21984 56AC           30E4                       xor	ah,ah
21985 56AE           B1                     03  mov	cl,*3
21986 56B0           D3E0                       shl	ax,cl
21987 56B2           89C3                       mov	bx,ax
21988 56B4           81C3                 01FF  add	bx,#_vga_modes
21989                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21990 56B8           8A47         03            mov	al,3[bx]
21991 56BB           8846         FA            mov	-6[bp],al
21992                                           !BCC_EOS
21993                                           ! 2553    while((count-->0) && (xcurs<nbcols))
21994                                           ! 2554     {
21995 56BE           E9         00A7            br 	.191
21996                       000056C1            .192:
21997                                           ! 2555      switch(vga_modes[line].memmodel)
21998                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21999 56C1           8A46         FB            mov	al,-5[bp]
22000 56C4           30E4                       xor	ah,ah
22001 56C6           B1                     03  mov	cl,*3
22002 56C8           D3E0                       shl	ax,cl
22003 56CA           89C3                       mov	bx,ax
22004 56CC           81C3                 01FF  add	bx,#_vga_modes
22005 56D0           8A47         02            mov	al,2[bx]
22006                                           ! 2556       {
22007 56D3           EB           78            jmp .195
22008                                           ! 2557        case 0x04:
22009                                           ! 2558        case 0x03:
22010                       000056D5            .196:
22011                                           ! 2559          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22012                       000056D5            .197:
22013                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22014 56D5           8A46         FF            mov	al,-1[bp]
22015 56D8           30E4                       xor	ah,ah
22016 56DA           50                         push	ax
22017                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22018 56DB           FF76         F8            push	-8[bp]
22019                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22020 56DE           8A46         FD            mov	al,-3[bp]
22021 56E1           30E4                       xor	ah,ah
22022 56E3           50                         push	ax
22023                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22024 56E4           8A46         FE            mov	al,-2[bp]
22025 56E7           30E4                       xor	ah,ah
22026 56E9           50                         push	ax
22027                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22028 56EA           8A46         08            mov	al,8[bp]
22029 56ED           30E4                       xor	ah,ah
22030 56EF           50                         push	ax
22031                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22032 56F0           8A46         04            mov	al,4[bp]
22033 56F3           30E4                       xor	ah,ah
22034 56F5           50                         push	ax
22035                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22036 56F6           E8         FA4C            call	_write_gfx_char_pl4
22037 56F9           83C4                   0C  add	sp,*$C
22038                                           !BCC_EOS
22039                                           ! 2560          break;
22040 56FC           E9         0062            br 	.193
22041                                           !BCC_EOS
22042                                           ! 2561        case 0x02:
22043                                           ! 2562          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22044                       000056FF            .198:
22045                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22046 56FF           8A46         FA            mov	al,-6[bp]
22047 5702           30E4                       xor	ah,ah
22048 5704           50                         push	ax
22049                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22050 5705           FF76         F8            push	-8[bp]
22051                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22052 5708           8A46         FD            mov	al,-3[bp]
22053 570B           30E4                       xor	ah,ah
22054 570D           50                         push	ax
22055                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22056 570E           8A46         FE            mov	al,-2[bp]
22057 5711           30E4                       xor	ah,ah
22058 5713           50                         push	ax
22059                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22060 5714           8A46         08            mov	al,8[bp]
22061 5717           30E4                       xor	ah,ah
22062 5719           50                         push	ax
22063                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22064 571A           8A46         04            mov	al,4[bp]
22065 571D           30E4                       xor	ah,ah
22066 571F           50                         push	ax
22067                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22068 5720           E8         FB95            call	_write_gfx_char_cga
22069 5723           83C4                   0C  add	sp,*$C
22070                                           !BCC_EOS
22071                                           ! 2563          break;
22072 5726           EB           39            jmp .193
22073                                           !BCC_EOS
22074                                           ! 2564        case 0x05:
22075                                           ! 2565          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22076                       00005728            .199:
22077                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22078 5728           FF76         F8            push	-8[bp]
22079                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22080 572B           8A46         FD            mov	al,-3[bp]
22081 572E           30E4                       xor	ah,ah
22082 5730           50                         push	ax
22083                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22084 5731           8A46         FE            mov	al,-2[bp]
22085 5734           30E4                       xor	ah,ah
22086 5736           50                         push	ax
22087                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22088 5737           8A46         08            mov	al,8[bp]
22089 573A           30E4                       xor	ah,ah
22090 573C           50                         push	ax
22091                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22092 573D           8A46         04            mov	al,4[bp]
22093 5740           30E4                       xor	ah,ah
22094 5742           50                         push	ax
22095                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22096 5743           E8         FD75            call	_write_gfx_char_lin
22097 5746           83C4                   0A  add	sp,*$A
22098                                           !BCC_EOS
22099                                           ! 2566          break;
22100 5749           EB           16            jmp .193
22101                                           !BCC_EOS
22102                                           ! 2567       }
22103                                           ! 2568      xcurs++;
22104 574B           EB           14            jmp .193
22105                       0000574D            .195:
22106 574D           2C                     02  sub	al,*2
22107 574F           74           AE            je 	.198
22108 5751           2C                     01  sub	al,*1
22109 5753         0F84         FF7E            beq 	.197
22110 5757           2C                     01  sub	al,*1
22111 5759         0F84         FF78            beq 	.196
22112 575D           2C                     01  sub	al,*1
22113 575F           74           C7            je 	.199
22114                       00005761            .193:
22115                       FFFFFFEE            ..FFFA	=	-$12
22116                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22117 5761           8A46         FE            mov	al,-2[bp]
22118 5764           40                         inc	ax
22119 5765           8846         FE            mov	-2[bp],al
22120                                           !BCC_EOS
22121                                           ! 2569     }
22122                                           ! 2570   }
22123                       00005768            .191:
22124                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22125 5768           8B46         0A            mov	ax,$A[bp]
22126 576B           48                         dec	ax
22127 576C           8946         0A            mov	$A[bp],ax
22128                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22129 576F           3D                   FFFF  cmp	ax,*-1
22130 5772           74           0C            je  	.19A
22131                       00005774            .19B:
22132                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22133 5774           8A46         FE            mov	al,-2[bp]
22134 5777           30E4                       xor	ah,ah
22135 5779           3B46         F8            cmp	ax,-8[bp]
22136 577C         0F82         FF41            blo 	.192
22137                       00005780            .19A:
22138                       00005780            .190:
22139                                           ! 2571 }
22140                       00005780            .18F:
22141 5780           89EC                       mov	sp,bp
22142 5782           5D                         pop	bp
22143 5783           C3                         ret
22144                                           ! 2572 static void biosfn_write_char_only (car,page,attr,count)
22145                                           ! Register BX used in function biosfn_write_char_attr
22146                                           ! 2573 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22147                       00005784            _biosfn_write_char_only:
22148                                           !BCC_EOS
22149                                           !BCC_EOS
22150                                           !BCC_EOS
22151                                           !BCC_EOS
22152                                           ! 2574 {
22153                                           ! 2575  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22154                                           !BCC_EOS
22155                                           ! 2576  Bit16u nbcols,nbrows,address;
22156                                           !BCC_EOS
22157                                           ! 2577  Bit16u cursor,dummy;
22158                                           !BCC_EOS
22159                                           ! 2578  mode=read_byte(0x40,0x49);
22160 5784           55                         push	bp
22161 5785           89E5                       mov	bp,sp
22162 5787           83C4                   F0  add	sp,*-$10
22163                                           ! Debug: list int = const $49 (used reg = )
22164 578A           B8                   0049  mov	ax,*$49
22165 578D           50                         push	ax
22166                                           ! Debug: list int = const $40 (used reg = )
22167 578E           B8                   0040  mov	ax,*$40
22168 5791           50                         push	ax
22169                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22170 5792           E8         23FD            call	_read_byte
22171 5795           83C4                   04  add	sp,*4
22172                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22173 5798           8846         FC            mov	-4[bp],al
22174                                           !BCC_EOS
22175                                           ! 2579  line=find_vga_entry(mode);
22176                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22177 579B           8A46         FC            mov	al,-4[bp]
22178 579E           30E4                       xor	ah,ah
22179 57A0           50                         push	ax
22180                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22181 57A1           E8         2302            call	_find_vga_entry
22182 57A4           44                         inc	sp
22183 57A5           44                         inc	sp
22184                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22185 57A6           8846         FB            mov	-5[bp],al
22186                                           !BCC_EOS
22187                                           ! 2580  if(line==0xFF)return;
22188                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22189 57A9           8A46         FB            mov	al,-5[bp]
22190 57AC           3C                     FF  cmp	al,#$FF
22191 57AE           75           04            jne 	.19C
22192                       000057B0            .19D:
22193 57B0           89EC                       mov	sp,bp
22194 57B2           5D                         pop	bp
22195 57B3           C3                         ret
22196                                           !BCC_EOS
22197                                           ! 2581  biosfn_get_cursor_pos(page,&dummy,&cursor);
22198                       000057B4            .19C:
22199                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22200 57B4           8D5E         F2            lea	bx,-$E[bp]
22201 57B7           53                         push	bx
22202                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22203 57B8           8D5E         F0            lea	bx,-$10[bp]
22204 57BB           53                         push	bx
22205                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22206 57BC           8A46         06            mov	al,6[bp]
22207 57BF           30E4                       xor	ah,ah
22208 57C1           50                         push	ax
22209                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22210 57C2           E8         EC87            call	_biosfn_get_cursor_pos
22211 57C5           83C4                   06  add	sp,*6
22212                                           !BCC_EOS
22213                                           ! 2582  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22214                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22215 57C8           8A46         F2            mov	al,-$E[bp]
22216                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22217 57CB           8846         FE            mov	-2[bp],al
22218                                           !BCC_EOS
22219                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22220 57CE           8B46         F2            mov	ax,-$E[bp]
22221 57D1           30C0                       xor	al,al
22222                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22223 57D3           88E0                       mov	al,ah
22224 57D5           30E4                       xor	ah,ah
22225                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22226 57D7           8846         FD            mov	-3[bp],al
22227                                           !BCC_EOS
22228                                           ! 2583  nbrows=read_byte(0x40,0x84)+1;
22229                                           ! Debug: list int = const $84 (used reg = )
22230 57DA           B8                   0084  mov	ax,#$84
22231 57DD           50                         push	ax
22232                                           ! Debug: list int = const $40 (used reg = )
22233 57DE           B8                   0040  mov	ax,*$40
22234 57E1           50                         push	ax
22235                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22236 57E2           E8         23AD            call	_read_byte
22237 57E5           83C4                   04  add	sp,*4
22238                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22239 57E8           30E4                       xor	ah,ah
22240                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22241 57EA           40                         inc	ax
22242 57EB           8946         F6            mov	-$A[bp],ax
22243                                           !BCC_EOS
22244                                           ! 2584  nbcols=read_word(0x40,0x4A);
22245                                           ! Debug: list int = const $4A (used reg = )
22246 57EE           B8                   004A  mov	ax,*$4A
22247 57F1           50                         push	ax
22248                                           ! Debug: list int = const $40 (used reg = )
22249 57F2           B8                   0040  mov	ax,*$40
22250 57F5           50                         push	ax
22251                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22252 57F6           E8         23AC            call	_read_word
22253 57F9           83C4                   04  add	sp,*4
22254                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22255 57FC           8946         F8            mov	-8[bp],ax
22256                                           !BCC_EOS
22257                                           ! 2585  if(vga_modes[line].class==0x00)
22258                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22259 57FF           8A46         FB            mov	al,-5[bp]
22260 5802           30E4                       xor	ah,ah
22261 5804           B1                     03  mov	cl,*3
22262 5806           D3E0                       shl	ax,cl
22263 5808           89C3                       mov	bx,ax
22264 580A           81C3                 01FF  add	bx,#_vga_modes
22265                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22266 580E           8A47         01            mov	al,1[bx]
22267 5811           84C0                       test	al,al
22268 5813           75           6E            jne 	.19E
22269                       00005815            .19F:
22270                                           ! 2586   {
22271                                           ! 2587    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22272                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22273 5815           8A46         FD            mov	al,-3[bp]
22274 5818           30E4                       xor	ah,ah
22275 581A           8B4E         F8            mov	cx,-8[bp]
22276 581D           F7E9                       imul	cx
22277                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22278                                           ! Debug: expression subtree swapping
22279 581F           0246         FE            add	al,-2[bp]
22280 5822           80D4                   00  adc	ah,*0
22281                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22282 5825           D1E0                       shl	ax,*1
22283 5827           50                         push	ax
22284                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22285 5828           8B46         F8            mov	ax,-8[bp]
22286 582B           8B4E         F6            mov	cx,-$A[bp]
22287 582E           F7E9                       imul	cx
22288                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22289 5830           D1E0                       shl	ax,*1
22290                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22291 5832           0C                     FF  or	al,#$FF
22292                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22293                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22294 5834           89C3                       mov	bx,ax
22295 5836           8A46         06            mov	al,6[bp]
22296 5839           30E4                       xor	ah,ah
22297 583B           93                         xchg	ax,bx
22298 583C           40                         inc	ax
22299 583D           89D9                       mov	cx,bx
22300 583F           F7E9                       imul	cx
22301                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22302 5841           0346         EE            add	ax,-$12[bp]
22303 5844           44                         inc	sp
22304 5845           44                         inc	sp
22305                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22306 5846           8946         F4            mov	-$C[bp],ax
22307                                           !BCC_EOS
22308                                           ! 2588    while(count-->0)
22309                                           ! 2589     {write_byte(vga_modes[line].sstart,address,car);
22310 5849           EB           29            jmp .1A1
22311                       0000584B            .1A2:
22312                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22313 584B           8A46         04            mov	al,4[bp]
22314 584E           30E4                       xor	ah,ah
22315 5850           50                         push	ax
22316                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22317 5851           FF76         F4            push	-$C[bp]
22318                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22319 5854           8A46         FB            mov	al,-5[bp]
22320 5857           30E4                       xor	ah,ah
22321 5859           B1                     03  mov	cl,*3
22322 585B           D3E0                       shl	ax,cl
22323 585D           89C3                       mov	bx,ax
22324 585F           81C3                 01FF  add	bx,#_vga_modes
22325                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22326 5863           FF77         04            push	4[bx]
22327                                           ! Debug: func () void = write_byte+0 (used reg = )
22328 5866           E8         234F            call	_write_byte
22329 5869           83C4                   06  add	sp,*6
22330                                           !BCC_EOS
22331                                           ! 2590      address+=2;
22332                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22333 586C           8B46         F4            mov	ax,-$C[bp]
22334 586F           40                         inc	ax
22335 5870           40                         inc	ax
22336 5871           8946         F4            mov	-$C[bp],ax
22337                                           !BCC_EOS
22338                                           ! 2591     }
22339                                           ! 2592   }
22340                       00005874            .1A1:
22341                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22342 5874           8B46         0A            mov	ax,$A[bp]
22343 5877           48                         dec	ax
22344 5878           8946         0A            mov	$A[bp],ax
22345                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22346 587B           3D                   FFFF  cmp	ax,*-1
22347 587E           75           CB            jne	.1A2
22348                       00005880            .1A3:
22349                       00005880            .1A0:
22350                                           ! 2593  else
22351                                           ! 2594   {
22352 5880           E9         00F3            br 	.1A4
22353                       00005883            .19E:
22354                                           ! 2595    cheight=video_param_table[line_to_vpti[line]].cheight;
22355                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22356 5883           8A46         FB            mov	al,-5[bp]
22357 5886           30E4                       xor	ah,ah
22358 5888           89C3                       mov	bx,ax
22359                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22360 588A           8A87       027F            mov	al,_line_to_vpti[bx]
22361 588E           30E4                       xor	ah,ah
22362 5890           B1                     06  mov	cl,*6
22363 5892           D3E0                       shl	ax,cl
22364 5894           89C3                       mov	bx,ax
22365 5896           81C3                 0293  add	bx,#_video_param_table
22366                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22367 589A           8A47         02            mov	al,2[bx]
22368 589D           8846         FF            mov	-1[bp],al
22369                                           !BCC_EOS
22370                                           ! 2596    bpp=vga_modes[line].pixbits;
22371                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22372 58A0           8A46         FB            mov	al,-5[bp]
22373 58A3           30E4                       xor	ah,ah
22374 58A5           B1                     03  mov	cl,*3
22375 58A7           D3E0                       shl	ax,cl
22376 58A9           89C3                       mov	bx,ax
22377 58AB           81C3                 01FF  add	bx,#_vga_modes
22378                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22379 58AF           8A47         03            mov	al,3[bx]
22380 58B2           8846         FA            mov	-6[bp],al
22381                                           !BCC_EOS
22382                                           ! 2597    while((count-->0) && (xcurs<nbcols))
22383                                           ! 2598     {
22384 58B5           E9         00A6            br 	.1A6
22385                       000058B8            .1A7:
22386                                           ! 2599      switch(vga_modes[line].memmodel)
22387                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22388 58B8           8A46         FB            mov	al,-5[bp]
22389 58BB           30E4                       xor	ah,ah
22390 58BD           B1                     03  mov	cl,*3
22391 58BF           D3E0                       shl	ax,cl
22392 58C1           89C3                       mov	bx,ax
22393 58C3           81C3                 01FF  add	bx,#_vga_modes
22394 58C7           8A47         02            mov	al,2[bx]
22395                                           ! 2600       {
22396 58CA           EB           77            jmp .1AA
22397                                           ! 2601        case 0x04:
22398                                           ! 2602        case 0x03:
22399                       000058CC            .1AB:
22400                                           ! 2603          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22401                       000058CC            .1AC:
22402                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22403 58CC           8A46         FF            mov	al,-1[bp]
22404 58CF           30E4                       xor	ah,ah
22405 58D1           50                         push	ax
22406                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22407 58D2           FF76         F8            push	-8[bp]
22408                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22409 58D5           8A46         FD            mov	al,-3[bp]
22410 58D8           30E4                       xor	ah,ah
22411 58DA           50                         push	ax
22412                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22413 58DB           8A46         FE            mov	al,-2[bp]
22414 58DE           30E4                       xor	ah,ah
22415 58E0           50                         push	ax
22416                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22417 58E1           8A46         08            mov	al,8[bp]
22418 58E4           30E4                       xor	ah,ah
22419 58E6           50                         push	ax
22420                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22421 58E7           8A46         04            mov	al,4[bp]
22422 58EA           30E4                       xor	ah,ah
22423 58EC           50                         push	ax
22424                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22425 58ED           E8         F855            call	_write_gfx_char_pl4
22426 58F0           83C4                   0C  add	sp,*$C
22427                                           !BCC_EOS
22428                                           ! 2604          break;
22429 58F3           EB           62            jmp .1A8
22430                                           !BCC_EOS
22431                                           ! 2605        case 0x02:
22432                                           ! 2606          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22433                       000058F5            .1AD:
22434                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22435 58F5           8A46         FA            mov	al,-6[bp]
22436 58F8           30E4                       xor	ah,ah
22437 58FA           50                         push	ax
22438                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22439 58FB           FF76         F8            push	-8[bp]
22440                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22441 58FE           8A46         FD            mov	al,-3[bp]
22442 5901           30E4                       xor	ah,ah
22443 5903           50                         push	ax
22444                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22445 5904           8A46         FE            mov	al,-2[bp]
22446 5907           30E4                       xor	ah,ah
22447 5909           50                         push	ax
22448                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22449 590A           8A46         08            mov	al,8[bp]
22450 590D           30E4                       xor	ah,ah
22451 590F           50                         push	ax
22452                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22453 5910           8A46         04            mov	al,4[bp]
22454 5913           30E4                       xor	ah,ah
22455 5915           50                         push	ax
22456                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22457 5916           E8         F99F            call	_write_gfx_char_cga
22458 5919           83C4                   0C  add	sp,*$C
22459                                           !BCC_EOS
22460                                           ! 2607          break;
22461 591C           EB           39            jmp .1A8
22462                                           !BCC_EOS
22463                                           ! 2608        case 0x05:
22464                                           ! 2609          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22465                       0000591E            .1AE:
22466                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22467 591E           FF76         F8            push	-8[bp]
22468                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22469 5921           8A46         FD            mov	al,-3[bp]
22470 5924           30E4                       xor	ah,ah
22471 5926           50                         push	ax
22472                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22473 5927           8A46         FE            mov	al,-2[bp]
22474 592A           30E4                       xor	ah,ah
22475 592C           50                         push	ax
22476                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22477 592D           8A46         08            mov	al,8[bp]
22478 5930           30E4                       xor	ah,ah
22479 5932           50                         push	ax
22480                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22481 5933           8A46         04            mov	al,4[bp]
22482 5936           30E4                       xor	ah,ah
22483 5938           50                         push	ax
22484                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22485 5939           E8         FB7F            call	_write_gfx_char_lin
22486 593C           83C4                   0A  add	sp,*$A
22487                                           !BCC_EOS
22488                                           ! 2610          break;
22489 593F           EB           16            jmp .1A8
22490                                           !BCC_EOS
22491                                           ! 2611       }
22492                                           ! 2612      xcurs++;
22493 5941           EB           14            jmp .1A8
22494                       00005943            .1AA:
22495 5943           2C                     02  sub	al,*2
22496 5945           74           AE            je 	.1AD
22497 5947           2C                     01  sub	al,*1
22498 5949         0F84         FF7F            beq 	.1AC
22499 594D           2C                     01  sub	al,*1
22500 594F         0F84         FF79            beq 	.1AB
22501 5953           2C                     01  sub	al,*1
22502 5955           74           C7            je 	.1AE
22503                       00005957            .1A8:
22504                       FFFFFFEE            ..FFF9	=	-$12
22505                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22506 5957           8A46         FE            mov	al,-2[bp]
22507 595A           40                         inc	ax
22508 595B           8846         FE            mov	-2[bp],al
22509                                           !BCC_EOS
22510                                           ! 2613     }
22511                                           ! 2614   }
22512                       0000595E            .1A6:
22513                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22514 595E           8B46         0A            mov	ax,$A[bp]
22515 5961           48                         dec	ax
22516 5962           8946         0A            mov	$A[bp],ax
22517                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22518 5965           3D                   FFFF  cmp	ax,*-1
22519 5968           74           0C            je  	.1AF
22520                       0000596A            .1B0:
22521                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22522 596A           8A46         FE            mov	al,-2[bp]
22523 596D           30E4                       xor	ah,ah
22524 596F           3B46         F8            cmp	ax,-8[bp]
22525 5972         0F82         FF42            blo 	.1A7
22526                       00005976            .1AF:
22527                       00005976            .1A5:
22528                                           ! 2615 }
22529                       00005976            .1A4:
22530 5976           89EC                       mov	sp,bp
22531 5978           5D                         pop	bp
22532 5979           C3                         ret
22533                                           ! 2616 #asm
22534                                           !BCC_ASM
22535                       00000008            _biosfn_write_char_only.count	set	8
22536                       00000006            _biosfn_write_char_only.attr	set	6
22537                       00000004            _biosfn_write_char_only.page	set	4
22538                       00000002            _biosfn_write_char_only.car	set	2
22539                       0000597A            biosfn_group_0B:
22540 597A           80FF                   00    cmp bh, #0x00
22541 597D           74           06              je biosfn_set_border_color
22542 597F           80FF                   01    cmp bh, #0x01
22543 5982           74           40              je biosfn_set_palette
22544 5984           C3                           ret
22545                       00005985            biosfn_set_border_color:
22546 5985           50                           push ax
22547 5986           53                           push bx
22548 5987           51                           push cx
22549 5988           52                           push dx
22550 5989           BA                   03DA    mov dx, # 0x3da
22551 598C           EC                           in al, dx
22552 598D           BA                   03C0    mov dx, # 0x3c0
22553 5990           B0                     00    mov al, #0x00
22554 5992           EE                           out dx, al
22555 5993           88D8                         mov al, bl
22556 5995           24                     0F    and al, #0x0f
22557 5997           A8                     08    test al, #0x08
22558 5999           74           02              jz set_low_border
22559 599B           04                     08    add al, #0x08
22560                       0000599D            set_low_border:
22561 599D           EE                           out dx, al
22562 599E           B1                     01    mov cl, #0x01
22563 59A0           80E3                   10    and bl, #0x10
22564                       000059A3            set_intensity_loop:
22565 59A3           BA                   03C0    mov dx, # 0x3c0
22566 59A6           88C8                         mov al, cl
22567 59A8           EE                           out dx, al
22568 59A9           BA                   03C1    mov dx, # 0x3c1
22569 59AC           EC                           in al, dx
22570 59AD           24                     EF    and al, #0xef
22571 59AF           08D8                         or al, bl
22572 59B1           BA                   03C0    mov dx, # 0x3c0
22573 59B4           EE                           out dx, al
22574 59B5           FEC1                         inc cl
22575 59B7           80F9                   04    cmp cl, #0x04
22576 59BA           75           E7              jne set_intensity_loop
22577 59BC           B0                     20    mov al, #0x20
22578 59BE           EE                           out dx, al
22579 59BF           5A                           pop dx
22580 59C0           59                           pop cx
22581 59C1           5B                           pop bx
22582 59C2           58                           pop ax
22583 59C3           C3                           ret
22584                       000059C4            biosfn_set_palette:
22585 59C4           50                           push ax
22586 59C5           53                           push bx
22587 59C6           51                           push cx
22588 59C7           52                           push dx
22589 59C8           BA                   03DA    mov dx, # 0x3da
22590 59CB           EC                           in al, dx
22591 59CC           B1                     01    mov cl, #0x01
22592 59CE           80E3                   01    and bl, #0x01
22593                       000059D1            set_cga_palette_loop:
22594 59D1           BA                   03C0    mov dx, # 0x3c0
22595 59D4           88C8                         mov al, cl
22596 59D6           EE                           out dx, al
22597 59D7           BA                   03C1    mov dx, # 0x3c1
22598 59DA           EC                           in al, dx
22599 59DB           24                     FE    and al, #0xfe
22600 59DD           08D8                         or al, bl
22601 59DF           BA                   03C0    mov dx, # 0x3c0
22602 59E2           EE                           out dx, al
22603 59E3           FEC1                         inc cl
22604 59E5           80F9                   04    cmp cl, #0x04
22605 59E8           75           E7              jne set_cga_palette_loop
22606 59EA           B0                     20    mov al, #0x20
22607 59EC           EE                           out dx, al
22608 59ED           5A                           pop dx
22609 59EE           59                           pop cx
22610 59EF           5B                           pop bx
22611 59F0           58                           pop ax
22612 59F1           C3                           ret
22613                                           ! 2691 endasm
22614                                           !BCC_ENDASM
22615                                           ! 2692 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22616                                           ! Register BX used in function biosfn_write_char_only
22617                       000059F2            _biosfn_write_pixel:
22618                                           !BCC_EOS
22619                                           !BCC_EOS
22620                                           !BCC_EOS
22621                                           !BCC_EOS
22622                                           ! 2693 {
22623                                           ! 2694  Bit8u mode,line,mask,attr,data;
22624                                           !BCC_EOS
22625                                           ! 2695  Bit16u addr;
22626                                           !BCC_EOS
22627                                           ! 2696  mode=read_byte(0x40,0x49);
22628 59F2           55                         push	bp
22629 59F3           89E5                       mov	bp,sp
22630 59F5           83C4                   F8  add	sp,*-8
22631                                           ! Debug: list int = const $49 (used reg = )
22632 59F8           B8                   0049  mov	ax,*$49
22633 59FB           50                         push	ax
22634                                           ! Debug: list int = const $40 (used reg = )
22635 59FC           B8                   0040  mov	ax,*$40
22636 59FF           50                         push	ax
22637                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22638 5A00           E8         218F            call	_read_byte
22639 5A03           83C4                   04  add	sp,*4
22640                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22641 5A06           8846         FF            mov	-1[bp],al
22642                                           !BCC_EOS
22643                                           ! 2697  line=find_vga_entry(mode);
22644                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22645 5A09           8A46         FF            mov	al,-1[bp]
22646 5A0C           30E4                       xor	ah,ah
22647 5A0E           50                         push	ax
22648                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22649 5A0F           E8         2094            call	_find_vga_entry
22650 5A12           44                         inc	sp
22651 5A13           44                         inc	sp
22652                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22653 5A14           8846         FE            mov	-2[bp],al
22654                                           !BCC_EOS
22655                                           ! 2698  if(line==0xFF)return;
22656                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22657 5A17           8A46         FE            mov	al,-2[bp]
22658 5A1A           3C                     FF  cmp	al,#$FF
22659 5A1C           75           04            jne 	.1B1
22660                       00005A1E            .1B2:
22661 5A1E           89EC                       mov	sp,bp
22662 5A20           5D                         pop	bp
22663 5A21           C3                         ret
22664                                           !BCC_EOS
22665                                           ! 2699  if(vga_modes[line].class==0x00)return;
22666                       00005A22            .1B1:
22667                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22668 5A22           8A46         FE            mov	al,-2[bp]
22669 5A25           30E4                       xor	ah,ah
22670 5A27           B1                     03  mov	cl,*3
22671 5A29           D3E0                       shl	ax,cl
22672 5A2B           89C3                       mov	bx,ax
22673 5A2D           81C3                 01FF  add	bx,#_vga_modes
22674                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22675 5A31           8A47         01            mov	al,1[bx]
22676 5A34           84C0                       test	al,al
22677 5A36           75           04            jne 	.1B3
22678                       00005A38            .1B4:
22679 5A38           89EC                       mov	sp,bp
22680 5A3A           5D                         pop	bp
22681 5A3B           C3                         ret
22682                                           !BCC_EOS
22683                                           ! 2700  switch(vga_modes[line].memmodel)
22684                       00005A3C            .1B3:
22685                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22686 5A3C           8A46         FE            mov	al,-2[bp]
22687 5A3F           30E4                       xor	ah,ah
22688 5A41           B1                     03  mov	cl,*3
22689 5A43           D3E0                       shl	ax,cl
22690 5A45           89C3                       mov	bx,ax
22691 5A47           81C3                 01FF  add	bx,#_vga_modes
22692 5A4B           8A47         02            mov	al,2[bx]
22693                                           ! 2701   {
22694 5A4E           E9         0223            br 	.1B7
22695                                           ! 2702    case 0x04:
22696                                           ! 2703    case 0x03:
22697                       00005A51            .1B8:
22698                                           ! 2704      addr = CX/8+DX*read_word(0x40,0x4A);
22699                       00005A51            .1B9:
22700                                           ! Debug: list int = const $4A (used reg = )
22701 5A51           B8                   004A  mov	ax,*$4A
22702 5A54           50                         push	ax
22703                                           ! Debug: list int = const $40 (used reg = )
22704 5A55           B8                   0040  mov	ax,*$40
22705 5A58           50                         push	ax
22706                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22707 5A59           E8         2149            call	_read_word
22708 5A5C           83C4                   04  add	sp,*4
22709                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22710                                           ! Debug: expression subtree swapping
22711 5A5F           8B4E         0A            mov	cx,$A[bp]
22712 5A62           F7E9                       imul	cx
22713 5A64           50                         push	ax
22714                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22715 5A65           8B46         08            mov	ax,8[bp]
22716 5A68           B1                     03  mov	cl,*3
22717 5A6A           D3E8                       shr	ax,cl
22718                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22719 5A6C           0346         F6            add	ax,0+..FFF8[bp]
22720 5A6F           44                         inc	sp
22721 5A70           44                         inc	sp
22722                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22723 5A71           8946         F8            mov	-8[bp],ax
22724                                           !BCC_EOS
22725                                           ! 2705      mask = 0x80 >> (CX & 0x07);
22726                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22727 5A74           8A46         08            mov	al,8[bp]
22728 5A77           24                     07  and	al,*7
22729                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22730 5A79           30E4                       xor	ah,ah
22731 5A7B           89C3                       mov	bx,ax
22732 5A7D           B8                   0080  mov	ax,#$80
22733 5A80           89D9                       mov	cx,bx
22734 5A82           D3F8                       sar	ax,cl
22735                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22736 5A84           8846         FD            mov	-3[bp],al
22737                                           !BCC_EOS
22738                                           ! 2706      outw(0x3ce, (mask << 8) | 0x08);
22739                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22740 5A87           8A46         FD            mov	al,-3[bp]
22741 5A8A           30E4                       xor	ah,ah
22742 5A8C           88C4                       mov	ah,al
22743 5A8E           30C0                       xor	al,al
22744                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22745 5A90           0C                     08  or	al,*8
22746                                           ! Debug: list unsigned int = ax+0 (used reg = )
22747 5A92           50                         push	ax
22748                                           ! Debug: list int = const $3CE (used reg = )
22749 5A93           B8                   03CE  mov	ax,#$3CE
22750 5A96           50                         push	ax
22751                                           ! Debug: func () void = outw+0 (used reg = )
22752 5A97           E8         2174            call	_outw
22753 5A9A           83C4                   04  add	sp,*4
22754                                           !BCC_EOS
22755                                           ! 2707      outw(0x3ce, 0x0205);
22756                                           ! Debug: list int = const $205 (used reg = )
22757 5A9D           B8                   0205  mov	ax,#$205
22758 5AA0           50                         push	ax
22759                                           ! Debug: list int = const $3CE (used reg = )
22760 5AA1           B8                   03CE  mov	ax,#$3CE
22761 5AA4           50                         push	ax
22762                                           ! Debug: func () void = outw+0 (used reg = )
22763 5AA5           E8         2166            call	_outw
22764 5AA8           83C4                   04  add	sp,*4
22765                                           !BCC_EOS
22766                                           ! 2708      data = read_byte(0xa000,addr);
22767                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22768 5AAB           FF76         F8            push	-8[bp]
22769                                           ! Debug: list unsigned int = const $A000 (used reg = )
22770 5AAE           B8                   A000  mov	ax,#$A000
22771 5AB1           50                         push	ax
22772                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22773 5AB2           E8         20DD            call	_read_byte
22774 5AB5           83C4                   04  add	sp,*4
22775                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22776 5AB8           8846         FB            mov	-5[bp],al
22777                                           !BCC_EOS
22778                                           ! 2709      if (AL & 0x80)
22779                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22780 5ABB           8A46         06            mov	al,6[bp]
22781 5ABE           24                     80  and	al,#$80
22782 5AC0           84C0                       test	al,al
22783 5AC2           74           0E            je  	.1BA
22784                       00005AC4            .1BB:
22785                                           ! 2710       {
22786                                           ! 2711        outw(0x3ce, 0x1803);
22787                                           ! Debug: list int = const $1803 (used reg = )
22788 5AC4           B8                   1803  mov	ax,#$1803
22789 5AC7           50                         push	ax
22790                                           ! Debug: list int = const $3CE (used reg = )
22791 5AC8           B8                   03CE  mov	ax,#$3CE
22792 5ACB           50                         push	ax
22793                                           ! Debug: func () void = outw+0 (used reg = )
22794 5ACC           E8         213F            call	_outw
22795 5ACF           83C4                   04  add	sp,*4
22796                                           !BCC_EOS
22797                                           ! 2712       }
22798                                           ! 2713      write_byte(0xa000,addr,AL);
22799                       00005AD2            .1BA:
22800                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22801 5AD2           8A46         06            mov	al,6[bp]
22802 5AD5           30E4                       xor	ah,ah
22803 5AD7           50                         push	ax
22804                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22805 5AD8           FF76         F8            push	-8[bp]
22806                                           ! Debug: list unsigned int = const $A000 (used reg = )
22807 5ADB           B8                   A000  mov	ax,#$A000
22808 5ADE           50                         push	ax
22809                                           ! Debug: func () void = write_byte+0 (used reg = )
22810 5ADF           E8         20D6            call	_write_byte
22811 5AE2           83C4                   06  add	sp,*6
22812                                           !BCC_EOS
22813                                           ! 2714 #asm
22814                                           !BCC_EOS
22815                                           !BCC_ASM
22816                       0000000C            _biosfn_write_pixel.BH	set	$C
22817                       00000004            .biosfn_write_pixel.BH	set	4
22818                       00000010            _biosfn_write_pixel.CX	set	$10
22819                       00000008            .biosfn_write_pixel.CX	set	8
22820                       00000006            _biosfn_write_pixel.line	set	6
22821                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22822                       0000000E            _biosfn_write_pixel.AL	set	$E
22823                       00000006            .biosfn_write_pixel.AL	set	6
22824                       00000003            _biosfn_write_pixel.data	set	3
22825                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22826                       00000012            _biosfn_write_pixel.DX	set	$12
22827                       0000000A            .biosfn_write_pixel.DX	set	$A
22828                       00000005            _biosfn_write_pixel.mask	set	5
22829                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22830                       00000004            _biosfn_write_pixel.attr	set	4
22831                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22832                       00000007            _biosfn_write_pixel.mode	set	7
22833                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22834                       00000000            _biosfn_write_pixel.addr	set	0
22835                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22836 5AE5           BA                   03CE       mov dx, # 0x3ce
22837 5AE8           B8                   FF08       mov ax, #0xff08
22838 5AEB           EF                              out dx, ax
22839 5AEC           B8                   0005       mov ax, #0x0005
22840 5AEF           EF                              out dx, ax
22841 5AF0           B8                   0003       mov ax, #0x0003
22842 5AF3           EF                              out dx, ax
22843                                           ! 2722 endasm
22844                                           !BCC_ENDASM
22845                                           !BCC_EOS
22846                                           ! 2723      break;
22847 5AF4           E9         0193            br 	.1B5
22848                                           !BCC_EOS
22849                                           ! 2724    case 0x02:
22850                                           ! 2725      if(vga_modes[line].pixbits==2)
22851                       00005AF7            .1BC:
22852                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22853 5AF7           8A46         FE            mov	al,-2[bp]
22854 5AFA           30E4                       xor	ah,ah
22855 5AFC           B1                     03  mov	cl,*3
22856 5AFE           D3E0                       shl	ax,cl
22857 5B00           89C3                       mov	bx,ax
22858 5B02           81C3                 01FF  add	bx,#_vga_modes
22859                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22860 5B06           8A47         03            mov	al,3[bx]
22861 5B09           3C                     02  cmp	al,*2
22862 5B0B           75           1C            jne 	.1BD
22863                       00005B0D            .1BE:
22864                                           ! 2726       {
22865                                           ! 2727        addr=(CX>>2)+(DX>>1)*80;
22866                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22867 5B0D           8B46         0A            mov	ax,$A[bp]
22868 5B10           D1E8                       shr	ax,*1
22869                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22870 5B12           B9                   0050  mov	cx,*$50
22871 5B15           F7E9                       imul	cx
22872 5B17           50                         push	ax
22873                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22874 5B18           8B46         08            mov	ax,8[bp]
22875 5B1B           D1E8                       shr	ax,*1
22876 5B1D           D1E8                       shr	ax,*1
22877                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22878 5B1F           0346         F6            add	ax,0+..FFF8[bp]
22879 5B22           44                         inc	sp
22880 5B23           44                         inc	sp
22881                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22882 5B24           8946         F8            mov	-8[bp],ax
22883                                           !BCC_EOS
22884                                           ! 2728       }
22885                                           ! 2729      else
22886                                           ! 2730       {
22887 5B27           EB           1A            jmp .1BF
22888                       00005B29            .1BD:
22889                                           ! 2731        addr=(CX>>3)+(DX>>1)*80;
22890                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22891 5B29           8B46         0A            mov	ax,$A[bp]
22892 5B2C           D1E8                       shr	ax,*1
22893                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22894 5B2E           B9                   0050  mov	cx,*$50
22895 5B31           F7E9                       imul	cx
22896 5B33           50                         push	ax
22897                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22898 5B34           8B46         08            mov	ax,8[bp]
22899 5B37           B1                     03  mov	cl,*3
22900 5B39           D3E8                       shr	ax,cl
22901                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22902 5B3B           0346         F6            add	ax,0+..FFF8[bp]
22903 5B3E           44                         inc	sp
22904 5B3F           44                         inc	sp
22905                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22906 5B40           8946         F8            mov	-8[bp],ax
22907                                           !BCC_EOS
22908                                           ! 2732       }
22909                                           ! 2733      if (DX & 1) addr += 0x2000;
22910                       00005B43            .1BF:
22911                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22912 5B43           8A46         0A            mov	al,$A[bp]
22913 5B46           24                     01  and	al,*1
22914 5B48           84C0                       test	al,al
22915 5B4A           74           09            je  	.1C0
22916                       00005B4C            .1C1:
22917                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22918 5B4C           8B46         F8            mov	ax,-8[bp]
22919 5B4F           05                   2000  add	ax,#$2000
22920 5B52           8946         F8            mov	-8[bp],ax
22921                                           !BCC_EOS
22922                                           ! 2734      data = read_byte(0xb800,addr);
22923                       00005B55            .1C0:
22924                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22925 5B55           FF76         F8            push	-8[bp]
22926                                           ! Debug: list unsigned int = const $B800 (used reg = )
22927 5B58           B8                   B800  mov	ax,#$B800
22928 5B5B           50                         push	ax
22929                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22930 5B5C           E8         2033            call	_read_byte
22931 5B5F           83C4                   04  add	sp,*4
22932                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22933 5B62           8846         FB            mov	-5[bp],al
22934                                           !BCC_EOS
22935                                           ! 2735      if(vga_modes[line].pixbits==2)
22936                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22937 5B65           8A46         FE            mov	al,-2[bp]
22938 5B68           30E4                       xor	ah,ah
22939 5B6A           B1                     03  mov	cl,*3
22940 5B6C           D3E0                       shl	ax,cl
22941 5B6E           89C3                       mov	bx,ax
22942 5B70           81C3                 01FF  add	bx,#_vga_modes
22943                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22944 5B74           8A47         03            mov	al,3[bx]
22945 5B77           3C                     02  cmp	al,*2
22946 5B79           75           46            jne 	.1C2
22947                       00005B7B            .1C3:
22948                                           ! 2736       {
22949                                           ! 2737  
22950                                           ! 2737       attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22951                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22952 5B7B           8A46         08            mov	al,8[bp]
22953 5B7E           24                     03  and	al,*3
22954                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22955 5B80           50                         push	ax
22956 5B81           B8                   0003  mov	ax,*3
22957 5B84           2A46         F6            sub	al,0+..FFF8[bp]
22958 5B87           80DC                   00  sbb	ah,*0
22959 5B8A           44                         inc	sp
22960 5B8B           44                         inc	sp
22961                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22962 5B8C           D1E0                       shl	ax,*1
22963 5B8E           50                         push	ax
22964                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22965 5B8F           8A46         06            mov	al,6[bp]
22966 5B92           24                     03  and	al,*3
22967                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22968 5B94           30E4                       xor	ah,ah
22969 5B96           8B4E         F6            mov	cx,0+..FFF8[bp]
22970 5B99           D3E0                       shl	ax,cl
22971 5B9B           44                         inc	sp
22972 5B9C           44                         inc	sp
22973                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22974 5B9D           8846         FC            mov	-4[bp],al
22975                                           !BCC_EOS
22976                                           ! 2738        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22977                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22978 5BA0           8A46         08            mov	al,8[bp]
22979 5BA3           24                     03  and	al,*3
22980                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22981 5BA5           50                         push	ax
22982 5BA6           B8                   0003  mov	ax,*3
22983 5BA9           2A46         F6            sub	al,0+..FFF8[bp]
22984 5BAC           80DC                   00  sbb	ah,*0
22985 5BAF           44                         inc	sp
22986 5BB0           44                         inc	sp
22987                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22988 5BB1           D1E0                       shl	ax,*1
22989                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22990 5BB3           89C3                       mov	bx,ax
22991 5BB5           B8                   0003  mov	ax,*3
22992 5BB8           89D9                       mov	cx,bx
22993 5BBA           D3E0                       shl	ax,cl
22994                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22995 5BBC           8846         FD            mov	-3[bp],al
22996                                           !BCC_EOS
22997                                           ! 2739       }
22998                                           ! 2740      else
22999                                           ! 2741       {
23000 5BBF           EB           40            jmp .1C4
23001                       00005BC1            .1C2:
23002                                           ! 2742        attr = (AL & 0x01) << (7 - (CX & 0x07));
23003                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23004 5BC1           8A46         08            mov	al,8[bp]
23005 5BC4           24                     07  and	al,*7
23006                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23007 5BC6           50                         push	ax
23008 5BC7           B8                   0007  mov	ax,*7
23009 5BCA           2A46         F6            sub	al,0+..FFF8[bp]
23010 5BCD           80DC                   00  sbb	ah,*0
23011 5BD0           44                         inc	sp
23012 5BD1           44                         inc	sp
23013 5BD2           50                         push	ax
23014                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23015 5BD3           8A46         06            mov	al,6[bp]
23016 5BD6           24                     01  and	al,*1
23017                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23018 5BD8           30E4                       xor	ah,ah
23019 5BDA           8B4E         F6            mov	cx,0+..FFF8[bp]
23020 5BDD           D3E0                       shl	ax,cl
23021 5BDF           44                         inc	sp
23022 5BE0           44                         inc	sp
23023                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23024 5BE1           8846         FC            mov	-4[bp],al
23025                                           !BCC_EOS
23026                                           ! 2743        mask = 0x01 << (7 - (CX & 0x07));
23027                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23028 5BE4           8A46         08            mov	al,8[bp]
23029 5BE7           24                     07  and	al,*7
23030                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23031 5BE9           50                         push	ax
23032 5BEA           B8                   0007  mov	ax,*7
23033 5BED           2A46         F6            sub	al,0+..FFF8[bp]
23034 5BF0           80DC                   00  sbb	ah,*0
23035 5BF3           44                         inc	sp
23036 5BF4           44                         inc	sp
23037                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23038 5BF5           89C3                       mov	bx,ax
23039 5BF7           B8                   0001  mov	ax,*1
23040 5BFA           89D9                       mov	cx,bx
23041 5BFC           D3E0                       shl	ax,cl
23042                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23043 5BFE           8846         FD            mov	-3[bp],al
23044                                           !BCC_EOS
23045                                           ! 2744       }
23046                                           ! 2745      if (AL & 0x80)
23047                       00005C01            .1C4:
23048                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23049 5C01           8A46         06            mov	al,6[bp]
23050 5C04           24                     80  and	al,#$80
23051 5C06           84C0                       test	al,al
23052 5C08           74           0B            je  	.1C5
23053                       00005C0A            .1C6:
23054                                           ! 2746       {
23055                                           ! 2747        data ^= attr;
23056                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23057 5C0A           8A46         FB            mov	al,-5[bp]
23058 5C0D           3246         FC            xor	al,-4[bp]
23059 5C10           8846         FB            mov	-5[bp],al
23060                                           !BCC_EOS
23061                                           ! 2748       }
23062                                           ! 2749      else
23063                                           ! 2750       {
23064 5C13           EB           16            jmp .1C7
23065                       00005C15            .1C5:
23066                                           ! 2751        data &= ~mask;
23067                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23068 5C15           8A46         FD            mov	al,-3[bp]
23069 5C18           30E4                       xor	ah,ah
23070 5C1A           F7D0                       not	ax
23071                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23072 5C1C           2246         FB            and	al,-5[bp]
23073 5C1F           8846         FB            mov	-5[bp],al
23074                                           !BCC_EOS
23075                                           ! 2752        data |= attr;
23076                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23077 5C22           8A46         FB            mov	al,-5[bp]
23078 5C25           0A46         FC            or	al,-4[bp]
23079 5C28           8846         FB            mov	-5[bp],al
23080                                           !BCC_EOS
23081                                           ! 2753       }
23082                                           ! 2754      write_byte(0xb800,addr,data);
23083                       00005C2B            .1C7:
23084                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23085 5C2B           8A46         FB            mov	al,-5[bp]
23086 5C2E           30E4                       xor	ah,ah
23087 5C30           50                         push	ax
23088                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23089 5C31           FF76         F8            push	-8[bp]
23090                                           ! Debug: list unsigned int = const $B800 (used reg = )
23091 5C34           B8                   B800  mov	ax,#$B800
23092 5C37           50                         push	ax
23093                                           ! Debug: func () void = write_byte+0 (used reg = )
23094 5C38           E8         1F7D            call	_write_byte
23095 5C3B           83C4                   06  add	sp,*6
23096                                           !BCC_EOS
23097                                           ! 2755      break;
23098 5C3E           EB           4A            jmp .1B5
23099                                           !BCC_EOS
23100                                           ! 2756    case 0x05:
23101                                           ! 2757      addr=CX+DX*(read_word(0x40,0x4A)*8);
23102                       00005C40            .1C8:
23103                                           ! Debug: list int = const $4A (used reg = )
23104 5C40           B8                   004A  mov	ax,*$4A
23105 5C43           50                         push	ax
23106                                           ! Debug: list int = const $40 (used reg = )
23107 5C44           B8                   0040  mov	ax,*$40
23108 5C47           50                         push	ax
23109                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23110 5C48           E8         1F5A            call	_read_word
23111 5C4B           83C4                   04  add	sp,*4
23112                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23113 5C4E           B1                     03  mov	cl,*3
23114 5C50           D3E0                       shl	ax,cl
23115                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23116                                           ! Debug: expression subtree swapping
23117 5C52           8B4E         0A            mov	cx,$A[bp]
23118 5C55           F7E9                       imul	cx
23119                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23120                                           ! Debug: expression subtree swapping
23121 5C57           0346         08            add	ax,8[bp]
23122                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23123 5C5A           8946         F8            mov	-8[bp],ax
23124                                           !BCC_EOS
23125                                           ! 2758      write_byte(0xa000,addr,AL);
23126                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23127 5C5D           8A46         06            mov	al,6[bp]
23128 5C60           30E4                       xor	ah,ah
23129 5C62           50                         push	ax
23130                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23131 5C63           FF76         F8            push	-8[bp]
23132                                           ! Debug: list unsigned int = const $A000 (used reg = )
23133 5C66           B8                   A000  mov	ax,#$A000
23134 5C69           50                         push	ax
23135                                           ! Debug: func () void = write_byte+0 (used reg = )
23136 5C6A           E8         1F4B            call	_write_byte
23137 5C6D           83C4                   06  add	sp,*6
23138                                           !BCC_EOS
23139                                           ! 2759      break;
23140 5C70           EB           18            jmp .1B5
23141                                           !BCC_EOS
23142                                           ! 2760   }
23143                                           ! 2761 }
23144 5C72           EB           16            jmp .1B5
23145                       00005C74            .1B7:
23146 5C74           2C                     02  sub	al,*2
23147 5C76         0F84         FE7D            beq 	.1BC
23148 5C7A           2C                     01  sub	al,*1
23149 5C7C         0F84         FDD1            beq 	.1B9
23150 5C80           2C                     01  sub	al,*1
23151 5C82         0F84         FDCB            beq 	.1B8
23152 5C86           2C                     01  sub	al,*1
23153 5C88           74           B6            je 	.1C8
23154                       00005C8A            .1B5:
23155                       FFFFFFF6            ..FFF8	=	-$A
23156 5C8A           89EC                       mov	sp,bp
23157 5C8C           5D                         pop	bp
23158 5C8D           C3                         ret
23159                                           ! 2762 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23160                                           ! Register BX used in function biosfn_write_pixel
23161                       00005C8E            _biosfn_read_pixel:
23162                                           !BCC_EOS
23163                                           !BCC_EOS
23164                                           !BCC_EOS
23165                                           !BCC_EOS
23166                                           ! 2763 {
23167                                           ! 2764  Bit8u mode,line,mask,attr,data,i;
23168                                           !BCC_EOS
23169                                           ! 2765  Bit16u addr;
23170                                           !BCC_EOS
23171                                           ! 2766  Bit16u ss=get_SS();
23172 5C8E           55                         push	bp
23173 5C8F           89E5                       mov	bp,sp
23174 5C91           83C4                   F6  add	sp,*-$A
23175                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23176 5C94           E8         1F87            call	_get_SS
23177                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23178 5C97           8946         F6            mov	-$A[bp],ax
23179                                           !BCC_EOS
23180                                           ! 2767  mode=read_byte(0x40,0x49);
23181                                           ! Debug: list int = const $49 (used reg = )
23182 5C9A           B8                   0049  mov	ax,*$49
23183 5C9D           50                         push	ax
23184                                           ! Debug: list int = const $40 (used reg = )
23185 5C9E           B8                   0040  mov	ax,*$40
23186 5CA1           50                         push	ax
23187                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23188 5CA2           E8         1EED            call	_read_byte
23189 5CA5           83C4                   04  add	sp,*4
23190                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23191 5CA8           8846         FF            mov	-1[bp],al
23192                                           !BCC_EOS
23193                                           ! 2768  line=find_vga_entry(mode);
23194                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23195 5CAB           8A46         FF            mov	al,-1[bp]
23196 5CAE           30E4                       xor	ah,ah
23197 5CB0           50                         push	ax
23198                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23199 5CB1           E8         1DF2            call	_find_vga_entry
23200 5CB4           44                         inc	sp
23201 5CB5           44                         inc	sp
23202                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23203 5CB6           8846         FE            mov	-2[bp],al
23204                                           !BCC_EOS
23205                                           ! 2769  if(line==0xFF)return;
23206                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23207 5CB9           8A46         FE            mov	al,-2[bp]
23208 5CBC           3C                     FF  cmp	al,#$FF
23209 5CBE           75           04            jne 	.1C9
23210                       00005CC0            .1CA:
23211 5CC0           89EC                       mov	sp,bp
23212 5CC2           5D                         pop	bp
23213 5CC3           C3                         ret
23214                                           !BCC_EOS
23215                                           ! 2770  if(vga_modes[line].class==0x00)return;
23216                       00005CC4            .1C9:
23217                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23218 5CC4           8A46         FE            mov	al,-2[bp]
23219 5CC7           30E4                       xor	ah,ah
23220 5CC9           B1                     03  mov	cl,*3
23221 5CCB           D3E0                       shl	ax,cl
23222 5CCD           89C3                       mov	bx,ax
23223 5CCF           81C3                 01FF  add	bx,#_vga_modes
23224                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23225 5CD3           8A47         01            mov	al,1[bx]
23226 5CD6           84C0                       test	al,al
23227 5CD8           75           04            jne 	.1CB
23228                       00005CDA            .1CC:
23229 5CDA           89EC                       mov	sp,bp
23230 5CDC           5D                         pop	bp
23231 5CDD           C3                         ret
23232                                           !BCC_EOS
23233                                           ! 2771  switch(vga_modes[line].memmodel)
23234                       00005CDE            .1CB:
23235                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23236 5CDE           8A46         FE            mov	al,-2[bp]
23237 5CE1           30E4                       xor	ah,ah
23238 5CE3           B1                     03  mov	cl,*3
23239 5CE5           D3E0                       shl	ax,cl
23240 5CE7           89C3                       mov	bx,ax
23241 5CE9           81C3                 01FF  add	bx,#_vga_modes
23242 5CED           8A47         02            mov	al,2[bx]
23243                                           ! 2772   {
23244 5CF0           E9         0169            br 	.1CF
23245                                           ! 2773    case 0x04:
23246                                           ! 2774    case 0x03:
23247                       00005CF3            .1D0:
23248                                           ! 2775      addr = CX/8+DX*read_word(0x40,0x4A);
23249                       00005CF3            .1D1:
23250                                           ! Debug: list int = const $4A (used reg = )
23251 5CF3           B8                   004A  mov	ax,*$4A
23252 5CF6           50                         push	ax
23253                                           ! Debug: list int = const $40 (used reg = )
23254 5CF7           B8                   0040  mov	ax,*$40
23255 5CFA           50                         push	ax
23256                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23257 5CFB           E8         1EA7            call	_read_word
23258 5CFE           83C4                   04  add	sp,*4
23259                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23260                                           ! Debug: expression subtree swapping
23261 5D01           8B4E         08            mov	cx,8[bp]
23262 5D04           F7E9                       imul	cx
23263 5D06           50                         push	ax
23264                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23265 5D07           8B46         06            mov	ax,6[bp]
23266 5D0A           B1                     03  mov	cl,*3
23267 5D0C           D3E8                       shr	ax,cl
23268                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23269 5D0E           0346         F4            add	ax,0+..FFF7[bp]
23270 5D11           44                         inc	sp
23271 5D12           44                         inc	sp
23272                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23273 5D13           8946         F8            mov	-8[bp],ax
23274                                           !BCC_EOS
23275                                           ! 2776      mask = 0x80 >> (CX & 0x07);
23276                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23277 5D16           8A46         06            mov	al,6[bp]
23278 5D19           24                     07  and	al,*7
23279                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23280 5D1B           30E4                       xor	ah,ah
23281 5D1D           89C3                       mov	bx,ax
23282 5D1F           B8                   0080  mov	ax,#$80
23283 5D22           89D9                       mov	cx,bx
23284 5D24           D3F8                       sar	ax,cl
23285                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23286 5D26           8846         FD            mov	-3[bp],al
23287                                           !BCC_EOS
23288                                           ! 2777      attr = 0x00;
23289                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23290 5D29           30C0                       xor	al,al
23291 5D2B           8846         FC            mov	-4[bp],al
23292                                           !BCC_EOS
23293                                           ! 2778      for(i=0;i<4;i++)
23294                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23295 5D2E           30C0                       xor	al,al
23296 5D30           8846         FA            mov	-6[bp],al
23297                                           !BCC_EOS
23298                                           !BCC_EOS
23299                                           ! 2779       {
23300 5D33           EB           4B            jmp .1D4
23301                       00005D35            .1D5:
23302                                           ! 2780        outw(0x3ce, (i << 8) | 0x04);
23303                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23304 5D35           8A46         FA            mov	al,-6[bp]
23305 5D38           30E4                       xor	ah,ah
23306 5D3A           88C4                       mov	ah,al
23307 5D3C           30C0                       xor	al,al
23308                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23309 5D3E           0C                     04  or	al,*4
23310                                           ! Debug: list unsigned int = ax+0 (used reg = )
23311 5D40           50                         push	ax
23312                                           ! Debug: list int = const $3CE (used reg = )
23313 5D41           B8                   03CE  mov	ax,#$3CE
23314 5D44           50                         push	ax
23315                                           ! Debug: func () void = outw+0 (used reg = )
23316 5D45           E8         1EC6            call	_outw
23317 5D48           83C4                   04  add	sp,*4
23318                                           !BCC_EOS
23319                                           ! 2781        data = read_byte(0xa000,addr) & mask;
23320                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23321 5D4B           FF76         F8            push	-8[bp]
23322                                           ! Debug: list unsigned int = const $A000 (used reg = )
23323 5D4E           B8                   A000  mov	ax,#$A000
23324 5D51           50                         push	ax
23325                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23326 5D52           E8         1E3D            call	_read_byte
23327 5D55           83C4                   04  add	sp,*4
23328                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23329 5D58           2246         FD            and	al,-3[bp]
23330                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23331 5D5B           8846         FB            mov	-5[bp],al
23332                                           !BCC_EOS
23333                                           ! 2782        if (data > 0) attr |= (0x01 << i);
23334                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23335 5D5E           8A46         FB            mov	al,-5[bp]
23336 5D61           84C0                       test	al,al
23337 5D63           74           14            je  	.1D6
23338                       00005D65            .1D7:
23339                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23340 5D65           8A46         FA            mov	al,-6[bp]
23341 5D68           30E4                       xor	ah,ah
23342 5D6A           89C3                       mov	bx,ax
23343 5D6C           B8                   0001  mov	ax,*1
23344 5D6F           89D9                       mov	cx,bx
23345 5D71           D3E0                       shl	ax,cl
23346                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23347 5D73           0A46         FC            or	al,-4[bp]
23348 5D76           8846         FC            mov	-4[bp],al
23349                                           !BCC_EOS
23350                                           ! 2783       }
23351                       00005D79            .1D6:
23352                                           ! 2784      break;
23353                       00005D79            .1D3:
23354                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23355 5D79           8A46         FA            mov	al,-6[bp]
23356 5D7C           40                         inc	ax
23357 5D7D           8846         FA            mov	-6[bp],al
23358                       00005D80            .1D4:
23359                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23360 5D80           8A46         FA            mov	al,-6[bp]
23361 5D83           3C                     04  cmp	al,*4
23362 5D85           72           AE            jb 	.1D5
23363                       00005D87            .1D8:
23364                       00005D87            .1D2:
23365 5D87           E9         00EA            br 	.1CD
23366                                           !BCC_EOS
23367                                           ! 2785    case 0x02:
23368                                           ! 2786      addr=(CX>>2)+(DX>>1)*80;
23369                       00005D8A            .1D9:
23370                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23371 5D8A           8B46         08            mov	ax,8[bp]
23372 5D8D           D1E8                       shr	ax,*1
23373                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23374 5D8F           B9                   0050  mov	cx,*$50
23375 5D92           F7E9                       imul	cx
23376 5D94           50                         push	ax
23377                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23378 5D95           8B46         06            mov	ax,6[bp]
23379 5D98           D1E8                       shr	ax,*1
23380 5D9A           D1E8                       shr	ax,*1
23381                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23382 5D9C           0346         F4            add	ax,0+..FFF7[bp]
23383 5D9F           44                         inc	sp
23384 5DA0           44                         inc	sp
23385                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23386 5DA1           8946         F8            mov	-8[bp],ax
23387                                           !BCC_EOS
23388                                           ! 2787      if (DX & 1) addr += 0x2000;
23389                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23390 5DA4           8A46         08            mov	al,8[bp]
23391 5DA7           24                     01  and	al,*1
23392 5DA9           84C0                       test	al,al
23393 5DAB           74           09            je  	.1DA
23394                       00005DAD            .1DB:
23395                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23396 5DAD           8B46         F8            mov	ax,-8[bp]
23397 5DB0           05                   2000  add	ax,#$2000
23398 5DB3           8946         F8            mov	-8[bp],ax
23399                                           !BCC_EOS
23400                                           ! 2788      data = read_byte(0xb800,addr);
23401                       00005DB6            .1DA:
23402                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23403 5DB6           FF76         F8            push	-8[bp]
23404                                           ! Debug: list unsigned int = const $B800 (used reg = )
23405 5DB9           B8                   B800  mov	ax,#$B800
23406 5DBC           50                         push	ax
23407                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23408 5DBD           E8         1DD2            call	_read_byte
23409 5DC0           83C4                   04  add	sp,*4
23410                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23411 5DC3           8846         FB            mov	-5[bp],al
23412                                           !BCC_EOS
23413                                           ! 2789      if(vga_modes[line].pixbits==2)
23414                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23415 5DC6           8A46         FE            mov	al,-2[bp]
23416 5DC9           30E4                       xor	ah,ah
23417 5DCB           B1                     03  mov	cl,*3
23418 5DCD           D3E0                       shl	ax,cl
23419 5DCF           89C3                       mov	bx,ax
23420 5DD1           81C3                 01FF  add	bx,#_vga_modes
23421                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23422 5DD5           8A47         03            mov	al,3[bx]
23423 5DD8           3C                     02  cmp	al,*2
23424 5DDA         0F85         0025            bne 	.1DC
23425                       00005DDE            .1DD:
23426                                           ! 2790       {
23427                                           ! 2791        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23428                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23429 5DDE           8A46         06            mov	al,6[bp]
23430 5DE1           24                     03  and	al,*3
23431                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23432 5DE3           50                         push	ax
23433 5DE4           B8                   0003  mov	ax,*3
23434 5DE7           2A46         F4            sub	al,0+..FFF7[bp]
23435 5DEA           80DC                   00  sbb	ah,*0
23436 5DED           44                         inc	sp
23437 5DEE           44                         inc	sp
23438                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23439 5DEF           D1E0                       shl	ax,*1
23440                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23441 5DF1           89C3                       mov	bx,ax
23442 5DF3           8A46         FB            mov	al,-5[bp]
23443 5DF6           30E4                       xor	ah,ah
23444 5DF8           89D9                       mov	cx,bx
23445 5DFA           D3E8                       shr	ax,cl
23446                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23447 5DFC           24                     03  and	al,*3
23448                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23449 5DFE           8846         FC            mov	-4[bp],al
23450                                           !BCC_EOS
23451                                           ! 2792       }
23452                                           ! 2793      else
23453                                           ! 2794       {
23454 5E01           EB           21            jmp .1DE
23455                       00005E03            .1DC:
23456                                           ! 2795        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23457                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23458 5E03           8A46         06            mov	al,6[bp]
23459 5E06           24                     07  and	al,*7
23460                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23461 5E08           50                         push	ax
23462 5E09           B8                   0007  mov	ax,*7
23463 5E0C           2A46         F4            sub	al,0+..FFF7[bp]
23464 5E0F           80DC                   00  sbb	ah,*0
23465 5E12           44                         inc	sp
23466 5E13           44                         inc	sp
23467                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23468 5E14           89C3                       mov	bx,ax
23469 5E16           8A46         FB            mov	al,-5[bp]
23470 5E19           30E4                       xor	ah,ah
23471 5E1B           89D9                       mov	cx,bx
23472 5E1D           D3E8                       shr	ax,cl
23473                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23474 5E1F           24                     01  and	al,*1
23475                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23476 5E21           8846         FC            mov	-4[bp],al
23477                                           !BCC_EOS
23478                                           ! 2796       }
23479                                           ! 2797      break;
23480                       00005E24            .1DE:
23481 5E24           EB           4E            jmp .1CD
23482                                           !BCC_EOS
23483                                           ! 2798    case 0x05:
23484                                           ! 2799      addr=CX+DX*(read_word(0x40,0x4A)*8);
23485                       00005E26            .1DF:
23486                                           ! Debug: list int = const $4A (used reg = )
23487 5E26           B8                   004A  mov	ax,*$4A
23488 5E29           50                         push	ax
23489                                           ! Debug: list int = const $40 (used reg = )
23490 5E2A           B8                   0040  mov	ax,*$40
23491 5E2D           50                         push	ax
23492                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23493 5E2E           E8         1D74            call	_read_word
23494 5E31           83C4                   04  add	sp,*4
23495                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23496 5E34           B1                     03  mov	cl,*3
23497 5E36           D3E0                       shl	ax,cl
23498                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23499                                           ! Debug: expression subtree swapping
23500 5E38           8B4E         08            mov	cx,8[bp]
23501 5E3B           F7E9                       imul	cx
23502                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23503                                           ! Debug: expression subtree swapping
23504 5E3D           0346         06            add	ax,6[bp]
23505                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23506 5E40           8946         F8            mov	-8[bp],ax
23507                                           !BCC_EOS
23508                                           ! 2800      attr=read_byte(0xa000,addr);
23509                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23510 5E43           FF76         F8            push	-8[bp]
23511                                           ! Debug: list unsigned int = const $A000 (used reg = )
23512 5E46           B8                   A000  mov	ax,#$A000
23513 5E49           50                         push	ax
23514                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23515 5E4A           E8         1D45            call	_read_byte
23516 5E4D           83C4                   04  add	sp,*4
23517                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23518 5E50           8846         FC            mov	-4[bp],al
23519                                           !BCC_EOS
23520                                           ! 2801      break;
23521 5E53           EB           1F            jmp .1CD
23522                                           !BCC_EOS
23523                                           ! 2802    default:
23524                                           ! 2803      attr = 0;
23525                       00005E55            .1E0:
23526                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23527 5E55           30C0                       xor	al,al
23528 5E57           8846         FC            mov	-4[bp],al
23529                                           !BCC_EOS
23530                                           ! 2804   }
23531                                           ! 2805  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23532 5E5A           EB           18            jmp .1CD
23533                       00005E5C            .1CF:
23534 5E5C           2C                     02  sub	al,*2
23535 5E5E         0F84         FF28            beq 	.1D9
23536 5E62           2C                     01  sub	al,*1
23537 5E64         0F84         FE8B            beq 	.1D1
23538 5E68           2C                     01  sub	al,*1
23539 5E6A         0F84         FE85            beq 	.1D0
23540 5E6E           2C                     01  sub	al,*1
23541 5E70           74           B4            je 	.1DF
23542 5E72           EB           E1            jmp	.1E0
23543                       00005E74            .1CD:
23544                       FFFFFFF4            ..FFF7	=	-$C
23545                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23546 5E74           FF76         0A            push	$A[bp]
23547                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23548 5E77           FF76         F6            push	-$A[bp]
23549                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23550 5E7A           E8         1D28            call	_read_word
23551 5E7D           83C4                   04  add	sp,*4
23552                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23553 5E80           30C0                       xor	al,al
23554                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23555 5E82           0A46         FC            or	al,-4[bp]
23556                                           ! Debug: list unsigned int = ax+0 (used reg = )
23557 5E85           50                         push	ax
23558                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23559 5E86           FF76         0A            push	$A[bp]
23560                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23561 5E89           FF76         F6            push	-$A[bp]
23562                                           ! Debug: func () void = write_word+0 (used reg = )
23563 5E8C           E8         1D41            call	_write_word
23564 5E8F           83C4                   06  add	sp,*6
23565                                           !BCC_EOS
23566                                           ! 2806 }
23567 5E92           89EC                       mov	sp,bp
23568 5E94           5D                         pop	bp
23569 5E95           C3                         ret
23570                                           ! 2807 static void biosfn_write_teletype (car, page, attr, flag)
23571                                           ! Register BX used in function biosfn_read_pixel
23572                                           ! 2808 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23573                       00005E96            _biosfn_write_teletype:
23574                                           !BCC_EOS
23575                                           !BCC_EOS
23576                                           !BCC_EOS
23577                                           !BCC_EOS
23578                                           ! 2809 {
23579                                           ! 2810  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23580                                           !BCC_EOS
23581                                           ! 2811  Bit16u nbcols,nbrows,address;
23582                                           !BCC_EOS
23583                                           ! 2812  Bit16u cursor,dummy;
23584                                           !BCC_EOS
23585                                           ! 2813  if(page==0xff)
23586 5E96           55                         push	bp
23587 5E97           89E5                       mov	bp,sp
23588 5E99           83C4                   F0  add	sp,*-$10
23589                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23590 5E9C           8A46         06            mov	al,6[bp]
23591 5E9F           3C                     FF  cmp	al,#$FF
23592 5EA1           75           11            jne 	.1E1
23593                       00005EA3            .1E2:
23594                                           ! 2814   page=read_byte(0x40,0x62);
23595                                           ! Debug: list int = const $62 (used reg = )
23596 5EA3           B8                   0062  mov	ax,*$62
23597 5EA6           50                         push	ax
23598                                           ! Debug: list int = const $40 (used reg = )
23599 5EA7           B8                   0040  mov	ax,*$40
23600 5EAA           50                         push	ax
23601                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23602 5EAB           E8         1CE4            call	_read_byte
23603 5EAE           83C4                   04  add	sp,*4
23604                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23605 5EB1           8846         06            mov	6[bp],al
23606                                           !BCC_EOS
23607                                           ! 2815  mode=read_byte(0x40,0x49);
23608                       00005EB4            .1E1:
23609                                           ! Debug: list int = const $49 (used reg = )
23610 5EB4           B8                   0049  mov	ax,*$49
23611 5EB7           50                         push	ax
23612                                           ! Debug: list int = const $40 (used reg = )
23613 5EB8           B8                   0040  mov	ax,*$40
23614 5EBB           50                         push	ax
23615                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23616 5EBC           E8         1CD3            call	_read_byte
23617 5EBF           83C4                   04  add	sp,*4
23618                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23619 5EC2           8846         FC            mov	-4[bp],al
23620                                           !BCC_EOS
23621                                           ! 2816  line=find_vga_entry(mode);
23622                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23623 5EC5           8A46         FC            mov	al,-4[bp]
23624 5EC8           30E4                       xor	ah,ah
23625 5ECA           50                         push	ax
23626                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23627 5ECB           E8         1BD8            call	_find_vga_entry
23628 5ECE           44                         inc	sp
23629 5ECF           44                         inc	sp
23630                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23631 5ED0           8846         FB            mov	-5[bp],al
23632                                           !BCC_EOS
23633                                           ! 2817  if(line==0xFF)return;
23634                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23635 5ED3           8A46         FB            mov	al,-5[bp]
23636 5ED6           3C                     FF  cmp	al,#$FF
23637 5ED8           75           04            jne 	.1E3
23638                       00005EDA            .1E4:
23639 5EDA           89EC                       mov	sp,bp
23640 5EDC           5D                         pop	bp
23641 5EDD           C3                         ret
23642                                           !BCC_EOS
23643                                           ! 2818  biosfn_get_cursor_pos(page,&dummy,&cursor);
23644                       00005EDE            .1E3:
23645                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23646 5EDE           8D5E         F2            lea	bx,-$E[bp]
23647 5EE1           53                         push	bx
23648                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23649 5EE2           8D5E         F0            lea	bx,-$10[bp]
23650 5EE5           53                         push	bx
23651                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23652 5EE6           8A46         06            mov	al,6[bp]
23653 5EE9           30E4                       xor	ah,ah
23654 5EEB           50                         push	ax
23655                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23656 5EEC           E8         E55D            call	_biosfn_get_cursor_pos
23657 5EEF           83C4                   06  add	sp,*6
23658                                           !BCC_EOS
23659                                           ! 2819  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23660                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23661 5EF2           8A46         F2            mov	al,-$E[bp]
23662                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23663 5EF5           8846         FE            mov	-2[bp],al
23664                                           !BCC_EOS
23665                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23666 5EF8           8B46         F2            mov	ax,-$E[bp]
23667 5EFB           30C0                       xor	al,al
23668                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23669 5EFD           88E0                       mov	al,ah
23670 5EFF           30E4                       xor	ah,ah
23671                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23672 5F01           8846         FD            mov	-3[bp],al
23673                                           !BCC_EOS
23674                                           ! 2820  nbrows=read_byte(0x40
23675                                           ! 2820 ,0x84)+1;
23676                                           ! Debug: list int = const $84 (used reg = )
23677 5F04           B8                   0084  mov	ax,#$84
23678 5F07           50                         push	ax
23679                                           ! Debug: list int = const $40 (used reg = )
23680 5F08           B8                   0040  mov	ax,*$40
23681 5F0B           50                         push	ax
23682                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23683 5F0C           E8         1C83            call	_read_byte
23684 5F0F           83C4                   04  add	sp,*4
23685                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23686 5F12           30E4                       xor	ah,ah
23687                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23688 5F14           40                         inc	ax
23689 5F15           8946         F6            mov	-$A[bp],ax
23690                                           !BCC_EOS
23691                                           ! 2821  nbcols=read_word(0x40,0x4A);
23692                                           ! Debug: list int = const $4A (used reg = )
23693 5F18           B8                   004A  mov	ax,*$4A
23694 5F1B           50                         push	ax
23695                                           ! Debug: list int = const $40 (used reg = )
23696 5F1C           B8                   0040  mov	ax,*$40
23697 5F1F           50                         push	ax
23698                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23699 5F20           E8         1C82            call	_read_word
23700 5F23           83C4                   04  add	sp,*4
23701                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23702 5F26           8946         F8            mov	-8[bp],ax
23703                                           !BCC_EOS
23704                                           ! 2822  switch(car)
23705 5F29           8A46         04            mov	al,4[bp]
23706                                           ! 2823   {
23707 5F2C           E9         01EA            br 	.1E7
23708                                           ! 2824    case 7:
23709                                           ! 2825     break;
23710                       00005F2F            .1E8:
23711 5F2F           E9         0208            br 	.1E5
23712                                           !BCC_EOS
23713                                           ! 2826    case 8:
23714                                           ! 2827     if(xcurs>0)xcurs--;
23715                       00005F32            .1E9:
23716                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23717 5F32           8A46         FE            mov	al,-2[bp]
23718 5F35           84C0                       test	al,al
23719 5F37           74           07            je  	.1EA
23720                       00005F39            .1EB:
23721                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23722 5F39           8A46         FE            mov	al,-2[bp]
23723 5F3C           48                         dec	ax
23724 5F3D           8846         FE            mov	-2[bp],al
23725                                           !BCC_EOS
23726                                           ! 2828     break;
23727                       00005F40            .1EA:
23728 5F40           E9         01F7            br 	.1E5
23729                                           !BCC_EOS
23730                                           ! 2829    case '\r':
23731                                           ! 2830     xcurs=0;
23732                       00005F43            .1EC:
23733                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23734 5F43           30C0                       xor	al,al
23735 5F45           8846         FE            mov	-2[bp],al
23736                                           !BCC_EOS
23737                                           ! 2831     break;
23738 5F48           E9         01EF            br 	.1E5
23739                                           !BCC_EOS
23740                                           ! 2832    case '\n':
23741                                           ! 2833     ycurs++;
23742                       00005F4B            .1ED:
23743                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23744 5F4B           8A46         FD            mov	al,-3[bp]
23745 5F4E           40                         inc	ax
23746 5F4F           8846         FD            mov	-3[bp],al
23747                                           !BCC_EOS
23748                                           ! 2834     break;
23749 5F52           E9         01E5            br 	.1E5
23750                                           !BCC_EOS
23751                                           ! 2835    case '\t':
23752                                           ! 2836     do
23753                       00005F55            .1EE:
23754                                           ! 2837      {
23755                       00005F55            .1F1:
23756                                           ! 2838       biosfn_write_teletype(' ',page,attr,flag);
23757                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23758 5F55           8A46         0A            mov	al,$A[bp]
23759 5F58           30E4                       xor	ah,ah
23760 5F5A           50                         push	ax
23761                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23762 5F5B           8A46         08            mov	al,8[bp]
23763 5F5E           30E4                       xor	ah,ah
23764 5F60           50                         push	ax
23765                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23766 5F61           8A46         06            mov	al,6[bp]
23767 5F64           30E4                       xor	ah,ah
23768 5F66           50                         push	ax
23769                                           ! Debug: list int = const $20 (used reg = )
23770 5F67           B8                   0020  mov	ax,*$20
23771 5F6A           50                         push	ax
23772                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23773 5F6B           E8         FF28            call	_biosfn_write_teletype
23774 5F6E           83C4                   08  add	sp,*8
23775                                           !BCC_EOS
23776                                           ! 2839       biosfn_get_cursor_pos(page,&dummy,&cursor);
23777                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23778 5F71           8D5E         F2            lea	bx,-$E[bp]
23779 5F74           53                         push	bx
23780                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23781 5F75           8D5E         F0            lea	bx,-$10[bp]
23782 5F78           53                         push	bx
23783                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23784 5F79           8A46         06            mov	al,6[bp]
23785 5F7C           30E4                       xor	ah,ah
23786 5F7E           50                         push	ax
23787                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23788 5F7F           E8         E4CA            call	_biosfn_get_cursor_pos
23789 5F82           83C4                   06  add	sp,*6
23790                                           !BCC_EOS
23791                                           ! 2840       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23792                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23793 5F85           8A46         F2            mov	al,-$E[bp]
23794                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23795 5F88           8846         FE            mov	-2[bp],al
23796                                           !BCC_EOS
23797                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23798 5F8B           8B46         F2            mov	ax,-$E[bp]
23799 5F8E           30C0                       xor	al,al
23800                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23801 5F90           88E0                       mov	al,ah
23802 5F92           30E4                       xor	ah,ah
23803                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23804 5F94           8846         FD            mov	-3[bp],al
23805                                           !BCC_EOS
23806                                           ! 2841      }while(xcurs%8==0);
23807                       00005F97            .1F0:
23808                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23809 5F97           8A46         FE            mov	al,-2[bp]
23810 5F9A           30E4                       xor	ah,ah
23811 5F9C           24                     07  and	al,*7
23812                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23813 5F9E           84C0                       test	al,al
23814 5FA0           74           B3            je 	.1F1
23815                       00005FA2            .1F2:
23816                                           !BCC_EOS
23817                                           ! 2842     break;
23818                       00005FA2            .1EF:
23819 5FA2           E9         0195            br 	.1E5
23820                                           !BCC_EOS
23821                                           ! 2843    default:
23822                                           ! 2844     if(vga_modes[line].class==0x00)
23823                       00005FA5            .1F3:
23824                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23825 5FA5           8A46         FB            mov	al,-5[bp]
23826 5FA8           30E4                       xor	ah,ah
23827 5FAA           B1                     03  mov	cl,*3
23828 5FAC           D3E0                       shl	ax,cl
23829 5FAE           89C3                       mov	bx,ax
23830 5FB0           81C3                 01FF  add	bx,#_vga_modes
23831                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23832 5FB4           8A47         01            mov	al,1[bx]
23833 5FB7           84C0                       test	al,al
23834 5FB9         0F85         0082            bne 	.1F4
23835                       00005FBD            .1F5:
23836                                           ! 2845      {
23837                                           ! 2846       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23838                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23839 5FBD           8A46         FD            mov	al,-3[bp]
23840 5FC0           30E4                       xor	ah,ah
23841 5FC2           8B4E         F8            mov	cx,-8[bp]
23842 5FC5           F7E9                       imul	cx
23843                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23844                                           ! Debug: expression subtree swapping
23845 5FC7           0246         FE            add	al,-2[bp]
23846 5FCA           80D4                   00  adc	ah,*0
23847                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23848 5FCD           D1E0                       shl	ax,*1
23849 5FCF           50                         push	ax
23850                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23851 5FD0           8B46         F8            mov	ax,-8[bp]
23852 5FD3           8B4E         F6            mov	cx,-$A[bp]
23853 5FD6           F7E9                       imul	cx
23854                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23855 5FD8           D1E0                       shl	ax,*1
23856                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23857 5FDA           0C                     FF  or	al,#$FF
23858                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23859                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23860 5FDC           89C3                       mov	bx,ax
23861 5FDE           8A46         06            mov	al,6[bp]
23862 5FE1           30E4                       xor	ah,ah
23863 5FE3           93                         xchg	ax,bx
23864 5FE4           40                         inc	ax
23865 5FE5           89D9                       mov	cx,bx
23866 5FE7           F7E9                       imul	cx
23867                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23868 5FE9           0346         EE            add	ax,0+..FFF6[bp]
23869 5FEC           44                         inc	sp
23870 5FED           44                         inc	sp
23871                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23872 5FEE           8946         F4            mov	-$C[bp],ax
23873                                           !BCC_EOS
23874                                           ! 2847       write_byte(vga_modes[line].sstart,address,car);
23875                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23876 5FF1           8A46         04            mov	al,4[bp]
23877 5FF4           30E4                       xor	ah,ah
23878 5FF6           50                         push	ax
23879                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23880 5FF7           FF76         F4            push	-$C[bp]
23881                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23882 5FFA           8A46         FB            mov	al,-5[bp]
23883 5FFD           30E4                       xor	ah,ah
23884 5FFF           B1                     03  mov	cl,*3
23885 6001           D3E0                       shl	ax,cl
23886 6003           89C3                       mov	bx,ax
23887 6005           81C3                 01FF  add	bx,#_vga_modes
23888                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23889 6009           FF77         04            push	4[bx]
23890                                           ! Debug: func () void = write_byte+0 (used reg = )
23891 600C           E8         1BA9            call	_write_byte
23892 600F           83C4                   06  add	sp,*6
23893                                           !BCC_EOS
23894                                           ! 2848       if(flag==3)
23895                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23896 6012           8A46         0A            mov	al,$A[bp]
23897 6015           3C                     03  cmp	al,*3
23898 6017           75           23            jne 	.1F6
23899                       00006019            .1F7:
23900                                           ! 2849        write_byte(vga_modes[line].sstart,address+1,attr);
23901                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23902 6019           8A46         08            mov	al,8[bp]
23903 601C           30E4                       xor	ah,ah
23904 601E           50                         push	ax
23905                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23906 601F           8B46         F4            mov	ax,-$C[bp]
23907                                           ! Debug: list unsigned int = ax+1 (used reg = )
23908 6022           40                         inc	ax
23909 6023           50                         push	ax
23910                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23911 6024           8A46         FB            mov	al,-5[bp]
23912 6027           30E4                       xor	ah,ah
23913 6029           B1                     03  mov	cl,*3
23914 602B           D3E0                       shl	ax,cl
23915 602D           89C3                       mov	bx,ax
23916 602F           81C3                 01FF  add	bx,#_vga_modes
23917                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23918 6033           FF77         04            push	4[bx]
23919                                           ! Debug: func () void = write_byte+0 (used reg = )
23920 6036           E8         1B7F            call	_write_byte
23921 6039           83C4                   06  add	sp,*6
23922                                           !BCC_EOS
23923                                           ! 2850      }
23924                       0000603C            .1F6:
23925                                           ! 2851     else
23926                                           ! 2852      {
23927 603C           E9         00D1            br 	.1F8
23928                       0000603F            .1F4:
23929                                           ! 2853       cheight=video_param_table[line_to_vpti[line]].cheight;
23930                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23931 603F           8A46         FB            mov	al,-5[bp]
23932 6042           30E4                       xor	ah,ah
23933 6044           89C3                       mov	bx,ax
23934                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23935 6046           8A87       027F            mov	al,_line_to_vpti[bx]
23936 604A           30E4                       xor	ah,ah
23937 604C           B1                     06  mov	cl,*6
23938 604E           D3E0                       shl	ax,cl
23939 6050           89C3                       mov	bx,ax
23940 6052           81C3                 0293  add	bx,#_video_param_table
23941                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23942 6056           8A47         02            mov	al,2[bx]
23943 6059           8846         FF            mov	-1[bp],al
23944                                           !BCC_EOS
23945                                           ! 2854       bpp=vga_modes[line].pixbits;
23946                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23947 605C           8A46         FB            mov	al,-5[bp]
23948 605F           30E4                       xor	ah,ah
23949 6061           B1                     03  mov	cl,*3
23950 6063           D3E0                       shl	ax,cl
23951 6065           89C3                       mov	bx,ax
23952 6067           81C3                 01FF  add	bx,#_vga_modes
23953                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23954 606B           8A47         03            mov	al,3[bx]
23955 606E           8846         FA            mov	-6[bp],al
23956                                           !BCC_EOS
23957                                           ! 2855       switch(vga_modes[line].memmodel)
23958                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23959 6071           8A46         FB            mov	al,-5[bp]
23960 6074           30E4                       xor	ah,ah
23961 6076           B1                     03  mov	cl,*3
23962 6078           D3E0                       shl	ax,cl
23963 607A           89C3                       mov	bx,ax
23964 607C           81C3                 01FF  add	bx,#_vga_modes
23965 6080           8A47         02            mov	al,2[bx]
23966                                           ! 2856        {
23967 6083           EB           77            jmp .1FB
23968                                           ! 2857         case 0x04:
23969                                           ! 2858         case 0x03:
23970                       00006085            .1FC:
23971                                           ! 2859           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23972                       00006085            .1FD:
23973                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23974 6085           8A46         FF            mov	al,-1[bp]
23975 6088           30E4                       xor	ah,ah
23976 608A           50                         push	ax
23977                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23978 608B           FF76         F8            push	-8[bp]
23979                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23980 608E           8A46         FD            mov	al,-3[bp]
23981 6091           30E4                       xor	ah,ah
23982 6093           50                         push	ax
23983                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23984 6094           8A46         FE            mov	al,-2[bp]
23985 6097           30E4                       xor	ah,ah
23986 6099           50                         push	ax
23987                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23988 609A           8A46         08            mov	al,8[bp]
23989 609D           30E4                       xor	ah,ah
23990 609F           50                         push	ax
23991                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23992 60A0           8A46         04            mov	al,4[bp]
23993 60A3           30E4                       xor	ah,ah
23994 60A5           50                         push	ax
23995                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23996 60A6           E8         F09C            call	_write_gfx_char_pl4
23997 60A9           83C4                   0C  add	sp,*$C
23998                                           !BCC_EOS
23999                                           ! 2860           break;
24000 60AC           EB           62            jmp .1F9
24001                                           !BCC_EOS
24002                                           ! 2861         case 0x02:
24003                                           ! 2862           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24004                       000060AE            .1FE:
24005                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24006 60AE           8A46         FA            mov	al,-6[bp]
24007 60B1           30E4                       xor	ah,ah
24008 60B3           50                         push	ax
24009                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24010 60B4           FF76         F8            push	-8[bp]
24011                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24012 60B7           8A46         FD            mov	al,-3[bp]
24013 60BA           30E4                       xor	ah,ah
24014 60BC           50                         push	ax
24015                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24016 60BD           8A46         FE            mov	al,-2[bp]
24017 60C0           30E4                       xor	ah,ah
24018 60C2           50                         push	ax
24019                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24020 60C3           8A46         08            mov	al,8[bp]
24021 60C6           30E4                       xor	ah,ah
24022 60C8           50                         push	ax
24023                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24024 60C9           8A46         04            mov	al,4[bp]
24025 60CC           30E4                       xor	ah,ah
24026 60CE           50                         push	ax
24027                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24028 60CF           E8         F1E6            call	_write_gfx_char_cga
24029 60D2           83C4                   0C  add	sp,*$C
24030                                           !BCC_EOS
24031                                           ! 2863           break;
24032 60D5           EB           39            jmp .1F9
24033                                           !BCC_EOS
24034                                           ! 2864         case 0x05:
24035                                           ! 2865           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24036                       000060D7            .1FF:
24037                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24038 60D7           FF76         F8            push	-8[bp]
24039                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24040 60DA           8A46         FD            mov	al,-3[bp]
24041 60DD           30E4                       xor	ah,ah
24042 60DF           50                         push	ax
24043                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24044 60E0           8A46         FE            mov	al,-2[bp]
24045 60E3           30E4                       xor	ah,ah
24046 60E5           50                         push	ax
24047                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24048 60E6           8A46         08            mov	al,8[bp]
24049 60E9           30E4                       xor	ah,ah
24050 60EB           50                         push	ax
24051                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24052 60EC           8A46         04            mov	al,4[bp]
24053 60EF           30E4                       xor	ah,ah
24054 60F1           50                         push	ax
24055                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24056 60F2           E8         F3C6            call	_write_gfx_char_lin
24057 60F5           83C4                   0A  add	sp,*$A
24058                                           !BCC_EOS
24059                                           ! 2866           break;
24060 60F8           EB           16            jmp .1F9
24061                                           !BCC_EOS
24062                                           ! 2867        }
24063                                           ! 2868      }
24064 60FA           EB           14            jmp .1F9
24065                       000060FC            .1FB:
24066 60FC           2C                     02  sub	al,*2
24067 60FE           74           AE            je 	.1FE
24068 6100           2C                     01  sub	al,*1
24069 6102         0F84         FF7F            beq 	.1FD
24070 6106           2C                     01  sub	al,*1
24071 6108         0F84         FF79            beq 	.1FC
24072 610C           2C                     01  sub	al,*1
24073 610E           74           C7            je 	.1FF
24074                       00006110            .1F9:
24075                                           ! 2869     xcurs++;
24076                       00006110            .1F8:
24077                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24078 6110           8A46         FE            mov	al,-2[bp]
24079 6113           40                         inc	ax
24080 6114           8846         FE            mov	-2[bp],al
24081                                           !BCC_EOS
24082                                           ! 2870   }
24083                                           ! 2871  if(xcurs==nbcols)
24084 6117           EB           21            jmp .1E5
24085                       00006119            .1E7:
24086 6119           2C                     07  sub	al,*7
24087 611B         0F84         FE10            beq 	.1E8
24088 611F           2C                     01  sub	al,*1
24089 6121         0F84         FE0D            beq 	.1E9
24090 6125           2C                     01  sub	al,*1
24091 6127         0F84         FE2A            beq 	.1EE
24092 612B           2C                     01  sub	al,*1
24093 612D         0F84         FE1A            beq 	.1ED
24094 6131           2C                     03  sub	al,*3
24095 6133         0F84         FE0C            beq 	.1EC
24096 6137           E9         FE6B            br 	.1F3
24097                       0000613A            .1E5:
24098                       FFFFFFEE            ..FFF6	=	-$12
24099                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24100 613A           8A46         FE            mov	al,-2[bp]
24101 613D           30E4                       xor	ah,ah
24102 613F           3B46         F8            cmp	ax,-8[bp]
24103 6142           75           0C            jne 	.200
24104                       00006144            .201:
24105                                           ! 2872   {xcurs=0;
24106                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24107 6144           30C0                       xor	al,al
24108 6146           8846         FE            mov	-2[bp],al
24109                                           !BCC_EOS
24110                                           ! 2873    ycurs++;
24111                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24112 6149           8A46         FD            mov	al,-3[bp]
24113 614C           40                         inc	ax
24114 614D           8846         FD            mov	-3[bp],al
24115                                           !BCC_EOS
24116                                           ! 2874   }
24117                                           ! 2875  if(ycurs==nbrows)
24118                       00006150            .200:
24119                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24120 6150           8A46         FD            mov	al,-3[bp]
24121 6153           30E4                       xor	ah,ah
24122 6155           3B46         F6            cmp	ax,-$A[bp]
24123 6158           75           70            jne 	.202
24124                       0000615A            .203:
24125                                           ! 2876   {
24126                                           ! 2877    if(vga_modes[line].class==0x00)
24127                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24128 615A           8A46         FB            mov	al,-5[bp]
24129 615D           30E4                       xor	ah,ah
24130 615F           B1                     03  mov	cl,*3
24131 6161           D3E0                       shl	ax,cl
24132 6163           89C3                       mov	bx,ax
24133 6165           81C3                 01FF  add	bx,#_vga_modes
24134                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24135 6169           8A47         01            mov	al,1[bx]
24136 616C           84C0                       test	al,al
24137 616E           75           2A            jne 	.204
24138                       00006170            .205:
24139                                           ! 2878     {
24140                                           ! 2879      biosfn_scroll(0x01,0x07,0,0,nbrows-1,nbcols-1,page,1);
24141                                           ! Debug: list int = const 1 (used reg = )
24142 6170           B8                   0001  mov	ax,*1
24143 6173           50                         push	ax
24144                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24145 6174           8A46         06            mov	al,6[bp]
24146 6177           30E4                       xor	ah,ah
24147 6179           50                         push	ax
24148                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24149 617A           8B46         F8            mov	ax,-8[bp]
24150                                           ! Debug: list unsigned int = ax-1 (used reg = )
24151 617D           48                         dec	ax
24152 617E           50                         push	ax
24153                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24154 617F           8B46         F6            mov	ax,-$A[bp]
24155                                           ! Debug: list unsigned int = ax-1 (used reg = )
24156 6182           48                         dec	ax
24157 6183           50                         push	ax
24158                                           ! Debug: list int = const 0 (used reg = )
24159 6184           31C0                       xor	ax,ax
24160 6186           50                         push	ax
24161                                           ! Debug: list int = const 0 (used reg = )
24162 6187           31C0                       xor	ax,ax
24163 6189           50                         push	ax
24164                                           ! Debug: list int = const 7 (used reg = )
24165 618A           B8                   0007  mov	ax,*7
24166 618D           50                         push	ax
24167                                           ! Debug: list int = const 1 (used reg = )
24168 618E           B8                   0001  mov	ax,*1
24169 6191           50                         push	ax
24170                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24171 6192           E8         E7AF            call	_biosfn_scroll
24172 6195           83C4                   10  add	sp,*$10
24173                                           !BCC_EOS
24174                                           ! 2880     }
24175                                           ! 2881    else
24176                                           ! 2882     {
24177 6198           EB           27            jmp .206
24178                       0000619A            .204:
24179                                           ! 2883      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24180                                           ! Debug: list int = const 1 (used reg = )
24181 619A           B8                   0001  mov	ax,*1
24182 619D           50                         push	ax
24183                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24184 619E           8A46         06            mov	al,6[bp]
24185 61A1           30E4                       xor	ah,ah
24186 61A3           50                         push	ax
24187                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24188 61A4           8B46         F8            mov	ax,-8[bp]
24189                                           ! Debug: list unsigned int = ax-1 (used reg = )
24190 61A7           48                         dec	ax
24191 61A8           50                         push	ax
24192                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24193 61A9           8B46         F6            mov	ax,-$A[bp]
24194                                           ! Debug: list unsigned int = ax-1 (used reg = )
24195 61AC           48                         dec	ax
24196 61AD           50                         push	ax
24197                                           ! Debug: list int = const 0 (used reg = )
24198 61AE           31C0                       xor	ax,ax
24199 61B0           50                         push	ax
24200                                           ! Debug: list int = const 0 (used reg = )
24201 61B1           31C0                       xor	ax,ax
24202 61B3           50                         push	ax
24203                                           ! Debug: list int = const 0 (used reg = )
24204 61B4           31C0                       xor	ax,ax
24205 61B6           50                         push	ax
24206                                           ! Debug: list int = const 1 (used reg = )
24207 61B7           B8                   0001  mov	ax,*1
24208 61BA           50                         push	ax
24209                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24210 61BB           E8         E786            call	_biosfn_scroll
24211 61BE           83C4                   10  add	sp,*$10
24212                                           !BCC_EOS
24213                                           ! 2884     }
24214                                           ! 2885    ycurs-=1;
24215                       000061C1            .206:
24216                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24217 61C1           8A46         FD            mov	al,-3[bp]
24218 61C4           30E4                       xor	ah,ah
24219 61C6           48                         dec	ax
24220 61C7           8846         FD            mov	-3[bp],al
24221                                           !BCC_EOS
24222                                           ! 2886   }
24223                                           ! 2887  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24224                       000061CA            .202:
24225                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24226 61CA           8A46         FD            mov	al,-3[bp]
24227 61CD           30E4                       xor	ah,ah
24228 61CF           8946         F2            mov	-$E[bp],ax
24229                                           !BCC_EOS
24230                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24231 61D2           8B46         F2            mov	ax,-$E[bp]
24232 61D5           88C4                       mov	ah,al
24233 61D7           30C0                       xor	al,al
24234 61D9           8946         F2            mov	-$E[bp],ax
24235                                           !BCC_EOS
24236                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24237 61DC           8B46         F2            mov	ax,-$E[bp]
24238 61DF           0246         FE            add	al,-2[bp]
24239 61E2           80D4                   00  adc	ah,*0
24240 61E5           8946         F2            mov	-$E[bp],ax
24241                                           !BCC_EOS
24242                                           ! 2888  biosfn_set_cursor_pos(page,cursor);
24243                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24244 61E8           FF76         F2            push	-$E[bp]
24245                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24246 61EB           8A46         06            mov	al,6[bp]
24247 61EE           30E4                       xor	ah,ah
24248 61F0           50                         push	ax
24249                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24250 61F1           E8         E158            call	_biosfn_set_cursor_pos
24251 61F4           83C4                   04  add	sp,*4
24252                                           !BCC_EOS
24253                                           ! 2889 }
24254 61F7           89EC                       mov	sp,bp
24255 61F9           5D                         pop	bp
24256 61FA           C3                         ret
24257                                           ! 2890 #asm
24258                                           !BCC_ASM
24259                       00000008            _biosfn_write_teletype.flag	set	8
24260                       00000006            _biosfn_write_teletype.attr	set	6
24261                       00000004            _biosfn_write_teletype.page	set	4
24262                       00000002            _biosfn_write_teletype.car	set	2
24263                       000061FB            biosfn_get_video_mode:
24264 61FB           1E                           push ds
24265 61FC           B8                   0040    mov ax, # 0x40
24266 61FF           8ED8                         mov ds, ax
24267 6201           53                           push bx
24268 6202           BB                   0062    mov bx, # 0x62
24269 6205           8A07                         mov al, [bx]
24270 6207           5B                           pop bx
24271 6208           88C7                         mov bh, al
24272 620A           53                           push bx
24273 620B           BB                   0087    mov bx, # 0x87
24274 620E           8A27                         mov ah, [bx]
24275 6210           80E4                   80    and ah, #0x80
24276 6213           BB                   0049    mov bx, # 0x49
24277 6216           8A07                         mov al, [bx]
24278 6218           08E0                         or al, ah
24279 621A           BB                   004A    mov bx, # 0x4A
24280 621D           8A27                         mov ah, [bx]
24281 621F           5B                           pop bx
24282 6220           1F                           pop ds
24283 6221           C3                           ret
24284                                           ! 2912 endasm
24285                                           !BCC_ENDASM
24286                                           ! 2913 #asm
24287                                           !BCC_ASM
24288                       00000008            _biosfn_write_teletype.flag	set	8
24289                       00000006            _biosfn_write_teletype.attr	set	6
24290                       00000004            _biosfn_write_teletype.page	set	4
24291                       00000002            _biosfn_write_teletype.car	set	2
24292                       00006222            biosfn_group_10:
24293 6222           3C                     00    cmp al, #0x00
24294 6224           75           02              jne int10_test_1001
24295 6226           EB           61              jmp biosfn_set_single_palette_reg
24296                       00006228            int10_test_1001:
24297 6228           3C                     01    cmp al, #0x01
24298 622A           75           02              jne int10_test_1002
24299 622C           EB           75              jmp biosfn_set_overscan_border_color
24300                       0000622E            int10_test_1002:
24301 622E           3C                     02    cmp al, #0x02
24302 6230           75           02              jne int10_test_1003
24303 6232           EB           77              jmp biosfn_set_all_palette_reg
24304                       00006234            int10_test_1003:
24305 6234           3C                     03    cmp al, #0x03
24306 6236           75           03              jne int10_test_1007
24307 6238           E9         009D              jmp biosfn_toggle_intensity
24308                       0000623B            int10_test_1007:
24309 623B           3C                     07    cmp al, #0x07
24310 623D           75           03              jne int10_test_1008
24311 623F           E9         00BC              jmp biosfn_get_single_palette_reg
24312                       00006242            int10_test_1008:
24313 6242           3C                     08    cmp al, #0x08
24314 6244           75           03              jne int10_test_1009
24315 6246           E9         00D9              jmp biosfn_read_overscan_border_color
24316                       00006249            int10_test_1009:
24317 6249           3C                     09    cmp al, #0x09
24318 624B           75           03              jne int10_test_1010
24319 624D           E9         00E0              jmp biosfn_get_all_palette_reg
24320                       00006250            int10_test_1010:
24321 6250           3C                     10    cmp al, #0x10
24322 6252           75           03              jne int10_test_1012
24323 6254           E9         011A              jmp biosfn_set_single_dac_reg
24324                       00006257            int10_test_1012:
24325 6257           3C                     12    cmp al, #0x12
24326 6259           75           03              jne int10_test_1013
24327 625B           E9         012C              jmp biosfn_set_all_dac_reg
24328                       0000625E            int10_test_1013:
24329 625E           3C                     13    cmp al, #0x13
24330 6260           75           03              jne int10_test_1015
24331 6262           E9         014D              jmp biosfn_select_video_dac_color_page
24332                       00006265            int10_test_1015:
24333 6265           3C                     15    cmp al, #0x15
24334 6267           75           03              jne int10_test_1017
24335 6269           E9         0189              jmp biosfn_read_single_dac_reg
24336                       0000626C            int10_test_1017:
24337 626C           3C                     17    cmp al, #0x17
24338 626E           75           03              jne int10_test_1018
24339 6270           E9         019D              jmp biosfn_read_all_dac_reg
24340                       00006273            int10_test_1018:
24341 6273           3C                     18    cmp al, #0x18
24342 6275           75           03              jne int10_test_1019
24343 6277           E9         01BE              jmp biosfn_set_pel_mask
24344                       0000627A            int10_test_1019:
24345 627A           3C                     19    cmp al, #0x19
24346 627C           75           03              jne int10_test_101A
24347 627E           E9         01C2              jmp biosfn_read_pel_mask
24348                       00006281            int10_test_101A:
24349 6281           3C                     1A    cmp al, #0x1a
24350 6283           75           03              jne int10_group_10_unknown
24351 6285           E9         01C6              jmp biosfn_read_video_dac_state
24352                       00006288            int10_group_10_unknown:
24353 6288           C3                           ret
24354                       00006289            biosfn_set_single_palette_reg:
24355 6289           80FB                   14    cmp bl, #0x14
24356 628C           77           14              ja no_actl_reg1
24357 628E           50                           push ax
24358 628F           52                           push dx
24359 6290           BA                   03DA    mov dx, # 0x3da
24360 6293           EC                           in al, dx
24361 6294           BA                   03C0    mov dx, # 0x3c0
24362 6297           88D8                         mov al, bl
24363 6299           EE                           out dx, al
24364 629A           88F8                         mov al, bh
24365 629C           EE                           out dx, al
24366 629D           B0                     20    mov al, #0x20
24367 629F           EE                           out dx, al
24368 62A0           5A                           pop dx
24369 62A1           58                           pop ax
24370                       000062A2            no_actl_reg1:
24371 62A2           C3                           ret
24372                                           ! 2994 endasm
24373                                           !BCC_ENDASM
24374                                           ! 2995 #asm
24375                                           !BCC_ASM
24376                       00000008            _biosfn_write_teletype.flag	set	8
24377                       00000006            _biosfn_write_teletype.attr	set	6
24378                       00000004            _biosfn_write_teletype.page	set	4
24379                       00000002            _biosfn_write_teletype.car	set	2
24380                       000062A3            biosfn_set_overscan_border_color:
24381 62A3           53                           push bx
24382 62A4           B3                     11    mov bl, #0x11
24383 62A6           E8         FFE0              call biosfn_set_single_palette_reg
24384 62A9           5B                           pop bx
24385 62AA           C3                           ret
24386                                           ! 3002 endasm
24387                                           !BCC_ENDASM
24388                                           ! 3003 #asm
24389                                           !BCC_ASM
24390                       00000008            _biosfn_write_teletype.flag	set	8
24391                       00000006            _biosfn_write_teletype.attr	set	6
24392                       00000004            _biosfn_write_teletype.page	set	4
24393                       00000002            _biosfn_write_teletype.car	set	2
24394                       000062AB            biosfn_set_all_palette_reg:
24395 62AB           50                           push ax
24396 62AC           53                           push bx
24397 62AD           51                           push cx
24398 62AE           52                           push dx
24399 62AF           89D3                         mov bx, dx
24400 62B1           BA                   03DA    mov dx, # 0x3da
24401 62B4           EC                           in al, dx
24402 62B5           B1                     00    mov cl, #0x00
24403 62B7           BA                   03C0    mov dx, # 0x3c0
24404                       000062BA            set_palette_loop:
24405 62BA           88C8                         mov al, cl
24406 62BC           EE                           out dx, al
24407 62BD           26                           seg es
24408 62BE           8A07                         mov al, [bx]
24409 62C0           EE                           out dx, al
24410 62C1           43                           inc bx
24411 62C2           FEC1                         inc cl
24412 62C4           80F9                   10    cmp cl, #0x10
24413 62C7           75           F1              jne set_palette_loop
24414 62C9           B0                     11    mov al, #0x11
24415 62CB           EE                           out dx, al
24416 62CC           26                           seg es
24417 62CD           8A07                         mov al, [bx]
24418 62CF           EE                           out dx, al
24419 62D0           B0                     20    mov al, #0x20
24420 62D2           EE                           out dx, al
24421 62D3           5A                           pop dx
24422 62D4           59                           pop cx
24423 62D5           5B                           pop bx
24424 62D6           58                           pop ax
24425 62D7           C3                           ret
24426                                           ! 3036 endasm
24427                                           !BCC_ENDASM
24428                                           ! 3037 #asm
24429                                           !BCC_ASM
24430                       00000008            _biosfn_write_teletype.flag	set	8
24431                       00000006            _biosfn_write_teletype.attr	set	6
24432                       00000004            _biosfn_write_teletype.page	set	4
24433                       00000002            _biosfn_write_teletype.car	set	2
24434                       000062D8            biosfn_toggle_intensity:
24435 62D8           50                           push ax
24436 62D9           53                           push bx
24437 62DA           52                           push dx
24438 62DB           BA                   03DA    mov dx, # 0x3da
24439 62DE           EC                           in al, dx
24440 62DF           BA                   03C0    mov dx, # 0x3c0
24441 62E2           B0                     10    mov al, #0x10
24442 62E4           EE                           out dx, al
24443 62E5           BA                   03C1    mov dx, # 0x3c1
24444 62E8           EC                           in al, dx
24445 62E9           24                     F7    and al, #0xf7
24446 62EB           80E3                   01    and bl, #0x01
24447 62EE           C0E3                   03    shl bl, 3
24448 62F1           08D8                         or al, bl
24449 62F3           BA                   03C0    mov dx, # 0x3c0
24450 62F6           EE                           out dx, al
24451 62F7           B0                     20    mov al, #0x20
24452 62F9           EE                           out dx, al
24453 62FA           5A                           pop dx
24454 62FB           5B                           pop bx
24455 62FC           58                           pop ax
24456 62FD           C3                           ret
24457                                           ! 3061 endasm
24458                                           !BCC_ENDASM
24459                                           ! 3062 #asm
24460                                           !BCC_ASM
24461                       00000008            _biosfn_write_teletype.flag	set	8
24462                       00000006            _biosfn_write_teletype.attr	set	6
24463                       00000004            _biosfn_write_teletype.page	set	4
24464                       00000002            _biosfn_write_teletype.car	set	2
24465                       000062FE            biosfn_get_single_palette_reg:
24466 62FE           80FB                   14    cmp bl, #0x14
24467 6301           77           1E              ja no_actl_reg2
24468 6303           50                           push ax
24469 6304           52                           push dx
24470 6305           BA                   03DA    mov dx, # 0x3da
24471 6308           EC                           in al, dx
24472 6309           BA                   03C0    mov dx, # 0x3c0
24473 630C           88D8                         mov al, bl
24474 630E           EE                           out dx, al
24475 630F           BA                   03C1    mov dx, # 0x3c1
24476 6312           EC                           in al, dx
24477 6313           88C7                         mov bh, al
24478 6315           BA                   03DA    mov dx, # 0x3da
24479 6318           EC                           in al, dx
24480 6319           BA                   03C0    mov dx, # 0x3c0
24481 631C           B0                     20    mov al, #0x20
24482 631E           EE                           out dx, al
24483 631F           5A                           pop dx
24484 6320           58                           pop ax
24485                       00006321            no_actl_reg2:
24486 6321           C3                           ret
24487                                           ! 3085 endasm
24488                                           !BCC_ENDASM
24489                                           ! 3086 #asm
24490                                           !BCC_ASM
24491                       00000008            _biosfn_write_teletype.flag	set	8
24492                       00000006            _biosfn_write_teletype.attr	set	6
24493                       00000004            _biosfn_write_teletype.page	set	4
24494                       00000002            _biosfn_write_teletype.car	set	2
24495                       00006322            biosfn_read_overscan_border_color:
24496 6322           50                           push ax
24497 6323           53                           push bx
24498 6324           B3                     11    mov bl, #0x11
24499 6326           E8         FFD5              call biosfn_get_single_palette_reg
24500 6329           88F8                         mov al, bh
24501 632B           5B                           pop bx
24502 632C           88C7                         mov bh, al
24503 632E           58                           pop ax
24504 632F           C3                           ret
24505                                           ! 3097 endasm
24506                                           !BCC_ENDASM
24507                                           ! 3098 #asm
24508                                           !BCC_ASM
24509                       00000008            _biosfn_write_teletype.flag	set	8
24510                       00000006            _biosfn_write_teletype.attr	set	6
24511                       00000004            _biosfn_write_teletype.page	set	4
24512                       00000002            _biosfn_write_teletype.car	set	2
24513                       00006330            biosfn_get_all_palette_reg:
24514 6330           50                           push ax
24515 6331           53                           push bx
24516 6332           51                           push cx
24517 6333           52                           push dx
24518 6334           89D3                         mov bx, dx
24519 6336           B1                     00    mov cl, #0x00
24520                       00006338            get_palette_loop:
24521 6338           BA                   03DA    mov dx, # 0x3da
24522 633B           EC                           in al, dx
24523 633C           BA                   03C0    mov dx, # 0x3c0
24524 633F           88C8                         mov al, cl
24525 6341           EE                           out dx, al
24526 6342           BA                   03C1    mov dx, # 0x3c1
24527 6345           EC                           in al, dx
24528 6346           26                           seg es
24529 6347           8807                         mov [bx], al
24530 6349           43                           inc bx
24531 634A           FEC1                         inc cl
24532 634C           80F9                   10    cmp cl, #0x10
24533 634F           75           E7              jne get_palette_loop
24534 6351           BA                   03DA    mov dx, # 0x3da
24535 6354           EC                           in al, dx
24536 6355           BA                   03C0    mov dx, # 0x3c0
24537 6358           B0                     11    mov al, #0x11
24538 635A           EE                           out dx, al
24539 635B           BA                   03C1    mov dx, # 0x3c1
24540 635E           EC                           in al, dx
24541 635F           26                           seg es
24542 6360           8807                         mov [bx], al
24543 6362           BA                   03DA    mov dx, # 0x3da
24544 6365           EC                           in al, dx
24545 6366           BA                   03C0    mov dx, # 0x3c0
24546 6369           B0                     20    mov al, #0x20
24547 636B           EE                           out dx, al
24548 636C           5A                           pop dx
24549 636D           59                           pop cx
24550 636E           5B                           pop bx
24551 636F           58                           pop ax
24552 6370           C3                           ret
24553                                           ! 3139 endasm
24554                                           !BCC_ENDASM
24555                                           ! 3140 #asm
24556                                           !BCC_ASM
24557                       00000008            _biosfn_write_teletype.flag	set	8
24558                       00000006            _biosfn_write_teletype.attr	set	6
24559                       00000004            _biosfn_write_teletype.page	set	4
24560                       00000002            _biosfn_write_teletype.car	set	2
24561                       00006371            biosfn_set_single_dac_reg:
24562 6371           50                           push ax
24563 6372           52                           push dx
24564 6373           BA                   03C8    mov dx, # 0x3c8
24565 6376           88D8                         mov al, bl
24566 6378           EE                           out dx, al
24567 6379           BA                   03C9    mov dx, # 0x3c9
24568 637C           58                           pop ax
24569 637D           50                           push ax
24570 637E           88E0                         mov al, ah
24571 6380           EE                           out dx, al
24572 6381           88E8                         mov al, ch
24573 6383           EE                           out dx, al
24574 6384           88C8                         mov al, cl
24575 6386           EE                           out dx, al
24576 6387           5A                           pop dx
24577 6388           58                           pop ax
24578 6389           C3                           ret
24579                                           ! 3159 endasm
24580                                           !BCC_ENDASM
24581                                           ! 3160 #asm
24582                                           !BCC_ASM
24583                       00000008            _biosfn_write_teletype.flag	set	8
24584                       00000006            _biosfn_write_teletype.attr	set	6
24585                       00000004            _biosfn_write_teletype.page	set	4
24586                       00000002            _biosfn_write_teletype.car	set	2
24587                       0000638A            biosfn_set_all_dac_reg:
24588 638A           50                           push ax
24589 638B           53                           push bx
24590 638C           51                           push cx
24591 638D           52                           push dx
24592 638E           BA                   03C8    mov dx, # 0x3c8
24593 6391           88D8                         mov al, bl
24594 6393           EE                           out dx, al
24595 6394           5A                           pop dx
24596 6395           52                           push dx
24597 6396           89D3                         mov bx, dx
24598 6398           BA                   03C9    mov dx, # 0x3c9
24599                       0000639B            set_dac_loop:
24600 639B           26                           seg es
24601 639C           8A07                         mov al, [bx]
24602 639E           EE                           out dx, al
24603 639F           43                           inc bx
24604 63A0           26                           seg es
24605 63A1           8A07                         mov al, [bx]
24606 63A3           EE                           out dx, al
24607 63A4           43                           inc bx
24608 63A5           26                           seg es
24609 63A6           8A07                         mov al, [bx]
24610 63A8           EE                           out dx, al
24611 63A9           43                           inc bx
24612 63AA           49                           dec cx
24613 63AB           75           EE              jnz set_dac_loop
24614 63AD           5A                           pop dx
24615 63AE           59                           pop cx
24616 63AF           5B                           pop bx
24617 63B0           58                           pop ax
24618 63B1           C3                           ret
24619                                           ! 3193 endasm
24620                                           !BCC_ENDASM
24621                                           ! 3194 #asm
24622                                           !BCC_ASM
24623                       00000008            _biosfn_write_teletype.flag	set	8
24624                       00000006            _biosfn_write_teletype.attr	set	6
24625                       00000004            _biosfn_write_teletype.page	set	4
24626                       00000002            _biosfn_write_teletype.car	set	2
24627                       000063B2            biosfn_select_video_dac_color_page:
24628 63B2           50                           push ax
24629 63B3           53                           push bx
24630 63B4           52                           push dx
24631 63B5           BA                   03DA    mov dx, # 0x3da
24632 63B8           EC                           in al, dx
24633 63B9           BA                   03C0    mov dx, # 0x3c0
24634 63BC           B0                     10    mov al, #0x10
24635 63BE           EE                           out dx, al
24636 63BF           BA                   03C1    mov dx, # 0x3c1
24637 63C2           EC                           in al, dx
24638 63C3           80E3                   01    and bl, #0x01
24639 63C6           75           0D              jnz set_dac_page
24640 63C8           24                     7F    and al, #0x7f
24641 63CA           C0E7                   07    shl bh, 7
24642 63CD           08F8                         or al, bh
24643 63CF           BA                   03C0    mov dx, # 0x3c0
24644 63D2           EE                           out dx, al
24645 63D3           EB           19              jmp set_actl_normal
24646                       000063D5            set_dac_page:
24647 63D5           50                           push ax
24648 63D6           BA                   03DA    mov dx, # 0x3da
24649 63D9           EC                           in al, dx
24650 63DA           BA                   03C0    mov dx, # 0x3c0
24651 63DD           B0                     14    mov al, #0x14
24652 63DF           EE                           out dx, al
24653 63E0           58                           pop ax
24654 63E1           24                     80    and al, #0x80
24655 63E3           75           03              jnz set_dac_16_page
24656 63E5           C0E7                   02    shl bh, 2
24657                       000063E8            set_dac_16_page:
24658 63E8           80E7                   0F    and bh, #0x0f
24659 63EB           88F8                         mov al, bh
24660 63ED           EE                           out dx, al
24661                       000063EE            set_actl_normal:
24662 63EE           B0                     20    mov al, #0x20
24663 63F0           EE                           out dx, al
24664 63F1           5A                           pop dx
24665 63F2           5B                           pop bx
24666 63F3           58                           pop ax
24667 63F4           C3                           ret
24668                                           ! 3236 endasm
24669                                           !BCC_ENDASM
24670                                           ! 3237 #asm
24671                                           !BCC_ASM
24672                       00000008            _biosfn_write_teletype.flag	set	8
24673                       00000006            _biosfn_write_teletype.attr	set	6
24674                       00000004            _biosfn_write_teletype.page	set	4
24675                       00000002            _biosfn_write_teletype.car	set	2
24676                       000063F5            biosfn_read_single_dac_reg:
24677 63F5           50                           push ax
24678 63F6           52                           push dx
24679 63F7           BA                   03C7    mov dx, # 0x3c7
24680 63FA           88D8                         mov al, bl
24681 63FC           EE                           out dx, al
24682 63FD           58                           pop ax
24683 63FE           88C4                         mov ah, al
24684 6400           BA                   03C9    mov dx, # 0x3c9
24685 6403           EC                           in al, dx
24686 6404           86E0                         xchg al, ah
24687 6406           50                           push ax
24688 6407           EC                           in al, dx
24689 6408           88C5                         mov ch, al
24690 640A           EC                           in al, dx
24691 640B           88C1                         mov cl, al
24692 640D           5A                           pop dx
24693 640E           58                           pop ax
24694 640F           C3                           ret
24695                                           ! 3257 endasm
24696                                           !BCC_ENDASM
24697                                           ! 3258 #asm
24698                                           !BCC_ASM
24699                       00000008            _biosfn_write_teletype.flag	set	8
24700                       00000006            _biosfn_write_teletype.attr	set	6
24701                       00000004            _biosfn_write_teletype.page	set	4
24702                       00000002            _biosfn_write_teletype.car	set	2
24703                       00006410            biosfn_read_all_dac_reg:
24704 6410           50                           push ax
24705 6411           53                           push bx
24706 6412           51                           push cx
24707 6413           52                           push dx
24708 6414           BA                   03C7    mov dx, # 0x3c7
24709 6417           88D8                         mov al, bl
24710 6419           EE                           out dx, al
24711 641A           5A                           pop dx
24712 641B           52                           push dx
24713 641C           89D3                         mov bx, dx
24714 641E           BA                   03C9    mov dx, # 0x3c9
24715                       00006421            read_dac_loop:
24716 6421           EC                           in al, dx
24717 6422           26                           seg es
24718 6423           8807                         mov [bx], al
24719 6425           43                           inc bx
24720 6426           EC                           in al, dx
24721 6427           26                           seg es
24722 6428           8807                         mov [bx], al
24723 642A           43                           inc bx
24724 642B           EC                           in al, dx
24725 642C           26                           seg es
24726 642D           8807                         mov [bx], al
24727 642F           43                           inc bx
24728 6430           49                           dec cx
24729 6431           75           EE              jnz read_dac_loop
24730 6433           5A                           pop dx
24731 6434           59                           pop cx
24732 6435           5B                           pop bx
24733 6436           58                           pop ax
24734 6437           C3                           ret
24735                                           ! 3291 endasm
24736                                           !BCC_ENDASM
24737                                           ! 3292 #asm
24738                                           !BCC_ASM
24739                       00000008            _biosfn_write_teletype.flag	set	8
24740                       00000006            _biosfn_write_teletype.attr	set	6
24741                       00000004            _biosfn_write_teletype.page	set	4
24742                       00000002            _biosfn_write_teletype.car	set	2
24743                       00006438            biosfn_set_pel_mask:
24744 6438           50                           push ax
24745 6439           52                           push dx
24746 643A           BA                   03C6    mov dx, # 0x3c6
24747 643D           88D8                         mov al, bl
24748 643F           EE                           out dx, al
24749 6440           5A                           pop dx
24750 6441           58                           pop ax
24751 6442           C3                           ret
24752                                           ! 3302 endasm
24753                                           !BCC_ENDASM
24754                                           ! 3303 #asm
24755                                           !BCC_ASM
24756                       00000008            _biosfn_write_teletype.flag	set	8
24757                       00000006            _biosfn_write_teletype.attr	set	6
24758                       00000004            _biosfn_write_teletype.page	set	4
24759                       00000002            _biosfn_write_teletype.car	set	2
24760                       00006443            biosfn_read_pel_mask:
24761 6443           50                           push ax
24762 6444           52                           push dx
24763 6445           BA                   03C6    mov dx, # 0x3c6
24764 6448           EC                           in al, dx
24765 6449           88C3                         mov bl, al
24766 644B           5A                           pop dx
24767 644C           58                           pop ax
24768 644D           C3                           ret
24769                                           ! 3313 endasm
24770                                           !BCC_ENDASM
24771                                           ! 3314 #asm
24772                                           !BCC_ASM
24773                       00000008            _biosfn_write_teletype.flag	set	8
24774                       00000006            _biosfn_write_teletype.attr	set	6
24775                       00000004            _biosfn_write_teletype.page	set	4
24776                       00000002            _biosfn_write_teletype.car	set	2
24777                       0000644E            biosfn_read_video_dac_state:
24778 644E           50                           push ax
24779 644F           52                           push dx
24780 6450           BA                   03DA    mov dx, # 0x3da
24781 6453           EC                           in al, dx
24782 6454           BA                   03C0    mov dx, # 0x3c0
24783 6457           B0                     10    mov al, #0x10
24784 6459           EE                           out dx, al
24785 645A           BA                   03C1    mov dx, # 0x3c1
24786 645D           EC                           in al, dx
24787 645E           88C3                         mov bl, al
24788 6460           C0EB                   07    shr bl, 7
24789 6463           BA                   03DA    mov dx, # 0x3da
24790 6466           EC                           in al, dx
24791 6467           BA                   03C0    mov dx, # 0x3c0
24792 646A           B0                     14    mov al, #0x14
24793 646C           EE                           out dx, al
24794 646D           BA                   03C1    mov dx, # 0x3c1
24795 6470           EC                           in al, dx
24796 6471           88C7                         mov bh, al
24797 6473           80E7                   0F    and bh, #0x0f
24798 6476           F6C3                   01    test bl, #0x01
24799 6479           75           03              jnz get_dac_16_page
24800 647B           C0EF                   02    shr bh, 2
24801                       0000647E            get_dac_16_page:
24802 647E           BA                   03DA    mov dx, # 0x3da
24803 6481           EC                           in al, dx
24804 6482           BA                   03C0    mov dx, # 0x3c0
24805 6485           B0                     20    mov al, #0x20
24806 6487           EE                           out dx, al
24807 6488           5A                           pop dx
24808 6489           58                           pop ax
24809 648A           C3                           ret
24810                                           ! 3348 endasm
24811                                           !BCC_ENDASM
24812                                           ! 3349 static void biosfn_perform_gray_scale_summing (start,count)
24813                                           ! Register BX used in function biosfn_write_teletype
24814                                           ! 3350 Bit16u start;Bit16u count;
24815                       0000648B            _biosfn_perform_gray_scale_summing:
24816                                           !BCC_EOS
24817                                           !BCC_EOS
24818                                           ! 3351 {Bit8u r,g,b;
24819                                           !BCC_EOS
24820                                           ! 3352  Bit16u i;
24821                                           !BCC_EOS
24822                                           ! 3353  Bit16u index;
24823                                           !BCC_EOS
24824                                           ! 3354  inb(0x3
24825 648B           55                         push	bp
24826 648C           89E5                       mov	bp,sp
24827 648E           83C4                   F8  add	sp,*-8
24828                                           ! 3354 da);
24829                                           ! Debug: list int = const $3DA (used reg = )
24830 6491           B8                   03DA  mov	ax,#$3DA
24831 6494           50                         push	ax
24832                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24833 6495           E8         1750            call	_inb
24834 6498           44                         inc	sp
24835 6499           44                         inc	sp
24836                                           !BCC_EOS
24837                                           ! 3355  outb(0x3c0,0x00);
24838                                           ! Debug: list int = const 0 (used reg = )
24839 649A           31C0                       xor	ax,ax
24840 649C           50                         push	ax
24841                                           ! Debug: list int = const $3C0 (used reg = )
24842 649D           B8                   03C0  mov	ax,#$3C0
24843 64A0           50                         push	ax
24844                                           ! Debug: func () void = outb+0 (used reg = )
24845 64A1           E8         175A            call	_outb
24846 64A4           83C4                   04  add	sp,*4
24847                                           !BCC_EOS
24848                                           ! 3356  for( index = 0; index < count; index++ )
24849                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24850 64A7           31C0                       xor	ax,ax
24851 64A9           8946         F8            mov	-8[bp],ax
24852                                           !BCC_EOS
24853                                           !BCC_EOS
24854                                           ! 3357   {
24855 64AC           E9         00BE            br 	.209
24856                       000064AF            .20A:
24857                                           ! 3358    outb(0x3c7,start);
24858                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24859 64AF           FF76         04            push	4[bp]
24860                                           ! Debug: list int = const $3C7 (used reg = )
24861 64B2           B8                   03C7  mov	ax,#$3C7
24862 64B5           50                         push	ax
24863                                           ! Debug: func () void = outb+0 (used reg = )
24864 64B6           E8         1745            call	_outb
24865 64B9           83C4                   04  add	sp,*4
24866                                           !BCC_EOS
24867                                           ! 3359    r=inb( 0x3c9 );
24868                                           ! Debug: list int = const $3C9 (used reg = )
24869 64BC           B8                   03C9  mov	ax,#$3C9
24870 64BF           50                         push	ax
24871                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24872 64C0           E8         1725            call	_inb
24873 64C3           44                         inc	sp
24874 64C4           44                         inc	sp
24875                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24876 64C5           8846         FF            mov	-1[bp],al
24877                                           !BCC_EOS
24878                                           ! 3360    g=inb( 0x3c9 );
24879                                           ! Debug: list int = const $3C9 (used reg = )
24880 64C8           B8                   03C9  mov	ax,#$3C9
24881 64CB           50                         push	ax
24882                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24883 64CC           E8         1719            call	_inb
24884 64CF           44                         inc	sp
24885 64D0           44                         inc	sp
24886                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24887 64D1           8846         FE            mov	-2[bp],al
24888                                           !BCC_EOS
24889                                           ! 3361    b=inb( 0x3c9 );
24890                                           ! Debug: list int = const $3C9 (used reg = )
24891 64D4           B8                   03C9  mov	ax,#$3C9
24892 64D7           50                         push	ax
24893                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24894 64D8           E8         170D            call	_inb
24895 64DB           44                         inc	sp
24896 64DC           44                         inc	sp
24897                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24898 64DD           8846         FD            mov	-3[bp],al
24899                                           !BCC_EOS
24900                                           ! 3362    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24901                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24902                                           ! Debug: expression subtree swapping
24903 64E0           8A46         FD            mov	al,-3[bp]
24904 64E3           30E4                       xor	ah,ah
24905 64E5           B9                   001C  mov	cx,*$1C
24906 64E8           F7E9                       imul	cx
24907 64EA           50                         push	ax
24908                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24909                                           ! Debug: expression subtree swapping
24910 64EB           8A46         FE            mov	al,-2[bp]
24911 64EE           30E4                       xor	ah,ah
24912 64F0           B9                   0097  mov	cx,#$97
24913 64F3           F7E9                       imul	cx
24914 64F5           50                         push	ax
24915                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24916                                           ! Debug: expression subtree swapping
24917 64F6           8A46         FF            mov	al,-1[bp]
24918 64F9           30E4                       xor	ah,ah
24919 64FB           B9                   004D  mov	cx,*$4D
24920 64FE           F7E9                       imul	cx
24921                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24922 6500           0346         F4            add	ax,-$C[bp]
24923 6503           44                         inc	sp
24924 6504           44                         inc	sp
24925                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24926 6505           0346         F6            add	ax,-$A[bp]
24927 6508           44                         inc	sp
24928 6509           44                         inc	sp
24929                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24930                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24931 650A           05                   0080  add	ax,#$80
24932 650D           88E0                       mov	al,ah
24933 650F           30E4                       xor	ah,ah
24934                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24935 6511           8946         FA            mov	-6[bp],ax
24936                                           !BCC_EOS
24937                                           ! 3363    if(i>0x3f)i=0x3f;
24938                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24939 6514           8B46         FA            mov	ax,-6[bp]
24940 6517           3D                   003F  cmp	ax,*$3F
24941 651A           76           06            jbe 	.20B
24942                       0000651C            .20C:
24943                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24944 651C           B8                   003F  mov	ax,*$3F
24945 651F           8946         FA            mov	-6[bp],ax
24946                                           !BCC_EOS
24947                                           ! 3364    outb(0x3c8,start);
24948                       00006522            .20B:
24949                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24950 6522           FF76         04            push	4[bp]
24951                                           ! Debug: list int = const $3C8 (used reg = )
24952 6525           B8                   03C8  mov	ax,#$3C8
24953 6528           50                         push	ax
24954                                           ! Debug: func () void = outb+0 (used reg = )
24955 6529           E8         16D2            call	_outb
24956 652C           83C4                   04  add	sp,*4
24957                                           !BCC_EOS
24958                                           ! 3365    outb( 0x3c9, i&0xff );
24959                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24960 652F           8A46         FA            mov	al,-6[bp]
24961                                           ! Debug: list unsigned char = al+0 (used reg = )
24962 6532           30E4                       xor	ah,ah
24963 6534           50                         push	ax
24964                                           ! Debug: list int = const $3C9 (used reg = )
24965 6535           B8                   03C9  mov	ax,#$3C9
24966 6538           50                         push	ax
24967                                           ! Debug: func () void = outb+0 (used reg = )
24968 6539           E8         16C2            call	_outb
24969 653C           83C4                   04  add	sp,*4
24970                                           !BCC_EOS
24971                                           ! 3366    outb( 0x3c9, i&0xff );
24972                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24973 653F           8A46         FA            mov	al,-6[bp]
24974                                           ! Debug: list unsigned char = al+0 (used reg = )
24975 6542           30E4                       xor	ah,ah
24976 6544           50                         push	ax
24977                                           ! Debug: list int = const $3C9 (used reg = )
24978 6545           B8                   03C9  mov	ax,#$3C9
24979 6548           50                         push	ax
24980                                           ! Debug: func () void = outb+0 (used reg = )
24981 6549           E8         16B2            call	_outb
24982 654C           83C4                   04  add	sp,*4
24983                                           !BCC_EOS
24984                                           ! 3367    outb( 0x3c9, i&0xff );
24985                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24986 654F           8A46         FA            mov	al,-6[bp]
24987                                           ! Debug: list unsigned char = al+0 (used reg = )
24988 6552           30E4                       xor	ah,ah
24989 6554           50                         push	ax
24990                                           ! Debug: list int = const $3C9 (used reg = )
24991 6555           B8                   03C9  mov	ax,#$3C9
24992 6558           50                         push	ax
24993                                           ! Debug: func () void = outb+0 (used reg = )
24994 6559           E8         16A2            call	_outb
24995 655C           83C4                   04  add	sp,*4
24996                                           !BCC_EOS
24997                                           ! 3368    start++;
24998                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24999 655F           8B46         04            mov	ax,4[bp]
25000 6562           40                         inc	ax
25001 6563           8946         04            mov	4[bp],ax
25002                                           !BCC_EOS
25003                                           ! 3369   }
25004                                           ! 3370  inb(0x3da);
25005                       00006566            .208:
25006                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25007 6566           8B46         F8            mov	ax,-8[bp]
25008 6569           40                         inc	ax
25009 656A           8946         F8            mov	-8[bp],ax
25010                       0000656D            .209:
25011                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25012 656D           8B46         F8            mov	ax,-8[bp]
25013 6570           3B46         06            cmp	ax,6[bp]
25014 6573         0F82         FF38            blo 	.20A
25015                       00006577            .20D:
25016                       00006577            .207:
25017                                           ! Debug: list int = const $3DA (used reg = )
25018 6577           B8                   03DA  mov	ax,#$3DA
25019 657A           50                         push	ax
25020                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25021 657B           E8         166A            call	_inb
25022 657E           44                         inc	sp
25023 657F           44                         inc	sp
25024                                           !BCC_EOS
25025                                           ! 3371  outb(0x3c0,0x20);
25026                                           ! Debug: list int = const $20 (used reg = )
25027 6580           B8                   0020  mov	ax,*$20
25028 6583           50                         push	ax
25029                                           ! Debug: list int = const $3C0 (used reg = )
25030 6584           B8                   03C0  mov	ax,#$3C0
25031 6587           50                         push	ax
25032                                           ! Debug: func () void = outb+0 (used reg = )
25033 6588           E8         1673            call	_outb
25034 658B           83C4                   04  add	sp,*4
25035                                           !BCC_EOS
25036                                           ! 3372 }
25037 658E           89EC                       mov	sp,bp
25038 6590           5D                         pop	bp
25039 6591           C3                         ret
25040                                           ! 3373 static void get_font_access()
25041                                           ! 3374 {
25042                       00006592            _get_font_access:
25043                                           ! 3375 #asm
25044                                           !BCC_ASM
25045 6592           BA                   03C4   mov dx, # 0x3c4
25046 6595           B8                   0100   mov ax, #0x0100
25047 6598           EF                          out dx, ax
25048 6599           B8                   0402   mov ax, #0x0402
25049 659C           EF                          out dx, ax
25050 659D           B8                   0704   mov ax, #0x0704
25051 65A0           EF                          out dx, ax
25052 65A1           B8                   0300   mov ax, #0x0300
25053 65A4           EF                          out dx, ax
25054 65A5           BA                   03CE   mov dx, # 0x3ce
25055 65A8           B8                   0204   mov ax, #0x0204
25056 65AB           EF                          out dx, ax
25057 65AC           B8                   0005   mov ax, #0x0005
25058 65AF           EF                          out dx, ax
25059 65B0           B8                   0406   mov ax, #0x0406
25060 65B3           EF                          out dx, ax
25061                                           ! 3392 endasm
25062                                           !BCC_ENDASM
25063                                           ! 3393 }
25064 65B4           C3                         ret
25065                                           ! 3394 static void release_font_access()
25066                                           ! 3395 {
25067                       000065B5            _release_font_access:
25068                                           ! 3396 #asm
25069                                           !BCC_ASM
25070 65B5           BA                   03C4   mov dx, # 0x3c4
25071 65B8           B8                   0100   mov ax, #0x0100
25072 65BB           EF                          out dx, ax
25073 65BC           B8                   0302   mov ax, #0x0302
25074 65BF           EF                          out dx, ax
25075 65C0           B8                   0304   mov ax, #0x0304
25076 65C3           EF                          out dx, ax
25077 65C4           B8                   0300   mov ax, #0x0300
25078 65C7           EF                          out dx, ax
25079 65C8           BA                   03CC   mov dx, # 0x3cc
25080 65CB           EC                          in al, dx
25081 65CC           24                     01   and al, #0x01
25082 65CE           C0E0                   02   shl al, 2
25083 65D1           0C                     0A   or al, #0x0a
25084 65D3           88C4                        mov ah, al
25085 65D5           B0                     06   mov al, #0x06
25086 65D7           BA                   03CE   mov dx, # 0x3ce
25087 65DA           EF                          out dx, ax
25088 65DB           B8                   0004   mov ax, #0x0004
25089 65DE           EF                          out dx, ax
25090 65DF           B8                   1005   mov ax, #0x1005
25091 65E2           EF                          out dx, ax
25092                                           ! 3419 endasm
25093                                           !BCC_ENDASM
25094                                           ! 3420 }
25095 65E3           C3                         ret
25096                                           ! 3421 #asm
25097                                           !BCC_ASM
25098                       000065E4            idiv_u:
25099 65E4           31D2                         xor dx,dx
25100 65E6           F7F3                         div bx
25101 65E8           C3                           ret
25102                                           ! 3426 endasm
25103                                           !BCC_ENDASM
25104                                           ! 3427 static void set_scan_lines(lines) Bit8u lines;
25105                       000065E9            _set_scan_lines:
25106                                           !BCC_EOS
25107                                           ! 3428 {
25108                                           ! 3429  Bit16u crtc_addr,cols,page,vde;
25109                                           !BCC_EOS
25110                                           ! 3430  Bit8u crtc_r9,ovl,rows;
25111                                           !BCC_EOS
25112                                           ! 3431  crtc_addr = read_word(0x40,0x63);
25113 65E9           55                         push	bp
25114 65EA           89E5                       mov	bp,sp
25115 65EC           83C4                   F4  add	sp,*-$C
25116                                           ! Debug: list int = const $63 (used reg = )
25117 65EF           B8                   0063  mov	ax,*$63
25118 65F2           50                         push	ax
25119                                           ! Debug: list int = const $40 (used reg = )
25120 65F3           B8                   0040  mov	ax,*$40
25121 65F6           50                         push	ax
25122                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25123 65F7           E8         15AB            call	_read_word
25124 65FA           83C4                   04  add	sp,*4
25125                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25126 65FD           8946         FE            mov	-2[bp],ax
25127                                           !BCC_EOS
25128                                           ! 3432  outb(crtc_addr, 0x09);
25129                                           ! Debug: list int = const 9 (used reg = )
25130 6600           B8                   0009  mov	ax,*9
25131 6603           50                         push	ax
25132                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25133 6604           FF76         FE            push	-2[bp]
25134                                           ! Debug: func () void = outb+0 (used reg = )
25135 6607           E8         15F4            call	_outb
25136 660A           83C4                   04  add	sp,*4
25137                                           !BCC_EOS
25138                                           ! 3433  crtc_r9 = inb(crtc_addr+1);
25139                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25140 660D           8B46         FE            mov	ax,-2[bp]
25141                                           ! Debug: list unsigned int = ax+1 (used reg = )
25142 6610           40                         inc	ax
25143 6611           50                         push	ax
25144                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25145 6612           E8         15D3            call	_inb
25146 6615           44                         inc	sp
25147 6616           44                         inc	sp
25148                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25149 6617           8846         F7            mov	-9[bp],al
25150                                           !BCC_EOS
25151                                           ! 3434  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25152                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25153 661A           8A46         04            mov	al,4[bp]
25154 661D           30E4                       xor	ah,ah
25155 661F           48                         dec	ax
25156 6620           50                         push	ax
25157                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25158 6621           8A46         F7            mov	al,-9[bp]
25159 6624           24                     E0  and	al,#$E0
25160                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25161 6626           30E4                       xor	ah,ah
25162 6628           0B46         F2            or	ax,-$E[bp]
25163 662B           44                         inc	sp
25164 662C           44                         inc	sp
25165                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25166 662D           8846         F7            mov	-9[bp],al
25167                                           !BCC_EOS
25168                                           ! 3435  outb(crtc_addr+1, crtc_r9);
25169                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25170 6630           8A46         F7            mov	al,-9[bp]
25171 6633           30E4                       xor	ah,ah
25172 6635           50                         push	ax
25173                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25174 6636           8B46         FE            mov	ax,-2[bp]
25175                                           ! Debug: list unsigned int = ax+1 (used reg = )
25176 6639           40                         inc	ax
25177 663A           50                         push	ax
25178                                           ! Debug: func () void = outb+0 (used reg = )
25179 663B           E8         15C0            call	_outb
25180 663E           83C4                   04  add	sp,*4
25181                                           !BCC_EOS
25182                                           ! 3436  if(lines==8)
25183                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25184 6641           8A46         04            mov	al,4[bp]
25185 6644           3C                     08  cmp	al,*8
25186 6646           75           10            jne 	.20E
25187                       00006648            .20F:
25188                                           ! 3437   {
25189                                           ! 3438    biosfn_set_cursor_shape(0x06,0x07);
25190                                           ! Debug: list int = const 7 (used reg = )
25191 6648           B8                   0007  mov	ax,*7
25192 664B           50                         push	ax
25193                                           ! Debug: list int = const 6 (used reg = )
25194 664C           B8                   0006  mov	ax,*6
25195 664F           50                         push	ax
25196                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25197 6650           E8         DBDE            call	_biosfn_set_cursor_shape
25198 6653           83C4                   04  add	sp,*4
25199                                           !BCC_EOS
25200                                           ! 3439   }
25201                                           ! 3440  else
25202                                           ! 3441   {
25203 6656           EB           18            jmp .210
25204                       00006658            .20E:
25205                                           ! 3442    biosfn_set_cursor_shape(lines-4,lines-3);
25206                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25207 6658           8A46         04            mov	al,4[bp]
25208 665B           30E4                       xor	ah,ah
25209                                           ! Debug: list unsigned int = ax-3 (used reg = )
25210 665D           05                   FFFD  add	ax,*-3
25211 6660           50                         push	ax
25212                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25213 6661           8A46         04            mov	al,4[bp]
25214 6664           30E4                       xor	ah,ah
25215                                           ! Debug: list unsigned int = ax-4 (used reg = )
25216 6666           05                   FFFC  add	ax,*-4
25217 6669           50                         push	ax
25218                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25219 666A           E8         DBC4            call	_biosfn_set_cursor_shape
25220 666D           83C4                   04  add	sp,*4
25221                                           !BCC_EOS
25222                                           ! 3443   }
25223                                           ! 3444  write_word(0x40,0x85, lines);
25224                       00006670            .210:
25225                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25226 6670           8A46         04            mov	al,4[bp]
25227 6673           30E4                       xor	ah,ah
25228 6675           50                         push	ax
25229                                           ! Debug: list int = const $85 (used reg = )
25230 6676           B8                   0085  mov	ax,#$85
25231 6679           50                         push	ax
25232                                           ! Debug: list int = const $40 (used reg = )
25233 667A           B8                   0040  mov	ax,*$40
25234 667D           50                         push	ax
25235                                           ! Debug: func () void = write_word+0 (used reg = )
25236 667E           E8         154F            call	_write_word
25237 6681           83C4                   06  add	sp,*6
25238                                           !BCC_EOS
25239                                           ! 3445  outb(crtc_addr, 0x12);
25240                                           ! Debug: list int = const $12 (used reg = )
25241 6684           B8                   0012  mov	ax,*$12
25242 6687           50                         push	ax
25243                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25244 6688           FF76         FE            push	-2[bp]
25245                                           ! Debug: func () void = outb+0 (used reg = )
25246 668B           E8         1570            call	_outb
25247 668E           83C4                   04  add	sp,*4
25248                                           !BCC_EOS
25249                                           ! 3446  vde = inb(crtc_addr+1);
25250                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25251 6691           8B46         FE            mov	ax,-2[bp]
25252                                           ! Debug: list unsigned int = ax+1 (used reg = )
25253 6694           40                         inc	ax
25254 6695           50                         push	ax
25255                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25256 6696           E8         154F            call	_inb
25257 6699           44                         inc	sp
25258 669A           44                         inc	sp
25259                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25260 669B           30E4                       xor	ah,ah
25261 669D           8946         F8            mov	-8[bp],ax
25262                                           !BCC_EOS
25263                                           ! 3447  outb(crtc_addr, 0x07);
25264                                           ! Debug: list int = const 7 (used reg = )
25265 66A0           B8                   0007  mov	ax,*7
25266 66A3           50                         push	ax
25267                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25268 66A4           FF76         FE            push	-2[bp]
25269                                           ! Debug: func () void = outb+0 (used reg = )
25270 66A7           E8         1554            call	_outb
25271 66AA           83C4                   04  add	sp,*4
25272                                           !BCC_EOS
25273                                           ! 3448  ovl = inb(crtc_addr+1);
25274                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25275 66AD           8B46         FE            mov	ax,-2[bp]
25276                                           ! Debug: list unsigned int = ax+1 (used reg = )
25277 66B0           40                         inc	ax
25278 66B1           50                         push	ax
25279                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25280 66B2           E8         1533            call	_inb
25281 66B5           44                         inc	sp
25282 66B6           44                         inc	sp
25283                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25284 66B7           8846         F6            mov	-$A[bp],al
25285                                           !BCC_EOS
25286                                           ! 3449  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25287                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25288 66BA           8A46         F6            mov	al,-$A[bp]
25289 66BD           24                     40  and	al,*$40
25290                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25291 66BF           30E4                       xor	ah,ah
25292 66C1           B1                     03  mov	cl,*3
25293 66C3           D3E0                       shl	ax,cl
25294 66C5           50                         push	ax
25295                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25296 66C6           8A46         F6            mov	al,-$A[bp]
25297 66C9           24                     02  and	al,*2
25298                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25299 66CB           30E4                       xor	ah,ah
25300 66CD           B1                     07  mov	cl,*7
25301 66CF           D3E0                       shl	ax,cl
25302                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25303 66D1           0346         F2            add	ax,-$E[bp]
25304 66D4           44                         inc	sp
25305 66D5           44                         inc	sp
25306                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25307                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25308 66D6           40                         inc	ax
25309 66D7           0346         F8            add	ax,-8[bp]
25310 66DA           8946         F8            mov	-8[bp],ax
25311                                           !BCC_EOS
25312                                           ! 3450  rows = vde / lines;
25313                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25314 66DD           8A46         04            mov	al,4[bp]
25315 66E0           30E4                       xor	ah,ah
25316 66E2           89C3                       mov	bx,ax
25317 66E4           8B46         F8            mov	ax,-8[bp]
25318 66E7           E8         FEFA            call	idiv_u
25319                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25320 66EA           8846         F5            mov	-$B[bp],al
25321                                           !BCC_EOS
25322                                           ! 3451  write_byte(0x40,0x84, rows-1);
25323                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25324 66ED           8A46         F5            mov	al,-$B[bp]
25325 66F0           30E4                       xor	ah,ah
25326                                           ! Debug: list unsigned int = ax-1 (used reg = )
25327 66F2           48                         dec	ax
25328 66F3           50                         push	ax
25329                                           ! Debug: list int = const $84 (used reg = )
25330 66F4           B8                   0084  mov	ax,#$84
25331 66F7           50                         push	ax
25332                                           ! Debug: list int = const $40 (used reg = )
25333 66F8           B8                   0040  mov	ax,*$40
25334 66FB           50                         push	ax
25335                                           ! Debug: func () void = write_byte+0 (used reg = )
25336 66FC           E8         14B9            call	_write_byte
25337 66FF           83C4                   06  add	sp,*6
25338                                           !BCC_EOS
25339                                           ! 3452  cols = read_word(0x40,0x4A);
25340                                           ! Debug: list int = const $4A (used reg = )
25341 6702           B8                   004A  mov	ax,*$4A
25342 6705           50                         push	ax
25343                                           ! Debug: list int = const $40 (used reg = )
25344 6706           B8                   0040  mov	ax,*$40
25345 6709           50                         push	ax
25346                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25347 670A           E8         1498            call	_read_word
25348 670D           83C4                   04  add	sp,*4
25349                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25350 6710           8946         FC            mov	-4[bp],ax
25351                                           !BCC_EOS
25352                                           ! 3453  write_word(0x40,0x4C, rows * cols * 2);
25353                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25354 6713           8A46         F5            mov	al,-$B[bp]
25355 6716           30E4                       xor	ah,ah
25356 6718           8B4E         FC            mov	cx,-4[bp]
25357 671B           F7E9                       imul	cx
25358                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25359 671D           D1E0                       shl	ax,*1
25360                                           ! Debug: list unsigned int = ax+0 (used reg = )
25361 671F           50                         push	ax
25362                                           ! Debug: list int = const $4C (used reg = )
25363 6720           B8                   004C  mov	ax,*$4C
25364 6723           50                         push	ax
25365                                           ! Debug: list int = const $40 (used reg = )
25366 6724           B8                   0040  mov	ax,*$40
25367 6727           50                         push	ax
25368                                           ! Debug: func () void = write_word+0 (used reg = )
25369 6728           E8         14A5            call	_write_word
25370 672B           83C4                   06  add	sp,*6
25371                                           !BCC_EOS
25372                                           ! 3454 }
25373 672E           89EC                       mov	sp,bp
25374 6730           5D                         pop	bp
25375 6731           C3                         ret
25376                                           ! 3455 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25377                                           ! Register BX used in function set_scan_lines
25378                       00006732            _biosfn_load_text_user_pat:
25379                                           !BCC_EOS
25380                                           !BCC_EOS
25381                                           !BCC_EOS
25382                                           !BCC_EOS
25383                                           !BCC_EOS
25384                                           !BCC_EOS
25385                                           !BCC_EOS
25386                                           ! 3456 {
25387                                           ! 3457  Bit16u blockaddr,dest,i,src;
25388                                           !BCC_EOS
25389                                           ! 3458  get_font_access();
25390 6732           55                         push	bp
25391 6733           89E5                       mov	bp,sp
25392 6735           83C4                   F8  add	sp,*-8
25393                                           ! Debug: func () void = get_font_access+0 (used reg = )
25394 6738           E8         FE57            call	_get_font_access
25395                                           !BCC_EOS
25396                                           ! 3459  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25397                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25398 673B           8A46         0E            mov	al,$E[bp]
25399 673E           24                     04  and	al,*4
25400                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25401 6740           30E4                       xor	ah,ah
25402 6742           88C4                       mov	ah,al
25403 6744           30C0                       xor	al,al
25404 6746           B1                     03  mov	cl,*3
25405 6748           D3E0                       shl	ax,cl
25406 674A           50                         push	ax
25407                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25408 674B           8A46         0E            mov	al,$E[bp]
25409 674E           24                     03  and	al,*3
25410                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25411 6750           30E4                       xor	ah,ah
25412 6752           88C4                       mov	ah,al
25413 6754           30C0                       xor	al,al
25414 6756           B1                     06  mov	cl,*6
25415 6758           D3E0                       shl	ax,cl
25416                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25417 675A           0346         F6            add	ax,-$A[bp]
25418 675D           44                         inc	sp
25419 675E           44                         inc	sp
25420                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25421 675F           8946         FE            mov	-2[bp],ax
25422                                           !BCC_EOS
25423                                           ! 3460  for(i=0;i<CX;i++)
25424                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25425 6762           31C0                       xor	ax,ax
25426 6764           8946         FA            mov	-6[bp],ax
25427                                           !BCC_EOS
25428                                           !BCC_EOS
25429                                           ! 3461   {
25430 6767           EB           44            jmp .213
25431                       00006769            .214:
25432                                           ! 3462    src = BP + i * BH;
25433                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25434 6769           8A46         10            mov	al,$10[bp]
25435 676C           30E4                       xor	ah,ah
25436 676E           89C3                       mov	bx,ax
25437 6770           8B46         FA            mov	ax,-6[bp]
25438 6773           89D9                       mov	cx,bx
25439 6775           F7E9                       imul	cx
25440                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25441                                           ! Debug: expression subtree swapping
25442 6777           0346         08            add	ax,8[bp]
25443                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25444 677A           8946         F8            mov	-8[bp],ax
25445                                           !BCC_EOS
25446                                           ! 3463  
25447                                           ! 3463   dest = blockaddr + (DX + i) * 32;
25448                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25449 677D           8B46         0C            mov	ax,$C[bp]
25450 6780           0346         FA            add	ax,-6[bp]
25451                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25452 6783           B1                     05  mov	cl,*5
25453 6785           D3E0                       shl	ax,cl
25454                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25455                                           ! Debug: expression subtree swapping
25456 6787           0346         FE            add	ax,-2[bp]
25457                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25458 678A           8946         FC            mov	-4[bp],ax
25459                                           !BCC_EOS
25460                                           ! 3464    memcpyb(0xA000, dest, ES, src, BH);
25461                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25462 678D           8A46         10            mov	al,$10[bp]
25463 6790           30E4                       xor	ah,ah
25464 6792           50                         push	ax
25465                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25466 6793           FF76         F8            push	-8[bp]
25467                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25468 6796           FF76         06            push	6[bp]
25469                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25470 6799           FF76         FC            push	-4[bp]
25471                                           ! Debug: list unsigned int = const $A000 (used reg = )
25472 679C           B8                   A000  mov	ax,#$A000
25473 679F           50                         push	ax
25474                                           ! Debug: func () void = memcpyb+0 (used reg = )
25475 67A0           E8         138F            call	_memcpyb
25476 67A3           83C4                   0A  add	sp,*$A
25477                                           !BCC_EOS
25478                                           ! 3465   }
25479                                           ! 3466  release_font_access();
25480                       000067A6            .212:
25481                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25482 67A6           8B46         FA            mov	ax,-6[bp]
25483 67A9           40                         inc	ax
25484 67AA           8946         FA            mov	-6[bp],ax
25485                       000067AD            .213:
25486                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25487 67AD           8B46         FA            mov	ax,-6[bp]
25488 67B0           3B46         0A            cmp	ax,$A[bp]
25489 67B3           72           B4            jb 	.214
25490                       000067B5            .215:
25491                       000067B5            .211:
25492                                           ! Debug: func () void = release_font_access+0 (used reg = )
25493 67B5           E8         FDFD            call	_release_font_access
25494                                           !BCC_EOS
25495                                           ! 3467  if(AL>=0x10)
25496                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25497 67B8           8A46         04            mov	al,4[bp]
25498 67BB           3C                     10  cmp	al,*$10
25499 67BD           72           0B            jb  	.216
25500                       000067BF            .217:
25501                                           ! 3468   {
25502                                           ! 3469    set_scan_lines(BH);
25503                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25504 67BF           8A46         10            mov	al,$10[bp]
25505 67C2           30E4                       xor	ah,ah
25506 67C4           50                         push	ax
25507                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25508 67C5           E8         FE21            call	_set_scan_lines
25509 67C8           44                         inc	sp
25510 67C9           44                         inc	sp
25511                                           !BCC_EOS
25512                                           ! 3470   }
25513                                           ! 3471 }
25514                       000067CA            .216:
25515 67CA           89EC                       mov	sp,bp
25516 67CC           5D                         pop	bp
25517 67CD           C3                         ret
25518                                           ! 3472 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25519                                           ! Register BX used in function biosfn_load_text_user_pat
25520                       000067CE            _biosfn_load_text_8_14_pat:
25521                                           !BCC_EOS
25522                                           !BCC_EOS
25523                                           ! 3473 {
25524                                           ! 3474  Bit16u blockaddr,dest,i,src;
25525                                           !BCC_EOS
25526                                           ! 3475  get_font_access();
25527 67CE           55                         push	bp
25528 67CF           89E5                       mov	bp,sp
25529 67D1           83C4                   F8  add	sp,*-8
25530                                           ! Debug: func () void = get_font_access+0 (used reg = )
25531 67D4           E8         FDBB            call	_get_font_access
25532                                           !BCC_EOS
25533                                           ! 3476  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25534                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25535 67D7           8A46         06            mov	al,6[bp]
25536 67DA           24                     04  and	al,*4
25537                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25538 67DC           30E4                       xor	ah,ah
25539 67DE           88C4                       mov	ah,al
25540 67E0           30C0                       xor	al,al
25541 67E2           B1                     03  mov	cl,*3
25542 67E4           D3E0                       shl	ax,cl
25543 67E6           50                         push	ax
25544                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25545 67E7           8A46         06            mov	al,6[bp]
25546 67EA           24                     03  and	al,*3
25547                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25548 67EC           30E4                       xor	ah,ah
25549 67EE           88C4                       mov	ah,al
25550 67F0           30C0                       xor	al,al
25551 67F2           B1                     06  mov	cl,*6
25552 67F4           D3E0                       shl	ax,cl
25553                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25554 67F6           0346         F6            add	ax,-$A[bp]
25555 67F9           44                         inc	sp
25556 67FA           44                         inc	sp
25557                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25558 67FB           8946         FE            mov	-2[bp],ax
25559                                           !BCC_EOS
25560                                           ! 3477  for(i=0;i<0x100;i++)
25561                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25562 67FE           31C0                       xor	ax,ax
25563 6800           8946         FA            mov	-6[bp],ax
25564                                           !BCC_EOS
25565                                           !BCC_EOS
25566                                           ! 3478   {
25567 6803           EB           41            jmp .21A
25568                       00006805            .21B:
25569                                           ! 3479    src = i * 14;
25570                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25571 6805           8B46         FA            mov	ax,-6[bp]
25572 6808           89C2                       mov	dx,ax
25573 680A           B1                     03  mov	cl,*3
25574 680C           D3E0                       shl	ax,cl
25575 680E           29D0                       sub	ax,dx
25576 6810           D1E0                       shl	ax,*1
25577                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25578 6812           8946         F8            mov	-8[bp],ax
25579                                           !BCC_EOS
25580                                           ! 3480    dest = blockaddr + i * 32;
25581                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25582 6815           8B46         FA            mov	ax,-6[bp]
25583 6818           B1                     05  mov	cl,*5
25584 681A           D3E0                       shl	ax,cl
25585                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25586                                           ! Debug: expression subtree swapping
25587 681C           0346         FE            add	ax,-2[bp]
25588                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25589 681F           8946         FC            mov	-4[bp],ax
25590                                           !BCC_EOS
25591                                           ! 3481    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25592                                           ! Debug: list int = const $E (used reg = )
25593 6822           B8                   000E  mov	ax,*$E
25594 6825           50                         push	ax
25595                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25596 6826           8B5E         F8            mov	bx,-8[bp]
25597                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25598                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25599 6829           81C3                 1763  add	bx,#_vgafont14
25600 682D           53                         push	bx
25601                                           ! Debug: list unsigned int = const $C000 (used reg = )
25602 682E           B8                   C000  mov	ax,#$C000
25603 6831           50                         push	ax
25604                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25605 6832           FF76         FC            push	-4[bp]
25606                                           ! Debug: list unsigned int = const $A000 (used reg = )
25607 6835           B8                   A000  mov	ax,#$A000
25608 6838           50                         push	ax
25609                                           ! Debug: func () void = memcpyb+0 (used reg = )
25610 6839           E8         12F6            call	_memcpyb
25611 683C           83C4                   0A  add	sp,*$A
25612                                           !BCC_EOS
25613                                           ! 3482   }
25614                                           ! 3483  release_font_access();
25615                       0000683F            .219:
25616                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25617 683F           8B46         FA            mov	ax,-6[bp]
25618 6842           40                         inc	ax
25619 6843           8946         FA            mov	-6[bp],ax
25620                       00006846            .21A:
25621                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25622 6846           8B46         FA            mov	ax,-6[bp]
25623 6849           3D                   0100  cmp	ax,#$100
25624 684C           72           B7            jb 	.21B
25625                       0000684E            .21C:
25626                       0000684E            .218:
25627                                           ! Debug: func () void = release_font_access+0 (used reg = )
25628 684E           E8         FD64            call	_release_font_access
25629                                           !BCC_EOS
25630                                           ! 3484  if(AL>=0x10)
25631                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25632 6851           8A46         04            mov	al,4[bp]
25633 6854           3C                     10  cmp	al,*$10
25634 6856           72           09            jb  	.21D
25635                       00006858            .21E:
25636                                           ! 3485   {
25637                                           ! 3486    set_scan_lines(14);
25638                                           ! Debug: list int = const $E (used reg = )
25639 6858           B8                   000E  mov	ax,*$E
25640 685B           50                         push	ax
25641                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25642 685C           E8         FD8A            call	_set_scan_lines
25643 685F           44                         inc	sp
25644 6860           44                         inc	sp
25645                                           !BCC_EOS
25646                                           ! 3487   }
25647                                           ! 3488 }
25648                       00006861            .21D:
25649 6861           89EC                       mov	sp,bp
25650 6863           5D                         pop	bp
25651 6864           C3                         ret
25652                                           ! 3489 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25653                                           ! Register BX used in function biosfn_load_text_8_14_pat
25654                       00006865            _biosfn_load_text_8_8_pat:
25655                                           !BCC_EOS
25656                                           !BCC_EOS
25657                                           ! 3490 {
25658                                           ! 3491  Bit16u blockaddr,dest,i,src;
25659                                           !BCC_EOS
25660                                           ! 3492  get_font_access();
25661 6865           55                         push	bp
25662 6866           89E5                       mov	bp,sp
25663 6868           83C4                   F8  add	sp,*-8
25664                                           ! Debug: func () void = get_font_access+0 (used reg = )
25665 686B           E8         FD24            call	_get_font_access
25666                                           !BCC_EOS
25667                                           ! 3493  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25668                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25669 686E           8A46         06            mov	al,6[bp]
25670 6871           24                     04  and	al,*4
25671                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25672 6873           30E4                       xor	ah,ah
25673 6875           88C4                       mov	ah,al
25674 6877           30C0                       xor	al,al
25675 6879           B1                     03  mov	cl,*3
25676 687B           D3E0                       shl	ax,cl
25677 687D           50                         push	ax
25678                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25679 687E           8A46         06            mov	al,6[bp]
25680 6881           24                     03  and	al,*3
25681                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25682 6883           30E4                       xor	ah,ah
25683 6885           88C4                       mov	ah,al
25684 6887           30C0                       xor	al,al
25685 6889           B1                     06  mov	cl,*6
25686 688B           D3E0                       shl	ax,cl
25687                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25688 688D           0346         F6            add	ax,-$A[bp]
25689 6890           44                         inc	sp
25690 6891           44                         inc	sp
25691                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25692 6892           8946         FE            mov	-2[bp],ax
25693                                           !BCC_EOS
25694                                           ! 3494  for(i=0;i<0x100;i++)
25695                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25696 6895           31C0                       xor	ax,ax
25697 6897           8946         FA            mov	-6[bp],ax
25698                                           !BCC_EOS
25699                                           !BCC_EOS
25700                                           ! 3495   {
25701 689A           EB           3B            jmp .221
25702                       0000689C            .222:
25703                                           ! 3496    src = i * 8;
25704                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25705 689C           8B46         FA            mov	ax,-6[bp]
25706 689F           B1                     03  mov	cl,*3
25707 68A1           D3E0                       shl	ax,cl
25708                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25709 68A3           8946         F8            mov	-8[bp],ax
25710                                           !BCC_EOS
25711                                           ! 3497    dest = blockaddr + i * 32;
25712                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25713 68A6           8B46         FA            mov	ax,-6[bp]
25714 68A9           B1                     05  mov	cl,*5
25715 68AB           D3E0                       shl	ax,cl
25716                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25717                                           ! Debug: expression subtree swapping
25718 68AD           0346         FE            add	ax,-2[bp]
25719                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25720 68B0           8946         FC            mov	-4[bp],ax
25721                                           !BCC_EOS
25722                                           ! 3498    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25723                                           ! Debug: list int = const 8 (used reg = )
25724 68B3           B8                   0008  mov	ax,*8
25725 68B6           50                         push	ax
25726                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25727 68B7           8B5E         F8            mov	bx,-8[bp]
25728                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25729                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25730 68BA           81C3                 0F63  add	bx,#_vgafont8
25731 68BE           53                         push	bx
25732                                           ! Debug: list unsigned int = const $C000 (used reg = )
25733 68BF           B8                   C000  mov	ax,#$C000
25734 68C2           50                         push	ax
25735                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25736 68C3           FF76         FC            push	-4[bp]
25737                                           ! Debug: list unsigned int = const $A000 (used reg = )
25738 68C6           B8                   A000  mov	ax,#$A000
25739 68C9           50                         push	ax
25740                                           ! Debug: func () void = memcpyb+0 (used reg = )
25741 68CA           E8         1265            call	_memcpyb
25742 68CD           83C4                   0A  add	sp,*$A
25743                                           !BCC_EOS
25744                                           ! 3499   }
25745                                           ! 3500  release_font_access();
25746                       000068D0            .220:
25747                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25748 68D0           8B46         FA            mov	ax,-6[bp]
25749 68D3           40                         inc	ax
25750 68D4           8946         FA            mov	-6[bp],ax
25751                       000068D7            .221:
25752                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25753 68D7           8B46         FA            mov	ax,-6[bp]
25754 68DA           3D                   0100  cmp	ax,#$100
25755 68DD           72           BD            jb 	.222
25756                       000068DF            .223:
25757                       000068DF            .21F:
25758                                           ! Debug: func () void = release_font_access+0 (used reg = )
25759 68DF           E8         FCD3            call	_release_font_access
25760                                           !BCC_EOS
25761                                           ! 3501  if(AL>=0x10)
25762                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25763 68E2           8A46         04            mov	al,4[bp]
25764 68E5           3C                     10  cmp	al,*$10
25765 68E7           72           09            jb  	.224
25766                       000068E9            .225:
25767                                           ! 3502   {
25768                                           ! 3503    set_scan_lines(8);
25769                                           ! Debug: list int = const 8 (used reg = )
25770 68E9           B8                   0008  mov	ax,*8
25771 68EC           50                         push	ax
25772                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25773 68ED           E8         FCF9            call	_set_scan_lines
25774 68F0           44                         inc	sp
25775 68F1           44                         inc	sp
25776                                           !BCC_EOS
25777                                           ! 3504   }
25778                                           ! 3505 }
25779                       000068F2            .224:
25780 68F2           89EC                       mov	sp,bp
25781 68F4           5D                         pop	bp
25782 68F5           C3                         ret
25783                                           ! 3506 #asm
25784                                           !BCC_ASM
25785                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25786                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25787                       000068F6            biosfn_set_text_block_specifier:
25788 68F6           50                           push ax
25789 68F7           52                           push dx
25790 68F8           BA                   03C4    mov dx, # 0x3c4
25791 68FB           88DC                         mov ah, bl
25792 68FD           B0                     03    mov al, #0x03
25793 68FF           EF                           out dx, ax
25794 6900           5A                           pop dx
25795 6901           58                           pop ax
25796 6902           C3                           ret
25797                                           ! 3517 endasm
25798                                           !BCC_ENDASM
25799                                           ! 3518 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25800                                           ! Register BX used in function biosfn_load_text_8_8_pat
25801                       00006903            _biosfn_load_text_8_16_pat:
25802                                           !BCC_EOS
25803                                           !BCC_EOS
25804                                           ! 3519 {
25805                                           ! 3520  Bit16u blockaddr,dest,i,src;
25806                                           !BCC_EOS
25807                                           ! 3521  get_font_access();
25808 6903           55                         push	bp
25809 6904           89E5                       mov	bp,sp
25810 6906           83C4                   F8  add	sp,*-8
25811                                           ! Debug: func () void = get_font_access+0 (used reg = )
25812 6909           E8         FC86            call	_get_font_access
25813                                           !BCC_EOS
25814                                           ! 3522  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25815                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25816 690C           8A46         06            mov	al,6[bp]
25817 690F           24                     04  and	al,*4
25818                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25819 6911           30E4                       xor	ah,ah
25820 6913           88C4                       mov	ah,al
25821 6915           30C0                       xor	al,al
25822 6917           B1                     03  mov	cl,*3
25823 6919           D3E0                       shl	ax,cl
25824 691B           50                         push	ax
25825                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25826 691C           8A46         06            mov	al,6[bp]
25827 691F           24                     03  and	al,*3
25828                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25829 6921           30E4                       xor	ah,ah
25830 6923           88C4                       mov	ah,al
25831 6925           30C0                       xor	al,al
25832 6927           B1                     06  mov	cl,*6
25833 6929           D3E0                       shl	ax,cl
25834                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25835 692B           0346         F6            add	ax,-$A[bp]
25836 692E           44                         inc	sp
25837 692F           44                         inc	sp
25838                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25839 6930           8946         FE            mov	-2[bp],ax
25840                                           !BCC_EOS
25841                                           ! 3523  for(i=0;i<0x100;i++)
25842                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25843 6933           31C0                       xor	ax,ax
25844 6935           8946         FA            mov	-6[bp],ax
25845                                           !BCC_EOS
25846                                           !BCC_EOS
25847                                           ! 3524   {
25848 6938           EB           3B            jmp .228
25849                       0000693A            .229:
25850                                           ! 3525    src = i * 16;
25851                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25852 693A           8B46         FA            mov	ax,-6[bp]
25853 693D           B1                     04  mov	cl,*4
25854 693F           D3E0                       shl	ax,cl
25855                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25856 6941           8946         F8            mov	-8[bp],ax
25857                                           !BCC_EOS
25858                                           ! 3526    dest = blockaddr + i * 32;
25859                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25860 6944           8B46         FA            mov	ax,-6[bp]
25861 6947           B1                     05  mov	cl,*5
25862 6949           D3E0                       shl	ax,cl
25863                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25864                                           ! Debug: expression subtree swapping
25865 694B           0346         FE            add	ax,-2[bp]
25866                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25867 694E           8946         FC            mov	-4[bp],ax
25868                                           !BCC_EOS
25869                                           ! 3527    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25870                                           ! Debug: list int = const $10 (used reg = )
25871 6951           B8                   0010  mov	ax,*$10
25872 6954           50                         push	ax
25873                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25874 6955           8B5E         F8            mov	bx,-8[bp]
25875                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25876                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25877 6958           81C3                 2563  add	bx,#_vgafont16
25878 695C           53                         push	bx
25879                                           ! Debug: list unsigned int = const $C000 (used reg = )
25880 695D           B8                   C000  mov	ax,#$C000
25881 6960           50                         push	ax
25882                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25883 6961           FF76         FC            push	-4[bp]
25884                                           ! Debug: list unsigned int = const $A000 (used reg = )
25885 6964           B8                   A000  mov	ax,#$A000
25886 6967           50                         push	ax
25887                                           ! Debug: func () void = memcpyb+0 (used reg = )
25888 6968           E8         11C7            call	_memcpyb
25889 696B           83C4                   0A  add	sp,*$A
25890                                           !BCC_EOS
25891                                           ! 3528   }
25892                                           ! 3529  release_font_access();
25893                       0000696E            .227:
25894                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25895 696E           8B46         FA            mov	ax,-6[bp]
25896 6971           40                         inc	ax
25897 6972           8946         FA            mov	-6[bp],ax
25898                       00006975            .228:
25899                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25900 6975           8B46         FA            mov	ax,-6[bp]
25901 6978           3D                   0100  cmp	ax,#$100
25902 697B           72           BD            jb 	.229
25903                       0000697D            .22A:
25904                       0000697D            .226:
25905                                           ! Debug: func () void = release_font_access+0 (used reg = )
25906 697D           E8         FC35            call	_release_font_access
25907                                           !BCC_EOS
25908                                           ! 3530  if(AL>=0x10)
25909                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25910 6980           8A46         04            mov	al,4[bp]
25911 6983           3C                     10  cmp	al,*$10
25912 6985           72           09            jb  	.22B
25913                       00006987            .22C:
25914                                           ! 3531   {
25915                                           ! 3532    set_scan_lines(16);
25916                                           ! Debug: list int = const $10 (used reg = )
25917 6987           B8                   0010  mov	ax,*$10
25918 698A           50                         push	ax
25919                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25920 698B           E8         FC5B            call	_set_scan_lines
25921 698E           44                         inc	sp
25922 698F           44                         inc	sp
25923                                           !BCC_EOS
25924                                           ! 3533   }
25925                                           ! 3534 }
25926                       00006990            .22B:
25927 6990           89EC                       mov	sp,bp
25928 6992           5D                         pop	bp
25929 6993           C3                         ret
25930                                           ! 3535 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25931                                           ! Register BX used in function biosfn_load_text_8_16_pat
25932                       00006994            _biosfn_load_gfx_8_8_chars:
25933                                           !BCC_EOS
25934                                           !BCC_EOS
25935                                           ! 3536 {
25936                                           ! 3537 }
25937 6994           C3                         ret
25938                                           ! 3538 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25939                       00006995            _biosfn_load_gfx_user_chars:
25940                                           !BCC_EOS
25941                                           !BCC_EOS
25942                                           !BCC_EOS
25943                                           !BCC_EOS
25944                                           !BCC_EOS
25945                                           ! 3539 {
25946                                           ! 3540 }
25947 6995           C3                         ret
25948                                           ! 3541 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25949                       00006996            _biosfn_load_gfx_8_14_chars:
25950                                           !BCC_EOS
25951                                           ! 3542 {
25952                                           ! 3543 }
25953 6996           C3                         ret
25954                                           ! 3544 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25955                       00006997            _biosfn_load_gfx_8_8_dd_chars:
25956                                           !BCC_EOS
25957                                           ! 3545 {
25958                                           ! 3546 }
25959 6997           C3                         ret
25960                                           ! 3547 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25961                       00006998            _biosfn_load_gfx_8_16_chars:
25962                                           !BCC_EOS
25963                                           ! 3548 {
25964                                           ! 3549 }
25965 6998           C3                         ret
25966                                           ! 3550 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25967                                           ! 3551 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25968                       00006999            _biosfn_get_font_info:
25969                                           !BCC_EOS
25970                                           !BCC_EOS
25971                                           !BCC_EOS
25972                                           !BCC_EOS
25973                                           !BCC_EOS
25974                                           ! 3552 {Bit16u ss=get_SS();
25975 6999           55                         push	bp
25976 699A           89E5                       mov	bp,sp
25977 699C           4C                         dec	sp
25978 699D           4C                         dec	sp
25979                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
25980 699E           E8         127D            call	_get_SS
25981                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
25982 69A1           8946         FE            mov	-2[bp],ax
25983                                           !BCC_EOS
25984                                           ! 3553  switch(BH)
25985 69A4           8A46         04            mov	al,4[bp]
25986                                           ! 3554   {case 0x00:
25987 69A7           E9         0143            br 	.22F
25988                                           ! 3555     write_word(ss,ES,read_word(0x00,0x1f*4));
25989                       000069AA            .230:
25990                                           ! Debug: list int = const $7C (used reg = )
25991 69AA           B8                   007C  mov	ax,*$7C
25992 69AD           50                         push	ax
25993                                           ! Debug: list int = const 0 (used reg = )
25994 69AE           31C0                       xor	ax,ax
25995 69B0           50                         push	ax
25996                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25997 69B1           E8         11F1            call	_read_word
25998 69B4           83C4                   04  add	sp,*4
25999                                           ! Debug: list unsigned short = ax+0 (used reg = )
26000 69B7           50                         push	ax
26001                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26002 69B8           FF76         06            push	6[bp]
26003                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26004 69BB           FF76         FE            push	-2[bp]
26005                                           ! Debug: func () void = write_word+0 (used reg = )
26006 69BE           E8         120F            call	_write_word
26007 69C1           83C4                   06  add	sp,*6
26008                                           !BCC_EOS
26009                                           ! 3556     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26010                                           ! Debug: list int = const $7E (used reg = )
26011 69C4           B8                   007E  mov	ax,*$7E
26012 69C7           50                         push	ax
26013                                           ! Debug: list int = const 0 (used reg = )
26014 69C8           31C0                       xor	ax,ax
26015 69CA           50                         push	ax
26016                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26017 69CB           E8         11D7            call	_read_word
26018 69CE           83C4                   04  add	sp,*4
26019                                           ! Debug: list unsigned short = ax+0 (used reg = )
26020 69D1           50                         push	ax
26021                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26022 69D2           FF76         08            push	8[bp]
26023                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26024 69D5           FF76         FE            push	-2[bp]
26025                                           ! Debug: func () void = write_word+0 (used reg = )
26026 69D8           E8         11F5            call	_write_word
26027 69DB           83C4                   06  add	sp,*6
26028                                           !BCC_EOS
26029                                           ! 3557     break;
26030 69DE           E9         0131            br 	.22D
26031                                           !BCC_EOS
26032                                           ! 3558    case 0x01:
26033                                           ! 3559    
26034                                           ! 3559  write_word(ss,ES,read_word(0x00,0x43*4));
26035                       000069E1            .231:
26036                                           ! Debug: list int = const $10C (used reg = )
26037 69E1           B8                   010C  mov	ax,#$10C
26038 69E4           50                         push	ax
26039                                           ! Debug: list int = const 0 (used reg = )
26040 69E5           31C0                       xor	ax,ax
26041 69E7           50                         push	ax
26042                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26043 69E8           E8         11BA            call	_read_word
26044 69EB           83C4                   04  add	sp,*4
26045                                           ! Debug: list unsigned short = ax+0 (used reg = )
26046 69EE           50                         push	ax
26047                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26048 69EF           FF76         06            push	6[bp]
26049                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26050 69F2           FF76         FE            push	-2[bp]
26051                                           ! Debug: func () void = write_word+0 (used reg = )
26052 69F5           E8         11D8            call	_write_word
26053 69F8           83C4                   06  add	sp,*6
26054                                           !BCC_EOS
26055                                           ! 3560     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26056                                           ! Debug: list int = const $10E (used reg = )
26057 69FB           B8                   010E  mov	ax,#$10E
26058 69FE           50                         push	ax
26059                                           ! Debug: list int = const 0 (used reg = )
26060 69FF           31C0                       xor	ax,ax
26061 6A01           50                         push	ax
26062                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26063 6A02           E8         11A0            call	_read_word
26064 6A05           83C4                   04  add	sp,*4
26065                                           ! Debug: list unsigned short = ax+0 (used reg = )
26066 6A08           50                         push	ax
26067                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26068 6A09           FF76         08            push	8[bp]
26069                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26070 6A0C           FF76         FE            push	-2[bp]
26071                                           ! Debug: func () void = write_word+0 (used reg = )
26072 6A0F           E8         11BE            call	_write_word
26073 6A12           83C4                   06  add	sp,*6
26074                                           !BCC_EOS
26075                                           ! 3561     break;
26076 6A15           E9         00FA            br 	.22D
26077                                           !BCC_EOS
26078                                           ! 3562    case 0x02:
26079                                           ! 3563     write_word(ss,ES,0xC000);
26080                       00006A18            .232:
26081                                           ! Debug: list unsigned int = const $C000 (used reg = )
26082 6A18           B8                   C000  mov	ax,#$C000
26083 6A1B           50                         push	ax
26084                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26085 6A1C           FF76         06            push	6[bp]
26086                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26087 6A1F           FF76         FE            push	-2[bp]
26088                                           ! Debug: func () void = write_word+0 (used reg = )
26089 6A22           E8         11AB            call	_write_word
26090 6A25           83C4                   06  add	sp,*6
26091                                           !BCC_EOS
26092                                           ! 3564     write_word(ss,BP,vgafont14);
26093                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26094 6A28           BB                   1763  mov	bx,#_vgafont14
26095 6A2B           53                         push	bx
26096                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26097 6A2C           FF76         08            push	8[bp]
26098                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26099 6A2F           FF76         FE            push	-2[bp]
26100                                           ! Debug: func () void = write_word+0 (used reg = )
26101 6A32           E8         119B            call	_write_word
26102 6A35           83C4                   06  add	sp,*6
26103                                           !BCC_EOS
26104                                           ! 3565     break;
26105 6A38           E9         00D7            br 	.22D
26106                                           !BCC_EOS
26107                                           ! 3566    case 0x03:
26108                                           ! 3567     write_word(ss,ES,0xC000);
26109                       00006A3B            .233:
26110                                           ! Debug: list unsigned int = const $C000 (used reg = )
26111 6A3B           B8                   C000  mov	ax,#$C000
26112 6A3E           50                         push	ax
26113                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26114 6A3F           FF76         06            push	6[bp]
26115                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26116 6A42           FF76         FE            push	-2[bp]
26117                                           ! Debug: func () void = write_word+0 (used reg = )
26118 6A45           E8         1188            call	_write_word
26119 6A48           83C4                   06  add	sp,*6
26120                                           !BCC_EOS
26121                                           ! 3568     write_word(ss,BP,vgafont8);
26122                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26123 6A4B           BB                   0F63  mov	bx,#_vgafont8
26124 6A4E           53                         push	bx
26125                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26126 6A4F           FF76         08            push	8[bp]
26127                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26128 6A52           FF76         FE            push	-2[bp]
26129                                           ! Debug: func () void = write_word+0 (used reg = )
26130 6A55           E8         1178            call	_write_word
26131 6A58           83C4                   06  add	sp,*6
26132                                           !BCC_EOS
26133                                           ! 3569     break;
26134 6A5B           E9         00B4            br 	.22D
26135                                           !BCC_EOS
26136                                           ! 3570    case 0x04:
26137                                           ! 3571     write_word(ss,ES,0xC000);
26138                       00006A5E            .234:
26139                                           ! Debug: list unsigned int = const $C000 (used reg = )
26140 6A5E           B8                   C000  mov	ax,#$C000
26141 6A61           50                         push	ax
26142                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26143 6A62           FF76         06            push	6[bp]
26144                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26145 6A65           FF76         FE            push	-2[bp]
26146                                           ! Debug: func () void = write_word+0 (used reg = )
26147 6A68           E8         1165            call	_write_word
26148 6A6B           83C4                   06  add	sp,*6
26149                                           !BCC_EOS
26150                                           ! 3572     write_word(ss,BP,vgafont8+128*8);
26151                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26152 6A6E           BB                   1363  mov	bx,#_vgafont8+$400
26153 6A71           53                         push	bx
26154                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26155 6A72           FF76         08            push	8[bp]
26156                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26157 6A75           FF76         FE            push	-2[bp]
26158                                           ! Debug: func () void = write_word+0 (used reg = )
26159 6A78           E8         1155            call	_write_word
26160 6A7B           83C4                   06  add	sp,*6
26161                                           !BCC_EOS
26162                                           ! 3573     break;
26163 6A7E           E9         0091            br 	.22D
26164                                           !BCC_EOS
26165                                           ! 3574    case 0x05:
26166                                           ! 3575     write_word(ss,ES,0xC000);
26167                       00006A81            .235:
26168                                           ! Debug: list unsigned int = const $C000 (used reg = )
26169 6A81           B8                   C000  mov	ax,#$C000
26170 6A84           50                         push	ax
26171                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26172 6A85           FF76         06            push	6[bp]
26173                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26174 6A88           FF76         FE            push	-2[bp]
26175                                           ! Debug: func () void = write_word+0 (used reg = )
26176 6A8B           E8         1142            call	_write_word
26177 6A8E           83C4                   06  add	sp,*6
26178                                           !BCC_EOS
26179                                           ! 3576     write_word(ss,BP,vgafont14alt);
26180                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26181 6A91           BB                   3563  mov	bx,#_vgafont14alt
26182 6A94           53                         push	bx
26183                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26184 6A95           FF76         08            push	8[bp]
26185                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26186 6A98           FF76         FE            push	-2[bp]
26187                                           ! Debug: func () void = write_word+0 (used reg = )
26188 6A9B           E8         1132            call	_write_word
26189 6A9E           83C4                   06  add	sp,*6
26190                                           !BCC_EOS
26191                                           ! 3577     break;
26192 6AA1           EB           6F            jmp .22D
26193                                           !BCC_EOS
26194                                           ! 3578    case 0x06:
26195                                           ! 3579     write_word(ss,ES,0xC000);
26196                       00006AA3            .236:
26197                                           ! Debug: list unsigned int = const $C000 (used reg = )
26198 6AA3           B8                   C000  mov	ax,#$C000
26199 6AA6           50                         push	ax
26200                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26201 6AA7           FF76         06            push	6[bp]
26202                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26203 6AAA           FF76         FE            push	-2[bp]
26204                                           ! Debug: func () void = write_word+0 (used reg = )
26205 6AAD           E8         1120            call	_write_word
26206 6AB0           83C4                   06  add	sp,*6
26207                                           !BCC_EOS
26208                                           ! 3580     write_word(ss,BP,vgafont16);
26209                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26210 6AB3           BB                   2563  mov	bx,#_vgafont16
26211 6AB6           53                         push	bx
26212                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26213 6AB7           FF76         08            push	8[bp]
26214                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26215 6ABA           FF76         FE            push	-2[bp]
26216                                           ! Debug: func () void = write_word+0 (used reg = )
26217 6ABD           E8         1110            call	_write_word
26218 6AC0           83C4                   06  add	sp,*6
26219                                           !BCC_EOS
26220                                           ! 3581     break;
26221 6AC3           EB           4D            jmp .22D
26222                                           !BCC_EOS
26223                                           ! 3582    case 0x07:
26224                                           ! 3583     write_word(ss,ES,0xC000);
26225                       00006AC5            .237:
26226                                           ! Debug: list unsigned int = const $C000 (used reg = )
26227 6AC5           B8                   C000  mov	ax,#$C000
26228 6AC8           50                         push	ax
26229                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26230 6AC9           FF76         06            push	6[bp]
26231                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26232 6ACC           FF76         FE            push	-2[bp]
26233                                           ! Debug: func () void = write_word+0 (used reg = )
26234 6ACF           E8         10FE            call	_write_word
26235 6AD2           83C4                   06  add	sp,*6
26236                                           !BCC_EOS
26237                                           ! 3584     write_word(ss,BP,vgafont16alt);
26238                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26239 6AD5           BB                   3564  mov	bx,#_vgafont16alt
26240 6AD8           53                         push	bx
26241                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26242 6AD9           FF76         08            push	8[bp]
26243                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26244 6ADC           FF76         FE            push	-2[bp]
26245                                           ! Debug: func () void = write_word+0 (used reg = )
26246 6ADF           E8         10EE            call	_write_word
26247 6AE2           83C4                   06  add	sp,*6
26248                                           !BCC_EOS
26249                                           ! 3585     break;
26250 6AE5           EB           2B            jmp .22D
26251                                           !BCC_EOS
26252                                           ! 3586    default:
26253                                           ! 3587     return;
26254                       00006AE7            .238:
26255 6AE7           89EC                       mov	sp,bp
26256 6AE9           5D                         pop	bp
26257 6AEA           C3                         ret
26258                                           !BCC_EOS
26259                                           ! 3588   }
26260                                           ! 3589  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26261 6AEB           EB           25            jmp .22D
26262                       00006AED            .22F:
26263 6AED           2C                     00  sub	al,*0
26264 6AEF           72           F6            jb 	.238
26265 6AF1           3C                     07  cmp	al,*7
26266 6AF3           77           1B            ja  	.239
26267 6AF5           30E4                       xor	ah,ah
26268 6AF7           D1E0                       shl	ax,*1
26269 6AF9           89C3                       mov	bx,ax
26270 6AFB           2E                         seg	cs
26271 6AFC           FFA7       6B00            br	.23A[bx]
26272                       00006B00            .23A:
26273 6B00                      69AA            .word	.230
26274 6B02                      69E1            .word	.231
26275 6B04                      6A18            .word	.232
26276 6B06                      6A3B            .word	.233
26277 6B08                      6A5E            .word	.234
26278 6B0A                      6A81            .word	.235
26279 6B0C                      6AA3            .word	.236
26280 6B0E                      6AC5            .word	.237
26281                       00006B10            .239:
26282 6B10           EB           D5            jmp	.238
26283                       00006B12            .22D:
26284                       FFFFFFFC            ..FFF5	=	-4
26285                                           ! Debug: list int = const $85 (used reg = )
26286 6B12           B8                   0085  mov	ax,#$85
26287 6B15           50                         push	ax
26288                                           ! Debug: list int = const $40 (used reg = )
26289 6B16           B8                   0040  mov	ax,*$40
26290 6B19           50                         push	ax
26291                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26292 6B1A           E8         1075            call	_read_byte
26293 6B1D           83C4                   04  add	sp,*4
26294                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26295 6B20           30E4                       xor	ah,ah
26296                                           ! Debug: list unsigned short = ax+0 (used reg = )
26297 6B22           50                         push	ax
26298                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26299 6B23           FF76         0A            push	$A[bp]
26300                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26301 6B26           FF76         FE            push	-2[bp]
26302                                           ! Debug: func () void = write_word+0 (used reg = )
26303 6B29           E8         10A4            call	_write_word
26304 6B2C           83C4                   06  add	sp,*6
26305                                           !BCC_EOS
26306                                           ! 3590  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26307                                           ! Debug: list int = const $84 (used reg = )
26308 6B2F           B8                   0084  mov	ax,#$84
26309 6B32           50                         push	ax
26310                                           ! Debug: list int = const $40 (used reg = )
26311 6B33           B8                   0040  mov	ax,*$40
26312 6B36           50                         push	ax
26313                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26314 6B37           E8         1058            call	_read_byte
26315 6B3A           83C4                   04  add	sp,*4
26316                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26317 6B3D           30E4                       xor	ah,ah
26318                                           ! Debug: list unsigned short = ax+0 (used reg = )
26319 6B3F           50                         push	ax
26320                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26321 6B40           FF76         0C            push	$C[bp]
26322                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26323 6B43           FF76         FE            push	-2[bp]
26324                                           ! Debug: func () void = write_word+0 (used reg = )
26325 6B46           E8         1087            call	_write_word
26326 6B49           83C4                   06  add	sp,*6
26327                                           !BCC_EOS
26328                                           ! 3591 }
26329 6B4C           89EC                       mov	sp,bp
26330 6B4E           5D                         pop	bp
26331 6B4F           C3                         ret
26332                                           ! 3592 #asm
26333                                           !BCC_ASM
26334                       00000006            _biosfn_get_font_info.BP	set	6
26335                       00000002            _biosfn_get_font_info.BH	set	2
26336                       00000008            _biosfn_get_font_info.CX	set	8
26337                       0000000A            _biosfn_get_font_info.DX	set	$A
26338                       00000004            _biosfn_get_font_info.ES	set	4
26339                       00006B50            biosfn_get_ega_info:
26340 6B50           1E                           push ds
26341 6B51           50                           push ax
26342 6B52           B8                   0040    mov ax, # 0x40
26343 6B55           8ED8                         mov ds, ax
26344 6B57           30ED                         xor ch, ch
26345 6B59           BB                   0088    mov bx, # 0x88
26346 6B5C           8A0F                         mov cl, [bx]
26347 6B5E           80E1                   0F    and cl, #0x0f
26348 6B61           BB                   0063    mov bx, # 0x63
26349 6B64           8B07                         mov ax, [bx]
26350 6B66           BB                   0003    mov bx, #0x0003
26351 6B69           3D                   03B4    cmp ax, # 0x3b4
26352 6B6C           75           02              jne mode_ega_color
26353 6B6E           B7                     01    mov bh, #0x01
26354                       00006B70            mode_ega_color:
26355 6B70           58                           pop ax
26356 6B71           1F                           pop ds
26357 6B72           C3                           ret
26358                                           ! 3612 endasm
26359                                           !BCC_ENDASM
26360                                           ! 3613 static void biosfn_alternate_prtsc()
26361                                           ! Register BX used in function biosfn_get_font_info
26362                                           ! 3614 {
26363                       00006B73            _biosfn_alternate_prtsc:
26364                                           ! 3615 }
26365 6B73           C3                         ret
26366                                           ! 3616 #asm
26367                                           !BCC_ASM
26368                       00006B74            biosfn_select_vert_res:
26369                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26370 6B74           1E                           push ds
26371 6B75           53                           push bx
26372 6B76           52                           push dx
26373 6B77           88C2                         mov dl, al
26374 6B79           B8                   0040    mov ax, # 0x40
26375 6B7C           8ED8                         mov ds, ax
26376 6B7E           BB                   0089    mov bx, # 0x89
26377 6B81           8A07                         mov al, [bx]
26378 6B83           BB                   0088    mov bx, # 0x88
26379 6B86           8A27                         mov ah, [bx]
26380 6B88           80FA                   01    cmp dl, #0x01
26381 6B8B           74           15              je vert_res_350
26382 6B8D           72           1D              jb vert_res_200
26383 6B8F           80FA                   02    cmp dl, #0x02
26384 6B92           74           02              je vert_res_400
26385 6B94           EB           2A              jmp set_retcode
26386                       00006B96            vert_res_400:
26387                                             ; reset modeset ctl bit 7 and set bit 4
26388                                             ; set switches bit 3-0 to 0x09
26389 6B96           24                     7F    and al, #0x7f
26390 6B98           0C                     10    or al, #0x10
26391 6B9A           80E4                   F0    and ah, #0xf0
26392 6B9D           80CC                   09    or ah, #0x09
26393 6BA0           75           14              jnz set_vert_res
26394                       00006BA2            vert_res_350:
26395                                             ; reset modeset ctl bit 7 and bit 4
26396                                             ; set switches bit 3-0 to 0x09
26397 6BA2           24                     6F    and al, #0x6f
26398 6BA4           80E4                   F0    and ah, #0xf0
26399 6BA7           80CC                   09    or ah, #0x09
26400 6BAA           75           0A              jnz set_vert_res
26401                       00006BAC            vert_res_200:
26402                                             ; set modeset ctl bit 7 and reset bit 4
26403                                             ; set switches bit 3-0 to 0x08
26404 6BAC           24                     EF    and al, #0xef
26405 6BAE           0C                     80    or al, #0x80
26406 6BB0           80E4                   F0    and ah, #0xf0
26407 6BB3           80CC                   08    or ah, #0x08
26408                       00006BB6            set_vert_res:
26409 6BB6           BB                   0089    mov bx, # 0x89
26410 6BB9           8807                         mov [bx], al
26411 6BBB           BB                   0088    mov bx, # 0x88
26412 6BBE           8827                         mov [bx], ah
26413                       00006BC0            set_retcode:
26414 6BC0           B8                   1212    mov ax, #0x1212
26415 6BC3           5A                           pop dx
26416 6BC4           5B                           pop bx
26417 6BC5           1F                           pop ds
26418 6BC6           C3                           ret
26419                       00006BC7            biosfn_enable_default_palette_loading:
26420 6BC7           1E                           push ds
26421 6BC8           53                           push bx
26422 6BC9           52                           push dx
26423 6BCA           88C2                         mov dl, al
26424 6BCC           80E2                   01    and dl, #0x01
26425 6BCF           C0E2                   03    shl dl, 3
26426 6BD2           B8                   0040    mov ax, # 0x40
26427 6BD5           8ED8                         mov ds, ax
26428 6BD7           BB                   0089    mov bx, # 0x89
26429 6BDA           8A07                         mov al, [bx]
26430 6BDC           24                     F7    and al, #0xf7
26431 6BDE           08D0                         or al, dl
26432 6BE0           8807                         mov [bx], al
26433 6BE2           B8                   1212    mov ax, #0x1212
26434 6BE5           5A                           pop dx
26435 6BE6           5B                           pop bx
26436 6BE7           1F                           pop ds
26437 6BE8           C3                           ret
26438                       00006BE9            biosfn_enable_video_addressing:
26439 6BE9           53                           push bx
26440 6BEA           52                           push dx
26441 6BEB           88C3                         mov bl, al
26442 6BED           80E3                   01    and bl, #0x01
26443 6BF0           80F3                   01    xor bl, #0x01
26444 6BF3           D0E3                         shl bl, 1
26445 6BF5           BA                   03CC    mov dx, # 0x3cc
26446 6BF8           EC                           in al, dx
26447 6BF9           24                     FD    and al, #0xfd
26448 6BFB           08D8                         or al, bl
26449 6BFD           BA                   03C2    mov dx, # 0x3c2
26450 6C00           EE                           out dx, al
26451 6C01           B8                   1212    mov ax, #0x1212
26452 6C04           5A                           pop dx
26453 6C05           5B                           pop bx
26454 6C06           C3                           ret
26455                       00006C07            biosfn_enable_grayscale_summing:
26456 6C07           1E                           push ds
26457 6C08           53                           push bx
26458 6C09           52                           push dx
26459 6C0A           88C2                         mov dl, al
26460 6C0C           80E2                   01    and dl, #0x01
26461 6C0F           80F2                   01    xor dl, #0x01
26462 6C12           D0E2                         shl dl, 1
26463 6C14           B8                   0040    mov ax, # 0x40
26464 6C17           8ED8                         mov ds, ax
26465 6C19           BB                   0089    mov bx, # 0x89
26466 6C1C           8A07                         mov al, [bx]
26467 6C1E           24                     FD    and al, #0xfd
26468 6C20           08D0                         or al, dl
26469 6C22           8807                         mov [bx], al
26470 6C24           B8                   1212    mov ax, #0x1212
26471 6C27           5A                           pop dx
26472 6C28           5B                           pop bx
26473 6C29           1F                           pop ds
26474 6C2A           C3                           ret
26475                       00006C2B            biosfn_enable_cursor_emulation:
26476 6C2B           1E                           push ds
26477 6C2C           53                           push bx
26478 6C2D           52                           push dx
26479 6C2E           88C2                         mov dl, al
26480 6C30           80E2                   01    and dl, #0x01
26481 6C33           80F2                   01    xor dl, #0x01
26482 6C36           B8                   0040    mov ax, # 0x40
26483 6C39           8ED8                         mov ds, ax
26484 6C3B           BB                   0089    mov bx, # 0x89
26485 6C3E           8A07                         mov al, [bx]
26486 6C40           24                     FE    and al, #0xfe
26487 6C42           08D0                         or al, dl
26488 6C44           8807                         mov [bx], al
26489 6C46           B8                   1212    mov ax, #0x1212
26490 6C49           5A                           pop dx
26491 6C4A           5B                           pop bx
26492 6C4B           1F                           pop ds
26493 6C4C           C3                           ret
26494                                           ! 3743 endasm
26495                                           !BCC_ENDASM
26496                                           ! 3744 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26497                       00006C4D            _biosfn_switch_video_interface:
26498                                           !BCC_EOS
26499                                           !BCC_EOS
26500                                           !BCC_EOS
26501                                           ! 3745 {
26502                                           ! 3746 }
26503 6C4D           C3                         ret
26504                                           ! 3747 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26505                       00006C4E            _biosfn_enable_video_refresh_control:
26506                                           !BCC_EOS
26507                                           ! 3748 {
26508                                           ! 3749 }
26509 6C4E           C3                         ret
26510                                           ! 3750 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26511                                           ! 3751 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26512                       00006C4F            _biosfn_write_string:
26513                                           !BCC_EOS
26514                                           !BCC_EOS
26515                                           !BCC_EOS
26516                                           !BCC_EOS
26517                                           !BCC_EOS
26518                                           !BCC_EOS
26519                                           !BCC_EOS
26520                                           !BCC_EOS
26521                                           ! 3752 {
26522                                           ! 3753  Bit16u newcurs,oldcurs,dummy;
26523                                           !BCC_EOS
26524                                           ! 3754  Bit8u car,carattr;
26525                                           !BCC_EOS
26526                                           ! 3755  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26527 6C4F           55                         push	bp
26528 6C50           89E5                       mov	bp,sp
26529 6C52           83C4                   F8  add	sp,*-8
26530                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26531 6C55           8D5E         FC            lea	bx,-4[bp]
26532 6C58           53                         push	bx
26533                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26534 6C59           8D5E         FA            lea	bx,-6[bp]
26535 6C5C           53                         push	bx
26536                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26537 6C5D           8A46         06            mov	al,6[bp]
26538 6C60           30E4                       xor	ah,ah
26539 6C62           50                         push	ax
26540                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26541 6C63           E8         D7E6            call	_biosfn_get_cursor_pos
26542 6C66           83C4                   06  add	sp,*6
26543                                           !BCC_EOS
26544                                           ! 3756  if(row==0xff)
26545                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26546 6C69           8A46         0C            mov	al,$C[bp]
26547 6C6C           3C                     FF  cmp	al,#$FF
26548 6C6E           75           12            jne 	.23B
26549                       00006C70            .23C:
26550                                           ! 3757   {col=oldcurs&0x00ff;
26551                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26552 6C70           8A46         FC            mov	al,-4[bp]
26553                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26554 6C73           8846         0E            mov	$E[bp],al
26555                                           !BCC_EOS
26556                                           ! 3758    row=(oldcurs&0xff00)>>8;
26557                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26558 6C76           8B46         FC            mov	ax,-4[bp]
26559 6C79           30C0                       xor	al,al
26560                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26561 6C7B           88E0                       mov	al,ah
26562 6C7D           30E4                       xor	ah,ah
26563                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26564 6C7F           8846         0C            mov	$C[bp],al
26565                                           !BCC_EOS
26566                                           ! 3759   }
26567                                           ! 3760  newcurs=row; newcurs<<=8; newcurs+=col;
26568                       00006C82            .23B:
26569                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26570 6C82           8A46         0C            mov	al,$C[bp]
26571 6C85           30E4                       xor	ah,ah
26572 6C87           8946         FE            mov	-2[bp],ax
26573                                           !BCC_EOS
26574                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26575 6C8A           8B46         FE            mov	ax,-2[bp]
26576 6C8D           88C4                       mov	ah,al
26577 6C8F           30C0                       xor	al,al
26578 6C91           8946         FE            mov	-2[bp],ax
26579                                           !BCC_EOS
26580                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26581 6C94           8B46         FE            mov	ax,-2[bp]
26582 6C97           0246         0E            add	al,$E[bp]
26583 6C9A           80D4                   00  adc	ah,*0
26584 6C9D           8946         FE            mov	-2[bp],ax
26585                                           !BCC_EOS
26586                                           ! 3761  biosfn_set_cursor_pos(page,newcurs);
26587                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26588 6CA0           FF76         FE            push	-2[bp]
26589                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26590 6CA3           8A46         06            mov	al,6[bp]
26591 6CA6           30E4                       xor	ah,ah
26592 6CA8           50                         push	ax
26593                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26594 6CA9           E8         D6A0            call	_biosfn_set_cursor_pos
26595 6CAC           83C4                   04  add	sp,*4
26596                                           !BCC_EOS
26597                                           ! 3762  while(count--!=0)
26598                                           ! 3763   {
26599 6CAF           EB           4F            jmp .23E
26600                       00006CB1            .23F:
26601                                           ! 3764    car=read_byte(seg,offset++);
26602                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26603 6CB1           8B46         12            mov	ax,$12[bp]
26604 6CB4           40                         inc	ax
26605 6CB5           8946         12            mov	$12[bp],ax
26606                                           ! Debug: list unsigned short = ax-1 (used reg = )
26607 6CB8           48                         dec	ax
26608 6CB9           50                         push	ax
26609                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26610 6CBA           FF76         10            push	$10[bp]
26611                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26612 6CBD           E8         0ED2            call	_read_byte
26613 6CC0           83C4                   04  add	sp,*4
26614                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26615 6CC3           8846         F9            mov	-7[bp],al
26616                                           !BCC_EOS
26617                                           ! 3765    if((flag&0x02)!=0)
26618                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26619 6CC6           8A46         04            mov	al,4[bp]
26620 6CC9           24                     02  and	al,*2
26621                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26622 6CCB           84C0                       test	al,al
26623 6CCD           74           15            je  	.240
26624                       00006CCF            .241:
26625                                           ! 3766     attr=read_byte(seg,offset++);
26626                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26627 6CCF           8B46         12            mov	ax,$12[bp]
26628 6CD2           40                         inc	ax
26629 6CD3           8946         12            mov	$12[bp],ax
26630                                           ! Debug: list unsigned short = ax-1 (used reg = )
26631 6CD6           48                         dec	ax
26632 6CD7           50                         push	ax
26633                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26634 6CD8           FF76         10            push	$10[bp]
26635                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26636 6CDB           E8         0EB4            call	_read_byte
26637 6CDE           83C4                   04  add	sp,*4
26638                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26639 6CE1           8846         08            mov	8[bp],al
26640                                           !BCC_EOS
26641                                           ! 3767    biosfn_write_teletype(car,page,attr,3);
26642                       00006CE4            .240:
26643                                           ! Debug: list int = const 3 (used reg = )
26644 6CE4           B8                   0003  mov	ax,*3
26645 6CE7           50                         push	ax
26646                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26647 6CE8           8A46         08            mov	al,8[bp]
26648 6CEB           30E4                       xor	ah,ah
26649 6CED           50                         push	ax
26650                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26651 6CEE           8A46         06            mov	al,6[bp]
26652 6CF1           30E4                       xor	ah,ah
26653 6CF3           50                         push	ax
26654                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26655 6CF4           8A46         F9            mov	al,-7[bp]
26656 6CF7           30E4                       xor	ah,ah
26657 6CF9           50                         push	ax
26658                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26659 6CFA           E8         F199            call	_biosfn_write_teletype
26660 6CFD           83C4                   08  add	sp,*8
26661                                           !BCC_EOS
26662                                           ! 3768   }
26663                                           ! 3769  if((flag&0x01)==0)
26664                       00006D00            .23E:
26665                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26666 6D00           8B46         0A            mov	ax,$A[bp]
26667 6D03           48                         dec	ax
26668 6D04           8946         0A            mov	$A[bp],ax
26669                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26670 6D07           3D                   FFFF  cmp	ax,*-1
26671 6D0A           75           A5            jne	.23F
26672                       00006D0C            .242:
26673                       00006D0C            .23D:
26674                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26675 6D0C           8A46         04            mov	al,4[bp]
26676 6D0F           24                     01  and	al,*1
26677                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26678 6D11           84C0                       test	al,al
26679 6D13           75           0F            jne 	.243
26680                       00006D15            .244:
26681                                           ! 3770   biosfn_set_cursor_pos(page,oldcurs);
26682                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26683 6D15           FF76         FC            push	-4[bp]
26684                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26685 6D18           8A46         06            mov	al,6[bp]
26686 6D1B           30E4                       xor	ah,ah
26687 6D1D           50                         push	ax
26688                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26689 6D1E           E8         D62B            call	_biosfn_set_cursor_pos
26690 6D21           83C4                   04  add	sp,*4
26691                                           !BCC_EOS
26692                                           ! 3771 }
26693                       00006D24            .243:
26694 6D24           89EC                       mov	sp,bp
26695 6D26           5D                         pop	bp
26696 6D27           C3                         ret
26697                                           ! 3772 #asm
26698                                           !BCC_ASM
26699                       00000008            _biosfn_write_string.count	set	8
26700                       0000000E            _biosfn_write_string.seg	set	$E
26701                       0000000C            _biosfn_write_string.col	set	$C
26702                       00000002            _biosfn_write_string.flag	set	2
26703                       00000006            _biosfn_write_string.attr	set	6
26704                       00000004            _biosfn_write_string.page	set	4
26705                       0000000A            _biosfn_write_string.row	set	$A
26706                       00000010            _biosfn_write_string.offset	set	$10
26707                       00006D28            biosfn_group_1A:
26708 6D28           3C                     00    cmp al, #0x00
26709 6D2A           74           05              je biosfn_read_display_code
26710 6D2C           3C                     01    cmp al, #0x01
26711 6D2E           74           16              je biosfn_set_display_code
26712 6D30           C3                           ret
26713                       00006D31            biosfn_read_display_code:
26714 6D31           1E                           push ds
26715 6D32           50                           push ax
26716 6D33           B8                   0040    mov ax, # 0x40
26717 6D36           8ED8                         mov ds, ax
26718 6D38           BB                   008A    mov bx, # 0x8A
26719 6D3B           8A07                         mov al, [bx]
26720 6D3D           88C3                         mov bl, al
26721 6D3F           30FF                         xor bh, bh
26722 6D41           58                           pop ax
26723 6D42           88E0                         mov al, ah
26724 6D44           1F                           pop ds
26725 6D45           C3                           ret
26726                       00006D46            biosfn_set_display_code:
26727 6D46           1E                           push ds
26728 6D47           50                           push ax
26729 6D48           53                           push bx
26730 6D49           B8                   0040    mov ax, # 0x40
26731 6D4C           8ED8                         mov ds, ax
26732 6D4E           89D8                         mov ax, bx
26733 6D50           BB                   008A    mov bx, # 0x8A
26734 6D53           8807                         mov [bx], al
26735 6D55           5B                           pop bx
26736 6D56           58                           pop ax
26737 6D57           88E0                         mov al, ah
26738 6D59           1F                           pop ds
26739 6D5A           C3                           ret
26740                                           ! 3806 endasm
26741                                           !BCC_ENDASM
26742                                           ! 3807 static void biosfn_read_state_info (BX,ES,DI)
26743                                           ! Register BX used in function biosfn_write_string
26744                                           ! 3808 Bit16u BX;Bit16u ES;Bit16u DI;
26745                       00006D5B            _biosfn_read_state_info:
26746                                           !BCC_EOS
26747                                           !BCC_EOS
26748                                           !BCC_EOS
26749                                           ! 3809 {
26750                                           ! 3810  write_word(ES,DI+0x00,&static_functionality);
26751 6D5B           55                         push	bp
26752 6D5C           89E5                       mov	bp,sp
26753                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26754 6D5E           BB                   0F53  mov	bx,#_static_functionality
26755 6D61           53                         push	bx
26756                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26757 6D62           8B46         08            mov	ax,8[bp]
26758                                           ! Debug: list unsigned int = ax+0 (used reg = )
26759 6D65           50                         push	ax
26760                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26761 6D66           FF76         06            push	6[bp]
26762                                           ! Debug: func () void = write_word+0 (used reg = )
26763 6D69           E8         0E64            call	_write_word
26764 6D6C           89EC                       mov	sp,bp
26765                                           !BCC_EOS
26766                                           ! 3811  write_word(ES,DI+0x02,0xC000);
26767                                           ! Debug: list unsigned int = const $C000 (used reg = )
26768 6D6E           B8                   C000  mov	ax,#$C000
26769 6D71           50                         push	ax
26770                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26771 6D72           8B46         08            mov	ax,8[bp]
26772                                           ! Debug: list unsigned int = ax+2 (used reg = )
26773 6D75           40                         inc	ax
26774 6D76           40                         inc	ax
26775 6D77           50                         push	ax
26776                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26777 6D78           FF76         06            push	6[bp]
26778                                           ! Debug: func () void = write_word+0 (used reg = )
26779 6D7B           E8         0E52            call	_write_word
26780 6D7E           89EC                       mov	sp,bp
26781                                           !BCC_EOS
26782                                           ! 3812  memcpyb(ES,DI+0x04,0x40,0x49,30);
26783                                           ! Debug: list int = const $1E (used reg = )
26784 6D80           B8                   001E  mov	ax,*$1E
26785 6D83           50                         push	ax
26786                                           ! Debug: list int = const $49 (used reg = )
26787 6D84           B8                   0049  mov	ax,*$49
26788 6D87           50                         push	ax
26789                                           ! Debug: list int = const $40 (used reg = )
26790 6D88           B8                   0040  mov	ax,*$40
26791 6D8B           50                         push	ax
26792                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26793 6D8C           8B46         08            mov	ax,8[bp]
26794                                           ! Debug: list unsigned int = ax+4 (used reg = )
26795 6D8F           05                   0004  add	ax,*4
26796 6D92           50                         push	ax
26797                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26798 6D93           FF76         06            push	6[bp]
26799                                           ! Debug: func () void = memcpyb+0 (used reg = )
26800 6D96           E8         0D99            call	_memcpyb
26801 6D99           89EC                       mov	sp,bp
26802                                           !BCC_EOS
26803                                           ! 3813  memcpyb(ES,DI+0x22,0x40,0x84,3);
26804                                           ! Debug: list int = const 3 (used reg = )
26805 6D9B           B8                   0003  mov	ax,*3
26806 6D9E           50                         push	ax
26807                                           ! Debug: list int = const $84 (used reg = )
26808 6D9F           B8                   0084  mov	ax,#$84
26809 6DA2           50                         push	ax
26810                                           ! Debug: list int = const $40 (used reg = )
26811 6DA3           B8                   0040  mov	ax,*$40
26812 6DA6           50                         push	ax
26813                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26814 6DA7           8B46         08            mov	ax,8[bp]
26815                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26816 6DAA           05                   0022  add	ax,*$22
26817 6DAD           50                         push	ax
26818                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26819 6DAE           FF76         06            push	6[bp]
26820                                           ! Debug: func () void = memcpyb+0 (used reg = )
26821 6DB1           E8         0D7E            call	_memcpyb
26822 6DB4           89EC                       mov	sp,bp
26823                                           !BCC_EOS
26824                                           ! 3814  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26825                                           ! Debug: list int = const $8A (used reg = )
26826 6DB6           B8                   008A  mov	ax,#$8A
26827 6DB9           50                         push	ax
26828                                           ! Debug: list int = const $40 (used reg = )
26829 6DBA           B8                   0040  mov	ax,*$40
26830 6DBD           50                         push	ax
26831                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26832 6DBE           E8         0DD1            call	_read_byte
26833 6DC1           89EC                       mov	sp,bp
26834                                           ! Debug: list unsigned char = al+0 (used reg = )
26835 6DC3           30E4                       xor	ah,ah
26836 6DC5           50                         push	ax
26837                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26838 6DC6           8B46         08            mov	ax,8[bp]
26839                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26840 6DC9           05                   0025  add	ax,*$25
26841 6DCC           50                         push	ax
26842                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26843 6DCD           FF76         06            push	6[bp]
26844                                           ! Debug: func () void = write_byte+0 (used reg = )
26845 6DD0           E8         0DE5            call	_write_byte
26846 6DD3           89EC                       mov	sp,bp
26847                                           !BCC_EOS
26848                                           ! 3815  write_byte(ES,DI+0x26,0);
26849                                           ! Debug: list int = const 0 (used reg = )
26850 6DD5           31C0                       xor	ax,ax
26851 6DD7           50                         push	ax
26852                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26853 6DD8           8B46         08            mov	ax,8[bp]
26854                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26855 6DDB           05                   0026  add	ax,*$26
26856 6DDE           50                         push	ax
26857                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26858 6DDF           FF76         06            push	6[bp]
26859                                           ! Debug: func () void = write_byte+0 (used reg = )
26860 6DE2           E8         0DD3            call	_write_byte
26861 6DE5           89EC                       mov	sp,bp
26862                                           !BCC_EOS
26863                                           ! 3816  write_byte(ES,DI+0x27,16);
26864                                           ! Debug: list int = const $10 (used reg = )
26865 6DE7           B8                   0010  mov	ax,*$10
26866 6DEA           50                         push	ax
26867                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26868 6DEB           8B46         08            mov	ax,8[bp]
26869                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26870 6DEE           05                   0027  add	ax,*$27
26871 6DF1           50                         push	ax
26872                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26873 6DF2           FF76         06            push	6[bp]
26874                                           ! Debug: func () void = write_byte+0 (used reg = )
26875 6DF5           E8         0DC0            call	_write_byte
26876 6DF8           89EC                       mov	sp,bp
26877                                           !BCC_EOS
26878                                           ! 3817  write_byte(ES,DI+0x28,0);
26879                                           ! Debug: list int = const 0 (used reg = )
26880 6DFA           31C0                       xor	ax,ax
26881 6DFC           50                         push	ax
26882                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26883 6DFD           8B46         08            mov	ax,8[bp]
26884                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26885 6E00           05                   0028  add	ax,*$28
26886 6E03           50                         push	ax
26887                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26888 6E04           FF76         06            push	6[bp]
26889                                           ! Debug: func () void = write_byte+0 (used reg = )
26890 6E07           E8         0DAE            call	_write_byte
26891 6E0A           89EC                       mov	sp,bp
26892                                           !BCC_EOS
26893                                           ! 3818  write_byte(ES,DI+0x29,8);
26894                                           ! Debug: list int = const 8 (used reg = )
26895 6E0C           B8                   0008  mov	ax,*8
26896 6E0F           50                         push	ax
26897                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26898 6E10           8B46         08            mov	ax,8[bp]
26899                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26900 6E13           05                   0029  add	ax,*$29
26901 6E16           50                         push	ax
26902                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26903 6E17           FF76         06            push	6[bp]
26904                                           ! Debug: func () void = write_byte+0 (used reg = )
26905 6E1A           E8         0D9B            call	_write_byte
26906 6E1D           89EC                       mov	sp,bp
26907                                           !BCC_EOS
26908                                           ! 3819  write_byte(ES,DI+0x2a,2);
26909                                           ! Debug: list int = const 2 (used reg = )
26910 6E1F           B8                   0002  mov	ax,*2
26911 6E22           50                         push	ax
26912                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26913 6E23           8B46         08            mov	ax,8[bp]
26914                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26915 6E26           05                   002A  add	ax,*$2A
26916 6E29           50                         push	ax
26917                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26918 6E2A           FF76         06            push	6[bp]
26919                                           ! Debug: func () void = write_byte+0 (used reg = )
26920 6E2D           E8         0D88            call	_write_byte
26921 6E30           89EC                       mov	sp,bp
26922                                           !BCC_EOS
26923                                           ! 3820  write_byte(ES,DI+0x2b,0);
26924                                           ! Debug: list int = const 0 (used reg = )
26925 6E32           31C0                       xor	ax,ax
26926 6E34           50                         push	ax
26927                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26928 6E35           8B46         08            mov	ax,8[bp]
26929                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26930 6E38           05                   002B  add	ax,*$2B
26931 6E3B           50                         push	ax
26932                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26933 6E3C           FF76         06            push	6[bp]
26934                                           ! Debug: func () void = write_byte+0 (used reg = )
26935 6E3F           E8         0D76            call	_write_byte
26936 6E42           89EC                       mov	sp,bp
26937                                           !BCC_EOS
26938                                           ! 3821  write_byte(ES,DI+0x2c,0);
26939                                           ! Debug: list int = const 0 (used reg = )
26940 6E44           31C0                       xor	ax,ax
26941 6E46           50                         push	ax
26942                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26943 6E47           8B46         08            mov	ax,8[bp]
26944                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26945 6E4A           05                   002C  add	ax,*$2C
26946 6E4D           50                         push	ax
26947                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26948 6E4E           FF76         06            push	6[bp]
26949                                           ! Debug: func () void = write_byte+0 (used reg = )
26950 6E51           E8         0D64            call	_write_byte
26951 6E54           89EC                       mov	sp,bp
26952                                           !BCC_EOS
26953                                           ! 3822  write_byte(ES,DI+0x31,3);
26954                                           ! Debug: list int = const 3 (used reg = )
26955 6E56           B8                   0003  mov	ax,*3
26956 6E59           50                         push	ax
26957                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26958 6E5A           8B46         08            mov	ax,8[bp]
26959                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26960 6E5D           05                   0031  add	ax,*$31
26961 6E60           50                         push	ax
26962                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26963 6E61           FF76         06            push	6[bp]
26964                                           ! Debug: func () void = write_byte+0 (used reg = )
26965 6E64           E8         0D51            call	_write_byte
26966 6E67           89EC                       mov	sp,bp
26967                                           !BCC_EOS
26968                                           ! 3823  write_byte(ES,DI+0x32,0);
26969                                           ! Debug: list int = const 0 (used reg = )
26970 6E69           31C0                       xor	ax,ax
26971 6E6B           50                         push	ax
26972                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
26973 6E6C           8B46         08            mov	ax,8[bp]
26974                                           ! Debug: list unsigned int = ax+$32 (used reg = )
26975 6E6F           05                   0032  add	ax,*$32
26976 6E72           50                         push	ax
26977                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26978 6E73           FF76         06            push	6[bp]
26979                                           ! Debug: func () void = write_byte+0 (used reg = )
26980 6E76           E8         0D3F            call	_write_byte
26981 6E79           89EC                       mov	sp,bp
26982                                           !BCC_EOS
26983                                           ! 3824  memsetb(ES,DI+0x33,0,13);
26984                                           ! Debug: list int = const $D (used reg = )
26985 6E7B           B8                   000D  mov	ax,*$D
26986 6E7E           50                         push	ax
26987                                           ! Debug: list int = const 0 (used reg = )
26988 6E7F           31C0                       xor	ax,ax
26989 6E81           50                         push	ax
26990                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
26991 6E82           8B46         08            mov	ax,8[bp]
26992                                           ! Debug: list unsigned int = ax+$33 (used reg = )
26993 6E85           05                   0033  add	ax,*$33
26994 6E88           50                         push	ax
26995                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
26996 6E89           FF76         06            push	6[bp]
26997                                           ! Debug: func () void = memsetb+0 (used reg = )
26998 6E8C           E8         0C59            call	_memsetb
26999 6E8F           89EC                       mov	sp,bp
27000                                           !BCC_EOS
27001                                           ! 3825 }
27002 6E91           5D                         pop	bp
27003 6E92           C3                         ret
27004                                           ! 3826 static Bit16u biosfn_read_video_state_size2 (CX)
27005                                           ! Register BX used in function biosfn_read_state_info
27006                                           ! 3827      Bit16u CX;
27007                       00006E93            _biosfn_read_video_state_size2:
27008                                           !BCC_EOS
27009                                           ! 3828 {
27010                                           ! 3829     Bit16u size;
27011                                           !BCC_EOS
27012                                           ! 3830     size = 0;
27013 6E93           55                         push	bp
27014 6E94           89E5                       mov	bp,sp
27015 6E96           4C                         dec	sp
27016 6E97           4C                         dec	sp
27017                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27018 6E98           31C0                       xor	ax,ax
27019 6E9A           8946         FE            mov	-2[bp],ax
27020                                           !BCC_EOS
27021                                           ! 3831     if (CX & 1) {
27022                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27023 6E9D           8A46         04            mov	al,4[bp]
27024 6EA0           24                     01  and	al,*1
27025 6EA2           84C0                       test	al,al
27026 6EA4           74           09            je  	.245
27027                       00006EA6            .246:
27028                                           ! 3832         size += 0x46;
27029                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27030 6EA6           8B46         FE            mov	ax,-2[bp]
27031 6EA9           05                   0046  add	ax,*$46
27032 6EAC           8946         FE            mov	-2[bp],ax
27033                                           !BCC_EOS
27034                                           ! 3833     }
27035                                           ! 3834     if (CX & 2) {
27036                       00006EAF            .245:
27037                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27038 6EAF           8A46         04            mov	al,4[bp]
27039 6EB2           24                     02  and	al,*2
27040 6EB4           84C0                       test	al,al
27041 6EB6           74           09            je  	.247
27042                       00006EB8            .248:
27043                                           ! 3835         size += (5 + 8 + 5) * 2 + 6;
27044                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27045 6EB8           8B46         FE            mov	ax,-2[bp]
27046 6EBB           05                   002A  add	ax,*$2A
27047 6EBE           8946         FE            mov	-2[bp],ax
27048                                           !BCC_EOS
27049                                           ! 3836     }
27050                                           ! 3837     if (CX & 4) {
27051                       00006EC1            .247:
27052                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27053 6EC1           8A46         04            mov	al,4[bp]
27054 6EC4           24                     04  and	al,*4
27055 6EC6           84C0                       test	al,al
27056 6EC8           74           09            je  	.249
27057                       00006ECA            .24A:
27058                                           ! 3838         size += 3 + 256 * 3 + 1;
27059                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27060 6ECA           8B46         FE            mov	ax,-2[bp]
27061 6ECD           05                   0304  add	ax,#$304
27062 6ED0           8946         FE            mov	-2[bp],ax
27063                                           !BCC_EOS
27064                                           ! 3839 }
27065                                           ! 3840     return size;
27066                       00006ED3            .249:
27067 6ED3           8B46         FE            mov	ax,-2[bp]
27068 6ED6           89EC                       mov	sp,bp
27069 6ED8           5D                         pop	bp
27070 6ED9           C3                         ret
27071                                           !BCC_EOS
27072                                           ! 3841 }
27073                                           ! 3842 static void biosfn_read_video_state_size (CX, BX)
27074                                           ! 3843      Bit16u CX; Bit16u *BX;
27075                       00006EDA            _biosfn_read_video_state_size:
27076                                           !BCC_EOS
27077                                           !BCC_EOS
27078                                           ! 3844 {
27079                                           ! 3845     Bit16u ss=get_SS();
27080 6EDA           55                         push	bp
27081 6EDB           89E5                       mov	bp,sp
27082 6EDD           4C                         dec	sp
27083 6EDE           4C                         dec	sp
27084                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27085 6EDF           E8         0D3C            call	_get_SS
27086                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27087 6EE2           8946         FE            mov	-2[bp],ax
27088                                           !BCC_EOS
27089                                           ! 3846     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27090                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27091 6EE5           FF76         04            push	4[bp]
27092                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27093 6EE8           E8         FFA8            call	_biosfn_read_video_state_size2
27094 6EEB           44                         inc	sp
27095 6EEC           44                         inc	sp
27096                                           ! Debug: list unsigned short = ax+0 (used reg = )
27097 6EED           50                         push	ax
27098                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27099 6EEE           FF76         06            push	6[bp]
27100                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27101 6EF1           FF76         FE            push	-2[bp]
27102                                           ! Debug: func () void = write_word+0 (used reg = )
27103 6EF4           E8         0CD9            call	_write_word
27104 6EF7           83C4                   06  add	sp,*6
27105                                           !BCC_EOS
27106                                           ! 3847 }
27107 6EFA           89EC                       mov	sp,bp
27108 6EFC           5D                         pop	bp
27109 6EFD           C3                         ret
27110                                           ! 3848 static Bit16u biosfn_save_video_state (CX,ES,BX)
27111                                           ! 3849      Bit16u CX;Bit16u ES;Bit16u BX;
27112                       00006EFE            _biosfn_save_video_state:
27113                                           !BCC_EOS
27114                                           !BCC_EOS
27115                                           !BCC_EOS
27116                                           ! 3850 {
27117                                           ! 3851     Bit16u i, v, crtc_addr, ar_index;
27118                                           !BCC_EOS
27119                                           ! 3852     crtc_addr = read_word(0x40, 0x63);
27120 6EFE           55                         push	bp
27121 6EFF           89E5                       mov	bp,sp
27122 6F01           83C4                   F8  add	sp,*-8
27123                                           ! Debug: list int = const $63 (used reg = )
27124 6F04           B8                   0063  mov	ax,*$63
27125 6F07           50                         push	ax
27126                                           ! Debug: list int = const $40 (used reg = )
27127 6F08           B8                   0040  mov	ax,*$40
27128 6F0B           50                         push	ax
27129                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27130 6F0C           E8         0C96            call	_read_word
27131 6F0F           83C4                   04  add	sp,*4
27132                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27133 6F12           8946         FA            mov	-6[bp],ax
27134                                           !BCC_EOS
27135                                           ! 3853     if (CX & 1) {
27136                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27137 6F15           8A46         04            mov	al,4[bp]
27138 6F18           24                     01  and	al,*1
27139 6F1A           84C0                       test	al,al
27140 6F1C         0F84         0266            beq 	.24B
27141                       00006F20            .24C:
27142                                           ! 3854         write_byte(ES, BX, inb(0x3c4)); BX++;
27143                                           ! Debug: list int = const $3C4 (used reg = )
27144 6F20           B8                   03C4  mov	ax,#$3C4
27145 6F23           50                         push	ax
27146                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27147 6F24           E8         0CC1            call	_inb
27148 6F27           44                         inc	sp
27149 6F28           44                         inc	sp
27150                                           ! Debug: list unsigned char = al+0 (used reg = )
27151 6F29           30E4                       xor	ah,ah
27152 6F2B           50                         push	ax
27153                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27154 6F2C           FF76         08            push	8[bp]
27155                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27156 6F2F           FF76         06            push	6[bp]
27157                                           ! Debug: func () void = write_byte+0 (used reg = )
27158 6F32           E8         0C83            call	_write_byte
27159 6F35           83C4                   06  add	sp,*6
27160                                           !BCC_EOS
27161                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27162 6F38           8B46         08            mov	ax,8[bp]
27163 6F3B           40                         inc	ax
27164 6F3C           8946         08            mov	8[bp],ax
27165                                           !BCC_EOS
27166                                           ! 3855         write_byte(ES, BX, inb(crtc_addr)); BX++;
27167                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27168 6F3F           FF76         FA            push	-6[bp]
27169                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27170 6F42           E8         0CA3            call	_inb
27171 6F45           44                         inc	sp
27172 6F46           44                         inc	sp
27173                                           ! Debug: list unsigned char = al+0 (used reg = )
27174 6F47           30E4                       xor	ah,ah
27175 6F49           50                         push	ax
27176                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27177 6F4A           FF76         08            push	8[bp]
27178                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27179 6F4D           FF76         06            push	6[bp]
27180                                           ! Debug: func () void = write_byte+0 (used reg = )
27181 6F50           E8         0C65            call	_write_byte
27182 6F53           83C4                   06  add	sp,*6
27183                                           !BCC_EOS
27184                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27185 6F56           8B46         08            mov	ax,8[bp]
27186 6F59           40                         inc	ax
27187 6F5A           8946         08            mov	8[bp],ax
27188                                           !BCC_EOS
27189                                           ! 3856         write_byte(ES, BX, inb(0x3ce)); BX++;
27190                                           ! Debug: list int = const $3CE (used reg = )
27191 6F5D           B8                   03CE  mov	ax,#$3CE
27192 6F60           50                         push	ax
27193                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27194 6F61           E8         0C84            call	_inb
27195 6F64           44                         inc	sp
27196 6F65           44                         inc	sp
27197                                           ! Debug: list unsigned char = al+0 (used reg = )
27198 6F66           30E4                       xor	ah,ah
27199 6F68           50                         push	ax
27200                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27201 6F69           FF76         08            push	8[bp]
27202                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27203 6F6C           FF76         06            push	6[bp]
27204                                           ! Debug: func () void = write_byte+0 (used reg = )
27205 6F6F           E8         0C46            call	_write_byte
27206 6F72           83C4                   06  add	sp,*6
27207                                           !BCC_EOS
27208                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27209 6F75           8B46         08            mov	ax,8[bp]
27210 6F78           40                         inc	ax
27211 6F79           8946         08            mov	8[bp],ax
27212                                           !BCC_EOS
27213                                           ! 3857         inb(0x3da);
27214                                           ! Debug: list int = const $3DA (used reg = )
27215 6F7C           B8                   03DA  mov	ax,#$3DA
27216 6F7F           50                         push	ax
27217                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27218 6F80           E8         0C65            call	_inb
27219 6F83           44                         inc	sp
27220 6F84           44                         inc	sp
27221                                           !BCC_EOS
27222                                           ! 3858         ar_index = inb(0x3c0);
27223                                           ! Debug: list int = const $3C0 (used reg = )
27224 6F85           B8                   03C0  mov	ax,#$3C0
27225 6F88           50                         push	ax
27226                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27227 6F89           E8         0C5C            call	_inb
27228 6F8C           44                         inc	sp
27229 6F8D           44                         inc	sp
27230                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27231 6F8E           30E4                       xor	ah,ah
27232 6F90           8946         F8            mov	-8[bp],ax
27233                                           !BCC_EOS
27234                                           ! 3859         write_byte(ES, BX, ar_index); BX++;
27235                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27236 6F93           FF76         F8            push	-8[bp]
27237                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27238 6F96           FF76         08            push	8[bp]
27239                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27240 6F99           FF76         06            push	6[bp]
27241                                           ! Debug: func () void = write_byte+0 (used reg = )
27242 6F9C           E8         0C19            call	_write_byte
27243 6F9F           83C4                   06  add	sp,*6
27244                                           !BCC_EOS
27245                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27246 6FA2           8B46         08            mov	ax,8[bp]
27247 6FA5           40                         inc	ax
27248 6FA6           8946         08            mov	8[bp],ax
27249                                           !BCC_EOS
27250                                           ! 3860         write_byte(ES, BX, inb(0x3ca)); BX++;
27251                                           ! Debug: list int = const $3CA (used reg = )
27252 6FA9           B8                   03CA  mov	ax,#$3CA
27253 6FAC           50                         push	ax
27254                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27255 6FAD           E8         0C38            call	_inb
27256 6FB0           44                         inc	sp
27257 6FB1           44                         inc	sp
27258                                           ! Debug: list unsigned char = al+0 (used reg = )
27259 6FB2           30E4                       xor	ah,ah
27260 6FB4           50                         push	ax
27261                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27262 6FB5           FF76         08            push	8[bp]
27263                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27264 6FB8           FF76         06            push	6[bp]
27265                                           ! Debug: func () void = write_byte+0 (used reg = )
27266 6FBB           E8         0BFA            call	_write_byte
27267 6FBE           83C4                   06  add	sp,*6
27268                                           !BCC_EOS
27269                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27270 6FC1           8B46         08            mov	ax,8[bp]
27271 6FC4           40                         inc	ax
27272 6FC5           8946         08            mov	8[bp],ax
27273                                           !BCC_EOS
27274                                           ! 3861         for(i=1;i<=4;i++){
27275                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27276 6FC8           B8                   0001  mov	ax,*1
27277 6FCB           8946         FE            mov	-2[bp],ax
27278                                           !BCC_EOS
27279                                           !BCC_EOS
27280 6FCE           EB           33            jmp .24F
27281                       00006FD0            .250:
27282                                           ! 3862             outb(0x3c4, i);
27283                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27284 6FD0           FF76         FE            push	-2[bp]
27285                                           ! Debug: list int = const $3C4 (used reg = )
27286 6FD3           B8                   03C4  mov	ax,#$3C4
27287 6FD6           50                         push	ax
27288                                           ! Debug: func () void = outb+0 (used reg = )
27289 6FD7           E8         0C24            call	_outb
27290 6FDA           83C4                   04  add	sp,*4
27291                                           !BCC_EOS
27292                                           ! 3863             write_byte(ES, BX, inb(0x3c5)); BX++;
27293                                           ! Debug: list int = const $3C5 (used reg = )
27294 6FDD           B8                   03C5  mov	ax,#$3C5
27295 6FE0           50                         push	ax
27296                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27297 6FE1           E8         0C04            call	_inb
27298 6FE4           44                         inc	sp
27299 6FE5           44                         inc	sp
27300                                           ! Debug: list unsigned char = al+0 (used reg = )
27301 6FE6           30E4                       xor	ah,ah
27302 6FE8           50                         push	ax
27303                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27304 6FE9           FF76         08            push	8[bp]
27305                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27306 6FEC           FF76         06            push	6[bp]
27307                                           ! Debug: func () void = write_byte+0 (used reg = )
27308 6FEF           E8         0BC6            call	_write_byte
27309 6FF2           83C4                   06  add	sp,*6
27310                                           !BCC_EOS
27311                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27312 6FF5           8B46         08            mov	ax,8[bp]
27313 6FF8           40                         inc	ax
27314 6FF9           8946         08            mov	8[bp],ax
27315                                           !BCC_EOS
27316                                           ! 3864         }
27317                                           ! 3865         outb(0x3c4, 0);
27318                       00006FFC            .24E:
27319                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27320 6FFC           8B46         FE            mov	ax,-2[bp]
27321 6FFF           40                         inc	ax
27322 7000           8946         FE            mov	-2[bp],ax
27323                       00007003            .24F:
27324                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27325 7003           8B46         FE            mov	ax,-2[bp]
27326 7006           3D                   0004  cmp	ax,*4
27327 7009           76           C5            jbe	.250
27328                       0000700B            .251:
27329                       0000700B            .24D:
27330                                           ! Debug: list int = const 0 (used reg = )
27331 700B           31C0                       xor	ax,ax
27332 700D           50                         push	ax
27333                                           ! Debug: list int = const $3C4 (used reg = )
27334 700E           B8                   03C4  mov	ax,#$3C4
27335 7011           50                         push	ax
27336                                           ! Debug: func () void = outb+0 (used reg = )
27337 7012           E8         0BE9            call	_outb
27338 7015           83C4                   04  add	sp,*4
27339                                           !BCC_EOS
27340                                           ! 3866         write_byte(ES, BX, inb(0x3c5)); BX++;
27341                                           ! Debug: list int = const $3C5 (used reg = )
27342 7018           B8                   03C5  mov	ax,#$3C5
27343 701B           50                         push	ax
27344                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27345 701C           E8         0BC9            call	_inb
27346 701F           44                         inc	sp
27347 7020           44                         inc	sp
27348                                           ! Debug: list unsigned char = al+0 (used reg = )
27349 7021           30E4                       xor	ah,ah
27350 7023           50                         push	ax
27351                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27352 7024           FF76         08            push	8[bp]
27353                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27354 7027           FF76         06            push	6[bp]
27355                                           ! Debug: func () void = write_byte+0 (used reg = )
27356 702A           E8         0B8B            call	_write_byte
27357 702D           83C4                   06  add	sp,*6
27358                                           !BCC_EOS
27359                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27360 7030           8B46         08            mov	ax,8[bp]
27361 7033           40                         inc	ax
27362 7034           8946         08            mov	8[bp],ax
27363                                           !BCC_EOS
27364                                           ! 3867         for(i=0;i<=0x18;i++) {
27365                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27366 7037           31C0                       xor	ax,ax
27367 7039           8946         FE            mov	-2[bp],ax
27368                                           !BCC_EOS
27369                                           !BCC_EOS
27370 703C           EB           33            jmp .254
27371                       0000703E            .255:
27372                                           ! 3868             outb(crtc_addr,i);
27373                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27374 703E           FF76         FE            push	-2[bp]
27375                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27376 7041           FF76         FA            push	-6[bp]
27377                                           ! Debug: func () void = outb+0 (used reg = )
27378 7044           E8         0BB7            call	_outb
27379 7047           83C4                   04  add	sp,*4
27380                                           !BCC_EOS
27381                                           ! 3869             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27382                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27383 704A           8B46         FA            mov	ax,-6[bp]
27384                                           ! Debug: list unsigned int = ax+1 (used reg = )
27385 704D           40                         inc	ax
27386 704E           50                         push	ax
27387                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27388 704F           E8         0B96            call	_inb
27389 7052           44                         inc	sp
27390 7053           44                         inc	sp
27391                                           ! Debug: list unsigned char = al+0 (used reg = )
27392 7054           30E4                       xor	ah,ah
27393 7056           50                         push	ax
27394                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27395 7057           FF76         08            push	8[bp]
27396                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27397 705A           FF76         06            push	6[bp]
27398                                           ! Debug: func () void = write_byte+0 (used reg = )
27399 705D           E8         0B58            call	_write_byte
27400 7060           83C4                   06  add	sp,*6
27401                                           !BCC_EOS
27402                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27403 7063           8B46         08            mov	ax,8[bp]
27404 7066           40                         inc	ax
27405 7067           8946         08            mov	8[bp],ax
27406                                           !BCC_EOS
27407                                           ! 3870         }
27408                                           ! 3871         for(i=0;i<=0x13;i++) {
27409                       0000706A            .253:
27410                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27411 706A           8B46         FE            mov	ax,-2[bp]
27412 706D           40                         inc	ax
27413 706E           8946         FE            mov	-2[bp],ax
27414                       00007071            .254:
27415                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27416 7071           8B46         FE            mov	ax,-2[bp]
27417 7074           3D                   0018  cmp	ax,*$18
27418 7077           76           C5            jbe	.255
27419                       00007079            .256:
27420                       00007079            .252:
27421                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27422 7079           31C0                       xor	ax,ax
27423 707B           8946         FE            mov	-2[bp],ax
27424                                           !BCC_EOS
27425                                           !BCC_EOS
27426                                           ! 3871 
27427 707E           EB           44            jmp .259
27428                       00007080            .25A:
27429                                           ! 3872             inb(0x3da);
27430                                           ! Debug: list int = const $3DA (used reg = )
27431 7080           B8                   03DA  mov	ax,#$3DA
27432 7083           50                         push	ax
27433                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27434 7084           E8         0B61            call	_inb
27435 7087           44                         inc	sp
27436 7088           44                         inc	sp
27437                                           !BCC_EOS
27438                                           ! 3873             outb(0x3c0, i | (ar_index & 0x20));
27439                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27440 7089           8A46         F8            mov	al,-8[bp]
27441 708C           24                     20  and	al,*$20
27442                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27443                                           ! Debug: expression subtree swapping
27444 708E           30E4                       xor	ah,ah
27445 7090           0B46         FE            or	ax,-2[bp]
27446                                           ! Debug: list unsigned int = ax+0 (used reg = )
27447 7093           50                         push	ax
27448                                           ! Debug: list int = const $3C0 (used reg = )
27449 7094           B8                   03C0  mov	ax,#$3C0
27450 7097           50                         push	ax
27451                                           ! Debug: func () void = outb+0 (used reg = )
27452 7098           E8         0B63            call	_outb
27453 709B           83C4                   04  add	sp,*4
27454                                           !BCC_EOS
27455                                           ! 3874             write_byte(ES, BX, inb(0x3c1)); BX++;
27456                                           ! Debug: list int = const $3C1 (used reg = )
27457 709E           B8                   03C1  mov	ax,#$3C1
27458 70A1           50                         push	ax
27459                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27460 70A2           E8         0B43            call	_inb
27461 70A5           44                         inc	sp
27462 70A6           44                         inc	sp
27463                                           ! Debug: list unsigned char = al+0 (used reg = )
27464 70A7           30E4                       xor	ah,ah
27465 70A9           50                         push	ax
27466                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27467 70AA           FF76         08            push	8[bp]
27468                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27469 70AD           FF76         06            push	6[bp]
27470                                           ! Debug: func () void = write_byte+0 (used reg = )
27471 70B0           E8         0B05            call	_write_byte
27472 70B3           83C4                   06  add	sp,*6
27473                                           !BCC_EOS
27474                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27475 70B6           8B46         08            mov	ax,8[bp]
27476 70B9           40                         inc	ax
27477 70BA           8946         08            mov	8[bp],ax
27478                                           !BCC_EOS
27479                                           ! 3875         }
27480                                           ! 3876         inb(0x3da);
27481                       000070BD            .258:
27482                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27483 70BD           8B46         FE            mov	ax,-2[bp]
27484 70C0           40                         inc	ax
27485 70C1           8946         FE            mov	-2[bp],ax
27486                       000070C4            .259:
27487                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27488 70C4           8B46         FE            mov	ax,-2[bp]
27489 70C7           3D                   0013  cmp	ax,*$13
27490 70CA           76           B4            jbe	.25A
27491                       000070CC            .25B:
27492                       000070CC            .257:
27493                                           ! Debug: list int = const $3DA (used reg = )
27494 70CC           B8                   03DA  mov	ax,#$3DA
27495 70CF           50                         push	ax
27496                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27497 70D0           E8         0B15            call	_inb
27498 70D3           44                         inc	sp
27499 70D4           44                         inc	sp
27500                                           !BCC_EOS
27501                                           ! 3877         for(i=0;i<=8;i++) {
27502                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27503 70D5           31C0                       xor	ax,ax
27504 70D7           8946         FE            mov	-2[bp],ax
27505                                           !BCC_EOS
27506                                           !BCC_EOS
27507 70DA           EB           33            jmp .25E
27508                       000070DC            .25F:
27509                                           ! 3878             outb(0x3ce,i);
27510                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27511 70DC           FF76         FE            push	-2[bp]
27512                                           ! Debug: list int = const $3CE (used reg = )
27513 70DF           B8                   03CE  mov	ax,#$3CE
27514 70E2           50                         push	ax
27515                                           ! Debug: func () void = outb+0 (used reg = )
27516 70E3           E8         0B18            call	_outb
27517 70E6           83C4                   04  add	sp,*4
27518                                           !BCC_EOS
27519                                           ! 3879             write_byte(ES, BX, inb(0x3cf)); BX++;
27520                                           ! Debug: list int = const $3CF (used reg = )
27521 70E9           B8                   03CF  mov	ax,#$3CF
27522 70EC           50                         push	ax
27523                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27524 70ED           E8         0AF8            call	_inb
27525 70F0           44                         inc	sp
27526 70F1           44                         inc	sp
27527                                           ! Debug: list unsigned char = al+0 (used reg = )
27528 70F2           30E4                       xor	ah,ah
27529 70F4           50                         push	ax
27530                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27531 70F5           FF76         08            push	8[bp]
27532                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27533 70F8           FF76         06            push	6[bp]
27534                                           ! Debug: func () void = write_byte+0 (used reg = )
27535 70FB           E8         0ABA            call	_write_byte
27536 70FE           83C4                   06  add	sp,*6
27537                                           !BCC_EOS
27538                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27539 7101           8B46         08            mov	ax,8[bp]
27540 7104           40                         inc	ax
27541 7105           8946         08            mov	8[bp],ax
27542                                           !BCC_EOS
27543                                           ! 3880         }
27544                                           ! 3881         write_word(ES, BX, crtc_addr); BX+= 2;
27545                       00007108            .25D:
27546                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27547 7108           8B46         FE            mov	ax,-2[bp]
27548 710B           40                         inc	ax
27549 710C           8946         FE            mov	-2[bp],ax
27550                       0000710F            .25E:
27551                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27552 710F           8B46         FE            mov	ax,-2[bp]
27553 7112           3D                   0008  cmp	ax,*8
27554 7115           76           C5            jbe	.25F
27555                       00007117            .260:
27556                       00007117            .25C:
27557                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27558 7117           FF76         FA            push	-6[bp]
27559                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27560 711A           FF76         08            push	8[bp]
27561                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27562 711D           FF76         06            push	6[bp]
27563                                           ! Debug: func () void = write_word+0 (used reg = )
27564 7120           E8         0AAD            call	_write_word
27565 7123           83C4                   06  add	sp,*6
27566                                           !BCC_EOS
27567                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27568 7126           8B46         08            mov	ax,8[bp]
27569 7129           40                         inc	ax
27570 712A           40                         inc	ax
27571 712B           8946         08            mov	8[bp],ax
27572                                           !BCC_EOS
27573                                           ! 3882         write_byte(ES, BX, 0); BX++;
27574                                           ! Debug: list int = const 0 (used reg = )
27575 712E           31C0                       xor	ax,ax
27576 7130           50                         push	ax
27577                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27578 7131           FF76         08            push	8[bp]
27579                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27580 7134           FF76         06            push	6[bp]
27581                                           ! Debug: func () void = write_byte+0 (used reg = )
27582 7137           E8         0A7E            call	_write_byte
27583 713A           83C4                   06  add	sp,*6
27584                                           !BCC_EOS
27585                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27586 713D           8B46         08            mov	ax,8[bp]
27587 7140           40                         inc	ax
27588 7141           8946         08            mov	8[bp],ax
27589                                           !BCC_EOS
27590                                           ! 3883         write_byte(ES, BX, 0); BX++;
27591                                           ! Debug: list int = const 0 (used reg = )
27592 7144           31C0                       xor	ax,ax
27593 7146           50                         push	ax
27594                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27595 7147           FF76         08            push	8[bp]
27596                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27597 714A           FF76         06            push	6[bp]
27598                                           ! Debug: func () void = write_byte+0 (used reg = )
27599 714D           E8         0A68            call	_write_byte
27600 7150           83C4                   06  add	sp,*6
27601                                           !BCC_EOS
27602                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27603 7153           8B46         08            mov	ax,8[bp]
27604 7156           40                         inc	ax
27605 7157           8946         08            mov	8[bp],ax
27606                                           !BCC_EOS
27607                                           ! 3884         write_byte(ES, BX, 0); BX++;
27608                                           ! Debug: list int = const 0 (used reg = )
27609 715A           31C0                       xor	ax,ax
27610 715C           50                         push	ax
27611                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27612 715D           FF76         08            push	8[bp]
27613                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27614 7160           FF76         06            push	6[bp]
27615                                           ! Debug: func () void = write_byte+0 (used reg = )
27616 7163           E8         0A52            call	_write_byte
27617 7166           83C4                   06  add	sp,*6
27618                                           !BCC_EOS
27619                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27620 7169           8B46         08            mov	ax,8[bp]
27621 716C           40                         inc	ax
27622 716D           8946         08            mov	8[bp],ax
27623                                           !BCC_EOS
27624                                           ! 3885         write_byte(ES, BX, 0); BX++;
27625                                           ! Debug: list int = const 0 (used reg = )
27626 7170           31C0                       xor	ax,ax
27627 7172           50                         push	ax
27628                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27629 7173           FF76         08            push	8[bp]
27630                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27631 7176           FF76         06            push	6[bp]
27632                                           ! Debug: func () void = write_byte+0 (used reg = )
27633 7179           E8         0A3C            call	_write_byte
27634 717C           83C4                   06  add	sp,*6
27635                                           !BCC_EOS
27636                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27637 717F           8B46         08            mov	ax,8[bp]
27638 7182           40                         inc	ax
27639 7183           8946         08            mov	8[bp],ax
27640                                           !BCC_EOS
27641                                           ! 3886     }
27642                                           ! 3887     if (CX & 2) {
27643                       00007186            .24B:
27644                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27645 7186           8A46         04            mov	al,4[bp]
27646 7189           24                     02  and	al,*2
27647 718B           84C0                       test	al,al
27648 718D         0F84         0270            beq 	.261
27649                       00007191            .262:
27650                                           ! 3888         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27651                                           ! Debug: list int = const $49 (used reg = )
27652 7191           B8                   0049  mov	ax,*$49
27653 7194           50                         push	ax
27654                                           ! Debug: list int = const $40 (used reg = )
27655 7195           B8                   0040  mov	ax,*$40
27656 7198           50                         push	ax
27657                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27658 7199           E8         09F6            call	_read_byte
27659 719C           83C4                   04  add	sp,*4
27660                                           ! Debug: list unsigned char = al+0 (used reg = )
27661 719F           30E4                       xor	ah,ah
27662 71A1           50                         push	ax
27663                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27664 71A2           FF76         08            push	8[bp]
27665                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27666 71A5           FF76         06            push	6[bp]
27667                                           ! Debug: func () void = write_byte+0 (used reg = )
27668 71A8           E8         0A0D            call	_write_byte
27669 71AB           83C4                   06  add	sp,*6
27670                                           !BCC_EOS
27671                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27672 71AE           8B46         08            mov	ax,8[bp]
27673 71B1           40                         inc	ax
27674 71B2           8946         08            mov	8[bp],ax
27675                                           !BCC_EOS
27676                                           ! 3889         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27677                                           ! Debug: list int = const $4A (used reg = )
27678 71B5           B8                   004A  mov	ax,*$4A
27679 71B8           50                         push	ax
27680                                           ! Debug: list int = const $40 (used reg = )
27681 71B9           B8                   0040  mov	ax,*$40
27682 71BC           50                         push	ax
27683                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27684 71BD           E8         09E5            call	_read_word
27685 71C0           83C4                   04  add	sp,*4
27686                                           ! Debug: list unsigned short = ax+0 (used reg = )
27687 71C3           50                         push	ax
27688                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27689 71C4           FF76         08            push	8[bp]
27690                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27691 71C7           FF76         06            push	6[bp]
27692                                           ! Debug: func () void = write_word+0 (used reg = )
27693 71CA           E8         0A03            call	_write_word
27694 71CD           83C4                   06  add	sp,*6
27695                                           !BCC_EOS
27696                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27697 71D0           8B46         08            mov	ax,8[bp]
27698 71D3           40                         inc	ax
27699 71D4           40                         inc	ax
27700 71D5           8946         08            mov	8[bp],ax
27701                                           !BCC_EOS
27702                                           ! 3890         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27703                                           ! Debug: list int = const $4C (used reg = )
27704 71D8           B8                   004C  mov	ax,*$4C
27705 71DB           50                         push	ax
27706                                           ! Debug: list int = const $40 (used reg = )
27707 71DC           B8                   0040  mov	ax,*$40
27708 71DF           50                         push	ax
27709                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27710 71E0           E8         09C2            call	_read_word
27711 71E3           83C4                   04  add	sp,*4
27712                                           ! Debug: list unsigned short = ax+0 (used reg = )
27713 71E6           50                         push	ax
27714                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27715 71E7           FF76         08            push	8[bp]
27716                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27717 71EA           FF76         06            push	6[bp]
27718                                           ! Debug: func () void = write_word+0 (used reg = )
27719 71ED           E8         09E0            call	_write_word
27720 71F0           83C4                   06  add	sp,*6
27721                                           !BCC_EOS
27722                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27723 71F3           8B46         08            mov	ax,8[bp]
27724 71F6           40                         inc	ax
27725 71F7           40                         inc	ax
27726 71F8           8946         08            mov	8[bp],ax
27727                                           !BCC_EOS
27728                                           ! 3891         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27729                                           ! Debug: list int = const $63 (used reg = )
27730 71FB           B8                   0063  mov	ax,*$63
27731 71FE           50                         push	ax
27732                                           ! Debug: list int = const $40 (used reg = )
27733 71FF           B8                   0040  mov	ax,*$40
27734 7202           50                         push	ax
27735                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27736 7203           E8         099F            call	_read_word
27737 7206           83C4                   04  add	sp,*4
27738                                           ! Debug: list unsigned short = ax+0 (used reg = )
27739 7209           50                         push	ax
27740                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27741 720A           FF76         08            push	8[bp]
27742                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27743 720D           FF76         06            push	6[bp]
27744                                           ! Debug: func () void = write_word+0 (used reg = )
27745 7210           E8         09BD            call	_write_word
27746 7213           83C4                   06  add	sp,*6
27747                                           !BCC_EOS
27748                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27749 7216           8B46         08            mov	ax,8[bp]
27750 7219           40                         inc	ax
27751 721A           40                         inc	ax
27752 721B           8946         08            mov	8[bp],ax
27753                                           !BCC_EOS
27754                                           ! 3892         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27755                                           ! Debug: list int = const $84 (used reg = )
27756 721E           B8                   0084  mov	ax,#$84
27757 7221           50                         push	ax
27758                                           ! Debug: list int = const $40 (used reg = )
27759 7222           B8                   0040  mov	ax,*$40
27760 7225           50                         push	ax
27761                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27762 7226           E8         0969            call	_read_byte
27763 7229           83C4                   04  add	sp,*4
27764                                           ! Debug: list unsigned char = al+0 (used reg = )
27765 722C           30E4                       xor	ah,ah
27766 722E           50                         push	ax
27767                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27768 722F           FF76         08            push	8[bp]
27769                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27770 7232           FF76         06            push	6[bp]
27771                                           ! Debug: func () void = write_byte+0 (used reg = )
27772 7235           E8         0980            call	_write_byte
27773 7238           83C4                   06  add	sp,*6
27774                                           !BCC_EOS
27775                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27776 723B           8B46         08            mov	ax,8[bp]
27777 723E           40                         inc	ax
27778 723F           8946         08            mov	8[bp],ax
27779                                           !BCC_EOS
27780                                           ! 3893         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27781                                           ! Debug: list int = const $85 (used reg = )
27782 7242           B8                   0085  mov	ax,#$85
27783 7245           50                         push	ax
27784                                           ! Debug: list int = const $40 (used reg = )
27785 7246           B8                   0040  mov	ax,*$40
27786 7249           50                         push	ax
27787                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27788 724A           E8         0958            call	_read_word
27789 724D           83C4                   04  add	sp,*4
27790                                           ! Debug: list unsigned short = ax+0 (used reg = )
27791 7250           50                         push	ax
27792                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27793 7251           FF76         08            push	8[bp]
27794                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27795 7254           FF76         06            push	6[bp]
27796                                           ! Debug: func () void = write_word+0 (used reg = )
27797 7257           E8         0976            call	_write_word
27798 725A           83C4                   06  add	sp,*6
27799                                           !BCC_EOS
27800                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27801 725D           8B46         08            mov	ax,8[bp]
27802 7260           40                         inc	ax
27803 7261           40                         inc	ax
27804 7262           8946         08            mov	8[bp],ax
27805                                           !BCC_EOS
27806                                           ! 3894         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27807                                           ! Debug: list int = const $87 (used reg = )
27808 7265           B8                   0087  mov	ax,#$87
27809 7268           50                         push	ax
27810                                           ! Debug: list int = const $40 (used reg = )
27811 7269           B8                   0040  mov	ax,*$40
27812 726C           50                         push	ax
27813                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27814 726D           E8         0922            call	_read_byte
27815 7270           83C4                   04  add	sp,*4
27816                                           ! Debug: list unsigned char = al+0 (used reg = )
27817 7273           30E4                       xor	ah,ah
27818 7275           50                         push	ax
27819                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27820 7276           FF76         08            push	8[bp]
27821                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27822 7279           FF76         06            push	6[bp]
27823                                           ! Debug: func () void = write_byte+0 (used reg = )
27824 727C           E8         0939            call	_write_byte
27825 727F           83C4                   06  add	sp,*6
27826                                           !BCC_EOS
27827                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27828 7282           8B46         08            mov	ax,8[bp]
27829 7285           40                         inc	ax
27830 7286           8946         08            mov	8[bp],ax
27831                                           !BCC_EOS
27832                                           ! 3895         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27833                                           ! Debug: list int = const $88 (used reg = )
27834 7289           B8                   0088  mov	ax,#$88
27835 728C           50                         push	ax
27836                                           ! Debug: list int = const $40 (used reg = )
27837 728D           B8                   0040  mov	ax,*$40
27838 7290           50                         push	ax
27839                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27840 7291           E8         08FE            call	_read_byte
27841 7294           83C4                   04  add	sp,*4
27842                                           ! Debug: list unsigned char = al+0 (used reg = )
27843 7297           30E4                       xor	ah,ah
27844 7299           50                         push	ax
27845                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27846 729A           FF76         08            push	8[bp]
27847                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27848 729D           FF76         06            push	6[bp]
27849                                           ! Debug: func () void = write_byte+0 (used reg = )
27850 72A0           E8         0915            call	_write_byte
27851 72A3           83C4                   06  add	sp,*6
27852                                           !BCC_EOS
27853                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27854 72A6           8B46         08            mov	ax,8[bp]
27855 72A9           40                         inc	ax
27856 72AA           8946         08            mov	8[bp],ax
27857                                           !BCC_EOS
27858                                           ! 3896         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27859                                           ! Debug: list int = const $89 (used reg = )
27860 72AD           B8                   0089  mov	ax,#$89
27861 72B0           50                         push	ax
27862                                           ! Debug: list int = const $40 (used reg = )
27863 72B1           B8                   0040  mov	ax,*$40
27864 72B4           50                         push	ax
27865                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27866 72B5           E8         08DA            call	_read_byte
27867 72B8           83C4                   04  add	sp,*4
27868                                           ! Debug: list unsigned char = al+0 (used reg = )
27869 72BB           30E4                       xor	ah,ah
27870 72BD           50                         push	ax
27871                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27872 72BE           FF76         08            push	8[bp]
27873                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27874 72C1           FF76         06            push	6[bp]
27875                                           ! Debug: func () void = write_byte+0 (used reg = )
27876 72C4           E8         08F1            call	_write_byte
27877 72C7           83C4                   06  add	sp,*6
27878                                           !BCC_EOS
27879                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27880 72CA           8B46         08            mov	ax,8[bp]
27881 72CD           40                         inc	ax
27882 72CE           8946         08            mov	8[bp],ax
27883                                           !BCC_EOS
27884                                           ! 3897         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27885                                           ! Debug: list int = const $60 (used reg = )
27886 72D1           B8                   0060  mov	ax,*$60
27887 72D4           50                         push	ax
27888                                           ! Debug: list int = const $40 (used reg = )
27889 72D5           B8                   0040  mov	ax,*$40
27890 72D8           50                         push	ax
27891                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27892 72D9           E8         08C9            call	_read_word
27893 72DC           83C4                   04  add	sp,*4
27894                                           ! Debug: list unsigned short = ax+0 (used reg = )
27895 72DF           50                         push	ax
27896                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27897 72E0           FF76         08            push	8[bp]
27898                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27899 72E3           FF76         06            push	6[bp]
27900                                           ! Debug: func () void = write_word+0 (used reg = )
27901 72E6           E8         08E7            call	_write_word
27902 72E9           83C4                   06  add	sp,*6
27903                                           !BCC_EOS
27904                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27905 72EC           8B46         08            mov	ax,8[bp]
27906 72EF           40                         inc	ax
27907 72F0           40                         inc	ax
27908 72F1           8946         08            mov	8[bp],ax
27909                                           !BCC_EOS
27910                                           ! 3898         for(i=0;i<8;i++) {
27911                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27912 72F4           31C0                       xor	ax,ax
27913 72F6           8946         FE            mov	-2[bp],ax
27914                                           !BCC_EOS
27915                                           !BCC_EOS
27916 72F9           EB           2F            jmp .265
27917                       000072FB            .266:
27918                                           ! 3899             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27919                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27920                                           ! Debug: expression subtree swapping
27921 72FB           8B46         FE            mov	ax,-2[bp]
27922 72FE           D1E0                       shl	ax,*1
27923                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27924                                           ! Debug: expression subtree swapping
27925                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27926 7300           05                   0050  add	ax,*$50
27927 7303           50                         push	ax
27928                                           ! Debug: list int = const $40 (used reg = )
27929 7304           B8                   0040  mov	ax,*$40
27930 7307           50                         push	ax
27931                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27932 7308           E8         089A            call	_read_word
27933 730B           83C4                   04  add	sp,*4
27934                                           ! Debug: list unsigned short = ax+0 (used reg = )
27935 730E           50                         push	ax
27936                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27937 730F           FF76         08            push	8[bp]
27938                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27939 7312           FF76         06            push	6[bp]
27940                                           ! Debug: func () void = write_word+0 (used reg = )
27941 7315           E8         08B8            call	_write_word
27942 7318           83C4                   06  add	sp,*6
27943                                           !BCC_EOS
27944                                           ! 3900             BX += 2;
27945                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27946 731B           8B46         08            mov	ax,8[bp]
27947 731E           40                         inc	ax
27948 731F           40                         inc	ax
27949 7320           8946         08            mov	8[bp],ax
27950                                           !BCC_EOS
27951                                           ! 3901         }
27952                                           ! 3902         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27953                       00007323            .264:
27954                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27955 7323           8B46         FE            mov	ax,-2[bp]
27956 7326           40                         inc	ax
27957 7327           8946         FE            mov	-2[bp],ax
27958                       0000732A            .265:
27959                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27960 732A           8B46         FE            mov	ax,-2[bp]
27961 732D           3D                   0008  cmp	ax,*8
27962 7330           72           C9            jb 	.266
27963                       00007332            .267:
27964                       00007332            .263:
27965                                           ! Debug: list int = const $4E (used reg = )
27966 7332           B8                   004E  mov	ax,*$4E
27967 7335           50                         push	ax
27968                                           ! Debug: list int = const $40 (used reg = )
27969 7336           B8                   0040  mov	ax,*$40
27970 7339           50                         push	ax
27971                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27972 733A           E8         0868            call	_read_word
27973 733D           83C4                   04  add	sp,*4
27974                                           ! Debug: list unsigned short = ax+0 (used reg = )
27975 7340           50                         push	ax
27976                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27977 7341           FF76         08            push	8[bp]
27978                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27979 7344           FF76         06            push	6[bp]
27980                                           ! Debug: func () void = write_word+0 (used reg = )
27981 7347           E8         0886            call	_write_word
27982 734A           83C4                   06  add	sp,*6
27983                                           !BCC_EOS
27984                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27985 734D           8B46         08            mov	ax,8[bp]
27986 7350           40                         inc	ax
27987 7351           40                         inc	ax
27988 7352           8946         08            mov	8[bp],ax
27989                                           !BCC_EOS
27990                                           ! 3903         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
27991                                           ! Debug: list int = const $62 (used reg = )
27992 7355           B8                   0062  mov	ax,*$62
27993 7358           50                         push	ax
27994                                           ! Debug: list int = const $40 (used reg = )
27995 7359           B8                   0040  mov	ax,*$40
27996 735C           50                         push	ax
27997                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27998 735D           E8         0832            call	_read_byte
27999 7360           83C4                   04  add	sp,*4
28000                                           ! Debug: list unsigned char = al+0 (used reg = )
28001 7363           30E4                       xor	ah,ah
28002 7365           50                         push	ax
28003                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28004 7366           FF76         08            push	8[bp]
28005                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28006 7369           FF76         06            push	6[bp]
28007                                           ! Debug: func () void = write_byte+0 (used reg = )
28008 736C           E8         0849            call	_write_byte
28009 736F           83C4                   06  add	sp,*6
28010                                           !BCC_EOS
28011                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28012 7372           8B46         08            mov	ax,8[bp]
28013 7375           40                         inc	ax
28014 7376           8946         08            mov	8[bp],ax
28015                                           !BCC_EOS
28016                                           ! 3904         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28017                                           ! Debug: list int = const $7C (used reg = )
28018 7379           B8                   007C  mov	ax,*$7C
28019 737C           50                         push	ax
28020                                           ! Debug: list int = const 0 (used reg = )
28021 737D           31C0                       xor	ax,ax
28022 737F           50                         push	ax
28023                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28024 7380           E8         0822            call	_read_word
28025 7383           83C4                   04  add	sp,*4
28026                                           ! Debug: list unsigned short = ax+0 (used reg = )
28027 7386           50                         push	ax
28028                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28029 7387           FF76         08            push	8[bp]
28030                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28031 738A           FF76         06            push	6[bp]
28032                                           ! Debug: func () void = write_word+0 (used reg = )
28033 738D           E8         0840            call	_write_word
28034 7390           83C4                   06  add	sp,*6
28035                                           !BCC_EOS
28036                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28037 7393           8B46         08            mov	ax,8[bp]
28038 7396           40                         inc	ax
28039 7397           40                         inc	ax
28040 7398           8946         08            mov	8[bp],ax
28041                                           !BCC_EOS
28042                                           ! 3905         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28043                                           ! Debug: list int = const $7E (used reg = )
28044 739B           B8                   007E  mov	ax,*$7E
28045 739E           50                         push	ax
28046                                           ! Debug: list int = const 0 (used reg = )
28047 739F           31C0                       xor	ax,ax
28048 73A1           50                         push	ax
28049                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28050 73A2           E8         0800            call	_read_word
28051 73A5           83C4                   04  add	sp,*4
28052                                           ! Debug: list unsigned short = ax+0 (used reg = )
28053 73A8           50                         push	ax
28054                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28055 73A9           FF76         08            push	8[bp]
28056                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28057 73AC           FF76         06            push	6[bp]
28058                                           ! Debug: func () void = write_word+0 (used reg = )
28059 73AF           E8         081E            call	_write_word
28060 73B2           83C4                   06  add	sp,*6
28061                                           !BCC_EOS
28062                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28063 73B5           8B46         08            mov	ax,8[bp]
28064 73B8           40                         inc	ax
28065 73B9           40                         inc	ax
28066 73BA           8946         08            mov	8[bp],ax
28067                                           !BCC_EOS
28068                                           ! 3906         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28069                                           ! Debug: list int = const $10C (used reg = )
28070 73BD           B8                   010C  mov	ax,#$10C
28071 73C0           50                         push	ax
28072                                           ! Debug: list int = const 0 (used reg = )
28073 73C1           31C0                       xor	ax,ax
28074 73C3           50                         push	ax
28075                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28076 73C4           E8         07DE            call	_read_word
28077 73C7           83C4                   04  add	sp,*4
28078                                           ! Debug: list unsigned short = ax+0 (used reg = )
28079 73CA           50                         push	ax
28080                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28081 73CB           FF76         08            push	8[bp]
28082                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28083 73CE           FF76         06            push	6[bp]
28084                                           ! Debug: func () void = write_word+0 (used reg = )
28085 73D1           E8         07FC            call	_write_word
28086 73D4           83C4                   06  add	sp,*6
28087                                           !BCC_EOS
28088                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28089 73D7           8B46         08            mov	ax,8[bp]
28090 73DA           40                         inc	ax
28091 73DB           40                         inc	ax
28092 73DC           8946         08            mov	8[bp],ax
28093                                           !BCC_EOS
28094                                           ! 3907         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28095                                           ! Debug: list int = const $10E (used reg = )
28096 73DF           B8                   010E  mov	ax,#$10E
28097 73E2           50                         push	ax
28098                                           ! Debug: list int = const 0 (used reg = )
28099 73E3           31C0                       xor	ax,ax
28100 73E5           50                         push	ax
28101                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28102 73E6           E8         07BC            call	_read_word
28103 73E9           83C4                   04  add	sp,*4
28104                                           ! Debug: list unsigned short = ax+0 (used reg = )
28105 73EC           50                         push	ax
28106                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28107 73ED           FF76         08            push	8[bp]
28108                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28109 73F0           FF76         06            push	6[bp]
28110                                           ! Debug: func () void = write_word+0 (used reg = )
28111 73F3           E8         07DA            call	_write_word
28112 73F6           83C4                   06  add	sp,*6
28113                                           !BCC_EOS
28114                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28115 73F9           8B46         08            mov	ax,8[bp]
28116 73FC           40                         inc	ax
28117 73FD           40                         inc	ax
28118 73FE           8946         08            mov	8[bp],ax
28119                                           !BCC_EOS
28120                                           ! 3908     }
28121                                           ! 3909     if (CX & 4) {
28122                       00007401            .261:
28123                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28124 7401           8A46         04            mov	al,4[bp]
28125 7404           24                     04  and	al,*4
28126 7406           84C0                       test	al,al
28127 7408         0F84         00B5            beq 	.268
28128                       0000740C            .269:
28129                                           ! 3910         write_byte(ES, BX, inb(0x3c7)); BX++;
28130                                           ! Debug: list int = const $3C7 (used reg = )
28131 740C           B8                   03C7  mov	ax,#$3C7
28132 740F           50                         push	ax
28133                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28134 7410           E8         07D5            call	_inb
28135 7413           44                         inc	sp
28136 7414           44                         inc	sp
28137                                           ! Debug: list unsigned char = al+0 (used reg = )
28138 7415           30E4                       xor	ah,ah
28139 7417           50                         push	ax
28140                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28141 7418           FF76         08            push	8[bp]
28142                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28143 741B           FF76         06            push	6[bp]
28144                                           ! Debug: func () void = write_byte+0 (used reg = )
28145 741E           E8         0797            call	_write_byte
28146 7421           83C4                   06  add	sp,*6
28147                                           !BCC_EOS
28148                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28149 7424           8B46         08            mov	ax,8[bp]
28150 7427           40                         inc	ax
28151 7428           8946         08            mov	8[bp],ax
28152                                           !BCC_EOS
28153                                           ! 3911         write_byte(ES, BX, inb(0x3c8)); BX++;
28154                                           ! Debug: list int = const $3C8 (used reg = )
28155 742B           B8                   03C8  mov	ax,#$3C8
28156 742E           50                         push	ax
28157                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28158 742F           E8         07B6            call	_inb
28159 7432           44                         inc	sp
28160 7433           44                         inc	sp
28161                                           ! Debug: list unsigned char = al+0 (used reg = )
28162 7434           30E4                       xor	ah,ah
28163 7436           50                         push	ax
28164                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28165 7437           FF76         08            push	8[bp]
28166                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28167 743A           FF76         06            push	6[bp]
28168                                           ! Debug: func () void = write_byte+0 (used reg = )
28169 743D           E8         0778            call	_write_byte
28170 7440           83C4                   06  add	sp,*6
28171                                           !BCC_EOS
28172                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28173 7443           8B46         08            mov	ax,8[bp]
28174 7446           40                         inc	ax
28175 7447           8946         08            mov	8[bp],ax
28176                                           !BCC_EOS
28177                                           ! 3912         write_byte(ES, BX, inb(0x3c6)); BX++;
28178                                           ! Debug: list int = const $3C6 (used reg = )
28179 744A           B8                   03C6  mov	ax,#$3C6
28180 744D           50                         push	ax
28181                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28182 744E           E8         0797            call	_inb
28183 7451           44                         inc	sp
28184 7452           44                         inc	sp
28185                                           ! Debug: list unsigned char = al+0 (used reg = )
28186 7453           30E4                       xor	ah,ah
28187 7455           50                         push	ax
28188                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28189 7456           FF76         08            push	8[bp]
28190                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28191 7459           FF76         06            push	6[bp]
28192                                           ! Debug: func () void = write_byte+0 (used reg = )
28193 745C           E8         0759            call	_write_byte
28194 745F           83C4                   06  add	sp,*6
28195                                           !BCC_EOS
28196                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28197 7462           8B46         08            mov	ax,8[bp]
28198 7465           40                         inc	ax
28199 7466           8946         08            mov	8[bp],ax
28200                                           !BCC_EOS
28201                                           ! 3913         outb(0x3c8,0x00);
28202                                           ! Debug: list int = const 0 (used reg = )
28203 7469           31C0                       xor	ax,ax
28204 746B           50                         push	ax
28205                                           ! Debug: list int = const $3C8 (used reg = )
28206 746C           B8                   03C8  mov	ax,#$3C8
28207 746F           50                         push	ax
28208                                           ! Debug: func () void = outb+0 (used reg = )
28209 7470           E8         078B            call	_outb
28210 7473           83C4                   04  add	sp,*4
28211                                           !BCC_EOS
28212                                           ! 3914         for(i=0;i<256*3;i++) {
28213                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28214 7476           31C0                       xor	ax,ax
28215 7478           8946         FE            mov	-2[bp],ax
28216                                           !BCC_EOS
28217                                           !BCC_EOS
28218 747B           EB           26            jmp .26C
28219                       0000747D            .26D:
28220                                           ! 3915             write_byte(ES, BX, inb(0x3c9)); BX++;
28221                                           ! Debug: list int = const $3C9 (used reg = )
28222 747D           B8                   03C9  mov	ax,#$3C9
28223 7480           50                         push	ax
28224                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28225 7481           E8         0764            call	_inb
28226 7484           44                         inc	sp
28227 7485           44                         inc	sp
28228                                           ! Debug: list unsigned char = al+0 (used reg = )
28229 7486           30E4                       xor	ah,ah
28230 7488           50                         push	ax
28231                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28232 7489           FF76         08            push	8[bp]
28233                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28234 748C           FF76         06            push	6[bp]
28235                                           ! Debug: func () void = write_byte+0 (used reg = )
28236 748F           E8         0726            call	_write_byte
28237 7492           83C4                   06  add	sp,*6
28238                                           !BCC_EOS
28239                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28240 7495           8B46         08            mov	ax,8[bp]
28241 7498           40                         inc	ax
28242 7499           8946         08            mov	8[bp],ax
28243                                           !BCC_EOS
28244                                           ! 3916         }
28245                                           ! 3917         write_byte(ES, BX, 0); BX++;
28246                       0000749C            .26B:
28247                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28248 749C           8B46         FE            mov	ax,-2[bp]
28249 749F           40                         inc	ax
28250 74A0           8946         FE            mov	-2[bp],ax
28251                       000074A3            .26C:
28252                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28253 74A3           8B46         FE            mov	ax,-2[bp]
28254 74A6           3D                   0300  cmp	ax,#$300
28255 74A9           72           D2            jb 	.26D
28256                       000074AB            .26E:
28257                       000074AB            .26A:
28258                                           ! Debug: list int = const 0 (used reg = )
28259 74AB           31C0                       xor	ax,ax
28260 74AD           50                         push	ax
28261                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28262 74AE           FF76         08            push	8[bp]
28263                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28264 74B1           FF76         06            push	6[bp]
28265                                           ! Debug: func () void = write_byte+0 (used reg = )
28266 74B4           E8         0701            call	_write_byte
28267 74B7           83C4                   06  add	sp,*6
28268                                           !BCC_EOS
28269                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28270 74BA           8B46         08            mov	ax,8[bp]
28271 74BD           40                         inc	ax
28272 74BE           8946         08            mov	8[bp],ax
28273                                           !BCC_EOS
28274                                           ! 3918     }
28275                                           ! 3919     return BX;
28276                       000074C1            .268:
28277 74C1           8B46         08            mov	ax,8[bp]
28278 74C4           89EC                       mov	sp,bp
28279 74C6           5D                         pop	bp
28280 74C7           C3                         ret
28281                                           !BCC_EOS
28282                                           ! 3920 }
28283                                           ! 3921 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28284                                           ! 3922      Bit16u CX;Bit16u ES;Bit16u BX;
28285                       000074C8            _biosfn_restore_video_state:
28286                                           !BCC_EOS
28287                                           !BCC_EOS
28288                                           !BCC_EOS
28289                                           ! 3923 {
28290                                           ! 3924     Bit16u i, crtc_addr, v, addr1, ar_index;
28291                                           !BCC_EOS
28292                                           ! 3925     if (CX & 1) {
28293 74C8           55                         push	bp
28294 74C9           89E5                       mov	bp,sp
28295 74CB           83C4                   F6  add	sp,*-$A
28296                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28297 74CE           8A46         04            mov	al,4[bp]
28298 74D1           24                     01  and	al,*1
28299 74D3           84C0                       test	al,al
28300 74D5         0F84         02AA            beq 	.26F
28301                       000074D9            .270:
28302                                           ! 3926         i
28303                                           ! 3926 nb(0x3da);
28304                                           ! Debug: list int = const $3DA (used reg = )
28305 74D9           B8                   03DA  mov	ax,#$3DA
28306 74DC           50                         push	ax
28307                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28308 74DD           E8         0708            call	_inb
28309 74E0           44                         inc	sp
28310 74E1           44                         inc	sp
28311                                           !BCC_EOS
28312                                           ! 3927         crtc_addr = read_word(ES, BX + 0x40);
28313                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28314 74E2           8B46         08            mov	ax,8[bp]
28315                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28316 74E5           05                   0040  add	ax,*$40
28317 74E8           50                         push	ax
28318                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28319 74E9           FF76         06            push	6[bp]
28320                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28321 74EC           E8         06B6            call	_read_word
28322 74EF           83C4                   04  add	sp,*4
28323                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28324 74F2           8946         FC            mov	-4[bp],ax
28325                                           !BCC_EOS
28326                                           ! 3928         addr1 = BX;
28327                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28328 74F5           8B46         08            mov	ax,8[bp]
28329 74F8           8946         F8            mov	-8[bp],ax
28330                                           !BCC_EOS
28331                                           ! 3929         BX += 5;
28332                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28333 74FB           8B46         08            mov	ax,8[bp]
28334 74FE           05                   0005  add	ax,*5
28335 7501           8946         08            mov	8[bp],ax
28336                                           !BCC_EOS
28337                                           ! 3930         for(i=1;i<=4;i++){
28338                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28339 7504           B8                   0001  mov	ax,*1
28340 7507           8946         FE            mov	-2[bp],ax
28341                                           !BCC_EOS
28342                                           !BCC_EOS
28343 750A           EB           34            jmp .273
28344                       0000750C            .274:
28345                                           ! 3931             outb(0x3c4, i);
28346                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28347 750C           FF76         FE            push	-2[bp]
28348                                           ! Debug: list int = const $3C4 (used reg = )
28349 750F           B8                   03C4  mov	ax,#$3C4
28350 7512           50                         push	ax
28351                                           ! Debug: func () void = outb+0 (used reg = )
28352 7513           E8         06E8            call	_outb
28353 7516           83C4                   04  add	sp,*4
28354                                           !BCC_EOS
28355                                           ! 3932             outb(0x3c5, read_byte(ES, BX)); BX++;
28356                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28357 7519           FF76         08            push	8[bp]
28358                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28359 751C           FF76         06            push	6[bp]
28360                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28361 751F           E8         0670            call	_read_byte
28362 7522           83C4                   04  add	sp,*4
28363                                           ! Debug: list unsigned char = al+0 (used reg = )
28364 7525           30E4                       xor	ah,ah
28365 7527           50                         push	ax
28366                                           ! Debug: list int = const $3C5 (used reg = )
28367 7528           B8                   03C5  mov	ax,#$3C5
28368 752B           50                         push	ax
28369                                           ! Debug: func () void = outb+0 (used reg = )
28370 752C           E8         06CF            call	_outb
28371 752F           83C4                   04  add	sp,*4
28372                                           !BCC_EOS
28373                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28374 7532           8B46         08            mov	ax,8[bp]
28375 7535           40                         inc	ax
28376 7536           8946         08            mov	8[bp],ax
28377                                           !BCC_EOS
28378                                           ! 3933         }
28379                                           ! 3934         outb(0x3c4, 0);
28380                       00007539            .272:
28381                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28382 7539           8B46         FE            mov	ax,-2[bp]
28383 753C           40                         inc	ax
28384 753D           8946         FE            mov	-2[bp],ax
28385                       00007540            .273:
28386                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28387 7540           8B46         FE            mov	ax,-2[bp]
28388 7543           3D                   0004  cmp	ax,*4
28389 7546           76           C4            jbe	.274
28390                       00007548            .275:
28391                       00007548            .271:
28392                                           ! Debug: list int = const 0 (used reg = )
28393 7548           31C0                       xor	ax,ax
28394 754A           50                         push	ax
28395                                           ! Debug: list int = const $3C4 (used reg = )
28396 754B           B8                   03C4  mov	ax,#$3C4
28397 754E           50                         push	ax
28398                                           ! Debug: func () void = outb+0 (used reg = )
28399 754F           E8         06AC            call	_outb
28400 7552           83C4                   04  add	sp,*4
28401                                           !BCC_EOS
28402                                           ! 3935         outb(0x3c5, read_byte(ES, BX)); BX++;
28403                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28404 7555           FF76         08            push	8[bp]
28405                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28406 7558           FF76         06            push	6[bp]
28407                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28408 755B           E8         0634            call	_read_byte
28409 755E           83C4                   04  add	sp,*4
28410                                           ! Debug: list unsigned char = al+0 (used reg = )
28411 7561           30E4                       xor	ah,ah
28412 7563           50                         push	ax
28413                                           ! Debug: list int = const $3C5 (used reg = )
28414 7564           B8                   03C5  mov	ax,#$3C5
28415 7567           50                         push	ax
28416                                           ! Debug: func () void = outb+0 (used reg = )
28417 7568           E8         0693            call	_outb
28418 756B           83C4                   04  add	sp,*4
28419                                           !BCC_EOS
28420                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28421 756E           8B46         08            mov	ax,8[bp]
28422 7571           40                         inc	ax
28423 7572           8946         08            mov	8[bp],ax
28424                                           !BCC_EOS
28425                                           ! 3936         outw(crtc_addr,0x0011);
28426                                           ! Debug: list int = const $11 (used reg = )
28427 7575           B8                   0011  mov	ax,*$11
28428 7578           50                         push	ax
28429                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28430 7579           FF76         FC            push	-4[bp]
28431                                           ! Debug: func () void = outw+0 (used reg = )
28432 757C           E8         068F            call	_outw
28433 757F           83C4                   04  add	sp,*4
28434                                           !BCC_EOS
28435                                           ! 3937         for(i=0;i<=0x18;i++) {
28436                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28437 7582           31C0                       xor	ax,ax
28438 7584           8946         FE            mov	-2[bp],ax
28439                                           !BCC_EOS
28440                                           !BCC_EOS
28441 7587           EB           3C            jmp .278
28442                       00007589            .279:
28443                                           ! 3938             if (i != 0x11) {
28444                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28445 7589           8B46         FE            mov	ax,-2[bp]
28446 758C           3D                   0011  cmp	ax,*$11
28447 758F           74           26            je  	.27A
28448                       00007591            .27B:
28449                                           ! 3939                 outb(crtc_addr,i);
28450                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28451 7591           FF76         FE            push	-2[bp]
28452                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28453 7594           FF76         FC            push	-4[bp]
28454                                           ! Debug: func () void = outb+0 (used reg = )
28455 7597           E8         0664            call	_outb
28456 759A           83C4                   04  add	sp,*4
28457                                           !BCC_EOS
28458                                           ! 3940                 outb(crtc_addr+1, read_byte(ES, BX));
28459                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28460 759D           FF76         08            push	8[bp]
28461                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28462 75A0           FF76         06            push	6[bp]
28463                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28464 75A3           E8         05EC            call	_read_byte
28465 75A6           83C4                   04  add	sp,*4
28466                                           ! Debug: list unsigned char = al+0 (used reg = )
28467 75A9           30E4                       xor	ah,ah
28468 75AB           50                         push	ax
28469                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28470 75AC           8B46         FC            mov	ax,-4[bp]
28471                                           ! Debug: list unsigned int = ax+1 (used reg = )
28472 75AF           40                         inc	ax
28473 75B0           50                         push	ax
28474                                           ! Debug: func () void = outb+0 (used reg = )
28475 75B1           E8         064A            call	_outb
28476 75B4           83C4                   04  add	sp,*4
28477                                           !BCC_EOS
28478                                           ! 3941             }
28479                                           ! 3942             BX++;
28480                       000075B7            .27A:
28481                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28482 75B7           8B46         08            mov	ax,8[bp]
28483 75BA           40                         inc	ax
28484 75BB           8946         08            mov	8[bp],ax
28485                                           !BCC_EOS
28486                                           ! 3943         }
28487                                           ! 3944         v = inb(0x3cc) & ~0x01;
28488                       000075BE            .277:
28489                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28490 75BE           8B46         FE            mov	ax,-2[bp]
28491 75C1           40                         inc	ax
28492 75C2           8946         FE            mov	-2[bp],ax
28493                       000075C5            .278:
28494                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28495 75C5           8B46         FE            mov	ax,-2[bp]
28496 75C8           3D                   0018  cmp	ax,*$18
28497 75CB           76           BC            jbe	.279
28498                       000075CD            .27C:
28499                       000075CD            .276:
28500                                           ! Debug: list int = const $3CC (used reg = )
28501 75CD           B8                   03CC  mov	ax,#$3CC
28502 75D0           50                         push	ax
28503                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28504 75D1           E8         0614            call	_inb
28505 75D4           44                         inc	sp
28506 75D5           44                         inc	sp
28507                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28508 75D6           24                     FE  and	al,#$FE
28509                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28510 75D8           30E4                       xor	ah,ah
28511 75DA           8946         FA            mov	-6[bp],ax
28512                                           !BCC_EOS
28513                                           ! 3945         if (crtc_addr = 0x3d4)
28514                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28515 75DD           B8                   03D4  mov	ax,#$3D4
28516 75E0           8946         FC            mov	-4[bp],ax
28517 75E3           85C0                       test	ax,ax
28518 75E5           74           08            je  	.27D
28519                       000075E7            .27E:
28520                                           ! 3946             v |= 0x01;
28521                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28522 75E7           8B46         FA            mov	ax,-6[bp]
28523 75EA           0C                     01  or	al,*1
28524 75EC           8946         FA            mov	-6[bp],ax
28525                                           !BCC_EOS
28526                                           ! 3947         outb(0x3c2, v);
28527                       000075EF            .27D:
28528                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28529 75EF           FF76         FA            push	-6[bp]
28530                                           ! Debug: list int = const $3C2 (used reg = )
28531 75F2           B8                   03C2  mov	ax,#$3C2
28532 75F5           50                         push	ax
28533                                           ! Debug: func () void = outb+0 (used reg = )
28534 75F6           E8         0605            call	_outb
28535 75F9           83C4                   04  add	sp,*4
28536                                           !BCC_EOS
28537                                           ! 3948         outb(crtc_addr, 0x11);
28538                                           ! Debug: list int = const $11 (used reg = )
28539 75FC           B8                   0011  mov	ax,*$11
28540 75FF           50                         push	ax
28541                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28542 7600           FF76         FC            push	-4[bp]
28543                                           ! Debug: func () void = outb+0 (used reg = )
28544 7603           E8         05F8            call	_outb
28545 7606           83C4                   04  add	sp,*4
28546                                           !BCC_EOS
28547                                           ! 3949         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28548                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28549 7609           8B46         08            mov	ax,8[bp]
28550                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28551                                           ! Debug: list unsigned int = ax-7 (used reg = )
28552 760C           05                   FFF9  add	ax,*-7
28553 760F           50                         push	ax
28554                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28555 7610           FF76         06            push	6[bp]
28556                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28557 7613           E8         057C            call	_read_byte
28558 7616           83C4                   04  add	sp,*4
28559                                           ! Debug: list unsigned char = al+0 (used reg = )
28560 7619           30E4                       xor	ah,ah
28561 761B           50                         push	ax
28562                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28563 761C           8B46         FC            mov	ax,-4[bp]
28564                                           ! Debug: list unsigned int = ax+1 (used reg = )
28565 761F           40                         inc	ax
28566 7620           50                         push	ax
28567                                           ! Debug: func () void = outb+0 (used reg = )
28568 7621           E8         05DA            call	_outb
28569 7624           83C4                   04  add	sp,*4
28570                                           !BCC_EOS
28571                                           ! 3950         ar_index = read_byte(ES, addr1 + 0x03);
28572                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28573 7627           8B46         F8            mov	ax,-8[bp]
28574                                           ! Debug: list unsigned int = ax+3 (used reg = )
28575 762A           05                   0003  add	ax,*3
28576 762D           50                         push	ax
28577                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28578 762E           FF76         06            push	6[bp]
28579                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28580 7631           E8         055E            call	_read_byte
28581 7634           83C4                   04  add	sp,*4
28582                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28583 7637           30E4                       xor	ah,ah
28584 7639           8946         F6            mov	-$A[bp],ax
28585                                           !BCC_EOS
28586                                           ! 3951         inb(0x3da);
28587                                           ! Debug: list int = const $3DA (used reg = )
28588 763C           B8                   03DA  mov	ax,#$3DA
28589 763F           50                         push	ax
28590                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28591 7640           E8         05A5            call	_inb
28592 7643           44                         inc	sp
28593 7644           44                         inc	sp
28594                                           !BCC_EOS
28595                                           ! 3952         for(i=0;i<=0x13;i++) {
28596                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28597 7645           31C0                       xor	ax,ax
28598 7647           8946         FE            mov	-2[bp],ax
28599                                           !BCC_EOS
28600                                           !BCC_EOS
28601 764A           EB           3C            jmp .281
28602                       0000764C            .282:
28603                                           ! 3953             outb(0x3c0, i | (ar_index & 0x20));
28604                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28605 764C           8A46         F6            mov	al,-$A[bp]
28606 764F           24                     20  and	al,*$20
28607                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28608                                           ! Debug: expression subtree swapping
28609 7651           30E4                       xor	ah,ah
28610 7653           0B46         FE            or	ax,-2[bp]
28611                                           ! Debug: list unsigned int = ax+0 (used reg = )
28612 7656           50                         push	ax
28613                                           ! Debug: list int = const $3C0 (used reg = )
28614 7657           B8                   03C0  mov	ax,#$3C0
28615 765A           50                         push	ax
28616                                           ! Debug: func () void = outb+0 (used reg = )
28617 765B           E8         05A0            call	_outb
28618 765E           83C4                   04  add	sp,*4
28619                                           !BCC_EOS
28620                                           ! 3954             outb(0x3c0, read_byte(ES, BX)); BX++;
28621                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28622 7661           FF76         08            push	8[bp]
28623                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28624 7664           FF76         06            push	6[bp]
28625                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28626 7667           E8         0528            call	_read_byte
28627 766A           83C4                   04  add	sp,*4
28628                                           ! Debug: list unsigned char = al+0 (used reg = )
28629 766D           30E4                       xor	ah,ah
28630 766F           50                         push	ax
28631                                           ! Debug: list int = const $3C0 (used reg = )
28632 7670           B8                   03C0  mov	ax,#$3C0
28633 7673           50                         push	ax
28634                                           ! Debug: func () void = outb+0 (used reg = )
28635 7674           E8         0587            call	_outb
28636 7677           83C4                   04  add	sp,*4
28637                                           !BCC_EOS
28638                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28639 767A           8B46         08            mov	ax,8[bp]
28640 767D           40                         inc	ax
28641 767E           8946         08            mov	8[bp],ax
28642                                           !BCC_EOS
28643                                           ! 3955         }
28644                                           ! 3956         outb(0x3c0, ar_index);
28645                       00007681            .280:
28646                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28647 7681           8B46         FE            mov	ax,-2[bp]
28648 7684           40                         inc	ax
28649 7685           8946         FE            mov	-2[bp],ax
28650                       00007688            .281:
28651                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28652 7688           8B46         FE            mov	ax,-2[bp]
28653 768B           3D                   0013  cmp	ax,*$13
28654 768E           76           BC            jbe	.282
28655                       00007690            .283:
28656                       00007690            .27F:
28657                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28658 7690           FF76         F6            push	-$A[bp]
28659                                           ! Debug: list int = const $3C0 (used reg = )
28660 7693           B8                   03C0  mov	ax,#$3C0
28661 7696           50                         push	ax
28662                                           ! Debug: func () void = outb+0 (used reg = )
28663 7697           E8         0564            call	_outb
28664 769A           83C4                   04  add	sp,*4
28665                                           !BCC_EOS
28666                                           ! 3957         inb(0x3da);
28667                                           ! Debug: list int = const $3DA (used reg = )
28668 769D           B8                   03DA  mov	ax,#$3DA
28669 76A0           50                         push	ax
28670                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28671 76A1           E8         0544            call	_inb
28672 76A4           44                         inc	sp
28673 76A5           44                         inc	sp
28674                                           !BCC_EOS
28675                                           ! 3958         for(i=0;i<=8;i++) {
28676                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28677 76A6           31C0                       xor	ax,ax
28678 76A8           8946         FE            mov	-2[bp],ax
28679                                           !BCC_EOS
28680                                           !BCC_EOS
28681 76AB           EB           34            jmp .286
28682                       000076AD            .287:
28683                                           ! 3959             outb(0x3ce,i);
28684                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28685 76AD           FF76         FE            push	-2[bp]
28686                                           ! Debug: list int = const $3CE (used reg = )
28687 76B0           B8                   03CE  mov	ax,#$3CE
28688 76B3           50                         push	ax
28689                                           ! Debug: func () void = outb+0 (used reg = )
28690 76B4           E8         0547            call	_outb
28691 76B7           83C4                   04  add	sp,*4
28692                                           !BCC_EOS
28693                                           ! 3960             outb(0x3cf, read_byte(ES, BX)); BX++;
28694                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28695 76BA           FF76         08            push	8[bp]
28696                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28697 76BD           FF76         06            push	6[bp]
28698                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28699 76C0           E8         04CF            call	_read_byte
28700 76C3           83C4                   04  add	sp,*4
28701                                           ! Debug: list unsigned char = al+0 (used reg = )
28702 76C6           30E4                       xor	ah,ah
28703 76C8           50                         push	ax
28704                                           ! Debug: list int = const $3CF (used reg = )
28705 76C9           B8                   03CF  mov	ax,#$3CF
28706 76CC           50                         push	ax
28707                                           ! Debug: func () void = outb+0 (used reg = )
28708 76CD           E8         052E            call	_outb
28709 76D0           83C4                   04  add	sp,*4
28710                                           !BCC_EOS
28711                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28712 76D3           8B46         08            mov	ax,8[bp]
28713 76D6           40                         inc	ax
28714 76D7           8946         08            mov	8[bp],ax
28715                                           !BCC_EOS
28716                                           ! 3961         }
28717                                           ! 3962         BX += 2;
28718                       000076DA            .285:
28719                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28720 76DA           8B46         FE            mov	ax,-2[bp]
28721 76DD           40                         inc	ax
28722 76DE           8946         FE            mov	-2[bp],ax
28723                       000076E1            .286:
28724                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28725 76E1           8B46         FE            mov	ax,-2[bp]
28726 76E4           3D                   0008  cmp	ax,*8
28727 76E7           76           C4            jbe	.287
28728                       000076E9            .288:
28729                       000076E9            .284:
28730                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28731 76E9           8B46         08            mov	ax,8[bp]
28732 76EC           40                         inc	ax
28733 76ED           40                         inc	ax
28734 76EE           8946         08            mov	8[bp],ax
28735                                           !BCC_EOS
28736                                           ! 3963         BX += 4;
28737                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28738 76F1           8B46         08            mov	ax,8[bp]
28739 76F4           05                   0004  add	ax,*4
28740 76F7           8946         08            mov	8[bp],ax
28741                                           !BCC_EOS
28742                                           ! 3964         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28743                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28744 76FA           FF76         F8            push	-8[bp]
28745                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28746 76FD           FF76         06            push	6[bp]
28747                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28748 7700           E8         048F            call	_read_byte
28749 7703           83C4                   04  add	sp,*4
28750                                           ! Debug: list unsigned char = al+0 (used reg = )
28751 7706           30E4                       xor	ah,ah
28752 7708           50                         push	ax
28753                                           ! Debug: list int = const $3C4 (used reg = )
28754 7709           B8                   03C4  mov	ax,#$3C4
28755 770C           50                         push	ax
28756                                           ! Debug: func () void = outb+0 (used reg = )
28757 770D           E8         04EE            call	_outb
28758 7710           83C4                   04  add	sp,*4
28759                                           !BCC_EOS
28760                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28761 7713           8B46         F8            mov	ax,-8[bp]
28762 7716           40                         inc	ax
28763 7717           8946         F8            mov	-8[bp],ax
28764                                           !BCC_EOS
28765                                           ! 3965         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28766                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28767 771A           FF76         F8            push	-8[bp]
28768                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28769 771D           FF76         06            push	6[bp]
28770                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28771 7720           E8         046F            call	_read_byte
28772 7723           83C4                   04  add	sp,*4
28773                                           ! Debug: list unsigned char = al+0 (used reg = )
28774 7726           30E4                       xor	ah,ah
28775 7728           50                         push	ax
28776                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28777 7729           FF76         FC            push	-4[bp]
28778                                           ! Debug: func () void = outb+0 (used reg = )
28779 772C           E8         04CF            call	_outb
28780 772F           83C4                   04  add	sp,*4
28781                                           !BCC_EOS
28782                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28783 7732           8B46         F8            mov	ax,-8[bp]
28784 7735           40                         inc	ax
28785 7736           8946         F8            mov	-8[bp],ax
28786                                           !BCC_EOS
28787                                           ! 3966         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28788                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28789 7739           FF76         F8            push	-8[bp]
28790                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28791 773C           FF76         06            push	6[bp]
28792                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28793 773F           E8         0450            call	_read_byte
28794 7742           83C4                   04  add	sp,*4
28795                                           ! Debug: list unsigned char = al+0 (used reg = )
28796 7745           30E4                       xor	ah,ah
28797 7747           50                         push	ax
28798                                           ! Debug: list int = const $3CE (used reg = )
28799 7748           B8                   03CE  mov	ax,#$3CE
28800 774B           50                         push	ax
28801                                           ! Debug: func () void = outb+0 (used reg = )
28802 774C           E8         04AF            call	_outb
28803 774F           83C4                   04  add	sp,*4
28804                                           !BCC_EOS
28805                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28806 7752           8B46         F8            mov	ax,-8[bp]
28807 7755           40                         inc	ax
28808 7756           8946         F8            mov	-8[bp],ax
28809                                           !BCC_EOS
28810                                           ! 3967         addr1++;
28811                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28812 7759           8B46         F8            mov	ax,-8[bp]
28813 775C           40                         inc	ax
28814 775D           8946         F8            mov	-8[bp],ax
28815                                           !BCC_EOS
28816                                           ! 3968         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28817                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28818 7760           FF76         F8            push	-8[bp]
28819                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28820 7763           FF76         06            push	6[bp]
28821                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28822 7766           E8         0429            call	_read_byte
28823 7769           83C4                   04  add	sp,*4
28824                                           ! Debug: list unsigned char = al+0 (used reg = )
28825 776C           30E4                       xor	ah,ah
28826 776E           50                         push	ax
28827                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28828 776F           8B46         FC            mov	ax,-4[bp]
28829                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28830                                           ! Debug: list unsigned int = ax+6 (used reg = )
28831 7772           05                   0006  add	ax,*6
28832 7775           50                         push	ax
28833                                           ! Debug: func () void = outb+0 (used reg = )
28834 7776           E8         0485            call	_outb
28835 7779           83C4                   04  add	sp,*4
28836                                           !BCC_EOS
28837                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28838 777C           8B46         F8            mov	ax,-8[bp]
28839 777F           40                         inc	ax
28840 7780           8946         F8            mov	-8[bp],ax
28841                                           !BCC_EOS
28842                                           ! 3969     }
28843                                           ! 3970     if (CX & 2) {
28844                       00007783            .26F:
28845                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28846 7783           8A46         04            mov	al,4[bp]
28847 7786           24                     02  and	al,*2
28848 7788           84C0                       test	al,al
28849 778A         0F84         0270            beq 	.289
28850                       0000778E            .28A:
28851                                           ! 3971         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28852                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28853 778E           FF76         08            push	8[bp]
28854                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28855 7791           FF76         06            push	6[bp]
28856                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28857 7794           E8         03FB            call	_read_byte
28858 7797           83C4                   04  add	sp,*4
28859                                           ! Debug: list unsigned char = al+0 (used reg = )
28860 779A           30E4                       xor	ah,ah
28861 779C           50                         push	ax
28862                                           ! Debug: list int = const $49 (used reg = )
28863 779D           B8                   0049  mov	ax,*$49
28864 77A0           50                         push	ax
28865                                           ! Debug: list int = const $40 (used reg = )
28866 77A1           B8                   0040  mov	ax,*$40
28867 77A4           50                         push	ax
28868                                           ! Debug: func () void = write_byte+0 (used reg = )
28869 77A5           E8         0410            call	_write_byte
28870 77A8           83C4                   06  add	sp,*6
28871                                           !BCC_EOS
28872                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28873 77AB           8B46         08            mov	ax,8[bp]
28874 77AE           40                         inc	ax
28875 77AF           8946         08            mov	8[bp],ax
28876                                           !BCC_EOS
28877                                           ! 3972         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28878                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28879 77B2           FF76         08            push	8[bp]
28880                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28881 77B5           FF76         06            push	6[bp]
28882                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28883 77B8           E8         03EA            call	_read_word
28884 77BB           83C4                   04  add	sp,*4
28885                                           ! Debug: list unsigned short = ax+0 (used reg = )
28886 77BE           50                         push	ax
28887                                           ! Debug: list int = const $4A (used reg = )
28888 77BF           B8                   004A  mov	ax,*$4A
28889 77C2           50                         push	ax
28890                                           ! Debug: list int = const $40 (used reg = )
28891 77C3           B8                   0040  mov	ax,*$40
28892 77C6           50                         push	ax
28893                                           ! Debug: func () void = write_word+0 (used reg = )
28894 77C7           E8         0406            call	_write_word
28895 77CA           83C4                   06  add	sp,*6
28896                                           !BCC_EOS
28897                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28898 77CD           8B46         08            mov	ax,8[bp]
28899 77D0           40                         inc	ax
28900 77D1           40                         inc	ax
28901 77D2           8946         08            mov	8[bp],ax
28902                                           !BCC_EOS
28903                                           ! 3973         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28904                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28905 77D5           FF76         08            push	8[bp]
28906                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28907 77D8           FF76         06            push	6[bp]
28908                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28909 77DB           E8         03C7            call	_read_word
28910 77DE           83C4                   04  add	sp,*4
28911                                           ! Debug: list unsigned short = ax+0 (used reg = )
28912 77E1           50                         push	ax
28913                                           ! Debug: list int = const $4C (used reg = )
28914 77E2           B8                   004C  mov	ax,*$4C
28915 77E5           50                         push	ax
28916                                           ! Debug: list int = const $40 (used reg = )
28917 77E6           B8                   0040  mov	ax,*$40
28918 77E9           50                         push	ax
28919                                           ! Debug: func () void = write_word+0 (used reg = )
28920 77EA           E8         03E3            call	_write_word
28921 77ED           83C4                   06  add	sp,*6
28922                                           !BCC_EOS
28923                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28924 77F0           8B46         08            mov	ax,8[bp]
28925 77F3           40                         inc	ax
28926 77F4           40                         inc	ax
28927 77F5           8946         08            mov	8[bp],ax
28928                                           !BCC_EOS
28929                                           ! 3974         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28930                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28931 77F8           FF76         08            push	8[bp]
28932                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28933 77FB           FF76         06            push	6[bp]
28934                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28935 77FE           E8         03A4            call	_read_word
28936 7801           83C4                   04  add	sp,*4
28937                                           ! Debug: list unsigned short = ax+0 (used reg = )
28938 7804           50                         push	ax
28939                                           ! Debug: list int = const $63 (used reg = )
28940 7805           B8                   0063  mov	ax,*$63
28941 7808           50                         push	ax
28942                                           ! Debug: list int = const $40 (used reg = )
28943 7809           B8                   0040  mov	ax,*$40
28944 780C           50                         push	ax
28945                                           ! Debug: func () void = write_word+0 (used reg = )
28946 780D           E8         03C0            call	_write_word
28947 7810           83C4                   06  add	sp,*6
28948                                           !BCC_EOS
28949                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28950 7813           8B46         08            mov	ax,8[bp]
28951 7816           40                         inc	ax
28952 7817           40                         inc	ax
28953 7818           8946         08            mov	8[bp],ax
28954                                           !BCC_EOS
28955                                           ! 3975         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28956                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28957 781B           FF76         08            push	8[bp]
28958                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28959 781E           FF76         06            push	6[bp]
28960                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28961 7821           E8         036E            call	_read_byte
28962 7824           83C4                   04  add	sp,*4
28963                                           ! Debug: list unsigned char = al+0 (used reg = )
28964 7827           30E4                       xor	ah,ah
28965 7829           50                         push	ax
28966                                           ! Debug: list int = const $84 (used reg = )
28967 782A           B8                   0084  mov	ax,#$84
28968 782D           50                         push	ax
28969                                           ! Debug: list int = const $40 (used reg = )
28970 782E           B8                   0040  mov	ax,*$40
28971 7831           50                         push	ax
28972                                           ! Debug: func () void = write_byte+0 (used reg = )
28973 7832           E8         0383            call	_write_byte
28974 7835           83C4                   06  add	sp,*6
28975                                           !BCC_EOS
28976                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28977 7838           8B46         08            mov	ax,8[bp]
28978 783B           40                         inc	ax
28979 783C           8946         08            mov	8[bp],ax
28980                                           !BCC_EOS
28981                                           ! 3976         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
28982                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28983 783F           FF76         08            push	8[bp]
28984                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28985 7842           FF76         06            push	6[bp]
28986                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28987 7845           E8         035D            call	_read_word
28988 7848           83C4                   04  add	sp,*4
28989                                           ! Debug: list unsigned short = ax+0 (used reg = )
28990 784B           50                         push	ax
28991                                           ! Debug: list int = const $85 (used reg = )
28992 784C           B8                   0085  mov	ax,#$85
28993 784F           50                         push	ax
28994                                           ! Debug: list int = const $40 (used reg = )
28995 7850           B8                   0040  mov	ax,*$40
28996 7853           50                         push	ax
28997                                           ! Debug: func () void = write_word+0 (used reg = )
28998 7854           E8         0379            call	_write_word
28999 7857           83C4                   06  add	sp,*6
29000                                           !BCC_EOS
29001                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29002 785A           8B46         08            mov	ax,8[bp]
29003 785D           40                         inc	ax
29004 785E           40                         inc	ax
29005 785F           8946         08            mov	8[bp],ax
29006                                           !BCC_EOS
29007                                           ! 3977         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29008                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29009 7862           FF76         08            push	8[bp]
29010                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29011 7865           FF76         06            push	6[bp]
29012                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29013 7868           E8         0327            call	_read_byte
29014 786B           83C4                   04  add	sp,*4
29015                                           ! Debug: list unsigned char = al+0 (used reg = )
29016 786E           30E4                       xor	ah,ah
29017 7870           50                         push	ax
29018                                           ! Debug: list int = const $87 (used reg = )
29019 7871           B8                   0087  mov	ax,#$87
29020 7874           50                         push	ax
29021                                           ! Debug: list int = const $40 (used reg = )
29022 7875           B8                   0040  mov	ax,*$40
29023 7878           50                         push	ax
29024                                           ! Debug: func () void = write_byte+0 (used reg = )
29025 7879           E8         033C            call	_write_byte
29026 787C           83C4                   06  add	sp,*6
29027                                           !BCC_EOS
29028                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29029 787F           8B46         08            mov	ax,8[bp]
29030 7882           40                         inc	ax
29031 7883           8946         08            mov	8[bp],ax
29032                                           !BCC_EOS
29033                                           ! 3978         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29034                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29035 7886           FF76         08            push	8[bp]
29036                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29037 7889           FF76         06            push	6[bp]
29038                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29039 788C           E8         0303            call	_read_byte
29040 788F           83C4                   04  add	sp,*4
29041                                           ! Debug: list unsigned char = al+0 (used reg = )
29042 7892           30E4                       xor	ah,ah
29043 7894           50                         push	ax
29044                                           ! Debug: list int = const $88 (used reg = )
29045 7895           B8                   0088  mov	ax,#$88
29046 7898           50                         push	ax
29047                                           ! Debug: list int = const $40 (used reg = )
29048 7899           B8                   0040  mov	ax,*$40
29049 789C           50                         push	ax
29050                                           ! Debug: func () void = write_byte+0 (used reg = )
29051 789D           E8         0318            call	_write_byte
29052 78A0           83C4                   06  add	sp,*6
29053                                           !BCC_EOS
29054                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29055 78A3           8B46         08            mov	ax,8[bp]
29056 78A6           40                         inc	ax
29057 78A7           8946         08            mov	8[bp],ax
29058                                           !BCC_EOS
29059                                           ! 3979         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29060                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29061 78AA           FF76         08            push	8[bp]
29062                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29063 78AD           FF76         06            push	6[bp]
29064                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29065 78B0           E8         02DF            call	_read_byte
29066 78B3           83C4                   04  add	sp,*4
29067                                           ! Debug: list unsigned char = al+0 (used reg = )
29068 78B6           30E4                       xor	ah,ah
29069 78B8           50                         push	ax
29070                                           ! Debug: list int = const $89 (used reg = )
29071 78B9           B8                   0089  mov	ax,#$89
29072 78BC           50                         push	ax
29073                                           ! Debug: list int = const $40 (used reg = )
29074 78BD           B8                   0040  mov	ax,*$40
29075 78C0           50                         push	ax
29076                                           ! Debug: func () void = write_byte+0 (used reg = )
29077 78C1           E8         02F4            call	_write_byte
29078 78C4           83C4                   06  add	sp,*6
29079                                           !BCC_EOS
29080                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29081 78C7           8B46         08            mov	ax,8[bp]
29082 78CA           40                         inc	ax
29083 78CB           8946         08            mov	8[bp],ax
29084                                           !BCC_EOS
29085                                           ! 3980         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29086                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29087 78CE           FF76         08            push	8[bp]
29088                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29089 78D1           FF76         06            push	6[bp]
29090                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29091 78D4           E8         02CE            call	_read_word
29092 78D7           83C4                   04  add	sp,*4
29093                                           ! Debug: list unsigned short = ax+0 (used reg = )
29094 78DA           50                         push	ax
29095                                           ! Debug: list int = const $60 (used reg = )
29096 78DB           B8                   0060  mov	ax,*$60
29097 78DE           50                         push	ax
29098                                           ! Debug: list int = const $40 (used reg = )
29099 78DF           B8                   0040  mov	ax,*$40
29100 78E2           50                         push	ax
29101                                           ! Debug: func () void = write_word+0 (used reg = )
29102 78E3           E8         02EA            call	_write_word
29103 78E6           83C4                   06  add	sp,*6
29104                                           !BCC_EOS
29105                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29106 78E9           8B46         08            mov	ax,8[bp]
29107 78EC           40                         inc	ax
29108 78ED           40                         inc	ax
29109 78EE           8946         08            mov	8[bp],ax
29110                                           !BCC_EOS
29111                                           ! 3981         for(i=0;i<8;i++) {
29112                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29113 78F1           31C0                       xor	ax,ax
29114 78F3           8946         FE            mov	-2[bp],ax
29115                                           !BCC_EOS
29116                                           !BCC_EOS
29117 78F6           EB           2F            jmp .28D
29118                       000078F8            .28E:
29119                                           ! 3982             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29120                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29121 78F8           FF76         08            push	8[bp]
29122                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29123 78FB           FF76         06            push	6[bp]
29124                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29125 78FE           E8         02A4            call	_read_word
29126 7901           83C4                   04  add	sp,*4
29127                                           ! Debug: list unsigned short = ax+0 (used reg = )
29128 7904           50                         push	ax
29129                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29130                                           ! Debug: expression subtree swapping
29131 7905           8B46         FE            mov	ax,-2[bp]
29132 7908           D1E0                       shl	ax,*1
29133                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29134                                           ! Debug: expression subtree swapping
29135                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29136 790A           05                   0050  add	ax,*$50
29137 790D           50                         push	ax
29138                                           ! Debug: list int = const $40 (used reg = )
29139 790E           B8                   0040  mov	ax,*$40
29140 7911           50                         push	ax
29141                                           ! Debug: func () void = write_word+0 (used reg = )
29142 7912           E8         02BB            call	_write_word
29143 7915           83C4                   06  add	sp,*6
29144                                           !BCC_EOS
29145                                           ! 3983        
29146                                           ! 3983      BX += 2;
29147                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29148 7918           8B46         08            mov	ax,8[bp]
29149 791B           40                         inc	ax
29150 791C           40                         inc	ax
29151 791D           8946         08            mov	8[bp],ax
29152                                           !BCC_EOS
29153                                           ! 3984         }
29154                                           ! 3985         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29155                       00007920            .28C:
29156                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29157 7920           8B46         FE            mov	ax,-2[bp]
29158 7923           40                         inc	ax
29159 7924           8946         FE            mov	-2[bp],ax
29160                       00007927            .28D:
29161                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29162 7927           8B46         FE            mov	ax,-2[bp]
29163 792A           3D                   0008  cmp	ax,*8
29164 792D           72           C9            jb 	.28E
29165                       0000792F            .28F:
29166                       0000792F            .28B:
29167                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29168 792F           FF76         08            push	8[bp]
29169                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29170 7932           FF76         06            push	6[bp]
29171                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29172 7935           E8         026D            call	_read_word
29173 7938           83C4                   04  add	sp,*4
29174                                           ! Debug: list unsigned short = ax+0 (used reg = )
29175 793B           50                         push	ax
29176                                           ! Debug: list int = const $4E (used reg = )
29177 793C           B8                   004E  mov	ax,*$4E
29178 793F           50                         push	ax
29179                                           ! Debug: list int = const $40 (used reg = )
29180 7940           B8                   0040  mov	ax,*$40
29181 7943           50                         push	ax
29182                                           ! Debug: func () void = write_word+0 (used reg = )
29183 7944           E8         0289            call	_write_word
29184 7947           83C4                   06  add	sp,*6
29185                                           !BCC_EOS
29186                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29187 794A           8B46         08            mov	ax,8[bp]
29188 794D           40                         inc	ax
29189 794E           40                         inc	ax
29190 794F           8946         08            mov	8[bp],ax
29191                                           !BCC_EOS
29192                                           ! 3986         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29193                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29194 7952           FF76         08            push	8[bp]
29195                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29196 7955           FF76         06            push	6[bp]
29197                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29198 7958           E8         0237            call	_read_byte
29199 795B           83C4                   04  add	sp,*4
29200                                           ! Debug: list unsigned char = al+0 (used reg = )
29201 795E           30E4                       xor	ah,ah
29202 7960           50                         push	ax
29203                                           ! Debug: list int = const $62 (used reg = )
29204 7961           B8                   0062  mov	ax,*$62
29205 7964           50                         push	ax
29206                                           ! Debug: list int = const $40 (used reg = )
29207 7965           B8                   0040  mov	ax,*$40
29208 7968           50                         push	ax
29209                                           ! Debug: func () void = write_byte+0 (used reg = )
29210 7969           E8         024C            call	_write_byte
29211 796C           83C4                   06  add	sp,*6
29212                                           !BCC_EOS
29213                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29214 796F           8B46         08            mov	ax,8[bp]
29215 7972           40                         inc	ax
29216 7973           8946         08            mov	8[bp],ax
29217                                           !BCC_EOS
29218                                           ! 3987         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29219                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29220 7976           FF76         08            push	8[bp]
29221                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29222 7979           FF76         06            push	6[bp]
29223                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29224 797C           E8         0226            call	_read_word
29225 797F           83C4                   04  add	sp,*4
29226                                           ! Debug: list unsigned short = ax+0 (used reg = )
29227 7982           50                         push	ax
29228                                           ! Debug: list int = const $7C (used reg = )
29229 7983           B8                   007C  mov	ax,*$7C
29230 7986           50                         push	ax
29231                                           ! Debug: list int = const 0 (used reg = )
29232 7987           31C0                       xor	ax,ax
29233 7989           50                         push	ax
29234                                           ! Debug: func () void = write_word+0 (used reg = )
29235 798A           E8         0243            call	_write_word
29236 798D           83C4                   06  add	sp,*6
29237                                           !BCC_EOS
29238                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29239 7990           8B46         08            mov	ax,8[bp]
29240 7993           40                         inc	ax
29241 7994           40                         inc	ax
29242 7995           8946         08            mov	8[bp],ax
29243                                           !BCC_EOS
29244                                           ! 3988         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29245                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29246 7998           FF76         08            push	8[bp]
29247                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29248 799B           FF76         06            push	6[bp]
29249                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29250 799E           E8         0204            call	_read_word
29251 79A1           83C4                   04  add	sp,*4
29252                                           ! Debug: list unsigned short = ax+0 (used reg = )
29253 79A4           50                         push	ax
29254                                           ! Debug: list int = const $7E (used reg = )
29255 79A5           B8                   007E  mov	ax,*$7E
29256 79A8           50                         push	ax
29257                                           ! Debug: list int = const 0 (used reg = )
29258 79A9           31C0                       xor	ax,ax
29259 79AB           50                         push	ax
29260                                           ! Debug: func () void = write_word+0 (used reg = )
29261 79AC           E8         0221            call	_write_word
29262 79AF           83C4                   06  add	sp,*6
29263                                           !BCC_EOS
29264                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29265 79B2           8B46         08            mov	ax,8[bp]
29266 79B5           40                         inc	ax
29267 79B6           40                         inc	ax
29268 79B7           8946         08            mov	8[bp],ax
29269                                           !BCC_EOS
29270                                           ! 3989         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29271                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29272 79BA           FF76         08            push	8[bp]
29273                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29274 79BD           FF76         06            push	6[bp]
29275                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29276 79C0           E8         01E2            call	_read_word
29277 79C3           83C4                   04  add	sp,*4
29278                                           ! Debug: list unsigned short = ax+0 (used reg = )
29279 79C6           50                         push	ax
29280                                           ! Debug: list int = const $10C (used reg = )
29281 79C7           B8                   010C  mov	ax,#$10C
29282 79CA           50                         push	ax
29283                                           ! Debug: list int = const 0 (used reg = )
29284 79CB           31C0                       xor	ax,ax
29285 79CD           50                         push	ax
29286                                           ! Debug: func () void = write_word+0 (used reg = )
29287 79CE           E8         01FF            call	_write_word
29288 79D1           83C4                   06  add	sp,*6
29289                                           !BCC_EOS
29290                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29291 79D4           8B46         08            mov	ax,8[bp]
29292 79D7           40                         inc	ax
29293 79D8           40                         inc	ax
29294 79D9           8946         08            mov	8[bp],ax
29295                                           !BCC_EOS
29296                                           ! 3990         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29297                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29298 79DC           FF76         08            push	8[bp]
29299                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29300 79DF           FF76         06            push	6[bp]
29301                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29302 79E2           E8         01C0            call	_read_word
29303 79E5           83C4                   04  add	sp,*4
29304                                           ! Debug: list unsigned short = ax+0 (used reg = )
29305 79E8           50                         push	ax
29306                                           ! Debug: list int = const $10E (used reg = )
29307 79E9           B8                   010E  mov	ax,#$10E
29308 79EC           50                         push	ax
29309                                           ! Debug: list int = const 0 (used reg = )
29310 79ED           31C0                       xor	ax,ax
29311 79EF           50                         push	ax
29312                                           ! Debug: func () void = write_word+0 (used reg = )
29313 79F0           E8         01DD            call	_write_word
29314 79F3           83C4                   06  add	sp,*6
29315                                           !BCC_EOS
29316                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29317 79F6           8B46         08            mov	ax,8[bp]
29318 79F9           40                         inc	ax
29319 79FA           40                         inc	ax
29320 79FB           8946         08            mov	8[bp],ax
29321                                           !BCC_EOS
29322                                           ! 3991     }
29323                                           ! 3992     if (CX & 4) {
29324                       000079FE            .289:
29325                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29326 79FE           8A46         04            mov	al,4[bp]
29327 7A01           24                     04  and	al,*4
29328 7A03           84C0                       test	al,al
29329 7A05         0F84         0096            beq 	.290
29330                       00007A09            .291:
29331                                           ! 3993         BX++;
29332                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29333 7A09           8B46         08            mov	ax,8[bp]
29334 7A0C           40                         inc	ax
29335 7A0D           8946         08            mov	8[bp],ax
29336                                           !BCC_EOS
29337                                           ! 3994         v = read_byte(ES, BX); BX++;
29338                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29339 7A10           FF76         08            push	8[bp]
29340                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29341 7A13           FF76         06            push	6[bp]
29342                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29343 7A16           E8         0179            call	_read_byte
29344 7A19           83C4                   04  add	sp,*4
29345                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29346 7A1C           30E4                       xor	ah,ah
29347 7A1E           8946         FA            mov	-6[bp],ax
29348                                           !BCC_EOS
29349                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29350 7A21           8B46         08            mov	ax,8[bp]
29351 7A24           40                         inc	ax
29352 7A25           8946         08            mov	8[bp],ax
29353                                           !BCC_EOS
29354                                           ! 3995         outb(0x3c6, read_byte(ES, BX)); BX++;
29355                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29356 7A28           FF76         08            push	8[bp]
29357                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29358 7A2B           FF76         06            push	6[bp]
29359                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29360 7A2E           E8         0161            call	_read_byte
29361 7A31           83C4                   04  add	sp,*4
29362                                           ! Debug: list unsigned char = al+0 (used reg = )
29363 7A34           30E4                       xor	ah,ah
29364 7A36           50                         push	ax
29365                                           ! Debug: list int = const $3C6 (used reg = )
29366 7A37           B8                   03C6  mov	ax,#$3C6
29367 7A3A           50                         push	ax
29368                                           ! Debug: func () void = outb+0 (used reg = )
29369 7A3B           E8         01C0            call	_outb
29370 7A3E           83C4                   04  add	sp,*4
29371                                           !BCC_EOS
29372                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29373 7A41           8B46         08            mov	ax,8[bp]
29374 7A44           40                         inc	ax
29375 7A45           8946         08            mov	8[bp],ax
29376                                           !BCC_EOS
29377                                           ! 3996         outb(0x3c8,0x00);
29378                                           ! Debug: list int = const 0 (used reg = )
29379 7A48           31C0                       xor	ax,ax
29380 7A4A           50                         push	ax
29381                                           ! Debug: list int = const $3C8 (used reg = )
29382 7A4B           B8                   03C8  mov	ax,#$3C8
29383 7A4E           50                         push	ax
29384                                           ! Debug: func () void = outb+0 (used reg = )
29385 7A4F           E8         01AC            call	_outb
29386 7A52           83C4                   04  add	sp,*4
29387                                           !BCC_EOS
29388                                           ! 3997         for(i=0;i<256*3;i++) {
29389                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29390 7A55           31C0                       xor	ax,ax
29391 7A57           8946         FE            mov	-2[bp],ax
29392                                           !BCC_EOS
29393                                           !BCC_EOS
29394 7A5A           EB           27            jmp .294
29395                       00007A5C            .295:
29396                                           ! 3998             outb(0x3c9, read_byte(ES, BX)); BX++;
29397                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29398 7A5C           FF76         08            push	8[bp]
29399                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29400 7A5F           FF76         06            push	6[bp]
29401                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29402 7A62           E8         012D            call	_read_byte
29403 7A65           83C4                   04  add	sp,*4
29404                                           ! Debug: list unsigned char = al+0 (used reg = )
29405 7A68           30E4                       xor	ah,ah
29406 7A6A           50                         push	ax
29407                                           ! Debug: list int = const $3C9 (used reg = )
29408 7A6B           B8                   03C9  mov	ax,#$3C9
29409 7A6E           50                         push	ax
29410                                           ! Debug: func () void = outb+0 (used reg = )
29411 7A6F           E8         018C            call	_outb
29412 7A72           83C4                   04  add	sp,*4
29413                                           !BCC_EOS
29414                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29415 7A75           8B46         08            mov	ax,8[bp]
29416 7A78           40                         inc	ax
29417 7A79           8946         08            mov	8[bp],ax
29418                                           !BCC_EOS
29419                                           ! 3999         }
29420                                           ! 4000         BX++;
29421                       00007A7C            .293:
29422                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29423 7A7C           8B46         FE            mov	ax,-2[bp]
29424 7A7F           40                         inc	ax
29425 7A80           8946         FE            mov	-2[bp],ax
29426                       00007A83            .294:
29427                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29428 7A83           8B46         FE            mov	ax,-2[bp]
29429 7A86           3D                   0300  cmp	ax,#$300
29430 7A89           72           D1            jb 	.295
29431                       00007A8B            .296:
29432                       00007A8B            .292:
29433                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29434 7A8B           8B46         08            mov	ax,8[bp]
29435 7A8E           40                         inc	ax
29436 7A8F           8946         08            mov	8[bp],ax
29437                                           !BCC_EOS
29438                                           ! 4001         outb(0x3c8, v);
29439                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29440 7A92           FF76         FA            push	-6[bp]
29441                                           ! Debug: list int = const $3C8 (used reg = )
29442 7A95           B8                   03C8  mov	ax,#$3C8
29443 7A98           50                         push	ax
29444                                           ! Debug: func () void = outb+0 (used reg = )
29445 7A99           E8         0162            call	_outb
29446 7A9C           83C4                   04  add	sp,*4
29447                                           !BCC_EOS
29448                                           ! 4002     }
29449                                           ! 4003     return BX;
29450                       00007A9F            .290:
29451 7A9F           8B46         08            mov	ax,8[bp]
29452 7AA2           89EC                       mov	sp,bp
29453 7AA4           5D                         pop	bp
29454 7AA5           C3                         ret
29455                                           !BCC_EOS
29456                                           ! 4004 }
29457                                           ! 4005 static Bit8u find_vga_entry(mode)
29458                                           ! 4006 Bit8u mode;
29459                       00007AA6            _find_vga_entry:
29460                                           !BCC_EOS
29461                                           ! 4007 {
29462                                           ! 4008  Bit8u i,line=0xFF;
29463 7AA6           55                         push	bp
29464 7AA7           89E5                       mov	bp,sp
29465 7AA9           4C                         dec	sp
29466 7AAA           4C                         dec	sp
29467                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29468 7AAB           B0                     FF  mov	al,#$FF
29469 7AAD           8846         FE            mov	-2[bp],al
29470                                           !BCC_EOS
29471                                           ! 4009  for(i=0;i<=15;i++)
29472                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29473 7AB0           30C0                       xor	al,al
29474 7AB2           8846         FF            mov	-1[bp],al
29475                                           !BCC_EOS
29476                                           !BCC_EOS
29477                                           ! 4010   if(vga_modes[i].svgamode==mode)
29478 7AB5           EB           23            jmp .299
29479                       00007AB7            .29A:
29480                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29481 7AB7           8A46         FF            mov	al,-1[bp]
29482 7ABA           30E4                       xor	ah,ah
29483 7ABC           B1                     03  mov	cl,*3
29484 7ABE           D3E0                       shl	ax,cl
29485 7AC0           89C3                       mov	bx,ax
29486                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29487 7AC2           8A87       01FF            mov	al,_vga_modes[bx]
29488 7AC6           3A46         04            cmp	al,4[bp]
29489 7AC9           75           08            jne 	.29B
29490                       00007ACB            .29C:
29491                                           ! 4011    {line=i;
29492                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29493 7ACB           8A46         FF            mov	al,-1[bp]
29494 7ACE           8846         FE            mov	-2[bp],al
29495                                           !BCC_EOS
29496                                           ! 4012     break;
29497 7AD1           EB           0E            jmp .297
29498                                           !BCC_EOS
29499                                           ! 4013    }
29500                                           ! 4014  return line;
29501                       00007AD3            .29B:
29502                       00007AD3            .298:
29503                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29504 7AD3           8A46         FF            mov	al,-1[bp]
29505 7AD6           40                         inc	ax
29506 7AD7           8846         FF            mov	-1[bp],al
29507                       00007ADA            .299:
29508                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29509 7ADA           8A46         FF            mov	al,-1[bp]
29510 7ADD           3C                     0F  cmp	al,*$F
29511 7ADF           76           D6            jbe	.29A
29512                       00007AE1            .29D:
29513                       00007AE1            .297:
29514 7AE1           8A46         FE            mov	al,-2[bp]
29515 7AE4           89EC                       mov	sp,bp
29516 7AE6           5D                         pop	bp
29517 7AE7           C3                         ret
29518                                           !BCC_EOS
29519                                           ! 4015 }
29520                                           ! 4016 static void memsetb(seg,offset,value,count)
29521                                           ! Register BX used in function find_vga_entry
29522                                           ! 4017   Bit16u seg;
29523                       00007AE8            _memsetb:
29524                                           !BCC_EOS
29525                                           ! 4018   Bit16u offset;
29526                                           !BCC_EOS
29527                                           ! 4019   Bit16u value;
29528                                           !BCC_EOS
29529                                           ! 4020   Bit16u count;
29530                                           !BCC_EOS
29531                                           ! 4021 {
29532                                           ! 4022 #asm
29533                                           !BCC_ASM
29534                       00000008            _memsetb.count	set	8
29535                       00000002            _memsetb.seg	set	2
29536                       00000006            _memsetb.value	set	6
29537                       00000004            _memsetb.offset	set	4
29538 7AE8           55                           push bp
29539 7AE9           89E5                         mov bp, sp
29540 7AEB           50                             push ax
29541 7AEC           51                             push cx
29542 7AED           06                             push es
29543 7AEE           57                             push di
29544 7AEF           8B4E         0A                mov cx, 10[bp] ; count
29545 7AF2           83F9                   00      cmp cx, #0x00
29546 7AF5           74           10                je memsetb_end
29547 7AF7           8B46         04                mov ax, 4[bp] ; segment
29548 7AFA           8EC0                           mov es, ax
29549 7AFC           8B46         06                mov ax, 6[bp] ; offset
29550 7AFF           89C7                           mov di, ax
29551 7B01           8A46         08                mov al, 8[bp] ; value
29552 7B04           FC                             cld
29553 7B05           F3                             rep
29554 7B06           AA                              stosb
29555                       00007B07            memsetb_end:
29556 7B07           5F                             pop di
29557 7B08           07                             pop es
29558 7B09           59                             pop cx
29559 7B0A           58                             pop ax
29560 7B0B           5D                           pop bp
29561                                           ! 4046 endasm
29562                                           !BCC_ENDASM
29563                                           ! 4047 }
29564 7B0C           C3                         ret
29565                                           ! 4048 static void memsetw(seg,offset,value,count)
29566                                           ! 4049   Bit16u seg;
29567                       00007B0D            _memsetw:
29568                                           !BCC_EOS
29569                                           ! 4050   Bit16u offset;
29570                                           !BCC_EOS
29571                                           ! 4051   Bit16u value;
29572                                           !BCC_EOS
29573                                           ! 4052   Bit16u count;
29574                                           !BCC_EOS
29575                                           ! 4053 {
29576                                           ! 4054 #asm
29577                                           !BCC_ASM
29578                       00000008            _memsetw.count	set	8
29579                       00000002            _memsetw.seg	set	2
29580                       00000006            _memsetw.value	set	6
29581                       00000004            _memsetw.offset	set	4
29582 7B0D           55                           push bp
29583 7B0E           89E5                         mov bp, sp
29584 7B10           50                             push ax
29585 7B11           51                             push cx
29586 7B12           06                             push es
29587 7B13           57                             push di
29588 7B14           8B4E         0A                mov cx, 10[bp] ; count
29589 7B17           83F9                   00      cmp cx, #0x00
29590 7B1A           74           10                je memsetw_end
29591 7B1C           8B46         04                mov ax, 4[bp] ; segment
29592 7B1F           8EC0                           mov es, ax
29593 7B21           8B46         06                mov ax, 6[bp] ; offset
29594 7B24           89C7                           mov di, ax
29595 7B26           8B46         08                mov ax, 8[bp] ; value
29596 7B29           FC                             cld
29597 7B2A           F3                             rep
29598 7B2B           AB                              stosw
29599                       00007B2C            memsetw_end:
29600 7B2C           5F                             pop di
29601 7B2D           07                             pop es
29602 7B2E           59                             pop cx
29603 7B2F           58                             pop ax
29604 7B30           5D                           pop bp
29605                                           ! 4078 endasm
29606                                           !BCC_ENDASM
29607                                           ! 4079 }
29608 7B31           C3                         ret
29609                                           ! 4080 static void memcpyb(dseg,doffset,sseg,soffset,count)
29610                                           ! 4081   Bit16u dseg;
29611                       00007B32            _memcpyb:
29612                                           !BCC_EOS
29613                                           ! 4082   Bit16u doffset;
29614                                           !BCC_EOS
29615                                           ! 4083   Bit16u sseg;
29616                                           !BCC_EOS
29617                                           ! 4084   Bit16u soffset;
29618                                           !BCC_EOS
29619                                           ! 4085   Bit16u count;
29620                                           !BCC_EOS
29621                                           ! 4086 {
29622                                           ! 4087 #asm
29623                                           !BCC_ASM
29624                       0000000A            _memcpyb.count	set	$A
29625                       00000006            _memcpyb.sseg	set	6
29626                       00000008            _memcpyb.soffset	set	8
29627                       00000002            _memcpyb.dseg	set	2
29628                       00000004            _memcpyb.doffset	set	4
29629 7B32           55                           push bp
29630 7B33           89E5                         mov bp, sp
29631 7B35           50                             push ax
29632 7B36           51                             push cx
29633 7B37           06                             push es
29634 7B38           57                             push di
29635 7B39           1E                             push ds
29636 7B3A           56                             push si
29637 7B3B           8B4E         0C                mov cx, 12[bp] ; count
29638 7B3E           83F9                   00      cmp cx, #0x0000
29639 7B41           74           17                je memcpyb_end
29640 7B43           8B46         04                mov ax, 4[bp] ; dsegment
29641 7B46           8EC0                           mov es, ax
29642 7B48           8B46         06                mov ax, 6[bp] ; doffset
29643 7B4B           89C7                           mov di, ax
29644 7B4D           8B46         08                mov ax, 8[bp] ; ssegment
29645 7B50           8ED8                           mov ds, ax
29646 7B52           8B46         0A                mov ax, 10[bp] ; soffset
29647 7B55           89C6                           mov si, ax
29648 7B57           FC                             cld
29649 7B58           F3                             rep
29650 7B59           A4                              movsb
29651                       00007B5A            memcpyb_end:
29652 7B5A           5E                             pop si
29653 7B5B           1F                             pop ds
29654 7B5C           5F                             pop di
29655 7B5D           07                             pop es
29656 7B5E           59                             pop cx
29657 7B5F           58                             pop ax
29658 7B60           5D                           pop bp
29659                                           ! 4118 endasm
29660                                           !BCC_ENDASM
29661                                           ! 4119 }
29662 7B61           C3                         ret
29663                                           ! 4120 static void memcpyw(dseg,doffset,sseg,soffset,count)
29664                                           ! 4121   Bit16u dseg;
29665                       00007B62            _memcpyw:
29666                                           !BCC_EOS
29667                                           ! 4122   Bit16u doffset;
29668                                           !BCC_EOS
29669                                           ! 4123   Bit16u sseg;
29670                                           !BCC_EOS
29671                                           ! 4124   Bit16u soffset;
29672                                           !BCC_EOS
29673                                           ! 4125   Bit16u count;
29674                                           !BCC_EOS
29675                                           ! 4126 {
29676                                           ! 4127 #asm
29677                                           !BCC_ASM
29678                       0000000A            _memcpyw.count	set	$A
29679                       00000006            _memcpyw.sseg	set	6
29680                       00000008            _memcpyw.soffset	set	8
29681                       00000002            _memcpyw.dseg	set	2
29682                       00000004            _memcpyw.doffset	set	4
29683 7B62           55                           push bp
29684 7B63           89E5                         mov bp, sp
29685 7B65           50                             push ax
29686 7B66           51                             push cx
29687 7B67           06                             push es
29688 7B68           57                             push di
29689 7B69           1E                             push ds
29690 7B6A           56                             push si
29691 7B6B           8B4E         0C                mov cx, 12[bp] ; count
29692 7B6E           83F9                   00      cmp cx, #0x0000
29693 7B71           74           17                je memcpyw_end
29694 7B73           8B46         04                mov ax, 4[bp] ; dsegment
29695 7B76           8EC0                           mov es, ax
29696 7B78           8B46         06                mov ax, 6[bp] ; doffset
29697 7B7B           89C7                           mov di, ax
29698 7B7D           8B46         08                mov ax, 8[bp] ; ssegment
29699 7B80           8ED8                           mov ds, ax
29700 7B82           8B46         0A                mov ax, 10[bp] ; soffset
29701 7B85           89C6                           mov si, ax
29702 7B87           FC                             cld
29703 7B88           F3                             rep
29704 7B89           A5                              movsw
29705                       00007B8A            memcpyw_end:
29706 7B8A           5E                             pop si
29707 7B8B           1F                             pop ds
29708 7B8C           5F                             pop di
29709 7B8D           07                             pop es
29710 7B8E           59                             pop cx
29711 7B8F           58                             pop ax
29712 7B90           5D                           pop bp
29713                                           ! 4158 endasm
29714                                           !BCC_ENDASM
29715                                           ! 4159 }
29716 7B91           C3                         ret
29717                                           ! 4160 static Bit8u
29718                                           ! 4161 read_byte(seg, offset)
29719                                           ! 4162   Bit16u seg;
29720                       00007B92            _read_byte:
29721                                           !BCC_EOS
29722                                           ! 4163   Bit16u offset;
29723                                           !BCC_EOS
29724                                           ! 4164 {
29725                                           ! 4165 #asm
29726                                           !BCC_ASM
29727                       00000002            _read_byte.seg	set	2
29728                       00000004            _read_byte.offset	set	4
29729 7B92           55                           push bp
29730 7B93           89E5                         mov bp, sp
29731 7B95           53                             push bx
29732 7B96           1E                             push ds
29733 7B97           8B46         04                mov ax, 4[bp] ; segment
29734 7B9A           8ED8                           mov ds, ax
29735 7B9C           8B5E         06                mov bx, 6[bp] ; offset
29736 7B9F           8A07                           mov al, [bx]
29737                                               ;; al = return value (byte)
29738 7BA1           1F                             pop ds
29739 7BA2           5B                             pop bx
29740 7BA3           5D                           pop bp
29741                                           ! 4178 endasm
29742                                           !BCC_ENDASM
29743                                           ! 4179 }
29744 7BA4           C3                         ret
29745                                           ! 4180 static Bit16u
29746                                           ! 4181 read_word(seg, offset)
29747                                           ! 4182   Bit16u seg;
29748                       00007BA5            _read_word:
29749                                           !BCC_EOS
29750                                           ! 4183   Bit16u offset;
29751                                           !BCC_EOS
29752                                           ! 4184 {
29753                                           ! 4185 #asm
29754                                           !BCC_ASM
29755                       00000002            _read_word.seg	set	2
29756                       00000004            _read_word.offset	set	4
29757 7BA5           55                           push bp
29758 7BA6           89E5                         mov bp, sp
29759 7BA8           53                             push bx
29760 7BA9           1E                             push ds
29761 7BAA           8B46         04                mov ax, 4[bp] ; segment
29762 7BAD           8ED8                           mov ds, ax
29763 7BAF           8B5E         06                mov bx, 6[bp] ; offset
29764 7BB2           8B07                           mov ax, [bx]
29765                                               ;; ax = return value (word)
29766 7BB4           1F                             pop ds
29767 7BB5           5B                             pop bx
29768 7BB6           5D                           pop bp
29769                                           ! 4198 endasm
29770                                           !BCC_ENDASM
29771                                           ! 4199 }
29772 7BB7           C3                         ret
29773                                           ! 4200 static void
29774                                           ! 4201 write_byte(seg, offset, data)
29775                                           ! 4202   Bit16u seg;
29776                       00007BB8            _write_byte:
29777                                           !BCC_EOS
29778                                           ! 4203   Bit16u offset;
29779                                           !BCC_EOS
29780                                           ! 4204   Bit8u data;
29781                                           !BCC_EOS
29782                                           ! 4205 {
29783                                           ! 4206 #asm
29784                                           !BCC_ASM
29785                       00000002            _write_byte.seg	set	2
29786                       00000006            _write_byte.data	set	6
29787                       00000004            _write_byte.offset	set	4
29788 7BB8           55                           push bp
29789 7BB9           89E5                         mov bp, sp
29790 7BBB           50                             push ax
29791 7BBC           53                             push bx
29792 7BBD           1E                             push ds
29793 7BBE           8B46         04                mov ax, 4[bp] ; segment
29794 7BC1           8ED8                           mov ds, ax
29795 7BC3           8B5E         06                mov bx, 6[bp] ; offset
29796 7BC6           8A46         08                mov al, 8[bp] ; data byte
29797 7BC9           8807                           mov [bx], al ; write data byte
29798 7BCB           1F                             pop ds
29799 7BCC           5B                             pop bx
29800 7BCD           58                             pop ax
29801 7BCE           5D                           pop bp
29802                                           ! 4221 endasm
29803                                           !BCC_ENDASM
29804                                           ! 4222 }
29805 7BCF           C3                         ret
29806                                           ! 4223 static void
29807                                           ! 4224 write_word(seg, offset, data)
29808                                           ! 4225   Bit16u seg;
29809                       00007BD0            _write_word:
29810                                           !BCC_EOS
29811                                           ! 4226   Bit16u offset;
29812                                           !BCC_EOS
29813                                           ! 4227   Bit16u data;
29814                                           !BCC_EOS
29815                                           ! 4228 {
29816                                           ! 4229 #asm
29817                                           !BCC_ASM
29818                       00000002            _write_word.seg	set	2
29819                       00000006            _write_word.data	set	6
29820                       00000004            _write_word.offset	set	4
29821 7BD0           55                           push bp
29822 7BD1           89E5                         mov bp, sp
29823 7BD3           50                             push ax
29824 7BD4           53                             push bx
29825 7BD5           1E                             push ds
29826 7BD6           8B46         04                mov ax, 4[bp] ; segment
29827 7BD9           8ED8                           mov ds, ax
29828 7BDB           8B5E         06                mov bx, 6[bp] ; offset
29829 7BDE           8B46         08                mov ax, 8[bp] ; data word
29830 7BE1           8907                           mov [bx], ax ; write data word
29831 7BE3           1F                             pop ds
29832 7BE4           5B                             pop bx
29833 7BE5           58                             pop ax
29834 7BE6           5D                           pop bp
29835                                           ! 4244 endasm
29836                                           !BCC_ENDASM
29837                                           ! 4245 }
29838 7BE7           C3                         ret
29839                                           ! 4246  Bit8u
29840                                           ! 4247 inb(port)
29841                                           ! 4248   Bit16u port;
29842                                           export	_inb
29843                       00007BE8            _inb:
29844                                           !BCC_EOS
29845                                           ! 4249 {
29846                                           ! 4250 #asm
29847                                           !BCC_ASM
29848                       00000002            _inb.port	set	2
29849 7BE8           55                           push bp
29850 7BE9           89E5                         mov bp, sp
29851 7BEB           52                             push dx
29852 7BEC           8B56         04                mov dx, 4[bp]
29853 7BEF           EC                             in al, dx
29854 7BF0           5A                             pop dx
29855 7BF1           5D                           pop bp
29856                                           ! 4258 endasm
29857                                           !BCC_ENDASM
29858                                           ! 4259 }
29859 7BF2           C3                         ret
29860                                           ! 4260   Bit16u
29861                                           ! 4261 inw(port)
29862                                           ! 4262   Bit16u port;
29863                                           export	_inw
29864                       00007BF3            _inw:
29865                                           !BCC_EOS
29866                                           ! 4263 {
29867                                           ! 4264 #asm
29868                                           !BCC_ASM
29869                       00000002            _inw.port	set	2
29870 7BF3           55                           push bp
29871 7BF4           89E5                         mov bp, sp
29872 7BF6           52                             push dx
29873 7BF7           8B56         04                mov dx, 4[bp]
29874 7BFA           ED                             in ax, dx
29875 7BFB           5A                             pop dx
29876 7BFC           5D                           pop bp
29877                                           ! 4272 endasm
29878                                           !BCC_ENDASM
29879                                           ! 4273 }
29880 7BFD           C3                         ret
29881                                           ! 4274   void
29882                                           ! 4275 outb(port, val)
29883                                           ! 4276   Bit16u port;
29884                                           export	_outb
29885                       00007BFE            _outb:
29886                                           !BCC_EOS
29887                                           ! 4277   Bit8u val;
29888                                           !BCC_EOS
29889                                           ! 4278 {
29890                                           ! 4279 #asm
29891                                           !BCC_ASM
29892                       00000004            _outb.val	set	4
29893                       00000002            _outb.port	set	2
29894 7BFE           55                           push bp
29895 7BFF           89E5                         mov bp, sp
29896 7C01           50                             push ax
29897 7C02           52                             push dx
29898 7C03           8B56         04                mov dx, 4[bp]
29899 7C06           8A46         06                mov al, 6[bp]
29900 7C09           EE                             out dx, al
29901 7C0A           5A                             pop dx
29902 7C0B           58                             pop ax
29903 7C0C           5D                           pop bp
29904                                           ! 4290 endasm
29905                                           !BCC_ENDASM
29906                                           ! 4291 }
29907 7C0D           C3                         ret
29908                                           ! 4292   void
29909                                           ! 4293 outw(port, val)
29910                                           ! 4294   Bit16u port;
29911                                           export	_outw
29912                       00007C0E            _outw:
29913                                           !BCC_EOS
29914                                           ! 4295   Bit16u val;
29915                                           !BCC_EOS
29916                                           ! 4296 {
29917                                           ! 4297 #asm
29918                                           !BCC_ASM
29919                       00000004            _outw.val	set	4
29920                       00000002            _outw.port	set	2
29921 7C0E           55                           push bp
29922 7C0F           89E5                         mov bp, sp
29923 7C11           50                             push ax
29924 7C12           52                             push dx
29925 7C13           8B56         04                mov dx, 4[bp]
29926 7C16           8B46         06                mov ax, 6[bp]
29927 7C19           EF                             out dx, ax
29928 7C1A           5A                             pop dx
29929 7C1B           58                             pop ax
29930 7C1C           5D                           pop bp
29931                                           ! 4308 endasm
29932                                           !BCC_ENDASM
29933                                           ! 4309 }
29934 7C1D           C3                         ret
29935                                           ! 4310 Bit16u get_SS()
29936                                           ! 4311 {
29937                                           export	_get_SS
29938                       00007C1E            _get_SS:
29939                                           ! 4312 #asm
29940                                           !BCC_ASM
29941 7C1E           8CD0                         mov ax, ss
29942                                           ! 4314 endasm
29943                                           !BCC_ENDASM
29944                                           ! 4315 }
29945 7C20           C3                         ret
29946                                           ! 4316 void printf(s)
29947                                           ! 4317   Bit8u *s;
29948                                           export	_printf
29949                       00007C21            _printf:
29950                                           !BCC_EOS
29951                                           ! 4318 {
29952                                           ! 4319   Bit8u c, format_char;
29953                                           !BCC_EOS
29954                                           ! 4320   Boolean in_format;
29955                                           !BCC_EOS
29956                                           ! 4321   unsigned format_width, i;
29957                                           !BCC_EOS
29958                                           ! 4322   Bit16u *arg_ptr;
29959                                           !BCC_EOS
29960                                           ! 4323   Bit16u arg_seg, arg, digit, nibble, shift_count;
29961                                           !BCC_EOS
29962                                           ! 4324   arg_ptr = &s;
29963 7C21           55                         push	bp
29964 7C22           89E5                       mov	bp,sp
29965 7C24           83C4                   EC  add	sp,*-$14
29966                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29967 7C27           8D5E         04            lea	bx,4[bp]
29968 7C2A           895E         F6            mov	-$A[bp],bx
29969                                           !BCC_EOS
29970                                           ! 4325   arg_seg = get_SS();
29971                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
29972 7C2D           E8         FFEE            call	_get_SS
29973                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
29974 7C30           8946         F4            mov	-$C[bp],ax
29975                                           !BCC_EOS
29976                                           ! 4326   in_format = 0;
29977                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29978 7C33           31C0                       xor	ax,ax
29979 7C35           8946         FC            mov	-4[bp],ax
29980                                           !BCC_EOS
29981                                           ! 4327   format_width = 0;
29982                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29983 7C38           31C0                       xor	ax,ax
29984 7C3A           8946         FA            mov	-6[bp],ax
29985                                           !BCC_EOS
29986                                           ! 4328   while (c = read_byte(0xc000, s)) {
29987 7C3D           E9         0104            br 	.29F
29988                       00007C40            .2A0:
29989                                           ! 4329     if ( c == '%' ) {
29990                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
29991 7C40           8A46         FF            mov	al,-1[bp]
29992 7C43           3C                     25  cmp	al,*$25
29993 7C45           75           0E            jne 	.2A1
29994                       00007C47            .2A2:
29995                                           ! 4330       in_format = 1;
29996                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
29997 7C47           B8                   0001  mov	ax,*1
29998 7C4A           8946         FC            mov	-4[bp],ax
29999                                           !BCC_EOS
30000                                           ! 4331       format_width = 0;
30001                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30002 7C4D           31C0                       xor	ax,ax
30003 7C4F           8946         FA            mov	-6[bp],ax
30004                                           !BCC_EOS
30005                                           ! 4332       }
30006                                           ! 4333     else if (in_format) {
30007 7C52           E9         00E8            br 	.2A3
30008                       00007C55            .2A1:
30009 7C55           8B46         FC            mov	ax,-4[bp]
30010 7C58           85C0                       test	ax,ax
30011 7C5A         0F84         00CF            beq 	.2A4
30012                       00007C5E            .2A5:
30013                                           ! 4334       if ( (c>='0') && (c<='9') ) {
30014                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30015 7C5E           8A46         FF            mov	al,-1[bp]
30016 7C61           3C                     30  cmp	al,*$30
30017 7C63           72           28            jb  	.2A6
30018                       00007C65            .2A8:
30019                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30020 7C65           8A46         FF            mov	al,-1[bp]
30021 7C68           3C                     39  cmp	al,*$39
30022 7C6A           77           21            ja  	.2A6
30023                       00007C6C            .2A7:
30024                                           ! 4335         format_width = (format_width * 10) + (c - '0');
30025                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30026 7C6C           8A46         FF            mov	al,-1[bp]
30027 7C6F           30E4                       xor	ah,ah
30028 7C71           05                   FFD0  add	ax,*-$30
30029 7C74           50                         push	ax
30030                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30031 7C75           8B46         FA            mov	ax,-6[bp]
30032 7C78           89C2                       mov	dx,ax
30033 7C7A           D1E0                       shl	ax,*1
30034 7C7C           D1E0                       shl	ax,*1
30035 7C7E           01D0                       add	ax,dx
30036 7C80           D1E0                       shl	ax,*1
30037                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30038 7C82           0346         EA            add	ax,-$16[bp]
30039 7C85           44                         inc	sp
30040 7C86           44                         inc	sp
30041                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30042 7C87           8946         FA            mov	-6[bp],ax
30043                                           !BCC_EOS
30044                                           ! 4336         }
30045                                           ! 4337       else if (c == 'x') {
30046 7C8A           E9         009E            br 	.2A9
30047                       00007C8D            .2A6:
30048                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30049 7C8D           8A46         FF            mov	al,-1[bp]
30050 7C90           3C                     78  cmp	al,*$78
30051 7C92         0F85         0095            bne 	.2AA
30052                       00007C96            .2AB:
30053                                           ! 4338         arg_ptr++;
30054                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30055 7C96           8B5E         F6            mov	bx,-$A[bp]
30056 7C99           43                         inc	bx
30057 7C9A           43                         inc	bx
30058 7C9B           895E         F6            mov	-$A[bp],bx
30059                                           !BCC_EOS
30060                                           ! 4339         arg = read_word(arg_seg, arg_ptr);
30061                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30062 7C9E           FF76         F6            push	-$A[bp]
30063                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30064 7CA1           FF76         F4            push	-$C[bp]
30065                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30066 7CA4           E8         FEFE            call	_read_word
30067 7CA7           83C4                   04  add	sp,*4
30068                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30069 7CAA           8946         F2            mov	-$E[bp],ax
30070                                           !BCC_EOS
30071                                           ! 4340         if (format_width == 0)
30072                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30073 7CAD           8B46         FA            mov	ax,-6[bp]
30074 7CB0           85C0                       test	ax,ax
30075 7CB2           75           06            jne 	.2AC
30076                       00007CB4            .2AD:
30077                                           ! 4341           format_width = 4;
30078                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30079 7CB4           B8                   0004  mov	ax,*4
30080 7CB7           8946         FA            mov	-6[bp],ax
30081                                           !BCC_EOS
30082                                           ! 4342         i = 0;
30083                       00007CBA            .2AC:
30084                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30085 7CBA           31C0                       xor	ax,ax
30086 7CBC           8946         F8            mov	-8[bp],ax
30087                                           !BCC_EOS
30088                                           ! 4343         digit = format_width - 1;
30089                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30090 7CBF           8B46         FA            mov	ax,-6[bp]
30091                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30092 7CC2           48                         dec	ax
30093 7CC3           8946         F0            mov	-$10[bp],ax
30094                                           !BCC_EOS
30095                                           ! 4344         for (i=0; i<format_width; i++) {
30096                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30097 7CC6           31C0                       xor	ax,ax
30098 7CC8           8946         F8            mov	-8[bp],ax
30099                                           !BCC_EOS
30100                                           !BCC_EOS
30101 7CCB           EB           51            jmp .2B0
30102                       00007CCD            .2B1:
30103                                           ! 4345           nibble = (arg >> (4 * digit)) & 0x000f;
30104                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30105                                           ! Debug: expression subtree swapping
30106 7CCD           8B46         F0            mov	ax,-$10[bp]
30107 7CD0           D1E0                       shl	ax,*1
30108 7CD2           D1E0                       shl	ax,*1
30109                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30110 7CD4           89C3                       mov	bx,ax
30111 7CD6           8B46         F2            mov	ax,-$E[bp]
30112 7CD9           89D9                       mov	cx,bx
30113 7CDB           D3E8                       shr	ax,cl
30114                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30115 7CDD           24                     0F  and	al,*$F
30116                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30117 7CDF           30E4                       xor	ah,ah
30118 7CE1           8946         EE            mov	-$12[bp],ax
30119                                           !BCC_EOS
30120                                           ! 4346           if (nibble <= 9)
30121                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30122 7CE4           8B46         EE            mov	ax,-$12[bp]
30123 7CE7           3D                   0009  cmp	ax,*9
30124 7CEA           77           13            ja  	.2B2
30125                       00007CEC            .2B3:
30126                                           ! 4347             outb(0xe9, nibble + '0');
30127                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30128 7CEC           8B46         EE            mov	ax,-$12[bp]
30129                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30130 7CEF           05                   0030  add	ax,*$30
30131 7CF2           50                         push	ax
30132                                           ! Debug: list int = const $E9 (used reg = )
30133 7CF3           B8                   00E9  mov	ax,#$E9
30134 7CF6           50                         push	ax
30135                                           ! Debug: func () void = outb+0 (used reg = )
30136 7CF7           E8         FF04            call	_outb
30137 7CFA           83C4                   04  add	sp,*4
30138                                           !BCC_EOS
30139                                           ! 4348           else
30140                                           ! 4349             outb(0xe9, (nibble - 10) + 'A');
30141 7CFD           EB           11            jmp .2B4
30142                       00007CFF            .2B2:
30143                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30144 7CFF           8B46         EE            mov	ax,-$12[bp]
30145                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30146                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30147 7D02           05                   0037  add	ax,*$37
30148 7D05           50                         push	ax
30149                                           ! Debug: list int = const $E9 (used reg = )
30150 7D06           B8                   00E9  mov	ax,#$E9
30151 7D09           50                         push	ax
30152                                           ! Debug: func () void = outb+0 (used reg = )
30153 7D0A           E8         FEF1            call	_outb
30154 7D0D           83C4                   04  add	sp,*4
30155                                           !BCC_EOS
30156                                           ! 4350           digit--;
30157                       00007D10            .2B4:
30158                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30159 7D10           8B46         F0            mov	ax,-$10[bp]
30160 7D13           48                         dec	ax
30161 7D14           8946         F0            mov	-$10[bp],ax
30162                                           !BCC_EOS
30163                                           ! 4351           }
30164                                           ! 4352         in_format = 0;
30165                       00007D17            .2AF:
30166                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30167 7D17           8B46         F8            mov	ax,-8[bp]
30168 7D1A           40                         inc	ax
30169 7D1B           8946         F8            mov	-8[bp],ax
30170                       00007D1E            .2B0:
30171                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30172 7D1E           8B46         F8            mov	ax,-8[bp]
30173 7D21           3B46         FA            cmp	ax,-6[bp]
30174 7D24           72           A7            jb 	.2B1
30175                       00007D26            .2B5:
30176                       00007D26            .2AE:
30177                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30178 7D26           31C0                       xor	ax,ax
30179 7D28           8946         FC            mov	-4[bp],ax
30180                                           !BCC_EOS
30181                                           ! 4353         }
30182                                           ! 4354       }
30183                       00007D2B            .2AA:
30184                       00007D2B            .2A9:
30185                                           ! 4355     else {
30186 7D2B           EB           10            jmp .2B6
30187                       00007D2D            .2A4:
30188                                           ! 4356       outb(0xe9, c);
30189                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30190 7D2D           8A46         FF            mov	al,-1[bp]
30191 7D30           30E4                       xor	ah,ah
30192 7D32           50                         push	ax
30193                                           ! Debug: list int = const $E9 (used reg = )
30194 7D33           B8                   00E9  mov	ax,#$E9
30195 7D36           50                         push	ax
30196                                           ! Debug: func () void = outb+0 (used reg = )
30197 7D37           E8         FEC4            call	_outb
30198 7D3A           83C4                   04  add	sp,*4
30199                                           !BCC_EOS
30200                                           ! 4357       }
30201                                           ! 4358     s ++;
30202                       00007D3D            .2B6:
30203                       00007D3D            .2A3:
30204                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30205 7D3D           8B5E         04            mov	bx,4[bp]
30206 7D40           43                         inc	bx
30207 7D41           895E         04            mov	4[bp],bx
30208                                           !BCC_EOS
30209                                           ! 4359     }
30210                                           ! 4360 }
30211                       00007D44            .29F:
30212                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30213 7D44           FF76         04            push	4[bp]
30214                                           ! Debug: list unsigned int = const $C000 (used reg = )
30215 7D47           B8                   C000  mov	ax,#$C000
30216 7D4A           50                         push	ax
30217                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30218 7D4B           E8         FE44            call	_read_byte
30219 7D4E           83C4                   04  add	sp,*4
30220                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30221 7D51           8846         FF            mov	-1[bp],al
30222 7D54           84C0                       test	al,al
30223 7D56         0F85         FEE6            bne 	.2A0
30224                       00007D5A            .2B7:
30225                       00007D5A            .29E:
30226 7D5A           89EC                       mov	sp,bp
30227 7D5C           5D                         pop	bp
30228 7D5D           C3                         ret
30229                                           ! 4361 static ModeInfoListItem mode_info_list[]=
30230                                           ! Register BX used in function printf
30231                                           ! 4362 {
30232                                           
30233                       00007D5E            _mode_info_list:
30234                                           ! 4363 { 0x0100,
30235 7D5E                      0100            .word	$100
30236                                           ! 4364 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30237 7D60                      009B            .word	$9B
30238                                           ! 4365                           0x01 | 0x02 | 0x04,
30239 7D62                        07            .byte	7
30240                                           ! 4366                      
30241                                           ! 4366      0,
30242 7D63                        00            .byte	0
30243                                           ! 4367                           64,
30244 7D64                      0040            .word	$40
30245                                           ! 4368                    64,
30246 7D66                      0040            .word	$40
30247                                           ! 4369                        0xA000,
30248 7D68                      A000            .word	$A000
30249                                           ! 4370                        0x0000,
30250 7D6A                      0000            .word	0
30251                                           ! 4371                       0,
30252 7D6C                      0000            .word	0
30253 7D6E                      0000            .word	0
30254                                           ! 4372                             640,
30255 7D70                      0280            .word	$280
30256                                           ! 4373                        640,
30257 7D72                      0280            .word	$280
30258                                           ! 4374                        400,
30259 7D74                      0190            .word	$190
30260                                           ! 4375                      8,
30261 7D76                        08            .byte	8
30262                                           ! 4376                      16,
30263 7D77                        10            .byte	$10
30264                                           ! 4377                           1,
30265 7D78                        01            .byte	1
30266                                           ! 4378                         8,
30267 7D79                        08            .byte	8
30268                                           ! 4379                          4,
30269 7D7A                        04            .byte	4
30270                                           ! 4380                        0x04,
30271 7D7B                        04            .byte	4
30272                                           ! 4381                     0,
30273 7D7C                        00            .byte	0
30274                                           ! 4382                               64,
30275 7D7D                        40            .byte	$40
30276                                           ! 4383                          0,
30277 7D7E                        00            .byte	0
30278                                           ! 4384                        0,
30279 7D7F                        00            .byte	0
30280                                           ! 4385                             0,
30281 7D80                        00            .byte	0
30282                                           ! 4386                          0,
30283 7D81                        00            .byte	0
30284                                           ! 4387                               0,
30285 7D82                        00            .byte	0
30286                                           ! 4388                         0,
30287 7D83                        00            .byte	0
30288                                           ! 4389                              0,
30289 7D84                        00            .byte	0
30290                                           ! 4390                         0,
30291 7D85                        00            .byte	0
30292                                           ! 4391                              0,
30293 7D86                        00            .byte	0
30294                                           ! 4392                                0,
30295 7D87                        00            .byte	0
30296                                           ! 4393                        0xE0000000,
30297 7D88                      0000            .word	0
30298 7D8A                      E000            .word	$E000
30299                                           ! 4394                               0,
30300 7D8C                      0000            .word	0
30301 7D8E                      0000            .word	0
30302                                           ! 4395                             0,
30303 7D90                      0000            .word	0
30304                                           ! 4396                                640,
30305 7D92                      0280            .word	$280
30306                                           ! 4397                             0,
30307 7D94                        00            .byte	0
30308                                           ! 4398                             0,
30309 7D95                        00            .byte	0
30310                                           ! 4399                           0,
30311 7D96                        00            .byte	0
30312                                           ! 4400                                0,
30313 7D97                        00            .byte	0
30314                                           ! 4401                             0,
30315 7D98                        00            .byte	0
30316                                           ! 4402                                  0,
30317 7D99                        00            .byte	0
30318                                           ! 4403                            0,
30319 7D9A                        00            .byte	0
30320                                           ! 4404                                 0,
30321 7D9B                        00            .byte	0
30322                                           ! 4405                            0,
30323 7D9C                        00            .byte	0
30324                                           ! 4406                                 0,
30325 7D9D                        00            .byte	0
30326                                           ! 4407                          0,
30327 7D9E                      0000            .word	0
30328 7DA0                      0000            .word	0
30329                                           ! 4408 } },
30330                                           ! 4409 { 0x0101,
30331 7DA2                      0101            .word	$101
30332                                           ! 4410 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30333 7DA4                      009B            .word	$9B
30334                                           ! 4411                           0x01 | 0x02 | 0x04,
30335 7DA6                        07            .byte	7
30336                                           ! 4412                           0,
30337 7DA7                        00            .byte	0
30338                                           ! 4413                           64,
30339 7DA8                      0040            .word	$40
30340                                           ! 4414                    64,
30341 7DAA                      0040            .word	$40
30342                                           ! 4415                        0xA000,
30343 7DAC                      A000            .word	$A000
30344                                           ! 4416                        0x0000,
30345 7DAE                      0000            .word	0
30346                                           ! 4417                       0,
30347 7DB0                      0000            .word	0
30348 7DB2                      0000            .word	0
30349                                           ! 4418                             640,
30350 7DB4                      0280            .word	$280
30351                                           ! 4419                        640,
30352 7DB6                      0280            .word	$280
30353                                           ! 4420                        480,
30354 7DB8                      01E0            .word	$1E0
30355                                           ! 4421                      8,
30356 7DBA                        08            .byte	8
30357                                           ! 4422                      16,
30358 7DBB                        10            .byte	$10
30359                                           ! 4423                           1,
30360 7DBC                        01            .byte	1
30361                                           ! 4424                         8,
30362 7DBD                        08            .byte	8
30363                                           ! 4425                          5,
30364 7DBE                        05            .byte	5
30365                                           ! 4426                        0x04,
30366 7DBF                        04            .byte	4
30367                                           ! 4427                     0,
30368 7DC0                        00            .byte	0
30369                                           ! 4428                               53,
30370 7DC1                        35            .byte	$35
30371                                           ! 4429                          0,
30372 7DC2                        00            .byte	0
30373                                           ! 4430                        0,
30374 7DC3                        00            .byte	0
30375                                           ! 4431                             0,
30376 7DC4                        00            .byte	0
30377                                           ! 4432                          0,
30378 7DC5                        00            .byte	0
30379                                           ! 4433                               0,
30380 7DC6                        00            .byte	0
30381                                           ! 4434                         0,
30382 7DC7                        00            .byte	0
30383                                           ! 4435                              0,
30384 7DC8                        00            .byte	0
30385                                           ! 4436                     
30386                                           ! 4436     0,
30387 7DC9                        00            .byte	0
30388                                           ! 4437                              0,
30389 7DCA                        00            .byte	0
30390                                           ! 4438                                0,
30391 7DCB                        00            .byte	0
30392                                           ! 4439                        0xE0000000,
30393 7DCC                      0000            .word	0
30394 7DCE                      E000            .word	$E000
30395                                           ! 4440                               0,
30396 7DD0                      0000            .word	0
30397 7DD2                      0000            .word	0
30398                                           ! 4441                             0,
30399 7DD4                      0000            .word	0
30400                                           ! 4442                                640,
30401 7DD6                      0280            .word	$280
30402                                           ! 4443                             0,
30403 7DD8                        00            .byte	0
30404                                           ! 4444                             0,
30405 7DD9                        00            .byte	0
30406                                           ! 4445                           0,
30407 7DDA                        00            .byte	0
30408                                           ! 4446                                0,
30409 7DDB                        00            .byte	0
30410                                           ! 4447                             0,
30411 7DDC                        00            .byte	0
30412                                           ! 4448                                  0,
30413 7DDD                        00            .byte	0
30414                                           ! 4449                            0,
30415 7DDE                        00            .byte	0
30416                                           ! 4450                                 0,
30417 7DDF                        00            .byte	0
30418                                           ! 4451                            0,
30419 7DE0                        00            .byte	0
30420                                           ! 4452                                 0,
30421 7DE1                        00            .byte	0
30422                                           ! 4453                          0,
30423 7DE2                      0000            .word	0
30424 7DE4                      0000            .word	0
30425                                           ! 4454 } },
30426                                           ! 4455 { 0x0102,
30427 7DE6                      0102            .word	$102
30428                                           ! 4456 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30429 7DE8                      001F            .word	$1F
30430                                           ! 4457                           0x01 | 0x02 | 0x04,
30431 7DEA                        07            .byte	7
30432                                           ! 4458                           0,
30433 7DEB                        00            .byte	0
30434                                           ! 4459                           64,
30435 7DEC                      0040            .word	$40
30436                                           ! 4460                    64,
30437 7DEE                      0040            .word	$40
30438                                           ! 4461                        0xA000,
30439 7DF0                      A000            .word	$A000
30440                                           ! 4462                        0x0000,
30441 7DF2                      0000            .word	0
30442                                           ! 4463                       0,
30443 7DF4                      0000            .word	0
30444 7DF6                      0000            .word	0
30445                                           ! 4464                             100,
30446 7DF8                      0064            .word	$64
30447                                           ! 4465                        800,
30448 7DFA                      0320            .word	$320
30449                                           ! 4466                        600,
30450 7DFC                      0258            .word	$258
30451                                           ! 4467                      8,
30452 7DFE                        08            .byte	8
30453                                           ! 4468                      16,
30454 7DFF                        10            .byte	$10
30455                                           ! 4469                           4,
30456 7E00                        04            .byte	4
30457                                           ! 4470                         4,
30458 7E01                        04            .byte	4
30459                                           ! 4471                          1,
30460 7E02                        01            .byte	1
30461                                           ! 4472                        0x03,
30462 7E03                        03            .byte	3
30463                                           ! 4473                     0,
30464 7E04                        00            .byte	0
30465                                           ! 4474                               68,
30466 7E05                        44            .byte	$44
30467                                           ! 4475                          0,
30468 7E06                        00            .byte	0
30469                                           ! 4476                        0,
30470 7E07                        00            .byte	0
30471                                           ! 4477                             0,
30472 7E08                        00            .byte	0
30473                                           ! 4478                          0,
30474 7E09                        00            .byte	0
30475                                           ! 4479                               0,
30476 7E0A                        00            .byte	0
30477                                           ! 4480                         0,
30478 7E0B                        00            .byte	0
30479                                           ! 4481                              0,
30480 7E0C                        00            .byte	0
30481                                           ! 4482                         0,
30482 7E0D                        00            .byte	0
30483                                           ! 4483                              0,
30484 7E0E                        00            .byte	0
30485                                           ! 4484                                0,
30486 7E0F                        00            .byte	0
30487                                           ! 4485                        0,
30488 7E10                      0000            .word	0
30489 7E12                      0000            .word	0
30490                                           ! 4486                               0,
30491 7E14                      0000            .word	0
30492 7E16                      0000            .word	0
30493                                           ! 4487                             0,
30494 7E18                      0000            .word	0
30495                                           ! 4488                                100,
30496 7E1A                      0064            .word	$64
30497                                           ! 4489                             0,
30498 7E1C                        00            .byte	0
30499                                           ! 4490                             0,
30500 7E1D                        00            .byte	0
30501                                           ! 4491                           0,
30502 7E1E                        00            .byte	0
30503                                           ! 4492                                0,
30504 7E1F                        00            .byte	0
30505                                           ! 4493                             0,
30506 7E20                        00            .byte	0
30507                                           ! 4494                                  0,
30508 7E21                        00            .byte	0
30509                                           ! 4495                            0,
30510 7E22                        00            .byte	0
30511                                           ! 4496                                 0,
30512 7E23                        00            .byte	0
30513                                           ! 4497                            0,
30514 7E24                        00            .byte	0
30515                                           ! 4498                                 0,
30516 7E25                        00            .byte	0
30517                                           ! 4499                          0,
30518 7E26                      0000            .word	0
30519 7E28                      0000            .word	0
30520                                           ! 4500 } },
30521                                           ! 4501 { 0x0103,
30522 7E2A                      0103            .word	$103
30523                                           ! 4502 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30524 7E2C                      009B            .word	$9B
30525                                           ! 4503                           0x01 | 0x02 | 0x04,
30526 7E2E                        07            .byte	7
30527                                           ! 4504                          
30528                                           ! 4504  0,
30529 7E2F                        00            .byte	0
30530                                           ! 4505                           64,
30531 7E30                      0040            .word	$40
30532                                           ! 4506                    64,
30533 7E32                      0040            .word	$40
30534                                           ! 4507                        0xA000,
30535 7E34                      A000            .word	$A000
30536                                           ! 4508                        0x0000,
30537 7E36                      0000            .word	0
30538                                           ! 4509                       0,
30539 7E38                      0000            .word	0
30540 7E3A                      0000            .word	0
30541                                           ! 4510                             800,
30542 7E3C                      0320            .word	$320
30543                                           ! 4511                        800,
30544 7E3E                      0320            .word	$320
30545                                           ! 4512                        600,
30546 7E40                      0258            .word	$258
30547                                           ! 4513                      8,
30548 7E42                        08            .byte	8
30549                                           ! 4514                      16,
30550 7E43                        10            .byte	$10
30551                                           ! 4515                           1,
30552 7E44                        01            .byte	1
30553                                           ! 4516                         8,
30554 7E45                        08            .byte	8
30555                                           ! 4517                          8,
30556 7E46                        08            .byte	8
30557                                           ! 4518                        0x04,
30558 7E47                        04            .byte	4
30559                                           ! 4519                     0,
30560 7E48                        00            .byte	0
30561                                           ! 4520                               33,
30562 7E49                        21            .byte	$21
30563                                           ! 4521                          0,
30564 7E4A                        00            .byte	0
30565                                           ! 4522                        0,
30566 7E4B                        00            .byte	0
30567                                           ! 4523                             0,
30568 7E4C                        00            .byte	0
30569                                           ! 4524                          0,
30570 7E4D                        00            .byte	0
30571                                           ! 4525                               0,
30572 7E4E                        00            .byte	0
30573                                           ! 4526                         0,
30574 7E4F                        00            .byte	0
30575                                           ! 4527                              0,
30576 7E50                        00            .byte	0
30577                                           ! 4528                         0,
30578 7E51                        00            .byte	0
30579                                           ! 4529                              0,
30580 7E52                        00            .byte	0
30581                                           ! 4530                                0,
30582 7E53                        00            .byte	0
30583                                           ! 4531                        0xE0000000,
30584 7E54                      0000            .word	0
30585 7E56                      E000            .word	$E000
30586                                           ! 4532                               0,
30587 7E58                      0000            .word	0
30588 7E5A                      0000            .word	0
30589                                           ! 4533                             0,
30590 7E5C                      0000            .word	0
30591                                           ! 4534                                800,
30592 7E5E                      0320            .word	$320
30593                                           ! 4535                             0,
30594 7E60                        00            .byte	0
30595                                           ! 4536                             0,
30596 7E61                        00            .byte	0
30597                                           ! 4537                           0,
30598 7E62                        00            .byte	0
30599                                           ! 4538                                0,
30600 7E63                        00            .byte	0
30601                                           ! 4539                             0,
30602 7E64                        00            .byte	0
30603                                           ! 4540                                  0,
30604 7E65                        00            .byte	0
30605                                           ! 4541                            0,
30606 7E66                        00            .byte	0
30607                                           ! 4542                                 0,
30608 7E67                        00            .byte	0
30609                                           ! 4543                            0,
30610 7E68                        00            .byte	0
30611                                           ! 4544                                 0,
30612 7E69                        00            .byte	0
30613                                           ! 4545                          0,
30614 7E6A                      0000            .word	0
30615 7E6C                      0000            .word	0
30616                                           ! 4546 } },
30617                                           ! 4547 { 0x0104,
30618 7E6E                      0104            .word	$104
30619                                           ! 4548 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30620 7E70                      001F            .word	$1F
30621                                           ! 4549                           0x01 | 0x02 | 0x04,
30622 7E72                        07            .byte	7
30623                                           ! 4550                           0,
30624 7E73                        00            .byte	0
30625                                           ! 4551                           64,
30626 7E74                      0040            .word	$40
30627                                           ! 4552                    64,
30628 7E76                      0040            .word	$40
30629                                           ! 4553                        0xA000,
30630 7E78                      A000            .word	$A000
30631                                           ! 4554                        0x0000,
30632 7E7A                      0000            .word	0
30633                                           ! 4555                       0,
30634 7E7C                      0000            .word	0
30635 7E7E                      0000            .word	0
30636                                           ! 4556                             128,
30637 7E80                      0080            .word	$80
30638                                           ! 4557                        1024,
30639 7E82                      0400            .word	$400
30640                                           ! 4558                        768,
30641 7E84                      0300            .word	$300
30642                                           ! 4559                      8,
30643 7E86                        08            .byte	8
30644                                           ! 4560                      16,
30645 7E87                        10            .byte	$10
30646                                           ! 4561                           4,
30647 7E88                        04            .byte	4
30648                                           ! 4562                         4,
30649 7E89                        04            .byte	4
30650                                           ! 4563                          2,
30651 7E8A                        02            .byte	2
30652                                           ! 4564                        0x03,
30653 7E8B                        03            .byte	3
30654                                           ! 4565                     0,
30655 7E8C                        00            .byte	0
30656                                           ! 4566                               41,
30657 7E8D                        29            .byte	$29
30658                                           ! 4567                          0,
30659 7E8E                        00            .byte	0
30660                                           ! 4568                        0,
30661 7E8F                        00            .byte	0
30662                                           ! 4569                             0,
30663 7E90                        00            .byte	0
30664                                           ! 4570                          0,
30665 7E91                        00            .byte	0
30666                                           ! 4571                               0,
30667 7E92                        00            .byte	0
30668                                           ! 4572                         0,
30669 7E93                        00            .byte	0
30670                                           ! 4573                              0,
30671 7E94                        00            .byte	0
30672                                           ! 4574                        
30673                                           ! 4574  0,
30674 7E95                        00            .byte	0
30675                                           ! 4575                              0,
30676 7E96                        00            .byte	0
30677                                           ! 4576                                0,
30678 7E97                        00            .byte	0
30679                                           ! 4577                        0,
30680 7E98                      0000            .word	0
30681 7E9A                      0000            .word	0
30682                                           ! 4578                               0,
30683 7E9C                      0000            .word	0
30684 7E9E                      0000            .word	0
30685                                           ! 4579                             0,
30686 7EA0                      0000            .word	0
30687                                           ! 4580                                128,
30688 7EA2                      0080            .word	$80
30689                                           ! 4581                             0,
30690 7EA4                        00            .byte	0
30691                                           ! 4582                             0,
30692 7EA5                        00            .byte	0
30693                                           ! 4583                           0,
30694 7EA6                        00            .byte	0
30695                                           ! 4584                                0,
30696 7EA7                        00            .byte	0
30697                                           ! 4585                             0,
30698 7EA8                        00            .byte	0
30699                                           ! 4586                                  0,
30700 7EA9                        00            .byte	0
30701                                           ! 4587                            0,
30702 7EAA                        00            .byte	0
30703                                           ! 4588                                 0,
30704 7EAB                        00            .byte	0
30705                                           ! 4589                            0,
30706 7EAC                        00            .byte	0
30707                                           ! 4590                                 0,
30708 7EAD                        00            .byte	0
30709                                           ! 4591                          0,
30710 7EAE                      0000            .word	0
30711 7EB0                      0000            .word	0
30712                                           ! 4592 } },
30713                                           ! 4593 { 0x0105,
30714 7EB2                      0105            .word	$105
30715                                           ! 4594 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30716 7EB4                      009B            .word	$9B
30717                                           ! 4595                           0x01 | 0x02 | 0x04,
30718 7EB6                        07            .byte	7
30719                                           ! 4596                           0,
30720 7EB7                        00            .byte	0
30721                                           ! 4597                           64,
30722 7EB8                      0040            .word	$40
30723                                           ! 4598                    64,
30724 7EBA                      0040            .word	$40
30725                                           ! 4599                        0xA000,
30726 7EBC                      A000            .word	$A000
30727                                           ! 4600                        0x0000,
30728 7EBE                      0000            .word	0
30729                                           ! 4601                       0,
30730 7EC0                      0000            .word	0
30731 7EC2                      0000            .word	0
30732                                           ! 4602                             1024,
30733 7EC4                      0400            .word	$400
30734                                           ! 4603                        1024,
30735 7EC6                      0400            .word	$400
30736                                           ! 4604                        768,
30737 7EC8                      0300            .word	$300
30738                                           ! 4605                      8,
30739 7ECA                        08            .byte	8
30740                                           ! 4606                      16,
30741 7ECB                        10            .byte	$10
30742                                           ! 4607                           1,
30743 7ECC                        01            .byte	1
30744                                           ! 4608                         8,
30745 7ECD                        08            .byte	8
30746                                           ! 4609                          12,
30747 7ECE                        0C            .byte	$C
30748                                           ! 4610                        0x04,
30749 7ECF                        04            .byte	4
30750                                           ! 4611                     0,
30751 7ED0                        00            .byte	0
30752                                           ! 4612                               20,
30753 7ED1                        14            .byte	$14
30754                                           ! 4613                          0,
30755 7ED2                        00            .byte	0
30756                                           ! 4614                        0,
30757 7ED3                        00            .byte	0
30758                                           ! 4615                             0,
30759 7ED4                        00            .byte	0
30760                                           ! 4616                          0,
30761 7ED5                        00            .byte	0
30762                                           ! 4617                               0,
30763 7ED6                        00            .byte	0
30764                                           ! 4618                         0,
30765 7ED7                        00            .byte	0
30766                                           ! 4619                              0,
30767 7ED8                        00            .byte	0
30768                                           ! 4620                         0,
30769 7ED9                        00            .byte	0
30770                                           ! 4621                              0,
30771 7EDA                        00            .byte	0
30772                                           ! 4622                                0,
30773 7EDB                        00            .byte	0
30774                                           ! 4623                        0xE0000000,
30775 7EDC                      0000            .word	0
30776 7EDE                      E000            .word	$E000
30777                                           ! 4624                               0,
30778 7EE0                      0000            .word	0
30779 7EE2                      0000            .word	0
30780                                           ! 4625                             0,
30781 7EE4                      0000            .word	0
30782                                           ! 4626                                1024,
30783 7EE6                      0400            .word	$400
30784                                           ! 4627                             0,
30785 7EE8                        00            .byte	0
30786                                           ! 4628                             0,
30787 7EE9                        00            .byte	0
30788                                           ! 4629                           0,
30789 7EEA                        00            .byte	0
30790                                           ! 4630                                0,
30791 7EEB                        00            .byte	0
30792                                           ! 4631                             0,
30793 7EEC                        00            .byte	0
30794                                           ! 4632                                  0,
30795 7EED                        00            .byte	0
30796                                           ! 4633                            0,
30797 7EEE                        00            .byte	0
30798                                           ! 4634                                 0,
30799 7EEF                        00            .byte	0
30800                                           ! 4635                            0,
30801 7EF0                        00            .byte	0
30802                                           ! 4636                                 0,
30803 7EF1                        00            .byte	0
30804                                           ! 4637                          0,
30805 7EF2                      0000            .word	0
30806 7EF4                      0000            .word	0
30807                                           ! 4638 } },
30808                                           ! 4639 { 0x0106,
30809 7EF6                      0106            .word	$106
30810                                           ! 4640 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30811 7EF8                      001F            .word	$1F
30812                                           ! 4641                           0x01 | 0x02 | 0x04,
30813 7EFA                        07            .byte	7
30814                                           ! 4642                         
30815                                           ! 4642   0,
30816 7EFB                        00            .byte	0
30817                                           ! 4643                           64,
30818 7EFC                      0040            .word	$40
30819                                           ! 4644                    64,
30820 7EFE                      0040            .word	$40
30821                                           ! 4645                        0xA000,
30822 7F00                      A000            .word	$A000
30823                                           ! 4646                        0x0000,
30824 7F02                      0000            .word	0
30825                                           ! 4647                       0,
30826 7F04                      0000            .word	0
30827 7F06                      0000            .word	0
30828                                           ! 4648                             160,
30829 7F08                      00A0            .word	$A0
30830                                           ! 4649                        1280,
30831 7F0A                      0500            .word	$500
30832                                           ! 4650                        1024,
30833 7F0C                      0400            .word	$400
30834                                           ! 4651                      8,
30835 7F0E                        08            .byte	8
30836                                           ! 4652                      16,
30837 7F0F                        10            .byte	$10
30838                                           ! 4653                           4,
30839 7F10                        04            .byte	4
30840                                           ! 4654                         4,
30841 7F11                        04            .byte	4
30842                                           ! 4655                          3,
30843 7F12                        03            .byte	3
30844                                           ! 4656                        0x03,
30845 7F13                        03            .byte	3
30846                                           ! 4657                     0,
30847 7F14                        00            .byte	0
30848                                           ! 4658                               24,
30849 7F15                        18            .byte	$18
30850                                           ! 4659                          0,
30851 7F16                        00            .byte	0
30852                                           ! 4660                        0,
30853 7F17                        00            .byte	0
30854                                           ! 4661                             0,
30855 7F18                        00            .byte	0
30856                                           ! 4662                          0,
30857 7F19                        00            .byte	0
30858                                           ! 4663                               0,
30859 7F1A                        00            .byte	0
30860                                           ! 4664                         0,
30861 7F1B                        00            .byte	0
30862                                           ! 4665                              0,
30863 7F1C                        00            .byte	0
30864                                           ! 4666                         0,
30865 7F1D                        00            .byte	0
30866                                           ! 4667                              0,
30867 7F1E                        00            .byte	0
30868                                           ! 4668                                0,
30869 7F1F                        00            .byte	0
30870                                           ! 4669                        0,
30871 7F20                      0000            .word	0
30872 7F22                      0000            .word	0
30873                                           ! 4670                               0,
30874 7F24                      0000            .word	0
30875 7F26                      0000            .word	0
30876                                           ! 4671                             0,
30877 7F28                      0000            .word	0
30878                                           ! 4672                                160,
30879 7F2A                      00A0            .word	$A0
30880                                           ! 4673                             0,
30881 7F2C                        00            .byte	0
30882                                           ! 4674                             0,
30883 7F2D                        00            .byte	0
30884                                           ! 4675                           0,
30885 7F2E                        00            .byte	0
30886                                           ! 4676                                0,
30887 7F2F                        00            .byte	0
30888                                           ! 4677                             0,
30889 7F30                        00            .byte	0
30890                                           ! 4678                                  0,
30891 7F31                        00            .byte	0
30892                                           ! 4679                            0,
30893 7F32                        00            .byte	0
30894                                           ! 4680                                 0,
30895 7F33                        00            .byte	0
30896                                           ! 4681                            0,
30897 7F34                        00            .byte	0
30898                                           ! 4682                                 0,
30899 7F35                        00            .byte	0
30900                                           ! 4683                          0,
30901 7F36                      0000            .word	0
30902 7F38                      0000            .word	0
30903                                           ! 4684 } },
30904                                           ! 4685 { 0x0107,
30905 7F3A                      0107            .word	$107
30906                                           ! 4686 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30907 7F3C                      009B            .word	$9B
30908                                           ! 4687                           0x01 | 0x02 | 0x04,
30909 7F3E                        07            .byte	7
30910                                           ! 4688                           0,
30911 7F3F                        00            .byte	0
30912                                           ! 4689                           64,
30913 7F40                      0040            .word	$40
30914                                           ! 4690                    64,
30915 7F42                      0040            .word	$40
30916                                           ! 4691                        0xA000,
30917 7F44                      A000            .word	$A000
30918                                           ! 4692                        0x0000,
30919 7F46                      0000            .word	0
30920                                           ! 4693                       0,
30921 7F48                      0000            .word	0
30922 7F4A                      0000            .word	0
30923                                           ! 4694                             1280,
30924 7F4C                      0500            .word	$500
30925                                           ! 4695                        1280,
30926 7F4E                      0500            .word	$500
30927                                           ! 4696                        1024,
30928 7F50                      0400            .word	$400
30929                                           ! 4697                      8,
30930 7F52                        08            .byte	8
30931                                           ! 4698                      16,
30932 7F53                        10            .byte	$10
30933                                           ! 4699                           1,
30934 7F54                        01            .byte	1
30935                                           ! 4700                         8,
30936 7F55                        08            .byte	8
30937                                           ! 4701                          20,
30938 7F56                        14            .byte	$14
30939                                           ! 4702                        0x04,
30940 7F57                        04            .byte	4
30941                                           ! 4703                     0,
30942 7F58                        00            .byte	0
30943                                           ! 4704                               11,
30944 7F59                        0B            .byte	$B
30945                                           ! 4705                          0,
30946 7F5A                        00            .byte	0
30947                                           ! 4706                        0,
30948 7F5B                        00            .byte	0
30949                                           ! 4707                             0,
30950 7F5C                        00            .byte	0
30951                                           ! 4708                          0,
30952 7F5D                        00            .byte	0
30953                                           ! 4709                               0,
30954 7F5E                        00            .byte	0
30955                                           ! 4710                         0,
30956 7F5F                        00            .byte	0
30957                                           ! 4711                              0,
30958 7F60                        00            .byte	0
30959                                           ! 4712                         0,
30960                                           ! 4712 
30961 7F61                        00            .byte	0
30962                                           ! 4713                              0,
30963 7F62                        00            .byte	0
30964                                           ! 4714                                0,
30965 7F63                        00            .byte	0
30966                                           ! 4715                        0xE0000000,
30967 7F64                      0000            .word	0
30968 7F66                      E000            .word	$E000
30969                                           ! 4716                               0,
30970 7F68                      0000            .word	0
30971 7F6A                      0000            .word	0
30972                                           ! 4717                             0,
30973 7F6C                      0000            .word	0
30974                                           ! 4718                                1280,
30975 7F6E                      0500            .word	$500
30976                                           ! 4719                             0,
30977 7F70                        00            .byte	0
30978                                           ! 4720                             0,
30979 7F71                        00            .byte	0
30980                                           ! 4721                           0,
30981 7F72                        00            .byte	0
30982                                           ! 4722                                0,
30983 7F73                        00            .byte	0
30984                                           ! 4723                             0,
30985 7F74                        00            .byte	0
30986                                           ! 4724                                  0,
30987 7F75                        00            .byte	0
30988                                           ! 4725                            0,
30989 7F76                        00            .byte	0
30990                                           ! 4726                                 0,
30991 7F77                        00            .byte	0
30992                                           ! 4727                            0,
30993 7F78                        00            .byte	0
30994                                           ! 4728                                 0,
30995 7F79                        00            .byte	0
30996                                           ! 4729                          0,
30997 7F7A                      0000            .word	0
30998 7F7C                      0000            .word	0
30999                                           ! 4730 } },
31000                                           ! 4731 { 0x010d,
31001 7F7E                      010D            .word	$10D
31002                                           ! 4732 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31003 7F80                      009B            .word	$9B
31004                                           ! 4733                           0x01 | 0x02 | 0x04,
31005 7F82                        07            .byte	7
31006                                           ! 4734                           0,
31007 7F83                        00            .byte	0
31008                                           ! 4735                           64,
31009 7F84                      0040            .word	$40
31010                                           ! 4736                    64,
31011 7F86                      0040            .word	$40
31012                                           ! 4737                        0xA000,
31013 7F88                      A000            .word	$A000
31014                                           ! 4738                        0x0000,
31015 7F8A                      0000            .word	0
31016                                           ! 4739                       0,
31017 7F8C                      0000            .word	0
31018 7F8E                      0000            .word	0
31019                                           ! 4740                             640,
31020 7F90                      0280            .word	$280
31021                                           ! 4741                        320,
31022 7F92                      0140            .word	$140
31023                                           ! 4742                        200,
31024 7F94                      00C8            .word	$C8
31025                                           ! 4743                      8,
31026 7F96                        08            .byte	8
31027                                           ! 4744                      16,
31028 7F97                        10            .byte	$10
31029                                           ! 4745                           1,
31030 7F98                        01            .byte	1
31031                                           ! 4746                         15,
31032 7F99                        0F            .byte	$F
31033                                           ! 4747                          2,
31034 7F9A                        02            .byte	2
31035                                           ! 4748                        0x06,
31036 7F9B                        06            .byte	6
31037                                           ! 4749                     0,
31038 7F9C                        00            .byte	0
31039                                           ! 4750                               130,
31040 7F9D                        82            .byte	$82
31041                                           ! 4751                          0,
31042 7F9E                        00            .byte	0
31043                                           ! 4752                        5,
31044 7F9F                        05            .byte	5
31045                                           ! 4753                             10,
31046 7FA0                        0A            .byte	$A
31047                                           ! 4754                          5,
31048 7FA1                        05            .byte	5
31049                                           ! 4755                               5,
31050 7FA2                        05            .byte	5
31051                                           ! 4756                         5,
31052 7FA3                        05            .byte	5
31053                                           ! 4757                              0,
31054 7FA4                        00            .byte	0
31055                                           ! 4758                         1,
31056 7FA5                        01            .byte	1
31057                                           ! 4759                              15,
31058 7FA6                        0F            .byte	$F
31059                                           ! 4760                                0,
31060 7FA7                        00            .byte	0
31061                                           ! 4761                        0xE0000000,
31062 7FA8                      0000            .word	0
31063 7FAA                      E000            .word	$E000
31064                                           ! 4762                               0,
31065 7FAC                      0000            .word	0
31066 7FAE                      0000            .word	0
31067                                           ! 4763                             0,
31068 7FB0                      0000            .word	0
31069                                           ! 4764                                640,
31070 7FB2                      0280            .word	$280
31071                                           ! 4765                             0,
31072 7FB4                        00            .byte	0
31073                                           ! 4766                             0,
31074 7FB5                        00            .byte	0
31075                                           ! 4767                           5,
31076 7FB6                        05            .byte	5
31077                                           ! 4768                                10,
31078 7FB7                        0A            .byte	$A
31079                                           ! 4769                             5,
31080 7FB8                        05            .byte	5
31081                                           ! 4770                                  5,
31082 7FB9                        05            .byte	5
31083                                           ! 4771                            5,
31084 7FBA                        05            .byte	5
31085                                           ! 4772                                 0,
31086 7FBB                        00            .byte	0
31087                                           ! 4773                            1,
31088 7FBC                        01            .byte	1
31089                                           ! 4774                                 15,
31090 7FBD                        0F            .byte	$F
31091                                           ! 4775                          0,
31092 7FBE                      0000            .word	0
31093 7FC0                      0000            .word	0
31094                                           ! 4776 } },
31095                                           ! 4777 { 0x010e,
31096 7FC2                      010E            .word	$10E
31097                                           ! 4778 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31098 7FC4                      009B            .word	$9B
31099                                           ! 4779                           0x01 | 0x02 | 0x04,
31100 7FC6                        07            .byte	7
31101                                           ! 4780                
31102                                           ! 4780            0,
31103 7FC7                        00            .byte	0
31104                                           ! 4781                           64,
31105 7FC8                      0040            .word	$40
31106                                           ! 4782                    64,
31107 7FCA                      0040            .word	$40
31108                                           ! 4783                        0xA000,
31109 7FCC                      A000            .word	$A000
31110                                           ! 4784                        0x0000,
31111 7FCE                      0000            .word	0
31112                                           ! 4785                       0,
31113 7FD0                      0000            .word	0
31114 7FD2                      0000            .word	0
31115                                           ! 4786                             640,
31116 7FD4                      0280            .word	$280
31117                                           ! 4787                        320,
31118 7FD6                      0140            .word	$140
31119                                           ! 4788                        200,
31120 7FD8                      00C8            .word	$C8
31121                                           ! 4789                      8,
31122 7FDA                        08            .byte	8
31123                                           ! 4790                      16,
31124 7FDB                        10            .byte	$10
31125                                           ! 4791                           1,
31126 7FDC                        01            .byte	1
31127                                           ! 4792                         16,
31128 7FDD                        10            .byte	$10
31129                                           ! 4793                          2,
31130 7FDE                        02            .byte	2
31131                                           ! 4794                        0x06,
31132 7FDF                        06            .byte	6
31133                                           ! 4795                     0,
31134 7FE0                        00            .byte	0
31135                                           ! 4796                               130,
31136 7FE1                        82            .byte	$82
31137                                           ! 4797                          0,
31138 7FE2                        00            .byte	0
31139                                           ! 4798                        5,
31140 7FE3                        05            .byte	5
31141                                           ! 4799                             11,
31142 7FE4                        0B            .byte	$B
31143                                           ! 4800                          6,
31144 7FE5                        06            .byte	6
31145                                           ! 4801                               5,
31146 7FE6                        05            .byte	5
31147                                           ! 4802                         5,
31148 7FE7                        05            .byte	5
31149                                           ! 4803                              0,
31150 7FE8                        00            .byte	0
31151                                           ! 4804                         0,
31152 7FE9                        00            .byte	0
31153                                           ! 4805                              0,
31154 7FEA                        00            .byte	0
31155                                           ! 4806                                0,
31156 7FEB                        00            .byte	0
31157                                           ! 4807                        0xE0000000,
31158 7FEC                      0000            .word	0
31159 7FEE                      E000            .word	$E000
31160                                           ! 4808                               0,
31161 7FF0                      0000            .word	0
31162 7FF2                      0000            .word	0
31163                                           ! 4809                             0,
31164 7FF4                      0000            .word	0
31165                                           ! 4810                                640,
31166 7FF6                      0280            .word	$280
31167                                           ! 4811                             0,
31168 7FF8                        00            .byte	0
31169                                           ! 4812                             0,
31170 7FF9                        00            .byte	0
31171                                           ! 4813                           5,
31172 7FFA                        05            .byte	5
31173                                           ! 4814                                11,
31174 7FFB                        0B            .byte	$B
31175                                           ! 4815                             6,
31176 7FFC                        06            .byte	6
31177                                           ! 4816                                  5,
31178 7FFD                        05            .byte	5
31179                                           ! 4817                            5,
31180 7FFE                        05            .byte	5
31181                                           ! 4818                                 0,
31182 7FFF                        00            .byte	0
31183                                           ! 4819                            0,
31184 8000                        00            .byte	0
31185                                           ! 4820                                 0,
31186 8001                        00            .byte	0
31187                                           ! 4821                          0,
31188 8002                      0000            .word	0
31189 8004                      0000            .word	0
31190                                           ! 4822 } },
31191                                           ! 4823 { 0x010f,
31192 8006                      010F            .word	$10F
31193                                           ! 4824 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31194 8008                      009B            .word	$9B
31195                                           ! 4825                           0x01 | 0x02 | 0x04,
31196 800A                        07            .byte	7
31197                                           ! 4826                           0,
31198 800B                        00            .byte	0
31199                                           ! 4827                           64,
31200 800C                      0040            .word	$40
31201                                           ! 4828                    64,
31202 800E                      0040            .word	$40
31203                                           ! 4829                        0xA000,
31204 8010                      A000            .word	$A000
31205                                           ! 4830                        0x0000,
31206 8012                      0000            .word	0
31207                                           ! 4831                       0,
31208 8014                      0000            .word	0
31209 8016                      0000            .word	0
31210                                           ! 4832                             960,
31211 8018                      03C0            .word	$3C0
31212                                           ! 4833                        320,
31213 801A                      0140            .word	$140
31214                                           ! 4834                        200,
31215 801C                      00C8            .word	$C8
31216                                           ! 4835                      8,
31217 801E                        08            .byte	8
31218                                           ! 4836                      16,
31219 801F                        10            .byte	$10
31220                                           ! 4837                           1,
31221 8020                        01            .byte	1
31222                                           ! 4838                         24,
31223 8021                        18            .byte	$18
31224                                           ! 4839                          3,
31225 8022                        03            .byte	3
31226                                           ! 4840                        0x06,
31227 8023                        06            .byte	6
31228                                           ! 4841                     0,
31229 8024                        00            .byte	0
31230                                           ! 4842                               86,
31231 8025                        56            .byte	$56
31232                                           ! 4843                          0,
31233 8026                        00            .byte	0
31234                                           ! 4844                        8,
31235 8027                        08            .byte	8
31236                                           ! 4845                             16,
31237 8028                        10            .byte	$10
31238                                           ! 4846                          8,
31239 8029                        08            .byte	8
31240                                           ! 4847                               8,
31241 802A                        08            .byte	8
31242                                           ! 4848                         8,
31243 802B                        08            .byte	8
31244                                           ! 4849                              0,
31245 802C                        00            .byte	0
31246                                           ! 4850         
31247                                           ! 4850                 0,
31248 802D                        00            .byte	0
31249                                           ! 4851                              0,
31250 802E                        00            .byte	0
31251                                           ! 4852                                0,
31252 802F                        00            .byte	0
31253                                           ! 4853                        0xE0000000,
31254 8030                      0000            .word	0
31255 8032                      E000            .word	$E000
31256                                           ! 4854                               0,
31257 8034                      0000            .word	0
31258 8036                      0000            .word	0
31259                                           ! 4855                             0,
31260 8038                      0000            .word	0
31261                                           ! 4856                                960,
31262 803A                      03C0            .word	$3C0
31263                                           ! 4857                             0,
31264 803C                        00            .byte	0
31265                                           ! 4858                             0,
31266 803D                        00            .byte	0
31267                                           ! 4859                           8,
31268 803E                        08            .byte	8
31269                                           ! 4860                                16,
31270 803F                        10            .byte	$10
31271                                           ! 4861                             8,
31272 8040                        08            .byte	8
31273                                           ! 4862                                  8,
31274 8041                        08            .byte	8
31275                                           ! 4863                            8,
31276 8042                        08            .byte	8
31277                                           ! 4864                                 0,
31278 8043                        00            .byte	0
31279                                           ! 4865                            0,
31280 8044                        00            .byte	0
31281                                           ! 4866                                 0,
31282 8045                        00            .byte	0
31283                                           ! 4867                          0,
31284 8046                      0000            .word	0
31285 8048                      0000            .word	0
31286                                           ! 4868 } },
31287                                           ! 4869 { 0x0110,
31288 804A                      0110            .word	$110
31289                                           ! 4870 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31290 804C                      009B            .word	$9B
31291                                           ! 4871                           0x01 | 0x02 | 0x04,
31292 804E                        07            .byte	7
31293                                           ! 4872                           0,
31294 804F                        00            .byte	0
31295                                           ! 4873                           64,
31296 8050                      0040            .word	$40
31297                                           ! 4874                    64,
31298 8052                      0040            .word	$40
31299                                           ! 4875                        0xA000,
31300 8054                      A000            .word	$A000
31301                                           ! 4876                        0x0000,
31302 8056                      0000            .word	0
31303                                           ! 4877                       0,
31304 8058                      0000            .word	0
31305 805A                      0000            .word	0
31306                                           ! 4878                             1280,
31307 805C                      0500            .word	$500
31308                                           ! 4879                        640,
31309 805E                      0280            .word	$280
31310                                           ! 4880                        480,
31311 8060                      01E0            .word	$1E0
31312                                           ! 4881                      8,
31313 8062                        08            .byte	8
31314                                           ! 4882                      16,
31315 8063                        10            .byte	$10
31316                                           ! 4883                           1,
31317 8064                        01            .byte	1
31318                                           ! 4884                         15,
31319 8065                        0F            .byte	$F
31320                                           ! 4885                          10,
31321 8066                        0A            .byte	$A
31322                                           ! 4886                        0x06,
31323 8067                        06            .byte	6
31324                                           ! 4887                     0,
31325 8068                        00            .byte	0
31326                                           ! 4888                               26,
31327 8069                        1A            .byte	$1A
31328                                           ! 4889                          0,
31329 806A                        00            .byte	0
31330                                           ! 4890                        5,
31331 806B                        05            .byte	5
31332                                           ! 4891                             10,
31333 806C                        0A            .byte	$A
31334                                           ! 4892                          5,
31335 806D                        05            .byte	5
31336                                           ! 4893                               5,
31337 806E                        05            .byte	5
31338                                           ! 4894                         5,
31339 806F                        05            .byte	5
31340                                           ! 4895                              0,
31341 8070                        00            .byte	0
31342                                           ! 4896                         1,
31343 8071                        01            .byte	1
31344                                           ! 4897                              15,
31345 8072                        0F            .byte	$F
31346                                           ! 4898                                0,
31347 8073                        00            .byte	0
31348                                           ! 4899                        0xE0000000,
31349 8074                      0000            .word	0
31350 8076                      E000            .word	$E000
31351                                           ! 4900                               0,
31352 8078                      0000            .word	0
31353 807A                      0000            .word	0
31354                                           ! 4901                             0,
31355 807C                      0000            .word	0
31356                                           ! 4902                                1280,
31357 807E                      0500            .word	$500
31358                                           ! 4903                             0,
31359 8080                        00            .byte	0
31360                                           ! 4904                             0,
31361 8081                        00            .byte	0
31362                                           ! 4905                           5,
31363 8082                        05            .byte	5
31364                                           ! 4906                                10,
31365 8083                        0A            .byte	$A
31366                                           ! 4907                             5,
31367 8084                        05            .byte	5
31368                                           ! 4908                                  5,
31369 8085                        05            .byte	5
31370                                           ! 4909                            5,
31371 8086                        05            .byte	5
31372                                           ! 4910                                 0,
31373 8087                        00            .byte	0
31374                                           ! 4911                            1,
31375 8088                        01            .byte	1
31376                                           ! 4912                                 15,
31377 8089                        0F            .byte	$F
31378                                           ! 4913                          0,
31379 808A                      0000            .word	0
31380 808C                      0000            .word	0
31381                                           ! 4914 } },
31382                                           ! 4915 { 0x0111,
31383 808E                      0111            .word	$111
31384                                           ! 4916 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31385 8090                      009B            .word	$9B
31386                                           ! 4917                           0x01 | 0x02 | 0
31387                                           ! 4917 x04,
31388 8092                        07            .byte	7
31389                                           ! 4918                           0,
31390 8093                        00            .byte	0
31391                                           ! 4919                           64,
31392 8094                      0040            .word	$40
31393                                           ! 4920                    64,
31394 8096                      0040            .word	$40
31395                                           ! 4921                        0xA000,
31396 8098                      A000            .word	$A000
31397                                           ! 4922                        0x0000,
31398 809A                      0000            .word	0
31399                                           ! 4923                       0,
31400 809C                      0000            .word	0
31401 809E                      0000            .word	0
31402                                           ! 4924                             1280,
31403 80A0                      0500            .word	$500
31404                                           ! 4925                        640,
31405 80A2                      0280            .word	$280
31406                                           ! 4926                        480,
31407 80A4                      01E0            .word	$1E0
31408                                           ! 4927                      8,
31409 80A6                        08            .byte	8
31410                                           ! 4928                      16,
31411 80A7                        10            .byte	$10
31412                                           ! 4929                           1,
31413 80A8                        01            .byte	1
31414                                           ! 4930                         16,
31415 80A9                        10            .byte	$10
31416                                           ! 4931                          10,
31417 80AA                        0A            .byte	$A
31418                                           ! 4932                        0x06,
31419 80AB                        06            .byte	6
31420                                           ! 4933                     0,
31421 80AC                        00            .byte	0
31422                                           ! 4934                               26,
31423 80AD                        1A            .byte	$1A
31424                                           ! 4935                          0,
31425 80AE                        00            .byte	0
31426                                           ! 4936                        5,
31427 80AF                        05            .byte	5
31428                                           ! 4937                             11,
31429 80B0                        0B            .byte	$B
31430                                           ! 4938                          6,
31431 80B1                        06            .byte	6
31432                                           ! 4939                               5,
31433 80B2                        05            .byte	5
31434                                           ! 4940                         5,
31435 80B3                        05            .byte	5
31436                                           ! 4941                              0,
31437 80B4                        00            .byte	0
31438                                           ! 4942                         0,
31439 80B5                        00            .byte	0
31440                                           ! 4943                              0,
31441 80B6                        00            .byte	0
31442                                           ! 4944                                0,
31443 80B7                        00            .byte	0
31444                                           ! 4945                        0xE0000000,
31445 80B8                      0000            .word	0
31446 80BA                      E000            .word	$E000
31447                                           ! 4946                               0,
31448 80BC                      0000            .word	0
31449 80BE                      0000            .word	0
31450                                           ! 4947                             0,
31451 80C0                      0000            .word	0
31452                                           ! 4948                                1280,
31453 80C2                      0500            .word	$500
31454                                           ! 4949                             0,
31455 80C4                        00            .byte	0
31456                                           ! 4950                             0,
31457 80C5                        00            .byte	0
31458                                           ! 4951                           5,
31459 80C6                        05            .byte	5
31460                                           ! 4952                                11,
31461 80C7                        0B            .byte	$B
31462                                           ! 4953                             6,
31463 80C8                        06            .byte	6
31464                                           ! 4954                                  5,
31465 80C9                        05            .byte	5
31466                                           ! 4955                            5,
31467 80CA                        05            .byte	5
31468                                           ! 4956                                 0,
31469 80CB                        00            .byte	0
31470                                           ! 4957                            0,
31471 80CC                        00            .byte	0
31472                                           ! 4958                                 0,
31473 80CD                        00            .byte	0
31474                                           ! 4959                          0,
31475 80CE                      0000            .word	0
31476 80D0                      0000            .word	0
31477                                           ! 4960 } },
31478                                           ! 4961 { 0x0112,
31479 80D2                      0112            .word	$112
31480                                           ! 4962 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31481 80D4                      009B            .word	$9B
31482                                           ! 4963                           0x01 | 0x02 | 0x04,
31483 80D6                        07            .byte	7
31484                                           ! 4964                           0,
31485 80D7                        00            .byte	0
31486                                           ! 4965                           64,
31487 80D8                      0040            .word	$40
31488                                           ! 4966                    64,
31489 80DA                      0040            .word	$40
31490                                           ! 4967                        0xA000,
31491 80DC                      A000            .word	$A000
31492                                           ! 4968                        0x0000,
31493 80DE                      0000            .word	0
31494                                           ! 4969                       0,
31495 80E0                      0000            .word	0
31496 80E2                      0000            .word	0
31497                                           ! 4970                             1920,
31498 80E4                      0780            .word	$780
31499                                           ! 4971                        640,
31500 80E6                      0280            .word	$280
31501                                           ! 4972                        480,
31502 80E8                      01E0            .word	$1E0
31503                                           ! 4973                      8,
31504 80EA                        08            .byte	8
31505                                           ! 4974                      16,
31506 80EB                        10            .byte	$10
31507                                           ! 4975                           1,
31508 80EC                        01            .byte	1
31509                                           ! 4976                         24,
31510 80ED                        18            .byte	$18
31511                                           ! 4977                          15,
31512 80EE                        0F            .byte	$F
31513                                           ! 4978                        0x06,
31514 80EF                        06            .byte	6
31515                                           ! 4979                     0,
31516 80F0                        00            .byte	0
31517                                           ! 4980                               17,
31518 80F1                        11            .byte	$11
31519                                           ! 4981                          0,
31520 80F2                        00            .byte	0
31521                                           ! 4982                        8,
31522 80F3                        08            .byte	8
31523                                           ! 4983                             16,
31524 80F4                        10            .byte	$10
31525                                           ! 4984                          8,
31526 80F5                        08            .byte	8
31527                                           ! 4985                               8,
31528 80F6                        08            .byte	8
31529                                           ! 4986                         8,
31530 80F7                        08            .byte	8
31531                                           ! 4987                 
31532                                           ! 4987              0,
31533 80F8                        00            .byte	0
31534                                           ! 4988                         0,
31535 80F9                        00            .byte	0
31536                                           ! 4989                              0,
31537 80FA                        00            .byte	0
31538                                           ! 4990                                0,
31539 80FB                        00            .byte	0
31540                                           ! 4991                        0xE0000000,
31541 80FC                      0000            .word	0
31542 80FE                      E000            .word	$E000
31543                                           ! 4992                               0,
31544 8100                      0000            .word	0
31545 8102                      0000            .word	0
31546                                           ! 4993                             0,
31547 8104                      0000            .word	0
31548                                           ! 4994                                1920,
31549 8106                      0780            .word	$780
31550                                           ! 4995                             0,
31551 8108                        00            .byte	0
31552                                           ! 4996                             0,
31553 8109                        00            .byte	0
31554                                           ! 4997                           8,
31555 810A                        08            .byte	8
31556                                           ! 4998                                16,
31557 810B                        10            .byte	$10
31558                                           ! 4999                             8,
31559 810C                        08            .byte	8
31560                                           ! 5000                                  8,
31561 810D                        08            .byte	8
31562                                           ! 5001                            8,
31563 810E                        08            .byte	8
31564                                           ! 5002                                 0,
31565 810F                        00            .byte	0
31566                                           ! 5003                            0,
31567 8110                        00            .byte	0
31568                                           ! 5004                                 0,
31569 8111                        00            .byte	0
31570                                           ! 5005                          0,
31571 8112                      0000            .word	0
31572 8114                      0000            .word	0
31573                                           ! 5006 } },
31574                                           ! 5007 { 0x0113,
31575 8116                      0113            .word	$113
31576                                           ! 5008 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31577 8118                      009B            .word	$9B
31578                                           ! 5009                           0x01 | 0x02 | 0x04,
31579 811A                        07            .byte	7
31580                                           ! 5010                           0,
31581 811B                        00            .byte	0
31582                                           ! 5011                           64,
31583 811C                      0040            .word	$40
31584                                           ! 5012                    64,
31585 811E                      0040            .word	$40
31586                                           ! 5013                        0xA000,
31587 8120                      A000            .word	$A000
31588                                           ! 5014                        0x0000,
31589 8122                      0000            .word	0
31590                                           ! 5015                       0,
31591 8124                      0000            .word	0
31592 8126                      0000            .word	0
31593                                           ! 5016                             1600,
31594 8128                      0640            .word	$640
31595                                           ! 5017                        800,
31596 812A                      0320            .word	$320
31597                                           ! 5018                        600,
31598 812C                      0258            .word	$258
31599                                           ! 5019                      8,
31600 812E                        08            .byte	8
31601                                           ! 5020                      16,
31602 812F                        10            .byte	$10
31603                                           ! 5021                           1,
31604 8130                        01            .byte	1
31605                                           ! 5022                         15,
31606 8131                        0F            .byte	$F
31607                                           ! 5023                          15,
31608 8132                        0F            .byte	$F
31609                                           ! 5024                        0x06,
31610 8133                        06            .byte	6
31611                                           ! 5025                     0,
31612 8134                        00            .byte	0
31613                                           ! 5026                               16,
31614 8135                        10            .byte	$10
31615                                           ! 5027                          0,
31616 8136                        00            .byte	0
31617                                           ! 5028                        5,
31618 8137                        05            .byte	5
31619                                           ! 5029                             10,
31620 8138                        0A            .byte	$A
31621                                           ! 5030                          5,
31622 8139                        05            .byte	5
31623                                           ! 5031                               5,
31624 813A                        05            .byte	5
31625                                           ! 5032                         5,
31626 813B                        05            .byte	5
31627                                           ! 5033                              0,
31628 813C                        00            .byte	0
31629                                           ! 5034                         1,
31630 813D                        01            .byte	1
31631                                           ! 5035                              15,
31632 813E                        0F            .byte	$F
31633                                           ! 5036                                0,
31634 813F                        00            .byte	0
31635                                           ! 5037                        0xE0000000,
31636 8140                      0000            .word	0
31637 8142                      E000            .word	$E000
31638                                           ! 5038                               0,
31639 8144                      0000            .word	0
31640 8146                      0000            .word	0
31641                                           ! 5039                             0,
31642 8148                      0000            .word	0
31643                                           ! 5040                                1600,
31644 814A                      0640            .word	$640
31645                                           ! 5041                             0,
31646 814C                        00            .byte	0
31647                                           ! 5042                             0,
31648 814D                        00            .byte	0
31649                                           ! 5043                           5,
31650 814E                        05            .byte	5
31651                                           ! 5044                                10,
31652 814F                        0A            .byte	$A
31653                                           ! 5045                             5,
31654 8150                        05            .byte	5
31655                                           ! 5046                                  5,
31656 8151                        05            .byte	5
31657                                           ! 5047                            5,
31658 8152                        05            .byte	5
31659                                           ! 5048                                 0,
31660 8153                        00            .byte	0
31661                                           ! 5049                            1,
31662 8154                        01            .byte	1
31663                                           ! 5050                                 15,
31664 8155                        0F            .byte	$F
31665                                           ! 5051                          0,
31666 8156                      0000            .word	0
31667 8158                      0000            .word	0
31668                                           ! 5052 } },
31669                                           ! 5053 { 0x0114,
31670 815A                      0114            .word	$114
31671                                           ! 5054 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31672 815C                      009B            .word	$9B
31673                                           ! 5055                 
31674                                           ! 5055           0x01 | 0x02 | 0x04,
31675 815E                        07            .byte	7
31676                                           ! 5056                           0,
31677 815F                        00            .byte	0
31678                                           ! 5057                           64,
31679 8160                      0040            .word	$40
31680                                           ! 5058                    64,
31681 8162                      0040            .word	$40
31682                                           ! 5059                        0xA000,
31683 8164                      A000            .word	$A000
31684                                           ! 5060                        0x0000,
31685 8166                      0000            .word	0
31686                                           ! 5061                       0,
31687 8168                      0000            .word	0
31688 816A                      0000            .word	0
31689                                           ! 5062                             1600,
31690 816C                      0640            .word	$640
31691                                           ! 5063                        800,
31692 816E                      0320            .word	$320
31693                                           ! 5064                        600,
31694 8170                      0258            .word	$258
31695                                           ! 5065                      8,
31696 8172                        08            .byte	8
31697                                           ! 5066                      16,
31698 8173                        10            .byte	$10
31699                                           ! 5067                           1,
31700 8174                        01            .byte	1
31701                                           ! 5068                         16,
31702 8175                        10            .byte	$10
31703                                           ! 5069                          15,
31704 8176                        0F            .byte	$F
31705                                           ! 5070                        0x06,
31706 8177                        06            .byte	6
31707                                           ! 5071                     0,
31708 8178                        00            .byte	0
31709                                           ! 5072                               16,
31710 8179                        10            .byte	$10
31711                                           ! 5073                          0,
31712 817A                        00            .byte	0
31713                                           ! 5074                        5,
31714 817B                        05            .byte	5
31715                                           ! 5075                             11,
31716 817C                        0B            .byte	$B
31717                                           ! 5076                          6,
31718 817D                        06            .byte	6
31719                                           ! 5077                               5,
31720 817E                        05            .byte	5
31721                                           ! 5078                         5,
31722 817F                        05            .byte	5
31723                                           ! 5079                              0,
31724 8180                        00            .byte	0
31725                                           ! 5080                         0,
31726 8181                        00            .byte	0
31727                                           ! 5081                              0,
31728 8182                        00            .byte	0
31729                                           ! 5082                                0,
31730 8183                        00            .byte	0
31731                                           ! 5083                        0xE0000000,
31732 8184                      0000            .word	0
31733 8186                      E000            .word	$E000
31734                                           ! 5084                               0,
31735 8188                      0000            .word	0
31736 818A                      0000            .word	0
31737                                           ! 5085                             0,
31738 818C                      0000            .word	0
31739                                           ! 5086                                1600,
31740 818E                      0640            .word	$640
31741                                           ! 5087                             0,
31742 8190                        00            .byte	0
31743                                           ! 5088                             0,
31744 8191                        00            .byte	0
31745                                           ! 5089                           5,
31746 8192                        05            .byte	5
31747                                           ! 5090                                11,
31748 8193                        0B            .byte	$B
31749                                           ! 5091                             6,
31750 8194                        06            .byte	6
31751                                           ! 5092                                  5,
31752 8195                        05            .byte	5
31753                                           ! 5093                            5,
31754 8196                        05            .byte	5
31755                                           ! 5094                                 0,
31756 8197                        00            .byte	0
31757                                           ! 5095                            0,
31758 8198                        00            .byte	0
31759                                           ! 5096                                 0,
31760 8199                        00            .byte	0
31761                                           ! 5097                          0,
31762 819A                      0000            .word	0
31763 819C                      0000            .word	0
31764                                           ! 5098 } },
31765                                           ! 5099 { 0x0115,
31766 819E                      0115            .word	$115
31767                                           ! 5100 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31768 81A0                      009B            .word	$9B
31769                                           ! 5101                           0x01 | 0x02 | 0x04,
31770 81A2                        07            .byte	7
31771                                           ! 5102                           0,
31772 81A3                        00            .byte	0
31773                                           ! 5103                           64,
31774 81A4                      0040            .word	$40
31775                                           ! 5104                    64,
31776 81A6                      0040            .word	$40
31777                                           ! 5105                        0xA000,
31778 81A8                      A000            .word	$A000
31779                                           ! 5106                        0x0000,
31780 81AA                      0000            .word	0
31781                                           ! 5107                       0,
31782 81AC                      0000            .word	0
31783 81AE                      0000            .word	0
31784                                           ! 5108                             2400,
31785 81B0                      0960            .word	$960
31786                                           ! 5109                        800,
31787 81B2                      0320            .word	$320
31788                                           ! 5110                        600,
31789 81B4                      0258            .word	$258
31790                                           ! 5111                      8,
31791 81B6                        08            .byte	8
31792                                           ! 5112                      16,
31793 81B7                        10            .byte	$10
31794                                           ! 5113                           1,
31795 81B8                        01            .byte	1
31796                                           ! 5114                         24,
31797 81B9                        18            .byte	$18
31798                                           ! 5115                          22,
31799 81BA                        16            .byte	$16
31800                                           ! 5116                        0x06,
31801 81BB                        06            .byte	6
31802                                           ! 5117                     0,
31803 81BC                        00            .byte	0
31804                                           ! 5118                               10,
31805 81BD                        0A            .byte	$A
31806                                           ! 5119                          0,
31807 81BE                        00            .byte	0
31808                                           ! 5120                        8,
31809 81BF                        08            .byte	8
31810                                           ! 5121                             16,
31811 81C0                        10            .byte	$10
31812                                           ! 5122                          8,
31813 81C1                        08            .byte	8
31814                                           ! 5123                               8,
31815 81C2                        08            .byte	8
31816                                           ! 5124                   
31817                                           ! 5124       8,
31818 81C3                        08            .byte	8
31819                                           ! 5125                              0,
31820 81C4                        00            .byte	0
31821                                           ! 5126                         0,
31822 81C5                        00            .byte	0
31823                                           ! 5127                              0,
31824 81C6                        00            .byte	0
31825                                           ! 5128                                0,
31826 81C7                        00            .byte	0
31827                                           ! 5129                        0xE0000000,
31828 81C8                      0000            .word	0
31829 81CA                      E000            .word	$E000
31830                                           ! 5130                               0,
31831 81CC                      0000            .word	0
31832 81CE                      0000            .word	0
31833                                           ! 5131                             0,
31834 81D0                      0000            .word	0
31835                                           ! 5132                                2400,
31836 81D2                      0960            .word	$960
31837                                           ! 5133                             0,
31838 81D4                        00            .byte	0
31839                                           ! 5134                             0,
31840 81D5                        00            .byte	0
31841                                           ! 5135                           8,
31842 81D6                        08            .byte	8
31843                                           ! 5136                                16,
31844 81D7                        10            .byte	$10
31845                                           ! 5137                             8,
31846 81D8                        08            .byte	8
31847                                           ! 5138                                  8,
31848 81D9                        08            .byte	8
31849                                           ! 5139                            8,
31850 81DA                        08            .byte	8
31851                                           ! 5140                                 0,
31852 81DB                        00            .byte	0
31853                                           ! 5141                            0,
31854 81DC                        00            .byte	0
31855                                           ! 5142                                 0,
31856 81DD                        00            .byte	0
31857                                           ! 5143                          0,
31858 81DE                      0000            .word	0
31859 81E0                      0000            .word	0
31860                                           ! 5144 } },
31861                                           ! 5145 { 0x0116,
31862 81E2                      0116            .word	$116
31863                                           ! 5146 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31864 81E4                      009B            .word	$9B
31865                                           ! 5147                           0x01 | 0x02 | 0x04,
31866 81E6                        07            .byte	7
31867                                           ! 5148                           0,
31868 81E7                        00            .byte	0
31869                                           ! 5149                           64,
31870 81E8                      0040            .word	$40
31871                                           ! 5150                    64,
31872 81EA                      0040            .word	$40
31873                                           ! 5151                        0xA000,
31874 81EC                      A000            .word	$A000
31875                                           ! 5152                        0x0000,
31876 81EE                      0000            .word	0
31877                                           ! 5153                       0,
31878 81F0                      0000            .word	0
31879 81F2                      0000            .word	0
31880                                           ! 5154                             2048,
31881 81F4                      0800            .word	$800
31882                                           ! 5155                        1024,
31883 81F6                      0400            .word	$400
31884                                           ! 5156                        768,
31885 81F8                      0300            .word	$300
31886                                           ! 5157                      8,
31887 81FA                        08            .byte	8
31888                                           ! 5158                      16,
31889 81FB                        10            .byte	$10
31890                                           ! 5159                           1,
31891 81FC                        01            .byte	1
31892                                           ! 5160                         15,
31893 81FD                        0F            .byte	$F
31894                                           ! 5161                          24,
31895 81FE                        18            .byte	$18
31896                                           ! 5162                        0x06,
31897 81FF                        06            .byte	6
31898                                           ! 5163                     0,
31899 8200                        00            .byte	0
31900                                           ! 5164                               9,
31901 8201                        09            .byte	9
31902                                           ! 5165                          0,
31903 8202                        00            .byte	0
31904                                           ! 5166                        5,
31905 8203                        05            .byte	5
31906                                           ! 5167                             10,
31907 8204                        0A            .byte	$A
31908                                           ! 5168                          5,
31909 8205                        05            .byte	5
31910                                           ! 5169                               5,
31911 8206                        05            .byte	5
31912                                           ! 5170                         5,
31913 8207                        05            .byte	5
31914                                           ! 5171                              0,
31915 8208                        00            .byte	0
31916                                           ! 5172                         1,
31917 8209                        01            .byte	1
31918                                           ! 5173                              15,
31919 820A                        0F            .byte	$F
31920                                           ! 5174                                0,
31921 820B                        00            .byte	0
31922                                           ! 5175                        0xE0000000,
31923 820C                      0000            .word	0
31924 820E                      E000            .word	$E000
31925                                           ! 5176                               0,
31926 8210                      0000            .word	0
31927 8212                      0000            .word	0
31928                                           ! 5177                             0,
31929 8214                      0000            .word	0
31930                                           ! 5178                                2048,
31931 8216                      0800            .word	$800
31932                                           ! 5179                             0,
31933 8218                        00            .byte	0
31934                                           ! 5180                             0,
31935 8219                        00            .byte	0
31936                                           ! 5181                           5,
31937 821A                        05            .byte	5
31938                                           ! 5182                                10,
31939 821B                        0A            .byte	$A
31940                                           ! 5183                             5,
31941 821C                        05            .byte	5
31942                                           ! 5184                                  5,
31943 821D                        05            .byte	5
31944                                           ! 5185                            5,
31945 821E                        05            .byte	5
31946                                           ! 5186                                 0,
31947 821F                        00            .byte	0
31948                                           ! 5187                            1,
31949 8220                        01            .byte	1
31950                                           ! 5188                                 15,
31951 8221                        0F            .byte	$F
31952                                           ! 5189                          0,
31953 8222                      0000            .word	0
31954 8224                      0000            .word	0
31955                                           ! 5190 } },
31956                                           ! 5191 { 0x0117,
31957 8226                      0117            .word	$117
31958                                           ! 5192 { 0x0001 | 0x0002 | 0x0008 | 0x0080 |
31959                                           ! 5192  0x0010,
31960 8228                      009B            .word	$9B
31961                                           ! 5193                           0x01 | 0x02 | 0x04,
31962 822A                        07            .byte	7
31963                                           ! 5194                           0,
31964 822B                        00            .byte	0
31965                                           ! 5195                           64,
31966 822C                      0040            .word	$40
31967                                           ! 5196                    64,
31968 822E                      0040            .word	$40
31969                                           ! 5197                        0xA000,
31970 8230                      A000            .word	$A000
31971                                           ! 5198                        0x0000,
31972 8232                      0000            .word	0
31973                                           ! 5199                       0,
31974 8234                      0000            .word	0
31975 8236                      0000            .word	0
31976                                           ! 5200                             2048,
31977 8238                      0800            .word	$800
31978                                           ! 5201                        1024,
31979 823A                      0400            .word	$400
31980                                           ! 5202                        768,
31981 823C                      0300            .word	$300
31982                                           ! 5203                      8,
31983 823E                        08            .byte	8
31984                                           ! 5204                      16,
31985 823F                        10            .byte	$10
31986                                           ! 5205                           1,
31987 8240                        01            .byte	1
31988                                           ! 5206                         16,
31989 8241                        10            .byte	$10
31990                                           ! 5207                          24,
31991 8242                        18            .byte	$18
31992                                           ! 5208                        0x06,
31993 8243                        06            .byte	6
31994                                           ! 5209                     0,
31995 8244                        00            .byte	0
31996                                           ! 5210                               9,
31997 8245                        09            .byte	9
31998                                           ! 5211                          0,
31999 8246                        00            .byte	0
32000                                           ! 5212                        5,
32001 8247                        05            .byte	5
32002                                           ! 5213                             11,
32003 8248                        0B            .byte	$B
32004                                           ! 5214                          6,
32005 8249                        06            .byte	6
32006                                           ! 5215                               5,
32007 824A                        05            .byte	5
32008                                           ! 5216                         5,
32009 824B                        05            .byte	5
32010                                           ! 5217                              0,
32011 824C                        00            .byte	0
32012                                           ! 5218                         0,
32013 824D                        00            .byte	0
32014                                           ! 5219                              0,
32015 824E                        00            .byte	0
32016                                           ! 5220                                0,
32017 824F                        00            .byte	0
32018                                           ! 5221                        0xE0000000,
32019 8250                      0000            .word	0
32020 8252                      E000            .word	$E000
32021                                           ! 5222                               0,
32022 8254                      0000            .word	0
32023 8256                      0000            .word	0
32024                                           ! 5223                             0,
32025 8258                      0000            .word	0
32026                                           ! 5224                                2048,
32027 825A                      0800            .word	$800
32028                                           ! 5225                             0,
32029 825C                        00            .byte	0
32030                                           ! 5226                             0,
32031 825D                        00            .byte	0
32032                                           ! 5227                           5,
32033 825E                        05            .byte	5
32034                                           ! 5228                                11,
32035 825F                        0B            .byte	$B
32036                                           ! 5229                             6,
32037 8260                        06            .byte	6
32038                                           ! 5230                                  5,
32039 8261                        05            .byte	5
32040                                           ! 5231                            5,
32041 8262                        05            .byte	5
32042                                           ! 5232                                 0,
32043 8263                        00            .byte	0
32044                                           ! 5233                            0,
32045 8264                        00            .byte	0
32046                                           ! 5234                                 0,
32047 8265                        00            .byte	0
32048                                           ! 5235                          0,
32049 8266                      0000            .word	0
32050 8268                      0000            .word	0
32051                                           ! 5236 } },
32052                                           ! 5237 { 0x0118,
32053 826A                      0118            .word	$118
32054                                           ! 5238 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32055 826C                      009B            .word	$9B
32056                                           ! 5239                           0x01 | 0x02 | 0x04,
32057 826E                        07            .byte	7
32058                                           ! 5240                           0,
32059 826F                        00            .byte	0
32060                                           ! 5241                           64,
32061 8270                      0040            .word	$40
32062                                           ! 5242                    64,
32063 8272                      0040            .word	$40
32064                                           ! 5243                        0xA000,
32065 8274                      A000            .word	$A000
32066                                           ! 5244                        0x0000,
32067 8276                      0000            .word	0
32068                                           ! 5245                       0,
32069 8278                      0000            .word	0
32070 827A                      0000            .word	0
32071                                           ! 5246                             3072,
32072 827C                      0C00            .word	$C00
32073                                           ! 5247                        1024,
32074 827E                      0400            .word	$400
32075                                           ! 5248                        768,
32076 8280                      0300            .word	$300
32077                                           ! 5249                      8,
32078 8282                        08            .byte	8
32079                                           ! 5250                      16,
32080 8283                        10            .byte	$10
32081                                           ! 5251                           1,
32082 8284                        01            .byte	1
32083                                           ! 5252                         24,
32084 8285                        18            .byte	$18
32085                                           ! 5253                          36,
32086 8286                        24            .byte	$24
32087                                           ! 5254                        0x06,
32088 8287                        06            .byte	6
32089                                           ! 5255                     0,
32090 8288                        00            .byte	0
32091                                           ! 5256                               6,
32092 8289                        06            .byte	6
32093                                           ! 5257                          0,
32094 828A                        00            .byte	0
32095                                           ! 5258                        8,
32096 828B                        08            .byte	8
32097                                           ! 5259                             16,
32098 828C                        10            .byte	$10
32099                                           ! 5260                          8,
32100 828D                        08            .byte	8
32101                                           ! 5261                           
32102                                           ! 5261     8,
32103 828E                        08            .byte	8
32104                                           ! 5262                         8,
32105 828F                        08            .byte	8
32106                                           ! 5263                              0,
32107 8290                        00            .byte	0
32108                                           ! 5264                         0,
32109 8291                        00            .byte	0
32110                                           ! 5265                              0,
32111 8292                        00            .byte	0
32112                                           ! 5266                                0,
32113 8293                        00            .byte	0
32114                                           ! 5267                        0xE0000000,
32115 8294                      0000            .word	0
32116 8296                      E000            .word	$E000
32117                                           ! 5268                               0,
32118 8298                      0000            .word	0
32119 829A                      0000            .word	0
32120                                           ! 5269                             0,
32121 829C                      0000            .word	0
32122                                           ! 5270                                3072,
32123 829E                      0C00            .word	$C00
32124                                           ! 5271                             0,
32125 82A0                        00            .byte	0
32126                                           ! 5272                             0,
32127 82A1                        00            .byte	0
32128                                           ! 5273                           8,
32129 82A2                        08            .byte	8
32130                                           ! 5274                                16,
32131 82A3                        10            .byte	$10
32132                                           ! 5275                             8,
32133 82A4                        08            .byte	8
32134                                           ! 5276                                  8,
32135 82A5                        08            .byte	8
32136                                           ! 5277                            8,
32137 82A6                        08            .byte	8
32138                                           ! 5278                                 0,
32139 82A7                        00            .byte	0
32140                                           ! 5279                            0,
32141 82A8                        00            .byte	0
32142                                           ! 5280                                 0,
32143 82A9                        00            .byte	0
32144                                           ! 5281                          0,
32145 82AA                      0000            .word	0
32146 82AC                      0000            .word	0
32147                                           ! 5282 } },
32148                                           ! 5283 { 0x0119,
32149 82AE                      0119            .word	$119
32150                                           ! 5284 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32151 82B0                      009B            .word	$9B
32152                                           ! 5285                           0x01 | 0x02 | 0x04,
32153 82B2                        07            .byte	7
32154                                           ! 5286                           0,
32155 82B3                        00            .byte	0
32156                                           ! 5287                           64,
32157 82B4                      0040            .word	$40
32158                                           ! 5288                    64,
32159 82B6                      0040            .word	$40
32160                                           ! 5289                        0xA000,
32161 82B8                      A000            .word	$A000
32162                                           ! 5290                        0x0000,
32163 82BA                      0000            .word	0
32164                                           ! 5291                       0,
32165 82BC                      0000            .word	0
32166 82BE                      0000            .word	0
32167                                           ! 5292                             2560,
32168 82C0                      0A00            .word	$A00
32169                                           ! 5293                        1280,
32170 82C2                      0500            .word	$500
32171                                           ! 5294                        1024,
32172 82C4                      0400            .word	$400
32173                                           ! 5295                      8,
32174 82C6                        08            .byte	8
32175                                           ! 5296                      16,
32176 82C7                        10            .byte	$10
32177                                           ! 5297                           1,
32178 82C8                        01            .byte	1
32179                                           ! 5298                         15,
32180 82C9                        0F            .byte	$F
32181                                           ! 5299                          40,
32182 82CA                        28            .byte	$28
32183                                           ! 5300                        0x06,
32184 82CB                        06            .byte	6
32185                                           ! 5301                     0,
32186 82CC                        00            .byte	0
32187                                           ! 5302                               5,
32188 82CD                        05            .byte	5
32189                                           ! 5303                          0,
32190 82CE                        00            .byte	0
32191                                           ! 5304                        5,
32192 82CF                        05            .byte	5
32193                                           ! 5305                             10,
32194 82D0                        0A            .byte	$A
32195                                           ! 5306                          5,
32196 82D1                        05            .byte	5
32197                                           ! 5307                               5,
32198 82D2                        05            .byte	5
32199                                           ! 5308                         5,
32200 82D3                        05            .byte	5
32201                                           ! 5309                              0,
32202 82D4                        00            .byte	0
32203                                           ! 5310                         1,
32204 82D5                        01            .byte	1
32205                                           ! 5311                              15,
32206 82D6                        0F            .byte	$F
32207                                           ! 5312                                0,
32208 82D7                        00            .byte	0
32209                                           ! 5313                        0xE0000000,
32210 82D8                      0000            .word	0
32211 82DA                      E000            .word	$E000
32212                                           ! 5314                               0,
32213 82DC                      0000            .word	0
32214 82DE                      0000            .word	0
32215                                           ! 5315                             0,
32216 82E0                      0000            .word	0
32217                                           ! 5316                                2560,
32218 82E2                      0A00            .word	$A00
32219                                           ! 5317                             0,
32220 82E4                        00            .byte	0
32221                                           ! 5318                             0,
32222 82E5                        00            .byte	0
32223                                           ! 5319                           5,
32224 82E6                        05            .byte	5
32225                                           ! 5320                                10,
32226 82E7                        0A            .byte	$A
32227                                           ! 5321                             5,
32228 82E8                        05            .byte	5
32229                                           ! 5322                                  5,
32230 82E9                        05            .byte	5
32231                                           ! 5323                            5,
32232 82EA                        05            .byte	5
32233                                           ! 5324                                 0,
32234 82EB                        00            .byte	0
32235                                           ! 5325                            1,
32236 82EC                        01            .byte	1
32237                                           ! 5326                                 15,
32238 82ED                        0F            .byte	$F
32239                                           ! 5327                          0,
32240 82EE                      0000            .word	0
32241 82F0                      0000            .word	0
32242                                           ! 5328 } },
32243                                           ! 5329 { 0x011a,
32244 82F2                      011A            .word	$11A
32245                                           ! 5330 { 0x0001 | 
32246                                           ! 5330 0x0002 | 0x0008 | 0x0080 | 0x0010,
32247 82F4                      009B            .word	$9B
32248                                           ! 5331                           0x01 | 0x02 | 0x04,
32249 82F6                        07            .byte	7
32250                                           ! 5332                           0,
32251 82F7                        00            .byte	0
32252                                           ! 5333                           64,
32253 82F8                      0040            .word	$40
32254                                           ! 5334                    64,
32255 82FA                      0040            .word	$40
32256                                           ! 5335                        0xA000,
32257 82FC                      A000            .word	$A000
32258                                           ! 5336                        0x0000,
32259 82FE                      0000            .word	0
32260                                           ! 5337                       0,
32261 8300                      0000            .word	0
32262 8302                      0000            .word	0
32263                                           ! 5338                             2560,
32264 8304                      0A00            .word	$A00
32265                                           ! 5339                        1280,
32266 8306                      0500            .word	$500
32267                                           ! 5340                        1024,
32268 8308                      0400            .word	$400
32269                                           ! 5341                      8,
32270 830A                        08            .byte	8
32271                                           ! 5342                      16,
32272 830B                        10            .byte	$10
32273                                           ! 5343                           1,
32274 830C                        01            .byte	1
32275                                           ! 5344                         16,
32276 830D                        10            .byte	$10
32277                                           ! 5345                          40,
32278 830E                        28            .byte	$28
32279                                           ! 5346                        0x06,
32280 830F                        06            .byte	6
32281                                           ! 5347                     0,
32282 8310                        00            .byte	0
32283                                           ! 5348                               5,
32284 8311                        05            .byte	5
32285                                           ! 5349                          0,
32286 8312                        00            .byte	0
32287                                           ! 5350                        5,
32288 8313                        05            .byte	5
32289                                           ! 5351                             11,
32290 8314                        0B            .byte	$B
32291                                           ! 5352                          6,
32292 8315                        06            .byte	6
32293                                           ! 5353                               5,
32294 8316                        05            .byte	5
32295                                           ! 5354                         5,
32296 8317                        05            .byte	5
32297                                           ! 5355                              0,
32298 8318                        00            .byte	0
32299                                           ! 5356                         0,
32300 8319                        00            .byte	0
32301                                           ! 5357                              0,
32302 831A                        00            .byte	0
32303                                           ! 5358                                0,
32304 831B                        00            .byte	0
32305                                           ! 5359                        0xE0000000,
32306 831C                      0000            .word	0
32307 831E                      E000            .word	$E000
32308                                           ! 5360                               0,
32309 8320                      0000            .word	0
32310 8322                      0000            .word	0
32311                                           ! 5361                             0,
32312 8324                      0000            .word	0
32313                                           ! 5362                                2560,
32314 8326                      0A00            .word	$A00
32315                                           ! 5363                             0,
32316 8328                        00            .byte	0
32317                                           ! 5364                             0,
32318 8329                        00            .byte	0
32319                                           ! 5365                           5,
32320 832A                        05            .byte	5
32321                                           ! 5366                                11,
32322 832B                        0B            .byte	$B
32323                                           ! 5367                             6,
32324 832C                        06            .byte	6
32325                                           ! 5368                                  5,
32326 832D                        05            .byte	5
32327                                           ! 5369                            5,
32328 832E                        05            .byte	5
32329                                           ! 5370                                 0,
32330 832F                        00            .byte	0
32331                                           ! 5371                            0,
32332 8330                        00            .byte	0
32333                                           ! 5372                                 0,
32334 8331                        00            .byte	0
32335                                           ! 5373                          0,
32336 8332                      0000            .word	0
32337 8334                      0000            .word	0
32338                                           ! 5374 } },
32339                                           ! 5375 { 0x011b,
32340 8336                      011B            .word	$11B
32341                                           ! 5376 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32342 8338                      009B            .word	$9B
32343                                           ! 5377                           0x01 | 0x02 | 0x04,
32344 833A                        07            .byte	7
32345                                           ! 5378                           0,
32346 833B                        00            .byte	0
32347                                           ! 5379                           64,
32348 833C                      0040            .word	$40
32349                                           ! 5380                    64,
32350 833E                      0040            .word	$40
32351                                           ! 5381                        0xA000,
32352 8340                      A000            .word	$A000
32353                                           ! 5382                        0x0000,
32354 8342                      0000            .word	0
32355                                           ! 5383                       0,
32356 8344                      0000            .word	0
32357 8346                      0000            .word	0
32358                                           ! 5384                             3840,
32359 8348                      0F00            .word	$F00
32360                                           ! 5385                        1280,
32361 834A                      0500            .word	$500
32362                                           ! 5386                        1024,
32363 834C                      0400            .word	$400
32364                                           ! 5387                      8,
32365 834E                        08            .byte	8
32366                                           ! 5388                      16,
32367 834F                        10            .byte	$10
32368                                           ! 5389                           1,
32369 8350                        01            .byte	1
32370                                           ! 5390                         24,
32371 8351                        18            .byte	$18
32372                                           ! 5391                          60,
32373 8352                        3C            .byte	$3C
32374                                           ! 5392                        0x06,
32375 8353                        06            .byte	6
32376                                           ! 5393                     0,
32377 8354                        00            .byte	0
32378                                           ! 5394                               3,
32379 8355                        03            .byte	3
32380                                           ! 5395                          0,
32381 8356                        00            .byte	0
32382                                           ! 5396                        8,
32383 8357                        08            .byte	8
32384                                           ! 5397                             16,
32385 8358                        10            .byte	$10
32386                                           ! 5398                          8
32387                                           ! 5398 ,
32388 8359                        08            .byte	8
32389                                           ! 5399                               8,
32390 835A                        08            .byte	8
32391                                           ! 5400                         8,
32392 835B                        08            .byte	8
32393                                           ! 5401                              0,
32394 835C                        00            .byte	0
32395                                           ! 5402                         0,
32396 835D                        00            .byte	0
32397                                           ! 5403                              0,
32398 835E                        00            .byte	0
32399                                           ! 5404                                0,
32400 835F                        00            .byte	0
32401                                           ! 5405                        0xE0000000,
32402 8360                      0000            .word	0
32403 8362                      E000            .word	$E000
32404                                           ! 5406                               0,
32405 8364                      0000            .word	0
32406 8366                      0000            .word	0
32407                                           ! 5407                             0,
32408 8368                      0000            .word	0
32409                                           ! 5408                                3840,
32410 836A                      0F00            .word	$F00
32411                                           ! 5409                             0,
32412 836C                        00            .byte	0
32413                                           ! 5410                             0,
32414 836D                        00            .byte	0
32415                                           ! 5411                           8,
32416 836E                        08            .byte	8
32417                                           ! 5412                                16,
32418 836F                        10            .byte	$10
32419                                           ! 5413                             8,
32420 8370                        08            .byte	8
32421                                           ! 5414                                  8,
32422 8371                        08            .byte	8
32423                                           ! 5415                            8,
32424 8372                        08            .byte	8
32425                                           ! 5416                                 0,
32426 8373                        00            .byte	0
32427                                           ! 5417                            0,
32428 8374                        00            .byte	0
32429                                           ! 5418                                 0,
32430 8375                        00            .byte	0
32431                                           ! 5419                          0,
32432 8376                      0000            .word	0
32433 8378                      0000            .word	0
32434                                           ! 5420 } },
32435                                           ! 5421 { 0x011c,
32436 837A                      011C            .word	$11C
32437                                           ! 5422 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32438 837C                      009B            .word	$9B
32439                                           ! 5423                           0x01 | 0x02 | 0x04,
32440 837E                        07            .byte	7
32441                                           ! 5424                           0,
32442 837F                        00            .byte	0
32443                                           ! 5425                           64,
32444 8380                      0040            .word	$40
32445                                           ! 5426                    64,
32446 8382                      0040            .word	$40
32447                                           ! 5427                        0xA000,
32448 8384                      A000            .word	$A000
32449                                           ! 5428                        0x0000,
32450 8386                      0000            .word	0
32451                                           ! 5429                       0,
32452 8388                      0000            .word	0
32453 838A                      0000            .word	0
32454                                           ! 5430                             1600,
32455 838C                      0640            .word	$640
32456                                           ! 5431                        1600,
32457 838E                      0640            .word	$640
32458                                           ! 5432                        1200,
32459 8390                      04B0            .word	$4B0
32460                                           ! 5433                      8,
32461 8392                        08            .byte	8
32462                                           ! 5434                      16,
32463 8393                        10            .byte	$10
32464                                           ! 5435                           1,
32465 8394                        01            .byte	1
32466                                           ! 5436                         8,
32467 8395                        08            .byte	8
32468                                           ! 5437                          30,
32469 8396                        1E            .byte	$1E
32470                                           ! 5438                        0x04,
32471 8397                        04            .byte	4
32472                                           ! 5439                     0,
32473 8398                        00            .byte	0
32474                                           ! 5440                               7,
32475 8399                        07            .byte	7
32476                                           ! 5441                          0,
32477 839A                        00            .byte	0
32478                                           ! 5442                        0,
32479 839B                        00            .byte	0
32480                                           ! 5443                             0,
32481 839C                        00            .byte	0
32482                                           ! 5444                          0,
32483 839D                        00            .byte	0
32484                                           ! 5445                               0,
32485 839E                        00            .byte	0
32486                                           ! 5446                         0,
32487 839F                        00            .byte	0
32488                                           ! 5447                              0,
32489 83A0                        00            .byte	0
32490                                           ! 5448                         0,
32491 83A1                        00            .byte	0
32492                                           ! 5449                              0,
32493 83A2                        00            .byte	0
32494                                           ! 5450                                0,
32495 83A3                        00            .byte	0
32496                                           ! 5451                        0xE0000000,
32497 83A4                      0000            .word	0
32498 83A6                      E000            .word	$E000
32499                                           ! 5452                               0,
32500 83A8                      0000            .word	0
32501 83AA                      0000            .word	0
32502                                           ! 5453                             0,
32503 83AC                      0000            .word	0
32504                                           ! 5454                                1600,
32505 83AE                      0640            .word	$640
32506                                           ! 5455                             0,
32507 83B0                        00            .byte	0
32508                                           ! 5456                             0,
32509 83B1                        00            .byte	0
32510                                           ! 5457                           0,
32511 83B2                        00            .byte	0
32512                                           ! 5458                                0,
32513 83B3                        00            .byte	0
32514                                           ! 5459                             0,
32515 83B4                        00            .byte	0
32516                                           ! 5460                                  0,
32517 83B5                        00            .byte	0
32518                                           ! 5461                            0,
32519 83B6                        00            .byte	0
32520                                           ! 5462                                 0,
32521 83B7                        00            .byte	0
32522                                           ! 5463                            0,
32523 83B8                        00            .byte	0
32524                                           ! 5464                                 0,
32525 83B9                        00            .byte	0
32526                                           ! 5465                          0,
32527 83BA                      0000            .word	0
32528 83BC                      0000            .word	0
32529                                           ! 5466 } }
32530                                           ! 5466 ,
32531                                           ! 5467 { 0x011d,
32532 83BE                      011D            .word	$11D
32533                                           ! 5468 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32534 83C0                      009B            .word	$9B
32535                                           ! 5469                           0x01 | 0x02 | 0x04,
32536 83C2                        07            .byte	7
32537                                           ! 5470                           0,
32538 83C3                        00            .byte	0
32539                                           ! 5471                           64,
32540 83C4                      0040            .word	$40
32541                                           ! 5472                    64,
32542 83C6                      0040            .word	$40
32543                                           ! 5473                        0xA000,
32544 83C8                      A000            .word	$A000
32545                                           ! 5474                        0x0000,
32546 83CA                      0000            .word	0
32547                                           ! 5475                       0,
32548 83CC                      0000            .word	0
32549 83CE                      0000            .word	0
32550                                           ! 5476                             3200,
32551 83D0                      0C80            .word	$C80
32552                                           ! 5477                        1600,
32553 83D2                      0640            .word	$640
32554                                           ! 5478                        1200,
32555 83D4                      04B0            .word	$4B0
32556                                           ! 5479                      8,
32557 83D6                        08            .byte	8
32558                                           ! 5480                      16,
32559 83D7                        10            .byte	$10
32560                                           ! 5481                           1,
32561 83D8                        01            .byte	1
32562                                           ! 5482                         15,
32563 83D9                        0F            .byte	$F
32564                                           ! 5483                          59,
32565 83DA                        3B            .byte	$3B
32566                                           ! 5484                        0x06,
32567 83DB                        06            .byte	6
32568                                           ! 5485                     0,
32569 83DC                        00            .byte	0
32570                                           ! 5486                               3,
32571 83DD                        03            .byte	3
32572                                           ! 5487                          0,
32573 83DE                        00            .byte	0
32574                                           ! 5488                        5,
32575 83DF                        05            .byte	5
32576                                           ! 5489                             10,
32577 83E0                        0A            .byte	$A
32578                                           ! 5490                          5,
32579 83E1                        05            .byte	5
32580                                           ! 5491                               5,
32581 83E2                        05            .byte	5
32582                                           ! 5492                         5,
32583 83E3                        05            .byte	5
32584                                           ! 5493                              0,
32585 83E4                        00            .byte	0
32586                                           ! 5494                         1,
32587 83E5                        01            .byte	1
32588                                           ! 5495                              15,
32589 83E6                        0F            .byte	$F
32590                                           ! 5496                                0,
32591 83E7                        00            .byte	0
32592                                           ! 5497                        0xE0000000,
32593 83E8                      0000            .word	0
32594 83EA                      E000            .word	$E000
32595                                           ! 5498                               0,
32596 83EC                      0000            .word	0
32597 83EE                      0000            .word	0
32598                                           ! 5499                             0,
32599 83F0                      0000            .word	0
32600                                           ! 5500                                3200,
32601 83F2                      0C80            .word	$C80
32602                                           ! 5501                             0,
32603 83F4                        00            .byte	0
32604                                           ! 5502                             0,
32605 83F5                        00            .byte	0
32606                                           ! 5503                           5,
32607 83F6                        05            .byte	5
32608                                           ! 5504                                10,
32609 83F7                        0A            .byte	$A
32610                                           ! 5505                             5,
32611 83F8                        05            .byte	5
32612                                           ! 5506                                  5,
32613 83F9                        05            .byte	5
32614                                           ! 5507                            5,
32615 83FA                        05            .byte	5
32616                                           ! 5508                                 0,
32617 83FB                        00            .byte	0
32618                                           ! 5509                            1,
32619 83FC                        01            .byte	1
32620                                           ! 5510                                 15,
32621 83FD                        0F            .byte	$F
32622                                           ! 5511                          0,
32623 83FE                      0000            .word	0
32624 8400                      0000            .word	0
32625                                           ! 5512 } },
32626                                           ! 5513 { 0x011e,
32627 8402                      011E            .word	$11E
32628                                           ! 5514 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32629 8404                      009B            .word	$9B
32630                                           ! 5515                           0x01 | 0x02 | 0x04,
32631 8406                        07            .byte	7
32632                                           ! 5516                           0,
32633 8407                        00            .byte	0
32634                                           ! 5517                           64,
32635 8408                      0040            .word	$40
32636                                           ! 5518                    64,
32637 840A                      0040            .word	$40
32638                                           ! 5519                        0xA000,
32639 840C                      A000            .word	$A000
32640                                           ! 5520                        0x0000,
32641 840E                      0000            .word	0
32642                                           ! 5521                       0,
32643 8410                      0000            .word	0
32644 8412                      0000            .word	0
32645                                           ! 5522                             3200,
32646 8414                      0C80            .word	$C80
32647                                           ! 5523                        1600,
32648 8416                      0640            .word	$640
32649                                           ! 5524                        1200,
32650 8418                      04B0            .word	$4B0
32651                                           ! 5525                      8,
32652 841A                        08            .byte	8
32653                                           ! 5526                      16,
32654 841B                        10            .byte	$10
32655                                           ! 5527                           1,
32656 841C                        01            .byte	1
32657                                           ! 5528                         16,
32658 841D                        10            .byte	$10
32659                                           ! 5529                          59,
32660 841E                        3B            .byte	$3B
32661                                           ! 5530                        0x06,
32662 841F                        06            .byte	6
32663                                           ! 5531                     0,
32664 8420                        00            .byte	0
32665                                           ! 5532                               3,
32666 8421                        03            .byte	3
32667                                           ! 5533                          0,
32668 8422                        00            .byte	0
32669                                           ! 5534                        5,
32670 8423                        05            .byte	5
32671                                           ! 5535                             11,
32672 8424                        0B            .byte	$B
32673                                           ! 5536  
32674                                           ! 5536                         6,
32675 8425                        06            .byte	6
32676                                           ! 5537                               5,
32677 8426                        05            .byte	5
32678                                           ! 5538                         5,
32679 8427                        05            .byte	5
32680                                           ! 5539                              0,
32681 8428                        00            .byte	0
32682                                           ! 5540                         0,
32683 8429                        00            .byte	0
32684                                           ! 5541                              0,
32685 842A                        00            .byte	0
32686                                           ! 5542                                0,
32687 842B                        00            .byte	0
32688                                           ! 5543                        0xE0000000,
32689 842C                      0000            .word	0
32690 842E                      E000            .word	$E000
32691                                           ! 5544                               0,
32692 8430                      0000            .word	0
32693 8432                      0000            .word	0
32694                                           ! 5545                             0,
32695 8434                      0000            .word	0
32696                                           ! 5546                                3200,
32697 8436                      0C80            .word	$C80
32698                                           ! 5547                             0,
32699 8438                        00            .byte	0
32700                                           ! 5548                             0,
32701 8439                        00            .byte	0
32702                                           ! 5549                           5,
32703 843A                        05            .byte	5
32704                                           ! 5550                                11,
32705 843B                        0B            .byte	$B
32706                                           ! 5551                             6,
32707 843C                        06            .byte	6
32708                                           ! 5552                                  5,
32709 843D                        05            .byte	5
32710                                           ! 5553                            5,
32711 843E                        05            .byte	5
32712                                           ! 5554                                 0,
32713 843F                        00            .byte	0
32714                                           ! 5555                            0,
32715 8440                        00            .byte	0
32716                                           ! 5556                                 0,
32717 8441                        00            .byte	0
32718                                           ! 5557                          0,
32719 8442                      0000            .word	0
32720 8444                      0000            .word	0
32721                                           ! 5558 } },
32722                                           ! 5559 { 0x011f,
32723 8446                      011F            .word	$11F
32724                                           ! 5560 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32725 8448                      009B            .word	$9B
32726                                           ! 5561                           0x01 | 0x02 | 0x04,
32727 844A                        07            .byte	7
32728                                           ! 5562                           0,
32729 844B                        00            .byte	0
32730                                           ! 5563                           64,
32731 844C                      0040            .word	$40
32732                                           ! 5564                    64,
32733 844E                      0040            .word	$40
32734                                           ! 5565                        0xA000,
32735 8450                      A000            .word	$A000
32736                                           ! 5566                        0x0000,
32737 8452                      0000            .word	0
32738                                           ! 5567                       0,
32739 8454                      0000            .word	0
32740 8456                      0000            .word	0
32741                                           ! 5568                             4800,
32742 8458                      12C0            .word	$12C0
32743                                           ! 5569                        1600,
32744 845A                      0640            .word	$640
32745                                           ! 5570                        1200,
32746 845C                      04B0            .word	$4B0
32747                                           ! 5571                      8,
32748 845E                        08            .byte	8
32749                                           ! 5572                      16,
32750 845F                        10            .byte	$10
32751                                           ! 5573                           1,
32752 8460                        01            .byte	1
32753                                           ! 5574                         24,
32754 8461                        18            .byte	$18
32755                                           ! 5575                          88,
32756 8462                        58            .byte	$58
32757                                           ! 5576                        0x06,
32758 8463                        06            .byte	6
32759                                           ! 5577                     0,
32760 8464                        00            .byte	0
32761                                           ! 5578                               1,
32762 8465                        01            .byte	1
32763                                           ! 5579                          0,
32764 8466                        00            .byte	0
32765                                           ! 5580                        8,
32766 8467                        08            .byte	8
32767                                           ! 5581                             16,
32768 8468                        10            .byte	$10
32769                                           ! 5582                          8,
32770 8469                        08            .byte	8
32771                                           ! 5583                               8,
32772 846A                        08            .byte	8
32773                                           ! 5584                         8,
32774 846B                        08            .byte	8
32775                                           ! 5585                              0,
32776 846C                        00            .byte	0
32777                                           ! 5586                         0,
32778 846D                        00            .byte	0
32779                                           ! 5587                              0,
32780 846E                        00            .byte	0
32781                                           ! 5588                                0,
32782 846F                        00            .byte	0
32783                                           ! 5589                        0xE0000000,
32784 8470                      0000            .word	0
32785 8472                      E000            .word	$E000
32786                                           ! 5590                               0,
32787 8474                      0000            .word	0
32788 8476                      0000            .word	0
32789                                           ! 5591                             0,
32790 8478                      0000            .word	0
32791                                           ! 5592                                4800,
32792 847A                      12C0            .word	$12C0
32793                                           ! 5593                             0,
32794 847C                        00            .byte	0
32795                                           ! 5594                             0,
32796 847D                        00            .byte	0
32797                                           ! 5595                           8,
32798 847E                        08            .byte	8
32799                                           ! 5596                                16,
32800 847F                        10            .byte	$10
32801                                           ! 5597                             8,
32802 8480                        08            .byte	8
32803                                           ! 5598                                  8,
32804 8481                        08            .byte	8
32805                                           ! 5599                            8,
32806 8482                        08            .byte	8
32807                                           ! 5600                                 0,
32808 8483                        00            .byte	0
32809                                           ! 5601                            0,
32810 8484                        00            .byte	0
32811                                           ! 5602                                 0,
32812 8485                        00            .byte	0
32813                                           ! 5603    
32814                                           ! 5603                       0,
32815 8486                      0000            .word	0
32816 8488                      0000            .word	0
32817                                           ! 5604 } },
32818                                           ! 5605 { 0x0140,
32819 848A                      0140            .word	$140
32820                                           ! 5606 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32821 848C                      009B            .word	$9B
32822                                           ! 5607                           0x01 | 0x02 | 0x04,
32823 848E                        07            .byte	7
32824                                           ! 5608                           0,
32825 848F                        00            .byte	0
32826                                           ! 5609                           64,
32827 8490                      0040            .word	$40
32828                                           ! 5610                    64,
32829 8492                      0040            .word	$40
32830                                           ! 5611                        0xA000,
32831 8494                      A000            .word	$A000
32832                                           ! 5612                        0x0000,
32833 8496                      0000            .word	0
32834                                           ! 5613                       0,
32835 8498                      0000            .word	0
32836 849A                      0000            .word	0
32837                                           ! 5614                             1280,
32838 849C                      0500            .word	$500
32839                                           ! 5615                        320,
32840 849E                      0140            .word	$140
32841                                           ! 5616                        200,
32842 84A0                      00C8            .word	$C8
32843                                           ! 5617                      8,
32844 84A2                        08            .byte	8
32845                                           ! 5618                      16,
32846 84A3                        10            .byte	$10
32847                                           ! 5619                           1,
32848 84A4                        01            .byte	1
32849                                           ! 5620                         32,
32850 84A5                        20            .byte	$20
32851                                           ! 5621                          4,
32852 84A6                        04            .byte	4
32853                                           ! 5622                        0x06,
32854 84A7                        06            .byte	6
32855                                           ! 5623                     0,
32856 84A8                        00            .byte	0
32857                                           ! 5624                               64,
32858 84A9                        40            .byte	$40
32859                                           ! 5625                          0,
32860 84AA                        00            .byte	0
32861                                           ! 5626                        8,
32862 84AB                        08            .byte	8
32863                                           ! 5627                             16,
32864 84AC                        10            .byte	$10
32865                                           ! 5628                          8,
32866 84AD                        08            .byte	8
32867                                           ! 5629                               8,
32868 84AE                        08            .byte	8
32869                                           ! 5630                         8,
32870 84AF                        08            .byte	8
32871                                           ! 5631                              0,
32872 84B0                        00            .byte	0
32873                                           ! 5632                         8,
32874 84B1                        08            .byte	8
32875                                           ! 5633                              24,
32876 84B2                        18            .byte	$18
32877                                           ! 5634                                0x02,
32878 84B3                        02            .byte	2
32879                                           ! 5635                        0xE0000000,
32880 84B4                      0000            .word	0
32881 84B6                      E000            .word	$E000
32882                                           ! 5636                               0,
32883 84B8                      0000            .word	0
32884 84BA                      0000            .word	0
32885                                           ! 5637                             0,
32886 84BC                      0000            .word	0
32887                                           ! 5638                                1280,
32888 84BE                      0500            .word	$500
32889                                           ! 5639                             0,
32890 84C0                        00            .byte	0
32891                                           ! 5640                             0,
32892 84C1                        00            .byte	0
32893                                           ! 5641                           8,
32894 84C2                        08            .byte	8
32895                                           ! 5642                                16,
32896 84C3                        10            .byte	$10
32897                                           ! 5643                             8,
32898 84C4                        08            .byte	8
32899                                           ! 5644                                  8,
32900 84C5                        08            .byte	8
32901                                           ! 5645                            8,
32902 84C6                        08            .byte	8
32903                                           ! 5646                                 0,
32904 84C7                        00            .byte	0
32905                                           ! 5647                            8,
32906 84C8                        08            .byte	8
32907                                           ! 5648                                 24,
32908 84C9                        18            .byte	$18
32909                                           ! 5649                          0,
32910 84CA                      0000            .word	0
32911 84CC                      0000            .word	0
32912                                           ! 5650 } },
32913                                           ! 5651 { 0x0141,
32914 84CE                      0141            .word	$141
32915                                           ! 5652 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32916 84D0                      009B            .word	$9B
32917                                           ! 5653                           0x01 | 0x02 | 0x04,
32918 84D2                        07            .byte	7
32919                                           ! 5654                           0,
32920 84D3                        00            .byte	0
32921                                           ! 5655                           64,
32922 84D4                      0040            .word	$40
32923                                           ! 5656                    64,
32924 84D6                      0040            .word	$40
32925                                           ! 5657                        0xA000,
32926 84D8                      A000            .word	$A000
32927                                           ! 5658                        0x0000,
32928 84DA                      0000            .word	0
32929                                           ! 5659                       0,
32930 84DC                      0000            .word	0
32931 84DE                      0000            .word	0
32932                                           ! 5660                             2560,
32933 84E0                      0A00            .word	$A00
32934                                           ! 5661                        640,
32935 84E2                      0280            .word	$280
32936                                           ! 5662                        400,
32937 84E4                      0190            .word	$190
32938                                           ! 5663                      8,
32939 84E6                        08            .byte	8
32940                                           ! 5664                      16,
32941 84E7                        10            .byte	$10
32942                                           ! 5665                           1,
32943 84E8                        01            .byte	1
32944                                           ! 5666                         32,
32945 84E9                        20            .byte	$20
32946                                           ! 5667                          16,
32947 84EA                        10            .byte	$10
32948                                           ! 5668                        0x06,
32949 84EB                        06            .byte	6
32950                                           ! 5669                     0,
32951 84EC                        00            .byte	0
32952                                           ! 5670                               15,
32953 84ED                        0F            .byte	$F
32954                                           ! 5671                          0,
32955 84EE                        00            .byte	0
32956                                           ! 5672                        8,
32957 84EF                        08            .byte	8
32958                                           ! 5673      
32959                                           ! 5673                        16,
32960 84F0                        10            .byte	$10
32961                                           ! 5674                          8,
32962 84F1                        08            .byte	8
32963                                           ! 5675                               8,
32964 84F2                        08            .byte	8
32965                                           ! 5676                         8,
32966 84F3                        08            .byte	8
32967                                           ! 5677                              0,
32968 84F4                        00            .byte	0
32969                                           ! 5678                         8,
32970 84F5                        08            .byte	8
32971                                           ! 5679                              24,
32972 84F6                        18            .byte	$18
32973                                           ! 5680                                0x02,
32974 84F7                        02            .byte	2
32975                                           ! 5681                        0xE0000000,
32976 84F8                      0000            .word	0
32977 84FA                      E000            .word	$E000
32978                                           ! 5682                               0,
32979 84FC                      0000            .word	0
32980 84FE                      0000            .word	0
32981                                           ! 5683                             0,
32982 8500                      0000            .word	0
32983                                           ! 5684                                2560,
32984 8502                      0A00            .word	$A00
32985                                           ! 5685                             0,
32986 8504                        00            .byte	0
32987                                           ! 5686                             0,
32988 8505                        00            .byte	0
32989                                           ! 5687                           8,
32990 8506                        08            .byte	8
32991                                           ! 5688                                16,
32992 8507                        10            .byte	$10
32993                                           ! 5689                             8,
32994 8508                        08            .byte	8
32995                                           ! 5690                                  8,
32996 8509                        08            .byte	8
32997                                           ! 5691                            8,
32998 850A                        08            .byte	8
32999                                           ! 5692                                 0,
33000 850B                        00            .byte	0
33001                                           ! 5693                            8,
33002 850C                        08            .byte	8
33003                                           ! 5694                                 24,
33004 850D                        18            .byte	$18
33005                                           ! 5695                          0,
33006 850E                      0000            .word	0
33007 8510                      0000            .word	0
33008                                           ! 5696 } },
33009                                           ! 5697 { 0x0142,
33010 8512                      0142            .word	$142
33011                                           ! 5698 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33012 8514                      009B            .word	$9B
33013                                           ! 5699                           0x01 | 0x02 | 0x04,
33014 8516                        07            .byte	7
33015                                           ! 5700                           0,
33016 8517                        00            .byte	0
33017                                           ! 5701                           64,
33018 8518                      0040            .word	$40
33019                                           ! 5702                    64,
33020 851A                      0040            .word	$40
33021                                           ! 5703                        0xA000,
33022 851C                      A000            .word	$A000
33023                                           ! 5704                        0x0000,
33024 851E                      0000            .word	0
33025                                           ! 5705                       0,
33026 8520                      0000            .word	0
33027 8522                      0000            .word	0
33028                                           ! 5706                             2560,
33029 8524                      0A00            .word	$A00
33030                                           ! 5707                        640,
33031 8526                      0280            .word	$280
33032                                           ! 5708                        480,
33033 8528                      01E0            .word	$1E0
33034                                           ! 5709                      8,
33035 852A                        08            .byte	8
33036                                           ! 5710                      16,
33037 852B                        10            .byte	$10
33038                                           ! 5711                           1,
33039 852C                        01            .byte	1
33040                                           ! 5712                         32,
33041 852D                        20            .byte	$20
33042                                           ! 5713                          19,
33043 852E                        13            .byte	$13
33044                                           ! 5714                        0x06,
33045 852F                        06            .byte	6
33046                                           ! 5715                     0,
33047 8530                        00            .byte	0
33048                                           ! 5716                               12,
33049 8531                        0C            .byte	$C
33050                                           ! 5717                          0,
33051 8532                        00            .byte	0
33052                                           ! 5718                        8,
33053 8533                        08            .byte	8
33054                                           ! 5719                             16,
33055 8534                        10            .byte	$10
33056                                           ! 5720                          8,
33057 8535                        08            .byte	8
33058                                           ! 5721                               8,
33059 8536                        08            .byte	8
33060                                           ! 5722                         8,
33061 8537                        08            .byte	8
33062                                           ! 5723                              0,
33063 8538                        00            .byte	0
33064                                           ! 5724                         8,
33065 8539                        08            .byte	8
33066                                           ! 5725                              24,
33067 853A                        18            .byte	$18
33068                                           ! 5726                                0x02,
33069 853B                        02            .byte	2
33070                                           ! 5727                        0xE0000000,
33071 853C                      0000            .word	0
33072 853E                      E000            .word	$E000
33073                                           ! 5728                               0,
33074 8540                      0000            .word	0
33075 8542                      0000            .word	0
33076                                           ! 5729                             0,
33077 8544                      0000            .word	0
33078                                           ! 5730                                2560,
33079 8546                      0A00            .word	$A00
33080                                           ! 5731                             0,
33081 8548                        00            .byte	0
33082                                           ! 5732                             0,
33083 8549                        00            .byte	0
33084                                           ! 5733                           8,
33085 854A                        08            .byte	8
33086                                           ! 5734                                16,
33087 854B                        10            .byte	$10
33088                                           ! 5735                             8,
33089 854C                        08            .byte	8
33090                                           ! 5736                                  8,
33091 854D                        08            .byte	8
33092                                           ! 5737                            8,
33093 854E                        08            .byte	8
33094                                           ! 5738                                 0,
33095 854F                        00            .byte	0
33096                                           ! 5739                            8,
33097 8550                        08            .byte	8
33098                                           ! 5740   
33099                                           ! 5740                               24,
33100 8551                        18            .byte	$18
33101                                           ! 5741                          0,
33102 8552                      0000            .word	0
33103 8554                      0000            .word	0
33104                                           ! 5742 } },
33105                                           ! 5743 { 0x0143,
33106 8556                      0143            .word	$143
33107                                           ! 5744 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33108 8558                      009B            .word	$9B
33109                                           ! 5745                           0x01 | 0x02 | 0x04,
33110 855A                        07            .byte	7
33111                                           ! 5746                           0,
33112 855B                        00            .byte	0
33113                                           ! 5747                           64,
33114 855C                      0040            .word	$40
33115                                           ! 5748                    64,
33116 855E                      0040            .word	$40
33117                                           ! 5749                        0xA000,
33118 8560                      A000            .word	$A000
33119                                           ! 5750                        0x0000,
33120 8562                      0000            .word	0
33121                                           ! 5751                       0,
33122 8564                      0000            .word	0
33123 8566                      0000            .word	0
33124                                           ! 5752                             3200,
33125 8568                      0C80            .word	$C80
33126                                           ! 5753                        800,
33127 856A                      0320            .word	$320
33128                                           ! 5754                        600,
33129 856C                      0258            .word	$258
33130                                           ! 5755                      8,
33131 856E                        08            .byte	8
33132                                           ! 5756                      16,
33133 856F                        10            .byte	$10
33134                                           ! 5757                           1,
33135 8570                        01            .byte	1
33136                                           ! 5758                         32,
33137 8571                        20            .byte	$20
33138                                           ! 5759                          30,
33139 8572                        1E            .byte	$1E
33140                                           ! 5760                        0x06,
33141 8573                        06            .byte	6
33142                                           ! 5761                     0,
33143 8574                        00            .byte	0
33144                                           ! 5762                               7,
33145 8575                        07            .byte	7
33146                                           ! 5763                          0,
33147 8576                        00            .byte	0
33148                                           ! 5764                        8,
33149 8577                        08            .byte	8
33150                                           ! 5765                             16,
33151 8578                        10            .byte	$10
33152                                           ! 5766                          8,
33153 8579                        08            .byte	8
33154                                           ! 5767                               8,
33155 857A                        08            .byte	8
33156                                           ! 5768                         8,
33157 857B                        08            .byte	8
33158                                           ! 5769                              0,
33159 857C                        00            .byte	0
33160                                           ! 5770                         8,
33161 857D                        08            .byte	8
33162                                           ! 5771                              24,
33163 857E                        18            .byte	$18
33164                                           ! 5772                                0x02,
33165 857F                        02            .byte	2
33166                                           ! 5773                        0xE0000000,
33167 8580                      0000            .word	0
33168 8582                      E000            .word	$E000
33169                                           ! 5774                               0,
33170 8584                      0000            .word	0
33171 8586                      0000            .word	0
33172                                           ! 5775                             0,
33173 8588                      0000            .word	0
33174                                           ! 5776                                3200,
33175 858A                      0C80            .word	$C80
33176                                           ! 5777                             0,
33177 858C                        00            .byte	0
33178                                           ! 5778                             0,
33179 858D                        00            .byte	0
33180                                           ! 5779                           8,
33181 858E                        08            .byte	8
33182                                           ! 5780                                16,
33183 858F                        10            .byte	$10
33184                                           ! 5781                             8,
33185 8590                        08            .byte	8
33186                                           ! 5782                                  8,
33187 8591                        08            .byte	8
33188                                           ! 5783                            8,
33189 8592                        08            .byte	8
33190                                           ! 5784                                 0,
33191 8593                        00            .byte	0
33192                                           ! 5785                            8,
33193 8594                        08            .byte	8
33194                                           ! 5786                                 24,
33195 8595                        18            .byte	$18
33196                                           ! 5787                          0,
33197 8596                      0000            .word	0
33198 8598                      0000            .word	0
33199                                           ! 5788 } },
33200                                           ! 5789 { 0x0144,
33201 859A                      0144            .word	$144
33202                                           ! 5790 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33203 859C                      009B            .word	$9B
33204                                           ! 5791                           0x01 | 0x02 | 0x04,
33205 859E                        07            .byte	7
33206                                           ! 5792                           0,
33207 859F                        00            .byte	0
33208                                           ! 5793                           64,
33209 85A0                      0040            .word	$40
33210                                           ! 5794                    64,
33211 85A2                      0040            .word	$40
33212                                           ! 5795                        0xA000,
33213 85A4                      A000            .word	$A000
33214                                           ! 5796                        0x0000,
33215 85A6                      0000            .word	0
33216                                           ! 5797                       0,
33217 85A8                      0000            .word	0
33218 85AA                      0000            .word	0
33219                                           ! 5798                             4096,
33220 85AC                      1000            .word	$1000
33221                                           ! 5799                        1024,
33222 85AE                      0400            .word	$400
33223                                           ! 5800                        768,
33224 85B0                      0300            .word	$300
33225                                           ! 5801                      8,
33226 85B2                        08            .byte	8
33227                                           ! 5802                      16,
33228 85B3                        10            .byte	$10
33229                                           ! 5803                           1,
33230 85B4                        01            .byte	1
33231                                           ! 5804                         32,
33232 85B5                        20            .byte	$20
33233                                           ! 5805                          48,
33234 85B6                        30            .byte	$30
33235                                           ! 5806                        0x06,
33236 85B7                        06            .byte	6
33237                                           ! 5807                     0,
33238 85B8                        00            .byte	0
33239                                           ! 5808                               4,
33240 85B9                        04            .byte	4
33241                                           ! 5809                       
33242                                           ! 5809    0,
33243 85BA                        00            .byte	0
33244                                           ! 5810                        8,
33245 85BB                        08            .byte	8
33246                                           ! 5811                             16,
33247 85BC                        10            .byte	$10
33248                                           ! 5812                          8,
33249 85BD                        08            .byte	8
33250                                           ! 5813                               8,
33251 85BE                        08            .byte	8
33252                                           ! 5814                         8,
33253 85BF                        08            .byte	8
33254                                           ! 5815                              0,
33255 85C0                        00            .byte	0
33256                                           ! 5816                         8,
33257 85C1                        08            .byte	8
33258                                           ! 5817                              24,
33259 85C2                        18            .byte	$18
33260                                           ! 5818                                0x02,
33261 85C3                        02            .byte	2
33262                                           ! 5819                        0xE0000000,
33263 85C4                      0000            .word	0
33264 85C6                      E000            .word	$E000
33265                                           ! 5820                               0,
33266 85C8                      0000            .word	0
33267 85CA                      0000            .word	0
33268                                           ! 5821                             0,
33269 85CC                      0000            .word	0
33270                                           ! 5822                                4096,
33271 85CE                      1000            .word	$1000
33272                                           ! 5823                             0,
33273 85D0                        00            .byte	0
33274                                           ! 5824                             0,
33275 85D1                        00            .byte	0
33276                                           ! 5825                           8,
33277 85D2                        08            .byte	8
33278                                           ! 5826                                16,
33279 85D3                        10            .byte	$10
33280                                           ! 5827                             8,
33281 85D4                        08            .byte	8
33282                                           ! 5828                                  8,
33283 85D5                        08            .byte	8
33284                                           ! 5829                            8,
33285 85D6                        08            .byte	8
33286                                           ! 5830                                 0,
33287 85D7                        00            .byte	0
33288                                           ! 5831                            8,
33289 85D8                        08            .byte	8
33290                                           ! 5832                                 24,
33291 85D9                        18            .byte	$18
33292                                           ! 5833                          0,
33293 85DA                      0000            .word	0
33294 85DC                      0000            .word	0
33295                                           ! 5834 } },
33296                                           ! 5835 { 0x0145,
33297 85DE                      0145            .word	$145
33298                                           ! 5836 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33299 85E0                      009B            .word	$9B
33300                                           ! 5837                           0x01 | 0x02 | 0x04,
33301 85E2                        07            .byte	7
33302                                           ! 5838                           0,
33303 85E3                        00            .byte	0
33304                                           ! 5839                           64,
33305 85E4                      0040            .word	$40
33306                                           ! 5840                    64,
33307 85E6                      0040            .word	$40
33308                                           ! 5841                        0xA000,
33309 85E8                      A000            .word	$A000
33310                                           ! 5842                        0x0000,
33311 85EA                      0000            .word	0
33312                                           ! 5843                       0,
33313 85EC                      0000            .word	0
33314 85EE                      0000            .word	0
33315                                           ! 5844                             5120,
33316 85F0                      1400            .word	$1400
33317                                           ! 5845                        1280,
33318 85F2                      0500            .word	$500
33319                                           ! 5846                        1024,
33320 85F4                      0400            .word	$400
33321                                           ! 5847                      8,
33322 85F6                        08            .byte	8
33323                                           ! 5848                      16,
33324 85F7                        10            .byte	$10
33325                                           ! 5849                           1,
33326 85F8                        01            .byte	1
33327                                           ! 5850                         32,
33328 85F9                        20            .byte	$20
33329                                           ! 5851                          80,
33330 85FA                        50            .byte	$50
33331                                           ! 5852                        0x06,
33332 85FB                        06            .byte	6
33333                                           ! 5853                     0,
33334 85FC                        00            .byte	0
33335                                           ! 5854                               2,
33336 85FD                        02            .byte	2
33337                                           ! 5855                          0,
33338 85FE                        00            .byte	0
33339                                           ! 5856                        8,
33340 85FF                        08            .byte	8
33341                                           ! 5857                             16,
33342 8600                        10            .byte	$10
33343                                           ! 5858                          8,
33344 8601                        08            .byte	8
33345                                           ! 5859                               8,
33346 8602                        08            .byte	8
33347                                           ! 5860                         8,
33348 8603                        08            .byte	8
33349                                           ! 5861                              0,
33350 8604                        00            .byte	0
33351                                           ! 5862                         8,
33352 8605                        08            .byte	8
33353                                           ! 5863                              24,
33354 8606                        18            .byte	$18
33355                                           ! 5864                                0x02,
33356 8607                        02            .byte	2
33357                                           ! 5865                        0xE0000000,
33358 8608                      0000            .word	0
33359 860A                      E000            .word	$E000
33360                                           ! 5866                               0,
33361 860C                      0000            .word	0
33362 860E                      0000            .word	0
33363                                           ! 5867                             0,
33364 8610                      0000            .word	0
33365                                           ! 5868                                5120,
33366 8612                      1400            .word	$1400
33367                                           ! 5869                             0,
33368 8614                        00            .byte	0
33369                                           ! 5870                             0,
33370 8615                        00            .byte	0
33371                                           ! 5871                           8,
33372 8616                        08            .byte	8
33373                                           ! 5872                                16,
33374 8617                        10            .byte	$10
33375                                           ! 5873                             8,
33376 8618                        08            .byte	8
33377                                           ! 5874                                  8,
33378 8619                        08            .byte	8
33379                                           ! 5875                            8,
33380 861A                        08            .byte	8
33381                                           ! 5876                              
33382                                           ! 5876    0,
33383 861B                        00            .byte	0
33384                                           ! 5877                            8,
33385 861C                        08            .byte	8
33386                                           ! 5878                                 24,
33387 861D                        18            .byte	$18
33388                                           ! 5879                          0,
33389 861E                      0000            .word	0
33390 8620                      0000            .word	0
33391                                           ! 5880 } },
33392                                           ! 5881 { 0x0146,
33393 8622                      0146            .word	$146
33394                                           ! 5882 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33395 8624                      009B            .word	$9B
33396                                           ! 5883                           0x01 | 0x02 | 0x04,
33397 8626                        07            .byte	7
33398                                           ! 5884                           0,
33399 8627                        00            .byte	0
33400                                           ! 5885                           64,
33401 8628                      0040            .word	$40
33402                                           ! 5886                    64,
33403 862A                      0040            .word	$40
33404                                           ! 5887                        0xA000,
33405 862C                      A000            .word	$A000
33406                                           ! 5888                        0x0000,
33407 862E                      0000            .word	0
33408                                           ! 5889                       0,
33409 8630                      0000            .word	0
33410 8632                      0000            .word	0
33411                                           ! 5890                             320,
33412 8634                      0140            .word	$140
33413                                           ! 5891                        320,
33414 8636                      0140            .word	$140
33415                                           ! 5892                        200,
33416 8638                      00C8            .word	$C8
33417                                           ! 5893                      8,
33418 863A                        08            .byte	8
33419                                           ! 5894                      16,
33420 863B                        10            .byte	$10
33421                                           ! 5895                           1,
33422 863C                        01            .byte	1
33423                                           ! 5896                         8,
33424 863D                        08            .byte	8
33425                                           ! 5897                          1,
33426 863E                        01            .byte	1
33427                                           ! 5898                        0x04,
33428 863F                        04            .byte	4
33429                                           ! 5899                     0,
33430 8640                        00            .byte	0
33431                                           ! 5900                               261,
33432 8641                        05            .byte	5
33433                                           ! 5901                          0,
33434 8642                        00            .byte	0
33435                                           ! 5902                        0,
33436 8643                        00            .byte	0
33437                                           ! 5903                             0,
33438 8644                        00            .byte	0
33439                                           ! 5904                          0,
33440 8645                        00            .byte	0
33441                                           ! 5905                               0,
33442 8646                        00            .byte	0
33443                                           ! 5906                         0,
33444 8647                        00            .byte	0
33445                                           ! 5907                              0,
33446 8648                        00            .byte	0
33447                                           ! 5908                         0,
33448 8649                        00            .byte	0
33449                                           ! 5909                              0,
33450 864A                        00            .byte	0
33451                                           ! 5910                                0,
33452 864B                        00            .byte	0
33453                                           ! 5911                        0xE0000000,
33454 864C                      0000            .word	0
33455 864E                      E000            .word	$E000
33456                                           ! 5912                               0,
33457 8650                      0000            .word	0
33458 8652                      0000            .word	0
33459                                           ! 5913                             0,
33460 8654                      0000            .word	0
33461                                           ! 5914                                320,
33462 8656                      0140            .word	$140
33463                                           ! 5915                             0,
33464 8658                        00            .byte	0
33465                                           ! 5916                             0,
33466 8659                        00            .byte	0
33467                                           ! 5917                           0,
33468 865A                        00            .byte	0
33469                                           ! 5918                                0,
33470 865B                        00            .byte	0
33471                                           ! 5919                             0,
33472 865C                        00            .byte	0
33473                                           ! 5920                                  0,
33474 865D                        00            .byte	0
33475                                           ! 5921                            0,
33476 865E                        00            .byte	0
33477                                           ! 5922                                 0,
33478 865F                        00            .byte	0
33479                                           ! 5923                            0,
33480 8660                        00            .byte	0
33481                                           ! 5924                                 0,
33482 8661                        00            .byte	0
33483                                           ! 5925                          0,
33484 8662                      0000            .word	0
33485 8664                      0000            .word	0
33486                                           ! 5926 } },
33487                                           ! 5927 { 0x0147,
33488 8666                      0147            .word	$147
33489                                           ! 5928 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33490 8668                      009B            .word	$9B
33491                                           ! 5929                           0x01 | 0x02 | 0x04,
33492 866A                        07            .byte	7
33493                                           ! 5930                           0,
33494 866B                        00            .byte	0
33495                                           ! 5931                           64,
33496 866C                      0040            .word	$40
33497                                           ! 5932                    64,
33498 866E                      0040            .word	$40
33499                                           ! 5933                        0xA000,
33500 8670                      A000            .word	$A000
33501                                           ! 5934                        0x0000,
33502 8672                      0000            .word	0
33503                                           ! 5935                       0,
33504 8674                      0000            .word	0
33505 8676                      0000            .word	0
33506                                           ! 5936                             6400,
33507 8678                      1900            .word	$1900
33508                                           ! 5937                        1600,
33509 867A                      0640            .word	$640
33510                                           ! 5938                        1200,
33511 867C                      04B0            .word	$4B0
33512                                           ! 5939                      8,
33513 867E                        08            .byte	8
33514                                           ! 5940                      16,
33515 867F                        10            .byte	$10
33516                                           ! 5941                           1,
33517 8680                        01            .byte	1
33518                                           ! 5942                         32,
33519 8681                        20            .byte	$20
33520                                           ! 5943                          118,
33521 8682                        76            .byte	$76
33522                                           ! 5944                        0x06,
33523 8683                        06            .byte	6
33524                                           ! 5945                     0,
33525 8684                        00            .byte	0
33526                                           ! 5946                         
33527                                           ! 5946       1,
33528 8685                        01            .byte	1
33529                                           ! 5947                          0,
33530 8686                        00            .byte	0
33531                                           ! 5948                        8,
33532 8687                        08            .byte	8
33533                                           ! 5949                             16,
33534 8688                        10            .byte	$10
33535                                           ! 5950                          8,
33536 8689                        08            .byte	8
33537                                           ! 5951                               8,
33538 868A                        08            .byte	8
33539                                           ! 5952                         8,
33540 868B                        08            .byte	8
33541                                           ! 5953                              0,
33542 868C                        00            .byte	0
33543                                           ! 5954                         8,
33544 868D                        08            .byte	8
33545                                           ! 5955                              24,
33546 868E                        18            .byte	$18
33547                                           ! 5956                                0x02,
33548 868F                        02            .byte	2
33549                                           ! 5957                        0xE0000000,
33550 8690                      0000            .word	0
33551 8692                      E000            .word	$E000
33552                                           ! 5958                               0,
33553 8694                      0000            .word	0
33554 8696                      0000            .word	0
33555                                           ! 5959                             0,
33556 8698                      0000            .word	0
33557                                           ! 5960                                6400,
33558 869A                      1900            .word	$1900
33559                                           ! 5961                             0,
33560 869C                        00            .byte	0
33561                                           ! 5962                             0,
33562 869D                        00            .byte	0
33563                                           ! 5963                           8,
33564 869E                        08            .byte	8
33565                                           ! 5964                                16,
33566 869F                        10            .byte	$10
33567                                           ! 5965                             8,
33568 86A0                        08            .byte	8
33569                                           ! 5966                                  8,
33570 86A1                        08            .byte	8
33571                                           ! 5967                            8,
33572 86A2                        08            .byte	8
33573                                           ! 5968                                 0,
33574 86A3                        00            .byte	0
33575                                           ! 5969                            8,
33576 86A4                        08            .byte	8
33577                                           ! 5970                                 24,
33578 86A5                        18            .byte	$18
33579                                           ! 5971                          0,
33580 86A6                      0000            .word	0
33581 86A8                      0000            .word	0
33582                                           ! 5972 } },
33583                                           ! 5973 { 0x0148,
33584 86AA                      0148            .word	$148
33585                                           ! 5974 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33586 86AC                      009B            .word	$9B
33587                                           ! 5975                           0x01 | 0x02 | 0x04,
33588 86AE                        07            .byte	7
33589                                           ! 5976                           0,
33590 86AF                        00            .byte	0
33591                                           ! 5977                           64,
33592 86B0                      0040            .word	$40
33593                                           ! 5978                    64,
33594 86B2                      0040            .word	$40
33595                                           ! 5979                        0xA000,
33596 86B4                      A000            .word	$A000
33597                                           ! 5980                        0x0000,
33598 86B6                      0000            .word	0
33599                                           ! 5981                       0,
33600 86B8                      0000            .word	0
33601 86BA                      0000            .word	0
33602                                           ! 5982                             1152,
33603 86BC                      0480            .word	$480
33604                                           ! 5983                        1152,
33605 86BE                      0480            .word	$480
33606                                           ! 5984                        864,
33607 86C0                      0360            .word	$360
33608                                           ! 5985                      8,
33609 86C2                        08            .byte	8
33610                                           ! 5986                      16,
33611 86C3                        10            .byte	$10
33612                                           ! 5987                           1,
33613 86C4                        01            .byte	1
33614                                           ! 5988                         8,
33615 86C5                        08            .byte	8
33616                                           ! 5989                          16,
33617 86C6                        10            .byte	$10
33618                                           ! 5990                        0x04,
33619 86C7                        04            .byte	4
33620                                           ! 5991                     0,
33621 86C8                        00            .byte	0
33622                                           ! 5992                               15,
33623 86C9                        0F            .byte	$F
33624                                           ! 5993                          0,
33625 86CA                        00            .byte	0
33626                                           ! 5994                        0,
33627 86CB                        00            .byte	0
33628                                           ! 5995                             0,
33629 86CC                        00            .byte	0
33630                                           ! 5996                          0,
33631 86CD                        00            .byte	0
33632                                           ! 5997                               0,
33633 86CE                        00            .byte	0
33634                                           ! 5998                         0,
33635 86CF                        00            .byte	0
33636                                           ! 5999                              0,
33637 86D0                        00            .byte	0
33638                                           ! 6000                         0,
33639 86D1                        00            .byte	0
33640                                           ! 6001                              0,
33641 86D2                        00            .byte	0
33642                                           ! 6002                                0,
33643 86D3                        00            .byte	0
33644                                           ! 6003                        0xE0000000,
33645 86D4                      0000            .word	0
33646 86D6                      E000            .word	$E000
33647                                           ! 6004                               0,
33648 86D8                      0000            .word	0
33649 86DA                      0000            .word	0
33650                                           ! 6005                             0,
33651 86DC                      0000            .word	0
33652                                           ! 6006                                1152,
33653 86DE                      0480            .word	$480
33654                                           ! 6007                             0,
33655 86E0                        00            .byte	0
33656                                           ! 6008                             0,
33657 86E1                        00            .byte	0
33658                                           ! 6009                           0,
33659 86E2                        00            .byte	0
33660                                           ! 6010                                0,
33661 86E3                        00            .byte	0
33662                                           ! 6011                             0,
33663 86E4                        00            .byte	0
33664                                           ! 6012                                  0,
33665 86E5                        00            .byte	0
33666                                           ! 6013                            0,
33667 86E6                        00            .byte	0
33668                                           ! 6014      
33669                                           ! 6014                            0,
33670 86E7                        00            .byte	0
33671                                           ! 6015                            0,
33672 86E8                        00            .byte	0
33673                                           ! 6016                                 0,
33674 86E9                        00            .byte	0
33675                                           ! 6017                          0,
33676 86EA                      0000            .word	0
33677 86EC                      0000            .word	0
33678                                           ! 6018 } },
33679                                           ! 6019 { 0x0149,
33680 86EE                      0149            .word	$149
33681                                           ! 6020 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33682 86F0                      009B            .word	$9B
33683                                           ! 6021                           0x01 | 0x02 | 0x04,
33684 86F2                        07            .byte	7
33685                                           ! 6022                           0,
33686 86F3                        00            .byte	0
33687                                           ! 6023                           64,
33688 86F4                      0040            .word	$40
33689                                           ! 6024                    64,
33690 86F6                      0040            .word	$40
33691                                           ! 6025                        0xA000,
33692 86F8                      A000            .word	$A000
33693                                           ! 6026                        0x0000,
33694 86FA                      0000            .word	0
33695                                           ! 6027                       0,
33696 86FC                      0000            .word	0
33697 86FE                      0000            .word	0
33698                                           ! 6028                             2304,
33699 8700                      0900            .word	$900
33700                                           ! 6029                        1152,
33701 8702                      0480            .word	$480
33702                                           ! 6030                        864,
33703 8704                      0360            .word	$360
33704                                           ! 6031                      8,
33705 8706                        08            .byte	8
33706                                           ! 6032                      16,
33707 8707                        10            .byte	$10
33708                                           ! 6033                           1,
33709 8708                        01            .byte	1
33710                                           ! 6034                         15,
33711 8709                        0F            .byte	$F
33712                                           ! 6035                          31,
33713 870A                        1F            .byte	$1F
33714                                           ! 6036                        0x06,
33715 870B                        06            .byte	6
33716                                           ! 6037                     0,
33717 870C                        00            .byte	0
33718                                           ! 6038                               7,
33719 870D                        07            .byte	7
33720                                           ! 6039                          0,
33721 870E                        00            .byte	0
33722                                           ! 6040                        5,
33723 870F                        05            .byte	5
33724                                           ! 6041                             10,
33725 8710                        0A            .byte	$A
33726                                           ! 6042                          5,
33727 8711                        05            .byte	5
33728                                           ! 6043                               5,
33729 8712                        05            .byte	5
33730                                           ! 6044                         5,
33731 8713                        05            .byte	5
33732                                           ! 6045                              0,
33733 8714                        00            .byte	0
33734                                           ! 6046                         1,
33735 8715                        01            .byte	1
33736                                           ! 6047                              15,
33737 8716                        0F            .byte	$F
33738                                           ! 6048                                0,
33739 8717                        00            .byte	0
33740                                           ! 6049                        0xE0000000,
33741 8718                      0000            .word	0
33742 871A                      E000            .word	$E000
33743                                           ! 6050                               0,
33744 871C                      0000            .word	0
33745 871E                      0000            .word	0
33746                                           ! 6051                             0,
33747 8720                      0000            .word	0
33748                                           ! 6052                                2304,
33749 8722                      0900            .word	$900
33750                                           ! 6053                             0,
33751 8724                        00            .byte	0
33752                                           ! 6054                             0,
33753 8725                        00            .byte	0
33754                                           ! 6055                           5,
33755 8726                        05            .byte	5
33756                                           ! 6056                                10,
33757 8727                        0A            .byte	$A
33758                                           ! 6057                             5,
33759 8728                        05            .byte	5
33760                                           ! 6058                                  5,
33761 8729                        05            .byte	5
33762                                           ! 6059                            5,
33763 872A                        05            .byte	5
33764                                           ! 6060                                 0,
33765 872B                        00            .byte	0
33766                                           ! 6061                            1,
33767 872C                        01            .byte	1
33768                                           ! 6062                                 15,
33769 872D                        0F            .byte	$F
33770                                           ! 6063                          0,
33771 872E                      0000            .word	0
33772 8730                      0000            .word	0
33773                                           ! 6064 } },
33774                                           ! 6065 { 0x014a,
33775 8732                      014A            .word	$14A
33776                                           ! 6066 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33777 8734                      009B            .word	$9B
33778                                           ! 6067                           0x01 | 0x02 | 0x04,
33779 8736                        07            .byte	7
33780                                           ! 6068                           0,
33781 8737                        00            .byte	0
33782                                           ! 6069                           64,
33783 8738                      0040            .word	$40
33784                                           ! 6070                    64,
33785 873A                      0040            .word	$40
33786                                           ! 6071                        0xA000,
33787 873C                      A000            .word	$A000
33788                                           ! 6072                        0x0000,
33789 873E                      0000            .word	0
33790                                           ! 6073                       0,
33791 8740                      0000            .word	0
33792 8742                      0000            .word	0
33793                                           ! 6074                             2304,
33794 8744                      0900            .word	$900
33795                                           ! 6075                        1152,
33796 8746                      0480            .word	$480
33797                                           ! 6076                        864,
33798 8748                      0360            .word	$360
33799                                           ! 6077                      8,
33800 874A                        08            .byte	8
33801                                           ! 6078                      16,
33802 874B                        10            .byte	$10
33803                                           ! 6079                           1,
33804 874C                        01            .byte	1
33805                                           ! 6080                         16,
33806 874D                        10            .byte	$10
33807                                           ! 6081                          31,
33808 874E                        1F            .byte	$1F
33809                                           ! 6082                        0x06,
33810 874F                        06            .byte	6
33811                                           ! 6083                    
33812                                           ! 6083  0,
33813 8750                        00            .byte	0
33814                                           ! 6084                               7,
33815 8751                        07            .byte	7
33816                                           ! 6085                          0,
33817 8752                        00            .byte	0
33818                                           ! 6086                        5,
33819 8753                        05            .byte	5
33820                                           ! 6087                             11,
33821 8754                        0B            .byte	$B
33822                                           ! 6088                          6,
33823 8755                        06            .byte	6
33824                                           ! 6089                               5,
33825 8756                        05            .byte	5
33826                                           ! 6090                         5,
33827 8757                        05            .byte	5
33828                                           ! 6091                              0,
33829 8758                        00            .byte	0
33830                                           ! 6092                         0,
33831 8759                        00            .byte	0
33832                                           ! 6093                              0,
33833 875A                        00            .byte	0
33834                                           ! 6094                                0,
33835 875B                        00            .byte	0
33836                                           ! 6095                        0xE0000000,
33837 875C                      0000            .word	0
33838 875E                      E000            .word	$E000
33839                                           ! 6096                               0,
33840 8760                      0000            .word	0
33841 8762                      0000            .word	0
33842                                           ! 6097                             0,
33843 8764                      0000            .word	0
33844                                           ! 6098                                2304,
33845 8766                      0900            .word	$900
33846                                           ! 6099                             0,
33847 8768                        00            .byte	0
33848                                           ! 6100                             0,
33849 8769                        00            .byte	0
33850                                           ! 6101                           5,
33851 876A                        05            .byte	5
33852                                           ! 6102                                11,
33853 876B                        0B            .byte	$B
33854                                           ! 6103                             6,
33855 876C                        06            .byte	6
33856                                           ! 6104                                  5,
33857 876D                        05            .byte	5
33858                                           ! 6105                            5,
33859 876E                        05            .byte	5
33860                                           ! 6106                                 0,
33861 876F                        00            .byte	0
33862                                           ! 6107                            0,
33863 8770                        00            .byte	0
33864                                           ! 6108                                 0,
33865 8771                        00            .byte	0
33866                                           ! 6109                          0,
33867 8772                      0000            .word	0
33868 8774                      0000            .word	0
33869                                           ! 6110 } },
33870                                           ! 6111 { 0x014b,
33871 8776                      014B            .word	$14B
33872                                           ! 6112 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33873 8778                      009B            .word	$9B
33874                                           ! 6113                           0x01 | 0x02 | 0x04,
33875 877A                        07            .byte	7
33876                                           ! 6114                           0,
33877 877B                        00            .byte	0
33878                                           ! 6115                           64,
33879 877C                      0040            .word	$40
33880                                           ! 6116                    64,
33881 877E                      0040            .word	$40
33882                                           ! 6117                        0xA000,
33883 8780                      A000            .word	$A000
33884                                           ! 6118                        0x0000,
33885 8782                      0000            .word	0
33886                                           ! 6119                       0,
33887 8784                      0000            .word	0
33888 8786                      0000            .word	0
33889                                           ! 6120                             3456,
33890 8788                      0D80            .word	$D80
33891                                           ! 6121                        1152,
33892 878A                      0480            .word	$480
33893                                           ! 6122                        864,
33894 878C                      0360            .word	$360
33895                                           ! 6123                      8,
33896 878E                        08            .byte	8
33897                                           ! 6124                      16,
33898 878F                        10            .byte	$10
33899                                           ! 6125                           1,
33900 8790                        01            .byte	1
33901                                           ! 6126                         24,
33902 8791                        18            .byte	$18
33903                                           ! 6127                          46,
33904 8792                        2E            .byte	$2E
33905                                           ! 6128                        0x06,
33906 8793                        06            .byte	6
33907                                           ! 6129                     0,
33908 8794                        00            .byte	0
33909                                           ! 6130                               4,
33910 8795                        04            .byte	4
33911                                           ! 6131                          0,
33912 8796                        00            .byte	0
33913                                           ! 6132                        8,
33914 8797                        08            .byte	8
33915                                           ! 6133                             16,
33916 8798                        10            .byte	$10
33917                                           ! 6134                          8,
33918 8799                        08            .byte	8
33919                                           ! 6135                               8,
33920 879A                        08            .byte	8
33921                                           ! 6136                         8,
33922 879B                        08            .byte	8
33923                                           ! 6137                              0,
33924 879C                        00            .byte	0
33925                                           ! 6138                         0,
33926 879D                        00            .byte	0
33927                                           ! 6139                              0,
33928 879E                        00            .byte	0
33929                                           ! 6140                                0,
33930 879F                        00            .byte	0
33931                                           ! 6141                        0xE0000000,
33932 87A0                      0000            .word	0
33933 87A2                      E000            .word	$E000
33934                                           ! 6142                               0,
33935 87A4                      0000            .word	0
33936 87A6                      0000            .word	0
33937                                           ! 6143                             0,
33938 87A8                      0000            .word	0
33939                                           ! 6144                                3456,
33940 87AA                      0D80            .word	$D80
33941                                           ! 6145                             0,
33942 87AC                        00            .byte	0
33943                                           ! 6146                             0,
33944 87AD                        00            .byte	0
33945                                           ! 6147                           8,
33946 87AE                        08            .byte	8
33947                                           ! 6148                                16,
33948 87AF                        10            .byte	$10
33949                                           ! 6149                             8,
33950 87B0                        08            .byte	8
33951                                           ! 6150                                  8,
33952 87B1                        08            .byte	8
33953                                           ! 6151           
33954                                           ! 6151                  8,
33955 87B2                        08            .byte	8
33956                                           ! 6152                                 0,
33957 87B3                        00            .byte	0
33958                                           ! 6153                            0,
33959 87B4                        00            .byte	0
33960                                           ! 6154                                 0,
33961 87B5                        00            .byte	0
33962                                           ! 6155                          0,
33963 87B6                      0000            .word	0
33964 87B8                      0000            .word	0
33965                                           ! 6156 } },
33966                                           ! 6157 { 0x014c,
33967 87BA                      014C            .word	$14C
33968                                           ! 6158 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33969 87BC                      009B            .word	$9B
33970                                           ! 6159                           0x01 | 0x02 | 0x04,
33971 87BE                        07            .byte	7
33972                                           ! 6160                           0,
33973 87BF                        00            .byte	0
33974                                           ! 6161                           64,
33975 87C0                      0040            .word	$40
33976                                           ! 6162                    64,
33977 87C2                      0040            .word	$40
33978                                           ! 6163                        0xA000,
33979 87C4                      A000            .word	$A000
33980                                           ! 6164                        0x0000,
33981 87C6                      0000            .word	0
33982                                           ! 6165                       0,
33983 87C8                      0000            .word	0
33984 87CA                      0000            .word	0
33985                                           ! 6166                             4608,
33986 87CC                      1200            .word	$1200
33987                                           ! 6167                        1152,
33988 87CE                      0480            .word	$480
33989                                           ! 6168                        864,
33990 87D0                      0360            .word	$360
33991                                           ! 6169                      8,
33992 87D2                        08            .byte	8
33993                                           ! 6170                      16,
33994 87D3                        10            .byte	$10
33995                                           ! 6171                           1,
33996 87D4                        01            .byte	1
33997                                           ! 6172                         32,
33998 87D5                        20            .byte	$20
33999                                           ! 6173                          61,
34000 87D6                        3D            .byte	$3D
34001                                           ! 6174                        0x06,
34002 87D7                        06            .byte	6
34003                                           ! 6175                     0,
34004 87D8                        00            .byte	0
34005                                           ! 6176                               3,
34006 87D9                        03            .byte	3
34007                                           ! 6177                          0,
34008 87DA                        00            .byte	0
34009                                           ! 6178                        8,
34010 87DB                        08            .byte	8
34011                                           ! 6179                             16,
34012 87DC                        10            .byte	$10
34013                                           ! 6180                          8,
34014 87DD                        08            .byte	8
34015                                           ! 6181                               8,
34016 87DE                        08            .byte	8
34017                                           ! 6182                         8,
34018 87DF                        08            .byte	8
34019                                           ! 6183                              0,
34020 87E0                        00            .byte	0
34021                                           ! 6184                         8,
34022 87E1                        08            .byte	8
34023                                           ! 6185                              24,
34024 87E2                        18            .byte	$18
34025                                           ! 6186                                0x02,
34026 87E3                        02            .byte	2
34027                                           ! 6187                        0xE0000000,
34028 87E4                      0000            .word	0
34029 87E6                      E000            .word	$E000
34030                                           ! 6188                               0,
34031 87E8                      0000            .word	0
34032 87EA                      0000            .word	0
34033                                           ! 6189                             0,
34034 87EC                      0000            .word	0
34035                                           ! 6190                                4608,
34036 87EE                      1200            .word	$1200
34037                                           ! 6191                             0,
34038 87F0                        00            .byte	0
34039                                           ! 6192                             0,
34040 87F1                        00            .byte	0
34041                                           ! 6193                           8,
34042 87F2                        08            .byte	8
34043                                           ! 6194                                16,
34044 87F3                        10            .byte	$10
34045                                           ! 6195                             8,
34046 87F4                        08            .byte	8
34047                                           ! 6196                                  8,
34048 87F5                        08            .byte	8
34049                                           ! 6197                            8,
34050 87F6                        08            .byte	8
34051                                           ! 6198                                 0,
34052 87F7                        00            .byte	0
34053                                           ! 6199                            8,
34054 87F8                        08            .byte	8
34055                                           ! 6200                                 24,
34056 87F9                        18            .byte	$18
34057                                           ! 6201                          0,
34058 87FA                      0000            .word	0
34059 87FC                      0000            .word	0
34060                                           ! 6202 } },
34061                                           ! 6203 { 0x0178,
34062 87FE                      0178            .word	$178
34063                                           ! 6204 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34064 8800                      009B            .word	$9B
34065                                           ! 6205                           0x01 | 0x02 | 0x04,
34066 8802                        07            .byte	7
34067                                           ! 6206                           0,
34068 8803                        00            .byte	0
34069                                           ! 6207                           64,
34070 8804                      0040            .word	$40
34071                                           ! 6208                    64,
34072 8806                      0040            .word	$40
34073                                           ! 6209                        0xA000,
34074 8808                      A000            .word	$A000
34075                                           ! 6210                        0x0000,
34076 880A                      0000            .word	0
34077                                           ! 6211                       0,
34078 880C                      0000            .word	0
34079 880E                      0000            .word	0
34080                                           ! 6212                             2560,
34081 8810                      0A00            .word	$A00
34082                                           ! 6213                        1280,
34083 8812                      0500            .word	$500
34084                                           ! 6214                        800,
34085 8814                      0320            .word	$320
34086                                           ! 6215                      8,
34087 8816                        08            .byte	8
34088                                           ! 6216                      16,
34089 8817                        10            .byte	$10
34090                                           ! 6217                           1,
34091 8818                        01            .byte	1
34092                                           ! 6218                         16,
34093 8819                        10            .byte	$10
34094                                           ! 6219                          32,
34095 881A                        20            .byte	$20
34096                                           ! 6220                     
34097                                           ! 6220    0x06,
34098 881B                        06            .byte	6
34099                                           ! 6221                     0,
34100 881C                        00            .byte	0
34101                                           ! 6222                               7,
34102 881D                        07            .byte	7
34103                                           ! 6223                          0,
34104 881E                        00            .byte	0
34105                                           ! 6224                        5,
34106 881F                        05            .byte	5
34107                                           ! 6225                             11,
34108 8820                        0B            .byte	$B
34109                                           ! 6226                          6,
34110 8821                        06            .byte	6
34111                                           ! 6227                               5,
34112 8822                        05            .byte	5
34113                                           ! 6228                         5,
34114 8823                        05            .byte	5
34115                                           ! 6229                              0,
34116 8824                        00            .byte	0
34117                                           ! 6230                         0,
34118 8825                        00            .byte	0
34119                                           ! 6231                              0,
34120 8826                        00            .byte	0
34121                                           ! 6232                                0,
34122 8827                        00            .byte	0
34123                                           ! 6233                        0xE0000000,
34124 8828                      0000            .word	0
34125 882A                      E000            .word	$E000
34126                                           ! 6234                               0,
34127 882C                      0000            .word	0
34128 882E                      0000            .word	0
34129                                           ! 6235                             0,
34130 8830                      0000            .word	0
34131                                           ! 6236                                2560,
34132 8832                      0A00            .word	$A00
34133                                           ! 6237                             0,
34134 8834                        00            .byte	0
34135                                           ! 6238                             0,
34136 8835                        00            .byte	0
34137                                           ! 6239                           5,
34138 8836                        05            .byte	5
34139                                           ! 6240                                11,
34140 8837                        0B            .byte	$B
34141                                           ! 6241                             6,
34142 8838                        06            .byte	6
34143                                           ! 6242                                  5,
34144 8839                        05            .byte	5
34145                                           ! 6243                            5,
34146 883A                        05            .byte	5
34147                                           ! 6244                                 0,
34148 883B                        00            .byte	0
34149                                           ! 6245                            0,
34150 883C                        00            .byte	0
34151                                           ! 6246                                 0,
34152 883D                        00            .byte	0
34153                                           ! 6247                          0,
34154 883E                      0000            .word	0
34155 8840                      0000            .word	0
34156                                           ! 6248 } },
34157                                           ! 6249 { 0x0179,
34158 8842                      0179            .word	$179
34159                                           ! 6250 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34160 8844                      009B            .word	$9B
34161                                           ! 6251                           0x01 | 0x02 | 0x04,
34162 8846                        07            .byte	7
34163                                           ! 6252                           0,
34164 8847                        00            .byte	0
34165                                           ! 6253                           64,
34166 8848                      0040            .word	$40
34167                                           ! 6254                    64,
34168 884A                      0040            .word	$40
34169                                           ! 6255                        0xA000,
34170 884C                      A000            .word	$A000
34171                                           ! 6256                        0x0000,
34172 884E                      0000            .word	0
34173                                           ! 6257                       0,
34174 8850                      0000            .word	0
34175 8852                      0000            .word	0
34176                                           ! 6258                             3840,
34177 8854                      0F00            .word	$F00
34178                                           ! 6259                        1280,
34179 8856                      0500            .word	$500
34180                                           ! 6260                        800,
34181 8858                      0320            .word	$320
34182                                           ! 6261                      8,
34183 885A                        08            .byte	8
34184                                           ! 6262                      16,
34185 885B                        10            .byte	$10
34186                                           ! 6263                           1,
34187 885C                        01            .byte	1
34188                                           ! 6264                         24,
34189 885D                        18            .byte	$18
34190                                           ! 6265                          47,
34191 885E                        2F            .byte	$2F
34192                                           ! 6266                        0x06,
34193 885F                        06            .byte	6
34194                                           ! 6267                     0,
34195 8860                        00            .byte	0
34196                                           ! 6268                               4,
34197 8861                        04            .byte	4
34198                                           ! 6269                          0,
34199 8862                        00            .byte	0
34200                                           ! 6270                        8,
34201 8863                        08            .byte	8
34202                                           ! 6271                             16,
34203 8864                        10            .byte	$10
34204                                           ! 6272                          8,
34205 8865                        08            .byte	8
34206                                           ! 6273                               8,
34207 8866                        08            .byte	8
34208                                           ! 6274                         8,
34209 8867                        08            .byte	8
34210                                           ! 6275                              0,
34211 8868                        00            .byte	0
34212                                           ! 6276                         0,
34213 8869                        00            .byte	0
34214                                           ! 6277                              0,
34215 886A                        00            .byte	0
34216                                           ! 6278                                0,
34217 886B                        00            .byte	0
34218                                           ! 6279                        0xE0000000,
34219 886C                      0000            .word	0
34220 886E                      E000            .word	$E000
34221                                           ! 6280                               0,
34222 8870                      0000            .word	0
34223 8872                      0000            .word	0
34224                                           ! 6281                             0,
34225 8874                      0000            .word	0
34226                                           ! 6282                                3840,
34227 8876                      0F00            .word	$F00
34228                                           ! 6283                             0,
34229 8878                        00            .byte	0
34230                                           ! 6284                             0,
34231 8879                        00            .byte	0
34232                                           ! 6285                           8,
34233 887A                        08            .byte	8
34234                                           ! 6286                                16,
34235 887B                        10            .byte	$10
34236                                           ! 6287                             8,
34237 887C                        08            .byte	8
34238                                           ! 6288                   
34239                                           ! 6288                8,
34240 887D                        08            .byte	8
34241                                           ! 6289                            8,
34242 887E                        08            .byte	8
34243                                           ! 6290                                 0,
34244 887F                        00            .byte	0
34245                                           ! 6291                            0,
34246 8880                        00            .byte	0
34247                                           ! 6292                                 0,
34248 8881                        00            .byte	0
34249                                           ! 6293                          0,
34250 8882                      0000            .word	0
34251 8884                      0000            .word	0
34252                                           ! 6294 } },
34253                                           ! 6295 { 0x017a,
34254 8886                      017A            .word	$17A
34255                                           ! 6296 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34256 8888                      009B            .word	$9B
34257                                           ! 6297                           0x01 | 0x02 | 0x04,
34258 888A                        07            .byte	7
34259                                           ! 6298                           0,
34260 888B                        00            .byte	0
34261                                           ! 6299                           64,
34262 888C                      0040            .word	$40
34263                                           ! 6300                    64,
34264 888E                      0040            .word	$40
34265                                           ! 6301                        0xA000,
34266 8890                      A000            .word	$A000
34267                                           ! 6302                        0x0000,
34268 8892                      0000            .word	0
34269                                           ! 6303                       0,
34270 8894                      0000            .word	0
34271 8896                      0000            .word	0
34272                                           ! 6304                             5120,
34273 8898                      1400            .word	$1400
34274                                           ! 6305                        1280,
34275 889A                      0500            .word	$500
34276                                           ! 6306                        800,
34277 889C                      0320            .word	$320
34278                                           ! 6307                      8,
34279 889E                        08            .byte	8
34280                                           ! 6308                      16,
34281 889F                        10            .byte	$10
34282                                           ! 6309                           1,
34283 88A0                        01            .byte	1
34284                                           ! 6310                         32,
34285 88A1                        20            .byte	$20
34286                                           ! 6311                          63,
34287 88A2                        3F            .byte	$3F
34288                                           ! 6312                        0x06,
34289 88A3                        06            .byte	6
34290                                           ! 6313                     0,
34291 88A4                        00            .byte	0
34292                                           ! 6314                               3,
34293 88A5                        03            .byte	3
34294                                           ! 6315                          0,
34295 88A6                        00            .byte	0
34296                                           ! 6316                        8,
34297 88A7                        08            .byte	8
34298                                           ! 6317                             16,
34299 88A8                        10            .byte	$10
34300                                           ! 6318                          8,
34301 88A9                        08            .byte	8
34302                                           ! 6319                               8,
34303 88AA                        08            .byte	8
34304                                           ! 6320                         8,
34305 88AB                        08            .byte	8
34306                                           ! 6321                              0,
34307 88AC                        00            .byte	0
34308                                           ! 6322                         8,
34309 88AD                        08            .byte	8
34310                                           ! 6323                              24,
34311 88AE                        18            .byte	$18
34312                                           ! 6324                                0x02,
34313 88AF                        02            .byte	2
34314                                           ! 6325                        0xE0000000,
34315 88B0                      0000            .word	0
34316 88B2                      E000            .word	$E000
34317                                           ! 6326                               0,
34318 88B4                      0000            .word	0
34319 88B6                      0000            .word	0
34320                                           ! 6327                             0,
34321 88B8                      0000            .word	0
34322                                           ! 6328                                5120,
34323 88BA                      1400            .word	$1400
34324                                           ! 6329                             0,
34325 88BC                        00            .byte	0
34326                                           ! 6330                             0,
34327 88BD                        00            .byte	0
34328                                           ! 6331                           8,
34329 88BE                        08            .byte	8
34330                                           ! 6332                                16,
34331 88BF                        10            .byte	$10
34332                                           ! 6333                             8,
34333 88C0                        08            .byte	8
34334                                           ! 6334                                  8,
34335 88C1                        08            .byte	8
34336                                           ! 6335                            8,
34337 88C2                        08            .byte	8
34338                                           ! 6336                                 0,
34339 88C3                        00            .byte	0
34340                                           ! 6337                            8,
34341 88C4                        08            .byte	8
34342                                           ! 6338                                 24,
34343 88C5                        18            .byte	$18
34344                                           ! 6339                          0,
34345 88C6                      0000            .word	0
34346 88C8                      0000            .word	0
34347                                           ! 6340 } },
34348                                           ! 6341 { 0x017b,
34349 88CA                      017B            .word	$17B
34350                                           ! 6342 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34351 88CC                      009B            .word	$9B
34352                                           ! 6343                           0x01 | 0x02 | 0x04,
34353 88CE                        07            .byte	7
34354                                           ! 6344                           0,
34355 88CF                        00            .byte	0
34356                                           ! 6345                           64,
34357 88D0                      0040            .word	$40
34358                                           ! 6346                    64,
34359 88D2                      0040            .word	$40
34360                                           ! 6347                        0xA000,
34361 88D4                      A000            .word	$A000
34362                                           ! 6348                        0x0000,
34363 88D6                      0000            .word	0
34364                                           ! 6349                       0,
34365 88D8                      0000            .word	0
34366 88DA                      0000            .word	0
34367                                           ! 6350                             2560,
34368 88DC                      0A00            .word	$A00
34369                                           ! 6351                        1280,
34370 88DE                      0500            .word	$500
34371                                           ! 6352                        960,
34372 88E0                      03C0            .word	$3C0
34373                                           ! 6353                      8,
34374 88E2                        08            .byte	8
34375                                           ! 6354                      16,
34376 88E3                        10            .byte	$10
34377                                           ! 6355                           1,
34378 88E4                        01            .byte	1
34379                                           ! 6356                         16,
34380 88E5                        10            .byte	$10
34381                                           ! 6357                      
34382                                           ! 6357     38,
34383 88E6                        26            .byte	$26
34384                                           ! 6358                        0x06,
34385 88E7                        06            .byte	6
34386                                           ! 6359                     0,
34387 88E8                        00            .byte	0
34388                                           ! 6360                               5,
34389 88E9                        05            .byte	5
34390                                           ! 6361                          0,
34391 88EA                        00            .byte	0
34392                                           ! 6362                        5,
34393 88EB                        05            .byte	5
34394                                           ! 6363                             11,
34395 88EC                        0B            .byte	$B
34396                                           ! 6364                          6,
34397 88ED                        06            .byte	6
34398                                           ! 6365                               5,
34399 88EE                        05            .byte	5
34400                                           ! 6366                         5,
34401 88EF                        05            .byte	5
34402                                           ! 6367                              0,
34403 88F0                        00            .byte	0
34404                                           ! 6368                         0,
34405 88F1                        00            .byte	0
34406                                           ! 6369                              0,
34407 88F2                        00            .byte	0
34408                                           ! 6370                                0,
34409 88F3                        00            .byte	0
34410                                           ! 6371                        0xE0000000,
34411 88F4                      0000            .word	0
34412 88F6                      E000            .word	$E000
34413                                           ! 6372                               0,
34414 88F8                      0000            .word	0
34415 88FA                      0000            .word	0
34416                                           ! 6373                             0,
34417 88FC                      0000            .word	0
34418                                           ! 6374                                2560,
34419 88FE                      0A00            .word	$A00
34420                                           ! 6375                             0,
34421 8900                        00            .byte	0
34422                                           ! 6376                             0,
34423 8901                        00            .byte	0
34424                                           ! 6377                           5,
34425 8902                        05            .byte	5
34426                                           ! 6378                                11,
34427 8903                        0B            .byte	$B
34428                                           ! 6379                             6,
34429 8904                        06            .byte	6
34430                                           ! 6380                                  5,
34431 8905                        05            .byte	5
34432                                           ! 6381                            5,
34433 8906                        05            .byte	5
34434                                           ! 6382                                 0,
34435 8907                        00            .byte	0
34436                                           ! 6383                            0,
34437 8908                        00            .byte	0
34438                                           ! 6384                                 0,
34439 8909                        00            .byte	0
34440                                           ! 6385                          0,
34441 890A                      0000            .word	0
34442 890C                      0000            .word	0
34443                                           ! 6386 } },
34444                                           ! 6387 { 0x017c,
34445 890E                      017C            .word	$17C
34446                                           ! 6388 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34447 8910                      009B            .word	$9B
34448                                           ! 6389                           0x01 | 0x02 | 0x04,
34449 8912                        07            .byte	7
34450                                           ! 6390                           0,
34451 8913                        00            .byte	0
34452                                           ! 6391                           64,
34453 8914                      0040            .word	$40
34454                                           ! 6392                    64,
34455 8916                      0040            .word	$40
34456                                           ! 6393                        0xA000,
34457 8918                      A000            .word	$A000
34458                                           ! 6394                        0x0000,
34459 891A                      0000            .word	0
34460                                           ! 6395                       0,
34461 891C                      0000            .word	0
34462 891E                      0000            .word	0
34463                                           ! 6396                             3840,
34464 8920                      0F00            .word	$F00
34465                                           ! 6397                        1280,
34466 8922                      0500            .word	$500
34467                                           ! 6398                        960,
34468 8924                      03C0            .word	$3C0
34469                                           ! 6399                      8,
34470 8926                        08            .byte	8
34471                                           ! 6400                      16,
34472 8927                        10            .byte	$10
34473                                           ! 6401                           1,
34474 8928                        01            .byte	1
34475                                           ! 6402                         24,
34476 8929                        18            .byte	$18
34477                                           ! 6403                          57,
34478 892A                        39            .byte	$39
34479                                           ! 6404                        0x06,
34480 892B                        06            .byte	6
34481                                           ! 6405                     0,
34482 892C                        00            .byte	0
34483                                           ! 6406                               3,
34484 892D                        03            .byte	3
34485                                           ! 6407                          0,
34486 892E                        00            .byte	0
34487                                           ! 6408                        8,
34488 892F                        08            .byte	8
34489                                           ! 6409                             16,
34490 8930                        10            .byte	$10
34491                                           ! 6410                          8,
34492 8931                        08            .byte	8
34493                                           ! 6411                               8,
34494 8932                        08            .byte	8
34495                                           ! 6412                         8,
34496 8933                        08            .byte	8
34497                                           ! 6413                              0,
34498 8934                        00            .byte	0
34499                                           ! 6414                         0,
34500 8935                        00            .byte	0
34501                                           ! 6415                              0,
34502 8936                        00            .byte	0
34503                                           ! 6416                                0,
34504 8937                        00            .byte	0
34505                                           ! 6417                        0xE0000000,
34506 8938                      0000            .word	0
34507 893A                      E000            .word	$E000
34508                                           ! 6418                               0,
34509 893C                      0000            .word	0
34510 893E                      0000            .word	0
34511                                           ! 6419                             0,
34512 8940                      0000            .word	0
34513                                           ! 6420                                3840,
34514 8942                      0F00            .word	$F00
34515                                           ! 6421                             0,
34516 8944                        00            .byte	0
34517                                           ! 6422                             0,
34518 8945                        00            .byte	0
34519                                           ! 6423                           8,
34520 8946                        08            .byte	8
34521                                           ! 6424                                16,
34522 8947                        10            .byte	$10
34523                                           ! 6425                      
34524                                           ! 6425        8,
34525 8948                        08            .byte	8
34526                                           ! 6426                                  8,
34527 8949                        08            .byte	8
34528                                           ! 6427                            8,
34529 894A                        08            .byte	8
34530                                           ! 6428                                 0,
34531 894B                        00            .byte	0
34532                                           ! 6429                            0,
34533 894C                        00            .byte	0
34534                                           ! 6430                                 0,
34535 894D                        00            .byte	0
34536                                           ! 6431                          0,
34537 894E                      0000            .word	0
34538 8950                      0000            .word	0
34539                                           ! 6432 } },
34540                                           ! 6433 { 0x017d,
34541 8952                      017D            .word	$17D
34542                                           ! 6434 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34543 8954                      009B            .word	$9B
34544                                           ! 6435                           0x01 | 0x02 | 0x04,
34545 8956                        07            .byte	7
34546                                           ! 6436                           0,
34547 8957                        00            .byte	0
34548                                           ! 6437                           64,
34549 8958                      0040            .word	$40
34550                                           ! 6438                    64,
34551 895A                      0040            .word	$40
34552                                           ! 6439                        0xA000,
34553 895C                      A000            .word	$A000
34554                                           ! 6440                        0x0000,
34555 895E                      0000            .word	0
34556                                           ! 6441                       0,
34557 8960                      0000            .word	0
34558 8962                      0000            .word	0
34559                                           ! 6442                             5120,
34560 8964                      1400            .word	$1400
34561                                           ! 6443                        1280,
34562 8966                      0500            .word	$500
34563                                           ! 6444                        960,
34564 8968                      03C0            .word	$3C0
34565                                           ! 6445                      8,
34566 896A                        08            .byte	8
34567                                           ! 6446                      16,
34568 896B                        10            .byte	$10
34569                                           ! 6447                           1,
34570 896C                        01            .byte	1
34571                                           ! 6448                         32,
34572 896D                        20            .byte	$20
34573                                           ! 6449                          75,
34574 896E                        4B            .byte	$4B
34575                                           ! 6450                        0x06,
34576 896F                        06            .byte	6
34577                                           ! 6451                     0,
34578 8970                        00            .byte	0
34579                                           ! 6452                               2,
34580 8971                        02            .byte	2
34581                                           ! 6453                          0,
34582 8972                        00            .byte	0
34583                                           ! 6454                        8,
34584 8973                        08            .byte	8
34585                                           ! 6455                             16,
34586 8974                        10            .byte	$10
34587                                           ! 6456                          8,
34588 8975                        08            .byte	8
34589                                           ! 6457                               8,
34590 8976                        08            .byte	8
34591                                           ! 6458                         8,
34592 8977                        08            .byte	8
34593                                           ! 6459                              0,
34594 8978                        00            .byte	0
34595                                           ! 6460                         8,
34596 8979                        08            .byte	8
34597                                           ! 6461                              24,
34598 897A                        18            .byte	$18
34599                                           ! 6462                                0x02,
34600 897B                        02            .byte	2
34601                                           ! 6463                        0xE0000000,
34602 897C                      0000            .word	0
34603 897E                      E000            .word	$E000
34604                                           ! 6464                               0,
34605 8980                      0000            .word	0
34606 8982                      0000            .word	0
34607                                           ! 6465                             0,
34608 8984                      0000            .word	0
34609                                           ! 6466                                5120,
34610 8986                      1400            .word	$1400
34611                                           ! 6467                             0,
34612 8988                        00            .byte	0
34613                                           ! 6468                             0,
34614 8989                        00            .byte	0
34615                                           ! 6469                           8,
34616 898A                        08            .byte	8
34617                                           ! 6470                                16,
34618 898B                        10            .byte	$10
34619                                           ! 6471                             8,
34620 898C                        08            .byte	8
34621                                           ! 6472                                  8,
34622 898D                        08            .byte	8
34623                                           ! 6473                            8,
34624 898E                        08            .byte	8
34625                                           ! 6474                                 0,
34626 898F                        00            .byte	0
34627                                           ! 6475                            8,
34628 8990                        08            .byte	8
34629                                           ! 6476                                 24,
34630 8991                        18            .byte	$18
34631                                           ! 6477                          0,
34632 8992                      0000            .word	0
34633 8994                      0000            .word	0
34634                                           ! 6478 } },
34635                                           ! 6479 { 0x017e,
34636 8996                      017E            .word	$17E
34637                                           ! 6480 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34638 8998                      009B            .word	$9B
34639                                           ! 6481                           0x01 | 0x02 | 0x04,
34640 899A                        07            .byte	7
34641                                           ! 6482                           0,
34642 899B                        00            .byte	0
34643                                           ! 6483                           64,
34644 899C                      0040            .word	$40
34645                                           ! 6484                    64,
34646 899E                      0040            .word	$40
34647                                           ! 6485                        0xA000,
34648 89A0                      A000            .word	$A000
34649                                           ! 6486                        0x0000,
34650 89A2                      0000            .word	0
34651                                           ! 6487                       0,
34652 89A4                      0000            .word	0
34653 89A6                      0000            .word	0
34654                                           ! 6488                             2880,
34655 89A8                      0B40            .word	$B40
34656                                           ! 6489                        1440,
34657 89AA                      05A0            .word	$5A0
34658                                           ! 6490                        900,
34659 89AC                      0384            .word	$384
34660                                           ! 6491                      8,
34661 89AE                        08            .byte	8
34662                                           ! 6492                      16,
34663 89AF                        10            .byte	$10
34664                                           ! 6493                           1,
34665 89B0                        01            .byte	1
34666                                           ! 6494                      
34667                                           ! 6494    16,
34668 89B1                        10            .byte	$10
34669                                           ! 6495                          40,
34670 89B2                        28            .byte	$28
34671                                           ! 6496                        0x06,
34672 89B3                        06            .byte	6
34673                                           ! 6497                     0,
34674 89B4                        00            .byte	0
34675                                           ! 6498                               5,
34676 89B5                        05            .byte	5
34677                                           ! 6499                          0,
34678 89B6                        00            .byte	0
34679                                           ! 6500                        5,
34680 89B7                        05            .byte	5
34681                                           ! 6501                             11,
34682 89B8                        0B            .byte	$B
34683                                           ! 6502                          6,
34684 89B9                        06            .byte	6
34685                                           ! 6503                               5,
34686 89BA                        05            .byte	5
34687                                           ! 6504                         5,
34688 89BB                        05            .byte	5
34689                                           ! 6505                              0,
34690 89BC                        00            .byte	0
34691                                           ! 6506                         0,
34692 89BD                        00            .byte	0
34693                                           ! 6507                              0,
34694 89BE                        00            .byte	0
34695                                           ! 6508                                0,
34696 89BF                        00            .byte	0
34697                                           ! 6509                        0xE0000000,
34698 89C0                      0000            .word	0
34699 89C2                      E000            .word	$E000
34700                                           ! 6510                               0,
34701 89C4                      0000            .word	0
34702 89C6                      0000            .word	0
34703                                           ! 6511                             0,
34704 89C8                      0000            .word	0
34705                                           ! 6512                                2880,
34706 89CA                      0B40            .word	$B40
34707                                           ! 6513                             0,
34708 89CC                        00            .byte	0
34709                                           ! 6514                             0,
34710 89CD                        00            .byte	0
34711                                           ! 6515                           5,
34712 89CE                        05            .byte	5
34713                                           ! 6516                                11,
34714 89CF                        0B            .byte	$B
34715                                           ! 6517                             6,
34716 89D0                        06            .byte	6
34717                                           ! 6518                                  5,
34718 89D1                        05            .byte	5
34719                                           ! 6519                            5,
34720 89D2                        05            .byte	5
34721                                           ! 6520                                 0,
34722 89D3                        00            .byte	0
34723                                           ! 6521                            0,
34724 89D4                        00            .byte	0
34725                                           ! 6522                                 0,
34726 89D5                        00            .byte	0
34727                                           ! 6523                          0,
34728 89D6                      0000            .word	0
34729 89D8                      0000            .word	0
34730                                           ! 6524 } },
34731                                           ! 6525 { 0x017f,
34732 89DA                      017F            .word	$17F
34733                                           ! 6526 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34734 89DC                      009B            .word	$9B
34735                                           ! 6527                           0x01 | 0x02 | 0x04,
34736 89DE                        07            .byte	7
34737                                           ! 6528                           0,
34738 89DF                        00            .byte	0
34739                                           ! 6529                           64,
34740 89E0                      0040            .word	$40
34741                                           ! 6530                    64,
34742 89E2                      0040            .word	$40
34743                                           ! 6531                        0xA000,
34744 89E4                      A000            .word	$A000
34745                                           ! 6532                        0x0000,
34746 89E6                      0000            .word	0
34747                                           ! 6533                       0,
34748 89E8                      0000            .word	0
34749 89EA                      0000            .word	0
34750                                           ! 6534                             4320,
34751 89EC                      10E0            .word	$10E0
34752                                           ! 6535                        1440,
34753 89EE                      05A0            .word	$5A0
34754                                           ! 6536                        900,
34755 89F0                      0384            .word	$384
34756                                           ! 6537                      8,
34757 89F2                        08            .byte	8
34758                                           ! 6538                      16,
34759 89F3                        10            .byte	$10
34760                                           ! 6539                           1,
34761 89F4                        01            .byte	1
34762                                           ! 6540                         24,
34763 89F5                        18            .byte	$18
34764                                           ! 6541                          60,
34765 89F6                        3C            .byte	$3C
34766                                           ! 6542                        0x06,
34767 89F7                        06            .byte	6
34768                                           ! 6543                     0,
34769 89F8                        00            .byte	0
34770                                           ! 6544                               3,
34771 89F9                        03            .byte	3
34772                                           ! 6545                          0,
34773 89FA                        00            .byte	0
34774                                           ! 6546                        8,
34775 89FB                        08            .byte	8
34776                                           ! 6547                             16,
34777 89FC                        10            .byte	$10
34778                                           ! 6548                          8,
34779 89FD                        08            .byte	8
34780                                           ! 6549                               8,
34781 89FE                        08            .byte	8
34782                                           ! 6550                         8,
34783 89FF                        08            .byte	8
34784                                           ! 6551                              0,
34785 8A00                        00            .byte	0
34786                                           ! 6552                         0,
34787 8A01                        00            .byte	0
34788                                           ! 6553                              0,
34789 8A02                        00            .byte	0
34790                                           ! 6554                                0,
34791 8A03                        00            .byte	0
34792                                           ! 6555                        0xE0000000,
34793 8A04                      0000            .word	0
34794 8A06                      E000            .word	$E000
34795                                           ! 6556                               0,
34796 8A08                      0000            .word	0
34797 8A0A                      0000            .word	0
34798                                           ! 6557                             0,
34799 8A0C                      0000            .word	0
34800                                           ! 6558                                4320,
34801 8A0E                      10E0            .word	$10E0
34802                                           ! 6559                             0,
34803 8A10                        00            .byte	0
34804                                           ! 6560                             0,
34805 8A11                        00            .byte	0
34806                                           ! 6561                           8,
34807 8A12                        08            .byte	8
34808                                           ! 6562                             
34809                                           ! 6562    16,
34810 8A13                        10            .byte	$10
34811                                           ! 6563                             8,
34812 8A14                        08            .byte	8
34813                                           ! 6564                                  8,
34814 8A15                        08            .byte	8
34815                                           ! 6565                            8,
34816 8A16                        08            .byte	8
34817                                           ! 6566                                 0,
34818 8A17                        00            .byte	0
34819                                           ! 6567                            0,
34820 8A18                        00            .byte	0
34821                                           ! 6568                                 0,
34822 8A19                        00            .byte	0
34823                                           ! 6569                          0,
34824 8A1A                      0000            .word	0
34825 8A1C                      0000            .word	0
34826                                           ! 6570 } },
34827                                           ! 6571 { 0x0180,
34828 8A1E                      0180            .word	$180
34829                                           ! 6572 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34830 8A20                      009B            .word	$9B
34831                                           ! 6573                           0x01 | 0x02 | 0x04,
34832 8A22                        07            .byte	7
34833                                           ! 6574                           0,
34834 8A23                        00            .byte	0
34835                                           ! 6575                           64,
34836 8A24                      0040            .word	$40
34837                                           ! 6576                    64,
34838 8A26                      0040            .word	$40
34839                                           ! 6577                        0xA000,
34840 8A28                      A000            .word	$A000
34841                                           ! 6578                        0x0000,
34842 8A2A                      0000            .word	0
34843                                           ! 6579                       0,
34844 8A2C                      0000            .word	0
34845 8A2E                      0000            .word	0
34846                                           ! 6580                             5760,
34847 8A30                      1680            .word	$1680
34848                                           ! 6581                        1440,
34849 8A32                      05A0            .word	$5A0
34850                                           ! 6582                        900,
34851 8A34                      0384            .word	$384
34852                                           ! 6583                      8,
34853 8A36                        08            .byte	8
34854                                           ! 6584                      16,
34855 8A37                        10            .byte	$10
34856                                           ! 6585                           1,
34857 8A38                        01            .byte	1
34858                                           ! 6586                         32,
34859 8A39                        20            .byte	$20
34860                                           ! 6587                          80,
34861 8A3A                        50            .byte	$50
34862                                           ! 6588                        0x06,
34863 8A3B                        06            .byte	6
34864                                           ! 6589                     0,
34865 8A3C                        00            .byte	0
34866                                           ! 6590                               2,
34867 8A3D                        02            .byte	2
34868                                           ! 6591                          0,
34869 8A3E                        00            .byte	0
34870                                           ! 6592                        8,
34871 8A3F                        08            .byte	8
34872                                           ! 6593                             16,
34873 8A40                        10            .byte	$10
34874                                           ! 6594                          8,
34875 8A41                        08            .byte	8
34876                                           ! 6595                               8,
34877 8A42                        08            .byte	8
34878                                           ! 6596                         8,
34879 8A43                        08            .byte	8
34880                                           ! 6597                              0,
34881 8A44                        00            .byte	0
34882                                           ! 6598                         8,
34883 8A45                        08            .byte	8
34884                                           ! 6599                              24,
34885 8A46                        18            .byte	$18
34886                                           ! 6600                                0x02,
34887 8A47                        02            .byte	2
34888                                           ! 6601                        0xE0000000,
34889 8A48                      0000            .word	0
34890 8A4A                      E000            .word	$E000
34891                                           ! 6602                               0,
34892 8A4C                      0000            .word	0
34893 8A4E                      0000            .word	0
34894                                           ! 6603                             0,
34895 8A50                      0000            .word	0
34896                                           ! 6604                                5760,
34897 8A52                      1680            .word	$1680
34898                                           ! 6605                             0,
34899 8A54                        00            .byte	0
34900                                           ! 6606                             0,
34901 8A55                        00            .byte	0
34902                                           ! 6607                           8,
34903 8A56                        08            .byte	8
34904                                           ! 6608                                16,
34905 8A57                        10            .byte	$10
34906                                           ! 6609                             8,
34907 8A58                        08            .byte	8
34908                                           ! 6610                                  8,
34909 8A59                        08            .byte	8
34910                                           ! 6611                            8,
34911 8A5A                        08            .byte	8
34912                                           ! 6612                                 0,
34913 8A5B                        00            .byte	0
34914                                           ! 6613                            8,
34915 8A5C                        08            .byte	8
34916                                           ! 6614                                 24,
34917 8A5D                        18            .byte	$18
34918                                           ! 6615                          0,
34919 8A5E                      0000            .word	0
34920 8A60                      0000            .word	0
34921                                           ! 6616 } },
34922                                           ! 6617 { 0x0181,
34923 8A62                      0181            .word	$181
34924                                           ! 6618 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34925 8A64                      009B            .word	$9B
34926                                           ! 6619                           0x01 | 0x02 | 0x04,
34927 8A66                        07            .byte	7
34928                                           ! 6620                           0,
34929 8A67                        00            .byte	0
34930                                           ! 6621                           64,
34931 8A68                      0040            .word	$40
34932                                           ! 6622                    64,
34933 8A6A                      0040            .word	$40
34934                                           ! 6623                        0xA000,
34935 8A6C                      A000            .word	$A000
34936                                           ! 6624                        0x0000,
34937 8A6E                      0000            .word	0
34938                                           ! 6625                       0,
34939 8A70                      0000            .word	0
34940 8A72                      0000            .word	0
34941                                           ! 6626                             2800,
34942 8A74                      0AF0            .word	$AF0
34943                                           ! 6627                        1400,
34944 8A76                      0578            .word	$578
34945                                           ! 6628                        1050,
34946 8A78                      041A            .word	$41A
34947                                           ! 6629                      8,
34948 8A7A                        08            .byte	8
34949                                           ! 6630                      16,
34950 8A7B                        10            .byte	$10
34951                                           ! 6631                      
34952                                           ! 6631      1,
34953 8A7C                        01            .byte	1
34954                                           ! 6632                         16,
34955 8A7D                        10            .byte	$10
34956                                           ! 6633                          45,
34957 8A7E                        2D            .byte	$2D
34958                                           ! 6634                        0x06,
34959 8A7F                        06            .byte	6
34960                                           ! 6635                     0,
34961 8A80                        00            .byte	0
34962                                           ! 6636                               4,
34963 8A81                        04            .byte	4
34964                                           ! 6637                          0,
34965 8A82                        00            .byte	0
34966                                           ! 6638                        5,
34967 8A83                        05            .byte	5
34968                                           ! 6639                             11,
34969 8A84                        0B            .byte	$B
34970                                           ! 6640                          6,
34971 8A85                        06            .byte	6
34972                                           ! 6641                               5,
34973 8A86                        05            .byte	5
34974                                           ! 6642                         5,
34975 8A87                        05            .byte	5
34976                                           ! 6643                              0,
34977 8A88                        00            .byte	0
34978                                           ! 6644                         0,
34979 8A89                        00            .byte	0
34980                                           ! 6645                              0,
34981 8A8A                        00            .byte	0
34982                                           ! 6646                                0,
34983 8A8B                        00            .byte	0
34984                                           ! 6647                        0xE0000000,
34985 8A8C                      0000            .word	0
34986 8A8E                      E000            .word	$E000
34987                                           ! 6648                               0,
34988 8A90                      0000            .word	0
34989 8A92                      0000            .word	0
34990                                           ! 6649                             0,
34991 8A94                      0000            .word	0
34992                                           ! 6650                                2800,
34993 8A96                      0AF0            .word	$AF0
34994                                           ! 6651                             0,
34995 8A98                        00            .byte	0
34996                                           ! 6652                             0,
34997 8A99                        00            .byte	0
34998                                           ! 6653                           5,
34999 8A9A                        05            .byte	5
35000                                           ! 6654                                11,
35001 8A9B                        0B            .byte	$B
35002                                           ! 6655                             6,
35003 8A9C                        06            .byte	6
35004                                           ! 6656                                  5,
35005 8A9D                        05            .byte	5
35006                                           ! 6657                            5,
35007 8A9E                        05            .byte	5
35008                                           ! 6658                                 0,
35009 8A9F                        00            .byte	0
35010                                           ! 6659                            0,
35011 8AA0                        00            .byte	0
35012                                           ! 6660                                 0,
35013 8AA1                        00            .byte	0
35014                                           ! 6661                          0,
35015 8AA2                      0000            .word	0
35016 8AA4                      0000            .word	0
35017                                           ! 6662 } },
35018                                           ! 6663 { 0x0182,
35019 8AA6                      0182            .word	$182
35020                                           ! 6664 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35021 8AA8                      009B            .word	$9B
35022                                           ! 6665                           0x01 | 0x02 | 0x04,
35023 8AAA                        07            .byte	7
35024                                           ! 6666                           0,
35025 8AAB                        00            .byte	0
35026                                           ! 6667                           64,
35027 8AAC                      0040            .word	$40
35028                                           ! 6668                    64,
35029 8AAE                      0040            .word	$40
35030                                           ! 6669                        0xA000,
35031 8AB0                      A000            .word	$A000
35032                                           ! 6670                        0x0000,
35033 8AB2                      0000            .word	0
35034                                           ! 6671                       0,
35035 8AB4                      0000            .word	0
35036 8AB6                      0000            .word	0
35037                                           ! 6672                             4200,
35038 8AB8                      1068            .word	$1068
35039                                           ! 6673                        1400,
35040 8ABA                      0578            .word	$578
35041                                           ! 6674                        1050,
35042 8ABC                      041A            .word	$41A
35043                                           ! 6675                      8,
35044 8ABE                        08            .byte	8
35045                                           ! 6676                      16,
35046 8ABF                        10            .byte	$10
35047                                           ! 6677                           1,
35048 8AC0                        01            .byte	1
35049                                           ! 6678                         24,
35050 8AC1                        18            .byte	$18
35051                                           ! 6679                          68,
35052 8AC2                        44            .byte	$44
35053                                           ! 6680                        0x06,
35054 8AC3                        06            .byte	6
35055                                           ! 6681                     0,
35056 8AC4                        00            .byte	0
35057                                           ! 6682                               2,
35058 8AC5                        02            .byte	2
35059                                           ! 6683                          0,
35060 8AC6                        00            .byte	0
35061                                           ! 6684                        8,
35062 8AC7                        08            .byte	8
35063                                           ! 6685                             16,
35064 8AC8                        10            .byte	$10
35065                                           ! 6686                          8,
35066 8AC9                        08            .byte	8
35067                                           ! 6687                               8,
35068 8ACA                        08            .byte	8
35069                                           ! 6688                         8,
35070 8ACB                        08            .byte	8
35071                                           ! 6689                              0,
35072 8ACC                        00            .byte	0
35073                                           ! 6690                         0,
35074 8ACD                        00            .byte	0
35075                                           ! 6691                              0,
35076 8ACE                        00            .byte	0
35077                                           ! 6692                                0,
35078 8ACF                        00            .byte	0
35079                                           ! 6693                        0xE0000000,
35080 8AD0                      0000            .word	0
35081 8AD2                      E000            .word	$E000
35082                                           ! 6694                               0,
35083 8AD4                      0000            .word	0
35084 8AD6                      0000            .word	0
35085                                           ! 6695                             0,
35086 8AD8                      0000            .word	0
35087                                           ! 6696                                4200,
35088 8ADA                      1068            .word	$1068
35089                                           ! 6697                             0,
35090 8ADC                        00            .byte	0
35091                                           ! 6698                             0,
35092 8ADD                        00            .byte	0
35093                                           ! 6699                           8
35094                                           ! 6699 ,
35095 8ADE                        08            .byte	8
35096                                           ! 6700                                16,
35097 8ADF                        10            .byte	$10
35098                                           ! 6701                             8,
35099 8AE0                        08            .byte	8
35100                                           ! 6702                                  8,
35101 8AE1                        08            .byte	8
35102                                           ! 6703                            8,
35103 8AE2                        08            .byte	8
35104                                           ! 6704                                 0,
35105 8AE3                        00            .byte	0
35106                                           ! 6705                            0,
35107 8AE4                        00            .byte	0
35108                                           ! 6706                                 0,
35109 8AE5                        00            .byte	0
35110                                           ! 6707                          0,
35111 8AE6                      0000            .word	0
35112 8AE8                      0000            .word	0
35113                                           ! 6708 } },
35114                                           ! 6709 { 0x0183,
35115 8AEA                      0183            .word	$183
35116                                           ! 6710 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35117 8AEC                      009B            .word	$9B
35118                                           ! 6711                           0x01 | 0x02 | 0x04,
35119 8AEE                        07            .byte	7
35120                                           ! 6712                           0,
35121 8AEF                        00            .byte	0
35122                                           ! 6713                           64,
35123 8AF0                      0040            .word	$40
35124                                           ! 6714                    64,
35125 8AF2                      0040            .word	$40
35126                                           ! 6715                        0xA000,
35127 8AF4                      A000            .word	$A000
35128                                           ! 6716                        0x0000,
35129 8AF6                      0000            .word	0
35130                                           ! 6717                       0,
35131 8AF8                      0000            .word	0
35132 8AFA                      0000            .word	0
35133                                           ! 6718                             5600,
35134 8AFC                      15E0            .word	$15E0
35135                                           ! 6719                        1400,
35136 8AFE                      0578            .word	$578
35137                                           ! 6720                        1050,
35138 8B00                      041A            .word	$41A
35139                                           ! 6721                      8,
35140 8B02                        08            .byte	8
35141                                           ! 6722                      16,
35142 8B03                        10            .byte	$10
35143                                           ! 6723                           1,
35144 8B04                        01            .byte	1
35145                                           ! 6724                         32,
35146 8B05                        20            .byte	$20
35147                                           ! 6725                          90,
35148 8B06                        5A            .byte	$5A
35149                                           ! 6726                        0x06,
35150 8B07                        06            .byte	6
35151                                           ! 6727                     0,
35152 8B08                        00            .byte	0
35153                                           ! 6728                               1,
35154 8B09                        01            .byte	1
35155                                           ! 6729                          0,
35156 8B0A                        00            .byte	0
35157                                           ! 6730                        8,
35158 8B0B                        08            .byte	8
35159                                           ! 6731                             16,
35160 8B0C                        10            .byte	$10
35161                                           ! 6732                          8,
35162 8B0D                        08            .byte	8
35163                                           ! 6733                               8,
35164 8B0E                        08            .byte	8
35165                                           ! 6734                         8,
35166 8B0F                        08            .byte	8
35167                                           ! 6735                              0,
35168 8B10                        00            .byte	0
35169                                           ! 6736                         8,
35170 8B11                        08            .byte	8
35171                                           ! 6737                              24,
35172 8B12                        18            .byte	$18
35173                                           ! 6738                                0x02,
35174 8B13                        02            .byte	2
35175                                           ! 6739                        0xE0000000,
35176 8B14                      0000            .word	0
35177 8B16                      E000            .word	$E000
35178                                           ! 6740                               0,
35179 8B18                      0000            .word	0
35180 8B1A                      0000            .word	0
35181                                           ! 6741                             0,
35182 8B1C                      0000            .word	0
35183                                           ! 6742                                5600,
35184 8B1E                      15E0            .word	$15E0
35185                                           ! 6743                             0,
35186 8B20                        00            .byte	0
35187                                           ! 6744                             0,
35188 8B21                        00            .byte	0
35189                                           ! 6745                           8,
35190 8B22                        08            .byte	8
35191                                           ! 6746                                16,
35192 8B23                        10            .byte	$10
35193                                           ! 6747                             8,
35194 8B24                        08            .byte	8
35195                                           ! 6748                                  8,
35196 8B25                        08            .byte	8
35197                                           ! 6749                            8,
35198 8B26                        08            .byte	8
35199                                           ! 6750                                 0,
35200 8B27                        00            .byte	0
35201                                           ! 6751                            8,
35202 8B28                        08            .byte	8
35203                                           ! 6752                                 24,
35204 8B29                        18            .byte	$18
35205                                           ! 6753                          0,
35206 8B2A                      0000            .word	0
35207 8B2C                      0000            .word	0
35208                                           ! 6754 } },
35209                                           ! 6755 { 0x0184,
35210 8B2E                      0184            .word	$184
35211                                           ! 6756 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35212 8B30                      009B            .word	$9B
35213                                           ! 6757                           0x01 | 0x02 | 0x04,
35214 8B32                        07            .byte	7
35215                                           ! 6758                           0,
35216 8B33                        00            .byte	0
35217                                           ! 6759                           64,
35218 8B34                      0040            .word	$40
35219                                           ! 6760                    64,
35220 8B36                      0040            .word	$40
35221                                           ! 6761                        0xA000,
35222 8B38                      A000            .word	$A000
35223                                           ! 6762                        0x0000,
35224 8B3A                      0000            .word	0
35225                                           ! 6763                       0,
35226 8B3C                      0000            .word	0
35227 8B3E                      0000            .word	0
35228                                           ! 6764                             3360,
35229 8B40                      0D20            .word	$D20
35230                                           ! 6765                        1680,
35231 8B42                      0690            .word	$690
35232                                           ! 6766                        1050,
35233 8B44                      041A            .word	$41A
35234                                           ! 6767                      8,
35235 8B46                        08            .byte	8
35236                                           ! 6768                
35237                                           ! 6768       16,
35238 8B47                        10            .byte	$10
35239                                           ! 6769                           1,
35240 8B48                        01            .byte	1
35241                                           ! 6770                         16,
35242 8B49                        10            .byte	$10
35243                                           ! 6771                          54,
35244 8B4A                        36            .byte	$36
35245                                           ! 6772                        0x06,
35246 8B4B                        06            .byte	6
35247                                           ! 6773                     0,
35248 8B4C                        00            .byte	0
35249                                           ! 6774                               3,
35250 8B4D                        03            .byte	3
35251                                           ! 6775                          0,
35252 8B4E                        00            .byte	0
35253                                           ! 6776                        5,
35254 8B4F                        05            .byte	5
35255                                           ! 6777                             11,
35256 8B50                        0B            .byte	$B
35257                                           ! 6778                          6,
35258 8B51                        06            .byte	6
35259                                           ! 6779                               5,
35260 8B52                        05            .byte	5
35261                                           ! 6780                         5,
35262 8B53                        05            .byte	5
35263                                           ! 6781                              0,
35264 8B54                        00            .byte	0
35265                                           ! 6782                         0,
35266 8B55                        00            .byte	0
35267                                           ! 6783                              0,
35268 8B56                        00            .byte	0
35269                                           ! 6784                                0,
35270 8B57                        00            .byte	0
35271                                           ! 6785                        0xE0000000,
35272 8B58                      0000            .word	0
35273 8B5A                      E000            .word	$E000
35274                                           ! 6786                               0,
35275 8B5C                      0000            .word	0
35276 8B5E                      0000            .word	0
35277                                           ! 6787                             0,
35278 8B60                      0000            .word	0
35279                                           ! 6788                                3360,
35280 8B62                      0D20            .word	$D20
35281                                           ! 6789                             0,
35282 8B64                        00            .byte	0
35283                                           ! 6790                             0,
35284 8B65                        00            .byte	0
35285                                           ! 6791                           5,
35286 8B66                        05            .byte	5
35287                                           ! 6792                                11,
35288 8B67                        0B            .byte	$B
35289                                           ! 6793                             6,
35290 8B68                        06            .byte	6
35291                                           ! 6794                                  5,
35292 8B69                        05            .byte	5
35293                                           ! 6795                            5,
35294 8B6A                        05            .byte	5
35295                                           ! 6796                                 0,
35296 8B6B                        00            .byte	0
35297                                           ! 6797                            0,
35298 8B6C                        00            .byte	0
35299                                           ! 6798                                 0,
35300 8B6D                        00            .byte	0
35301                                           ! 6799                          0,
35302 8B6E                      0000            .word	0
35303 8B70                      0000            .word	0
35304                                           ! 6800 } },
35305                                           ! 6801 { 0x0185,
35306 8B72                      0185            .word	$185
35307                                           ! 6802 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35308 8B74                      009B            .word	$9B
35309                                           ! 6803                           0x01 | 0x02 | 0x04,
35310 8B76                        07            .byte	7
35311                                           ! 6804                           0,
35312 8B77                        00            .byte	0
35313                                           ! 6805                           64,
35314 8B78                      0040            .word	$40
35315                                           ! 6806                    64,
35316 8B7A                      0040            .word	$40
35317                                           ! 6807                        0xA000,
35318 8B7C                      A000            .word	$A000
35319                                           ! 6808                        0x0000,
35320 8B7E                      0000            .word	0
35321                                           ! 6809                       0,
35322 8B80                      0000            .word	0
35323 8B82                      0000            .word	0
35324                                           ! 6810                             5040,
35325 8B84                      13B0            .word	$13B0
35326                                           ! 6811                        1680,
35327 8B86                      0690            .word	$690
35328                                           ! 6812                        1050,
35329 8B88                      041A            .word	$41A
35330                                           ! 6813                      8,
35331 8B8A                        08            .byte	8
35332                                           ! 6814                      16,
35333 8B8B                        10            .byte	$10
35334                                           ! 6815                           1,
35335 8B8C                        01            .byte	1
35336                                           ! 6816                         24,
35337 8B8D                        18            .byte	$18
35338                                           ! 6817                          81,
35339 8B8E                        51            .byte	$51
35340                                           ! 6818                        0x06,
35341 8B8F                        06            .byte	6
35342                                           ! 6819                     0,
35343 8B90                        00            .byte	0
35344                                           ! 6820                               2,
35345 8B91                        02            .byte	2
35346                                           ! 6821                          0,
35347 8B92                        00            .byte	0
35348                                           ! 6822                        8,
35349 8B93                        08            .byte	8
35350                                           ! 6823                             16,
35351 8B94                        10            .byte	$10
35352                                           ! 6824                          8,
35353 8B95                        08            .byte	8
35354                                           ! 6825                               8,
35355 8B96                        08            .byte	8
35356                                           ! 6826                         8,
35357 8B97                        08            .byte	8
35358                                           ! 6827                              0,
35359 8B98                        00            .byte	0
35360                                           ! 6828                         0,
35361 8B99                        00            .byte	0
35362                                           ! 6829                              0,
35363 8B9A                        00            .byte	0
35364                                           ! 6830                                0,
35365 8B9B                        00            .byte	0
35366                                           ! 6831                        0xE0000000,
35367 8B9C                      0000            .word	0
35368 8B9E                      E000            .word	$E000
35369                                           ! 6832                               0,
35370 8BA0                      0000            .word	0
35371 8BA2                      0000            .word	0
35372                                           ! 6833                             0,
35373 8BA4                      0000            .word	0
35374                                           ! 6834                                5040,
35375 8BA6                      13B0            .word	$13B0
35376                                           ! 6835                             0,
35377 8BA8                        00            .byte	0
35378                                           ! 6836                            
35379                                           ! 6836  0,
35380 8BA9                        00            .byte	0
35381                                           ! 6837                           8,
35382 8BAA                        08            .byte	8
35383                                           ! 6838                                16,
35384 8BAB                        10            .byte	$10
35385                                           ! 6839                             8,
35386 8BAC                        08            .byte	8
35387                                           ! 6840                                  8,
35388 8BAD                        08            .byte	8
35389                                           ! 6841                            8,
35390 8BAE                        08            .byte	8
35391                                           ! 6842                                 0,
35392 8BAF                        00            .byte	0
35393                                           ! 6843                            0,
35394 8BB0                        00            .byte	0
35395                                           ! 6844                                 0,
35396 8BB1                        00            .byte	0
35397                                           ! 6845                          0,
35398 8BB2                      0000            .word	0
35399 8BB4                      0000            .word	0
35400                                           ! 6846 } },
35401                                           ! 6847 { 0x0186,
35402 8BB6                      0186            .word	$186
35403                                           ! 6848 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35404 8BB8                      009B            .word	$9B
35405                                           ! 6849                           0x01 | 0x02 | 0x04,
35406 8BBA                        07            .byte	7
35407                                           ! 6850                           0,
35408 8BBB                        00            .byte	0
35409                                           ! 6851                           64,
35410 8BBC                      0040            .word	$40
35411                                           ! 6852                    64,
35412 8BBE                      0040            .word	$40
35413                                           ! 6853                        0xA000,
35414 8BC0                      A000            .word	$A000
35415                                           ! 6854                        0x0000,
35416 8BC2                      0000            .word	0
35417                                           ! 6855                       0,
35418 8BC4                      0000            .word	0
35419 8BC6                      0000            .word	0
35420                                           ! 6856                             6720,
35421 8BC8                      1A40            .word	$1A40
35422                                           ! 6857                        1680,
35423 8BCA                      0690            .word	$690
35424                                           ! 6858                        1050,
35425 8BCC                      041A            .word	$41A
35426                                           ! 6859                      8,
35427 8BCE                        08            .byte	8
35428                                           ! 6860                      16,
35429 8BCF                        10            .byte	$10
35430                                           ! 6861                           1,
35431 8BD0                        01            .byte	1
35432                                           ! 6862                         32,
35433 8BD1                        20            .byte	$20
35434                                           ! 6863                          108,
35435 8BD2                        6C            .byte	$6C
35436                                           ! 6864                        0x06,
35437 8BD3                        06            .byte	6
35438                                           ! 6865                     0,
35439 8BD4                        00            .byte	0
35440                                           ! 6866                               1,
35441 8BD5                        01            .byte	1
35442                                           ! 6867                          0,
35443 8BD6                        00            .byte	0
35444                                           ! 6868                        8,
35445 8BD7                        08            .byte	8
35446                                           ! 6869                             16,
35447 8BD8                        10            .byte	$10
35448                                           ! 6870                          8,
35449 8BD9                        08            .byte	8
35450                                           ! 6871                               8,
35451 8BDA                        08            .byte	8
35452                                           ! 6872                         8,
35453 8BDB                        08            .byte	8
35454                                           ! 6873                              0,
35455 8BDC                        00            .byte	0
35456                                           ! 6874                         8,
35457 8BDD                        08            .byte	8
35458                                           ! 6875                              24,
35459 8BDE                        18            .byte	$18
35460                                           ! 6876                                0x02,
35461 8BDF                        02            .byte	2
35462                                           ! 6877                        0xE0000000,
35463 8BE0                      0000            .word	0
35464 8BE2                      E000            .word	$E000
35465                                           ! 6878                               0,
35466 8BE4                      0000            .word	0
35467 8BE6                      0000            .word	0
35468                                           ! 6879                             0,
35469 8BE8                      0000            .word	0
35470                                           ! 6880                                6720,
35471 8BEA                      1A40            .word	$1A40
35472                                           ! 6881                             0,
35473 8BEC                        00            .byte	0
35474                                           ! 6882                             0,
35475 8BED                        00            .byte	0
35476                                           ! 6883                           8,
35477 8BEE                        08            .byte	8
35478                                           ! 6884                                16,
35479 8BEF                        10            .byte	$10
35480                                           ! 6885                             8,
35481 8BF0                        08            .byte	8
35482                                           ! 6886                                  8,
35483 8BF1                        08            .byte	8
35484                                           ! 6887                            8,
35485 8BF2                        08            .byte	8
35486                                           ! 6888                                 0,
35487 8BF3                        00            .byte	0
35488                                           ! 6889                            8,
35489 8BF4                        08            .byte	8
35490                                           ! 6890                                 24,
35491 8BF5                        18            .byte	$18
35492                                           ! 6891                          0,
35493 8BF6                      0000            .word	0
35494 8BF8                      0000            .word	0
35495                                           ! 6892 } },
35496                                           ! 6893 { 0x0187,
35497 8BFA                      0187            .word	$187
35498                                           ! 6894 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35499 8BFC                      009B            .word	$9B
35500                                           ! 6895                           0x01 | 0x02 | 0x04,
35501 8BFE                        07            .byte	7
35502                                           ! 6896                           0,
35503 8BFF                        00            .byte	0
35504                                           ! 6897                           64,
35505 8C00                      0040            .word	$40
35506                                           ! 6898                    64,
35507 8C02                      0040            .word	$40
35508                                           ! 6899                        0xA000,
35509 8C04                      A000            .word	$A000
35510                                           ! 6900                        0x0000,
35511 8C06                      0000            .word	0
35512                                           ! 6901                       0,
35513 8C08                      0000            .word	0
35514 8C0A                      0000            .word	0
35515                                           ! 6902                             3840,
35516 8C0C                      0F00            .word	$F00
35517                                           ! 6903                        1920,
35518 8C0E                      0780            .word	$780
35519                                           ! 6904                        1200,
35520 8C10                      04B0            .word	$4B0
35521                                           ! 6905        
35522                                           ! 6905               8,
35523 8C12                        08            .byte	8
35524                                           ! 6906                      16,
35525 8C13                        10            .byte	$10
35526                                           ! 6907                           1,
35527 8C14                        01            .byte	1
35528                                           ! 6908                         16,
35529 8C15                        10            .byte	$10
35530                                           ! 6909                          71,
35531 8C16                        47            .byte	$47
35532                                           ! 6910                        0x06,
35533 8C17                        06            .byte	6
35534                                           ! 6911                     0,
35535 8C18                        00            .byte	0
35536                                           ! 6912                               2,
35537 8C19                        02            .byte	2
35538                                           ! 6913                          0,
35539 8C1A                        00            .byte	0
35540                                           ! 6914                        5,
35541 8C1B                        05            .byte	5
35542                                           ! 6915                             11,
35543 8C1C                        0B            .byte	$B
35544                                           ! 6916                          6,
35545 8C1D                        06            .byte	6
35546                                           ! 6917                               5,
35547 8C1E                        05            .byte	5
35548                                           ! 6918                         5,
35549 8C1F                        05            .byte	5
35550                                           ! 6919                              0,
35551 8C20                        00            .byte	0
35552                                           ! 6920                         0,
35553 8C21                        00            .byte	0
35554                                           ! 6921                              0,
35555 8C22                        00            .byte	0
35556                                           ! 6922                                0,
35557 8C23                        00            .byte	0
35558                                           ! 6923                        0xE0000000,
35559 8C24                      0000            .word	0
35560 8C26                      E000            .word	$E000
35561                                           ! 6924                               0,
35562 8C28                      0000            .word	0
35563 8C2A                      0000            .word	0
35564                                           ! 6925                             0,
35565 8C2C                      0000            .word	0
35566                                           ! 6926                                3840,
35567 8C2E                      0F00            .word	$F00
35568                                           ! 6927                             0,
35569 8C30                        00            .byte	0
35570                                           ! 6928                             0,
35571 8C31                        00            .byte	0
35572                                           ! 6929                           5,
35573 8C32                        05            .byte	5
35574                                           ! 6930                                11,
35575 8C33                        0B            .byte	$B
35576                                           ! 6931                             6,
35577 8C34                        06            .byte	6
35578                                           ! 6932                                  5,
35579 8C35                        05            .byte	5
35580                                           ! 6933                            5,
35581 8C36                        05            .byte	5
35582                                           ! 6934                                 0,
35583 8C37                        00            .byte	0
35584                                           ! 6935                            0,
35585 8C38                        00            .byte	0
35586                                           ! 6936                                 0,
35587 8C39                        00            .byte	0
35588                                           ! 6937                          0,
35589 8C3A                      0000            .word	0
35590 8C3C                      0000            .word	0
35591                                           ! 6938 } },
35592                                           ! 6939 { 0x0188,
35593 8C3E                      0188            .word	$188
35594                                           ! 6940 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35595 8C40                      009B            .word	$9B
35596                                           ! 6941                           0x01 | 0x02 | 0x04,
35597 8C42                        07            .byte	7
35598                                           ! 6942                           0,
35599 8C43                        00            .byte	0
35600                                           ! 6943                           64,
35601 8C44                      0040            .word	$40
35602                                           ! 6944                    64,
35603 8C46                      0040            .word	$40
35604                                           ! 6945                        0xA000,
35605 8C48                      A000            .word	$A000
35606                                           ! 6946                        0x0000,
35607 8C4A                      0000            .word	0
35608                                           ! 6947                       0,
35609 8C4C                      0000            .word	0
35610 8C4E                      0000            .word	0
35611                                           ! 6948                             5760,
35612 8C50                      1680            .word	$1680
35613                                           ! 6949                        1920,
35614 8C52                      0780            .word	$780
35615                                           ! 6950                        1200,
35616 8C54                      04B0            .word	$4B0
35617                                           ! 6951                      8,
35618 8C56                        08            .byte	8
35619                                           ! 6952                      16,
35620 8C57                        10            .byte	$10
35621                                           ! 6953                           1,
35622 8C58                        01            .byte	1
35623                                           ! 6954                         24,
35624 8C59                        18            .byte	$18
35625                                           ! 6955                          106,
35626 8C5A                        6A            .byte	$6A
35627                                           ! 6956                        0x06,
35628 8C5B                        06            .byte	6
35629                                           ! 6957                     0,
35630 8C5C                        00            .byte	0
35631                                           ! 6958                               1,
35632 8C5D                        01            .byte	1
35633                                           ! 6959                          0,
35634 8C5E                        00            .byte	0
35635                                           ! 6960                        8,
35636 8C5F                        08            .byte	8
35637                                           ! 6961                             16,
35638 8C60                        10            .byte	$10
35639                                           ! 6962                          8,
35640 8C61                        08            .byte	8
35641                                           ! 6963                               8,
35642 8C62                        08            .byte	8
35643                                           ! 6964                         8,
35644 8C63                        08            .byte	8
35645                                           ! 6965                              0,
35646 8C64                        00            .byte	0
35647                                           ! 6966                         0,
35648 8C65                        00            .byte	0
35649                                           ! 6967                              0,
35650 8C66                        00            .byte	0
35651                                           ! 6968                                0,
35652 8C67                        00            .byte	0
35653                                           ! 6969                        0xE0000000,
35654 8C68                      0000            .word	0
35655 8C6A                      E000            .word	$E000
35656                                           ! 6970                               0,
35657 8C6C                      0000            .word	0
35658 8C6E                      0000            .word	0
35659                                           ! 6971                             0,
35660 8C70                      0000            .word	0
35661                                           ! 6972                                5760,
35662 8C72                      1680            .word	$1680
35663                                           ! 6973                          
35664                                           ! 6973    0,
35665 8C74                        00            .byte	0
35666                                           ! 6974                             0,
35667 8C75                        00            .byte	0
35668                                           ! 6975                           8,
35669 8C76                        08            .byte	8
35670                                           ! 6976                                16,
35671 8C77                        10            .byte	$10
35672                                           ! 6977                             8,
35673 8C78                        08            .byte	8
35674                                           ! 6978                                  8,
35675 8C79                        08            .byte	8
35676                                           ! 6979                            8,
35677 8C7A                        08            .byte	8
35678                                           ! 6980                                 0,
35679 8C7B                        00            .byte	0
35680                                           ! 6981                            0,
35681 8C7C                        00            .byte	0
35682                                           ! 6982                                 0,
35683 8C7D                        00            .byte	0
35684                                           ! 6983                          0,
35685 8C7E                      0000            .word	0
35686 8C80                      0000            .word	0
35687                                           ! 6984 } },
35688                                           ! 6985 { 0x0189,
35689 8C82                      0189            .word	$189
35690                                           ! 6986 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35691 8C84                      009B            .word	$9B
35692                                           ! 6987                           0x01 | 0x02 | 0x04,
35693 8C86                        07            .byte	7
35694                                           ! 6988                           0,
35695 8C87                        00            .byte	0
35696                                           ! 6989                           64,
35697 8C88                      0040            .word	$40
35698                                           ! 6990                    64,
35699 8C8A                      0040            .word	$40
35700                                           ! 6991                        0xA000,
35701 8C8C                      A000            .word	$A000
35702                                           ! 6992                        0x0000,
35703 8C8E                      0000            .word	0
35704                                           ! 6993                       0,
35705 8C90                      0000            .word	0
35706 8C92                      0000            .word	0
35707                                           ! 6994                             7680,
35708 8C94                      1E00            .word	$1E00
35709                                           ! 6995                        1920,
35710 8C96                      0780            .word	$780
35711                                           ! 6996                        1200,
35712 8C98                      04B0            .word	$4B0
35713                                           ! 6997                      8,
35714 8C9A                        08            .byte	8
35715                                           ! 6998                      16,
35716 8C9B                        10            .byte	$10
35717                                           ! 6999                           1,
35718 8C9C                        01            .byte	1
35719                                           ! 7000                         32,
35720 8C9D                        20            .byte	$20
35721                                           ! 7001                          141,
35722 8C9E                        8D            .byte	$8D
35723                                           ! 7002                        0x06,
35724 8C9F                        06            .byte	6
35725                                           ! 7003                     0,
35726 8CA0                        00            .byte	0
35727                                           ! 7004                               0,
35728 8CA1                        00            .byte	0
35729                                           ! 7005                          0,
35730 8CA2                        00            .byte	0
35731                                           ! 7006                        8,
35732 8CA3                        08            .byte	8
35733                                           ! 7007                             16,
35734 8CA4                        10            .byte	$10
35735                                           ! 7008                          8,
35736 8CA5                        08            .byte	8
35737                                           ! 7009                               8,
35738 8CA6                        08            .byte	8
35739                                           ! 7010                         8,
35740 8CA7                        08            .byte	8
35741                                           ! 7011                              0,
35742 8CA8                        00            .byte	0
35743                                           ! 7012                         8,
35744 8CA9                        08            .byte	8
35745                                           ! 7013                              24,
35746 8CAA                        18            .byte	$18
35747                                           ! 7014                                0x02,
35748 8CAB                        02            .byte	2
35749                                           ! 7015                        0xE0000000,
35750 8CAC                      0000            .word	0
35751 8CAE                      E000            .word	$E000
35752                                           ! 7016                               0,
35753 8CB0                      0000            .word	0
35754 8CB2                      0000            .word	0
35755                                           ! 7017                             0,
35756 8CB4                      0000            .word	0
35757                                           ! 7018                                7680,
35758 8CB6                      1E00            .word	$1E00
35759                                           ! 7019                             0,
35760 8CB8                        00            .byte	0
35761                                           ! 7020                             0,
35762 8CB9                        00            .byte	0
35763                                           ! 7021                           8,
35764 8CBA                        08            .byte	8
35765                                           ! 7022                                16,
35766 8CBB                        10            .byte	$10
35767                                           ! 7023                             8,
35768 8CBC                        08            .byte	8
35769                                           ! 7024                                  8,
35770 8CBD                        08            .byte	8
35771                                           ! 7025                            8,
35772 8CBE                        08            .byte	8
35773                                           ! 7026                                 0,
35774 8CBF                        00            .byte	0
35775                                           ! 7027                            8,
35776 8CC0                        08            .byte	8
35777                                           ! 7028                                 24,
35778 8CC1                        18            .byte	$18
35779                                           ! 7029                          0,
35780 8CC2                      0000            .word	0
35781 8CC4                      0000            .word	0
35782                                           ! 7030 } },
35783                                           ! 7031 { 0x018a,
35784 8CC6                      018A            .word	$18A
35785                                           ! 7032 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35786 8CC8                      009B            .word	$9B
35787                                           ! 7033                           0x01 | 0x02 | 0x04,
35788 8CCA                        07            .byte	7
35789                                           ! 7034                           0,
35790 8CCB                        00            .byte	0
35791                                           ! 7035                           64,
35792 8CCC                      0040            .word	$40
35793                                           ! 7036                    64,
35794 8CCE                      0040            .word	$40
35795                                           ! 7037                        0xA000,
35796 8CD0                      A000            .word	$A000
35797                                           ! 7038                        0x0000,
35798 8CD2                      0000            .word	0
35799                                           ! 7039                       0,
35800 8CD4                      0000            .word	0
35801 8CD6                      0000            .word	0
35802                                           ! 7040                             5120,
35803 8CD8                      1400            .word	$1400
35804                                           ! 7041                        2560,
35805 8CDA                      0A00            .word	$A00
35806                                           ! 7042    
35807                                           ! 7042                     1600,
35808 8CDC                      0640            .word	$640
35809                                           ! 7043                      8,
35810 8CDE                        08            .byte	8
35811                                           ! 7044                      16,
35812 8CDF                        10            .byte	$10
35813                                           ! 7045                           1,
35814 8CE0                        01            .byte	1
35815                                           ! 7046                         16,
35816 8CE1                        10            .byte	$10
35817                                           ! 7047                          125,
35818 8CE2                        7D            .byte	$7D
35819                                           ! 7048                        0x06,
35820 8CE3                        06            .byte	6
35821                                           ! 7049                     0,
35822 8CE4                        00            .byte	0
35823                                           ! 7050                               1,
35824 8CE5                        01            .byte	1
35825                                           ! 7051                          0,
35826 8CE6                        00            .byte	0
35827                                           ! 7052                        5,
35828 8CE7                        05            .byte	5
35829                                           ! 7053                             11,
35830 8CE8                        0B            .byte	$B
35831                                           ! 7054                          6,
35832 8CE9                        06            .byte	6
35833                                           ! 7055                               5,
35834 8CEA                        05            .byte	5
35835                                           ! 7056                         5,
35836 8CEB                        05            .byte	5
35837                                           ! 7057                              0,
35838 8CEC                        00            .byte	0
35839                                           ! 7058                         0,
35840 8CED                        00            .byte	0
35841                                           ! 7059                              0,
35842 8CEE                        00            .byte	0
35843                                           ! 7060                                0,
35844 8CEF                        00            .byte	0
35845                                           ! 7061                        0xE0000000,
35846 8CF0                      0000            .word	0
35847 8CF2                      E000            .word	$E000
35848                                           ! 7062                               0,
35849 8CF4                      0000            .word	0
35850 8CF6                      0000            .word	0
35851                                           ! 7063                             0,
35852 8CF8                      0000            .word	0
35853                                           ! 7064                                5120,
35854 8CFA                      1400            .word	$1400
35855                                           ! 7065                             0,
35856 8CFC                        00            .byte	0
35857                                           ! 7066                             0,
35858 8CFD                        00            .byte	0
35859                                           ! 7067                           5,
35860 8CFE                        05            .byte	5
35861                                           ! 7068                                11,
35862 8CFF                        0B            .byte	$B
35863                                           ! 7069                             6,
35864 8D00                        06            .byte	6
35865                                           ! 7070                                  5,
35866 8D01                        05            .byte	5
35867                                           ! 7071                            5,
35868 8D02                        05            .byte	5
35869                                           ! 7072                                 0,
35870 8D03                        00            .byte	0
35871                                           ! 7073                            0,
35872 8D04                        00            .byte	0
35873                                           ! 7074                                 0,
35874 8D05                        00            .byte	0
35875                                           ! 7075                          0,
35876 8D06                      0000            .word	0
35877 8D08                      0000            .word	0
35878                                           ! 7076 } },
35879                                           ! 7077 { 0x018b,
35880 8D0A                      018B            .word	$18B
35881                                           ! 7078 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35882 8D0C                      009B            .word	$9B
35883                                           ! 7079                           0x01 | 0x02 | 0x04,
35884 8D0E                        07            .byte	7
35885                                           ! 7080                           0,
35886 8D0F                        00            .byte	0
35887                                           ! 7081                           64,
35888 8D10                      0040            .word	$40
35889                                           ! 7082                    64,
35890 8D12                      0040            .word	$40
35891                                           ! 7083                        0xA000,
35892 8D14                      A000            .word	$A000
35893                                           ! 7084                        0x0000,
35894 8D16                      0000            .word	0
35895                                           ! 7085                       0,
35896 8D18                      0000            .word	0
35897 8D1A                      0000            .word	0
35898                                           ! 7086                             7680,
35899 8D1C                      1E00            .word	$1E00
35900                                           ! 7087                        2560,
35901 8D1E                      0A00            .word	$A00
35902                                           ! 7088                        1600,
35903 8D20                      0640            .word	$640
35904                                           ! 7089                      8,
35905 8D22                        08            .byte	8
35906                                           ! 7090                      16,
35907 8D23                        10            .byte	$10
35908                                           ! 7091                           1,
35909 8D24                        01            .byte	1
35910                                           ! 7092                         24,
35911 8D25                        18            .byte	$18
35912                                           ! 7093                          188,
35913 8D26                        BC            .byte	$BC
35914                                           ! 7094                        0x06,
35915 8D27                        06            .byte	6
35916                                           ! 7095                     0,
35917 8D28                        00            .byte	0
35918                                           ! 7096                               0,
35919 8D29                        00            .byte	0
35920                                           ! 7097                          0,
35921 8D2A                        00            .byte	0
35922                                           ! 7098                        8,
35923 8D2B                        08            .byte	8
35924                                           ! 7099                             16,
35925 8D2C                        10            .byte	$10
35926                                           ! 7100                          8,
35927 8D2D                        08            .byte	8
35928                                           ! 7101                               8,
35929 8D2E                        08            .byte	8
35930                                           ! 7102                         8,
35931 8D2F                        08            .byte	8
35932                                           ! 7103                              0,
35933 8D30                        00            .byte	0
35934                                           ! 7104                         0,
35935 8D31                        00            .byte	0
35936                                           ! 7105                              0,
35937 8D32                        00            .byte	0
35938                                           ! 7106                                0,
35939 8D33                        00            .byte	0
35940                                           ! 7107                        0xE0000000,
35941 8D34                      0000            .word	0
35942 8D36                      E000            .word	$E000
35943                                           ! 7108                               0,
35944 8D38                      0000            .word	0
35945 8D3A                      0000            .word	0
35946                                           ! 7109                             0,
35947 8D3C                      0000            .word	0
35948                                           ! 7110                             
35949                                           ! 7110    7680,
35950 8D3E                      1E00            .word	$1E00
35951                                           ! 7111                             0,
35952 8D40                        00            .byte	0
35953                                           ! 7112                             0,
35954 8D41                        00            .byte	0
35955                                           ! 7113                           8,
35956 8D42                        08            .byte	8
35957                                           ! 7114                                16,
35958 8D43                        10            .byte	$10
35959                                           ! 7115                             8,
35960 8D44                        08            .byte	8
35961                                           ! 7116                                  8,
35962 8D45                        08            .byte	8
35963                                           ! 7117                            8,
35964 8D46                        08            .byte	8
35965                                           ! 7118                                 0,
35966 8D47                        00            .byte	0
35967                                           ! 7119                            0,
35968 8D48                        00            .byte	0
35969                                           ! 7120                                 0,
35970 8D49                        00            .byte	0
35971                                           ! 7121                          0,
35972 8D4A                      0000            .word	0
35973 8D4C                      0000            .word	0
35974                                           ! 7122 } },
35975                                           ! 7123 { 0x018c,
35976 8D4E                      018C            .word	$18C
35977                                           ! 7124 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35978 8D50                      009B            .word	$9B
35979                                           ! 7125                           0x01 | 0x02 | 0x04,
35980 8D52                        07            .byte	7
35981                                           ! 7126                           0,
35982 8D53                        00            .byte	0
35983                                           ! 7127                           64,
35984 8D54                      0040            .word	$40
35985                                           ! 7128                    64,
35986 8D56                      0040            .word	$40
35987                                           ! 7129                        0xA000,
35988 8D58                      A000            .word	$A000
35989                                           ! 7130                        0x0000,
35990 8D5A                      0000            .word	0
35991                                           ! 7131                       0,
35992 8D5C                      0000            .word	0
35993 8D5E                      0000            .word	0
35994                                           ! 7132                             10240,
35995 8D60                      2800            .word	$2800
35996                                           ! 7133                        2560,
35997 8D62                      0A00            .word	$A00
35998                                           ! 7134                        1600,
35999 8D64                      0640            .word	$640
36000                                           ! 7135                      8,
36001 8D66                        08            .byte	8
36002                                           ! 7136                      16,
36003 8D67                        10            .byte	$10
36004                                           ! 7137                           1,
36005 8D68                        01            .byte	1
36006                                           ! 7138                         32,
36007 8D69                        20            .byte	$20
36008                                           ! 7139                          250,
36009 8D6A                        FA            .byte	$FA
36010                                           ! 7140                        0x06,
36011 8D6B                        06            .byte	6
36012                                           ! 7141                     0,
36013 8D6C                        00            .byte	0
36014                                           ! 7142                               0,
36015 8D6D                        00            .byte	0
36016                                           ! 7143                          0,
36017 8D6E                        00            .byte	0
36018                                           ! 7144                        8,
36019 8D6F                        08            .byte	8
36020                                           ! 7145                             16,
36021 8D70                        10            .byte	$10
36022                                           ! 7146                          8,
36023 8D71                        08            .byte	8
36024                                           ! 7147                               8,
36025 8D72                        08            .byte	8
36026                                           ! 7148                         8,
36027 8D73                        08            .byte	8
36028                                           ! 7149                              0,
36029 8D74                        00            .byte	0
36030                                           ! 7150                         8,
36031 8D75                        08            .byte	8
36032                                           ! 7151                              24,
36033 8D76                        18            .byte	$18
36034                                           ! 7152                                0x02,
36035 8D77                        02            .byte	2
36036                                           ! 7153                        0xE0000000,
36037 8D78                      0000            .word	0
36038 8D7A                      E000            .word	$E000
36039                                           ! 7154                               0,
36040 8D7C                      0000            .word	0
36041 8D7E                      0000            .word	0
36042                                           ! 7155                             0,
36043 8D80                      0000            .word	0
36044                                           ! 7156                                10240,
36045 8D82                      2800            .word	$2800
36046                                           ! 7157                             0,
36047 8D84                        00            .byte	0
36048                                           ! 7158                             0,
36049 8D85                        00            .byte	0
36050                                           ! 7159                           8,
36051 8D86                        08            .byte	8
36052                                           ! 7160                                16,
36053 8D87                        10            .byte	$10
36054                                           ! 7161                             8,
36055 8D88                        08            .byte	8
36056                                           ! 7162                                  8,
36057 8D89                        08            .byte	8
36058                                           ! 7163                            8,
36059 8D8A                        08            .byte	8
36060                                           ! 7164                                 0,
36061 8D8B                        00            .byte	0
36062                                           ! 7165                            8,
36063 8D8C                        08            .byte	8
36064                                           ! 7166                                 24,
36065 8D8D                        18            .byte	$18
36066                                           ! 7167                          0,
36067 8D8E                      0000            .word	0
36068 8D90                      0000            .word	0
36069                                           ! 7168 } },
36070                                           ! 7169 { 0xFFFF,
36071 8D92                      FFFF            .word	$FFFF
36072                                           ! 7170 { 0,
36073 8D94                      0000            .word	0
36074                                           ! 7171 } },
36075 8D96                  00000040            .blkb	$40
36076                                           ! 7172 };
36077                                           !BCC_EOS
36078                                           ! 7173 extern char vbebios_copyright;
36079                                           !BCC_EOS
36080                                           ! 7174 extern char vbebios_vendor_name;
36081                                           !BCC_EOS
36082                                           ! 7175 extern char vbebios_product_name;
36083                                           !BCC_EOS
36084                                           ! 7176 extern char vbebios_product_revision;
36085                                           !BCC_EOS
36086                                           ! 7177 #asm
36087                                           !BCC_ASM
36088                       00008DD6            _vbebios_copyright:
36089 8DD6                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
36090 8E1B                        00            .byte 0x00
36091                       00008E1C            _vbebios_vendor_name:
36092 8E1C                        42            .ascii "Bochs/Plex86 Developers"
36093 8E33                        00            .byte 0x00
36094                       00008E34            _vbebios_product_name:
36095 8E34                        42            .ascii "Bochs/Plex86 VBE Adapter"
36096 8E4C                        00            .byte 0x00
36097                       00008E4D            _vbebios_product_revision:
36098 8E4D                        24            .ascii "$Id: vbe.c,v 1.60 2008/03/02 07:47:21 vruppert Exp $"
36099 8E81                        00            .byte 0x00
36100                       00008E82            _vbebios_info_string:
36101 8E82                        42            .ascii "Bochs VBE Display Adapter enabled"
36102 8EA3                        0A            .byte 0x0a,0x0d
36103 8EA5                        0A            .byte 0x0a,0x0d
36104 8EA7                        00            .byte 0x00
36105                       00008EA8            _no_vbebios_info_string:
36106 8EA8                        4E            .ascii "NO Bochs VBE Support available!"
36107 8EC7                        0A            .byte 0x0a,0x0d
36108 8EC9                        0A            .byte 0x0a,0x0d
36109 8ECB                        00            .byte 0x00
36110                       00008ECC            msg_vbe_init:
36111 8ECC                        56            .ascii "VBE Bios $Id: vbe.c,v 1.60 2008/03/02 07:47:21 vruppert Exp $"
36112 8F09                        0A            .byte 0x0a,0x0d, 0x00
36113 8F0C                  00000002              .align 2
36114                       00008F0C            vesa_pm_start:
36115 8F0C                      0014              dw vesa_pm_set_window - vesa_pm_start
36116 8F0E                      004B              dw vesa_pm_set_display_start - vesa_pm_start
36117 8F10                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
36118 8F12                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
36119                       00008F14            vesa_pm_io_ports_table:
36120 8F14                      01CE              dw 0x01CE
36121 8F16                      01CF              dw 0x01CE + 1
36122 8F18                      01CF              dw 0x01CF
36123 8F1A                      01D0              dw 0x01CF + 1
36124 8F1C                      FFFF              dw 0xffff
36125 8F1E                      FFFF              dw 0xffff
36126                                             USE32
36127                       00008F20            vesa_pm_set_window:
36128 8F20     66    83FB                   00    cmp bx, #0x00
36129 8F24           74           05              je vesa_pm_set_display_window1
36130 8F26     66    B8                   0100    mov ax, #0x0100
36131 8F2A           C3                           ret
36132                       00008F2B            vesa_pm_set_display_window1:
36133 8F2B     66    89D0                         mov ax, dx
36134 8F2E     66    52                           push dx
36135 8F30     66    50                           push ax
36136 8F32     66    BA                   01CE    mov dx, # 0x01CE
36137 8F36     66    B8                   0005    mov ax, # 0x5
36138 8F3A     66    EF                           out dx, ax
36139 8F3C     66    58                           pop ax
36140 8F3E     66    BA                   01CF    mov dx, # 0x01CF
36141 8F42     66    EF                           out dx, ax
36142 8F44     66    ED                           in ax, dx
36143 8F46     66    5A                           pop dx
36144 8F48     66    39C2                         cmp dx, ax
36145 8F4B           75           05              jne illegal_window
36146 8F4D     66    B8                   004F    mov ax, #0x004f
36147 8F51           C3                           ret
36148                       00008F52            illegal_window:
36149 8F52     66    B8                   014F    mov ax, #0x014f
36150 8F56           C3                           ret
36151                       00008F57            vesa_pm_set_display_start:
36152 8F57           80FB                   80    cmp bl, #0x80
36153 8F5A           74           0A              je vesa_pm_set_display_start1
36154 8F5C           80FB                   00    cmp bl, #0x00
36155 8F5F           74           05              je vesa_pm_set_display_start1
36156 8F61     66    B8                   0100    mov ax, #0x0100
36157 8F65           C3                           ret
36158                       00008F66            vesa_pm_set_display_start1:
36159                                           ; convert offset to (X, Y) coordinate
36160                                           ; (would be simpler to change Bochs 1 API...)
36161 8F66           50                           push eax
36162 8F67           51                           push ecx
36163 8F68           52                           push edx
36164 8F69           56                           push esi
36165 8F6A           57                           push edi
36166 8F6B           C1E2                   10    shl edx, #16
36167 8F6E           81E1             0000FFFF    and ecx, #0xffff
36168 8F74           09D1                         or ecx, edx
36169 8F76           C1E1                   02    shl ecx, #2
36170 8F79           89C8                         mov eax, ecx
36171 8F7B           50                           push eax
36172 8F7C     66    BA                   01CE    mov dx, # 0x01CE
36173 8F80     66    B8                   0006    mov ax, # 0x6
36174 8F84     66    EF                           out dx, ax
36175 8F86     66    BA                   01CF    mov dx, # 0x01CF
36176 8F8A     66    ED                           in ax, dx
36177 8F8C         0FB7C8                         movzx ecx, ax
36178 8F8F     66    BA                   01CE    mov dx, # 0x01CE
36179 8F93     66    B8                   0003    mov ax, # 0x3
36180 8F97     66    EF                           out dx, ax
36181 8F99     66    BA                   01CF    mov dx, # 0x01CF
36182 8F9D     66    ED                           in ax, dx
36183 8F9F         0FB7F0                         movzx esi, ax
36184 8FA2           58                           pop eax
36185 8FA3           83FE                   04    cmp esi, #4
36186 8FA6           74           17              jz bpp4_mode
36187 8FA8           83C6                   07    add esi, #7
36188 8FAB           C1EE                   03    shr esi, #3
36189 8FAE         0FAFCE                         imul ecx, esi
36190 8FB1           31D2                         xor edx, edx
36191 8FB3           F7F1                         div ecx
36192 8FB5           89C7                         mov edi, eax
36193 8FB7           89D0                         mov eax, edx
36194 8FB9           31D2                         xor edx, edx
36195 8FBB           F7F6                         div esi
36196 8FBD           EB           0C              jmp set_xy_regs
36197                       00008FBF            bpp4_mode:
36198 8FBF           D1E9                         shr ecx, #1
36199 8FC1           31D2                         xor edx, edx
36200 8FC3           F7F1                         div ecx
36201 8FC5           89C7                         mov edi, eax
36202 8FC7           89D0                         mov eax, edx
36203 8FC9           D1E0                         shl eax, #1
36204                       00008FCB            set_xy_regs:
36205 8FCB     66    52                           push dx
36206 8FCD     66    50                           push ax
36207 8FCF     66    BA                   01CE    mov dx, # 0x01CE
36208 8FD3     66    B8                   0008    mov ax, # 0x8
36209 8FD7     66    EF                           out dx, ax
36210 8FD9     66    58                           pop ax
36211 8FDB     66    BA                   01CF    mov dx, # 0x01CF
36212 8FDF     66    EF                           out dx, ax
36213 8FE1     66    5A                           pop dx
36214 8FE3     66    89F8                         mov ax, di
36215 8FE6     66    52                           push dx
36216 8FE8     66    50                           push ax
36217 8FEA     66    BA                   01CE    mov dx, # 0x01CE
36218 8FEE     66    B8                   0009    mov ax, # 0x9
36219 8FF2     66    EF                           out dx, ax
36220 8FF4     66    58                           pop ax
36221 8FF6     66    BA                   01CF    mov dx, # 0x01CF
36222 8FFA     66    EF                           out dx, ax
36223 8FFC     66    5A                           pop dx
36224 8FFE           5F                           pop edi
36225 8FFF           5E                           pop esi
36226 9000           5A                           pop edx
36227 9001           59                           pop ecx
36228 9002           58                           pop eax
36229 9003     66    B8                   004F    mov ax, #0x004f
36230 9007           C3                           ret
36231                       00009008            vesa_pm_unimplemented:
36232 9008     66    B8                   014F    mov ax, #0x014f
36233 900C           C3                           ret
36234                                             USE16
36235                       0000900D            vesa_pm_end:
36236                                           ; DISPI ioport functions
36237                       0000900D            dispi_get_id:
36238 900D           52                           push dx
36239 900E           BA                   01CE    mov dx, # 0x01CE
36240 9011           B8                   0000    mov ax, # 0x0
36241 9014           EF                           out dx, ax
36242 9015           BA                   01CF    mov dx, # 0x01CF
36243 9018           ED                           in ax, dx
36244 9019           5A                           pop dx
36245 901A           C3                           ret
36246                       0000901B            dispi_set_id:
36247 901B           52                           push dx
36248 901C           50                           push ax
36249 901D           BA                   01CE    mov dx, # 0x01CE
36250 9020           B8                   0000    mov ax, # 0x0
36251 9023           EF                           out dx, ax
36252 9024           58                           pop ax
36253 9025           BA                   01CF    mov dx, # 0x01CF
36254 9028           EF                           out dx, ax
36255 9029           5A                           pop dx
36256 902A           C3                           ret
36257                                           ! 7347 endasm
36258                                           !BCC_ENDASM
36259                                           ! 7348 static void dispi_set_xres(xres)
36260                                           ! 7349   Bit16u xres;
36261                                           
36262                       0000902B            _dispi_set_xres:
36263                                           !BCC_EOS
36264                                           ! 7350 {
36265                                           ! 7351 #asm
36266                                           !BCC_ASM
36267                       00000002            _dispi_set_xres.xres	set	2
36268 902B           55                           push bp
36269 902C           89E5                         mov bp, sp
36270 902E           50                           push ax
36271 902F           52                           push dx
36272 9030           BA                   01CE    mov dx, # 0x01CE
36273 9033           B8                   0001    mov ax, # 0x1
36274 9036           EF                           out dx, ax
36275 9037           BA                   01CF    mov dx, # 0x01CF
36276 903A           8B46         04              mov ax, 4[bp] ; xres
36277 903D           EF                           out dx, ax
36278 903E           5A                           pop dx
36279 903F           58                           pop ax
36280 9040           5D                           pop bp
36281                                           ! 7365 endasm
36282                                           !BCC_ENDASM
36283                                           ! 7366 }
36284 9041           C3                         ret
36285                                           ! 7367 static void dispi_set_yres(yres)
36286                                           ! 7368   Bit16u yres;
36287                       00009042            _dispi_set_yres:
36288                                           !BCC_EOS
36289                                           ! 7369 {
36290                                           ! 7370   outw(0x01CE,0x2);
36291 9042           55                         push	bp
36292 9043           89E5                       mov	bp,sp
36293                                           ! Debug: list int = const 2 (used reg = )
36294 9045           B8                   0002  mov	ax,*2
36295 9048           50                         push	ax
36296                                           ! Debug: list int = const $1CE (used reg = )
36297 9049           B8                   01CE  mov	ax,#$1CE
36298 904C           50                         push	ax
36299                                           ! Debug: func () void = outw+0 (used reg = )
36300 904D           E8         EBBE            call	_outw
36301 9050           89EC                       mov	sp,bp
36302                                           !BCC_EOS
36303                                           ! 7371   outw(0x01CF,yres);
36304                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
36305 9052           FF76         04            push	4[bp]
36306                                           ! Debug: list int = const $1CF (used reg = )
36307 9055           B8                   01CF  mov	ax,#$1CF
36308 9058           50                         push	ax
36309                                           ! Debug: func () void = outw+0 (used reg = )
36310 9059           E8         EBB2            call	_outw
36311 905C           89EC                       mov	sp,bp
36312                                           !BCC_EOS
36313                                           ! 7372 }
36314 905E           5D                         pop	bp
36315 905F           C3                         ret
36316                                           ! 7373 static void dispi_set_bpp(bpp)
36317                                           ! 7374   Bit16u bpp;
36318                       00009060            _dispi_set_bpp:
36319                                           !BCC_EOS
36320                                           ! 7375 {
36321                                           ! 7376   outw(0x01CE,0x3);
36322 9060           55                         push	bp
36323 9061           89E5                       mov	bp,sp
36324                                           ! Debug: list int = const 3 (used reg = )
36325 9063           B8                   0003  mov	ax,*3
36326 9066           50                         push	ax
36327                                           ! Debug: list int = const $1CE (used reg = )
36328 9067           B8                   01CE  mov	ax,#$1CE
36329 906A           50                         push	ax
36330                                           ! Debug: func () void = outw+0 (used reg = )
36331 906B           E8         EBA0            call	_outw
36332 906E           89EC                       mov	sp,bp
36333                                           !BCC_EOS
36334                                           ! 7377   outw(0x01CF,bpp);
36335                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
36336 9070           FF76         04            push	4[bp]
36337                                           ! Debug: list int = const $1CF (used reg = )
36338 9073           B8                   01CF  mov	ax,#$1CF
36339 9076           50                         push	ax
36340                                           ! Debug: func () void = outw+0 (used reg = )
36341 9077           E8         EB94            call	_outw
36342 907A           89EC                       mov	sp,bp
36343                                           !BCC_EOS
36344                                           ! 7378 }
36345 907C           5D                         pop	bp
36346 907D           C3                         ret
36347                                           ! 7379 #asm
36348                                           !BCC_ASM
36349                       00000002            _dispi_set_bpp.bpp	set	2
36350                                           ; AL = bits per pixel / AH = bytes per pixel
36351                       0000907E            dispi_get_bpp:
36352 907E           52                           push dx
36353 907F           BA                   01CE    mov dx, # 0x01CE
36354 9082           B8                   0003    mov ax, # 0x3
36355 9085           EF                           out dx, ax
36356 9086           BA                   01CF    mov dx, # 0x01CF
36357 9089           ED                           in ax, dx
36358 908A           88C4                         mov ah, al
36359 908C           C0EC                   03    shr ah, 3
36360 908F           A8                     07    test al, #0x07
36361 9091           74           02              jz get_bpp_noinc
36362 9093           FEC4                         inc ah
36363                       00009095            get_bpp_noinc:
36364 9095           5A                           pop dx
36365 9096           C3                           ret
36366                                           ; get display capabilities
36367                       00009097            _dispi_get_max_xres:
36368 9097           52                           push dx
36369 9098           53                           push bx
36370 9099           E8         004F              call dispi_get_enable
36371 909C           89C3                         mov bx, ax
36372 909E           0D                   0002    or ax, # 0x02
36373 90A1           E8         0037              call _dispi_set_enable
36374 90A4           BA                   01CE    mov dx, # 0x01CE
36375 90A7           B8                   0001    mov ax, # 0x1
36376 90AA           EF                           out dx, ax
36377 90AB           BA                   01CF    mov dx, # 0x01CF
36378 90AE           ED                           in ax, dx
36379 90AF           50                           push ax
36380 90B0           89D8                         mov ax, bx
36381 90B2           E8         0026              call _dispi_set_enable
36382 90B5           58                           pop ax
36383 90B6           5B                           pop bx
36384 90B7           5A                           pop dx
36385 90B8           C3                           ret
36386                       000090B9            _dispi_get_max_bpp:
36387 90B9           52                           push dx
36388 90BA           53                           push bx
36389 90BB           E8         002D              call dispi_get_enable
36390 90BE           89C3                         mov bx, ax
36391 90C0           0D                   0002    or ax, # 0x02
36392 90C3           E8         0015              call _dispi_set_enable
36393 90C6           BA                   01CE    mov dx, # 0x01CE
36394 90C9           B8                   0003    mov ax, # 0x3
36395 90CC           EF                           out dx, ax
36396 90CD           BA                   01CF    mov dx, # 0x01CF
36397 90D0           ED                           in ax, dx
36398 90D1           50                           push ax
36399 90D2           89D8                         mov ax, bx
36400 90D4           E8         0004              call _dispi_set_enable
36401 90D7           58                           pop ax
36402 90D8           5B                           pop bx
36403 90D9           5A                           pop dx
36404 90DA           C3                           ret
36405                       000090DB            _dispi_set_enable:
36406 90DB           52                           push dx
36407 90DC           50                           push ax
36408 90DD           BA                   01CE    mov dx, # 0x01CE
36409 90E0           B8                   0004    mov ax, # 0x4
36410 90E3           EF                           out dx, ax
36411 90E4           58                           pop ax
36412 90E5           BA                   01CF    mov dx, # 0x01CF
36413 90E8           EF                           out dx, ax
36414 90E9           5A                           pop dx
36415 90EA           C3                           ret
36416                       000090EB            dispi_get_enable:
36417 90EB           52                           push dx
36418 90EC           BA                   01CE    mov dx, # 0x01CE
36419 90EF           B8                   0004    mov ax, # 0x4
36420 90F2           EF                           out dx, ax
36421 90F3           BA                   01CF    mov dx, # 0x01CF
36422 90F6           ED                           in ax, dx
36423 90F7           5A                           pop dx
36424 90F8           C3                           ret
36425                       000090F9            _dispi_set_bank:
36426 90F9           52                           push dx
36427 90FA           50                           push ax
36428 90FB           BA                   01CE    mov dx, # 0x01CE
36429 90FE           B8                   0005    mov ax, # 0x5
36430 9101           EF                           out dx, ax
36431 9102           58                           pop ax
36432 9103           BA                   01CF    mov dx, # 0x01CF
36433 9106           EF                           out dx, ax
36434 9107           5A                           pop dx
36435 9108           C3                           ret
36436                       00009109            dispi_get_bank:
36437 9109           52                           push dx
36438 910A           BA                   01CE    mov dx, # 0x01CE
36439 910D           B8                   0005    mov ax, # 0x5
36440 9110           EF                           out dx, ax
36441 9111           BA                   01CF    mov dx, # 0x01CF
36442 9114           ED                           in ax, dx
36443 9115           5A                           pop dx
36444 9116           C3                           ret
36445                                           ! 7475 endasm
36446                                           !BCC_ENDASM
36447                                           ! 7476 static void dispi_set_bank_farcall()
36448                                           ! 7477 {
36449                       00009117            _dispi_set_bank_farcall:
36450                                           ! 7478 #asm
36451                                           !BCC_ASM
36452 9117           81FB                 0100    cmp bx,#0x0100
36453 911B           74           1E              je dispi_set_bank_farcall_get
36454 911D           09DB                         or bx,bx
36455 911F           75           28              jnz dispi_set_bank_farcall_error
36456 9121           89D0                         mov ax,dx
36457 9123           52                           push dx
36458 9124           50                           push ax
36459 9125           B8                   0005    mov ax,# 0x5
36460 9128           BA                   01CE    mov dx,# 0x01CE
36461 912B           EF                           out dx,ax
36462 912C           58                           pop ax
36463 912D           BA                   01CF    mov dx,# 0x01CF
36464 9130           EF                           out dx,ax
36465 9131           ED                           in ax,dx
36466 9132           5A                           pop dx
36467 9133           39C2                         cmp dx,ax
36468 9135           75           12              jne dispi_set_bank_farcall_error
36469 9137           B8                   004F    mov ax, #0x004f
36470 913A           CB                           retf
36471                       0000913B            dispi_set_bank_farcall_get:
36472 913B           B8                   0005    mov ax,# 0x5
36473 913E           BA                   01CE    mov dx,# 0x01CE
36474 9141           EF                           out dx,ax
36475 9142           BA                   01CF    mov dx,# 0x01CF
36476 9145           ED                           in ax,dx
36477 9146           89C2                         mov dx,ax
36478 9148           CB                           retf
36479                       00009149            dispi_set_bank_farcall_error:
36480 9149           B8                   014F    mov ax,#0x014F
36481 914C           CB                           retf
36482                                           ! 7509 endasm
36483                                           !BCC_ENDASM
36484                                           ! 7510 }
36485 914D           C3                         ret
36486                                           ! 7511 #asm
36487                                           !BCC_ASM
36488                       0000914E            dispi_set_x_offset:
36489 914E           52                           push dx
36490 914F           50                           push ax
36491 9150           BA                   01CE    mov dx, # 0x01CE
36492 9153           B8                   0008    mov ax, # 0x8
36493 9156           EF                           out dx, ax
36494 9157           58                           pop ax
36495 9158           BA                   01CF    mov dx, # 0x01CF
36496 915B           EF                           out dx, ax
36497 915C           5A                           pop dx
36498 915D           C3                           ret
36499                       0000915E            dispi_get_x_offset:
36500 915E           52                           push dx
36501 915F           BA                   01CE    mov dx, # 0x01CE
36502 9162           B8                   0008    mov ax, # 0x8
36503 9165           EF                           out dx, ax
36504 9166           BA                   01CF    mov dx, # 0x01CF
36505 9169           ED                           in ax, dx
36506 916A           5A                           pop dx
36507 916B           C3                           ret
36508                       0000916C            dispi_set_y_offset:
36509 916C           52                           push dx
36510 916D           50                           push ax
36511 916E           BA                   01CE    mov dx, # 0x01CE
36512 9171           B8                   0009    mov ax, # 0x9
36513 9174           EF                           out dx, ax
36514 9175           58                           pop ax
36515 9176           BA                   01CF    mov dx, # 0x01CF
36516 9179           EF                           out dx, ax
36517 917A           5A                           pop dx
36518 917B           C3                           ret
36519                       0000917C            dispi_get_y_offset:
36520 917C           52                           push dx
36521 917D           BA                   01CE    mov dx, # 0x01CE
36522 9180           B8                   0009    mov ax, # 0x9
36523 9183           EF                           out dx, ax
36524 9184           BA                   01CF    mov dx, # 0x01CF
36525 9187           ED                           in ax, dx
36526 9188           5A                           pop dx
36527 9189           C3                           ret
36528                       0000918A            vga_set_virt_width:
36529 918A           50                           push ax
36530 918B           53                           push bx
36531 918C           52                           push dx
36532 918D           89C3                         mov bx, ax
36533 918F           E8         FEEC              call dispi_get_bpp
36534 9192           3C                     04    cmp al, #0x04
36535 9194           77           02              ja set_width_svga
36536 9196           D1EB                         shr bx, #1
36537                       00009198            set_width_svga:
36538 9198           C1EB                   03    shr bx, #3
36539 919B           BA                   03D4    mov dx, # 0x3d4
36540 919E           88DC                         mov ah, bl
36541 91A0           B0                     13    mov al, #0x13
36542 91A2           EF                           out dx, ax
36543 91A3           5A                           pop dx
36544 91A4           5B                           pop bx
36545 91A5           58                           pop ax
36546 91A6           C3                           ret
36547                       000091A7            dispi_set_virt_width:
36548 91A7           E8         FFE0              call vga_set_virt_width
36549 91AA           52                           push dx
36550 91AB           50                           push ax
36551 91AC           BA                   01CE    mov dx, # 0x01CE
36552 91AF           B8                   0006    mov ax, # 0x6
36553 91B2           EF                           out dx, ax
36554 91B3           58                           pop ax
36555 91B4           BA                   01CF    mov dx, # 0x01CF
36556 91B7           EF                           out dx, ax
36557 91B8           5A                           pop dx
36558 91B9           C3                           ret
36559                       000091BA            dispi_get_virt_width:
36560 91BA           52                           push dx
36561 91BB           BA                   01CE    mov dx, # 0x01CE
36562 91BE           B8                   0006    mov ax, # 0x6
36563 91C1           EF                           out dx, ax
36564 91C2           BA                   01CF    mov dx, # 0x01CF
36565 91C5           ED                           in ax, dx
36566 91C6           5A                           pop dx
36567 91C7           C3                           ret
36568                       000091C8            dispi_get_virt_height:
36569 91C8           52                           push dx
36570 91C9           BA                   01CE    mov dx, # 0x01CE
36571 91CC           B8                   0007    mov ax, # 0x7
36572 91CF           EF                           out dx, ax
36573 91D0           BA                   01CF    mov dx, # 0x01CF
36574 91D3           ED                           in ax, dx
36575 91D4           5A                           pop dx
36576 91D5           C3                           ret
36577                       000091D6            _vga_compat_setup:
36578 91D6           50                           push ax
36579 91D7           52                           push dx
36580                                             ; set CRT X resolution
36581 91D8           BA                   01CE    mov dx, # 0x01CE
36582 91DB           B8                   0001    mov ax, # 0x1
36583 91DE           EF                           out dx, ax
36584 91DF           BA                   01CF    mov dx, # 0x01CF
36585 91E2           ED                           in ax, dx
36586 91E3           50                           push ax
36587 91E4           BA                   03D4    mov dx, # 0x3d4
36588 91E7           B8                   0011    mov ax, #0x0011
36589 91EA           EF                           out dx, ax
36590 91EB           58                           pop ax
36591 91EC           50                           push ax
36592 91ED           C1E8                   03    shr ax, #3
36593 91F0           48                           dec ax
36594 91F1           88C4                         mov ah, al
36595 91F3           B0                     01    mov al, #0x01
36596 91F5           EF                           out dx, ax
36597 91F6           58                           pop ax
36598 91F7           E8         FF90              call vga_set_virt_width
36599                                             ; set CRT Y resolution
36600 91FA           BA                   01CE    mov dx, # 0x01CE
36601 91FD           B8                   0002    mov ax, # 0x2
36602 9200           EF                           out dx, ax
36603 9201           BA                   01CF    mov dx, # 0x01CF
36604 9204           ED                           in ax, dx
36605 9205           48                           dec ax
36606 9206           50                           push ax
36607 9207           BA                   03D4    mov dx, # 0x3d4
36608 920A           88C4                         mov ah, al
36609 920C           B0                     12    mov al, #0x12
36610 920E           EF                           out dx, ax
36611 920F           58                           pop ax
36612 9210           B0                     07    mov al, #0x07
36613 9212           EE                           out dx, al
36614 9213           42                           inc dx
36615 9214           EC                           in al, dx
36616 9215           24                     BD    and al, #0xbd
36617 9217           F6C4                   01    test ah, #0x01
36618 921A           74           02              jz bit8_clear
36619 921C           0C                     02    or al, #0x02
36620                       0000921E            bit8_clear:
36621 921E           F6C4                   02    test ah, #0x02
36622 9221           74           02              jz bit9_clear
36623 9223           0C                     40    or al, #0x40
36624                       00009225            bit9_clear:
36625 9225           EE                           out dx, al
36626                                             ; other settings
36627 9226           BA                   03D4    mov dx, # 0x3d4
36628 9229           B8                   0009    mov ax, #0x0009
36629 922C           EF                           out dx, ax
36630 922D           B0                     17    mov al, #0x17
36631 922F           EE                           out dx, al
36632 9230           BA                   03D5    mov dx, # 0x3d5
36633 9233           EC                           in al, dx
36634 9234           0C                     03    or al, #0x03
36635 9236           EE                           out dx, al
36636 9237           BA                   03DA    mov dx, # 0x3da
36637 923A           EC                           in al, dx
36638 923B           BA                   03C0    mov dx, # 0x3c0
36639 923E           B0                     10    mov al, #0x10
36640 9240           EE                           out dx, al
36641 9241           BA                   03C1    mov dx, # 0x3c1
36642 9244           EC                           in al, dx
36643 9245           0C                     01    or al, #0x01
36644 9247           BA                   03C0    mov dx, # 0x3c0
36645 924A           EE                           out dx, al
36646 924B           B0                     20    mov al, #0x20
36647 924D           EE                           out dx, al
36648 924E           BA                   03CE    mov dx, # 0x3ce
36649 9251           B8                   0506    mov ax, #0x0506
36650 9254           EF                           out dx, ax
36651 9255           BA                   03C4    mov dx, # 0x3c4
36652 9258           B8                   0F02    mov ax, #0x0f02
36653 925B           EF                           out dx, ax
36654                                             ; settings for >= 8bpp
36655 925C           BA                   01CE    mov dx, # 0x01CE
36656 925F           B8                   0003    mov ax, # 0x3
36657 9262           EF                           out dx, ax
36658 9263           BA                   01CF    mov dx, # 0x01CF
36659 9266           ED                           in ax, dx
36660 9267           3C                     08    cmp al, #0x08
36661 9269           72           40              jb vga_compat_end
36662 926B           BA                   03D4    mov dx, # 0x3d4
36663 926E           B0                     14    mov al, #0x14
36664 9270           EE                           out dx, al
36665 9271           BA                   03D5    mov dx, # 0x3d5
36666 9274           EC                           in al, dx
36667 9275           0C                     40    or al, #0x40
36668 9277           EE                           out dx, al
36669 9278           BA                   03DA    mov dx, # 0x3da
36670 927B           EC                           in al, dx
36671 927C           BA                   03C0    mov dx, # 0x3c0
36672 927F           B0                     10    mov al, #0x10
36673 9281           EE                           out dx, al
36674 9282           BA                   03C1    mov dx, # 0x3c1
36675 9285           EC                           in al, dx
36676 9286           0C                     40    or al, #0x40
36677 9288           BA                   03C0    mov dx, # 0x3c0
36678 928B           EE                           out dx, al
36679 928C           B0                     20    mov al, #0x20
36680 928E           EE                           out dx, al
36681 928F           BA                   03C4    mov dx, # 0x3c4
36682 9292           B0                     04    mov al, #0x04
36683 9294           EE                           out dx, al
36684 9295           BA                   03C5    mov dx, # 0x3c5
36685 9298           EC                           in al, dx
36686 9299           0C                     08    or al, #0x08
36687 929B           EE                           out dx, al
36688 929C           BA                   03CE    mov dx, # 0x3ce
36689 929F           B0                     05    mov al, #0x05
36690 92A1           EE                           out dx, al
36691 92A2           BA                   03CF    mov dx, # 0x3cf
36692 92A5           EC                           in al, dx
36693 92A6           24                     9F    and al, #0x9f
36694 92A8           0C                     40    or al, #0x40
36695 92AA           EE                           out dx, al
36696                       000092AB            vga_compat_end:
36697 92AB           5A                           pop dx
36698 92AC           58                           pop ax
36699                                           ! 7723 endasm
36700                                           !BCC_ENDASM
36701                                           ! 7724 static ModeInfoListItem* mode_info_find_
36702                                           ! 7724 mode(mode, using_lfb)
36703                                           ! 7725   Bit16u mode; Boolean using_lfb;
36704                       000092AD            _mode_info_find_mode:
36705                                           !BCC_EOS
36706                                           !BCC_EOS
36707                                           ! 7726 {
36708                                           ! 7727   ModeInfoListItem *cur_info=&mode_info_list;
36709 92AD           55                         push	bp
36710 92AE           89E5                       mov	bp,sp
36711 92B0           4C                         dec	sp
36712 92B1           4C                         dec	sp
36713                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36714 92B2           BB                   7D5E  mov	bx,#_mode_info_list
36715 92B5           895E         FE            mov	-2[bp],bx
36716                                           !BCC_EOS
36717                                           ! 7728   while (cur_info->mode != 0xFFFF)
36718                                           ! 7729   {
36719 92B8           EB           43            jmp .2B9
36720                       000092BA            .2BA:
36721                                           ! 7730     if (cur_info->mode == mode)
36722 92BA           8B5E         FE            mov	bx,-2[bp]
36723                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
36724 92BD           8B1F                       mov	bx,[bx]
36725 92BF           3B5E         04            cmp	bx,4[bp]
36726 92C2           75           30            jne 	.2BB
36727                       000092C4            .2BC:
36728                                           ! 7731     {
36729                                           ! 7732       if (!using_lfb)
36730 92C4           8B46         06            mov	ax,6[bp]
36731 92C7           85C0                       test	ax,ax
36732 92C9           75           09            jne 	.2BD
36733                       000092CB            .2BE:
36734                                           ! 7733       {
36735                                           ! 7734         return cur_info;
36736 92CB           8B46         FE            mov	ax,-2[bp]
36737 92CE           89EC                       mov	sp,bp
36738 92D0           5D                         pop	bp
36739 92D1           C3                         ret
36740                                           !BCC_EOS
36741                                           ! 7735       }
36742                                           ! 7736       else if (cur_info->info.ModeAttributes & 0x0080)
36743 92D2           EB           1E            jmp .2BF
36744                       000092D4            .2BD:
36745 92D4           8B5E         FE            mov	bx,-2[bp]
36746                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
36747 92D7           8A47         02            mov	al,2[bx]
36748 92DA           24                     80  and	al,#$80
36749 92DC           84C0                       test	al,al
36750 92DE           74           09            je  	.2C0
36751                       000092E0            .2C1:
36752                                           ! 7737       {
36753                                           ! 7738         return cur_info;
36754 92E0           8B46         FE            mov	ax,-2[bp]
36755 92E3           89EC                       mov	sp,bp
36756 92E5           5D                         pop	bp
36757 92E6           C3                         ret
36758                                           !BCC_EOS
36759                                           ! 7739       }
36760                                           ! 7740       else
36761                                           ! 7741       {
36762 92E7           EB           09            jmp .2C2
36763                       000092E9            .2C0:
36764                                           ! 7742         cur_info++;
36765                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36766 92E9           8B5E         FE            mov	bx,-2[bp]
36767 92EC           83C3                   44  add	bx,*$44
36768 92EF           895E         FE            mov	-2[bp],bx
36769                                           !BCC_EOS
36770                                           ! 7743       }
36771                                           ! 7744     }
36772                       000092F2            .2C2:
36773                       000092F2            .2BF:
36774                                           ! 7745     else
36775                                           ! 7746     {
36776 92F2           EB           09            jmp .2C3
36777                       000092F4            .2BB:
36778                                           ! 7747       cur_info++;
36779                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36780 92F4           8B5E         FE            mov	bx,-2[bp]
36781 92F7           83C3                   44  add	bx,*$44
36782 92FA           895E         FE            mov	-2[bp],bx
36783                                           !BCC_EOS
36784                                           ! 7748     }
36785                                           ! 7749   }
36786                       000092FD            .2C3:
36787                                           ! 7750   return 0;
36788                       000092FD            .2B9:
36789 92FD           8B5E         FE            mov	bx,-2[bp]
36790                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
36791 9300           8B1F                       mov	bx,[bx]
36792 9302           81FB                 FFFF  cmp	bx,#$FFFF
36793 9306           75           B2            jne	.2BA
36794                       00009308            .2C4:
36795                       00009308            .2B8:
36796 9308           31C0                       xor	ax,ax
36797 930A           89EC                       mov	sp,bp
36798 930C           5D                         pop	bp
36799 930D           C3                         ret
36800                                           !BCC_EOS
36801                                           ! 7751 }
36802                                           ! 7752 #asm
36803                                           !BCC_ASM
36804                       00000004            _mode_info_find_mode.using_lfb	set	4
36805                       00000002            _mode_info_find_mode.mode	set	2
36806                                           ; Has 1 display - Returns true if 1 display detected
36807                       0000930E            _vbe_has_vbe_display:
36808 930E           1E                           push ds
36809 930F           53                           push bx
36810 9310           B8                   0040    mov ax, # 0x40
36811 9313           8ED8                         mov ds, ax
36812 9315           BB                   00B9    mov bx, # 0xB9
36813 9318           8A07                         mov al, [bx]
36814 931A           24                     01    and al, #0x01
36815 931C           30E4                         xor ah, ah
36816 931E           5B                           pop bx
36817 931F           1F                           pop ds
36818 9320           C3                           ret
36819                                           ; 1 Init - Initialise the Vesa Bios Extension Code
36820                                           ; This function does a sanity check on the host side display code interface.
36821                       00009321            vbe_init:
36822 9321           B8                   B0C0    mov ax, # 0xB0C0
36823 9324           E8         FCF4              call dispi_set_id
36824 9327           E8         FCE3              call dispi_get_id
36825 932A           3D                   B0C0    cmp ax, # 0xB0C0
36826 932D           75           16              jne no_vbe_interface
36827 932F           1E                           push ds
36828 9330           53                           push bx
36829 9331           B8                   0040    mov ax, # 0x40
36830 9334           8ED8                         mov ds, ax
36831 9336           BB                   00B9    mov bx, # 0xB9
36832 9339           B0                     01    mov al, #0x01
36833 933B           8807                         mov [bx], al
36834 933D           5B                           pop bx
36835 933E           1F                           pop ds
36836 933F           B8                   B0C4    mov ax, # 0xB0C4
36837 9342           E8         FCD6              call dispi_set_id
36838                       00009345            no_vbe_interface:
36839 9345           BB                   8ECC    mov bx, #msg_vbe_init
36840 9348           53                           push bx
36841 9349           E8         E8D5              call _printf
36842 934C           44                           inc sp
36843 934D           44                           inc sp
36844 934E           C3                           ret
36845                                           ; 1 Display Info - Display information on screen about the 1
36846                       0000934F            vbe_display_info:
36847 934F           E8         FFBC              call _vbe_has_vbe_display
36848 9352           85C0                         test ax, ax
36849 9354           74           0B              jz no_vbe_flag
36850 9356           B8                   C000    mov ax, #0xc000
36851 9359           8ED8                         mov ds, ax
36852 935B           BE                   8E82    mov si, #_vbebios_info_string
36853 935E           E9         A2D6              jmp _display_string
36854                       00009361            no_vbe_flag:
36855 9361           B8                   C000    mov ax, #0xc000
36856 9364           8ED8                         mov ds, ax
36857 9366           BE                   8EA8    mov si, #_no_vbebios_info_string
36858 9369           E9         A2CB              jmp _display_string
36859                                           ! 7806 endasm
36860                                           !BCC_ENDASM
36861                                           ! 7807 #asm
36862                                           !BCC_ASM
36863                       00000004            _mode_info_find_mode.using_lfb	set	4
36864                       00000002            _mode_info_find_mode.mode	set	2
36865                       0000936C            _size64:
36866 936C           55                           push bp
36867 936D           89E5                         mov bp, sp
36868 936F           52                           push dx
36869                                           ; multiply bbp by yres first as results fit in 16bits
36870                                           ; then multiply by xres
36871 9370           8B46         08              mov ax, 8[bp]
36872 9373           F766         06              mul word 6[bp]
36873 9376           F766         04              mul word 4[bp]
36874                                           ; divide by 2
36875                                           19 ceiling result
36876 9379           05                   FFFF    add ax, #0xffff
36877 937C           83D2                   07    adc dx, #7
36878 937F           89D0                         mov ax, dx
36879 9381           C1E8                   03    shr ax, #3
36880 9384           5A                           pop dx
36881 9385           5D                           pop bp
36882 9386           C3                           ret
36883                                           ! 7825 endasm
36884                                           !BCC_ENDASM
36885                                           ! 7826 void vbe_biosfn_return_controller_information(AX, ES, DI)
36886                                           ! Register BX used in function mode_info_find_mode
36887                                           ! 7827 Bit16u *AX;Bit16u ES;Bit16u DI;
36888                                           export	_vbe_biosfn_return_controller_information
36889                       00009387            _vbe_biosfn_return_controller_information:
36890                                           !BCC_EOS
36891                                           !BCC_EOS
36892                                           !BCC_EOS
36893                                           ! 7828 {
36894                                           ! 7829         Bit16u ss=get_SS();
36895 9387           55                         push	bp
36896 9388           89E5                       mov	bp,sp
36897 938A           4C                         dec	sp
36898 938B           4C                         dec	sp
36899                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
36900 938C           E8         E88F            call	_get_SS
36901                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
36902 938F           8946         FE            mov	-2[bp],ax
36903                                           !BCC_EOS
36904                                           ! 7830         VbeInfoBlock vbe_info_block;
36905                                           !BCC_EOS
36906                                           ! 7831         Bit16u status;
36907                                           !BCC_EOS
36908                                           ! 7832         Bit16u result;
36909                                           !BCC_EOS
36910                                           ! 7833         Bit16u vbe2_info;
36911                                           !BCC_EOS
36912                                           ! 7834         Bit16u cur_mode=0;
36913 9392           81C4                 FDF8  add	sp,#-$208
36914                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
36915 9396           31C0                       xor	ax,ax
36916 9398           8986       FDF6            mov	-$20A[bp],ax
36917                                           !BCC_EOS
36918                                           ! 7835         Bit16u
36919                                           ! 7835  cur_ptr=34;
36920 939C           4C                         dec	sp
36921 939D           4C                         dec	sp
36922                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
36923 939E           B8                   0022  mov	ax,*$22
36924 93A1           8986       FDF4            mov	-$20C[bp],ax
36925                                           !BCC_EOS
36926                                           ! 7836         ModeInfoListItem *cur_info=&mode_info_list;
36927 93A5           4C                         dec	sp
36928 93A6           4C                         dec	sp
36929                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$210-$210] (used reg = )
36930 93A7           BB                   7D5E  mov	bx,#_mode_info_list
36931 93AA           899E       FDF2            mov	-$20E[bp],bx
36932                                           !BCC_EOS
36933                                           ! 7837         status = read_word(ss, AX);
36934                                           ! Debug: list * unsigned short AX = [S+$210+2] (used reg = )
36935 93AE           FF76         04            push	4[bp]
36936                                           ! Debug: list unsigned short ss = [S+$212-4] (used reg = )
36937 93B1           FF76         FE            push	-2[bp]
36938                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
36939 93B4           E8         E7EE            call	_read_word
36940 93B7           83C4                   04  add	sp,*4
36941                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$210-$206] (used reg = )
36942 93BA           8986       FDFC            mov	-$204[bp],ax
36943                                           !BCC_EOS
36944                                           ! 7838         vbe2_info = 0;
36945                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$210-$20A] (used reg = )
36946 93BE           31C0                       xor	ax,ax
36947 93C0           8986       FDF8            mov	-$208[bp],ax
36948                                           !BCC_EOS
36949                                           ! 7839         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
36950                                           ! Debug: list int = const $200 (used reg = )
36951 93C4           B8                   0200  mov	ax,#$200
36952 93C7           50                         push	ax
36953                                           ! Debug: list unsigned short DI = [S+$212+6] (used reg = )
36954 93C8           FF76         08            push	8[bp]
36955                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
36956 93CB           FF76         06            push	6[bp]
36957                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$216-$204 (used reg = )
36958 93CE           8D9E       FDFE            lea	bx,-$202[bp]
36959 93D2           53                         push	bx
36960                                           ! Debug: list unsigned short ss = [S+$218-4] (used reg = )
36961 93D3           FF76         FE            push	-2[bp]
36962                                           ! Debug: func () void = memcpyb+0 (used reg = )
36963 93D6           E8         E759            call	_memcpyb
36964 93D9           83C4                   0A  add	sp,*$A
36965                                           !BCC_EOS
36966                                           ! 7840         if (((vbe_info_block.VbeSignature[0] == 'V') &&
36967                                           ! 7841              (vbe_info_block.VbeSignature[1] == 'B') &&
36968                                           ! 7842              (vbe_info_block.VbeSignature[2] == 'E') &&
36969                                           ! 7843              (vbe_info_block.VbeSignature[3] == '2')) ||
36970                                           ! 7844             ((vbe_info_block.VbeSignature[0] == 'V') &&
36971                                           ! 7845              (vbe_info_block.VbeSignature[1] == 'E') &&
36972                                           ! 7846              (vbe_info_block.VbeSignature[2] == 'S') &&
36973                                           ! 7847              (vbe_info_block.VbeSignature[3] == 'A')) )
36974                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
36975 93DC           8A86       FDFE            mov	al,-$202[bp]
36976 93E0           3C                     56  cmp	al,*$56
36977 93E2           75           18            jne 	.2C7
36978                       000093E4            .2CA:
36979                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
36980 93E4           8A86       FDFF            mov	al,-$201[bp]
36981 93E8           3C                     42  cmp	al,*$42
36982 93EA           75           10            jne 	.2C7
36983                       000093EC            .2C9:
36984                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
36985 93EC           8A86       FE00            mov	al,-$200[bp]
36986 93F0           3C                     45  cmp	al,*$45
36987 93F2           75           08            jne 	.2C7
36988                       000093F4            .2C8:
36989                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
36990 93F4           8A86       FE01            mov	al,-$1FF[bp]
36991 93F8           3C                     32  cmp	al,*$32
36992 93FA           74           20            je  	.2C6
36993                       000093FC            .2C7:
36994                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
36995 93FC           8A86       FDFE            mov	al,-$202[bp]
36996 9400           3C                     56  cmp	al,*$56
36997 9402           75           1F            jne 	.2C5
36998                       00009404            .2CD:
36999                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37000 9404           8A86       FDFF            mov	al,-$201[bp]
37001 9408           3C                     45  cmp	al,*$45
37002 940A           75           17            jne 	.2C5
37003                       0000940C            .2CC:
37004                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37005 940C           8A86       FE00            mov	al,-$200[bp]
37006 9410           3C                     53  cmp	al,*$53
37007 9412           75           0F            jne 	.2C5
37008                       00009414            .2CB:
37009                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37010 9414           8A86       FE01            mov	al,-$1FF[bp]
37011 9418           3C                     41  cmp	al,*$41
37012 941A           75           07            jne 	.2C5
37013                       0000941C            .2C6:
37014                                           ! 7848         {
37015                                           ! 7849                 vbe2_info = 1;
37016                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$210-$20A] (used reg = )
37017 941C           B8                   0001  mov	ax,*1
37018 941F           8986       FDF8            mov	-$208[bp],ax
37019                                           !BCC_EOS
37020                                           ! 7850         }
37021                                           ! 7851         vbe_info_block.VbeSignature[0] = 'V';
37022                       00009423            .2C5:
37023                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
37024 9423           B0                     56  mov	al,*$56
37025 9425           8886       FDFE            mov	-$202[bp],al
37026                                           !BCC_EOS
37027                                           ! 7852         vbe_info_block.VbeSignature[1] = 'E';
37028                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37029 9429           B0                     45  mov	al,*$45
37030 942B           8886       FDFF            mov	-$201[bp],al
37031                                           !BCC_EOS
37032                                           ! 7853         vbe_info_block.VbeSignature[2] = 'S';
37033                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37034 942F           B0                     53  mov	al,*$53
37035 9431           8886       FE00            mov	-$200[bp],al
37036                                           !BCC_EOS
37037                                           ! 7854         vbe_info_block.VbeSignature[3] = 'A';
37038                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37039 9435           B0                     41  mov	al,*$41
37040 9437           8886       FE01            mov	-$1FF[bp],al
37041                                           !BCC_EOS
37042                                           ! 7855         vbe_info_block.VbeVersion = 0x0200;
37043                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$210-$200] (used reg = )
37044 943B           B8                   0200  mov	ax,#$200
37045 943E           8986       FE02            mov	-$1FE[bp],ax
37046                                           !BCC_EOS
37047                                           ! 7856         vbe_info_block.OemStringPtr_Seg = 0xc000;
37048                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1FC] (used reg = )
37049 9442           B8                   C000  mov	ax,#$C000
37050 9445           8986       FE06            mov	-$1FA[bp],ax
37051                                           !BCC_EOS
37052                                           ! 7857         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
37053                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$210-$1FE] (used reg = )
37054 9449           BB                   8DD6  mov	bx,#_vbebios_copyright
37055 944C           899E       FE04            mov	-$1FC[bp],bx
37056                                           !BCC_EOS
37057                                           ! 7858         vbe_info_block.Capabilities[0] = 0x0001;
37058                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$210-$1FA] (used reg = )
37059 9450           B0                     01  mov	al,*1
37060 9452           8886       FE08            mov	-$1F8[bp],al
37061                                           !BCC_EOS
37062                                           ! 7859         vbe_info_block.Capabilities[1] = 0;
37063                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F9] (used reg = )
37064 9456           30C0                       xor	al,al
37065 9458           8886       FE09            mov	-$1F7[bp],al
37066                                           !BCC_EOS
37067                                           ! 7860         vbe_info_block.Capabilities[2] = 0;
37068                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F8] (used reg = )
37069 945C           30C0                       xor	al,al
37070 945E           8886       FE0A            mov	-$1F6[bp],al
37071                                           !BCC_EOS
37072                                           ! 7861         vbe_info_block.Capabilities[3] = 0;
37073                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F7] (used reg = )
37074 9462           30C0                       xor	al,al
37075 9464           8886       FE0B            mov	-$1F5[bp],al
37076                                           !BCC_EOS
37077                                           ! 7862         vbe_info_block.VideoModePtr_Seg= ES ;
37078                                           ! Debug: eq unsigned short ES = [S+$210+4] to unsigned short vbe_info_block = [S+$210-$1F4] (used reg = )
37079 9468           8B46         06            mov	ax,6[bp]
37080 946B           8986       FE0E            mov	-$1F2[bp],ax
37081                                           !BCC_EOS
37082                                           ! 7863         vbe_info_block.VideoModePtr_Off= DI + 34;
37083                                           ! Debug: add int = const $22 to unsigned short DI = [S+$210+6] (used reg = )
37084 946F           8B46         08            mov	ax,8[bp]
37085                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$210-$1F6] (used reg = )
37086 9472           05                   0022  add	ax,*$22
37087 9475           8986       FE0C            mov	-$1F4[bp],ax
37088                                           !BCC_EOS
37089                                           ! 7864         outw(0x01CE, 0xa);
37090                                           ! Debug: list int = const $A (used reg = )
37091 9479           B8                   000A  mov	ax,*$A
37092 947C           50                         push	ax
37093                                           ! Debug: list int = const $1CE (used reg = )
37094 947D           B8                   01CE  mov	ax,#$1CE
37095 9480           50                         push	ax
37096                                           ! Debug: func () void = outw+0 (used reg = )
37097 9481           E8         E78A            call	_outw
37098 9484           83C4                   04  add	sp,*4
37099                                           !BCC_EOS
37100                                           ! 7865         vbe_info_block.TotalMemory = inw(0x01CF);
37101                                           ! Debug: list int = const $1CF (used reg = )
37102 9487           B8                   01CF  mov	ax,#$1CF
37103 948A           50                         push	ax
37104                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37105 948B           E8         E765            call	_inw
37106 948E           44                         inc	sp
37107 948F           44                         inc	sp
37108                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$210-$1F2] (used reg = )
37109 9490           8986       FE10            mov	-$1F0[bp],ax
37110                                           !BCC_EOS
37111                                           ! 7866         if (vbe2_info)
37112 9494           8B86       FDF8            mov	ax,-$208[bp]
37113 9498           85C0                       test	ax,ax
37114 949A           74           4B            je  	.2CE
37115                       0000949C            .2CF:
37116                                           ! 7867  {
37117                                           ! 7868                 vbe_info_block.OemSoftwareRev = 0x0002;;
37118                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$210-$1F0] (used reg = )
37119 949C           B8                   0002  mov	ax,*2
37120 949F           8986       FE12            mov	-$1EE[bp],ax
37121                                           !BCC_EOS
37122                                           !BCC_EOS
37123                                           ! 7869                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
37124                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1EC] (used reg = )
37125 94A3           B8                   C000  mov	ax,#$C000
37126 94A6           8986       FE16            mov	-$1EA[bp],ax
37127                                           !BCC_EOS
37128                                           ! 7870                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
37129                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$210-$1EE] (used reg = )
37130 94AA           BB                   8E1C  mov	bx,#_vbebios_vendor_name
37131 94AD           899E       FE14            mov	-$1EC[bp],bx
37132                                           !BCC_EOS
37133                                           ! 7871                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
37134                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1E8] (used reg = )
37135 94B1           B8                   C000  mov	ax,#$C000
37136 94B4           8986       FE1A            mov	-$1E6[bp],ax
37137                                           !BCC_EOS
37138                                           ! 7872                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
37139                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$210-$1EA] (used reg = )
37140 94B8           BB                   8E34  mov	bx,#_vbebios_product_name
37141 94BB           899E       FE18            mov	-$1E8[bp],bx
37142                                           !BCC_EOS
37143                                           ! 7873                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
37144                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1E4] (used reg = )
37145 94BF           B8                   C000  mov	ax,#$C000
37146 94C2           8986       FE1E            mov	-$1E2[bp],ax
37147                                           !BCC_EOS
37148                                           ! 7874                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
37149                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$210-$1E6] (used reg = )
37150 94C6           BB                   8E4D  mov	bx,#_vbebios_product_revision
37151 94C9           899E       FE1C            mov	-$1E4[bp],bx
37152                                           !BCC_EOS
37153                                           ! 7875                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
37154                                           ! Debug: list int = const $200 (used reg = )
37155 94CD           B8                   0200  mov	ax,#$200
37156 94D0           50                         push	ax
37157                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$212-$204 (used reg = )
37158 94D1           8D9E       FDFE            lea	bx,-$202[bp]
37159 94D5           53                         push	bx
37160                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37161 94D6           FF76         FE            push	-2[bp]
37162                                           ! Debug: list unsigned short DI = [S+$216+6] (used reg = )
37163 94D9           FF76         08            push	8[bp]
37164                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37165 94DC           FF76         06            push	6[bp]
37166                                           ! Debug: func () void = memcpyb+0 (used reg = )
37167 94DF           E8         E650            call	_memcpyb
37168 94E2           83C4                   0A  add	sp,*$A
37169                                           !BCC_EOS
37170                                           ! 7876         }
37171                                           ! 7877  else
37172                                           ! 7878  {
37173 94E5           EB           18            jmp .2D0
37174                       000094E7            .2CE:
37175                                           ! 7879                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
37176                                           ! 7879 
37177                                           ! Debug: list int = const $100 (used reg = )
37178 94E7           B8                   0100  mov	ax,#$100
37179 94EA           50                         push	ax
37180                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$212-$204 (used reg = )
37181 94EB           8D9E       FDFE            lea	bx,-$202[bp]
37182 94EF           53                         push	bx
37183                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37184 94F0           FF76         FE            push	-2[bp]
37185                                           ! Debug: list unsigned short DI = [S+$216+6] (used reg = )
37186 94F3           FF76         08            push	8[bp]
37187                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37188 94F6           FF76         06            push	6[bp]
37189                                           ! Debug: func () void = memcpyb+0 (used reg = )
37190 94F9           E8         E636            call	_memcpyb
37191 94FC           83C4                   0A  add	sp,*$A
37192                                           !BCC_EOS
37193                                           ! 7880  }
37194                                           ! 7881         do
37195                       000094FF            .2D0:
37196                                           ! 7882         {
37197                       000094FF            .2D3:
37198                                           ! 7883                 Bit16u size_64k = size64(cur_info->info.XResolution, cur_info->info.YResolution, cur_info->info.BitsPerPixel);
37199 94FF           4C                         dec	sp
37200 9500           4C                         dec	sp
37201 9501           8B9E       FDF2            mov	bx,-$20E[bp]
37202                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37203 9505           8A47         1B            mov	al,$1B[bx]
37204 9508           30E4                       xor	ah,ah
37205 950A           50                         push	ax
37206 950B           8B9E       FDF2            mov	bx,-$20E[bp]
37207                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
37208 950F           FF77         16            push	$16[bx]
37209 9512           8B9E       FDF2            mov	bx,-$20E[bp]
37210                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37211 9516           FF77         14            push	$14[bx]
37212                                           ! Debug: func () int = size64+0 (used reg = )
37213 9519           E8         FE50            call	_size64
37214 951C           83C4                   06  add	sp,*6
37215                                           ! Debug: eq int = ax+0 to unsigned short size_64k = [S+$212-$212] (used reg = )
37216 951F           8986       FDF0            mov	-$210[bp],ax
37217                                           !BCC_EOS
37218                                           ! 7884                 Bit16u max_bpp = dispi_get_max_bpp();
37219 9523           4C                         dec	sp
37220 9524           4C                         dec	sp
37221                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37222 9525           E8         FB91            call	_dispi_get_max_bpp
37223                                           ! Debug: eq int = ax+0 to unsigned short max_bpp = [S+$214-$214] (used reg = )
37224 9528           8986       FDEE            mov	-$212[bp],ax
37225                                           !BCC_EOS
37226                                           ! 7885                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
37227                                           ! 7886                     (cur_info->info.BitsPerPixel <= max_bpp) &&
37228                                           ! 7887                     (size_64k <= vbe_info_block.TotalMemory)) {
37229                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37230 952C           E8         FB68            call	_dispi_get_max_xres
37231 952F           8B9E       FDF2            mov	bx,-$20E[bp]
37232                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
37233 9533           3B47         14            cmp	ax,$14[bx]
37234 9536           72           45            jb  	.2D4
37235                       00009538            .2D7:
37236 9538           8B9E       FDF2            mov	bx,-$20E[bp]
37237                                           ! Debug: le unsigned short max_bpp = [S+$214-$214] to unsigned char = [bx+$1B] (used reg = )
37238 953C           8A47         1B            mov	al,$1B[bx]
37239 953F           30E4                       xor	ah,ah
37240 9541           3B86       FDEE            cmp	ax,-$212[bp]
37241 9545           77           36            ja  	.2D4
37242                       00009547            .2D6:
37243                                           ! Debug: le unsigned short vbe_info_block = [S+$214-$1F2] to unsigned short size_64k = [S+$214-$212] (used reg = )
37244 9547           8B86       FDF0            mov	ax,-$210[bp]
37245 954B           3B86       FE10            cmp	ax,-$1F0[bp]
37246 954F           77           2C            ja  	.2D4
37247                       00009551            .2D5:
37248                                           ! 7888                   write_word(ES, DI + cur_ptr, cur_info->mode);
37249 9551           8B9E       FDF2            mov	bx,-$20E[bp]
37250                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37251 9555           FF37                       push	[bx]
37252                                           ! Debug: add unsigned short cur_ptr = [S+$216-$20E] to unsigned short DI = [S+$216+6] (used reg = )
37253 9557           8B46         08            mov	ax,8[bp]
37254 955A           0386       FDF4            add	ax,-$20C[bp]
37255                                           ! Debug: list unsigned int = ax+0 (used reg = )
37256 955E           50                         push	ax
37257                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37258 955F           FF76         06            push	6[bp]
37259                                           ! Debug: func () void = write_word+0 (used reg = )
37260 9562           E8         E66B            call	_write_word
37261 9565           83C4                   06  add	sp,*6
37262                                           !BCC_EOS
37263                                           ! 7889                   cur_mode++;
37264                                           ! Debug: postinc unsigned short cur_mode = [S+$214-$20C] (used reg = )
37265 9568           8B86       FDF6            mov	ax,-$20A[bp]
37266 956C           40                         inc	ax
37267 956D           8986       FDF6            mov	-$20A[bp],ax
37268                                           !BCC_EOS
37269                                           ! 7890                   cur_ptr+=2;
37270                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$214-$20E] (used reg = )
37271 9571           8B86       FDF4            mov	ax,-$20C[bp]
37272 9575           40                         inc	ax
37273 9576           40                         inc	ax
37274 9577           8986       FDF4            mov	-$20C[bp],ax
37275                                           !BCC_EOS
37276                                           ! 7891                 } else {
37277 957B           EB           00            jmp .2D8
37278                       0000957D            .2D4:
37279                                           ! 7892                 }
37280                                           ! 7893                 cur_info++;
37281                       0000957D            .2D8:
37282                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$214-$210] (used reg = )
37283 957D           8B9E       FDF2            mov	bx,-$20E[bp]
37284 9581           83C3                   44  add	bx,*$44
37285 9584           899E       FDF2            mov	-$20E[bp],bx
37286                                           !BCC_EOS
37287                                           ! 7894         } while (cur_info->mode != 0xFFFF);
37288 9588           83C4                   04  add	sp,*4
37289                       0000958B            .2D2:
37290 958B           8B9E       FDF2            mov	bx,-$20E[bp]
37291                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37292 958F           8B1F                       mov	bx,[bx]
37293 9591           81FB                 FFFF  cmp	bx,#$FFFF
37294 9595         0F85         FF66            bne 	.2D3
37295                       00009599            .2D9:
37296                                           !BCC_EOS
37297                                           ! 7895         write_word(ES, DI + cur_ptr, cur_info->mode);
37298                       00009599            .2D1:
37299 9599           8B9E       FDF2            mov	bx,-$20E[bp]
37300                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37301 959D           FF37                       push	[bx]
37302                                           ! Debug: add unsigned short cur_ptr = [S+$212-$20E] to unsigned short DI = [S+$212+6] (used reg = )
37303 959F           8B46         08            mov	ax,8[bp]
37304 95A2           0386       FDF4            add	ax,-$20C[bp]
37305                                           ! Debug: list unsigned int = ax+0 (used reg = )
37306 95A6           50                         push	ax
37307                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
37308 95A7           FF76         06            push	6[bp]
37309                                           ! Debug: func () void = write_word+0 (used reg = )
37310 95AA           E8         E623            call	_write_word
37311 95AD           83C4                   06  add	sp,*6
37312                                           !BCC_EOS
37313                                           ! 7896         result = 0x4f;
37314                                           ! Debug: eq int = const $4F to unsigned short result = [S+$210-$208] (used reg = )
37315 95B0           B8                   004F  mov	ax,*$4F
37316 95B3           8986       FDFA            mov	-$206[bp],ax
37317                                           !BCC_EOS
37318                                           ! 7897         write_word(ss, AX, result);
37319                                           ! Debug: list unsigned short result = [S+$210-$208] (used reg = )
37320 95B7           FFB6       FDFA            push	-$206[bp]
37321                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
37322 95BB           FF76         04            push	4[bp]
37323                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37324 95BE           FF76         FE            push	-2[bp]
37325                                           ! Debug: func () void = write_word+0 (used reg = )
37326 95C1           E8         E60C            call	_write_word
37327 95C4           83C4                   06  add	sp,*6
37328                                           !BCC_EOS
37329                                           ! 7898 }
37330 95C7           89EC                       mov	sp,bp
37331 95C9           5D                         pop	bp
37332 95CA           C3                         ret
37333                                           ! 7899 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
37334                                           ! Register BX used in function vbe_biosfn_return_controller_information
37335                                           ! 7900 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
37336                                           export	_vbe_biosfn_return_mode_information
37337                       000095CB            _vbe_biosfn_return_mode_information:
37338                                           !BCC_EOS
37339                                           !BCC_EOS
37340                                           !BCC_EOS
37341                                           !BCC_EOS
37342                                           ! 7901 {
37343                                           ! 7902         Bit16u result=0x014f;
37344 95CB           55                         push	bp
37345 95CC           89E5                       mov	bp,sp
37346 95CE           4C                         dec	sp
37347 95CF           4C                         dec	sp
37348                                           ! Debug: eq int = const $14F to unsigned short result = [S+4-4] (used reg = )
37349 95D0           B8                   014F  mov	ax,#$14F
37350 95D3           8946         FE            mov	-2[bp],ax
37351                                           !BCC_EOS
37352                                           ! 7903         Bit16u ss=get_SS();
37353 95D6           4C                         dec	sp
37354 95D7           4C                         dec	sp
37355                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37356 95D8           E8         E643            call	_get_SS
37357                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
37358 95DB           8946         FC            mov	-4[bp],ax
37359                                           !BCC_EOS
37360                                           ! 7904         ModeInfoListItem *cur_info;
37361                                           !BCC_EOS
37362                                           ! 7905         Boolean using_lfb;
37363                                           !BCC_EOS
37364                                           ! 7906         ModeInfoBlockCompact info;
37365                                           !BCC_EOS
37366                                           ! 7907         using_lfb=((CX & 0x4000) == 0x4000);
37367 95DE           83C4                   BA  add	sp,*-$46
37368                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$4C+4] (used reg = )
37369 95E1           8B46         06            mov	ax,6[bp]
37370 95E4           25                   4000  and	ax,#$4000
37371                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37372 95E7           3D                   4000  cmp	ax,#$4000
37373 95EA           75           04            jne	.2DA
37374 95EC           B0                     01  mov	al,*1
37375 95EE           EB           02            jmp	.2DB
37376                       000095F0            .2DA:
37377 95F0           30C0                       xor	al,al
37378                       000095F2            .2DB:
37379                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$4C-$A] (used reg = )
37380 95F2           30E4                       xor	ah,ah
37381 95F4           8946         F8            mov	-8[bp],ax
37382                                           !BCC_EOS
37383                                           ! 7908         CX = (CX & 0x1ff);
37384                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$4C+4] (used reg = )
37385 95F7           8B46         06            mov	ax,6[bp]
37386 95FA           25                   01FF  and	ax,#$1FF
37387                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$4C+4] (used reg = )
37388 95FD           8946         06            mov	6[bp],ax
37389                                           !BCC_EOS
37390                                           ! 7909         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
37391                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$4C-8 (used reg = )
37392 9600           8D5E         FA            lea	bx,-6[bp]
37393 9603           53                         push	bx
37394                                           ! Debug: list unsigned short using_lfb = [S+$4E-$A] (used reg = )
37395 9604           FF76         F8            push	-8[bp]
37396                                           ! Debug: list unsigned short CX = [S+$50+4] (used reg = )
37397 9607           FF76         06            push	6[bp]
37398                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37399 960A           E8         FCA0            call	_mode_info_find_mode
37400 960D           83C4                   06  add	sp,*6
37401                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$4C-8] (used reg = )
37402 9610           8946         FA            mov	-6[bp],ax
37403                                           !BCC_EOS
37404                                           ! 7910         if (cur_info != 0)
37405                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$4C-8] (used reg = )
37406 9613           8B46         FA            mov	ax,-6[bp]
37407 9616           85C0                       test	ax,ax
37408 9618         0F84         00F9            beq 	.2DC
37409                       0000961C            .2DD:
37410                                           ! 7911         {
37411                                           ! 7912                 Bit16u max_bpp = dispi_get_max_bpp();
37412 961C           4C                         dec	sp
37413 961D           4C                         dec	sp
37414                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37415 961E           E8         FA98            call	_dispi_get_max_bpp
37416                                           ! Debug: eq int = ax+0 to unsigned short max_bpp = [S+$4E-$4E] (used reg = )
37417 9621           8946         B4            mov	-$4C[bp],ax
37418                                           !BCC_EOS
37419                                           ! 7913                 Bit16u size_64k;
37420                                           !BCC_EOS
37421                                           ! 7914                 Bit16u totalMemory;
37422                                           !BCC_EOS
37423                                           ! 7915                 outw(0x01CE, 0xa);
37424 9624           83C4                   FC  add	sp,*-4
37425                                           ! Debug: list int = const $A (used reg = )
37426 9627           B8                   000A  mov	ax,*$A
37427 962A           50                         push	ax
37428                                           ! Debug: list int = const $1CE (used reg = )
37429 962B           B8                   01CE  mov	ax,#$1CE
37430 962E           50                         push	ax
37431                                           ! Debug: func () void = outw+0 (used reg = )
37432 962F           E8         E5DC            call	_outw
37433 9632           83C4                   04  add	sp,*4
37434                                           !BCC_EOS
37435                                           ! 7916                 totalMemory = inw(0x01CF);
37436                                           ! Debug: list int = const $1CF (used reg = )
37437 9635           B8                   01CF  mov	ax,#$1CF
37438 9638           50                         push	ax
37439                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37440 9639           E8         E5B7            call	_inw
37441 963C           44                         inc	sp
37442 963D           44                         inc	sp
37443                                           ! Debug: eq unsigned short = ax+0 to unsigned short totalMemory = [S+$52-$52] (used reg = )
37444 963E           8946         B0            mov	-$50[bp],ax
37445                                           !BCC_EOS
37446                                           ! 7917                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
37447                                           ! Debug: list int = const $42 (used reg = )
37448 9641           B8                   0042  mov	ax,*$42
37449 9644           50                         push	ax
37450 9645           8B5E         FA            mov	bx,-6[bp]
37451                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
37452                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
37453 9648           43                         inc	bx
37454 9649           43                         inc	bx
37455 964A           53                         push	bx
37456                                           ! Debug: list unsigned int = const $C000 (used reg = )
37457 964B           B8                   C000  mov	ax,#$C000
37458 964E           50                         push	ax
37459                                           ! Debug: list * struct ModeInfoBlockCompact info = S+$58-$4C (used reg = )
37460 964F           8D5E         B6            lea	bx,-$4A[bp]
37461 9652           53                         push	bx
37462                                           ! Debug: list unsigned short ss = [S+$5A-6] (used reg = )
37463 9653           FF76         FC            push	-4[bp]
37464                                           ! Debug: func () void = memcpyb+0 (used reg = )
37465 9656           E8         E4D9            call	_memcpyb
37466 9659           83C4                   0A  add	sp,*$A
37467                                           !BCC_EOS
37468                                           ! 7918                 size_64k = size64(info.XResolution, info.YResolution, info.BitsPerPixel);
37469                                           ! Debug: list unsigned char info = [S+$52-$33] (used reg = )
37470 965C           8A46         CF            mov	al,-$31[bp]
37471 965F           30E4                       xor	ah,ah
37472 9661           50                         push	ax
37473                                           ! Debug: list unsigned short info = [S+$54-$38] (used reg = )
37474 9662           FF76         CA            push	-$36[bp]
37475                                           ! Debug: list unsigned short info = [S+$56-$3A] (used reg = )
37476 9665           FF76         C8            push	-$38[bp]
37477                                           ! Debug: func () int = size64+0 (used reg = )
37478 9668           E8         FD01            call	_size64
37479 966B           83C4                   06  add	sp,*6
37480                                           ! Debug: eq int = ax+0 to unsigned short size_64k = [S+$52-$50] (used reg = )
37481 966E           8946         B2            mov	-$4E[bp],ax
37482                                           !BCC_EOS
37483                                           ! 7919                 if ((info.XResolution > dispi_get_max_xres()) ||
37484                                           ! 7920                     (info.BitsPerPixel > max_bpp) ||
37485                                           ! 7921                     (size_64k > totalMemory))
37486                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37487 9671           E8         FA23            call	_dispi_get_max_xres
37488                                           ! Debug: gt int = ax+0 to unsigned short info = [S+$52-$3A] (used reg = )
37489 9674           3B46         C8            cmp	ax,-$38[bp]
37490 9677           72           12            jb  	.2DF
37491                       00009679            .2E1:
37492                                           ! Debug: gt unsigned short max_bpp = [S+$52-$4E] to unsigned char info = [S+$52-$33] (used reg = )
37493 9679           8A46         CF            mov	al,-$31[bp]
37494 967C           30E4                       xor	ah,ah
37495 967E           3B46         B4            cmp	ax,-$4C[bp]
37496 9681           77           08            ja  	.2DF
37497                       00009683            .2E0:
37498                                           ! Debug: gt unsigned short totalMemory = [S+$52-$52] to unsigned short size_64k = [S+$52-$50] (used reg = )
37499 9683           8B46         B2            mov	ax,-$4E[bp]
37500 9686           3B46         B0            cmp	ax,-$50[bp]
37501 9689           76           08            jbe 	.2DE
37502                       0000968B            .2DF:
37503                                           ! 7922                   info.ModeAttributes &= ~0x0001;
37504                                           ! Debug: andab int = const -2 to unsigned short info = [S+$52-$4C] (used reg = )
37505 968B           8B46         B6            mov	ax,-$4A[bp]
37506 968E           24                     FE  and	al,#$FE
37507 9690           8946         B6            mov	-$4A[bp],ax
37508                                           !BCC_EOS
37509                                           ! 7923                 info.NumberOfBanks = 1;
37510                       00009693            .2DE:
37511                                           ! Debug: eq int = const 1 to unsigned char info = [S+$52-$32] (used reg = )
37512 9693           B0                     01  mov	al,*1
37513 9695           8846         D0            mov	-$30[bp],al
37514                                           !BCC_EOS
37515                                           ! 7924                 if (info.WinAAttributes & 0x01) {
37516                                           ! Debug: and int = const 1 to unsigned char info = [S+$52-$4A] (used reg = )
37517 9698           8A46         B8            mov	al,-$48[bp]
37518 969B           24                     01  and	al,*1
37519 969D           84C0                       test	al,al
37520 969F           74           11            je  	.2E2
37521                       000096A1            .2E3:
37522                                           ! 7925                   info.WinFuncPtr = 0xC0000000UL;
37523                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$52-$40] (used reg = )
37524 96A1           31C0                       xor	ax,ax
37525 96A3           BB                   C000  mov	bx,#$C000
37526 96A6           8946         C2            mov	-$3E[bp],ax
37527 96A9           895E         C4            mov	-$3C[bp],bx
37528                                           !BCC_EOS
37529                                           ! 7926                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
37530                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
37531                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$52-$40] (used reg = )
37532 96AC           BB                   9117  mov	bx,#_dispi_set_bank_farcall
37533 96AF           895E         C2            mov	-$3E[bp],bx
37534                                           !BCC_EOS
37535                                           ! 7927                 }
37536                                           ! 7928             
37537                                           ! 7928     outw(0x01CE,0xb);
37538                       000096B2            .2E2:
37539                                           ! Debug: list int = const $B (used reg = )
37540 96B2           B8                   000B  mov	ax,*$B
37541 96B5           50                         push	ax
37542                                           ! Debug: list int = const $1CE (used reg = )
37543 96B6           B8                   01CE  mov	ax,#$1CE
37544 96B9           50                         push	ax
37545                                           ! Debug: func () void = outw+0 (used reg = )
37546 96BA           E8         E551            call	_outw
37547 96BD           83C4                   04  add	sp,*4
37548                                           !BCC_EOS
37549                                           ! 7929                 info.PhysBasePtr = inw(0x01CF);
37550                                           ! Debug: list int = const $1CF (used reg = )
37551 96C0           B8                   01CF  mov	ax,#$1CF
37552 96C3           50                         push	ax
37553                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37554 96C4           E8         E52C            call	_inw
37555 96C7           44                         inc	sp
37556 96C8           44                         inc	sp
37557                                           ! Debug: eq unsigned short = ax+0 to unsigned long info = [S+$52-$24] (used reg = )
37558 96C9           31DB                       xor	bx,bx
37559 96CB           8946         DE            mov	-$22[bp],ax
37560 96CE           895E         E0            mov	-$20[bp],bx
37561                                           !BCC_EOS
37562                                           ! 7930                 info.PhysBasePtr = info.PhysBasePtr << 16;
37563                                           ! Debug: sl int = const $10 to unsigned long info = [S+$52-$24] (used reg = )
37564 96D1           8B46         DE            mov	ax,-$22[bp]
37565 96D4           8B5E         E0            mov	bx,-$20[bp]
37566 96D7           93                         xchg	bx,ax
37567 96D8           31C0                       xor	ax,ax
37568                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$52-$24] (used reg = )
37569 96DA           8946         DE            mov	-$22[bp],ax
37570 96DD           895E         E0            mov	-$20[bp],bx
37571                                           !BCC_EOS
37572                                           ! 7931                 result = 0x4f;
37573                                           ! Debug: eq int = const $4F to unsigned short result = [S+$52-4] (used reg = )
37574 96E0           B8                   004F  mov	ax,*$4F
37575 96E3           8946         FE            mov	-2[bp],ax
37576                                           !BCC_EOS
37577                                           ! 7932                 memsetb(ES, DI, 0, sizeof(ModeInfoBlock));
37578                                           ! Debug: list int = const $100 (used reg = )
37579 96E6           B8                   0100  mov	ax,#$100
37580 96E9           50                         push	ax
37581                                           ! Debug: list int = const 0 (used reg = )
37582 96EA           31C0                       xor	ax,ax
37583 96EC           50                         push	ax
37584                                           ! Debug: list unsigned short DI = [S+$56+8] (used reg = )
37585 96ED           FF76         0A            push	$A[bp]
37586                                           ! Debug: list unsigned short ES = [S+$58+6] (used reg = )
37587 96F0           FF76         08            push	8[bp]
37588                                           ! Debug: func () void = memsetb+0 (used reg = )
37589 96F3           E8         E3F2            call	_memsetb
37590 96F6           83C4                   08  add	sp,*8
37591                                           !BCC_EOS
37592                                           ! 7933                 memcpyb(ES, DI, ss, &info, sizeof(info));
37593                                           ! Debug: list int = const $42 (used reg = )
37594 96F9           B8                   0042  mov	ax,*$42
37595 96FC           50                         push	ax
37596                                           ! Debug: list * struct ModeInfoBlockCompact info = S+$54-$4C (used reg = )
37597 96FD           8D5E         B6            lea	bx,-$4A[bp]
37598 9700           53                         push	bx
37599                                           ! Debug: list unsigned short ss = [S+$56-6] (used reg = )
37600 9701           FF76         FC            push	-4[bp]
37601                                           ! Debug: list unsigned short DI = [S+$58+8] (used reg = )
37602 9704           FF76         0A            push	$A[bp]
37603                                           ! Debug: list unsigned short ES = [S+$5A+6] (used reg = )
37604 9707           FF76         08            push	8[bp]
37605                                           ! Debug: func () void = memcpyb+0 (used reg = )
37606 970A           E8         E425            call	_memcpyb
37607 970D           83C4                   0A  add	sp,*$A
37608                                           !BCC_EOS
37609                                           ! 7934         }
37610 9710           83C4                   06  add	sp,*6
37611                                           ! 7935         else
37612                                           ! 7936         {
37613 9713           EB           00            jmp .2E4
37614                       00009715            .2DC:
37615                                           ! 7937         }
37616                                           ! 7938         write_word(ss, AX, result);
37617                       00009715            .2E4:
37618                                           ! Debug: list unsigned short result = [S+$4C-4] (used reg = )
37619 9715           FF76         FE            push	-2[bp]
37620                                           ! Debug: list * unsigned short AX = [S+$4E+2] (used reg = )
37621 9718           FF76         04            push	4[bp]
37622                                           ! Debug: list unsigned short ss = [S+$50-6] (used reg = )
37623 971B           FF76         FC            push	-4[bp]
37624                                           ! Debug: func () void = write_word+0 (used reg = )
37625 971E           E8         E4AF            call	_write_word
37626 9721           83C4                   06  add	sp,*6
37627                                           !BCC_EOS
37628                                           ! 7939 }
37629 9724           89EC                       mov	sp,bp
37630 9726           5D                         pop	bp
37631 9727           C3                         ret
37632                                           ! 7940 void vbe_biosfn_set_mode(AX, BX, ES, DI)
37633                                           ! Register BX used in function vbe_biosfn_return_mode_information
37634                                           ! 7941 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
37635                                           export	_vbe_biosfn_set_mode
37636                       00009728            _vbe_biosfn_set_mode:
37637                                           !BCC_EOS
37638                                           !BCC_EOS
37639                                           !BCC_EOS
37640                                           !BCC_EOS
37641                                           ! 7942 {
37642                                           ! 7943         Bit16u ss = get_SS();
37643 9728           55                         push	bp
37644 9729           89E5                       mov	bp,sp
37645 972B           4C                         dec	sp
37646 972C           4C                         dec	sp
37647                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37648 972D           E8         E4EE            call	_get_SS
37649                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
37650 9730           8946         FE            mov	-2[bp],ax
37651                                           !BCC_EOS
37652                                           ! 7944         Bit16u result;
37653                                           !BCC_EOS
37654                                           ! 7945         ModeInfoListItem *cur_info;
37655                                           !BCC_EOS
37656                                           ! 7946         Boolean using_lfb;
37657                                           !BCC_EOS
37658                                           ! 7947         Bit8u no_clear;
37659                                           !BCC_EOS
37660                                           ! 7948         Bit8u lfb_flag;
37661                                           !BCC_EOS
37662                                           ! 7949         using_lfb=((BX & 0x4000) == 0x4000);
37663 9733           83C4                   F8  add	sp,*-8
37664                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
37665 9736           8B46         06            mov	ax,6[bp]
37666 9739           25                   4000  and	ax,#$4000
37667                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37668 973C           3D                   4000  cmp	ax,#$4000
37669 973F           75           04            jne	.2E5
37670 9741           B0                     01  mov	al,*1
37671 9743           EB           02            jmp	.2E6
37672                       00009745            .2E5:
37673 9745           30C0                       xor	al,al
37674                       00009747            .2E6:
37675                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
37676 9747           30E4                       xor	ah,ah
37677 9749           8946         F8            mov	-8[bp],ax
37678                                           !BCC_EOS
37679                                           ! 7950         lfb_flag=using_lfb?0x40:0;
37680 974C           8B46         F8            mov	ax,-8[bp]
37681 974F           85C0                       test	ax,ax
37682 9751           74           04            je  	.2E7
37683                       00009753            .2E8:
37684 9753           B0                     40  mov	al,*$40
37685 9755           EB           02            jmp .2E9
37686                       00009757            .2E7:
37687 9757           30C0                       xor	al,al
37688                       00009759            .2E9:
37689                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
37690 9759           8846         F6            mov	-$A[bp],al
37691                                           !BCC_EOS
37692                                           ! 7951         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
37693                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
37694 975C           8B46         06            mov	ax,6[bp]
37695 975F           25                   8000  and	ax,#$8000
37696                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
37697 9762           3D                   8000  cmp	ax,#$8000
37698 9765           75           04            jne 	.2EA
37699                       00009767            .2EB:
37700 9767           B0                     80  mov	al,#$80
37701 9769           EB           02            jmp .2EC
37702                       0000976B            .2EA:
37703 976B           30C0                       xor	al,al
37704                       0000976D            .2EC:
37705                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
37706 976D           8846         F7            mov	-9[bp],al
37707                                           !BCC_EOS
37708                                           ! 7952         BX = (BX & 0x1ff);
37709                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
37710 9770           8B46         06            mov	ax,6[bp]
37711 9773           25                   01FF  and	ax,#$1FF
37712                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
37713 9776           8946         06            mov	6[bp],ax
37714                                           !BCC_EOS
37715                                           ! 7953         if (BX<0x0100)
37716                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
37717 9779           8B46         06            mov	ax,6[bp]
37718 977C           3D                   0100  cmp	ax,#$100
37719 977F           73           23            jae 	.2ED
37720                       00009781            .2EE:
37721                                           ! 7954         {
37722                                           ! 7955                 Bit8u mode;
37723                                           !BCC_EOS
37724                                           ! 7956                 dispi_set_enable(0x00);
37725 9781           4C                         dec	sp
37726 9782           4C                         dec	sp
37727                                           ! Debug: list int = const 0 (used reg = )
37728 9783           31C0                       xor	ax,ax
37729 9785           50                         push	ax
37730                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37731 9786           E8         F952            call	_dispi_set_enable
37732 9789           44                         inc	sp
37733 978A           44                         inc	sp
37734                                           !BCC_EOS
37735                                           ! 7957                 mode=(BX & 0xff);
37736                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
37737 978B           8A46         06            mov	al,6[bp]
37738                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
37739 978E           8846         F5            mov	-$B[bp],al
37740                                           !BCC_EOS
37741                                           ! 7958                 biosfn_set_video_mode(mode);
37742                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
37743 9791           8A46         F5            mov	al,-$B[bp]
37744 9794           30E4                       xor	ah,ah
37745 9796           50                         push	ax
37746                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
37747 9797           E8         A3FF            call	_biosfn_set_video_mode
37748 979A           44                         inc	sp
37749 979B           44                         inc	sp
37750                                           !BCC_EOS
37751                                           ! 7959                 result = 0x4f;
37752                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
37753 979C           B8                   004F  mov	ax,*$4F
37754 979F           8946         FC            mov	-4[bp],ax
37755                                           !BCC_EOS
37756                                           ! 7960         }
37757 97A2           44                         inc	sp
37758 97A3           44                         inc	sp
37759                                           ! 7961         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
37760                       000097A4            .2ED:
37761                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
37762 97A4           8D5E         FA            lea	bx,-6[bp]
37763 97A7           53                         push	bx
37764                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
37765 97A8           FF76         F8            push	-8[bp]
37766                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
37767 97AB           FF76         06            push	6[bp]
37768                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37769 97AE           E8         FAFC            call	_mode_info_find_mode
37770 97B1           83C4                   06  add	sp,*6
37771                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
37772 97B4           8946         FA            mov	-6[bp],ax
37773                                           !BCC_EOS
37774                                           ! 7962         if (cur_info != 0)
37775                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
37776 97B7           8B46         FA            mov	ax,-6[bp]
37777 97BA           85C0                       test	ax,ax
37778 97BC         0F84         0089            beq 	.2EF
37779                       000097C0            .2F0:
37780                                           ! 7963         {
37781                                           ! 7964                 dispi_set_enable(0x00);
37782                                           ! Debug: list int = const 0 (used reg = )
37783 97C0           31C0                       xor	ax,ax
37784 97C2           50                         push	ax
37785                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37786 97C3           E8         F915            call	_dispi_set_enable
37787 97C6           44                         inc	sp
37788 97C7           44                         inc	sp
37789                                           !BCC_EOS
37790                                           ! 7965                 if (cur_info->info.BitsPerPixel == 4)
37791 97C8           8B5E         FA            mov	bx,-6[bp]
37792                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
37793 97CB           8A47         1B            mov	al,$1B[bx]
37794 97CE           3C                     04  cmp	al,*4
37795 97D0           75           09            jne 	.2F1
37796                       000097D2            .2F2:
37797                                           ! 7966                 {
37798                                           ! 7967                   biosfn_set_video_mode(0x6a);
37799                                           ! Debug: list int = const $6A (used reg = )
37800 97D2           B8                   006A  mov	ax,*$6A
37801 97D5           50                         push	ax
37802                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
37803 97D6           E8         A3C0            call	_biosfn_set_video_mode
37804 97D9           44                         inc	sp
37805 97DA           44                         inc	sp
37806                                           !BCC_EOS
37807                                           ! 7968                 }
37808                                           ! 7969                 dispi_set_bpp(cur_info->info.BitsPerPixel);
37809                       000097DB            .2F1:
37810 97DB           8B5E         FA            mov	bx,-6[bp]
37811                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37812 97DE           8A47         1B            mov	al,$1B[bx]
37813 97E1           30E4                       xor	ah,ah
37814 97E3           50                         push	ax
37815                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
37816 97E4           E8         F879            call	_dispi_set_bpp
37817 97E7           44                         inc	sp
37818 97E8           44                         inc	sp
37819                                           !BCC_EOS
37820                                           ! 7970                 dispi_set_xres(cur_info->info.XResolution);
37821 97E9           8B5E         FA            mov	bx,-6[bp]
37822                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37823 97EC           FF77         14            push	$14[bx]
37824                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
37825 97EF           E8         F839            call	_dispi_set_xres
37826 97F2           44                         inc	sp
37827 97F3           44                         inc	sp
37828                                           !BCC_EOS
37829                                           ! 7971                 dispi_set_yres(cur_info->info.YResolution);
37830 97F4           8B5E         FA            mov	bx,-6[bp]
37831                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
37832 97F7           FF77         16            push	$16[bx]
37833                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
37834 97FA           E8         F845            call	_dispi_set_yres
37835 97FD           44                         inc	sp
37836 97FE           44                         inc	sp
37837                                           !BCC_EOS
37838                                           ! 7972                 dispi_set_bank(0);
37839                                           ! Debug: list int = const 0 (used reg = )
37840 97FF           31C0                       xor	ax,ax
37841 9801           50                         push	ax
37842                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
37843 9802           E8         F8F4            call	_dispi_set_bank
37844 9805           44                         inc	sp
37845 9806           44                         inc	sp
37846                                           !BCC_EOS
37847                                           ! 7973                 dispi_set_enable(0x01 | no_clear | lfb_flag);
37848                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
37849                                           ! Debug: expression subtree swapping
37850 9807           8A46         F7            mov	al,-9[bp]
37851 980A           0C                     01  or	al,*1
37852                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
37853 980C           0A46         F6            or	al,-$A[bp]
37854                                           ! Debug: list unsigned char = al+0 (used reg = )
37855 980F           30E4                       xor	ah,ah
37856 9811           50                         push	ax
37857                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37858 9812           E8         F8C6            call	_dispi_set_enable
37859 9815           44                         inc	sp
37860 9816           44                         inc	sp
37861                                           !BCC_EOS
37862                                           ! 7974                 vga_compat_setup();
37863                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
37864 9817           E8         F9BC            call	_vga_compat_setup
37865                                           !BCC_EOS
37866                                           ! 7975                 write_word(0x40,0xBA,BX);
37867                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
37868 981A           FF76         06            push	6[bp]
37869                                           ! Debug: list int = const $BA (used reg = )
37870 981D           B8                   00BA  mov	ax,#$BA
37871 9820           50                         push	ax
37872                                           ! Debug: list int = const $40 (used reg = )
37873 9821           B8                   0040  mov	ax,*$40
37874 9824           50                         push	ax
37875                                           ! Debug: func () void = write_word+0 (used reg = )
37876 9825           E8         E3A8            call	_write_word
37877 9828           83C4                   06  add	sp,*6
37878                                           !BCC_EOS
37879                                           ! 7976                 write_byte(0x40,0x87,(0x60 | no_clear));
37880                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
37881                                           ! Debug: expression subtree swapping
37882 982B           8A46         F7            mov	al,-9[bp]
37883 982E           0C                     60  or	al,*$60
37884                                           ! Debug: list unsigned char = al+0 (used reg = )
37885 9830           30E4                       xor	ah,ah
37886 9832           50                         push	ax
37887                                           ! Debug: list int = const $87 (used reg = )
37888 9833           B8                   0087  mov	ax,#$87
37889 9836           50                         push	ax
37890                                           ! Debug: list int = const $40 (used reg = )
37891 9837           B8                   0040  mov	ax,*$40
37892 983A           50                         push	ax
37893                                           ! Debug: func () void = write_byte+0 (used reg = )
37894 983B           E8         E37A            call	_write_byte
37895 983E           83C4                   06  add	sp,*6
37896                                           !BCC_EOS
37897                                           ! 7977                 result = 0x4f;
37898                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
37899 9841           B8                   004F  mov	ax,*$4F
37900 9844           8946         FC            mov	-4[bp],ax
37901                                           !BCC_EOS
37902                                           ! 7978         }
37903                                           ! 7979         else
37904                                           ! 7980         {
37905 9847           EB           14            jmp .2F3
37906                       00009849            .2EF:
37907                                           ! 7981                 result = 0x100;
37908                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
37909 9849           B8                   0100  mov	ax,#$100
37910 984C           8946         FC            mov	-4[bp],ax
37911                                           !BCC_EOS
37912                                           ! 7982                 if (BX == 3)
37913                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
37914 984F           8B46         06            mov	ax,6[bp]
37915 9852           3D                   0003  cmp	ax,*3
37916 9855           75           06            jne 	.2F4
37917                       00009857            .2F5:
37918                                           ! 7983                         result = 0x4f;
37919                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
37920 9857           B8                   004F  mov	ax,*$4F
37921 985A           8946         FC            mov	-4[bp],ax
37922                                           !BCC_EOS
37923                                           ! 7984         }
37924                       0000985D            .2F4:
37925                                           ! 7985         write_word(ss, AX, result);
37926                       0000985D            .2F3:
37927                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
37928 985D           FF76         FC            push	-4[bp]
37929                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
37930 9860           FF76         04            push	4[bp]
37931                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
37932 9863           FF76         FE            push	-2[bp]
37933                                           ! Debug: func () void = write_word+0 (used reg = )
37934 9866           E8         E367            call	_write_word
37935 9869           83C4                   06  add	sp,*6
37936                                           !BCC_EOS
37937                                           ! 7986 }
37938 986C           89EC                       mov	sp,bp
37939 986E           5D                         pop	bp
37940 986F           C3                         ret
37941                                           ! 7987 #asm
37942                                           !BCC_ASM
37943                       00000008            _vbe_biosfn_set_mode.DI	set	8
37944                       00000006            _vbe_biosfn_set_mode.ES	set	6
37945                       00000002            _vbe_biosfn_set_mode.AX	set	2
37946                       00000004            _vbe_biosfn_set_mode.BX	set	4
37947                       00009870            vbe_biosfn_return_current_mode:
37948 9870           1E                           push ds
37949 9871           B8                   0040    mov ax, # 0x40
37950 9874           8ED8                         mov ds, ax
37951 9876           E8         F872              call dispi_get_enable
37952 9879           25                   0001    and ax, # 0x01
37953 987C           74           09              jz no_vbe_mode
37954 987E           BB                   00BA    mov bx, # 0xBA
37955 9881           8B07                         mov ax, [bx]
37956 9883           89C3                         mov bx, ax
37957 9885           75           09              jnz vbe_03_ok
37958                       00009887            no_vbe_mode:
37959 9887           BB                   0049    mov bx, # 0x49
37960 988A           8A07                         mov al, [bx]
37961 988C           88C3                         mov bl, al
37962 988E           30FF                         xor bh, bh
37963                       00009890            vbe_03_ok:
37964 9890           B8                   004F    mov ax, #0x004f
37965 9893           1F                           pop ds
37966 9894           C3                           ret
37967                                           ! 8008 endasm
37968                                           !BCC_ENDASM
37969                                           ! 8009 Bit16u vbe_biosfn_read_video_state_size()
37970                                           ! Register BX used in function vbe_biosfn_set_mode
37971                                           ! 8010 {
37972                                           export	_vbe_biosfn_read_video_state_size
37973                       00009895            _vbe_biosfn_read_video_state_size:
37974                                           ! 8011     return 9 * 2;
37975 9895           55                         push	bp
37976 9896           89E5                       mov	bp,sp
37977 9898           B8                   0012  mov	ax,*$12
37978 989B           5D                         pop	bp
37979 989C           C3                         ret
37980                                           !BCC_EOS
37981                                           ! 8012 }
37982                                           ! 8013 void vbe_biosfn_save_video_state(ES, BX)
37983                                           ! 8014      Bit16u ES; Bit16u BX;
37984                                           export	_vbe_biosfn_save_video_state
37985                       0000989D            _vbe_biosfn_save_video_state:
37986                                           !BCC_EOS
37987                                           !BCC_EOS
37988                                           ! 8015 {
37989                                           ! 8016     Bit16u enable, i;
37990                                           !BCC_EOS
37991                                           ! 8017     outw(0x01CE,0x4);
37992 989D           55                         push	bp
37993 989E           89E5                       mov	bp,sp
37994 98A0           83C4                   FC  add	sp,*-4
37995                                           ! Debug: list int = const 4 (used reg = )
37996 98A3           B8                   0004  mov	ax,*4
37997 98A6           50                         push	ax
37998                                           ! Debug: list int = const $1CE (used reg = )
37999 98A7           B8                   01CE  mov	ax,#$1CE
38000 98AA           50                         push	ax
38001                                           ! Debug: func () void = outw+0 (used reg = )
38002 98AB           E8         E360            call	_outw
38003 98AE           83C4                   04  add	sp,*4
38004                                           !BCC_EOS
38005                                           ! 8018     enable = inw(0x01CF);
38006                                           ! Debug: list int = const $1CF (used reg = )
38007 98B1           B8                   01CF  mov	ax,#$1CF
38008 98B4           50                         push	ax
38009                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38010 98B5           E8         E33B            call	_inw
38011 98B8           44                         inc	sp
38012 98B9           44                         inc	sp
38013                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38014 98BA           8946         FE            mov	-2[bp],ax
38015                                           !BCC_EOS
38016                                           ! 8019     write_word(ES, BX, enable);
38017                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38018 98BD           FF76         FE            push	-2[bp]
38019                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38020 98C0           FF76         06            push	6[bp]
38021                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38022 98C3           FF76         04            push	4[bp]
38023                                           ! Debug: func () void = write_word+0 (used reg = )
38024 98C6           E8         E307            call	_write_word
38025 98C9           83C4                   06  add	sp,*6
38026                                           !BCC_EOS
38027                                           ! 8020     BX += 2;
38028                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38029 98CC           8B46         06            mov	ax,6[bp]
38030 98CF           40                         inc	ax
38031 98D0           40                         inc	ax
38032 98D1           8946         06            mov	6[bp],ax
38033                                           !BCC_EOS
38034                                           ! 8021     if (!(enable & 0x01))
38035                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38036 98D4           8A46         FE            mov	al,-2[bp]
38037 98D7           24                     01  and	al,*1
38038 98D9           84C0                       test	al,al
38039 98DB           75           04            jne 	.2F6
38040                       000098DD            .2F7:
38041                                           ! 8022         return;
38042 98DD           89EC                       mov	sp,bp
38043 98DF           5D                         pop	bp
38044 98E0           C3                         ret
38045                                           !BCC_EOS
38046                                           ! 8023     for(i = 0x1; i <= 0x9; i++) {
38047                       000098E1            .2F6:
38048                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
38049 98E1           B8                   0001  mov	ax,*1
38050 98E4           8946         FC            mov	-4[bp],ax
38051                                           !BCC_EOS
38052                                           !BCC_EOS
38053 98E7           EB           3A            jmp .2FA
38054                       000098E9            .2FB:
38055                                           ! 8024         if (i != 0x4) {
38056                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
38057 98E9           8B46         FC            mov	ax,-4[bp]
38058 98EC           3D                   0004  cmp	ax,*4
38059 98EF           74           2B            je  	.2FC
38060                       000098F1            .2FD:
38061                                           ! 8025             outw(0x01CE, i);
38062                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38063 98F1           FF76         FC            push	-4[bp]
38064                                           ! Debug: list int = const $1CE (used reg = )
38065 98F4           B8                   01CE  mov	ax,#$1CE
38066 98F7           50                         push	ax
38067                                           ! Debug: func () void = outw+0 (used reg = )
38068 98F8           E8         E313            call	_outw
38069 98FB           83C4                   04  add	sp,*4
38070                                           !BCC_EOS
38071                                           ! 8026             write_word(ES, BX, inw(0x01CF));
38072                                           ! Debug: list int = const $1CF (used reg = )
38073 98FE           B8                   01CF  mov	ax,#$1CF
38074 9901           50                         push	ax
38075                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38076 9902           E8         E2EE            call	_inw
38077 9905           44                         inc	sp
38078 9906           44                         inc	sp
38079                                           ! Debug: list unsigned short = ax+0 (used reg = )
38080 9907           50                         push	ax
38081                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38082 9908           FF76         06            push	6[bp]
38083                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38084 990B           FF76         04            push	4[bp]
38085                                           ! Debug: func () void = write_word+0 (used reg = )
38086 990E           E8         E2BF            call	_write_word
38087 9911           83C4                   06  add	sp,*6
38088                                           !BCC_EOS
38089                                           ! 8027             BX += 2;
38090                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38091 9914           8B46         06            mov	ax,6[bp]
38092 9917           40                         inc	ax
38093 9918           40                         inc	ax
38094 9919           8946         06            mov	6[bp],ax
38095                                           !BCC_EOS
38096                                           ! 8028         }
38097                                           ! 8029     }
38098                       0000991C            .2FC:
38099                                           ! 8030 }
38100                       0000991C            .2F9:
38101                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38102 991C           8B46         FC            mov	ax,-4[bp]
38103 991F           40                         inc	ax
38104 9920           8946         FC            mov	-4[bp],ax
38105                       00009923            .2FA:
38106                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38107 9923           8B46         FC            mov	ax,-4[bp]
38108 9926           3D                   0009  cmp	ax,*9
38109 9929           76           BE            jbe	.2FB
38110                       0000992B            .2FE:
38111                       0000992B            .2F8:
38112 992B           89EC                       mov	sp,bp
38113 992D           5D                         pop	bp
38114 992E           C3                         ret
38115                                           ! 8031 void vbe_biosfn_restore_video_state(ES, BX)
38116                                           ! 8032      Bit16u ES; Bit16u BX;
38117                                           export	_vbe_biosfn_restore_video_state
38118                       0000992F            _vbe_biosfn_restore_video_state:
38119                                           !BCC_EOS
38120                                           !BCC_EOS
38121                                           ! 8033 {
38122                                           ! 8034     Bit16u enable, i;
38123                                           !BCC_EOS
38124                                           ! 8035     enable = read_word(ES, BX);
38125 992F           55                         push	bp
38126 9930           89E5                       mov	bp,sp
38127 9932           83C4                   FC  add	sp,*-4
38128                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38129 9935           FF76         06            push	6[bp]
38130                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38131 9938           FF76         04            push	4[bp]
38132                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38133 993B           E8         E267            call	_read_word
38134 993E           83C4                   04  add	sp,*4
38135                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38136 9941           8946         FE            mov	-2[bp],ax
38137                                           !BCC_EOS
38138                                           ! 8036     BX += 2;
38139                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38140 9944           8B46         06            mov	ax,6[bp]
38141 9947           40                         inc	ax
38142 9948           40                         inc	ax
38143 9949           8946         06            mov	6[bp],ax
38144                                           !BCC_EOS
38145                                           ! 8037     if (!(enable & 0x01)) {
38146                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38147 994C           8A46         FE            mov	al,-2[bp]
38148 994F           24                     01  and	al,*1
38149 9951           84C0                       test	al,al
38150 9953           75           1E            jne 	.2FF
38151                       00009955            .300:
38152                                           ! 8038         outw(0x01CE,0x4);
38153                                           ! Debug: list int = const 4 (used reg = )
38154 9955           B8                   0004  mov	ax,*4
38155 9958           50                         push	ax
38156                                           ! Debug: list int = const $1CE (used reg = )
38157 9959           B8                   01CE  mov	ax,#$1CE
38158 995C           50                         push	ax
38159                                           ! Debug: func () void = outw+0 (used reg = )
38160 995D           E8         E2AE            call	_outw
38161 9960           83C4                   04  add	sp,*4
38162                                           !BCC_EOS
38163                                           ! 8039         outw(0x01CF, enable);
38164                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38165 9963           FF76         FE            push	-2[bp]
38166                                           ! Debug: list int = const $1CF (used reg = )
38167 9966           B8                   01CF  mov	ax,#$1CF
38168 9969           50                         push	ax
38169                                           ! Debug: func () void = outw+0 (used reg = )
38170 996A           E8         E2A1            call	_outw
38171 996D           83C4                   04  add	sp,*4
38172                                           !BCC_EOS
38173                                           ! 8040     } else {
38174 9970           E9         00E5            br 	.301
38175                       00009973            .2FF:
38176                                           ! 8041         outw(0x01CE, 0x1);
38177                                           ! Debug: list int = const 1 (used reg = )
38178 9973           B8                   0001  mov	ax,*1
38179 9976           50                         push	ax
38180                                           ! Debug: list int = const $1CE (used reg = )
38181 9977           B8                   01CE  mov	ax,#$1CE
38182 997A           50                         push	ax
38183                                           ! Debug: func () void = outw+0 (used reg = )
38184 997B           E8         E290            call	_outw
38185 997E           83C4                   04  add	sp,*4
38186                                           !BCC_EOS
38187                                           ! 8042         outw(0x01CF, read_word(ES, BX));
38188                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38189 9981           FF76         06            push	6[bp]
38190                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38191 9984           FF76         04            push	4[bp]
38192                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38193 9987           E8         E21B            call	_read_word
38194 998A           83C4                   04  add	sp,*4
38195                                           ! Debug: list unsigned short = ax+0 (used reg = )
38196 998D           50                         push	ax
38197                                           ! Debug: list int = const $1CF (used reg = )
38198 998E           B8                   01CF  mov	ax,#$1CF
38199 9991           50                         push	ax
38200                                           ! Debug: func () void = outw+0 (used reg = )
38201 9992           E8         E279            call	_outw
38202 9995           83C4                   04  add	sp,*4
38203                                           !BCC_EOS
38204                                           ! 8043         BX += 2;
38205                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38206 9998           8B46         06            mov	ax,6[bp]
38207 999B           40                         inc	ax
38208 999C           40                         inc	ax
38209 999D           8946         06            mov	6[bp],ax
38210                                           !BCC_EOS
38211                                           ! 8044         outw(0x01CE, 0x2);
38212                                           ! Debug: list int = const 2 (used reg = )
38213 99A0           B8                   0002  mov	ax,*2
38214 99A3           50                         push	ax
38215                                           ! Debug: list int = const $1CE (used reg = )
38216 99A4           B8                   01CE  mov	ax,#$1CE
38217 99A7           50                         push	ax
38218                                           ! Debug: func () void = outw+0 (used reg = )
38219 99A8           E8         E263            call	_outw
38220 99AB           83C4                   04  add	sp,*4
38221                                           !BCC_EOS
38222                                           ! 8045         outw(0x01CF, read_word(ES, BX));
38223                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38224 99AE           FF76         06            push	6[bp]
38225                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38226 99B1           FF76         04            push	4[bp]
38227                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38228 99B4           E8         E1EE            call	_read_word
38229 99B7           83C4                   04  add	sp,*4
38230                                           ! Debug: list unsigned short = ax+0 (used reg = )
38231 99BA           50                         push	ax
38232                                           ! Debug: list int = const $1CF (used reg = )
38233 99BB           B8                   01CF  mov	ax,#$1CF
38234 99BE           50                         push	ax
38235                                           ! Debug: func () void = outw+0 (used reg = )
38236 99BF           E8         E24C            call	_outw
38237 99C2           83C4                   04  add	sp,*4
38238                                           !BCC_EOS
38239                                           ! 8046         BX += 2;
38240                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38241 99C5           8B46         06            mov	ax,6[bp]
38242 99C8           40                         inc	ax
38243 99C9           40                         inc	ax
38244 99CA           8946         06            mov	6[bp],ax
38245                                           !BCC_EOS
38246                                           ! 8047         outw(0x01CE, 0x3);
38247                                           ! Debug: list int = const 3 (used reg = )
38248 99CD           B8                   0003  mov	ax,*3
38249 99D0           50                         push	ax
38250                                           ! Debug: list int = const $1CE (used reg = )
38251 99D1           B8                   01CE  mov	ax,#$1CE
38252 99D4           50                         push	ax
38253                                           ! Debug: func () void = outw+0 (used reg = )
38254 99D5           E8         E236            call	_outw
38255 99D8           83C4                   04  add	sp,*4
38256                                           !BCC_EOS
38257                                           ! 8048         outw(0x01CF, read_word(ES, BX));
38258                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38259 99DB           FF76         06            push	6[bp]
38260                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38261 99DE           FF76         04            push	4[bp]
38262                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38263 99E1           E8         E1C1            call	_read_word
38264 99E4           83C4                   04  add	sp,*4
38265                                           ! Debug: list unsigned short = ax+0 (used reg = )
38266 99E7           50                         push	ax
38267                                           ! Debug: list int = const $1CF (used reg = )
38268 99E8           B8                   01CF  mov	ax,#$1CF
38269 99EB           50                         push	ax
38270                                           ! Debug: func () void = outw+0 (used reg = )
38271 99EC           E8         E21F            call	_outw
38272 99EF           83C4                   04  add	sp,*4
38273                                           !BCC_EOS
38274                                           ! 8049         BX += 2;
38275                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38276 99F2           8B46         06            mov	ax,6[bp]
38277 99F5           40                         inc	ax
38278 99F6           40                         inc	ax
38279 99F7           8946         06            mov	6[bp],ax
38280                                           !BCC_EOS
38281                                           ! 8050         outw(0x01CE,0x4);
38282                                           ! Debug: list int = const 4 (used reg = )
38283 99FA           B8                   0004  mov	ax,*4
38284 99FD           50                         push	ax
38285                                           ! Debug: list int = const $1CE (used reg = )
38286 99FE           B8                   01CE  mov	ax,#$1CE
38287 9A01           50                         push	ax
38288                                           ! Debug: func () void = outw+0 (used reg = )
38289 9A02           E8         E209            call	_outw
38290 9A05           83C4                   04  add	sp,*4
38291                                           !BCC_EOS
38292                                           ! 8051         outw(0x01CF, enable);
38293                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38294 9A08           FF76         FE            push	-2[bp]
38295                                           ! Debug: list int = const $1CF (used reg = )
38296 9A0B           B8                   01CF  mov	ax,#$1CF
38297 9A0E           50                         push	ax
38298                                           ! Debug: func () void = outw+0 (used reg = )
38299 9A0F           E8         E1FC            call	_outw
38300 9A12           83C4                   04  add	sp,*4
38301                                           !BCC_EOS
38302                                           ! 8052         for(i = 0x5; i <= 0x9; i++) {
38303                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
38304 9A15           B8                   0005  mov	ax,*5
38305 9A18           8946         FC            mov	-4[bp],ax
38306                                           !BCC_EOS
38307                                           !BCC_EOS
38308 9A1B           EB           33            jmp .304
38309                       00009A1D            .305:
38310                                           ! 8053             outw(0x01CE, i);
38311                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38312 9A1D           FF76         FC            push	-4[bp]
38313                                           ! Debug: list int = const $1CE (used reg = )
38314 9A20           B8                   01CE  mov	ax,#$1CE
38315 9A23           50                         push	ax
38316                                           ! Debug: func () void = outw+0 (used reg = )
38317 9A24           E8         E1E7            call	_outw
38318 9A27           83C4                   04  add	sp,*4
38319                                           !BCC_EOS
38320                                           ! 8054             outw(0x01CF, read_word(ES, BX));
38321                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38322 9A2A           FF76         06            push	6[bp]
38323                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38324 9A2D           FF76         04            push	4[bp]
38325                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38326 9A30           E8         E172            call	_read_word
38327 9A33           83C4                   04  add	sp,*4
38328                                           ! Debug: list unsigned short = ax+0 (used reg = )
38329 9A36           50                         push	ax
38330                                           ! Debug: list int = const $1CF (used reg = )
38331 9A37           B8                   01CF  mov	ax,#$1CF
38332 9A3A           50                         push	ax
38333                                           ! Debug: func () void = outw+0 (used reg = )
38334 9A3B           E8         E1D0            call	_outw
38335 9A3E           83C4                   04  add	sp,*4
38336                                           !BCC_EOS
38337                                           ! 8055             BX += 2;
38338                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38339 9A41           8B46         06            mov	ax,6[bp]
38340 9A44           40                         inc	ax
38341 9A45           40                         inc	ax
38342 9A46           8946         06            mov	6[bp],ax
38343                                           !BCC_EOS
38344                                           ! 8056         }
38345                                           ! 8057     }
38346                       00009A49            .303:
38347                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38348 9A49           8B46         FC            mov	ax,-4[bp]
38349 9A4C           40                         inc	ax
38350 9A4D           8946         FC            mov	-4[bp],ax
38351                       00009A50            .304:
38352                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38353 9A50           8B46         FC            mov	ax,-4[bp]
38354 9A53           3D                   0009  cmp	ax,*9
38355 9A56           76           C5            jbe	.305
38356                       00009A58            .306:
38357                       00009A58            .302:
38358                                           ! 8058 }
38359                       00009A58            .301:
38360 9A58           89EC                       mov	sp,bp
38361 9A5A           5D                         pop	bp
38362 9A5B           C3                         ret
38363                                           ! 8059 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
38364                                           ! 8060 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
38365                                           export	_vbe_biosfn_save_restore_state
38366                       00009A5C            _vbe_biosfn_save_restore_state:
38367                                           !BCC_EOS
38368                                           !BCC_EOS
38369                                           !BCC_EOS
38370                                           !BCC_EOS
38371                                           !BCC_EOS
38372                                           ! 8061 {
38373                                           ! 8062     Bit16u ss=get_SS();
38374 9A5C           55                         push	bp
38375 9A5D           89E5                       mov	bp,sp
38376 9A5F           4C                         dec	sp
38377 9A60           4C                         dec	sp
38378                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38379 9A61           E8         E1BA            call	_get_SS
38380                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38381 9A64           8946         FE            mov	-2[bp],ax
38382                                           !BCC_EOS
38383                                           ! 8063     Bit16u result, val;
38384                                           !BCC_EOS
38385                                           ! 8064     result = 0x4f;
38386 9A67           83C4                   FC  add	sp,*-4
38387                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
38388 9A6A           B8                   004F  mov	ax,*$4F
38389 9A6D           8946         FC            mov	-4[bp],ax
38390                                           !BCC_EOS
38391                                           ! 8065     switch(( DX & 0x00ff )) {
38392                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
38393 9A70           8A46         08            mov	al,8[bp]
38394 9A73           E9         00A9            br 	.309
38395                                           ! 8066     case 0x00:
38396                                           ! 8067         val = biosfn_read_video_state_size2(CX);
38397                       00009A76            .30A:
38398                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
38399 9A76           FF76         06            push	6[bp]
38400                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
38401 9A79           E8         D417            call	_biosfn_read_video_state_size2
38402 9A7C           44                         inc	sp
38403 9A7D           44                         inc	sp
38404                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38405 9A7E           8946         FA            mov	-6[bp],ax
38406                                           !BCC_EOS
38407                                           ! 8068         if (CX & 8)
38408                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38409 9A81           8A46         06            mov	al,6[bp]
38410 9A84           24                     08  and	al,*8
38411 9A86           84C0                       test	al,al
38412 9A88           74           09            je  	.30B
38413                       00009A8A            .30C:
38414                                           ! 8069             val += vbe_biosfn_read_video_state_size();
38415                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
38416 9A8A           E8         FE08            call	_vbe_biosfn_read_video_state_size
38417                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38418 9A8D           0346         FA            add	ax,-6[bp]
38419 9A90           8946         FA            mov	-6[bp],ax
38420                                           !BCC_EOS
38421                                           ! 8070         write_word(ss, BX, val);
38422                       00009A93            .30B:
38423                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38424 9A93           FF76         FA            push	-6[bp]
38425                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
38426 9A96           FF76         0C            push	$C[bp]
38427                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38428 9A99           FF76         FE            push	-2[bp]
38429                                           ! Debug: func () void = write_word+0 (used reg = )
38430 9A9C           E8         E131            call	_write_word
38431 9A9F           83C4                   06  add	sp,*6
38432                                           !BCC_EOS
38433                                           ! 8071         break;
38434 9AA2           E9         008C            br 	.307
38435                                           !BCC_EOS
38436                                           ! 8072     case 0x01:
38437                                           ! 8073         val = read_word(ss, BX);
38438                       00009AA5            .30D:
38439                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38440 9AA5           FF76         0C            push	$C[bp]
38441                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38442 9AA8           FF76         FE            push	-2[bp]
38443                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38444 9AAB           E8         E0F7            call	_read_word
38445 9AAE           83C4                   04  add	sp,*4
38446                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38447 9AB1           8946         FA            mov	-6[bp],ax
38448                                           !BCC_EOS
38449                                           ! 8074         val = biosfn_save_video_state(CX, ES, val);
38450                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38451 9AB4           FF76         FA            push	-6[bp]
38452                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38453 9AB7           FF76         0A            push	$A[bp]
38454                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38455 9ABA           FF76         06            push	6[bp]
38456                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
38457 9ABD           E8         D43E            call	_biosfn_save_video_state
38458 9AC0           83C4                   06  add	sp,*6
38459                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38460 9AC3           8946         FA            mov	-6[bp],ax
38461                                           !BCC_EOS
38462                                           ! 8075         if (CX & 8)
38463                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38464 9AC6           8A46         06            mov	al,6[bp]
38465 9AC9           24                     08  and	al,*8
38466 9ACB           84C0                       test	al,al
38467 9ACD           74           0C            je  	.30E
38468                       00009ACF            .30F:
38469                                           ! 8076             vbe_biosfn_save_video_state(ES, val);
38470                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38471 9ACF           FF76         FA            push	-6[bp]
38472                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38473 9AD2           FF76         0A            push	$A[bp]
38474                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
38475 9AD5           E8         FDC5            call	_vbe_biosfn_save_video_state
38476 9AD8           83C4                   04  add	sp,*4
38477                                           !BCC_EOS
38478                                           ! 8077         break;
38479                       00009ADB            .30E:
38480 9ADB           EB           54            jmp .307
38481                                           !BCC_EOS
38482                                           ! 8078     case 0x02:
38483                                           ! 8079         val = read_word(ss, BX);
38484                       00009ADD            .310:
38485                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38486 9ADD           FF76         0C            push	$C[bp]
38487                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38488 9AE0           FF76         FE            push	-2[bp]
38489                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38490 9AE3           E8         E0BF            call	_read_word
38491 9AE6           83C4                   04  add	sp,*4
38492                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38493 9AE9           8946         FA            mov	-6[bp],ax
38494                                           !BCC_EOS
38495                                           ! 8080         val = biosfn_restore_video_state(CX, ES, val);
38496                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38497 9AEC           FF76         FA            push	-6[bp]
38498                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38499 9AEF           FF76         0A            push	$A[bp]
38500                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38501 9AF2           FF76         06            push	6[bp]
38502                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
38503 9AF5           E8         D9D0            call	_biosfn_restore_video_state
38504 9AF8           83C4                   06  add	sp,*6
38505                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38506 9AFB           8946         FA            mov	-6[bp],ax
38507                                           !BCC_EOS
38508                                           ! 8081         if (CX & 8)
38509                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38510 9AFE           8A46         06            mov	al,6[bp]
38511 9B01           24                     08  and	al,*8
38512 9B03           84C0                       test	al,al
38513 9B05           74           0C            je  	.311
38514                       00009B07            .312:
38515                                           ! 8082             vbe_bio
38516                                           ! 8082 sfn_restore_video_state(ES, val);
38517                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38518 9B07           FF76         FA            push	-6[bp]
38519                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38520 9B0A           FF76         0A            push	$A[bp]
38521                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
38522 9B0D           E8         FE1F            call	_vbe_biosfn_restore_video_state
38523 9B10           83C4                   04  add	sp,*4
38524                                           !BCC_EOS
38525                                           ! 8083         break;
38526                       00009B13            .311:
38527 9B13           EB           1C            jmp .307
38528                                           !BCC_EOS
38529                                           ! 8084     default:
38530                                           ! 8085         result = 0x100;
38531                       00009B15            .313:
38532                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
38533 9B15           B8                   0100  mov	ax,#$100
38534 9B18           8946         FC            mov	-4[bp],ax
38535                                           !BCC_EOS
38536                                           ! 8086         break;
38537 9B1B           EB           14            jmp .307
38538                                           !BCC_EOS
38539                                           ! 8087     }
38540                                           ! 8088     write_word(ss, AX, result);
38541 9B1D           EB           12            jmp .307
38542                       00009B1F            .309:
38543 9B1F           2C                     00  sub	al,*0
38544 9B21         0F84         FF51            beq 	.30A
38545 9B25           2C                     01  sub	al,*1
38546 9B27         0F84         FF7A            beq 	.30D
38547 9B2B           2C                     01  sub	al,*1
38548 9B2D           74           AE            je 	.310
38549 9B2F           EB           E4            jmp	.313
38550                       00009B31            .307:
38551                       FFFFFFF8            ..FFF4	=	-8
38552                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
38553 9B31           FF76         FC            push	-4[bp]
38554                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
38555 9B34           FF76         04            push	4[bp]
38556                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38557 9B37           FF76         FE            push	-2[bp]
38558                                           ! Debug: func () void = write_word+0 (used reg = )
38559 9B3A           E8         E093            call	_write_word
38560 9B3D           83C4                   06  add	sp,*6
38561                                           !BCC_EOS
38562                                           ! 8089 }
38563 9B40           89EC                       mov	sp,bp
38564 9B42           5D                         pop	bp
38565 9B43           C3                         ret
38566                                           ! 8090 #asm
38567                                           !BCC_ASM
38568                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38569                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38570                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38571                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38572                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38573                       00009B44            vbe_biosfn_display_window_control:
38574 9B44           80FB                   00    cmp bl, #0x00
38575 9B47           75           24              jne vbe_05_failed
38576 9B49           80FF                   01    cmp bh, #0x01
38577 9B4C           74           16              je get_display_window
38578 9B4E           72           04              jb set_display_window
38579 9B50           B8                   0100    mov ax, #0x0100
38580 9B53           C3                           ret
38581                       00009B54            set_display_window:
38582 9B54           89D0                         mov ax, dx
38583 9B56           E8         F5A0              call _dispi_set_bank
38584 9B59           E8         F5AD              call dispi_get_bank
38585 9B5C           39D0                         cmp ax, dx
38586 9B5E           75           0D              jne vbe_05_failed
38587 9B60           B8                   004F    mov ax, #0x004f
38588 9B63           C3                           ret
38589                       00009B64            get_display_window:
38590 9B64           E8         F5A2              call dispi_get_bank
38591 9B67           89C2                         mov dx, ax
38592 9B69           B8                   004F    mov ax, #0x004f
38593 9B6C           C3                           ret
38594                       00009B6D            vbe_05_failed:
38595 9B6D           B8                   014F    mov ax, #0x014f
38596 9B70           C3                           ret
38597                                           ! 8115 endasm
38598                                           !BCC_ENDASM
38599                                           ! 8116 #asm
38600                                           !BCC_ASM
38601                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38602                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38603                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38604                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38605                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38606                       00009B71            vbe_biosfn_set_get_logical_scan_line_length:
38607 9B71           89C8                         mov ax, cx
38608 9B73           80FB                   01    cmp bl, #0x01
38609 9B76           74           24              je get_logical_scan_line_length
38610 9B78           80FB                   02    cmp bl, #0x02
38611 9B7B           74           06              je set_logical_scan_line_bytes
38612 9B7D           72           1A              jb set_logical_scan_line_pixels
38613 9B7F           B8                   0100    mov ax, #0x0100
38614 9B82           C3                           ret
38615                       00009B83            set_logical_scan_line_bytes:
38616 9B83           50                           push ax
38617 9B84           E8         F4F7              call dispi_get_bpp
38618 9B87           30FF                         xor bh, bh
38619 9B89           88E3                         mov bl, ah
38620 9B8B           08DB                         or bl, bl
38621 9B8D           75           05              jnz no_4bpp_1
38622 9B8F           C1E0                   03    shl ax, #3
38623 9B92           B3                     01    mov bl, #1
38624                       00009B94            no_4bpp_1:
38625 9B94           31D2                         xor dx, dx
38626 9B96           58                           pop ax
38627 9B97           F7F3                         div bx
38628                       00009B99            set_logical_scan_line_pixels:
38629 9B99           E8         F60B              call dispi_set_virt_width
38630                       00009B9C            get_logical_scan_line_length:
38631 9B9C           E8         F4DF              call dispi_get_bpp
38632 9B9F           30FF                         xor bh, bh
38633 9BA1           88E3                         mov bl, ah
38634 9BA3           E8         F614              call dispi_get_virt_width
38635 9BA6           89C1                         mov cx, ax
38636 9BA8           08DB                         or bl, bl
38637 9BAA           75           05              jnz no_4bpp_2
38638 9BAC           C1E8                   03    shr ax, #3
38639 9BAF           B3                     01    mov bl, #1
38640                       00009BB1            no_4bpp_2:
38641 9BB1           F7E3                         mul bx
38642 9BB3           89C3                         mov bx, ax
38643 9BB5           E8         F610              call dispi_get_virt_height
38644 9BB8           89C2                         mov dx, ax
38645 9BBA           B8                   004F    mov ax, #0x004f
38646 9BBD           C3                           ret
38647                                           ! 8158 endasm
38648                                           !BCC_ENDASM
38649                                           ! 8159 #asm
38650                                           !BCC_ASM
38651                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38652                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38653                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38654                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38655                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38656                       00009BBE            vbe_biosfn_set_get_display_start:
38657 9BBE           80FB                   80    cmp bl, #0x80
38658 9BC1           74           0B              je set_display_start
38659 9BC3           80FB                   01    cmp bl, #0x01
38660 9BC6           74           14              je get_display_start
38661 9BC8           72           04              jb set_display_start
38662 9BCA           B8                   0100    mov ax, #0x0100
38663 9BCD           C3                           ret
38664                       00009BCE            set_display_start:
38665 9BCE           89C8                         mov ax, cx
38666 9BD0           E8         F57B              call dispi_set_x_offset
38667 9BD3           89D0                         mov ax, dx
38668 9BD5           E8         F594              call dispi_set_y_offset
38669 9BD8           B8                   004F    mov ax, #0x004f
38670 9BDB           C3                           ret
38671                       00009BDC            get_display_start:
38672 9BDC           E8         F57F              call dispi_get_x_offset
38673 9BDF           89C1                         mov cx, ax
38674 9BE1           E8         F598              call dispi_get_y_offset
38675 9BE4           89C2                         mov dx, ax
38676 9BE6           30FF                         xor bh, bh
38677 9BE8           B8                   004F    mov ax, #0x004f
38678 9BEB           C3                           ret
38679                                           ! 8183 endasm
38680                                           !BCC_ENDASM
38681                                           ! 8184 #asm
38682                                           !BCC_ASM
38683                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38684                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38685                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38686                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38687                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38688                       00009BEC            vbe_biosfn_set_get_dac_palette_format:
38689 9BEC           80FB                   01    cmp bl, #0x01
38690 9BEF           74           1E              je get_dac_palette_format
38691 9BF1           72           04              jb set_dac_palette_format
38692 9BF3           B8                   0100    mov ax, #0x0100
38693 9BF6           C3                           ret
38694                       00009BF7            set_dac_palette_format:
38695 9BF7           E8         F4F1              call dispi_get_enable
38696 9BFA           80FF                   06    cmp bh, #0x06
38697 9BFD           74           0A              je set_normal_dac
38698 9BFF           80FF                   08    cmp bh, #0x08
38699 9C02           75           1B              jne vbe_08_unsupported
38700 9C04           0D                   0020    or ax, # 0x20
38701 9C07           75           03              jnz set_dac_mode
38702                       00009C09            set_normal_dac:
38703 9C09           25                   FFDF    and ax, #~ 0x20
38704                       00009C0C            set_dac_mode:
38705 9C0C           E8         F4CC              call _dispi_set_enable
38706                       00009C0F            get_dac_palette_format:
38707 9C0F           B7                     06    mov bh, #0x06
38708 9C11           E8         F4D7              call dispi_get_enable
38709 9C14           25                   0020    and ax, # 0x20
38710 9C17           74           02              jz vbe_08_ok
38711 9C19           B7                     08    mov bh, #0x08
38712                       00009C1B            vbe_08_ok:
38713 9C1B           B8                   004F    mov ax, #0x004f
38714 9C1E           C3                           ret
38715                       00009C1F            vbe_08_unsupported:
38716 9C1F           B8                   014F    mov ax, #0x014f
38717 9C22           C3                           ret
38718                                           ! 8215 endasm
38719                                           !BCC_ENDASM
38720                                           ! 8216 void vbe_biosfn_set_get_palette_data(AX)
38721                                           ! 8217 {
38722                                           export	_vbe_biosfn_set_get_palette_data
38723                       00009C23            _vbe_biosfn_set_get_palette_data:
38724                                           ! 8218 }
38725 9C23           C3                         ret
38726                                           ! 8219 #asm
38727                                           !BCC_ASM
38728                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38729                       00009C24            vbe_biosfn_return_protected_mode_interface:
38730 9C24           84DB                         test bl, bl
38731 9C26           75           11              jnz _fail
38732 9C28           BF                   C000    mov di, #0xc000
38733 9C2B           8EC7                         mov es, di
38734 9C2D           BF                   8F0C    mov di, # vesa_pm_start
38735 9C30           B9                   900D    mov cx, # vesa_pm_end
38736 9C33           29F9                         sub cx, di
38737 9C35           B8                   004F    mov ax, #0x004f
38738 9C38           C3                           ret
38739                       00009C39            _fail:
38740 9C39           B8                   014F    mov ax, #0x014f
38741 9C3C           C3                           ret
38742                                           ! 8233 endasm
38743                                           !BCC_ENDASM
38744                                           ! 8234 #asm
38745                                           !BCC_ASM
38746                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38747                                           ;; DATA_SEG_DEFS_HERE
38748                                           ! 8236 endasm
38749                                           !BCC_ENDASM
38750                                           ! 8237 #asm
38751                                           !BCC_ASM
38752                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38753 9C3D                        76            .ascii "vgabios ends here"
38754 9C4E                        00            .byte 0x00
38755                       00009C4F            vgabios_end:
38756 9C4F                        CB            .byte 0xCB
38757                                           ;; BLOCK_STRINGS_BEGIN
38758                                           ! 8243 endasm
38759                                           !BCC_ENDASM
38760                                           ! 8244 
38761                                           
38762 9C50                                      .bss
38763                                           
38764                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3B97 A   .10                         0 3695 A   
.100                        0 4CBC A   .101                        0 4CB5 A   
.102                        0 4CAC A   .103                        0 4E56 A   
.104                        0 4DC8 A   .105                        0 4D3E A   
.106                        0 4DC5 A   .107                        0 4DB4 A   
.108                        0 4DBB A   .109                        0 4D48 A   
.10A                        0 4D8C A   .10B                        0 4D66 A   
.10C                        0 4D5F A   .10D                        0 4DB4 A   
.10E                        0 4DC5 A   .10F                        0 4E56 A   
.11                         0 36C4 A   .110                        0 4E56 A   
.111                        0 4E43 A   .112                        0 4E4A A   
.113                        0 4DD2 A   .114                        0 4E0F A   
.115                        0 4DE9 A   .116                        0 4DE2 A   
.117                        0 4E37 A   .118                        0 4E43 A   
.119                        0 4E41 A   .11A                        0 4E56 A   
.11B                        0 4E59 A   .11C                        0 4EEC A   
.11D                        0 4EA7 A   .11E                        0 4E95 A   
.11F                        0 4E83 A   .12                         0 36B4 A   
.120                        0 4E7C A   .121                        0 4E75 A   
.122                        0 5030 A   .123                        0 4F0F A   
.124                        0 4EF3 A   .125                        0 4FA2 A   
.126                        0 4F18 A   .127                        0 4F9F A   
.128                        0 4F8E A   .129                        0 4F95 A   
.12A                        0 4F22 A   .12B                        0 4F66 A   
.12C                        0 4F40 A   .12D                        0 4F39 A   
.12E                        0 4F8E A   .12F                        0 4F9F A   
.13                         0 36C9 A   .130                        0 5030 A   
.131                        0 5030 A   .132                        0 501D A   
.133                        0 5024 A   .134                        0 4FAC A   
.135                        0 4FE9 A   .136                        0 4FC3 A   
.137                        0 4FBC A   .138                        0 5011 A   
.139                        0 501D A   .13A                        0 501B A   
.13B                        0 5030 A   .13C                        0 5082 A   
.13D                        0 507E A   .13E                        0 5141 A   
.13F                        0 50E3 A   .14                         0 36E0 A   
.140                        0 5141 A   .141                        0 5172 A   
.143                        0 5168 A   .144                        0 5150 A   
.145                        0 5158 A   .146                        0 5160 A   
.147                        0 51DF A   .148                        0 51CF A   
.149                        0 51ED A   .14A                        0 52A5 A   
.14B                        0 5294 A   .14C                        0 529B A   
.14D                        0 51F5 A   .14E                        0 5294 A   
.14F                        0 5284 A   .15                         0 36F4 A   
.150                        0 528B A   .151                        0 5212 A   
.152                        0 5274 A   .153                        0 525D A   
.154                        0 5284 A   .155                        0 5294 A   
.156                        0 52A5 A   .157                        0 54B7 A   
.158                        0 54A7 A   .159                        0 54AE A   
.15A                        0 52FB A   .15B                        0 531F A   
.15C                        0 5316 A   .15D                        0 53E0 A   
.15E                        0 532D A   .15F                        0 5348 A   
.16                         0 370D A   .160                        0 5336 A   
.161                        0 534D A   .162                        0 53CA A   
.163                        0 53BC A   .164                        0 53C3 A   
.165                        0 5354 A   .166                        0 53B2 A   
.167                        0 536B A   .168                        0 5394 A   
.169                        0 5374 A   .16A                        0 53B2 A   
.16B                        0 53CA A   .16C                        0 54A7 A   
.16D                        0 54A7 A   .16E                        0 549E A   
.16F                        0 53E3 A   .17                         0 3724 A   
.170                        0 53FE A   .171                        0 53EC A   
.172                        0 5403 A   .173                        0 5484 A   
.174                        0 5476 A   .175                        0 547D A   
.176                        0 540A A   .177                        0 546C A   
.178                        0 5421 A   .179                        0 544C A   
.17A                        0 542A A   .17B                        0 546C A   
.17C                        0 5484 A   .17D                        0 54A7 A   
.17E                        0 54B7 A   .17F                        0 558B A   
.18                         0 3732 A   .180                        0 557B A   
.181                        0 5582 A   .182                        0 5501 A   
.183                        0 557B A   .184                        0 556D A   
.185                        0 5574 A   .186                        0 5527 A   
.187                        0 5549 A   .188                        0 5543 A   
.189                        0 557B A   .18A                        0 558B A   
.18B                        0 55BF A   .18C                        0 55BB A   
.18D                        0 568C A   .18E                        0 5622 A   
.18F                        0 5780 A   .19                         0 376D A   
.190                        0 5780 A   .191                        0 5768 A   
.192                        0 56C1 A   .193                        0 5761 A   
.195                        0 574D A   .196                        0 56D5 A   
.197                        0 56D5 A   .198                        0 56FF A   
.199                        0 5728 A   .19A                        0 5780 A   
.19B                        0 5774 A   .19C                        0 57B4 A   
.19D                        0 57B0 A   .19E                        0 5883 A   
.19F                        0 5815 A   .1A                         0 37A7 A   
.1A0                        0 5880 A   .1A1                        0 5874 A   
.1A2                        0 584B A   .1A3                        0 5880 A   
.1A4                        0 5976 A   .1A5                        0 5976 A   
.1A6                        0 595E A   .1A7                        0 58B8 A   
.1A8                        0 5957 A   .1AA                        0 5943 A   
.1AB                        0 58CC A   .1AC                        0 58CC A   
.1AD                        0 58F5 A   .1AE                        0 591E A   
.1AF                        0 5976 A   .1B                         0 37BC A   
.1B0                        0 596A A   .1B1                        0 5A22 A   
.1B2                        0 5A1E A   .1B3                        0 5A3C A   
.1B4                        0 5A38 A   .1B5                        0 5C8A A   
.1B7                        0 5C74 A   .1B8                        0 5A51 A   
.1B9                        0 5A51 A   .1BA                        0 5AD2 A   
.1BB                        0 5AC4 A   .1BC                        0 5AF7 A   
.1BD                        0 5B29 A   .1BE                        0 5B0D A   
.1BF                        0 5B43 A   .1C                         0 37DC A   
.1C0                        0 5B55 A   .1C1                        0 5B4C A   
.1C2                        0 5BC1 A   .1C3                        0 5B7B A   
.1C4                        0 5C01 A   .1C5                        0 5C15 A   
.1C6                        0 5C0A A   .1C7                        0 5C2B A   
.1C8                        0 5C40 A   .1C9                        0 5CC4 A   
.1CA                        0 5CC0 A   .1CB                        0 5CDE A   
.1CC                        0 5CDA A   .1CD                        0 5E74 A   
.1CF                        0 5E5C A   .1D                         0 37FC A   
.1D0                        0 5CF3 A   .1D1                        0 5CF3 A   
.1D2                        0 5D87 A   .1D3                        0 5D79 A   
.1D4                        0 5D80 A   .1D5                        0 5D35 A   
.1D6                        0 5D79 A   .1D7                        0 5D65 A   
.1D8                        0 5D87 A   .1D9                        0 5D8A A   
.1DA                        0 5DB6 A   .1DB                        0 5DAD A   
.1DC                        0 5E03 A   .1DD                        0 5DDE A   
.1DE                        0 5E24 A   .1DF                        0 5E26 A   
.1E                         0 3819 A   .1E0                        0 5E55 A   
.1E1                        0 5EB4 A   .1E2                        0 5EA3 A   
.1E3                        0 5EDE A   .1E4                        0 5EDA A   
.1E5                        0 613A A   .1E7                        0 6119 A   
.1E8                        0 5F2F A   .1E9                        0 5F32 A   
.1EA                        0 5F40 A   .1EB                        0 5F39 A   
.1EC                        0 5F43 A   .1ED                        0 5F4B A   
.1EE                        0 5F55 A   .1EF                        0 5FA2 A   
.1F                         0 3834 A   .1F0                        0 5F97 A   
.1F1                        0 5F55 A   .1F2                        0 5FA2 A   
.1F3                        0 5FA5 A   .1F4                        0 603F A   
.1F5                        0 5FBD A   .1F6                        0 603C A   
.1F7                        0 6019 A   .1F8                        0 6110 A   
.1F9                        0 6110 A   .1FB                        0 60FC A   
.1FC                        0 6085 A   .1FD                        0 6085 A   
.1FE                        0 60AE A   .1FF                        0 60D7 A   
.20                         0 3851 A   .200                        0 6150 A   
.201                        0 6144 A   .202                        0 61CA A   
.203                        0 615A A   .204                        0 619A A   
.205                        0 6170 A   .206                        0 61C1 A   
.207                        0 6577 A   .208                        0 6566 A   
.209                        0 656D A   .20A                        0 64AF A   
.20B                        0 6522 A   .20C                        0 651C A   
.20D                        0 6577 A   .20E                        0 6658 A   
.20F                        0 6648 A   .21                         0 3860 A   
.210                        0 6670 A   .211                        0 67B5 A   
.212                        0 67A6 A   .213                        0 67AD A   
.214                        0 6769 A   .215                        0 67B5 A   
.216                        0 67CA A   .217                        0 67BF A   
.218                        0 684E A   .219                        0 683F A   
.21A                        0 6846 A   .21B                        0 6805 A   
.21C                        0 684E A   .21D                        0 6861 A   
.21E                        0 6858 A   .21F                        0 68DF A   
.22                         0 399B A   .220                        0 68D0 A   
.221                        0 68D7 A   .222                        0 689C A   
.223                        0 68DF A   .224                        0 68F2 A   
.225                        0 68E9 A   .226                        0 697D A   
.227                        0 696E A   .228                        0 6975 A   
.229                        0 693A A   .22A                        0 697D A   
.22B                        0 6990 A   .22C                        0 6987 A   
.22D                        0 6B12 A   .22F                        0 6AED A   
.230                        0 69AA A   .231                        0 69E1 A   
.232                        0 6A18 A   .233                        0 6A3B A   
.234                        0 6A5E A   .235                        0 6A81 A   
.236                        0 6AA3 A   .237                        0 6AC5 A   
.238                        0 6AE7 A   .239                        0 6B10 A   
.23A                        0 6B00 A   .23B                        0 6C82 A   
.23C                        0 6C70 A   .23D                        0 6D0C A   
.23E                        0 6D00 A   .23F                        0 6CB1 A   
.24                         0 3947 A   .240                        0 6CE4 A   
.241                        0 6CCF A   .242                        0 6D0C A   
.243                        0 6D24 A   .244                        0 6D15 A   
.245                        0 6EAF A   .246                        0 6EA6 A   
.247                        0 6EC1 A   .248                        0 6EB8 A   
.249                        0 6ED3 A   .24A                        0 6ECA A   
.24B                        0 7186 A   .24C                        0 6F20 A   
.24D                        0 700B A   .24E                        0 6FFC A   
.24F                        0 7003 A   .25                         0 3866 A   
.250                        0 6FD0 A   .251                        0 700B A   
.252                        0 7079 A   .253                        0 706A A   
.254                        0 7071 A   .255                        0 703E A   
.256                        0 7079 A   .257                        0 70CC A   
.258                        0 70BD A   .259                        0 70C4 A   
.25A                        0 7080 A   .25B                        0 70CC A   
.25C                        0 7117 A   .25D                        0 7108 A   
.25E                        0 710F A   .25F                        0 70DC A   
.26                         0 3866 A   .260                        0 7117 A   
.261                        0 7401 A   .262                        0 7191 A   
.263                        0 7332 A   .264                        0 7323 A   
.265                        0 732A A   .266                        0 72FB A   
.267                        0 7332 A   .268                        0 74C1 A   
.269                        0 740C A   .26A                        0 74AB A   
.26B                        0 749C A   .26C                        0 74A3 A   
.26D                        0 747D A   .26E                        0 74AB A   
.26F                        0 7783 A   .27                         0 388F A   
.270                        0 74D9 A   .271                        0 7548 A   
.272                        0 7539 A   .273                        0 7540 A   
.274                        0 750C A   .275                        0 7548 A   
.276                        0 75CD A   .277                        0 75BE A   
.278                        0 75C5 A   .279                        0 7589 A   
.27A                        0 75B7 A   .27B                        0 7591 A   
.27C                        0 75CD A   .27D                        0 75EF A   
.27E                        0 75E7 A   .27F                        0 7690 A   
.28                         0 388F A   .280                        0 7681 A   
.281                        0 7688 A   .282                        0 764C A   
.283                        0 7690 A   .284                        0 76E9 A   
.285                        0 76DA A   .286                        0 76E1 A   
.287                        0 76AD A   .288                        0 76E9 A   
.289                        0 79FE A   .28A                        0 778E A   
.28B                        0 792F A   .28C                        0 7920 A   
.28D                        0 7927 A   .28E                        0 78F8 A   
.28F                        0 792F A   .29                         0 38A4 A   
.290                        0 7A9F A   .291                        0 7A09 A   
.292                        0 7A8B A   .293                        0 7A7C A   
.294                        0 7A83 A   .295                        0 7A5C A   
.296                        0 7A8B A   .297                        0 7AE1 A   
.298                        0 7AD3 A   .299                        0 7ADA A   
.29A                        0 7AB7 A   .29B                        0 7AD3 A   
.29C                        0 7ACB A   .29D                        0 7AE1 A   
.29E                        0 7D5A A   .29F                        0 7D44 A   
.2A                         0 38A4 A   .2A0                        0 7C40 A   
.2A1                        0 7C55 A   .2A2                        0 7C47 A   
.2A3                        0 7D3D A   .2A4                        0 7D2D A   
.2A5                        0 7C5E A   .2A6                        0 7C8D A   
.2A7                        0 7C6C A   .2A8                        0 7C65 A   
.2A9                        0 7D2B A   .2AA                        0 7D2B A   
.2AB                        0 7C96 A   .2AC                        0 7CBA A   
.2AD                        0 7CB4 A   .2AE                        0 7D26 A   
.2AF                        0 7D17 A   .2B                         0 38B9 A   
.2B0                        0 7D1E A   .2B1                        0 7CCD A   
.2B2                        0 7CFF A   .2B3                        0 7CEC A   
.2B4                        0 7D10 A   .2B5                        0 7D26 A   
.2B6                        0 7D3D A   .2B7                        0 7D5A A   
.2B8                        0 9308 A   .2B9                        0 92FD A   
.2BA                        0 92BA A   .2BB                        0 92F4 A   
.2BC                        0 92C4 A   .2BD                        0 92D4 A   
.2BE                        0 92CB A   .2BF                        0 92F2 A   
.2C                         0 38B9 A   .2C0                        0 92E9 A   
.2C1                        0 92E0 A   .2C2                        0 92F2 A   
.2C3                        0 92FD A   .2C4                        0 9308 A   
.2C5                        0 9423 A   .2C6                        0 941C A   
.2C7                        0 93FC A   .2C8                        0 93F4 A   
.2C9                        0 93EC A   .2CA                        0 93E4 A   
.2CB                        0 9414 A   .2CC                        0 940C A   
.2CD                        0 9404 A   .2CE                        0 94E7 A   
.2CF                        0 949C A   .2D                         0 38CE A   
.2D0                        0 94FF A   .2D1                        0 9599 A   
.2D2                        0 958B A   .2D3                        0 94FF A   
.2D4                        0 957D A   .2D5                        0 9551 A   
.2D6                        0 9547 A   .2D7                        0 9538 A   
.2D8                        0 957D A   .2D9                        0 9599 A   
.2DA                        0 95F0 A   .2DB                        0 95F2 A   
.2DC                        0 9715 A   .2DD                        0 961C A   
.2DE                        0 9693 A   .2DF                        0 968B A   
.2E                         0 38DD A   .2E0                        0 9683 A   
.2E1                        0 9679 A   .2E2                        0 96B2 A   
.2E3                        0 96A1 A   .2E4                        0 9715 A   
.2E5                        0 9745 A   .2E6                        0 9747 A   
.2E7                        0 9757 A   .2E8                        0 9753 A   
.2E9                        0 9759 A   .2EA                        0 976B A   
.2EB                        0 9767 A   .2EC                        0 976D A   
.2ED                        0 97A4 A   .2EE                        0 9781 A   
.2EF                        0 9849 A   .2F                         0 38FB A   
.2F0                        0 97C0 A   .2F1                        0 97DB A   
.2F2                        0 97D2 A   .2F3                        0 985D A   
.2F4                        0 985D A   .2F5                        0 9857 A   
.2F6                        0 98E1 A   .2F7                        0 98DD A   
.2F8                        0 992B A   .2F9                        0 991C A   
.2FA                        0 9923 A   .2FB                        0 98E9 A   
.2FC                        0 991C A   .2FD                        0 98F1 A   
.2FE                        0 992B A   .2FF                        0 9973 A   
.3                          0 3B43 A   .30                         0 3909 A   
.300                        0 9955 A   .301                        0 9A58 A   
.302                        0 9A58 A   .303                        0 9A49 A   
.304                        0 9A50 A   .305                        0 9A1D A   
.306                        0 9A58 A   .307                        0 9B31 A   
.309                        0 9B1F A   .30A                        0 9A76 A   
.30B                        0 9A93 A   .30C                        0 9A8A A   
.30D                        0 9AA5 A   .30E                        0 9ADB A   
.30F                        0 9ACF A   .31                         0 3917 A   
.310                        0 9ADD A   .311                        0 9B13 A   
.312                        0 9B07 A   .313                        0 9B15 A   
.32                         0 3925 A   .33                         0 399E A   
.34                         0 39EB A   .36                         0 39DF A   
.37                         0 39A3 A   .38                         0 39A8 A   
.39                         0 39C6 A   .3A                         0 39EE A   
.3B                         0 3A22 A   .3C                         0 3A3E A   
.3D                         0 3A83 A   .3F                         0 3A77 A   
.4                          0 366B A   .40                         0 3A44 A   
.41                         0 3A53 A   .42                         0 3A64 A   
.43                         0 3A90 A   .44                         0 3B39 A   
.45                         0 3A99 A   .46                         0 3B37 A   
.48                         0 3B0C A   .49                         0 3A9E A   
.4A                         0 3AB1 A   .4B                         0 3AC6 A   
.4C                         0 3ADB A   .4D                         0 3AF4 A   
.4E                         0 3AFC A   .4F                         0 3B04 A   
.5                          0 36C6 A   .50                         0 3B35 A   
.51                         0 3B1F A   .52                         0 3B3F A   
.53                         0 3B90 A   .54                         0 3B56 A   
.55                         0 3BB7 A   .56                         0 3BAF A   
.57                         0 3BD8 A   .58                         0 3BD4 A   
.59                         0 3DAB A   .5A                         0 3C66 A   
.5B                         0 3CD8 A   .5D                         0 3CC8 A   
.5E                         0 3CA6 A   .5F                         0 3CAE A   
.60                         0 3CB6 A   .61                         0 3CBE A   
.62                         0 3D95 A   .63                         0 3D84 A   
.64                         0 3D8B A   .65                         0 3CE0 A   
.66                         0 3D5D A   .67                         0 3D01 A   
.68                         0 3D84 A   .69                         0 3D95 A   
.6A                         0 3DAB A   .6B                         0 3D9E A   
.6C                         0 3DFB A   .6D                         0 3DEC A   
.6E                         0 3DF3 A   .6F                         0 3DBB A   
.7                          0 36A1 A   .70                         0 3DFB A   
.71                         0 3E80 A   .72                         0 3E71 A   
.73                         0 3E78 A   .74                         0 3E39 A   
.75                         0 3E80 A   .76                         0 3EC7 A   
.77                         0 3EB8 A   .78                         0 3EBF A   
.79                         0 3E87 A   .7A                         0 3EC7 A   
.7B                         0 3EE2 A   .7C                         0 3EDD A   
.7D                         0 3EE5 A   .7E                         0 3F3C A   
.7F                         0 3F2D A   .8                          0 367D A   
.80                         0 3F34 A   .81                         0 3EFC A   
.82                         0 3F3C A   .83                         0 403C A   
.84                         0 3F7B A   .85                         0 3FB7 A   
.86                         0 3F91 A   .87                         0 403C A   
.88                         0 3FE2 A   .89                         0 3FBE A   
.8A                         0 403C A   .8B                         0 4179 A   
.8C                         0 416B A   .8D                         0 419B A   
.8E                         0 418C A   .8F                         0 4193 A   
.9                          0 3689 A   .90                         0 4180 A   
.91                         0 419B A   .92                         0 41C7 A   
.93                         0 41B9 A   .94                         0 422D A   
.96                         0 421E A   .97                         0 41DF A   
.98                         0 41F4 A   .99                         0 4208 A   
.9A                         0 42FB A   .9B                         0 42AB A   
.9C                         0 42A4 A   .9D                         0 429D A   
.9E                         0 4295 A   .9F                         0 42D4 A   
.A                          0 3689 A   .A0                         0 42BF A   
.A1                         0 42E8 A   .A2                         0 435D A   
.A3                         0 4359 A   .A4                         0 4448 A   
.A5                         0 4390 A   .A6                         0 4480 A   
.A7                         0 447C A   .A8                         0 44D2 A   
.A9                         0 44CE A   .AA                         0 44FC A   
.AB                         0 44F8 A   .AC                         0 4594 A   
.AD                         0 4526 A   .AE                         0 45B8 A   
.AF                         0 46E0 A   .B                          0 3689 A   
.B0                         0 46D1 A   .B1                         0 46D8 A   
.B2                         0 4695 A   .B3                         0 46E0 A   
.B4                         0 476B A   .B5                         0 475C A   
.B6                         0 4763 A   .B7                         0 4732 A   
.B8                         0 476B A   .B9                         0 488B A   
.BA                         0 487A A   .BB                         0 4881 A   
.BC                         0 47D9 A   .BD                         0 4838 A   
.BE                         0 47E2 A   .BF                         0 487A A   
.C                          0 3689 A   .C0                         0 488B A   
.C1                         0 4940 A   .C2                         0 4931 A   
.C3                         0 4938 A   .C4                         0 48C3 A   
.C5                         0 4904 A   .C6                         0 48CC A   
.C7                         0 4931 A   .C8                         0 4940 A   
.C9                         0 4956 A   .CA                         0 4952 A   
.CB                         0 4962 A   .CC                         0 495E A   
.CD                         0 498C A   .CE                         0 4988 A   
.CF                         0 49C9 A   .D                          0 3689 A   
.D0                         0 49B8 A   .D1                         0 49DA A   
.D2                         0 49D3 A   .D3                         0 49EB A   
.D4                         0 49E4 A   .D5                         0 49FA A   
.D6                         0 49F5 A   .D7                         0 4C71 A   
.D8                         0 4A21 A   .D9                         0 4AAB A   
.DA                         0 4A76 A   .DB                         0 4A64 A   
.DC                         0 4A52 A   .DD                         0 4A4B A   
.DE                         0 4A44 A   .DF                         0 4C6E A   
.E                          0 3689 A   .E0                         0 4B90 A   
.E1                         0 4AB4 A   .E2                         0 4B8D A   
.E3                         0 4B7A A   .E4                         0 4B81 A   
.E5                         0 4ABF A   .E6                         0 4B1F A   
.E7                         0 4ADD A   .E8                         0 4AD6 A   
.E9                         0 4B7A A   .EA                         0 4B8D A   
.EB                         0 4C6E A   .EC                         0 4C6E A   
.ED                         0 4C5B A   .EE                         0 4C62 A   
.EF                         0 4B9B A   .F                          0 3689 A   
.F0                         0 4BF4 A   .F1                         0 4BB2 A   
.F2                         0 4BAB A   .F3                         0 4C4F A   
.F4                         0 4C5B A   .F5                         0 4C59 A   
.F6                         0 4C6E A   .F7                         0 5046 A   
.F8                         0 5046 A   .FA                         0 5034 A   
.FB                         0 4CA3 A   .FC                         0 4CA3 A   
.FD                         0 4D35 A   .FE                         0 4CE0 A   
.FF                         0 4CCE A   _biosfn_alternate_prtsc     0 6B73 A   
_biosfn_enable_video_refre+ 0 6C4E A   _biosfn_get_cursor_pos      0 444C A   
_biosfn_get_font_info       0 6999 A   _biosfn_load_gfx_8_14_char+ 0 6996 A   
_biosfn_load_gfx_8_16_char+ 0 6998 A   _biosfn_load_gfx_8_8_chars  0 6994 A   
_biosfn_load_gfx_8_8_dd_ch+ 0 6997 A   _biosfn_load_gfx_user_char+ 0 6995 A   
_biosfn_load_text_8_14_pat  0 67CE A   _biosfn_load_text_8_16_pat  0 6903 A   
_biosfn_load_text_8_8_pat   0 6865 A   _biosfn_load_text_user_pat  0 6732 A   
_biosfn_perform_gray_scale+ 0 648B A   _biosfn_read_char_attr      0 504A A   
_biosfn_read_pixel          0 5C8E A   _biosfn_read_state_info     0 6D5B A   
_biosfn_read_video_state_s+ 0 6EDA A   _biosfn_read_video_state_s+ 0 6E93 A   
_biosfn_restore_video_stat+ 0 74C8 A   _biosfn_save_video_state    0 6EFE A   
_biosfn_scroll              0 4944 A   _biosfn_set_active_page     0 44C1 A   
_biosfn_set_cursor_pos      0 434C A   _biosfn_set_cursor_shape    0 4231 A   
_biosfn_set_video_mode      0 3B99 A   _biosfn_switch_video_inter+ 0 6C4D A   
_biosfn_write_char_attr     0 558F A   _biosfn_write_char_only     0 5784 A   
_biosfn_write_pixel         0 59F2 A   _biosfn_write_string        0 6C4F A   
_biosfn_write_teletype      0 5E96 A   _dac_regs                   0 028F A   
_dispi_get_max_bpp          0 90B9 A   _dispi_get_max_xres         0 9097 A   
_dispi_set_bank             0 90F9 A   _dispi_set_bank_farcall     0 9117 A   
_dispi_set_bpp              0 9060 A   _dispi_set_enable           0 90DB A   
_dispi_set_xres             0 902B A   _dispi_set_yres             0 9042 A   
_display_info               0 3619 A   _display_splash_screen      0 3618 A   
_display_string             0 3637 A   _fail                       0 9C39 A   
_find_vga_entry             0 7AA6 A   _get_SS                     0 7C1E A E 
_get_font_access            0 6592 A   _inb                        0 7BE8 A E 
_int10_func                 0 365E A   _inw                        0 7BF3 A E 
_line_to_vpti               0 027F A   _memcpyb                    0 7B32 A   
_memcpyw                    0 7B62 A   _memsetb                    0 7AE8 A   
_memsetw                    0 7B0D A   _mode_info_find_mode        0 92AD A   
_mode_info_list             0 7D5E A   _no_vbebios_info_string     0 8EA8 A   
_outb                       0 7BFE A E _outw                       0 7C0E A E 
_palette0                   0 0A13 A   _palette1                   0 0AD3 A   
_palette2                   0 0B93 A   _palette3                   0 0C53 A   
_printf                     0 7C21 A E _read_byte                  0 7B92 A   
_read_word                  0 7BA5 A   _release_font_access        0 65B5 A   
_set_scan_lines             0 65E9 A   _size64                     0 936C A   
_static_functionality       0 0F53 A   _vbe_biosfn_read_video_sta+ 0 9895 A E 
_vbe_biosfn_restore_video_+ 0 992F A E _vbe_biosfn_return_control+ 0 9387 A E 
_vbe_biosfn_return_mode_in+ 0 95CB A E _vbe_biosfn_save_restore_s+ 0 9A5C A E 
_vbe_biosfn_save_video_sta+ 0 989D A E _vbe_biosfn_set_get_palett+ 0 9C23 A E 
_vbe_biosfn_set_mode        0 9728 A E _vbe_has_vbe_display        0 930E A   
_vbebios_copyright          0 8DD6 A   _vbebios_info_string        0 8E82 A   
_vbebios_product_name       0 8E34 A   _vbebios_product_revision   0 8E4D A   
_vbebios_vendor_name        0 8E1C A   _vga_compat_setup           0 91D6 A   
_vga_modes                  0 01FF A   _vgafont14                  0 1763 A   
_vgafont14alt               0 3563 A   _vgafont16                  0 2563 A   
_vgafont16alt               0 3564 A   _vgafont8                   0 0F63 A   
_vgamem_copy_cga            0 477D A   _vgamem_copy_pl4            0 4630 A   
_vgamem_fill_cga            0 488F A   _vgamem_fill_pl4            0 46F2 A   
_video_param_table          0 0293 A   _video_save_pointer_table   0 35FC A   
_write_byte                 0 7BB8 A   _write_gfx_char_cga         0 52B8 A   
_write_gfx_char_lin         0 54BB A   _write_gfx_char_pl4         0 5145 A   
_write_word                 0 7BD0 A   biosfn_enable_cursor_emula+ 0 6C2B A   
biosfn_enable_default_pale+ 0 6BC7 A   biosfn_enable_grayscale_su+ 0 6C07 A   
biosfn_enable_video_addres+ 0 6BE9 A   biosfn_get_all_palette_reg  0 6330 A   
biosfn_get_ega_info         0 6B50 A   biosfn_get_single_palette_+ 0 62FE A   
biosfn_get_video_mode       0 61FB A   biosfn_group_0B             0 597A A   
biosfn_group_10             0 6222 A   biosfn_group_1A             0 6D28 A   
biosfn_read_all_dac_reg     0 6410 A   biosfn_read_display_code    0 6D31 A   
biosfn_read_overscan_borde+ 0 6322 A   biosfn_read_pel_mask        0 6443 A   
biosfn_read_single_dac_reg  0 63F5 A   biosfn_read_video_dac_stat+ 0 644E A   
biosfn_select_vert_res      0 6B74 A   biosfn_select_video_dac_co+ 0 63B2 A   
biosfn_set_all_dac_reg      0 638A A   biosfn_set_all_palette_reg  0 62AB A   
biosfn_set_border_color     0 5985 A   biosfn_set_display_code     0 6D46 A   
biosfn_set_overscan_border+ 0 62A3 A   biosfn_set_palette          0 59C4 A   
biosfn_set_pel_mask         0 6438 A   biosfn_set_single_dac_reg   0 6371 A   
biosfn_set_single_palette_+ 0 6289 A   biosfn_set_text_block_spec+ 0 68F6 A   
biosfn_toggle_intensity     0 62D8 A   bit8_clear                  0 921E A   
bit9_clear                  0 9225 A   bpp4_mode                   0 8FBF A   
dispi_get_bank              0 9109 A   dispi_get_bpp               0 907E A   
dispi_get_enable            0 90EB A   dispi_get_id                0 900D A   
dispi_get_virt_height       0 91C8 A   dispi_get_virt_width        0 91BA A   
dispi_get_x_offset          0 915E A   dispi_get_y_offset          0 917C A   
dispi_set_bank_farcall_err+ 0 9149 A   dispi_set_bank_farcall_get  0 913B A   
dispi_set_id                0 901B A   dispi_set_virt_width        0 91A7 A   
dispi_set_x_offset          0 914E A   dispi_set_y_offset          0 916C A   
get_bpp_noinc               0 9095 A   get_dac_16_page             0 647E A   
get_dac_palette_format      0 9C0F A   get_display_start           0 9BDC A   
get_display_window          0 9B64 A   get_logical_scan_line_leng+ 0 9B9C A   
get_palette_loop            0 6338 A   idiv_u                      0 65E4 A   
illegal_window              0 8F52 A   init_bios_area              0 35C4 A   
init_vga_card               0 3565 A   int10_end                   0 01FD A   
int10_group_10_unknown      0 6288 A   int10_normal                0 01EF A   
int10_test_0B               0 014C A   int10_test_1001             0 6228 A   
int10_test_1002             0 622E A   int10_test_1003             0 6234 A   
int10_test_1007             0 623B A   int10_test_1008             0 6242 A   
int10_test_1009             0 6249 A   int10_test_1010             0 6250 A   
int10_test_1012             0 6257 A   int10_test_1013             0 625E A   
int10_test_1015             0 6265 A   int10_test_1017             0 626C A   
int10_test_1018             0 6273 A   int10_test_1019             0 627A A   
int10_test_101A             0 6281 A   int10_test_101B             0 01A5 A   
int10_test_1103             0 0157 A   int10_test_12               0 0162 A   
int10_test_1A               0 0141 A   int10_test_4F               0 01B4 A   
int10_test_BL30             0 0172 A   int10_test_BL31             0 017D A   
int10_test_BL32             0 0187 A   int10_test_BL33             0 0191 A   
int10_test_BL34             0 019B A   int10_test_vbe_05           0 01C2 A   
int10_test_vbe_06           0 01CB A   int10_test_vbe_07           0 01D4 A   
int10_test_vbe_08           0 01DD A   int10_test_vbe_0A           0 01E6 A   
memcpyb_end                 0 7B5A A   memcpyw_end                 0 7B8A A   
memsetb_end                 0 7B07 A   memsetw_end                 0 7B2C A   
mode_ega_color              0 6B70 A   msg_vbe_init                0 8ECC A   
msg_vga_init                0 3581 A   no_4bpp_1                   0 9B94 A   
no_4bpp_2                   0 9BB1 A   no_actl_reg1                0 62A2 A   
no_actl_reg2                0 6321 A   no_vbe_flag                 0 9361 A   
no_vbe_interface            0 9345 A   no_vbe_mode                 0 9887 A   
read_dac_loop               0 6421 A   set_actl_normal             0 63EE A   
set_cga_palette_loop        0 59D1 A   set_dac_16_page             0 63E8 A   
set_dac_loop                0 639B A   set_dac_mode                0 9C0C A   
set_dac_page                0 63D5 A   set_dac_palette_format      0 9BF7 A   
set_display_start           0 9BCE A   set_display_window          0 9B54 A   
set_intensity_loop          0 59A3 A   set_logical_scan_line_byte+ 0 9B83 A   
set_logical_scan_line_pixe+ 0 9B99 A   set_low_border              0 599D A   
set_normal_dac              0 9C09 A   set_palette_loop            0 62BA A   
set_retcode                 0 6BC0 A   set_vert_res                0 6BB6 A   
set_width_svga              0 9198 A   set_xy_regs                 0 8FCB A   
vbe_03_ok                   0 9890 A   vbe_05_failed               0 9B6D A   
vbe_08_ok                   0 9C1B A   vbe_08_unsupported          0 9C1F A   
vbe_biosfn_display_window_+ 0 9B44 A   vbe_biosfn_return_current_+ 0 9870 A   
vbe_biosfn_return_protecte+ 0 9C24 A   vbe_biosfn_set_get_dac_pal+ 0 9BEC A   
vbe_biosfn_set_get_display+ 0 9BBE A   vbe_biosfn_set_get_logical+ 0 9B71 A   
vbe_display_info            0 934F A   vbe_init                    0 9321 A   
vert_res_200                0 6BAC A   vert_res_350                0 6BA2 A   
vert_res_400                0 6B96 A   vesa_pm_end                 0 900D A   
vesa_pm_io_ports_table      0 8F14 A   vesa_pm_set_display_start   0 8F57 A   
vesa_pm_set_display_start1  0 8F66 A   vesa_pm_set_display_window+ 0 8F2B A   
vesa_pm_set_window          0 8F20 A   vesa_pm_start               0 8F0C A   
vesa_pm_unimplemented       0 9008 A   vga_compat_end              0 92AB A   
vga_set_virt_width          0 918A A   vgabios_copyright           0 0054 A   
vgabios_date                0 0044 A   vgabios_end                 0 9C4F A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 010B A   
vgabios_int10_handler       0 0135 A   vgabios_license             0 0080 A   
vgabios_name                0 0022 A   vgabios_start               0 0000 A   
vgabios_version             0 0038 A   vgabios_website             0 00B5 A   

00000 errors
00000 warnings
