/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT MODIFY */

/*
 * schema-defined QAPI visitor function
 *
 * Copyright IBM, Corp. 2011
 *
 * Authors:
 *  Anthony Liguori   <aliguori@us.ibm.com>
 *
 * This work is licensed under the terms of the GNU LGPL, version 2.1 or later.
 * See the COPYING.LIB file in the top-level directory.
 *
 */

#ifndef TEST_QAPI_VISIT_H
#define TEST_QAPI_VISIT_H

#include "qapi/visitor.h"
#include "test-qapi-types.h"


#ifndef QAPI_VISIT_BUILTIN_VISITOR_DECL_H
#define QAPI_VISIT_BUILTIN_VISITOR_DECL_H

void visit_type_strList(Visitor *m, strList ** obj, const char *name, Error **errp);
void visit_type_intList(Visitor *m, intList ** obj, const char *name, Error **errp);
void visit_type_numberList(Visitor *m, numberList ** obj, const char *name, Error **errp);
void visit_type_boolList(Visitor *m, boolList ** obj, const char *name, Error **errp);
void visit_type_int8List(Visitor *m, int8List ** obj, const char *name, Error **errp);
void visit_type_int16List(Visitor *m, int16List ** obj, const char *name, Error **errp);
void visit_type_int32List(Visitor *m, int32List ** obj, const char *name, Error **errp);
void visit_type_int64List(Visitor *m, int64List ** obj, const char *name, Error **errp);
void visit_type_uint8List(Visitor *m, uint8List ** obj, const char *name, Error **errp);
void visit_type_uint16List(Visitor *m, uint16List ** obj, const char *name, Error **errp);
void visit_type_uint32List(Visitor *m, uint32List ** obj, const char *name, Error **errp);
void visit_type_uint64List(Visitor *m, uint64List ** obj, const char *name, Error **errp);

#endif /* QAPI_VISIT_BUILTIN_VISITOR_DECL_H */


void visit_type_EnumOne(Visitor *m, EnumOne * obj, const char *name, Error **errp);
void visit_type_EnumOneList(Visitor *m, EnumOneList ** obj, const char *name, Error **errp);

void visit_type_NestedEnumsOne(Visitor *m, NestedEnumsOne ** obj, const char *name, Error **errp);
void visit_type_NestedEnumsOneList(Visitor *m, NestedEnumsOneList ** obj, const char *name, Error **errp);

void visit_type_UserDefOne(Visitor *m, UserDefOne ** obj, const char *name, Error **errp);
void visit_type_UserDefOneList(Visitor *m, UserDefOneList ** obj, const char *name, Error **errp);

void visit_type_UserDefTwo(Visitor *m, UserDefTwo ** obj, const char *name, Error **errp);
void visit_type_UserDefTwoList(Visitor *m, UserDefTwoList ** obj, const char *name, Error **errp);

void visit_type_UserDefNested(Visitor *m, UserDefNested ** obj, const char *name, Error **errp);
void visit_type_UserDefNestedList(Visitor *m, UserDefNestedList ** obj, const char *name, Error **errp);

void visit_type_UserDefA(Visitor *m, UserDefA ** obj, const char *name, Error **errp);
void visit_type_UserDefAList(Visitor *m, UserDefAList ** obj, const char *name, Error **errp);

void visit_type_UserDefB(Visitor *m, UserDefB ** obj, const char *name, Error **errp);
void visit_type_UserDefBList(Visitor *m, UserDefBList ** obj, const char *name, Error **errp);

void visit_type_UserDefUnionKind(Visitor *m, UserDefUnionKind * obj, const char *name, Error **errp);

void visit_type_UserDefUnion(Visitor *m, UserDefUnion ** obj, const char *name, Error **errp);
void visit_type_UserDefUnionList(Visitor *m, UserDefUnionList ** obj, const char *name, Error **errp);

void visit_type_UserDefNativeListUnionKind(Visitor *m, UserDefNativeListUnionKind * obj, const char *name, Error **errp);

void visit_type_UserDefNativeListUnion(Visitor *m, UserDefNativeListUnion ** obj, const char *name, Error **errp);
void visit_type_UserDefNativeListUnionList(Visitor *m, UserDefNativeListUnionList ** obj, const char *name, Error **errp);

#endif
