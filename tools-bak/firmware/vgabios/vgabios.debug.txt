37202                                           19 ceiling result
37202                                           19 ceiling result
37202                                           19 ceiling result
37202                                           19 ceiling result
00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios-debug_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 void dispi_set_enable(enable);
00012                                           !BCC_EOS
00013                                           ! 6 Boolean vbe_has_vbe_display();
00014                                           !BCC_EOS
00015                                           ! 7 void vbe_biosfn_return_controller_information(AX, ES, DI);
00016                                           !BCC_EOS
00017                                           ! 8 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00018                                           !BCC_EOS
00019                                           ! 9 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 10 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00022                                           !BCC_EOS
00023                                           ! 11 void vbe_biosfn_set_get_palette_data(AX);
00024                                           !BCC_EOS
00025                                           ! 12 void vbe_biosfn_return_protected_mode_interface(AX);
00026                                           !BCC_EOS
00027                                           ! 13 typedef struct VbeInfoBlock
00028                                           ! 14 {
00029                                           ! 15    Bit8u VbeSignature[4];
00030                                           !BCC_EOS
00031                                           ! 16    Bit16u VbeVersion;
00032                                           !BCC_EOS
00033                                           ! 17    Bit16u OemStringPtr_Off;
00034                                           !BCC_EOS
00035                                           ! 18    Bit16u OemStringPtr_Seg;
00036                                           !BCC_EOS
00037                                           ! 19    Bit8u Capabilities[4];
00038                                           !BCC_EOS
00039                                           ! 20    Bit16u VideoModePtr_Off;
00040                                           !BCC_EOS
00041                                           ! 21    Bit16u VideoModePtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 22    Bit16u TotalMemory;
00044                                           !BCC_EOS
00045                                           ! 23    Bit16u OemSoftwareRev;
00046                                           !BCC_EOS
00047                                           ! 24    Bit16u OemVendorNamePtr_Off;
00048                                           !BCC_EOS
00049                                           ! 25    Bit16u OemVendorNamePtr_Seg;
00050                                           !BCC_EOS
00051                                           ! 26    Bit16u OemProductNamePtr_Off;
00052                                           !BCC_EOS
00053                                           ! 27    Bit16u OemProductNamePtr_Seg;
00054                                           !BCC_EOS
00055                                           ! 28    Bit16u OemProductRevPtr_Off;
00056                                           !BCC_EOS
00057                                           ! 29    Bit16u OemProductRevPtr_Seg;
00058                                           !BCC_EOS
00059                                           ! 30    Bit16u Reserved[111];
00060                                           !BCC_EOS
00061                                           ! 31    Bit8u OemData[256];
00062                                           !BCC_EOS
00063                                           ! 32 } VbeInfoBlock;
00064                                           !BCC_EOS
00065                                           ! 33 typedef struct ModeInfoBlockCompact
00066                                           ! 34 {
00067                                           ! 35    Bit16u ModeAttributes;
00068                                           !BCC_EOS
00069                                           ! 36    Bit8u WinAAttributes;
00070                                           !BCC_EOS
00071                                           ! 37    Bit8u WinBAttributes;
00072                                           !BCC_EOS
00073                                           ! 38    Bit16u WinGranularity;
00074                                           !BCC_EOS
00075                                           ! 39    Bit16u WinSize;
00076                                           !BCC_EOS
00077                                           ! 40    Bit16u WinASegment;
00078                                           !BCC_EOS
00079                                           ! 41    Bit16u WinBSegment;
00080                                           !BCC_EOS
00081                                           ! 42    Bit32u WinFuncPtr;
00082                                           !BCC_EOS
00083                                           ! 43    Bit16u BytesPerScanLine;
00084                                           !BCC_EOS
00085                                           ! 44    Bit16u XResolution;
00086                                           !BCC_EOS
00087                                           ! 45    Bit16u YResolution;
00088                                           !BCC_EOS
00089                                           ! 46    Bit8u XCharSize;
00090                                           !BCC_EOS
00091                                           ! 47    Bit8u YCharSize;
00092                                           !BCC_EOS
00093                                           ! 48    Bit8u NumberOfPlanes;
00094                                           !BCC_EOS
00095                                           ! 49    Bit8u BitsPerPixel;
00096                                           !BCC_EOS
00097                                           ! 50    Bit8u NumberOfBanks;
00098                                           !BCC_EOS
00099                                           ! 51    Bit8u MemoryModel;
00100                                           !BCC_EOS
00101                                           ! 52    Bit8u BankSize;
00102                                           !BCC_EOS
00103                                           ! 53    Bit8u NumberOfImagePages;
00104                                           !BCC_EOS
00105                                           ! 54    Bit8u Reserved_page;
00106                                           !BCC_EOS
00107                                           ! 55    Bit8u RedMaskSize;
00108                                           !BCC_EOS
00109                                           ! 56    Bit8u RedFieldPosition;
00110                                           !BCC_EOS
00111                                           ! 57    Bit8u GreenMaskSize;
00112                                           !BCC_EOS
00113                                           ! 58    Bit8u GreenFieldPosition;
00114                                           !BCC_EOS
00115                                           ! 59    Bit8u BlueMaskSize;
00116                                           !BCC_EOS
00117                                           ! 60    Bit8u BlueFieldPosition;
00118                                           !BCC_EOS
00119                                           ! 61    Bit8u RsvdMaskSize;
00120                                           !BCC_EOS
00121                                           ! 62    Bit8u RsvdFieldPosition;
00122                                           !BCC_EOS
00123                                           ! 63    Bit8u DirectColorModeInfo;
00124                                           !BCC_EOS
00125                                           ! 64    Bit32u PhysBasePtr;
00126                                           !BCC_EOS
00127                                           ! 65    Bit32u OffScreenMemOffset;
00128                                           !BCC_EOS
00129                                           ! 66    Bit16u OffScreenMemSize;
00130                                           !BCC_EOS
00131                                           ! 67    Bit16u LinBytesPerScanLine;
00132                                           !BCC_EOS
00133                                           ! 68    Bit8u BnkNumberOfPages;
00134                                           !BCC_EOS
00135                                           ! 69    Bit8u LinNumberOfPages;
00136                                           !BCC_EOS
00137                                           ! 70    Bit8u LinRedMaskSize;
00138                                           !BCC_EOS
00139                                           ! 71    Bit8u LinRedFieldPosition;
00140                                           !BCC_EOS
00141                                           ! 72    Bit8u LinGreenMaskSize;
00142                                           !BCC_EOS
00143                                           ! 73    Bit8u LinGreenFi
00144                                           ! 73 eldPosition;
00145                                           !BCC_EOS
00146                                           ! 74    Bit8u LinBlueMaskSize;
00147                                           !BCC_EOS
00148                                           ! 75    Bit8u LinBlueFieldPosition;
00149                                           !BCC_EOS
00150                                           ! 76    Bit8u LinRsvdMaskSize;
00151                                           !BCC_EOS
00152                                           ! 77    Bit8u LinRsvdFieldPosition;
00153                                           !BCC_EOS
00154                                           ! 78    Bit32u MaxPixelClock;
00155                                           !BCC_EOS
00156                                           ! 79 } ModeInfoBlockCompact;
00157                                           !BCC_EOS
00158                                           ! 80 typedef struct ModeInfoBlock
00159                                           ! 81 {
00160                                           ! 82    Bit16u ModeAttributes;
00161                                           !BCC_EOS
00162                                           ! 83    Bit8u WinAAttributes;
00163                                           !BCC_EOS
00164                                           ! 84    Bit8u WinBAttributes;
00165                                           !BCC_EOS
00166                                           ! 85    Bit16u WinGranularity;
00167                                           !BCC_EOS
00168                                           ! 86    Bit16u WinSize;
00169                                           !BCC_EOS
00170                                           ! 87    Bit16u WinASegment;
00171                                           !BCC_EOS
00172                                           ! 88    Bit16u WinBSegment;
00173                                           !BCC_EOS
00174                                           ! 89    Bit32u WinFuncPtr;
00175                                           !BCC_EOS
00176                                           ! 90    Bit16u BytesPerScanLine;
00177                                           !BCC_EOS
00178                                           ! 91    Bit16u XResolution;
00179                                           !BCC_EOS
00180                                           ! 92    Bit16u YResolution;
00181                                           !BCC_EOS
00182                                           ! 93    Bit8u XCharSize;
00183                                           !BCC_EOS
00184                                           ! 94    Bit8u YCharSize;
00185                                           !BCC_EOS
00186                                           ! 95    Bit8u NumberOfPlanes;
00187                                           !BCC_EOS
00188                                           ! 96    Bit8u BitsPerPixel;
00189                                           !BCC_EOS
00190                                           ! 97    Bit8u NumberOfBanks;
00191                                           !BCC_EOS
00192                                           ! 98    Bit8u MemoryModel;
00193                                           !BCC_EOS
00194                                           ! 99    Bit8u BankSize;
00195                                           !BCC_EOS
00196                                           ! 100    Bit8u NumberOfImagePages;
00197                                           !BCC_EOS
00198                                           ! 101    Bit8u Reserved_page;
00199                                           !BCC_EOS
00200                                           ! 102    Bit8u RedMaskSize;
00201                                           !BCC_EOS
00202                                           ! 103    Bit8u RedFieldPosition;
00203                                           !BCC_EOS
00204                                           ! 104    Bit8u GreenMaskSize;
00205                                           !BCC_EOS
00206                                           ! 105    Bit8u GreenFieldPosition;
00207                                           !BCC_EOS
00208                                           ! 106    Bit8u BlueMaskSize;
00209                                           !BCC_EOS
00210                                           ! 107    Bit8u BlueFieldPosition;
00211                                           !BCC_EOS
00212                                           ! 108    Bit8u RsvdMaskSize;
00213                                           !BCC_EOS
00214                                           ! 109    Bit8u RsvdFieldPosition;
00215                                           !BCC_EOS
00216                                           ! 110    Bit8u DirectColorModeInfo;
00217                                           !BCC_EOS
00218                                           ! 111    Bit32u PhysBasePtr;
00219                                           !BCC_EOS
00220                                           ! 112    Bit32u OffScreenMemOffset;
00221                                           !BCC_EOS
00222                                           ! 113    Bit16u OffScreenMemSize;
00223                                           !BCC_EOS
00224                                           ! 114    Bit16u LinBytesPerScanLine;
00225                                           !BCC_EOS
00226                                           ! 115    Bit8u BnkNumberOfPages;
00227                                           !BCC_EOS
00228                                           ! 116    Bit8u LinNumberOfPages;
00229                                           !BCC_EOS
00230                                           ! 117    Bit8u LinRedMaskSize;
00231                                           !BCC_EOS
00232                                           ! 118    Bit8u LinRedFieldPosition;
00233                                           !BCC_EOS
00234                                           ! 119    Bit8u LinGreenMaskSize;
00235                                           !BCC_EOS
00236                                           ! 120    Bit8u LinGreenFieldPosition;
00237                                           !BCC_EOS
00238                                           ! 121    Bit8u LinBlueMaskSize;
00239                                           !BCC_EOS
00240                                           ! 122    Bit8u LinBlueFieldPosition;
00241                                           !BCC_EOS
00242                                           ! 123    Bit8u LinRsvdMaskSize;
00243                                           !BCC_EOS
00244                                           ! 124    Bit8u LinRsvdFieldPosition;
00245                                           !BCC_EOS
00246                                           ! 125    Bit32u MaxPixelClock;
00247                                           !BCC_EOS
00248                                           ! 126    Bit8u Reserved[189];
00249                                           !BCC_EOS
00250                                           ! 127 } ModeInfoBlock;
00251                                           !BCC_EOS
00252                                           ! 128 typedef struct ModeInfoListItem
00253                                           ! 129 {
00254                                           ! 130   Bit16u mode;
00255                                           !BCC_EOS
00256                                           ! 131   ModeInfoBlockCompact info;
00257                                           !BCC_EOS
00258                                           ! 132 } ModeInfoListItem;
00259                                           !BCC_EOS
00260                                           ! 133 static Bit8u read_byte();
00261                                           !BCC_EOS
00262                                           ! 134 static Bit16u read_word();
00263                                           !BCC_EOS
00264                                           ! 135 static void write_byte();
00265                                           !BCC_EOS
00266                                           ! 136 static void write_word();
00267                                           !BCC_EOS
00268                                           ! 137 static Bit8u inb();
00269                                           !BCC_EOS
00270                                           ! 138 static Bit16u inw();
00271                                           !BCC_EOS
00272                                           ! 139 static void outb();
00273                                           !BCC_EOS
00274                                           ! 140 static void outw();
00275                                           !BCC_EOS
00276                                           ! 141 static Bit16u get_SS();
00277                                           !BCC_EOS
00278                                           ! 142 static void printf();
00279                                           !BCC_EOS
00280                                           ! 143 static void unimplemented();
00281                                           !BCC_EOS
00282                                           ! 144 static void unknown();
00283                                           !BCC_EOS
00284                                           ! 145 static Bit8u find_vga_entry();
00285                                           !BCC_EOS
00286                                           ! 146 static void memsetb();
00287                                           !BCC_EOS
00288                                           ! 147 static void memsetw();
00289                                           !BCC_EOS
00290                                           ! 148 static void memcpyb();
00291                                           !BCC_EOS
00292                                           ! 149 static void memcpyw();
00293                                           !BCC_EOS
00294                                           ! 150 static void biosfn_set_video_mode();
00295                                           !BCC_EOS
00296                                           ! 151 static void biosfn_set_cursor_shape();
00297                                           !BCC_EOS
00298                                           ! 152 static void biosfn_set_cursor_pos();
00299                                           !BCC_EOS
00300                                           ! 153 static void biosfn_get_cursor_pos();
00301                                           !BCC_EOS
00302                                           ! 154 static void biosfn_set_
00303                                           ! 154 active_page();
00304                                           !BCC_EOS
00305                                           ! 155 static void biosfn_scroll();
00306                                           !BCC_EOS
00307                                           ! 156 static void biosfn_read_char_attr();
00308                                           !BCC_EOS
00309                                           ! 157 static void biosfn_write_char_attr();
00310                                           !BCC_EOS
00311                                           ! 158 static void biosfn_write_char_only();
00312                                           !BCC_EOS
00313                                           ! 159 static void biosfn_write_pixel();
00314                                           !BCC_EOS
00315                                           ! 160 static void biosfn_read_pixel();
00316                                           !BCC_EOS
00317                                           ! 161 static void biosfn_write_teletype();
00318                                           !BCC_EOS
00319                                           ! 162 static void biosfn_perform_gray_scale_summing();
00320                                           !BCC_EOS
00321                                           ! 163 static void biosfn_load_text_user_pat();
00322                                           !BCC_EOS
00323                                           ! 164 static void biosfn_load_text_8_14_pat();
00324                                           !BCC_EOS
00325                                           ! 165 static void biosfn_load_text_8_8_pat();
00326                                           !BCC_EOS
00327                                           ! 166 static void biosfn_load_text_8_16_pat();
00328                                           !BCC_EOS
00329                                           ! 167 static void biosfn_load_gfx_8_8_chars();
00330                                           !BCC_EOS
00331                                           ! 168 static void biosfn_load_gfx_user_chars();
00332                                           !BCC_EOS
00333                                           ! 169 static void biosfn_load_gfx_8_14_chars();
00334                                           !BCC_EOS
00335                                           ! 170 static void biosfn_load_gfx_8_8_dd_chars();
00336                                           !BCC_EOS
00337                                           ! 171 static void biosfn_load_gfx_8_16_chars();
00338                                           !BCC_EOS
00339                                           ! 172 static void biosfn_get_font_info();
00340                                           !BCC_EOS
00341                                           ! 173 static void biosfn_alternate_prtsc();
00342                                           !BCC_EOS
00343                                           ! 174 static void biosfn_switch_video_interface();
00344                                           !BCC_EOS
00345                                           ! 175 static void biosfn_enable_video_refresh_control();
00346                                           !BCC_EOS
00347                                           ! 176 static void biosfn_write_string();
00348                                           !BCC_EOS
00349                                           ! 177 static void biosfn_read_state_info();
00350                                           !BCC_EOS
00351                                           ! 178 static void biosfn_read_video_state_size();
00352                                           !BCC_EOS
00353                                           ! 179 static Bit16u biosfn_save_video_state();
00354                                           !BCC_EOS
00355                                           ! 180 static Bit16u biosfn_restore_video_state();
00356                                           !BCC_EOS
00357                                           ! 181 extern Bit8u video_save_pointer_table[];
00358                                           !BCC_EOS
00359                                           ! 182 #asm
00360                                           !BCC_ASM
00361                                           MACRO SET_INT_VECTOR
00362                                             push ds
00363                                             xor ax, ax
00364                                             mov ds, ax
00365                                             mov ax, ?3
00366                                             mov ?1*4, ax
00367                                             mov ax, ?2
00368                                             mov ?1*4+2, ax
00369                                             pop ds
00370                                           MEND
00371                                           ! 193 endasm
00372                                           !BCC_ENDASM
00373                                           ! 194 #asm
00374                                           !BCC_ASM
00375                                           
00376 0000                                      .rom
00377 0000                                      .org 0
00378                                           use16 386
00379                       00000000            vgabios_start:
00380 0000                        55            .byte 0x55, 0xaa
00381 0002                        40            .byte 0x40
00382                       00000003            vgabios_entry_point:
00383 0003           E9         0105              jmp vgabios_init_func
00384 001E                                      .org 0x1e
00385 001E                        49            .ascii "IBM"
00386 0021                        00            .byte 0x00
00387                       00000022            vgabios_name:
00388 0022                        50            .ascii "Plex86/Bochs VGABios"
00389 0036                        20            .ascii " "
00390 0037                        00            .byte 0x00
00391                       00000038            vgabios_version:
00392 0038                        63            .ascii "current-cvs"
00393 0043                        20            .ascii " "
00394                       00000044            vgabios_date:
00395 0044                        31            .ascii "18 12月 2015"
00396 0051                        0A            .byte 0x0a,0x0d
00397 0053                        00            .byte 0x00
00398                       00000054            vgabios_copyright:
00399 0054                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00400 007D                        0A            .byte 0x0a,0x0d
00401 007F                        00            .byte 0x00
00402                       00000080            vgabios_license:
00403 0080                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00404 00B0                        0A            .byte 0x0a,0x0d
00405 00B2                        0A            .byte 0x0a,0x0d
00406 00B4                        00            .byte 0x00
00407                       000000B5            vgabios_website:
00408 00B5                        50            .ascii "Please visit :"
00409 00C3                        0A            .byte 0x0a,0x0d
00410                                           ;;.ascii " . http://www.plex86.org"
00411                                           ;;.byte 0x0a,0x0d
00412 00C5                        20            .ascii " . http://bochs.sourceforge.net"
00413 00E4                        0A            .byte 0x0a,0x0d
00414 00E6                        20            .ascii " . http://www.nongnu.org/vgabios"
00415 0106                        0A            .byte 0x0a,0x0d
00416 0108                        0A            .byte 0x0a,0x0d
00417 010A                        00            .byte 0x00
00418                                           ;; ============================================================================================
00419                                           ;;
00420                                           ;; Init Entry point
00421                                           ;;
00422                                           ;; ============================================================================================
00423                       0000010B            vgabios_init_func:
00424                                           ;; init vga card
00425 010B           E8         3465              call init_vga_card
00426                                           ;; init basic bios vars
00427 010E           E8         34C1              call init_bios_area
00428                                           ;; init vbe functions
00429 0111           E8         93B3              call vbe_init
00430                                           ;; set int10 vect
00431                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0114           1E                           push ds
 +a   0115           31C0                         xor ax, ax
 +a   0117           8ED8                         mov ds, ax
 +a   0119           B8                   0135    mov ax,  #vgabios_int10_handler
 +a   011C           A3         0040              mov 0x10*4, ax
 +a   011F           B8                   C000    mov ax,  #0xC000
 +a   0122           A3         0042              mov 0x10*4+2, ax
 +a   0125           1F                           pop ds
00432                                           ;; display splash screen
00433 0126           E8         34FD              call _display_splash_screen
00434                                           ;; init video mode and clear the screen
00435 0129           B8                   0003    mov ax,#0x0003
00436 012C           CD                     10    int #0x10
00437                                           ;; show info
00438 012E           E8         34F6              call _display_info
00439                                           ;; show vbe info
00440 0131           E8         93C1              call vbe_display_info
00441 0134           CB                           retf
00442                                           ! 262 endasm
00443                                           !BCC_ENDASM
00444                                           ! 263 #asm
00445                                           !BCC_ASM
00446                       00000135            vgabios_int10_handler:
00447 0135           9C                           pushf
00448 0136           06                           push es
00449 0137           1E                           push ds
00450 0138           60                           pusha
00451 0139           BB                   C000    mov bx, #0xc000
00452 013C           8EDB                         mov ds, bx
00453 013E           E8         352B              call _int10_debugmsg
00454 0141           61                           popa
00455 0142           1F                           pop ds
00456 0143           07                           pop es
00457 0144           80FC                   0F    cmp ah, #0x0f
00458 0147           75           06              jne int10_test_1A
00459 0149           E8         6177              call biosfn_get_video_mode
00460 014C           E9         00BC              jmp int10_end
00461                       0000014F            int10_test_1A:
00462 014F           80FC                   1A    cmp ah, #0x1a
00463 0152           75           06              jne int10_test_0B
00464 0154           E8         6D1B              call biosfn_group_1A
00465 0157           E9         00B1              jmp int10_end
00466                       0000015A            int10_test_0B:
00467 015A           80FC                   0B    cmp ah, #0x0b
00468 015D           75           06              jne int10_test_1103
00469 015F           E8         58D2              call biosfn_group_0B
00470 0162           E9         00A6              jmp int10_end
00471                       00000165            int10_test_1103:
00472 0165           3D                   1103    cmp ax, #0x1103
00473 0168           75           06              jne int10_test_12
00474 016A           E8         6854              call biosfn_set_text_block_specifier
00475 016D           E9         009B              jmp int10_end
00476                       00000170            int10_test_12:
00477 0170           80FC                   12    cmp ah, #0x12
00478 0173           75           3E              jne int10_test_101B
00479 0175           80FB                   10    cmp bl, #0x10
00480 0178           75           06              jne int10_test_BL30
00481 017A           E8         6AD2              call biosfn_get_ega_info
00482 017D           E9         008B              jmp int10_end
00483                       00000180            int10_test_BL30:
00484 0180           80FB                   30    cmp bl, #0x30
00485 0183           75           06              jne int10_test_BL31
00486 0185           E8         6AF2              call biosfn_select_vert_res
00487 0188           E9         0080              jmp int10_end
00488                       0000018B            int10_test_BL31:
00489 018B           80FB                   31    cmp bl, #0x31
00490 018E           75           05              jne int10_test_BL32
00491 0190           E8         6B70              call biosfn_enable_default_palette_loading
00492 0193           EB           76              jmp int10_end
00493                       00000195            int10_test_BL32:
00494 0195           80FB                   32    cmp bl, #0x32
00495 0198           75           05              jne int10_test_BL33
00496 019A           E8         6B88              call biosfn_enable_video_addressing
00497 019D           EB           6C              jmp int10_end
00498                       0000019F            int10_test_BL33:
00499 019F           80FB                   33    cmp bl, #0x33
00500 01A2           75           05              jne int10_test_BL34
00501 01A4           E8         6B9C              call biosfn_enable_grayscale_summing
00502 01A7           EB           62              jmp int10_end
00503                       000001A9            int10_test_BL34:
00504 01A9           80FB                   34    cmp bl, #0x34
00505 01AC           75           4F              jne int10_normal
00506 01AE           E8         6BB6              call biosfn_enable_cursor_emulation
00507 01B1           EB           58              jmp int10_end
00508                       000001B3            int10_test_101B:
00509 01B3           3D                   101B    cmp ax, #0x101b
00510 01B6           74           45              je int10_normal
00511 01B8           80FC                   10    cmp ah, #0x10
00512 01BB           75           05              jne int10_test_4F
00513 01BD           E8         612A              call biosfn_group_10
00514 01C0           EB           49              jmp int10_end
00515                       000001C2            int10_test_4F:
00516 01C2           80FC                   4F    cmp ah, #0x4f
00517 01C5           75           36              jne int10_normal
00518 01C7           3C                     03    cmp al, #0x03
00519 01C9           75           05              jne int10_test_vbe_05
00520 01CB           E8         9900              call vbe_biosfn_return_current_mode
00521 01CE           EB           3B              jmp int10_end
00522                       000001D0            int10_test_vbe_05:
00523 01D0           3C                     05    cmp al, #0x05
00524 01D2           75           05              jne int10_test_vbe_06
00525 01D4           E8         9BF2              call vbe_biosfn_display_window_control
00526 01D7           EB           32              jmp int10_end
00527                       000001D9            int10_test_vbe_06:
00528 01D9           3C                     06    cmp al, #0x06
00529 01DB           75           05              jne int10_test_vbe_07
00530 01DD           E8         9C16              call vbe_biosfn_set_get_logical_scan_line_length
00531 01E0           EB           29              jmp int10_end
00532                       000001E2            int10_test_vbe_07:
00533 01E2           3C                     07    cmp al, #0x07
00534 01E4           75           05              jne int10_test_vbe_08
00535 01E6           E8         9C5A              call vbe_biosfn_set_get_display_start
00536 01E9           EB           20              jmp int10_end
00537                       000001EB            int10_test_vbe_08:
00538 01EB           3C                     08    cmp al, #0x08
00539 01ED           75           05              jne int10_test_vbe_0A
00540 01EF           E8         9C7F              call vbe_biosfn_set_get_dac_palette_format
00541 01F2           EB           17              jmp int10_end
00542                       000001F4            int10_test_vbe_0A:
00543 01F4           3C                     0A    cmp al, #0x0A
00544 01F6           75           05              jne int10_normal
00545 01F8           E8         9CAE              call vbe_biosfn_return_protected_mode_interface
00546 01FB           EB           0E              jmp int10_end
00547                       000001FD            int10_normal:
00548 01FD           06                           push es
00549 01FE           1E                           push ds
00550 01FF           60                           pusha
00551                                           ;; We have to set ds to access the right data segment
00552 0200           BB                   C000    mov bx, #0xc000
00553 0203           8EDB                         mov ds, bx
00554 0205           E8         3495              call _int10_func
00555 0208           61                           popa
00556 0209           1F                           pop ds
00557 020A           07                           pop es
00558                       0000020B            int10_end:
00559 020B           9D                           popf
00560 020C           CF                           iret
00561                                           ! 379 endasm
00562                                           !BCC_ENDASM
00563                                           ! 380 typedef struct
00564                                           ! 381 {Bit8u svgamode;
00565                                           !BCC_EOS
00566                                           ! 382  Bit8u class;
00567                                           !BCC_EOS
00568                                           ! 383  Bit8u memmodel;
00569                                           !BCC_EOS
00570                                           ! 384  Bit8u pixbits;
00571                                           !BCC_EOS
00572                                           ! 385  Bit16u sstart;
00573                                           !BCC_EOS
00574                                           ! 386  Bit8u pelmask;
00575                                           !BCC_EOS
00576                                           ! 387  Bit8u dacmodel;
00577                                           !BCC_EOS
00578                                           ! 388 } VGAMODES;
00579                                           !BCC_EOS
00580                                           ! 389 static VGAMODES vga_modes[15 +1]=
00581                                           ! 390 {
00582                                           
00583                       0000020D            _vga_modes:
00584                                           ! 391  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00585 020D                        00            .byte	0
00586 020E                        00            .byte	0
00587 020F                        00            .byte	0
00588 0210                        04            .byte	4
00589 0211                      B800            .word	$B800
00590 0213                        FF            .byte	$FF
00591 0214                        02            .byte	2
00592                                           ! 392  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00593 0215                        01            .byte	1
00594 0216                        00            .byte	0
00595 0217                        00            .byte	0
00596 0218                        04            .byte	4
00597 0219                      B800            .word	$B800
00598 021B                        FF            .byte	$FF
00599 021C                        02            .byte	2
00600                                           ! 393  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00601 021D                        02            .byte	2
00602 021E                        00            .byte	0
00603 021F                        00            .byte	0
00604 0220                        04            .byte	4
00605 0221                      B800            .word	$B800
00606 0223                        FF            .byte	$FF
00607 0224                        02            .byte	2
00608                                           ! 394  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00609 0225                        03            .byte	3
00610 0226                        00            .byte	0
00611 0227                        00            .byte	0
00612 0228                        04            .byte	4
00613 0229                      B800            .word	$B800
00614 022B                        FF            .byte	$FF
00615 022C                        02            .byte	2
00616                                           ! 395  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00617 022D                        04            .byte	4
00618 022E                        01            .byte	1
00619 022F                        02            .byte	2
00620 0230                        02            .byte	2
00621 0231                      B800            .word	$B800
00622 0233                        FF            .byte	$FF
00623 0234                        01            .byte	1
00624                                           ! 396  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00625 0235                        05            .byte	5
00626 0236                        01            .byte	1
00627 0237                        02            .byte	2
00628 0238                        02            .byte	2
00629 0239                      B800            .word	$B800
00630 023B                        FF            .byte	$FF
00631 023C                        01            .byte	1
00632                                           ! 397  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00633 023D                        06            .byte	6
00634 023E                        01            .byte	1
00635 023F                        02            .byte	2
00636 0240                        01            .byte	1
00637 0241                      B800            .word	$B800
00638 0243                        FF            .byte	$FF
00639 0244                        01            .byte	1
00640                                           ! 398  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00641 0245                        07            .byte	7
00642 0246                        00            .byte	0
00643 0247                        01            .byte	1
00644 0248                        04            .byte	4
00645 0249                      B000            .word	$B000
00646 024B                        FF            .byte	$FF
00647 024C                        00            .byte	0
00648                                           ! 399  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00649 024D                        0D            .byte	$D
00650 024E                        01            .byte	1
00651 024F                        04            .byte	4
00652 0250                        04            .byte	4
00653 0251                      A000            .word	$A000
00654 0253                        FF            .byte	$FF
00655 0254                        01            .byte	1
00656                                           ! 400  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00657 0255                        0E            .byte	$E
00658 0256                        01            .byte	1
00659 0257                        04            .byte	4
00660 0258                        04            .byte	4
00661 0259                      A000            .word	$A000
00662 025B                        FF            .byte	$FF
00663 025C                        01            .byte	1
00664                                           ! 401  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00665 025D                        0F            .byte	$F
00666 025E                        01            .byte	1
00667 025F                        03            .byte	3
00668 0260                        01            .byte	1
00669 0261                      A000            .word	$A000
00670 0263                        FF            .byte	$FF
00671 0264                        00            .byte	0
00672                                           ! 402  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00673 0265                        10            .byte	$10
00674 0266                        01            .byte	1
00675 0267                        04            .byte	4
00676 0268                        04            .byte	4
00677 0269                      A000            .word	$A000
00678 026B                        FF            .byte	$FF
00679 026C                        02            .byte	2
00680                                           ! 403  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00681 026D                        11            .byte	$11
00682 026E                        01            .byte	1
00683 026F                        03            .byte	3
00684 0270                        01            .byte	1
00685 0271                      A000            .word	$A000
00686 0273                        FF            .byte	$FF
00687 0274                        02            .byte	2
00688                                           ! 404  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00689 0275                        12            .byte	$12
00690 0276                        01            .byte	1
00691 0277                        04            .byte	4
00692 0278                        04            .byte	4
00693 0279                      A000            .word	$A000
00694 027B                        FF            .byte	$FF
00695 027C                        02            .byte	2
00696                                           ! 405  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00697 027D                        13            .byte	$13
00698 027E                        01            .byte	1
00699 027F                        05            .byte	5
00700 0280                        08            .byte	8
00701 0281                      A000            .word	$A000
00702 0283                        FF            .byte	$FF
00703 0284                        03            .byte	3
00704                                           ! 406  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00705 0285                        6A            .byte	$6A
00706 0286                        01            .byte	1
00707 0287                        04            .byte	4
00708 0288                        04            .byte	4
00709 0289                      A000            .word	$A000
00710 028B                        FF            .byte	$FF
00711 028C                        02            .byte	2
00712                                           ! 407 };
00713                                           !BCC_EOS
00714                                           ! 408 static Bit8u line_to_vpti[15 +1]={
00715                       0000028D            _line_to_vpti:
00716                                           ! 409     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00717 028D                        17            .byte	$17
00718 028E                        17            .byte	$17
00719 028F                        18            .byte	$18
00720 0290                        18            .byte	$18
00721 0291                        04            .byte	4
00722 0292                        05            .byte	5
00723 0293                        06            .byte	6
00724 0294                        07            .byte	7
00725                                           ! 410     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00726 0295                        0D            .byte	$D
00727 0296                        0E            .byte	$E
00728 0297                        11            .byte	$11
00729 0298                        12            .byte	$12
00730 0299                        1A            .byte	$1A
00731 029A                        1B            .byte	$1B
00732 029B                        1C            .byte	$1C
00733 029C                        1D            .byte	$1D
00734                                           ! 411 };
00735                                           !BCC_EOS
00736                                           ! 412 static Bit8u dac_regs[3 +1]=
00737                                           ! 413 {0x3f,0x3f,0x3f,0xff};
00738                       0000029D            _dac_regs:
00739 029D                        3F            .byte	$3F
00740 029E                        3F            .byte	$3F
00741 029F                        3F            .byte	$3F
00742 02A0                        FF            .byte	$FF
00743                                           !BCC_EOS
00744                                           ! 414 typedef struct {
00745                                           ! 415     Bit8u twidth;
00746                                           !BCC_EOS
00747                                           ! 416     Bit8u theightm1;
00748                                           !BCC_EOS
00749                                           ! 417     Bit8u cheight;
00750                                           !BCC_EOS
00751                                           ! 418     Bit8u slength_l;
00752                                           !BCC_EOS
00753                                           ! 419     Bit8u slength_h
00754                                           ! 419 ;
00755                                           !BCC_EOS
00756                                           ! 420     Bit8u sequ_regs[4];
00757                                           !BCC_EOS
00758                                           ! 421     Bit8u miscreg;
00759                                           !BCC_EOS
00760                                           ! 422     Bit8u crtc_regs[25];
00761                                           !BCC_EOS
00762                                           ! 423     Bit8u actl_regs[20];
00763                                           !BCC_EOS
00764                                           ! 424     Bit8u grdc_regs[9];
00765                                           !BCC_EOS
00766                                           ! 425 } VideoParamTableEntry;
00767                                           !BCC_EOS
00768                                           ! 426 static VideoParamTableEntry video_param_table[30] = {
00769                       000002A1            _video_param_table:
00770                                           ! 427 {
00771                                           ! 428  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00772 02A1                        00            .byte	0
00773 02A2                        00            .byte	0
00774 02A3                        00            .byte	0
00775 02A4                        00            .byte	0
00776 02A5                        00            .byte	0
00777 02A6                        00            .byte	0
00778 02A7                        00            .byte	0
00779 02A8                        00            .byte	0
00780                                           ! 429  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00781 02A9                        00            .byte	0
00782 02AA                        00            .byte	0
00783 02AB                        00            .byte	0
00784 02AC                        00            .byte	0
00785 02AD                        00            .byte	0
00786 02AE                        00            .byte	0
00787 02AF                        00            .byte	0
00788 02B0                        00            .byte	0
00789                                           ! 430  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00790 02B1                        00            .byte	0
00791 02B2                        00            .byte	0
00792 02B3                        00            .byte	0
00793 02B4                        00            .byte	0
00794 02B5                        00            .byte	0
00795 02B6                        00            .byte	0
00796 02B7                        00            .byte	0
00797 02B8                        00            .byte	0
00798                                           ! 431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00799 02B9                        00            .byte	0
00800 02BA                        00            .byte	0
00801 02BB                        00            .byte	0
00802 02BC                        00            .byte	0
00803 02BD                        00            .byte	0
00804 02BE                        00            .byte	0
00805 02BF                        00            .byte	0
00806 02C0                        00            .byte	0
00807                                           ! 432  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00808 02C1                        00            .byte	0
00809 02C2                        00            .byte	0
00810 02C3                        00            .byte	0
00811 02C4                        00            .byte	0
00812 02C5                        00            .byte	0
00813 02C6                        00            .byte	0
00814 02C7                        00            .byte	0
00815 02C8                        00            .byte	0
00816                                           ! 433  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00817 02C9                        00            .byte	0
00818 02CA                        00            .byte	0
00819 02CB                        00            .byte	0
00820 02CC                        00            .byte	0
00821 02CD                        00            .byte	0
00822 02CE                        00            .byte	0
00823 02CF                        00            .byte	0
00824 02D0                        00            .byte	0
00825                                           ! 434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00826 02D1                        00            .byte	0
00827 02D2                        00            .byte	0
00828 02D3                        00            .byte	0
00829 02D4                        00            .byte	0
00830 02D5                        00            .byte	0
00831 02D6                        00            .byte	0
00832 02D7                        00            .byte	0
00833 02D8                        00            .byte	0
00834                                           ! 435  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00835 02D9                        00            .byte	0
00836 02DA                        00            .byte	0
00837 02DB                        00            .byte	0
00838 02DC                        00            .byte	0
00839 02DD                        00            .byte	0
00840 02DE                        00            .byte	0
00841 02DF                        00            .byte	0
00842 02E0                        00            .byte	0
00843                                           ! 436 },
00844                                           ! 437 {
00845                                           ! 438  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00846 02E1                        00            .byte	0
00847 02E2                        00            .byte	0
00848 02E3                        00            .byte	0
00849 02E4                        00            .byte	0
00850 02E5                        00            .byte	0
00851 02E6                        00            .byte	0
00852 02E7                        00            .byte	0
00853 02E8                        00            .byte	0
00854                                           ! 439  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00855 02E9                        00            .byte	0
00856 02EA                        00            .byte	0
00857 02EB                        00            .byte	0
00858 02EC                        00            .byte	0
00859 02ED                        00            .byte	0
00860 02EE                        00            .byte	0
00861 02EF                        00            .byte	0
00862 02F0                        00            .byte	0
00863                                           ! 440  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00864 02F1                        00            .byte	0
00865 02F2                        00            .byte	0
00866 02F3                        00            .byte	0
00867 02F4                        00            .byte	0
00868 02F5                        00            .byte	0
00869 02F6                        00            .byte	0
00870 02F7                        00            .byte	0
00871 02F8                        00            .byte	0
00872                                           ! 441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00873 02F9                        00            .byte	0
00874 02FA                        00            .byte	0
00875 02FB                        00            .byte	0
00876 02FC                        00            .byte	0
00877 02FD                        00            .byte	0
00878 02FE                        00            .byte	0
00879 02FF                        00            .byte	0
00880 0300                        00            .byte	0
00881                                           ! 442  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00882 0301                        00            .byte	0
00883 0302                        00            .byte	0
00884 0303                        00            .byte	0
00885 0304                        00            .byte	0
00886 0305                        00            .byte	0
00887 0306                        00            .byte	0
00888 0307                        00            .byte	0
00889 0308                        00            .byte	0
00890                                           ! 443  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00891 0309                        00            .byte	0
00892 030A                        00            .byte	0
00893 030B                        00            .byte	0
00894 030C                        00            .byte	0
00895 030D                        00            .byte	0
00896 030E                        00            .byte	0
00897 030F                        00            .byte	0
00898 0310                        00            .byte	0
00899                                           ! 444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00900 0311                        00            .byte	0
00901 0312                        00            .byte	0
00902 0313                        00            .byte	0
00903 0314                        00            .byte	0
00904 0315                        00            .byte	0
00905 0316                        00            .byte	0
00906 0317                        00            .byte	0
00907 0318                        00            .byte	0
00908                                           ! 445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00909 0319                        00            .byte	0
00910 031A                        00            .byte	0
00911 031B                        00            .byte	0
00912 031C                        00            .byte	0
00913 031D                        00            .byte	0
00914 031E                        00            .byte	0
00915 031F                        00            .byte	0
00916 0320                        00            .byte	0
00917                                           ! 446 },
00918                                           ! 447 {
00919                                           ! 448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00920 0321                        00            .byte	0
00921 0322                        00            .byte	0
00922 0323                        00            .byte	0
00923 0324                        00            .byte	0
00924 0325                        00            .byte	0
00925 0326                        00            .byte	0
00926 0327                        00            .byte	0
00927 0328                        00            .byte	0
00928                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00929 0329                        00            .byte	0
00930 032A                        00            .byte	0
00931 032B                        00            .byte	0
00932 032C                        00            .byte	0
00933 032D                        00            .byte	0
00934 032E                        00            .byte	0
00935 032F                        00            .byte	0
00936 0330                        00            .byte	0
00937                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00938 0331                        00            .byte	0
00939 0332                        00            .byte	0
00940 0333                        00            .byte	0
00941 0334                        00            .byte	0
00942 0335                        00            .byte	0
00943 0336                        00            .byte	0
00944 0337                        00            .byte	0
00945 0338                        00            .byte	0
00946                                           ! 451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00947 0339                        00            .byte	0
00948 033A                        00            .byte	0
00949 033B                        00            .byte	0
00950 033C                        00            .byte	0
00951 033D                        00            .byte	0
00952 033E                        00            .byte	0
00953 033F                        00            .byte	0
00954 0340                        00            .byte	0
00955                                           ! 452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00956 0341                        00            .byte	0
00957 0342                        00            .byte	0
00958 0343                        00            .byte	0
00959 0344                        00            .byte	0
00960 0345                        00            .byte	0
00961 0346                        00            .byte	0
00962 0347                        00            .byte	0
00963 0348                        00            .byte	0
00964                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00965 0349                        00            .byte	0
00966 034A                        00            .byte	0
00967 034B                        00            .byte	0
00968 034C                        00            .byte	0
00969 034D                        00            .byte	0
00970 034E                        00            .byte	0
00971 034F                        00            .byte	0
00972 0350                        00            .byte	0
00973                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00974 0351                        00            .byte	0
00975 0352                        00            .byte	0
00976 0353                        00            .byte	0
00977 0354                        00            .byte	0
00978 0355                        00            .byte	0
00979 0356                        00            .byte	0
00980 0357                        00            .byte	0
00981 0358                        00            .byte	0
00982                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00983 0359                        00            .byte	0
00984 035A                        00            .byte	0
00985 035B                        00            .byte	0
00986 035C                        00            .byte	0
00987 035D                        00            .byte	0
00988 035E                        00            .byte	0
00989 035F                        00            .byte	0
00990 0360                        00            .byte	0
00991                                           ! 456 },
00992                                           ! 457 {
00993                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00994 0361                        00            .byte	0
00995 0362                        00            .byte	0
00996 0363                        00            .byte	0
00997 0364                        00            .byte	0
00998 0365                        00            .byte	0
00999 0366                        00            .byte	0
01000 0367                        00            .byte	0
01001 0368                        00            .byte	0
01002                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01003 0369                        00            .byte	0
01004 036A                        00            .byte	0
01005 036B                        00            .byte	0
01006 036C                        00            .byte	0
01007 036D                        00            .byte	0
01008 036E                        00            .byte	0
01009 036F                        00            .byte	0
01010 0370                        00            .byte	0
01011                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01012 0371                        00            .byte	0
01013 0372                        00            .byte	0
01014 0373                        00            .byte	0
01015 0374                        00            .byte	0
01016 0375                        00            .byte	0
01017 0376                        00            .byte	0
01018 0377                        00            .byte	0
01019 0378                        00            .byte	0
01020                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01021 0379                        00            .byte	0
01022 037A                        00            .byte	0
01023 037B                        00            .byte	0
01024 037C                        00            .byte	0
01025 037D                        00            .byte	0
01026 037E                        00            .byte	0
01027 037F                        00            .byte	0
01028 0380                        00            .byte	0
01029                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01030 0381                        00            .byte	0
01031 0382                        00            .byte	0
01032 0383                        00            .byte	0
01033 0384                        00            .byte	0
01034 0385                        00            .byte	0
01035 0386                        00            .byte	0
01036 0387                        00            .byte	0
01037 0388                        00            .byte	0
01038                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01039 0389                        00            .byte	0
01040 038A                        00            .byte	0
01041 038B                        00            .byte	0
01042 038C                        00            .byte	0
01043 038D                        00            .byte	0
01044 038E                        00            .byte	0
01045 038F                        00            .byte	0
01046 0390                        00            .byte	0
01047                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01048 0391                        00            .byte	0
01049 0392                        00            .byte	0
01050 0393                        00            .byte	0
01051 0394                        00            .byte	0
01052 0395                        00            .byte	0
01053 0396                        00            .byte	0
01054 0397                        00            .byte	0
01055 0398                        00            .byte	0
01056                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01057 0399                        00            .byte	0
01058 039A                        00            .byte	0
01059 039B                        00            .byte	0
01060 039C                        00            .byte	0
01061 039D                        00            .byte	0
01062 039E                        00            .byte	0
01063 039F                        00            .byte	0
01064 03A0                        00            .byte	0
01065                                           ! 466 },
01066                                           ! 467 {
01067                                           ! 468  40, 24, 8, 0x00, 0x08,
01068 03A1                        28            .byte	$28
01069 03A2                        18            .byte	$18
01070 03A3                        08            .byte	8
01071 03A4                        00            .byte	0
01072 03A5                        08            .byte	8
01073                                           ! 469  0x09, 0x03, 0x00, 0x02,
01074 03A6                        09            .byte	9
01075 03A7                        03            .byte	3
01076 03A8                        00            .byte	0
01077 03A9                        02            .byte	2
01078                                           ! 470  0x63,
01079 03AA                        63            .byte	$63
01080                                           ! 471  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01081 03AB                        2D            .byte	$2D
01082 03AC                        27            .byte	$27
01083 03AD                        28            .byte	$28
01084 03AE                        90            .byte	$90
01085 03AF                        2B            .byte	$2B
01086 03B0                        80            .byte	$80
01087 03B1                        BF            .byte	$BF
01088 03B2                        1F            .byte	$1F
01089                                           ! 472  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01090 03B3                        00            .byte	0
01091 03B4                        C1            .byte	$C1
01092 03B5                        00            .byte	0
01093 03B6                        00            .byte	0
01094 03B7                        00            .byte	0
01095 03B8                        00            .byte	0
01096 03B9                        00            .byte	0
01097 03BA                        00            .byte	0
01098                                           ! 473  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01099 03BB                        9C            .byte	$9C
01100 03BC                        8E            .byte	$8E
01101 03BD                        8F            .byte	$8F
01102 03BE                        14            .byte	$14
01103 03BF                        00            .byte	0
01104 03C0                        96            .byte	$96
01105 03C1                        B9            .byte	$B9
01106 03C2                        A2            .byte	$A2
01107                                           ! 474  0xff,
01108 03C3                        FF            .byte	$FF
01109                                           ! 475  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01110 03C4                        00            .byte	0
01111 03C5                        13            .byte	$13
01112 03C6                        15            .byte	$15
01113 03C7                        17            .byte	$17
01114 03C8                        02            .byte	2
01115 03C9                        04            .byte	4
01116 03CA                        06            .byte	6
01117 03CB                        07            .byte	7
01118                                           ! 476  0
01119                                           ! 476 x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01120 03CC                        10            .byte	$10
01121 03CD                        11            .byte	$11
01122 03CE                        12            .byte	$12
01123 03CF                        13            .byte	$13
01124 03D0                        14            .byte	$14
01125 03D1                        15            .byte	$15
01126 03D2                        16            .byte	$16
01127 03D3                        17            .byte	$17
01128                                           ! 477  0x01, 0x00, 0x03, 0x00,
01129 03D4                        01            .byte	1
01130 03D5                        00            .byte	0
01131 03D6                        03            .byte	3
01132 03D7                        00            .byte	0
01133                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01134 03D8                        00            .byte	0
01135 03D9                        00            .byte	0
01136 03DA                        00            .byte	0
01137 03DB                        00            .byte	0
01138 03DC                        00            .byte	0
01139 03DD                        30            .byte	$30
01140 03DE                        0F            .byte	$F
01141 03DF                        0F            .byte	$F
01142 03E0                        FF            .byte	$FF
01143                                           ! 479 },
01144                                           ! 480 {
01145                                           ! 481  40, 24, 8, 0x00, 0x08,
01146 03E1                        28            .byte	$28
01147 03E2                        18            .byte	$18
01148 03E3                        08            .byte	8
01149 03E4                        00            .byte	0
01150 03E5                        08            .byte	8
01151                                           ! 482  0x09, 0x03, 0x00, 0x02,
01152 03E6                        09            .byte	9
01153 03E7                        03            .byte	3
01154 03E8                        00            .byte	0
01155 03E9                        02            .byte	2
01156                                           ! 483  0x63,
01157 03EA                        63            .byte	$63
01158                                           ! 484  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01159 03EB                        2D            .byte	$2D
01160 03EC                        27            .byte	$27
01161 03ED                        28            .byte	$28
01162 03EE                        90            .byte	$90
01163 03EF                        2B            .byte	$2B
01164 03F0                        80            .byte	$80
01165 03F1                        BF            .byte	$BF
01166 03F2                        1F            .byte	$1F
01167                                           ! 485  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01168 03F3                        00            .byte	0
01169 03F4                        C1            .byte	$C1
01170 03F5                        00            .byte	0
01171 03F6                        00            .byte	0
01172 03F7                        00            .byte	0
01173 03F8                        00            .byte	0
01174 03F9                        00            .byte	0
01175 03FA                        00            .byte	0
01176                                           ! 486  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01177 03FB                        9C            .byte	$9C
01178 03FC                        8E            .byte	$8E
01179 03FD                        8F            .byte	$8F
01180 03FE                        14            .byte	$14
01181 03FF                        00            .byte	0
01182 0400                        96            .byte	$96
01183 0401                        B9            .byte	$B9
01184 0402                        A2            .byte	$A2
01185                                           ! 487  0xff,
01186 0403                        FF            .byte	$FF
01187                                           ! 488  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01188 0404                        00            .byte	0
01189 0405                        13            .byte	$13
01190 0406                        15            .byte	$15
01191 0407                        17            .byte	$17
01192 0408                        02            .byte	2
01193 0409                        04            .byte	4
01194 040A                        06            .byte	6
01195 040B                        07            .byte	7
01196                                           ! 489  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01197 040C                        10            .byte	$10
01198 040D                        11            .byte	$11
01199 040E                        12            .byte	$12
01200 040F                        13            .byte	$13
01201 0410                        14            .byte	$14
01202 0411                        15            .byte	$15
01203 0412                        16            .byte	$16
01204 0413                        17            .byte	$17
01205                                           ! 490  0x01, 0x00, 0x03, 0x00,
01206 0414                        01            .byte	1
01207 0415                        00            .byte	0
01208 0416                        03            .byte	3
01209 0417                        00            .byte	0
01210                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01211 0418                        00            .byte	0
01212 0419                        00            .byte	0
01213 041A                        00            .byte	0
01214 041B                        00            .byte	0
01215 041C                        00            .byte	0
01216 041D                        30            .byte	$30
01217 041E                        0F            .byte	$F
01218 041F                        0F            .byte	$F
01219 0420                        FF            .byte	$FF
01220                                           ! 492 },
01221                                           ! 493 {
01222                                           ! 494  80, 24, 8, 0x00, 0x10,
01223 0421                        50            .byte	$50
01224 0422                        18            .byte	$18
01225 0423                        08            .byte	8
01226 0424                        00            .byte	0
01227 0425                        10            .byte	$10
01228                                           ! 495  0x01, 0x01, 0x00, 0x06,
01229 0426                        01            .byte	1
01230 0427                        01            .byte	1
01231 0428                        00            .byte	0
01232 0429                        06            .byte	6
01233                                           ! 496  0x63,
01234 042A                        63            .byte	$63
01235                                           ! 497  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01236 042B                        5F            .byte	$5F
01237 042C                        4F            .byte	$4F
01238 042D                        50            .byte	$50
01239 042E                        82            .byte	$82
01240 042F                        54            .byte	$54
01241 0430                        80            .byte	$80
01242 0431                        BF            .byte	$BF
01243 0432                        1F            .byte	$1F
01244                                           ! 498  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01245 0433                        00            .byte	0
01246 0434                        C1            .byte	$C1
01247 0435                        00            .byte	0
01248 0436                        00            .byte	0
01249 0437                        00            .byte	0
01250 0438                        00            .byte	0
01251 0439                        00            .byte	0
01252 043A                        00            .byte	0
01253                                           ! 499  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01254 043B                        9C            .byte	$9C
01255 043C                        8E            .byte	$8E
01256 043D                        8F            .byte	$8F
01257 043E                        28            .byte	$28
01258 043F                        00            .byte	0
01259 0440                        96            .byte	$96
01260 0441                        B9            .byte	$B9
01261 0442                        C2            .byte	$C2
01262                                           ! 500  0xff,
01263 0443                        FF            .byte	$FF
01264                                           ! 501  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01265 0444                        00            .byte	0
01266 0445                        17            .byte	$17
01267 0446                        17            .byte	$17
01268 0447                        17            .byte	$17
01269 0448                        17            .byte	$17
01270 0449                        17            .byte	$17
01271 044A                        17            .byte	$17
01272 044B                        17            .byte	$17
01273                                           ! 502  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01274 044C                        17            .byte	$17
01275 044D                        17            .byte	$17
01276 044E                        17            .byte	$17
01277 044F                        17            .byte	$17
01278 0450                        17            .byte	$17
01279 0451                        17            .byte	$17
01280 0452                        17            .byte	$17
01281 0453                        17            .byte	$17
01282                                           ! 503  0x01, 0x00, 0x01, 0x00,
01283 0454                        01            .byte	1
01284 0455                        00            .byte	0
01285 0456                        01            .byte	1
01286 0457                        00            .byte	0
01287                                           ! 504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01288 0458                        00            .byte	0
01289 0459                        00            .byte	0
01290 045A                        00            .byte	0
01291 045B                        00            .byte	0
01292 045C                        00            .byte	0
01293 045D                        00            .byte	0
01294 045E                        0D            .byte	$D
01295 045F                        0F            .byte	$F
01296 0460                        FF            .byte	$FF
01297                                           ! 505 },
01298                                           ! 506 {
01299                                           ! 507  80, 24, 16, 0x00, 0x10,
01300 0461                        50            .byte	$50
01301 0462                        18            .byte	$18
01302 0463                        10            .byte	$10
01303 0464                        00            .byte	0
01304 0465                        10            .byte	$10
01305                                           ! 508  0x00, 0x03, 0x00, 0x02,
01306 0466                        00            .byte	0
01307 0467                        03            .byte	3
01308 0468                        00            .byte	0
01309 0469                        02            .byte	2
01310                                           ! 509  0x66,
01311 046A                        66            .byte	$66
01312                                           ! 510  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01313 046B                        5F            .byte	$5F
01314 046C                        4F            .byte	$4F
01315 046D                        50            .byte	$50
01316 046E                        82            .byte	$82
01317 046F                        55            .byte	$55
01318 0470                        81            .byte	$81
01319 0471                        BF            .byte	$BF
01320 0472                        1F            .byte	$1F
01321                                           ! 511  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01322 0473                        00            .byte	0
01323 0474                        4F            .byte	$4F
01324 0475                        0D            .byte	$D
01325 0476                        0E            .byte	$E
01326 0477                        00            .byte	0
01327 0478                        00            .byte	0
01328 0479                        00            .byte	0
01329 047A                        00            .byte	0
01330                                           ! 512  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01331 047B                        9C            .byte	$9C
01332 047C                        8E            .byte	$8E
01333 047D                        8F            .byte	$8F
01334 047E                        28            .byte	$28
01335 047F                        0F            .byte	$F
01336 0480                        96            .byte	$96
01337 0481                        B9            .byte	$B9
01338 0482                        A3            .byte	$A3
01339                                           ! 513  0xff,
01340 0483                        FF            .byte	$FF
01341                                           ! 514  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01342 0484                        00            .byte	0
01343 0485                        08            .byte	8
01344 0486                        08            .byte	8
01345 0487                        08            .byte	8
01346 0488                        08            .byte	8
01347 0489                        08            .byte	8
01348 048A                        08            .byte	8
01349 048B                        08            .byte	8
01350                                           ! 515  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01351 048C                        10            .byte	$10
01352 048D                        18            .byte	$18
01353 048E                        18            .byte	$18
01354 048F                        18            .byte	$18
01355 0490                        18            .byte	$18
01356 0491                        18            .byte	$18
01357 0492                        18            .byte	$18
01358 0493                        18            .byte	$18
01359                                           ! 516  0x0e, 0x00, 0x0f, 0x08,
01360 0494                        0E            .byte	$E
01361 0495                        00            .byte	0
01362 0496                        0F            .byte	$F
01363 0497                        08            .byte	8
01364                                           ! 517  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01365 0498                        00            .byte	0
01366 0499                        00            .byte	0
01367 049A                        00            .byte	0
01368 049B                        00            .byte	0
01369 049C                        00            .byte	0
01370 049D                        10            .byte	$10
01371 049E                        0A            .byte	$A
01372 049F                        0F            .byte	$F
01373 04A0                        FF            .byte	$FF
01374                                           ! 518 },
01375                                           ! 519 {
01376                                           ! 520  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01377 04A1                        00            .byte	0
01378 04A2                        00            .byte	0
01379 04A3                        00            .byte	0
01380 04A4                        00            .byte	0
01381 04A5                        00            .byte	0
01382 04A6                        00            .byte	0
01383 04A7                        00            .byte	0
01384 04A8                        00            .byte	0
01385                                           ! 521  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01386 04A9                        00            .byte	0
01387 04AA                        00            .byte	0
01388 04AB                        00            .byte	0
01389 04AC                        00            .byte	0
01390 04AD                        00            .byte	0
01391 04AE                        00            .byte	0
01392 04AF                        00            .byte	0
01393 04B0                        00            .byte	0
01394                                           ! 522  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01395 04B1                        00            .byte	0
01396 04B2                        00            .byte	0
01397 04B3                        00            .byte	0
01398 04B4                        00            .byte	0
01399 04B5                        00            .byte	0
01400 04B6                        00            .byte	0
01401 04B7                        00            .byte	0
01402 04B8                        00            .byte	0
01403                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01404 04B9                        00            .byte	0
01405 04BA                        00            .byte	0
01406 04BB                        00            .byte	0
01407 04BC                        00            .byte	0
01408 04BD                        00            .byte	0
01409 04BE                        00            .byte	0
01410 04BF                        00            .byte	0
01411 04C0                        00            .byte	0
01412                                           ! 524  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01413 04C1                        00            .byte	0
01414 04C2                        00            .byte	0
01415 04C3                        00            .byte	0
01416 04C4                        00            .byte	0
01417 04C5                        00            .byte	0
01418 04C6                        00            .byte	0
01419 04C7                        00            .byte	0
01420 04C8                        00            .byte	0
01421                                           ! 525  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01422 04C9                        00            .byte	0
01423 04CA                        00            .byte	0
01424 04CB                        00            .byte	0
01425 04CC                        00            .byte	0
01426 04CD                        00            .byte	0
01427 04CE                        00            .byte	0
01428 04CF                        00            .byte	0
01429 04D0                        00            .byte	0
01430                                           ! 526  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01431 04D1                        00            .byte	0
01432 04D2                        00            .byte	0
01433 04D3                        00            .byte	0
01434 04D4                        00            .byte	0
01435 04D5                        00            .byte	0
01436 04D6                        00            .byte	0
01437 04D7                        00            .byte	0
01438 04D8                        00            .byte	0
01439                                           ! 527  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01440 04D9                        00            .byte	0
01441 04DA                        00            .byte	0
01442 04DB                        00            .byte	0
01443 04DC                        00            .byte	0
01444 04DD                        00            .byte	0
01445 04DE                        00            .byte	0
01446 04DF                        00            .byte	0
01447 04E0                        00            .byte	0
01448                                           ! 528 },
01449                                           ! 529 {
01450                                           ! 530  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01451 04E1                        00            .byte	0
01452 04E2                        00            .byte	0
01453 04E3                        00            .byte	0
01454 04E4                        00            .byte	0
01455 04E5                        00            .byte	0
01456 04E6                        00            .byte	0
01457 04E7                        00            .byte	0
01458 04E8                        00            .byte	0
01459                                           ! 531  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01460 04E9                        00            .byte	0
01461 04EA                        00            .byte	0
01462 04EB                        00            .byte	0
01463 04EC                        00            .byte	0
01464 04ED                        00            .byte	0
01465 04EE                        00            .byte	0
01466 04EF                        00            .byte	0
01467 04F0                        00            .byte	0
01468                                           ! 532  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01469 04F1                        00            .byte	0
01470 04F2                        00            .byte	0
01471 04F3                        00            .byte	0
01472 04F4                        00            .byte	0
01473 04F5                        00            .byte	0
01474 04F6                        00            .byte	0
01475 04F7                        00            .byte	0
01476 04F8                        00            .byte	0
01477                                           ! 533  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01478 04F9                        00            .byte	0
01479 04FA                        00            .byte	0
01480 04FB                        00            .byte	0
01481 04FC                        00            .byte	0
01482 04FD                        00            .byte	0
01483 04FE                        00            .byte	0
01484 04FF                        00            .byte	0
01485 0500                        00            .byte	0
01486                                           ! 534  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01487 0501                        00            .byte	0
01488 0502                        00            .byte	0
01489 0503                        00            .byte	0
01490 0504                        00            .byte	0
01491 0505                        00            .byte	0
01492 0506                        00            .byte	0
01493 0507                        00            .byte	0
01494 0508                        00            .byte	0
01495                                           ! 535  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01496 0509                        00            .byte	0
01497 050A                        00            .byte	0
01498 050B                        00            .byte	0
01499 050C                        00            .byte	0
01500 050D                        00            .byte	0
01501 050E                        00            .byte	0
01502 050F                        00            .byte	0
01503 0510                        00            .byte	0
01504                                           ! 536  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
01505 0511                        00            .byte	0
01506 0512                        00            .byte	0
01507 0513                        00            .byte	0
01508 0514                        00            .byte	0
01509 0515                        00            .byte	0
01510 0516                        00            .byte	0
01511 0517                        00            .byte	0
01512                                           ! 536 00,
01513 0518                        00            .byte	0
01514                                           ! 537  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01515 0519                        00            .byte	0
01516 051A                        00            .byte	0
01517 051B                        00            .byte	0
01518 051C                        00            .byte	0
01519 051D                        00            .byte	0
01520 051E                        00            .byte	0
01521 051F                        00            .byte	0
01522 0520                        00            .byte	0
01523                                           ! 538 },
01524                                           ! 539 {
01525                                           ! 540  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01526 0521                        00            .byte	0
01527 0522                        00            .byte	0
01528 0523                        00            .byte	0
01529 0524                        00            .byte	0
01530 0525                        00            .byte	0
01531 0526                        00            .byte	0
01532 0527                        00            .byte	0
01533 0528                        00            .byte	0
01534                                           ! 541  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01535 0529                        00            .byte	0
01536 052A                        00            .byte	0
01537 052B                        00            .byte	0
01538 052C                        00            .byte	0
01539 052D                        00            .byte	0
01540 052E                        00            .byte	0
01541 052F                        00            .byte	0
01542 0530                        00            .byte	0
01543                                           ! 542  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01544 0531                        00            .byte	0
01545 0532                        00            .byte	0
01546 0533                        00            .byte	0
01547 0534                        00            .byte	0
01548 0535                        00            .byte	0
01549 0536                        00            .byte	0
01550 0537                        00            .byte	0
01551 0538                        00            .byte	0
01552                                           ! 543  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01553 0539                        00            .byte	0
01554 053A                        00            .byte	0
01555 053B                        00            .byte	0
01556 053C                        00            .byte	0
01557 053D                        00            .byte	0
01558 053E                        00            .byte	0
01559 053F                        00            .byte	0
01560 0540                        00            .byte	0
01561                                           ! 544  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01562 0541                        00            .byte	0
01563 0542                        00            .byte	0
01564 0543                        00            .byte	0
01565 0544                        00            .byte	0
01566 0545                        00            .byte	0
01567 0546                        00            .byte	0
01568 0547                        00            .byte	0
01569 0548                        00            .byte	0
01570                                           ! 545  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01571 0549                        00            .byte	0
01572 054A                        00            .byte	0
01573 054B                        00            .byte	0
01574 054C                        00            .byte	0
01575 054D                        00            .byte	0
01576 054E                        00            .byte	0
01577 054F                        00            .byte	0
01578 0550                        00            .byte	0
01579                                           ! 546  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01580 0551                        00            .byte	0
01581 0552                        00            .byte	0
01582 0553                        00            .byte	0
01583 0554                        00            .byte	0
01584 0555                        00            .byte	0
01585 0556                        00            .byte	0
01586 0557                        00            .byte	0
01587 0558                        00            .byte	0
01588                                           ! 547  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01589 0559                        00            .byte	0
01590 055A                        00            .byte	0
01591 055B                        00            .byte	0
01592 055C                        00            .byte	0
01593 055D                        00            .byte	0
01594 055E                        00            .byte	0
01595 055F                        00            .byte	0
01596 0560                        00            .byte	0
01597                                           ! 548 },
01598                                           ! 549 {
01599                                           ! 550  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01600 0561                        00            .byte	0
01601 0562                        00            .byte	0
01602 0563                        00            .byte	0
01603 0564                        00            .byte	0
01604 0565                        00            .byte	0
01605 0566                        00            .byte	0
01606 0567                        00            .byte	0
01607 0568                        00            .byte	0
01608                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01609 0569                        00            .byte	0
01610 056A                        00            .byte	0
01611 056B                        00            .byte	0
01612 056C                        00            .byte	0
01613 056D                        00            .byte	0
01614 056E                        00            .byte	0
01615 056F                        00            .byte	0
01616 0570                        00            .byte	0
01617                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01618 0571                        00            .byte	0
01619 0572                        00            .byte	0
01620 0573                        00            .byte	0
01621 0574                        00            .byte	0
01622 0575                        00            .byte	0
01623 0576                        00            .byte	0
01624 0577                        00            .byte	0
01625 0578                        00            .byte	0
01626                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01627 0579                        00            .byte	0
01628 057A                        00            .byte	0
01629 057B                        00            .byte	0
01630 057C                        00            .byte	0
01631 057D                        00            .byte	0
01632 057E                        00            .byte	0
01633 057F                        00            .byte	0
01634 0580                        00            .byte	0
01635                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01636 0581                        00            .byte	0
01637 0582                        00            .byte	0
01638 0583                        00            .byte	0
01639 0584                        00            .byte	0
01640 0585                        00            .byte	0
01641 0586                        00            .byte	0
01642 0587                        00            .byte	0
01643 0588                        00            .byte	0
01644                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01645 0589                        00            .byte	0
01646 058A                        00            .byte	0
01647 058B                        00            .byte	0
01648 058C                        00            .byte	0
01649 058D                        00            .byte	0
01650 058E                        00            .byte	0
01651 058F                        00            .byte	0
01652 0590                        00            .byte	0
01653                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01654 0591                        00            .byte	0
01655 0592                        00            .byte	0
01656 0593                        00            .byte	0
01657 0594                        00            .byte	0
01658 0595                        00            .byte	0
01659 0596                        00            .byte	0
01660 0597                        00            .byte	0
01661 0598                        00            .byte	0
01662                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01663 0599                        00            .byte	0
01664 059A                        00            .byte	0
01665 059B                        00            .byte	0
01666 059C                        00            .byte	0
01667 059D                        00            .byte	0
01668 059E                        00            .byte	0
01669 059F                        00            .byte	0
01670 05A0                        00            .byte	0
01671                                           ! 558 },
01672                                           ! 559 {
01673                                           ! 560  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01674 05A1                        00            .byte	0
01675 05A2                        00            .byte	0
01676 05A3                        00            .byte	0
01677 05A4                        00            .byte	0
01678 05A5                        00            .byte	0
01679 05A6                        00            .byte	0
01680 05A7                        00            .byte	0
01681 05A8                        00            .byte	0
01682                                           ! 561  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01683 05A9                        00            .byte	0
01684 05AA                        00            .byte	0
01685 05AB                        00            .byte	0
01686 05AC                        00            .byte	0
01687 05AD                        00            .byte	0
01688 05AE                        00            .byte	0
01689 05AF                        00            .byte	0
01690 05B0                        00            .byte	0
01691                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01692 05B1                        00            .byte	0
01693 05B2                        00            .byte	0
01694 05B3                        00            .byte	0
01695 05B4                        00            .byte	0
01696 05B5                        00            .byte	0
01697 05B6                        00            .byte	0
01698 05B7                        00            .byte	0
01699 05B8                        00            .byte	0
01700                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01701 05B9                        00            .byte	0
01702 05BA                        00            .byte	0
01703 05BB                        00            .byte	0
01704 05BC                        00            .byte	0
01705 05BD                        00            .byte	0
01706 05BE                        00            .byte	0
01707 05BF                        00            .byte	0
01708 05C0                        00            .byte	0
01709                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01710 05C1                        00            .byte	0
01711 05C2                        00            .byte	0
01712 05C3                        00            .byte	0
01713 05C4                        00            .byte	0
01714 05C5                        00            .byte	0
01715 05C6                        00            .byte	0
01716 05C7                        00            .byte	0
01717 05C8                        00            .byte	0
01718                                           ! 565  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01719 05C9                        00            .byte	0
01720 05CA                        00            .byte	0
01721 05CB                        00            .byte	0
01722 05CC                        00            .byte	0
01723 05CD                        00            .byte	0
01724 05CE                        00            .byte	0
01725 05CF                        00            .byte	0
01726 05D0                        00            .byte	0
01727                                           ! 566  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01728 05D1                        00            .byte	0
01729 05D2                        00            .byte	0
01730 05D3                        00            .byte	0
01731 05D4                        00            .byte	0
01732 05D5                        00            .byte	0
01733 05D6                        00            .byte	0
01734 05D7                        00            .byte	0
01735 05D8                        00            .byte	0
01736                                           ! 567  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01737 05D9                        00            .byte	0
01738 05DA                        00            .byte	0
01739 05DB                        00            .byte	0
01740 05DC                        00            .byte	0
01741 05DD                        00            .byte	0
01742 05DE                        00            .byte	0
01743 05DF                        00            .byte	0
01744 05E0                        00            .byte	0
01745                                           ! 568 },
01746                                           ! 569 {
01747                                           ! 570  40, 24, 8, 0x00, 0x20,
01748 05E1                        28            .byte	$28
01749 05E2                        18            .byte	$18
01750 05E3                        08            .byte	8
01751 05E4                        00            .byte	0
01752 05E5                        20            .byte	$20
01753                                           ! 571  0x09, 0x0f, 0x00, 0x06,
01754 05E6                        09            .byte	9
01755 05E7                        0F            .byte	$F
01756 05E8                        00            .byte	0
01757 05E9                        06            .byte	6
01758                                           ! 572  0x63,
01759 05EA                        63            .byte	$63
01760                                           ! 573  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01761 05EB                        2D            .byte	$2D
01762 05EC                        27            .byte	$27
01763 05ED                        28            .byte	$28
01764 05EE                        90            .byte	$90
01765 05EF                        2B            .byte	$2B
01766 05F0                        80            .byte	$80
01767 05F1                        BF            .byte	$BF
01768 05F2                        1F            .byte	$1F
01769                                           ! 574  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01770 05F3                        00            .byte	0
01771 05F4                        C0            .byte	$C0
01772 05F5                        00            .byte	0
01773 05F6                        00            .byte	0
01774 05F7                        00            .byte	0
01775 05F8                        00            .byte	0
01776 05F9                        00            .byte	0
01777 05FA                        00            .byte	0
01778                                           ! 575  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01779 05FB                        9C            .byte	$9C
01780 05FC                        8E            .byte	$8E
01781 05FD                        8F            .byte	$8F
01782 05FE                        14            .byte	$14
01783 05FF                        00            .byte	0
01784 0600                        96            .byte	$96
01785 0601                        B9            .byte	$B9
01786 0602                        E3            .byte	$E3
01787                                           ! 576  0xff,
01788 0603                        FF            .byte	$FF
01789                                           ! 577  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01790 0604                        00            .byte	0
01791 0605                        01            .byte	1
01792 0606                        02            .byte	2
01793 0607                        03            .byte	3
01794 0608                        04            .byte	4
01795 0609                        05            .byte	5
01796 060A                        06            .byte	6
01797 060B                        07            .byte	7
01798                                           ! 578  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01799 060C                        10            .byte	$10
01800 060D                        11            .byte	$11
01801 060E                        12            .byte	$12
01802 060F                        13            .byte	$13
01803 0610                        14            .byte	$14
01804 0611                        15            .byte	$15
01805 0612                        16            .byte	$16
01806 0613                        17            .byte	$17
01807                                           ! 579  0x01, 0x00, 0x0f, 0x00,
01808 0614                        01            .byte	1
01809 0615                        00            .byte	0
01810 0616                        0F            .byte	$F
01811 0617                        00            .byte	0
01812                                           ! 580  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01813 0618                        00            .byte	0
01814 0619                        00            .byte	0
01815 061A                        00            .byte	0
01816 061B                        00            .byte	0
01817 061C                        00            .byte	0
01818 061D                        00            .byte	0
01819 061E                        05            .byte	5
01820 061F                        0F            .byte	$F
01821 0620                        FF            .byte	$FF
01822                                           ! 581 },
01823                                           ! 582 {
01824                                           ! 583  80, 24, 8, 0x00, 0x40,
01825 0621                        50            .byte	$50
01826 0622                        18            .byte	$18
01827 0623                        08            .byte	8
01828 0624                        00            .byte	0
01829 0625                        40            .byte	$40
01830                                           ! 584  0x01, 0x0f, 0x00, 0x06,
01831 0626                        01            .byte	1
01832 0627                        0F            .byte	$F
01833 0628                        00            .byte	0
01834 0629                        06            .byte	6
01835                                           ! 585  0x63,
01836 062A                        63            .byte	$63
01837                                           ! 586  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01838 062B                        5F            .byte	$5F
01839 062C                        4F            .byte	$4F
01840 062D                        50            .byte	$50
01841 062E                        82            .byte	$82
01842 062F                        54            .byte	$54
01843 0630                        80            .byte	$80
01844 0631                        BF            .byte	$BF
01845 0632                        1F            .byte	$1F
01846                                           ! 587  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01847 0633                        00            .byte	0
01848 0634                        C0            .byte	$C0
01849 0635                        00            .byte	0
01850 0636                        00            .byte	0
01851 0637                        00            .byte	0
01852 0638                        00            .byte	0
01853 0639                        00            .byte	0
01854 063A                        00            .byte	0
01855                                           ! 588  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01856 063B                        9C            .byte	$9C
01857 063C                        8E            .byte	$8E
01858 063D                        8F            .byte	$8F
01859 063E                        28            .byte	$28
01860 063F                        00            .byte	0
01861 0640                        96            .byte	$96
01862 0641                        B9            .byte	$B9
01863 0642                        E3            .byte	$E3
01864                                           ! 589  0xff,
01865 0643                        FF            .byte	$FF
01866                                           ! 590  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01867 0644                        00            .byte	0
01868 0645                        01            .byte	1
01869 0646                        02            .byte	2
01870 0647                        03            .byte	3
01871 0648                        04            .byte	4
01872 0649                        05            .byte	5
01873 064A                        06            .byte	6
01874 064B                        07            .byte	7
01875                                           ! 591  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01876 064C                        10            .byte	$10
01877 064D                        11            .byte	$11
01878 064E                        12            .byte	$12
01879 064F                        13            .byte	$13
01880 0650                        14            .byte	$14
01881 0651                        15            .byte	$15
01882 0652                        16            .byte	$16
01883 0653                        17            .byte	$17
01884                                           ! 592  0x01, 0x00, 0x0f, 0x00,
01885 0654                        01            .byte	1
01886 0655                        00            .byte	0
01887 0656                        0F            .byte	$F
01888 0657                        00            .byte	0
01889                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01890 0658                        00            .byte	0
01891 0659                        00            .byte	0
01892 065A                        00            .byte	0
01893 065B                        00            .byte	0
01894 065C                        00            .byte	0
01895 065D                        00            .byte	0
01896 065E                        05            .byte	5
01897 065F                        0F            .byte	$F
01898 0660                        FF            .byte	$FF
01899                                           ! 594 },
01900                                           ! 595 {
01901                                           ! 596  0x00, 0x00, 
01902 0661                        00            .byte	0
01903 0662                        00            .byte	0
01904                                           ! 596 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01905 0663                        00            .byte	0
01906 0664                        00            .byte	0
01907 0665                        00            .byte	0
01908 0666                        00            .byte	0
01909 0667                        00            .byte	0
01910 0668                        00            .byte	0
01911                                           ! 597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01912 0669                        00            .byte	0
01913 066A                        00            .byte	0
01914 066B                        00            .byte	0
01915 066C                        00            .byte	0
01916 066D                        00            .byte	0
01917 066E                        00            .byte	0
01918 066F                        00            .byte	0
01919 0670                        00            .byte	0
01920                                           ! 598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01921 0671                        00            .byte	0
01922 0672                        00            .byte	0
01923 0673                        00            .byte	0
01924 0674                        00            .byte	0
01925 0675                        00            .byte	0
01926 0676                        00            .byte	0
01927 0677                        00            .byte	0
01928 0678                        00            .byte	0
01929                                           ! 599  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01930 0679                        00            .byte	0
01931 067A                        00            .byte	0
01932 067B                        00            .byte	0
01933 067C                        00            .byte	0
01934 067D                        00            .byte	0
01935 067E                        00            .byte	0
01936 067F                        00            .byte	0
01937 0680                        00            .byte	0
01938                                           ! 600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01939 0681                        00            .byte	0
01940 0682                        00            .byte	0
01941 0683                        00            .byte	0
01942 0684                        00            .byte	0
01943 0685                        00            .byte	0
01944 0686                        00            .byte	0
01945 0687                        00            .byte	0
01946 0688                        00            .byte	0
01947                                           ! 601  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01948 0689                        00            .byte	0
01949 068A                        00            .byte	0
01950 068B                        00            .byte	0
01951 068C                        00            .byte	0
01952 068D                        00            .byte	0
01953 068E                        00            .byte	0
01954 068F                        00            .byte	0
01955 0690                        00            .byte	0
01956                                           ! 602  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01957 0691                        00            .byte	0
01958 0692                        00            .byte	0
01959 0693                        00            .byte	0
01960 0694                        00            .byte	0
01961 0695                        00            .byte	0
01962 0696                        00            .byte	0
01963 0697                        00            .byte	0
01964 0698                        00            .byte	0
01965                                           ! 603  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01966 0699                        00            .byte	0
01967 069A                        00            .byte	0
01968 069B                        00            .byte	0
01969 069C                        00            .byte	0
01970 069D                        00            .byte	0
01971 069E                        00            .byte	0
01972 069F                        00            .byte	0
01973 06A0                        00            .byte	0
01974                                           ! 604 },
01975                                           ! 605 {
01976                                           ! 606  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01977 06A1                        00            .byte	0
01978 06A2                        00            .byte	0
01979 06A3                        00            .byte	0
01980 06A4                        00            .byte	0
01981 06A5                        00            .byte	0
01982 06A6                        00            .byte	0
01983 06A7                        00            .byte	0
01984 06A8                        00            .byte	0
01985                                           ! 607  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01986 06A9                        00            .byte	0
01987 06AA                        00            .byte	0
01988 06AB                        00            .byte	0
01989 06AC                        00            .byte	0
01990 06AD                        00            .byte	0
01991 06AE                        00            .byte	0
01992 06AF                        00            .byte	0
01993 06B0                        00            .byte	0
01994                                           ! 608  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01995 06B1                        00            .byte	0
01996 06B2                        00            .byte	0
01997 06B3                        00            .byte	0
01998 06B4                        00            .byte	0
01999 06B5                        00            .byte	0
02000 06B6                        00            .byte	0
02001 06B7                        00            .byte	0
02002 06B8                        00            .byte	0
02003                                           ! 609  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02004 06B9                        00            .byte	0
02005 06BA                        00            .byte	0
02006 06BB                        00            .byte	0
02007 06BC                        00            .byte	0
02008 06BD                        00            .byte	0
02009 06BE                        00            .byte	0
02010 06BF                        00            .byte	0
02011 06C0                        00            .byte	0
02012                                           ! 610  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02013 06C1                        00            .byte	0
02014 06C2                        00            .byte	0
02015 06C3                        00            .byte	0
02016 06C4                        00            .byte	0
02017 06C5                        00            .byte	0
02018 06C6                        00            .byte	0
02019 06C7                        00            .byte	0
02020 06C8                        00            .byte	0
02021                                           ! 611  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02022 06C9                        00            .byte	0
02023 06CA                        00            .byte	0
02024 06CB                        00            .byte	0
02025 06CC                        00            .byte	0
02026 06CD                        00            .byte	0
02027 06CE                        00            .byte	0
02028 06CF                        00            .byte	0
02029 06D0                        00            .byte	0
02030                                           ! 612  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02031 06D1                        00            .byte	0
02032 06D2                        00            .byte	0
02033 06D3                        00            .byte	0
02034 06D4                        00            .byte	0
02035 06D5                        00            .byte	0
02036 06D6                        00            .byte	0
02037 06D7                        00            .byte	0
02038 06D8                        00            .byte	0
02039                                           ! 613  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02040 06D9                        00            .byte	0
02041 06DA                        00            .byte	0
02042 06DB                        00            .byte	0
02043 06DC                        00            .byte	0
02044 06DD                        00            .byte	0
02045 06DE                        00            .byte	0
02046 06DF                        00            .byte	0
02047 06E0                        00            .byte	0
02048                                           ! 614 },
02049                                           ! 615 {
02050                                           ! 616  80, 24, 14, 0x00, 0x80,
02051 06E1                        50            .byte	$50
02052 06E2                        18            .byte	$18
02053 06E3                        0E            .byte	$E
02054 06E4                        00            .byte	0
02055 06E5                        80            .byte	$80
02056                                           ! 617  0x01, 0x0f, 0x00, 0x06,
02057 06E6                        01            .byte	1
02058 06E7                        0F            .byte	$F
02059 06E8                        00            .byte	0
02060 06E9                        06            .byte	6
02061                                           ! 618  0xa3,
02062 06EA                        A3            .byte	$A3
02063                                           ! 619  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02064 06EB                        5F            .byte	$5F
02065 06EC                        4F            .byte	$4F
02066 06ED                        50            .byte	$50
02067 06EE                        82            .byte	$82
02068 06EF                        54            .byte	$54
02069 06F0                        80            .byte	$80
02070 06F1                        BF            .byte	$BF
02071 06F2                        1F            .byte	$1F
02072                                           ! 620  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02073 06F3                        00            .byte	0
02074 06F4                        40            .byte	$40
02075 06F5                        00            .byte	0
02076 06F6                        00            .byte	0
02077 06F7                        00            .byte	0
02078 06F8                        00            .byte	0
02079 06F9                        00            .byte	0
02080 06FA                        00            .byte	0
02081                                           ! 621  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02082 06FB                        83            .byte	$83
02083 06FC                        85            .byte	$85
02084 06FD                        5D            .byte	$5D
02085 06FE                        28            .byte	$28
02086 06FF                        0F            .byte	$F
02087 0700                        63            .byte	$63
02088 0701                        BA            .byte	$BA
02089 0702                        E3            .byte	$E3
02090                                           ! 622  0xff,
02091 0703                        FF            .byte	$FF
02092                                           ! 623  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02093 0704                        00            .byte	0
02094 0705                        08            .byte	8
02095 0706                        00            .byte	0
02096 0707                        00            .byte	0
02097 0708                        18            .byte	$18
02098 0709                        18            .byte	$18
02099 070A                        00            .byte	0
02100 070B                        00            .byte	0
02101                                           ! 624  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02102 070C                        00            .byte	0
02103 070D                        08            .byte	8
02104 070E                        00            .byte	0
02105 070F                        00            .byte	0
02106 0710                        00            .byte	0
02107 0711                        18            .byte	$18
02108 0712                        00            .byte	0
02109 0713                        00            .byte	0
02110                                           ! 625  0x01, 0x00, 0x01, 0x00,
02111 0714                        01            .byte	1
02112 0715                        00            .byte	0
02113 0716                        01            .byte	1
02114 0717                        00            .byte	0
02115                                           ! 626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02116 0718                        00            .byte	0
02117 0719                        00            .byte	0
02118 071A                        00            .byte	0
02119 071B                        00            .byte	0
02120 071C                        00            .byte	0
02121 071D                        00            .byte	0
02122 071E                        05            .byte	5
02123 071F                        0F            .byte	$F
02124 0720                        FF            .byte	$FF
02125                                           ! 627 },
02126                                           ! 628 {
02127                                           ! 629  80, 24, 14, 0x00, 0x80,
02128 0721                        50            .byte	$50
02129 0722                        18            .byte	$18
02130 0723                        0E            .byte	$E
02131 0724                        00            .byte	0
02132 0725                        80            .byte	$80
02133                                           ! 630  0x01, 0x0f, 0x00, 0x06,
02134 0726                        01            .byte	1
02135 0727                        0F            .byte	$F
02136 0728                        00            .byte	0
02137 0729                        06            .byte	6
02138                                           ! 631  0xa3,
02139 072A                        A3            .byte	$A3
02140                                           ! 632  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02141 072B                        5F            .byte	$5F
02142 072C                        4F            .byte	$4F
02143 072D                        50            .byte	$50
02144 072E                        82            .byte	$82
02145 072F                        54            .byte	$54
02146 0730                        80            .byte	$80
02147 0731                        BF            .byte	$BF
02148 0732                        1F            .byte	$1F
02149                                           ! 633  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02150 0733                        00            .byte	0
02151 0734                        40            .byte	$40
02152 0735                        00            .byte	0
02153 0736                        00            .byte	0
02154 0737                        00            .byte	0
02155 0738                        00            .byte	0
02156 0739                        00            .byte	0
02157 073A                        00            .byte	0
02158                                           ! 634  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02159 073B                        83            .byte	$83
02160 073C                        85            .byte	$85
02161 073D                        5D            .byte	$5D
02162 073E                        28            .byte	$28
02163 073F                        0F            .byte	$F
02164 0740                        63            .byte	$63
02165 0741                        BA            .byte	$BA
02166 0742                        E3            .byte	$E3
02167                                           ! 635  0xff,
02168 0743                        FF            .byte	$FF
02169                                           ! 636  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02170 0744                        00            .byte	0
02171 0745                        01            .byte	1
02172 0746                        02            .byte	2
02173 0747                        03            .byte	3
02174 0748                        04            .byte	4
02175 0749                        05            .byte	5
02176 074A                        14            .byte	$14
02177 074B                        07            .byte	7
02178                                           ! 637  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02179 074C                        38            .byte	$38
02180 074D                        39            .byte	$39
02181 074E                        3A            .byte	$3A
02182 074F                        3B            .byte	$3B
02183 0750                        3C            .byte	$3C
02184 0751                        3D            .byte	$3D
02185 0752                        3E            .byte	$3E
02186 0753                        3F            .byte	$3F
02187                                           ! 638  0x01, 0x00, 0x0f, 0x00,
02188 0754                        01            .byte	1
02189 0755                        00            .byte	0
02190 0756                        0F            .byte	$F
02191 0757                        00            .byte	0
02192                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02193 0758                        00            .byte	0
02194 0759                        00            .byte	0
02195 075A                        00            .byte	0
02196 075B                        00            .byte	0
02197 075C                        00            .byte	0
02198 075D                        00            .byte	0
02199 075E                        05            .byte	5
02200 075F                        0F            .byte	$F
02201 0760                        FF            .byte	$FF
02202                                           ! 640 },
02203                                           ! 641 {
02204                                           ! 642  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02205 0761                        00            .byte	0
02206 0762                        00            .byte	0
02207 0763                        00            .byte	0
02208 0764                        00            .byte	0
02209 0765                        00            .byte	0
02210 0766                        00            .byte	0
02211 0767                        00            .byte	0
02212 0768                        00            .byte	0
02213                                           ! 643  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02214 0769                        00            .byte	0
02215 076A                        00            .byte	0
02216 076B                        00            .byte	0
02217 076C                        00            .byte	0
02218 076D                        00            .byte	0
02219 076E                        00            .byte	0
02220 076F                        00            .byte	0
02221 0770                        00            .byte	0
02222                                           ! 644  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02223 0771                        00            .byte	0
02224 0772                        00            .byte	0
02225 0773                        00            .byte	0
02226 0774                        00            .byte	0
02227 0775                        00            .byte	0
02228 0776                        00            .byte	0
02229 0777                        00            .byte	0
02230 0778                        00            .byte	0
02231                                           ! 645  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02232 0779                        00            .byte	0
02233 077A                        00            .byte	0
02234 077B                        00            .byte	0
02235 077C                        00            .byte	0
02236 077D                        00            .byte	0
02237 077E                        00            .byte	0
02238 077F                        00            .byte	0
02239 0780                        00            .byte	0
02240                                           ! 646  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02241 0781                        00            .byte	0
02242 0782                        00            .byte	0
02243 0783                        00            .byte	0
02244 0784                        00            .byte	0
02245 0785                        00            .byte	0
02246 0786                        00            .byte	0
02247 0787                        00            .byte	0
02248 0788                        00            .byte	0
02249                                           ! 647  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02250 0789                        00            .byte	0
02251 078A                        00            .byte	0
02252 078B                        00            .byte	0
02253 078C                        00            .byte	0
02254 078D                        00            .byte	0
02255 078E                        00            .byte	0
02256 078F                        00            .byte	0
02257 0790                        00            .byte	0
02258                                           ! 648  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02259 0791                        00            .byte	0
02260 0792                        00            .byte	0
02261 0793                        00            .byte	0
02262 0794                        00            .byte	0
02263 0795                        00            .byte	0
02264 0796                        00            .byte	0
02265 0797                        00            .byte	0
02266 0798                        00            .byte	0
02267                                           ! 649  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02268 0799                        00            .byte	0
02269 079A                        00            .byte	0
02270 079B                        00            .byte	0
02271 079C                        00            .byte	0
02272 079D                        00            .byte	0
02273 079E                        00            .byte	0
02274 079F                        00            .byte	0
02275 07A0                        00            .byte	0
02276                                           ! 650 },
02277                                           ! 651 {
02278                                           ! 652  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02279 07A1                        00            .byte	0
02280 07A2                        00            .byte	0
02281 07A3                        00            .byte	0
02282 07A4                        00            .byte	0
02283 07A5                        00            .byte	0
02284 07A6                        00            .byte	0
02285 07A7                        00            .byte	0
02286 07A8                        00            .byte	0
02287                                           ! 653  0x00, 0x00, 0x00, 0x00, 0x00, 0x
02288 07A9                        00            .byte	0
02289 07AA                        00            .byte	0
02290 07AB                        00            .byte	0
02291 07AC                        00            .byte	0
02292 07AD                        00            .byte	0
02293                                           ! 653 00, 0x00, 0x00,
02294 07AE                        00            .byte	0
02295 07AF                        00            .byte	0
02296 07B0                        00            .byte	0
02297                                           ! 654  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02298 07B1                        00            .byte	0
02299 07B2                        00            .byte	0
02300 07B3                        00            .byte	0
02301 07B4                        00            .byte	0
02302 07B5                        00            .byte	0
02303 07B6                        00            .byte	0
02304 07B7                        00            .byte	0
02305 07B8                        00            .byte	0
02306                                           ! 655  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02307 07B9                        00            .byte	0
02308 07BA                        00            .byte	0
02309 07BB                        00            .byte	0
02310 07BC                        00            .byte	0
02311 07BD                        00            .byte	0
02312 07BE                        00            .byte	0
02313 07BF                        00            .byte	0
02314 07C0                        00            .byte	0
02315                                           ! 656  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02316 07C1                        00            .byte	0
02317 07C2                        00            .byte	0
02318 07C3                        00            .byte	0
02319 07C4                        00            .byte	0
02320 07C5                        00            .byte	0
02321 07C6                        00            .byte	0
02322 07C7                        00            .byte	0
02323 07C8                        00            .byte	0
02324                                           ! 657  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02325 07C9                        00            .byte	0
02326 07CA                        00            .byte	0
02327 07CB                        00            .byte	0
02328 07CC                        00            .byte	0
02329 07CD                        00            .byte	0
02330 07CE                        00            .byte	0
02331 07CF                        00            .byte	0
02332 07D0                        00            .byte	0
02333                                           ! 658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02334 07D1                        00            .byte	0
02335 07D2                        00            .byte	0
02336 07D3                        00            .byte	0
02337 07D4                        00            .byte	0
02338 07D5                        00            .byte	0
02339 07D6                        00            .byte	0
02340 07D7                        00            .byte	0
02341 07D8                        00            .byte	0
02342                                           ! 659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02343 07D9                        00            .byte	0
02344 07DA                        00            .byte	0
02345 07DB                        00            .byte	0
02346 07DC                        00            .byte	0
02347 07DD                        00            .byte	0
02348 07DE                        00            .byte	0
02349 07DF                        00            .byte	0
02350 07E0                        00            .byte	0
02351                                           ! 660 },
02352                                           ! 661 {
02353                                           ! 662  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02354 07E1                        00            .byte	0
02355 07E2                        00            .byte	0
02356 07E3                        00            .byte	0
02357 07E4                        00            .byte	0
02358 07E5                        00            .byte	0
02359 07E6                        00            .byte	0
02360 07E7                        00            .byte	0
02361 07E8                        00            .byte	0
02362                                           ! 663  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02363 07E9                        00            .byte	0
02364 07EA                        00            .byte	0
02365 07EB                        00            .byte	0
02366 07EC                        00            .byte	0
02367 07ED                        00            .byte	0
02368 07EE                        00            .byte	0
02369 07EF                        00            .byte	0
02370 07F0                        00            .byte	0
02371                                           ! 664  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02372 07F1                        00            .byte	0
02373 07F2                        00            .byte	0
02374 07F3                        00            .byte	0
02375 07F4                        00            .byte	0
02376 07F5                        00            .byte	0
02377 07F6                        00            .byte	0
02378 07F7                        00            .byte	0
02379 07F8                        00            .byte	0
02380                                           ! 665  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02381 07F9                        00            .byte	0
02382 07FA                        00            .byte	0
02383 07FB                        00            .byte	0
02384 07FC                        00            .byte	0
02385 07FD                        00            .byte	0
02386 07FE                        00            .byte	0
02387 07FF                        00            .byte	0
02388 0800                        00            .byte	0
02389                                           ! 666  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02390 0801                        00            .byte	0
02391 0802                        00            .byte	0
02392 0803                        00            .byte	0
02393 0804                        00            .byte	0
02394 0805                        00            .byte	0
02395 0806                        00            .byte	0
02396 0807                        00            .byte	0
02397 0808                        00            .byte	0
02398                                           ! 667  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02399 0809                        00            .byte	0
02400 080A                        00            .byte	0
02401 080B                        00            .byte	0
02402 080C                        00            .byte	0
02403 080D                        00            .byte	0
02404 080E                        00            .byte	0
02405 080F                        00            .byte	0
02406 0810                        00            .byte	0
02407                                           ! 668  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02408 0811                        00            .byte	0
02409 0812                        00            .byte	0
02410 0813                        00            .byte	0
02411 0814                        00            .byte	0
02412 0815                        00            .byte	0
02413 0816                        00            .byte	0
02414 0817                        00            .byte	0
02415 0818                        00            .byte	0
02416                                           ! 669  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02417 0819                        00            .byte	0
02418 081A                        00            .byte	0
02419 081B                        00            .byte	0
02420 081C                        00            .byte	0
02421 081D                        00            .byte	0
02422 081E                        00            .byte	0
02423 081F                        00            .byte	0
02424 0820                        00            .byte	0
02425                                           ! 670 },
02426                                           ! 671 {
02427                                           ! 672  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02428 0821                        00            .byte	0
02429 0822                        00            .byte	0
02430 0823                        00            .byte	0
02431 0824                        00            .byte	0
02432 0825                        00            .byte	0
02433 0826                        00            .byte	0
02434 0827                        00            .byte	0
02435 0828                        00            .byte	0
02436                                           ! 673  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02437 0829                        00            .byte	0
02438 082A                        00            .byte	0
02439 082B                        00            .byte	0
02440 082C                        00            .byte	0
02441 082D                        00            .byte	0
02442 082E                        00            .byte	0
02443 082F                        00            .byte	0
02444 0830                        00            .byte	0
02445                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02446 0831                        00            .byte	0
02447 0832                        00            .byte	0
02448 0833                        00            .byte	0
02449 0834                        00            .byte	0
02450 0835                        00            .byte	0
02451 0836                        00            .byte	0
02452 0837                        00            .byte	0
02453 0838                        00            .byte	0
02454                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02455 0839                        00            .byte	0
02456 083A                        00            .byte	0
02457 083B                        00            .byte	0
02458 083C                        00            .byte	0
02459 083D                        00            .byte	0
02460 083E                        00            .byte	0
02461 083F                        00            .byte	0
02462 0840                        00            .byte	0
02463                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02464 0841                        00            .byte	0
02465 0842                        00            .byte	0
02466 0843                        00            .byte	0
02467 0844                        00            .byte	0
02468 0845                        00            .byte	0
02469 0846                        00            .byte	0
02470 0847                        00            .byte	0
02471 0848                        00            .byte	0
02472                                           ! 677  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02473 0849                        00            .byte	0
02474 084A                        00            .byte	0
02475 084B                        00            .byte	0
02476 084C                        00            .byte	0
02477 084D                        00            .byte	0
02478 084E                        00            .byte	0
02479 084F                        00            .byte	0
02480 0850                        00            .byte	0
02481                                           ! 678  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02482 0851                        00            .byte	0
02483 0852                        00            .byte	0
02484 0853                        00            .byte	0
02485 0854                        00            .byte	0
02486 0855                        00            .byte	0
02487 0856                        00            .byte	0
02488 0857                        00            .byte	0
02489 0858                        00            .byte	0
02490                                           ! 679  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02491 0859                        00            .byte	0
02492 085A                        00            .byte	0
02493 085B                        00            .byte	0
02494 085C                        00            .byte	0
02495 085D                        00            .byte	0
02496 085E                        00            .byte	0
02497 085F                        00            .byte	0
02498 0860                        00            .byte	0
02499                                           ! 680 },
02500                                           ! 681 {
02501                                           ! 682  40, 24, 16, 0x00, 0x08,
02502 0861                        28            .byte	$28
02503 0862                        18            .byte	$18
02504 0863                        10            .byte	$10
02505 0864                        00            .byte	0
02506 0865                        08            .byte	8
02507                                           ! 683  0x08, 0x03, 0x00, 0x02,
02508 0866                        08            .byte	8
02509 0867                        03            .byte	3
02510 0868                        00            .byte	0
02511 0869                        02            .byte	2
02512                                           ! 684  0x67,
02513 086A                        67            .byte	$67
02514                                           ! 685  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02515 086B                        2D            .byte	$2D
02516 086C                        27            .byte	$27
02517 086D                        28            .byte	$28
02518 086E                        90            .byte	$90
02519 086F                        2B            .byte	$2B
02520 0870                        A0            .byte	$A0
02521 0871                        BF            .byte	$BF
02522 0872                        1F            .byte	$1F
02523                                           ! 686  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02524 0873                        00            .byte	0
02525 0874                        4F            .byte	$4F
02526 0875                        0D            .byte	$D
02527 0876                        0E            .byte	$E
02528 0877                        00            .byte	0
02529 0878                        00            .byte	0
02530 0879                        00            .byte	0
02531 087A                        00            .byte	0
02532                                           ! 687  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02533 087B                        9C            .byte	$9C
02534 087C                        8E            .byte	$8E
02535 087D                        8F            .byte	$8F
02536 087E                        14            .byte	$14
02537 087F                        1F            .byte	$1F
02538 0880                        96            .byte	$96
02539 0881                        B9            .byte	$B9
02540 0882                        A3            .byte	$A3
02541                                           ! 688  0xff,
02542 0883                        FF            .byte	$FF
02543                                           ! 689  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02544 0884                        00            .byte	0
02545 0885                        01            .byte	1
02546 0886                        02            .byte	2
02547 0887                        03            .byte	3
02548 0888                        04            .byte	4
02549 0889                        05            .byte	5
02550 088A                        14            .byte	$14
02551 088B                        07            .byte	7
02552                                           ! 690  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02553 088C                        38            .byte	$38
02554 088D                        39            .byte	$39
02555 088E                        3A            .byte	$3A
02556 088F                        3B            .byte	$3B
02557 0890                        3C            .byte	$3C
02558 0891                        3D            .byte	$3D
02559 0892                        3E            .byte	$3E
02560 0893                        3F            .byte	$3F
02561                                           ! 691  0x0c, 0x00, 0x0f, 0x08,
02562 0894                        0C            .byte	$C
02563 0895                        00            .byte	0
02564 0896                        0F            .byte	$F
02565 0897                        08            .byte	8
02566                                           ! 692  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02567 0898                        00            .byte	0
02568 0899                        00            .byte	0
02569 089A                        00            .byte	0
02570 089B                        00            .byte	0
02571 089C                        00            .byte	0
02572 089D                        10            .byte	$10
02573 089E                        0E            .byte	$E
02574 089F                        0F            .byte	$F
02575 08A0                        FF            .byte	$FF
02576                                           ! 693 },
02577                                           ! 694 {
02578                                           ! 695  80, 24, 16, 0x00, 0x10,
02579 08A1                        50            .byte	$50
02580 08A2                        18            .byte	$18
02581 08A3                        10            .byte	$10
02582 08A4                        00            .byte	0
02583 08A5                        10            .byte	$10
02584                                           ! 696  0x00, 0x03, 0x00, 0x02,
02585 08A6                        00            .byte	0
02586 08A7                        03            .byte	3
02587 08A8                        00            .byte	0
02588 08A9                        02            .byte	2
02589                                           ! 697  0x67,
02590 08AA                        67            .byte	$67
02591                                           ! 698  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02592 08AB                        5F            .byte	$5F
02593 08AC                        4F            .byte	$4F
02594 08AD                        50            .byte	$50
02595 08AE                        82            .byte	$82
02596 08AF                        55            .byte	$55
02597 08B0                        81            .byte	$81
02598 08B1                        BF            .byte	$BF
02599 08B2                        1F            .byte	$1F
02600                                           ! 699  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02601 08B3                        00            .byte	0
02602 08B4                        4F            .byte	$4F
02603 08B5                        0D            .byte	$D
02604 08B6                        0E            .byte	$E
02605 08B7                        00            .byte	0
02606 08B8                        00            .byte	0
02607 08B9                        00            .byte	0
02608 08BA                        00            .byte	0
02609                                           ! 700  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02610 08BB                        9C            .byte	$9C
02611 08BC                        8E            .byte	$8E
02612 08BD                        8F            .byte	$8F
02613 08BE                        28            .byte	$28
02614 08BF                        1F            .byte	$1F
02615 08C0                        96            .byte	$96
02616 08C1                        B9            .byte	$B9
02617 08C2                        A3            .byte	$A3
02618                                           ! 701  0xff,
02619 08C3                        FF            .byte	$FF
02620                                           ! 702  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02621 08C4                        00            .byte	0
02622 08C5                        01            .byte	1
02623 08C6                        02            .byte	2
02624 08C7                        03            .byte	3
02625 08C8                        04            .byte	4
02626 08C9                        05            .byte	5
02627 08CA                        14            .byte	$14
02628 08CB                        07            .byte	7
02629                                           ! 703  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02630 08CC                        38            .byte	$38
02631 08CD                        39            .byte	$39
02632 08CE                        3A            .byte	$3A
02633 08CF                        3B            .byte	$3B
02634 08D0                        3C            .byte	$3C
02635 08D1                        3D            .byte	$3D
02636 08D2                        3E            .byte	$3E
02637 08D3                        3F            .byte	$3F
02638                                           ! 704  0x0c, 0x00, 0x0f, 0x08,
02639 08D4                        0C            .byte	$C
02640 08D5                        00            .byte	0
02641 08D6                        0F            .byte	$F
02642 08D7                        08            .byte	8
02643                                           ! 705  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02644 08D8                        00            .byte	0
02645 08D9                        00            .byte	0
02646 08DA                        00            .byte	0
02647 08DB                        00            .byte	0
02648 08DC                        00            .byte	0
02649 08DD                        10            .byte	$10
02650 08DE                        0E            .byte	$E
02651 08DF                        0F            .byte	$F
02652 08E0                        FF            .byte	$FF
02653                                           ! 706 },
02654                                           ! 707 {
02655                                           ! 708  80, 24, 16, 0x00, 0x10,
02656 08E1                        50            .byte	$50
02657 08E2                        18            .byte	$18
02658 08E3                        10            .byte	$10
02659 08E4                        00            .byte	0
02660 08E5                        10            .byte	$10
02661                                           ! 709  0x00, 0x03, 0x00, 0x02,
02662 08E6                        00            .byte	0
02663 08E7                        03            .byte	3
02664 08E8                        00            .byte	0
02665 08E9                        02            .byte	2
02666                                           ! 710  0x66,
02667 08EA                        66            .byte	$66
02668                                           ! 711  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02669 08EB                        5F            .byte	$5F
02670 08EC                        4F            .byte	$4F
02671 08ED                        50            .byte	$50
02672 08EE                        82            .byte	$82
02673 08EF                        55            .byte	$55
02674 08F0                        81            .byte	$81
02675 08F1                        BF            .byte	$BF
02676 08F2                        1F            .byte	$1F
02677                                           ! 712  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x
02678 08F3                        00            .byte	0
02679 08F4                        4F            .byte	$4F
02680 08F5                        0D            .byte	$D
02681 08F6                        0E            .byte	$E
02682 08F7                        00            .byte	0
02683 08F8                        00            .byte	0
02684 08F9                        00            .byte	0
02685                                           ! 712 00,
02686 08FA                        00            .byte	0
02687                                           ! 713  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02688 08FB                        9C            .byte	$9C
02689 08FC                        8E            .byte	$8E
02690 08FD                        8F            .byte	$8F
02691 08FE                        28            .byte	$28
02692 08FF                        0F            .byte	$F
02693 0900                        96            .byte	$96
02694 0901                        B9            .byte	$B9
02695 0902                        A3            .byte	$A3
02696                                           ! 714  0xff,
02697 0903                        FF            .byte	$FF
02698                                           ! 715  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02699 0904                        00            .byte	0
02700 0905                        08            .byte	8
02701 0906                        08            .byte	8
02702 0907                        08            .byte	8
02703 0908                        08            .byte	8
02704 0909                        08            .byte	8
02705 090A                        08            .byte	8
02706 090B                        08            .byte	8
02707                                           ! 716  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02708 090C                        10            .byte	$10
02709 090D                        18            .byte	$18
02710 090E                        18            .byte	$18
02711 090F                        18            .byte	$18
02712 0910                        18            .byte	$18
02713 0911                        18            .byte	$18
02714 0912                        18            .byte	$18
02715 0913                        18            .byte	$18
02716                                           ! 717  0x0e, 0x00, 0x0f, 0x08,
02717 0914                        0E            .byte	$E
02718 0915                        00            .byte	0
02719 0916                        0F            .byte	$F
02720 0917                        08            .byte	8
02721                                           ! 718  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02722 0918                        00            .byte	0
02723 0919                        00            .byte	0
02724 091A                        00            .byte	0
02725 091B                        00            .byte	0
02726 091C                        00            .byte	0
02727 091D                        10            .byte	$10
02728 091E                        0A            .byte	$A
02729 091F                        0F            .byte	$F
02730 0920                        FF            .byte	$FF
02731                                           ! 719 },
02732                                           ! 720 {
02733                                           ! 721  80, 29, 16, 0x00, 0x00,
02734 0921                        50            .byte	$50
02735 0922                        1D            .byte	$1D
02736 0923                        10            .byte	$10
02737 0924                        00            .byte	0
02738 0925                        00            .byte	0
02739                                           ! 722  0x01, 0x0f, 0x00, 0x06,
02740 0926                        01            .byte	1
02741 0927                        0F            .byte	$F
02742 0928                        00            .byte	0
02743 0929                        06            .byte	6
02744                                           ! 723  0xe3,
02745 092A                        E3            .byte	$E3
02746                                           ! 724  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02747 092B                        5F            .byte	$5F
02748 092C                        4F            .byte	$4F
02749 092D                        50            .byte	$50
02750 092E                        82            .byte	$82
02751 092F                        54            .byte	$54
02752 0930                        80            .byte	$80
02753 0931                        0B            .byte	$B
02754 0932                        3E            .byte	$3E
02755                                           ! 725  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02756 0933                        00            .byte	0
02757 0934                        40            .byte	$40
02758 0935                        00            .byte	0
02759 0936                        00            .byte	0
02760 0937                        00            .byte	0
02761 0938                        00            .byte	0
02762 0939                        00            .byte	0
02763 093A                        00            .byte	0
02764                                           ! 726  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02765 093B                        EA            .byte	$EA
02766 093C                        8C            .byte	$8C
02767 093D                        DF            .byte	$DF
02768 093E                        28            .byte	$28
02769 093F                        00            .byte	0
02770 0940                        E7            .byte	$E7
02771 0941                        04            .byte	4
02772 0942                        E3            .byte	$E3
02773                                           ! 727  0xff,
02774 0943                        FF            .byte	$FF
02775                                           ! 728  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02776 0944                        00            .byte	0
02777 0945                        3F            .byte	$3F
02778 0946                        00            .byte	0
02779 0947                        3F            .byte	$3F
02780 0948                        00            .byte	0
02781 0949                        3F            .byte	$3F
02782 094A                        00            .byte	0
02783 094B                        3F            .byte	$3F
02784                                           ! 729  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02785 094C                        00            .byte	0
02786 094D                        3F            .byte	$3F
02787 094E                        00            .byte	0
02788 094F                        3F            .byte	$3F
02789 0950                        00            .byte	0
02790 0951                        3F            .byte	$3F
02791 0952                        00            .byte	0
02792 0953                        3F            .byte	$3F
02793                                           ! 730  0x01, 0x00, 0x0f, 0x00,
02794 0954                        01            .byte	1
02795 0955                        00            .byte	0
02796 0956                        0F            .byte	$F
02797 0957                        00            .byte	0
02798                                           ! 731  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02799 0958                        00            .byte	0
02800 0959                        00            .byte	0
02801 095A                        00            .byte	0
02802 095B                        00            .byte	0
02803 095C                        00            .byte	0
02804 095D                        00            .byte	0
02805 095E                        05            .byte	5
02806 095F                        0F            .byte	$F
02807 0960                        FF            .byte	$FF
02808                                           ! 732 },
02809                                           ! 733 {
02810                                           ! 734  80, 29, 16, 0x00, 0x00,
02811 0961                        50            .byte	$50
02812 0962                        1D            .byte	$1D
02813 0963                        10            .byte	$10
02814 0964                        00            .byte	0
02815 0965                        00            .byte	0
02816                                           ! 735  0x01, 0x0f, 0x00, 0x06,
02817 0966                        01            .byte	1
02818 0967                        0F            .byte	$F
02819 0968                        00            .byte	0
02820 0969                        06            .byte	6
02821                                           ! 736  0xe3,
02822 096A                        E3            .byte	$E3
02823                                           ! 737  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02824 096B                        5F            .byte	$5F
02825 096C                        4F            .byte	$4F
02826 096D                        50            .byte	$50
02827 096E                        82            .byte	$82
02828 096F                        54            .byte	$54
02829 0970                        80            .byte	$80
02830 0971                        0B            .byte	$B
02831 0972                        3E            .byte	$3E
02832                                           ! 738  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02833 0973                        00            .byte	0
02834 0974                        40            .byte	$40
02835 0975                        00            .byte	0
02836 0976                        00            .byte	0
02837 0977                        00            .byte	0
02838 0978                        00            .byte	0
02839 0979                        00            .byte	0
02840 097A                        00            .byte	0
02841                                           ! 739  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02842 097B                        EA            .byte	$EA
02843 097C                        8C            .byte	$8C
02844 097D                        DF            .byte	$DF
02845 097E                        28            .byte	$28
02846 097F                        00            .byte	0
02847 0980                        E7            .byte	$E7
02848 0981                        04            .byte	4
02849 0982                        E3            .byte	$E3
02850                                           ! 740  0xff,
02851 0983                        FF            .byte	$FF
02852                                           ! 741  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02853 0984                        00            .byte	0
02854 0985                        01            .byte	1
02855 0986                        02            .byte	2
02856 0987                        03            .byte	3
02857 0988                        04            .byte	4
02858 0989                        05            .byte	5
02859 098A                        14            .byte	$14
02860 098B                        07            .byte	7
02861                                           ! 742  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02862 098C                        38            .byte	$38
02863 098D                        39            .byte	$39
02864 098E                        3A            .byte	$3A
02865 098F                        3B            .byte	$3B
02866 0990                        3C            .byte	$3C
02867 0991                        3D            .byte	$3D
02868 0992                        3E            .byte	$3E
02869 0993                        3F            .byte	$3F
02870                                           ! 743  0x01, 0x00, 0x0f, 0x00,
02871 0994                        01            .byte	1
02872 0995                        00            .byte	0
02873 0996                        0F            .byte	$F
02874 0997                        00            .byte	0
02875                                           ! 744  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02876 0998                        00            .byte	0
02877 0999                        00            .byte	0
02878 099A                        00            .byte	0
02879 099B                        00            .byte	0
02880 099C                        00            .byte	0
02881 099D                        00            .byte	0
02882 099E                        05            .byte	5
02883 099F                        0F            .byte	$F
02884 09A0                        FF            .byte	$FF
02885                                           ! 745 },
02886                                           ! 746 {
02887                                           ! 747  40, 24, 8, 0x00, 0x00,
02888 09A1                        28            .byte	$28
02889 09A2                        18            .byte	$18
02890 09A3                        08            .byte	8
02891 09A4                        00            .byte	0
02892 09A5                        00            .byte	0
02893                                           ! 748  0x01, 0x0f, 0x00, 0x0e,
02894 09A6                        01            .byte	1
02895 09A7                        0F            .byte	$F
02896 09A8                        00            .byte	0
02897 09A9                        0E            .byte	$E
02898                                           ! 749  0x63,
02899 09AA                        63            .byte	$63
02900                                           ! 750  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02901 09AB                        5F            .byte	$5F
02902 09AC                        4F            .byte	$4F
02903 09AD                        50            .byte	$50
02904 09AE                        82            .byte	$82
02905 09AF                        54            .byte	$54
02906 09B0                        80            .byte	$80
02907 09B1                        BF            .byte	$BF
02908 09B2                        1F            .byte	$1F
02909                                           ! 751  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02910 09B3                        00            .byte	0
02911 09B4                        41            .byte	$41
02912 09B5                        00            .byte	0
02913 09B6                        00            .byte	0
02914 09B7                        00            .byte	0
02915 09B8                        00            .byte	0
02916 09B9                        00            .byte	0
02917 09BA                        00            .byte	0
02918                                           ! 752  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02919 09BB                        9C            .byte	$9C
02920 09BC                        8E            .byte	$8E
02921 09BD                        8F            .byte	$8F
02922 09BE                        28            .byte	$28
02923 09BF                        40            .byte	$40
02924 09C0                        96            .byte	$96
02925 09C1                        B9            .byte	$B9
02926 09C2                        A3            .byte	$A3
02927                                           ! 753  0xff,
02928 09C3                        FF            .byte	$FF
02929                                           ! 754  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02930 09C4                        00            .byte	0
02931 09C5                        01            .byte	1
02932 09C6                        02            .byte	2
02933 09C7                        03            .byte	3
02934 09C8                        04            .byte	4
02935 09C9                        05            .byte	5
02936 09CA                        06            .byte	6
02937 09CB                        07            .byte	7
02938                                           ! 755  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02939 09CC                        08            .byte	8
02940 09CD                        09            .byte	9
02941 09CE                        0A            .byte	$A
02942 09CF                        0B            .byte	$B
02943 09D0                        0C            .byte	$C
02944 09D1                        0D            .byte	$D
02945 09D2                        0E            .byte	$E
02946 09D3                        0F            .byte	$F
02947                                           ! 756  0x41, 0x00, 0x0f, 0x00,
02948 09D4                        41            .byte	$41
02949 09D5                        00            .byte	0
02950 09D6                        0F            .byte	$F
02951 09D7                        00            .byte	0
02952                                           ! 757  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02953 09D8                        00            .byte	0
02954 09D9                        00            .byte	0
02955 09DA                        00            .byte	0
02956 09DB                        00            .byte	0
02957 09DC                        00            .byte	0
02958 09DD                        40            .byte	$40
02959 09DE                        05            .byte	5
02960 09DF                        0F            .byte	$F
02961 09E0                        FF            .byte	$FF
02962                                           ! 758 },
02963                                           ! 759 {
02964                                           ! 760  100, 36, 16, 0x00, 0x00,
02965 09E1                        64            .byte	$64
02966 09E2                        24            .byte	$24
02967 09E3                        10            .byte	$10
02968 09E4                        00            .byte	0
02969 09E5                        00            .byte	0
02970                                           ! 761  0x01, 0x0f, 0x00, 0x06,
02971 09E6                        01            .byte	1
02972 09E7                        0F            .byte	$F
02973 09E8                        00            .byte	0
02974 09E9                        06            .byte	6
02975                                           ! 762  0xe3,
02976 09EA                        E3            .byte	$E3
02977                                           ! 763  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02978 09EB                        7F            .byte	$7F
02979 09EC                        63            .byte	$63
02980 09ED                        63            .byte	$63
02981 09EE                        83            .byte	$83
02982 09EF                        6B            .byte	$6B
02983 09F0                        1B            .byte	$1B
02984 09F1                        72            .byte	$72
02985 09F2                        F0            .byte	$F0
02986                                           ! 764  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02987 09F3                        00            .byte	0
02988 09F4                        60            .byte	$60
02989 09F5                        00            .byte	0
02990 09F6                        00            .byte	0
02991 09F7                        00            .byte	0
02992 09F8                        00            .byte	0
02993 09F9                        00            .byte	0
02994 09FA                        00            .byte	0
02995                                           ! 765  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02996 09FB                        59            .byte	$59
02997 09FC                        8D            .byte	$8D
02998 09FD                        57            .byte	$57
02999 09FE                        32            .byte	$32
03000 09FF                        00            .byte	0
03001 0A00                        57            .byte	$57
03002 0A01                        73            .byte	$73
03003 0A02                        E3            .byte	$E3
03004                                           ! 766  0xff,
03005 0A03                        FF            .byte	$FF
03006                                           ! 767  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03007 0A04                        00            .byte	0
03008 0A05                        01            .byte	1
03009 0A06                        02            .byte	2
03010 0A07                        03            .byte	3
03011 0A08                        04            .byte	4
03012 0A09                        05            .byte	5
03013 0A0A                        14            .byte	$14
03014 0A0B                        07            .byte	7
03015                                           ! 768  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03016 0A0C                        38            .byte	$38
03017 0A0D                        39            .byte	$39
03018 0A0E                        3A            .byte	$3A
03019 0A0F                        3B            .byte	$3B
03020 0A10                        3C            .byte	$3C
03021 0A11                        3D            .byte	$3D
03022 0A12                        3E            .byte	$3E
03023 0A13                        3F            .byte	$3F
03024                                           ! 769  0x01, 0x00, 0x0f, 0x00,
03025 0A14                        01            .byte	1
03026 0A15                        00            .byte	0
03027 0A16                        0F            .byte	$F
03028 0A17                        00            .byte	0
03029                                           ! 770  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03030 0A18                        00            .byte	0
03031 0A19                        00            .byte	0
03032 0A1A                        00            .byte	0
03033 0A1B                        00            .byte	0
03034 0A1C                        00            .byte	0
03035 0A1D                        00            .byte	0
03036 0A1E                        05            .byte	5
03037 0A1F                        0F            .byte	$F
03038 0A20                        FF            .byte	$FF
03039                                           ! 771 },
03040                                           ! 772 };
03041                                           !BCC_EOS
03042                                           ! 773 static Bit8u palette0[63+1][3]=
03043                                           ! 774 {
03044                       00000A21            _palette0:
03045                                           ! 775   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03046 0A21                        00            .byte	0
03047 0A22                        00            .byte	0
03048 0A23                        00            .byte	0
03049 0A24                        00            .byte	0
03050 0A25                        00            .byte	0
03051 0A26                        00            .byte	0
03052 0A27                        00            .byte	0
03053 0A28                        00            .byte	0
03054 0A29                        00            .byte	0
03055 0A2A                        00            .byte	0
03056 0A2B                        00            .byte	0
03057 0A2C                        00            .byte	0
03058 0A2D                        00            .byte	0
03059 0A2E                        00            .byte	0
03060 0A2F                        00            .byte	0
03061 0A30                        00            .byte	0
03062 0A31                        00            .byte	0
03063 0A32                        00            .byte	0
03064 0A33                        00            .byte	0
03065 0A34                        00            .byte	0
03066 0A35                        00            .byte	0
03067 0A36                        00            .byte	0
03068 0A37                        00            .byte	0
03069 0A38                        00            .byte	0
03070                                           ! 776   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a
03071 0A39                        2A            .byte	$2A
03072 0A3A                        2A            .byte	$2A
03073 0A3B                        2A            .byte	$2A
03074 0A3C                        2A            .byte	$2A
03075 0A3D                        2A            .byte	$2A
03076 0A3E                        2A            .byte	$2A
03077 0A3F                        2A            .byte	$2A
03078 0A40                        2A            .byte	$2A
03079 0A41                        2A            .byte	$2A
03080 0A42                        2A            .byte	$2A
03081 0A43                        2A            .byte	$2A
03082                                           ! 776 , 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03083 0A44                        2A            .byte	$2A
03084 0A45                        2A            .byte	$2A
03085 0A46                        2A            .byte	$2A
03086 0A47                        2A            .byte	$2A
03087 0A48                        2A            .byte	$2A
03088 0A49                        2A            .byte	$2A
03089 0A4A                        2A            .byte	$2A
03090 0A4B                        2A            .byte	$2A
03091 0A4C                        2A            .byte	$2A
03092 0A4D                        2A            .byte	$2A
03093 0A4E                        2A            .byte	$2A
03094 0A4F                        2A            .byte	$2A
03095 0A50                        2A            .byte	$2A
03096                                           ! 777   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03097 0A51                        2A            .byte	$2A
03098 0A52                        2A            .byte	$2A
03099 0A53                        2A            .byte	$2A
03100 0A54                        2A            .byte	$2A
03101 0A55                        2A            .byte	$2A
03102 0A56                        2A            .byte	$2A
03103 0A57                        2A            .byte	$2A
03104 0A58                        2A            .byte	$2A
03105 0A59                        2A            .byte	$2A
03106 0A5A                        2A            .byte	$2A
03107 0A5B                        2A            .byte	$2A
03108 0A5C                        2A            .byte	$2A
03109 0A5D                        2A            .byte	$2A
03110 0A5E                        2A            .byte	$2A
03111 0A5F                        2A            .byte	$2A
03112 0A60                        2A            .byte	$2A
03113 0A61                        2A            .byte	$2A
03114 0A62                        2A            .byte	$2A
03115 0A63                        2A            .byte	$2A
03116 0A64                        2A            .byte	$2A
03117 0A65                        2A            .byte	$2A
03118 0A66                        2A            .byte	$2A
03119 0A67                        2A            .byte	$2A
03120 0A68                        2A            .byte	$2A
03121                                           ! 778   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03122 0A69                        3F            .byte	$3F
03123 0A6A                        3F            .byte	$3F
03124 0A6B                        3F            .byte	$3F
03125 0A6C                        3F            .byte	$3F
03126 0A6D                        3F            .byte	$3F
03127 0A6E                        3F            .byte	$3F
03128 0A6F                        3F            .byte	$3F
03129 0A70                        3F            .byte	$3F
03130 0A71                        3F            .byte	$3F
03131 0A72                        3F            .byte	$3F
03132 0A73                        3F            .byte	$3F
03133 0A74                        3F            .byte	$3F
03134 0A75                        3F            .byte	$3F
03135 0A76                        3F            .byte	$3F
03136 0A77                        3F            .byte	$3F
03137 0A78                        3F            .byte	$3F
03138 0A79                        3F            .byte	$3F
03139 0A7A                        3F            .byte	$3F
03140 0A7B                        3F            .byte	$3F
03141 0A7C                        3F            .byte	$3F
03142 0A7D                        3F            .byte	$3F
03143 0A7E                        3F            .byte	$3F
03144 0A7F                        3F            .byte	$3F
03145 0A80                        3F            .byte	$3F
03146                                           ! 779   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03147 0A81                        00            .byte	0
03148 0A82                        00            .byte	0
03149 0A83                        00            .byte	0
03150 0A84                        00            .byte	0
03151 0A85                        00            .byte	0
03152 0A86                        00            .byte	0
03153 0A87                        00            .byte	0
03154 0A88                        00            .byte	0
03155 0A89                        00            .byte	0
03156 0A8A                        00            .byte	0
03157 0A8B                        00            .byte	0
03158 0A8C                        00            .byte	0
03159 0A8D                        00            .byte	0
03160 0A8E                        00            .byte	0
03161 0A8F                        00            .byte	0
03162 0A90                        00            .byte	0
03163 0A91                        00            .byte	0
03164 0A92                        00            .byte	0
03165 0A93                        00            .byte	0
03166 0A94                        00            .byte	0
03167 0A95                        00            .byte	0
03168 0A96                        00            .byte	0
03169 0A97                        00            .byte	0
03170 0A98                        00            .byte	0
03171                                           ! 780   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03172 0A99                        2A            .byte	$2A
03173 0A9A                        2A            .byte	$2A
03174 0A9B                        2A            .byte	$2A
03175 0A9C                        2A            .byte	$2A
03176 0A9D                        2A            .byte	$2A
03177 0A9E                        2A            .byte	$2A
03178 0A9F                        2A            .byte	$2A
03179 0AA0                        2A            .byte	$2A
03180 0AA1                        2A            .byte	$2A
03181 0AA2                        2A            .byte	$2A
03182 0AA3                        2A            .byte	$2A
03183 0AA4                        2A            .byte	$2A
03184 0AA5                        2A            .byte	$2A
03185 0AA6                        2A            .byte	$2A
03186 0AA7                        2A            .byte	$2A
03187 0AA8                        2A            .byte	$2A
03188 0AA9                        2A            .byte	$2A
03189 0AAA                        2A            .byte	$2A
03190 0AAB                        2A            .byte	$2A
03191 0AAC                        2A            .byte	$2A
03192 0AAD                        2A            .byte	$2A
03193 0AAE                        2A            .byte	$2A
03194 0AAF                        2A            .byte	$2A
03195 0AB0                        2A            .byte	$2A
03196                                           ! 781   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03197 0AB1                        2A            .byte	$2A
03198 0AB2                        2A            .byte	$2A
03199 0AB3                        2A            .byte	$2A
03200 0AB4                        2A            .byte	$2A
03201 0AB5                        2A            .byte	$2A
03202 0AB6                        2A            .byte	$2A
03203 0AB7                        2A            .byte	$2A
03204 0AB8                        2A            .byte	$2A
03205 0AB9                        2A            .byte	$2A
03206 0ABA                        2A            .byte	$2A
03207 0ABB                        2A            .byte	$2A
03208 0ABC                        2A            .byte	$2A
03209 0ABD                        2A            .byte	$2A
03210 0ABE                        2A            .byte	$2A
03211 0ABF                        2A            .byte	$2A
03212 0AC0                        2A            .byte	$2A
03213 0AC1                        2A            .byte	$2A
03214 0AC2                        2A            .byte	$2A
03215 0AC3                        2A            .byte	$2A
03216 0AC4                        2A            .byte	$2A
03217 0AC5                        2A            .byte	$2A
03218 0AC6                        2A            .byte	$2A
03219 0AC7                        2A            .byte	$2A
03220 0AC8                        2A            .byte	$2A
03221                                           ! 782   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03222 0AC9                        3F            .byte	$3F
03223 0ACA                        3F            .byte	$3F
03224 0ACB                        3F            .byte	$3F
03225 0ACC                        3F            .byte	$3F
03226 0ACD                        3F            .byte	$3F
03227 0ACE                        3F            .byte	$3F
03228 0ACF                        3F            .byte	$3F
03229 0AD0                        3F            .byte	$3F
03230 0AD1                        3F            .byte	$3F
03231 0AD2                        3F            .byte	$3F
03232 0AD3                        3F            .byte	$3F
03233 0AD4                        3F            .byte	$3F
03234 0AD5                        3F            .byte	$3F
03235 0AD6                        3F            .byte	$3F
03236 0AD7                        3F            .byte	$3F
03237 0AD8                        3F            .byte	$3F
03238 0AD9                        3F            .byte	$3F
03239 0ADA                        3F            .byte	$3F
03240 0ADB                        3F            .byte	$3F
03241 0ADC                        3F            .byte	$3F
03242 0ADD                        3F            .byte	$3F
03243 0ADE                        3F            .byte	$3F
03244 0ADF                        3F            .byte	$3F
03245                                           ! 783 };
03246 0AE0                        3F            .byte	$3F
03247                                           !BCC_EOS
03248                                           ! 784 static Bit8u palette1[63+1][3]=
03249                                           ! 785 {
03250                       00000AE1            _palette1:
03251                                           ! 786   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03252 0AE1                        00            .byte	0
03253 0AE2                        00            .byte	0
03254 0AE3                        00            .byte	0
03255 0AE4                        00            .byte	0
03256 0AE5                        00            .byte	0
03257 0AE6                        2A            .byte	$2A
03258 0AE7                        00            .byte	0
03259 0AE8                        2A            .byte	$2A
03260 0AE9                        00            .byte	0
03261 0AEA                        00            .byte	0
03262 0AEB                        2A            .byte	$2A
03263 0AEC                        2A            .byte	$2A
03264 0AED                        2A            .byte	$2A
03265 0AEE                        00            .byte	0
03266 0AEF                        00            .byte	0
03267 0AF0                        2A            .byte	$2A
03268 0AF1                        00            .byte	0
03269 0AF2                        2A            .byte	$2A
03270 0AF3                        2A            .byte	$2A
03271 0AF4                        15            .byte	$15
03272 0AF5                        00            .byte	0
03273 0AF6                        2A            .byte	$2A
03274 0AF7                        2A            .byte	$2A
03275 0AF8                        2A            .byte	$2A
03276                                           ! 787   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03277 0AF9                        00            .byte	0
03278 0AFA                        00            .byte	0
03279 0AFB                        00            .byte	0
03280 0AFC                        00            .byte	0
03281 0AFD                        00            .byte	0
03282 0AFE                        2A            .byte	$2A
03283 0AFF                        00            .byte	0
03284 0B00                        2A            .byte	$2A
03285 0B01                        00            .byte	0
03286 0B02                        00            .byte	0
03287 0B03                        2A            .byte	$2A
03288 0B04                        2A            .byte	$2A
03289 0B05                        2A            .byte	$2A
03290 0B06                        00            .byte	0
03291 0B07                        00            .byte	0
03292 0B08                        2A            .byte	$2A
03293 0B09                        00            .byte	0
03294 0B0A                        2A            .byte	$2A
03295 0B0B                        2A            .byte	$2A
03296 0B0C                        15            .byte	$15
03297 0B0D                        00            .byte	0
03298 0B0E                        2A            .byte	$2A
03299 0B0F                        2A            .byte	$2A
03300 0B10                        2A            .byte	$2A
03301                                           ! 788   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03302 0B11                        15            .byte	$15
03303 0B12                        15            .byte	$15
03304 0B13                        15            .byte	$15
03305 0B14                        15            .byte	$15
03306 0B15                        15            .byte	$15
03307 0B16                        3F            .byte	$3F
03308 0B17                        15            .byte	$15
03309 0B18                        3F            .byte	$3F
03310 0B19                        15            .byte	$15
03311 0B1A                        15            .byte	$15
03312 0B1B                        3F            .byte	$3F
03313 0B1C                        3F            .byte	$3F
03314 0B1D                        3F            .byte	$3F
03315 0B1E                        15            .byte	$15
03316 0B1F                        15            .byte	$15
03317 0B20                        3F            .byte	$3F
03318 0B21                        15            .byte	$15
03319 0B22                        3F            .byte	$3F
03320 0B23                        3F            .byte	$3F
03321 0B24                        3F            .byte	$3F
03322 0B25                        15            .byte	$15
03323 0B26                        3F            .byte	$3F
03324 0B27                        3F            .byte	$3F
03325 0B28                        3F            .byte	$3F
03326                                           ! 789   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03327 0B29                        15            .byte	$15
03328 0B2A                        15            .byte	$15
03329 0B2B                        15            .byte	$15
03330 0B2C                        15            .byte	$15
03331 0B2D                        15            .byte	$15
03332 0B2E                        3F            .byte	$3F
03333 0B2F                        15            .byte	$15
03334 0B30                        3F            .byte	$3F
03335 0B31                        15            .byte	$15
03336 0B32                        15            .byte	$15
03337 0B33                        3F            .byte	$3F
03338 0B34                        3F            .byte	$3F
03339 0B35                        3F            .byte	$3F
03340 0B36                        15            .byte	$15
03341 0B37                        15            .byte	$15
03342 0B38                        3F            .byte	$3F
03343 0B39                        15            .byte	$15
03344 0B3A                        3F            .byte	$3F
03345 0B3B                        3F            .byte	$3F
03346 0B3C                        3F            .byte	$3F
03347 0B3D                        15            .byte	$15
03348 0B3E                        3F            .byte	$3F
03349 0B3F                        3F            .byte	$3F
03350 0B40                        3F            .byte	$3F
03351                                           ! 790   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03352 0B41                        00            .byte	0
03353 0B42                        00            .byte	0
03354 0B43                        00            .byte	0
03355 0B44                        00            .byte	0
03356 0B45                        00            .byte	0
03357 0B46                        2A            .byte	$2A
03358 0B47                        00            .byte	0
03359 0B48                        2A            .byte	$2A
03360 0B49                        00            .byte	0
03361 0B4A                        00            .byte	0
03362 0B4B                        2A            .byte	$2A
03363 0B4C                        2A            .byte	$2A
03364 0B4D                        2A            .byte	$2A
03365 0B4E                        00            .byte	0
03366 0B4F                        00            .byte	0
03367 0B50                        2A            .byte	$2A
03368 0B51                        00            .byte	0
03369 0B52                        2A            .byte	$2A
03370 0B53                        2A            .byte	$2A
03371 0B54                        15            .byte	$15
03372 0B55                        00            .byte	0
03373 0B56                        2A            .byte	$2A
03374 0B57                        2A            .byte	$2A
03375 0B58                        2A            .byte	$2A
03376                                           ! 791   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03377 0B59                        00            .byte	0
03378 0B5A                        00            .byte	0
03379 0B5B                        00            .byte	0
03380 0B5C                        00            .byte	0
03381 0B5D                        00            .byte	0
03382 0B5E                        2A            .byte	$2A
03383 0B5F                        00            .byte	0
03384 0B60                        2A            .byte	$2A
03385 0B61                        00            .byte	0
03386 0B62                        00            .byte	0
03387 0B63                        2A            .byte	$2A
03388 0B64                        2A            .byte	$2A
03389 0B65                        2A            .byte	$2A
03390 0B66                        00            .byte	0
03391 0B67                        00            .byte	0
03392 0B68                        2A            .byte	$2A
03393 0B69                        00            .byte	0
03394 0B6A                        2A            .byte	$2A
03395 0B6B                        2A            .byte	$2A
03396 0B6C                        15            .byte	$15
03397 0B6D                        00            .byte	0
03398 0B6E                        2A            .byte	$2A
03399 0B6F                        2A            .byte	$2A
03400 0B70                        2A            .byte	$2A
03401                                           ! 792   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03402 0B71                        15            .byte	$15
03403 0B72                        15            .byte	$15
03404 0B73                        15            .byte	$15
03405 0B74                        15            .byte	$15
03406 0B75                        15            .byte	$15
03407 0B76                        3F            .byte	$3F
03408 0B77                        15            .byte	$15
03409 0B78                        3F            .byte	$3F
03410 0B79                        15            .byte	$15
03411 0B7A                        15            .byte	$15
03412 0B7B                        3F            .byte	$3F
03413 0B7C                        3F            .byte	$3F
03414 0B7D                        3F            .byte	$3F
03415 0B7E                        15            .byte	$15
03416 0B7F                        15            .byte	$15
03417 0B80                        3F            .byte	$3F
03418 0B81                        15            .byte	$15
03419 0B82                        3F            .byte	$3F
03420 0B83                        3F            .byte	$3F
03421 0B84                        3F            .byte	$3F
03422 0B85                        15            .byte	$15
03423 0B86                        3F            .byte	$3F
03424 0B87                        3F            .byte	$3F
03425 0B88                        3F            .byte	$3F
03426                                           ! 793   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03427 0B89                        15            .byte	$15
03428 0B8A                        15            .byte	$15
03429 0B8B                        15            .byte	$15
03430 0B8C                        15            .byte	$15
03431 0B8D                        15            .byte	$15
03432 0B8E                        3F            .byte	$3F
03433 0B8F                        15            .byte	$15
03434 0B90                        3F            .byte	$3F
03435 0B91                        15            .byte	$15
03436 0B92                        15            .byte	$15
03437 0B93                        3F            .byte	$3F
03438 0B94                        3F            .byte	$3F
03439 0B95                        3F            .byte	$3F
03440 0B96                        15            .byte	$15
03441 0B97                        15            .byte	$15
03442 0B98                        3F            .byte	$3F
03443 0B99                        15            .byte	$15
03444 0B9A                        3F            .byte	$3F
03445 0B9B                        3F            .byte	$3F
03446 0B9C                        3F            .byte	$3F
03447 0B9D                        15            .byte	$15
03448 0B9E                        3F            .byte	$3F
03449 0B9F                        3F            .byte	$3F
03450                                           ! 794 };
03451 0BA0                        3F            .byte	$3F
03452                                           !BCC_EOS
03453                                           ! 795 static Bit8u palette2[63+1][3]=
03454                                           ! 796 {
03455                       00000BA1            _palette2:
03456                                           ! 797   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x0
03457 0BA1                        00            .byte	0
03458 0BA2                        00            .byte	0
03459 0BA3                        00            .byte	0
03460 0BA4                        00            .byte	0
03461 0BA5                        00            .byte	0
03462 0BA6                        2A            .byte	$2A
03463 0BA7                        00            .byte	0
03464 0BA8                        2A            .byte	$2A
03465 0BA9                        00            .byte	0
03466 0BAA                        00            .byte	0
03467 0BAB                        2A            .byte	$2A
03468 0BAC                        2A            .byte	$2A
03469 0BAD                        2A            .byte	$2A
03470 0BAE                        00            .byte	0
03471 0BAF                        00            .byte	0
03472 0BB0                        2A            .byte	$2A
03473                                           ! 797 0,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03474 0BB1                        00            .byte	0
03475 0BB2                        2A            .byte	$2A
03476 0BB3                        2A            .byte	$2A
03477 0BB4                        2A            .byte	$2A
03478 0BB5                        00            .byte	0
03479 0BB6                        2A            .byte	$2A
03480 0BB7                        2A            .byte	$2A
03481 0BB8                        2A            .byte	$2A
03482                                           ! 798   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03483 0BB9                        00            .byte	0
03484 0BBA                        00            .byte	0
03485 0BBB                        15            .byte	$15
03486 0BBC                        00            .byte	0
03487 0BBD                        00            .byte	0
03488 0BBE                        3F            .byte	$3F
03489 0BBF                        00            .byte	0
03490 0BC0                        2A            .byte	$2A
03491 0BC1                        15            .byte	$15
03492 0BC2                        00            .byte	0
03493 0BC3                        2A            .byte	$2A
03494 0BC4                        3F            .byte	$3F
03495 0BC5                        2A            .byte	$2A
03496 0BC6                        00            .byte	0
03497 0BC7                        15            .byte	$15
03498 0BC8                        2A            .byte	$2A
03499 0BC9                        00            .byte	0
03500 0BCA                        3F            .byte	$3F
03501 0BCB                        2A            .byte	$2A
03502 0BCC                        2A            .byte	$2A
03503 0BCD                        15            .byte	$15
03504 0BCE                        2A            .byte	$2A
03505 0BCF                        2A            .byte	$2A
03506 0BD0                        3F            .byte	$3F
03507                                           ! 799   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03508 0BD1                        00            .byte	0
03509 0BD2                        15            .byte	$15
03510 0BD3                        00            .byte	0
03511 0BD4                        00            .byte	0
03512 0BD5                        15            .byte	$15
03513 0BD6                        2A            .byte	$2A
03514 0BD7                        00            .byte	0
03515 0BD8                        3F            .byte	$3F
03516 0BD9                        00            .byte	0
03517 0BDA                        00            .byte	0
03518 0BDB                        3F            .byte	$3F
03519 0BDC                        2A            .byte	$2A
03520 0BDD                        2A            .byte	$2A
03521 0BDE                        15            .byte	$15
03522 0BDF                        00            .byte	0
03523 0BE0                        2A            .byte	$2A
03524 0BE1                        15            .byte	$15
03525 0BE2                        2A            .byte	$2A
03526 0BE3                        2A            .byte	$2A
03527 0BE4                        3F            .byte	$3F
03528 0BE5                        00            .byte	0
03529 0BE6                        2A            .byte	$2A
03530 0BE7                        3F            .byte	$3F
03531 0BE8                        2A            .byte	$2A
03532                                           ! 800   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03533 0BE9                        00            .byte	0
03534 0BEA                        15            .byte	$15
03535 0BEB                        15            .byte	$15
03536 0BEC                        00            .byte	0
03537 0BED                        15            .byte	$15
03538 0BEE                        3F            .byte	$3F
03539 0BEF                        00            .byte	0
03540 0BF0                        3F            .byte	$3F
03541 0BF1                        15            .byte	$15
03542 0BF2                        00            .byte	0
03543 0BF3                        3F            .byte	$3F
03544 0BF4                        3F            .byte	$3F
03545 0BF5                        2A            .byte	$2A
03546 0BF6                        15            .byte	$15
03547 0BF7                        15            .byte	$15
03548 0BF8                        2A            .byte	$2A
03549 0BF9                        15            .byte	$15
03550 0BFA                        3F            .byte	$3F
03551 0BFB                        2A            .byte	$2A
03552 0BFC                        3F            .byte	$3F
03553 0BFD                        15            .byte	$15
03554 0BFE                        2A            .byte	$2A
03555 0BFF                        3F            .byte	$3F
03556 0C00                        3F            .byte	$3F
03557                                           ! 801   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03558 0C01                        15            .byte	$15
03559 0C02                        00            .byte	0
03560 0C03                        00            .byte	0
03561 0C04                        15            .byte	$15
03562 0C05                        00            .byte	0
03563 0C06                        2A            .byte	$2A
03564 0C07                        15            .byte	$15
03565 0C08                        2A            .byte	$2A
03566 0C09                        00            .byte	0
03567 0C0A                        15            .byte	$15
03568 0C0B                        2A            .byte	$2A
03569 0C0C                        2A            .byte	$2A
03570 0C0D                        3F            .byte	$3F
03571 0C0E                        00            .byte	0
03572 0C0F                        00            .byte	0
03573 0C10                        3F            .byte	$3F
03574 0C11                        00            .byte	0
03575 0C12                        2A            .byte	$2A
03576 0C13                        3F            .byte	$3F
03577 0C14                        2A            .byte	$2A
03578 0C15                        00            .byte	0
03579 0C16                        3F            .byte	$3F
03580 0C17                        2A            .byte	$2A
03581 0C18                        2A            .byte	$2A
03582                                           ! 802   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03583 0C19                        15            .byte	$15
03584 0C1A                        00            .byte	0
03585 0C1B                        15            .byte	$15
03586 0C1C                        15            .byte	$15
03587 0C1D                        00            .byte	0
03588 0C1E                        3F            .byte	$3F
03589 0C1F                        15            .byte	$15
03590 0C20                        2A            .byte	$2A
03591 0C21                        15            .byte	$15
03592 0C22                        15            .byte	$15
03593 0C23                        2A            .byte	$2A
03594 0C24                        3F            .byte	$3F
03595 0C25                        3F            .byte	$3F
03596 0C26                        00            .byte	0
03597 0C27                        15            .byte	$15
03598 0C28                        3F            .byte	$3F
03599 0C29                        00            .byte	0
03600 0C2A                        3F            .byte	$3F
03601 0C2B                        3F            .byte	$3F
03602 0C2C                        2A            .byte	$2A
03603 0C2D                        15            .byte	$15
03604 0C2E                        3F            .byte	$3F
03605 0C2F                        2A            .byte	$2A
03606 0C30                        3F            .byte	$3F
03607                                           ! 803   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03608 0C31                        15            .byte	$15
03609 0C32                        15            .byte	$15
03610 0C33                        00            .byte	0
03611 0C34                        15            .byte	$15
03612 0C35                        15            .byte	$15
03613 0C36                        2A            .byte	$2A
03614 0C37                        15            .byte	$15
03615 0C38                        3F            .byte	$3F
03616 0C39                        00            .byte	0
03617 0C3A                        15            .byte	$15
03618 0C3B                        3F            .byte	$3F
03619 0C3C                        2A            .byte	$2A
03620 0C3D                        3F            .byte	$3F
03621 0C3E                        15            .byte	$15
03622 0C3F                        00            .byte	0
03623 0C40                        3F            .byte	$3F
03624 0C41                        15            .byte	$15
03625 0C42                        2A            .byte	$2A
03626 0C43                        3F            .byte	$3F
03627 0C44                        3F            .byte	$3F
03628 0C45                        00            .byte	0
03629 0C46                        3F            .byte	$3F
03630 0C47                        3F            .byte	$3F
03631 0C48                        2A            .byte	$2A
03632                                           ! 804   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03633 0C49                        15            .byte	$15
03634 0C4A                        15            .byte	$15
03635 0C4B                        15            .byte	$15
03636 0C4C                        15            .byte	$15
03637 0C4D                        15            .byte	$15
03638 0C4E                        3F            .byte	$3F
03639 0C4F                        15            .byte	$15
03640 0C50                        3F            .byte	$3F
03641 0C51                        15            .byte	$15
03642 0C52                        15            .byte	$15
03643 0C53                        3F            .byte	$3F
03644 0C54                        3F            .byte	$3F
03645 0C55                        3F            .byte	$3F
03646 0C56                        15            .byte	$15
03647 0C57                        15            .byte	$15
03648 0C58                        3F            .byte	$3F
03649 0C59                        15            .byte	$15
03650 0C5A                        3F            .byte	$3F
03651 0C5B                        3F            .byte	$3F
03652 0C5C                        3F            .byte	$3F
03653 0C5D                        15            .byte	$15
03654 0C5E                        3F            .byte	$3F
03655 0C5F                        3F            .byte	$3F
03656                                           ! 805 };
03657 0C60                        3F            .byte	$3F
03658                                           !BCC_EOS
03659                                           ! 806 static Bit8u palette3[256][3]=
03660                                           ! 807 {
03661                       00000C61            _palette3:
03662                                           ! 808   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03663 0C61                        00            .byte	0
03664 0C62                        00            .byte	0
03665 0C63                        00            .byte	0
03666 0C64                        00            .byte	0
03667 0C65                        00            .byte	0
03668 0C66                        2A            .byte	$2A
03669 0C67                        00            .byte	0
03670 0C68                        2A            .byte	$2A
03671 0C69                        00            .byte	0
03672 0C6A                        00            .byte	0
03673 0C6B                        2A            .byte	$2A
03674 0C6C                        2A            .byte	$2A
03675 0C6D                        2A            .byte	$2A
03676 0C6E                        00            .byte	0
03677 0C6F                        00            .byte	0
03678 0C70                        2A            .byte	$2A
03679 0C71                        00            .byte	0
03680 0C72                        2A            .byte	$2A
03681 0C73                        2A            .byte	$2A
03682 0C74                        15            .byte	$15
03683 0C75                        00            .byte	0
03684 0C76                        2A            .byte	$2A
03685 0C77                        2A            .byte	$2A
03686 0C78                        2A            .byte	$2A
03687                                           ! 809   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03688 0C79                        15            .byte	$15
03689 0C7A                        15            .byte	$15
03690 0C7B                        15            .byte	$15
03691 0C7C                        15            .byte	$15
03692 0C7D                        15            .byte	$15
03693 0C7E                        3F            .byte	$3F
03694 0C7F                        15            .byte	$15
03695 0C80                        3F            .byte	$3F
03696 0C81                        15            .byte	$15
03697 0C82                        15            .byte	$15
03698 0C83                        3F            .byte	$3F
03699 0C84                        3F            .byte	$3F
03700 0C85                        3F            .byte	$3F
03701 0C86                        15            .byte	$15
03702 0C87                        15            .byte	$15
03703 0C88                        3F            .byte	$3F
03704 0C89                        15            .byte	$15
03705 0C8A                        3F            .byte	$3F
03706 0C8B                        3F            .byte	$3F
03707 0C8C                        3F            .byte	$3F
03708 0C8D                        15            .byte	$15
03709 0C8E                        3F            .byte	$3F
03710 0C8F                        3F            .byte	$3F
03711 0C90                        3F            .byte	$3F
03712                                           ! 810   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03713 0C91                        00            .byte	0
03714 0C92                        00            .byte	0
03715 0C93                        00            .byte	0
03716 0C94                        05            .byte	5
03717 0C95                        05            .byte	5
03718 0C96                        05            .byte	5
03719 0C97                        08            .byte	8
03720 0C98                        08            .byte	8
03721 0C99                        08            .byte	8
03722 0C9A                        0B            .byte	$B
03723 0C9B                        0B            .byte	$B
03724 0C9C                        0B            .byte	$B
03725 0C9D                        0E            .byte	$E
03726 0C9E                        0E            .byte	$E
03727 0C9F                        0E            .byte	$E
03728 0CA0                        11            .byte	$11
03729 0CA1                        11            .byte	$11
03730 0CA2                        11            .byte	$11
03731 0CA3                        14            .byte	$14
03732 0CA4                        14            .byte	$14
03733 0CA5                        14            .byte	$14
03734 0CA6                        18            .byte	$18
03735 0CA7                        18            .byte	$18
03736 0CA8                        18            .byte	$18
03737                                           ! 811   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03738 0CA9                        1C            .byte	$1C
03739 0CAA                        1C            .byte	$1C
03740 0CAB                        1C            .byte	$1C
03741 0CAC                        20            .byte	$20
03742 0CAD                        20            .byte	$20
03743 0CAE                        20            .byte	$20
03744 0CAF                        24            .byte	$24
03745 0CB0                        24            .byte	$24
03746 0CB1                        24            .byte	$24
03747 0CB2                        28            .byte	$28
03748 0CB3                        28            .byte	$28
03749 0CB4                        28            .byte	$28
03750 0CB5                        2D            .byte	$2D
03751 0CB6                        2D            .byte	$2D
03752 0CB7                        2D            .byte	$2D
03753 0CB8                        32            .byte	$32
03754 0CB9                        32            .byte	$32
03755 0CBA                        32            .byte	$32
03756 0CBB                        38            .byte	$38
03757 0CBC                        38            .byte	$38
03758 0CBD                        38            .byte	$38
03759 0CBE                        3F            .byte	$3F
03760 0CBF                        3F            .byte	$3F
03761 0CC0                        3F            .byte	$3F
03762                                           ! 812   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03763 0CC1                        00            .byte	0
03764 0CC2                        00            .byte	0
03765 0CC3                        3F            .byte	$3F
03766 0CC4                        10            .byte	$10
03767 0CC5                        00            .byte	0
03768 0CC6                        3F            .byte	$3F
03769 0CC7                        1F            .byte	$1F
03770 0CC8                        00            .byte	0
03771 0CC9                        3F            .byte	$3F
03772 0CCA                        2F            .byte	$2F
03773 0CCB                        00            .byte	0
03774 0CCC                        3F            .byte	$3F
03775 0CCD                        3F            .byte	$3F
03776 0CCE                        00            .byte	0
03777 0CCF                        3F            .byte	$3F
03778 0CD0                        3F            .byte	$3F
03779 0CD1                        00            .byte	0
03780 0CD2                        2F            .byte	$2F
03781 0CD3                        3F            .byte	$3F
03782 0CD4                        00            .byte	0
03783 0CD5                        1F            .byte	$1F
03784 0CD6                        3F            .byte	$3F
03785 0CD7                        00            .byte	0
03786 0CD8                        10            .byte	$10
03787                                           ! 813   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03788 0CD9                        3F            .byte	$3F
03789 0CDA                        00            .byte	0
03790 0CDB                        00            .byte	0
03791 0CDC                        3F            .byte	$3F
03792 0CDD                        10            .byte	$10
03793 0CDE                        00            .byte	0
03794 0CDF                        3F            .byte	$3F
03795 0CE0                        1F            .byte	$1F
03796 0CE1                        00            .byte	0
03797 0CE2                        3F            .byte	$3F
03798 0CE3                        2F            .byte	$2F
03799 0CE4                        00            .byte	0
03800 0CE5                        3F            .byte	$3F
03801 0CE6                        3F            .byte	$3F
03802 0CE7                        00            .byte	0
03803 0CE8                        2F            .byte	$2F
03804 0CE9                        3F            .byte	$3F
03805 0CEA                        00            .byte	0
03806 0CEB                        1F            .byte	$1F
03807 0CEC                        3F            .byte	$3F
03808 0CED                        00            .byte	0
03809 0CEE                        10            .byte	$10
03810 0CEF                        3F            .byte	$3F
03811 0CF0                        00            .byte	0
03812                                           ! 814   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03813 0CF1                        00            .byte	0
03814 0CF2                        3F            .byte	$3F
03815 0CF3                        00            .byte	0
03816 0CF4                        00            .byte	0
03817 0CF5                        3F            .byte	$3F
03818 0CF6                        10            .byte	$10
03819 0CF7                        00            .byte	0
03820 0CF8                        3F            .byte	$3F
03821 0CF9                        1F            .byte	$1F
03822 0CFA                        00            .byte	0
03823 0CFB                        3F            .byte	$3F
03824 0CFC                        2F            .byte	$2F
03825 0CFD                        00            .byte	0
03826 0CFE                        3F            .byte	$3F
03827 0CFF                        3F            .byte	$3F
03828 0D00                        00            .byte	0
03829 0D01                        2F            .byte	$2F
03830 0D02                        3F            .byte	$3F
03831 0D03                        00            .byte	0
03832 0D04                        1F            .byte	$1F
03833 0D05                        3F            .byte	$3F
03834 0D06                        00            .byte	0
03835 0D07                        10            .byte	$10
03836 0D08                        3F            .byte	$3F
03837                                           ! 815   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03838 0D09                        1F            .byte	$1F
03839 0D0A                        1F            .byte	$1F
03840 0D0B                        3F            .byte	$3F
03841 0D0C                        27            .byte	$27
03842 0D0D                        1F            .byte	$1F
03843 0D0E                        3F            .byte	$3F
03844 0D0F                        2F            .byte	$2F
03845 0D10                        1F            .byte	$1F
03846 0D11                        3F            .byte	$3F
03847 0D12                        37            .byte	$37
03848 0D13                        1F            .byte	$1F
03849 0D14                        3F            .byte	$3F
03850 0D15                        3F            .byte	$3F
03851 0D16                        1F            .byte	$1F
03852 0D17                        3F            .byte	$3F
03853 0D18                        3F            .byte	$3F
03854 0D19                        1F            .byte	$1F
03855 0D1A                        37            .byte	$37
03856 0D1B                        3F            .byte	$3F
03857 0D1C                        1F            .byte	$1F
03858 0D1D                        2F            .byte	$2F
03859 0D1E                        3F            .byte	$3F
03860 0D1F                        1F            .byte	$1F
03861 0D20                        27            .byte	$27
03862                                           ! 816   0x3f,0x1f,0x1f, 0x3f,
03863 0D21                        3F            .byte	$3F
03864 0D22                        1F            .byte	$1F
03865 0D23                        1F            .byte	$1F
03866                                           ! 816 0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03867 0D24                        3F            .byte	$3F
03868 0D25                        27            .byte	$27
03869 0D26                        1F            .byte	$1F
03870 0D27                        3F            .byte	$3F
03871 0D28                        2F            .byte	$2F
03872 0D29                        1F            .byte	$1F
03873 0D2A                        3F            .byte	$3F
03874 0D2B                        37            .byte	$37
03875 0D2C                        1F            .byte	$1F
03876 0D2D                        3F            .byte	$3F
03877 0D2E                        3F            .byte	$3F
03878 0D2F                        1F            .byte	$1F
03879 0D30                        37            .byte	$37
03880 0D31                        3F            .byte	$3F
03881 0D32                        1F            .byte	$1F
03882 0D33                        2F            .byte	$2F
03883 0D34                        3F            .byte	$3F
03884 0D35                        1F            .byte	$1F
03885 0D36                        27            .byte	$27
03886 0D37                        3F            .byte	$3F
03887 0D38                        1F            .byte	$1F
03888                                           ! 817   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03889 0D39                        1F            .byte	$1F
03890 0D3A                        3F            .byte	$3F
03891 0D3B                        1F            .byte	$1F
03892 0D3C                        1F            .byte	$1F
03893 0D3D                        3F            .byte	$3F
03894 0D3E                        27            .byte	$27
03895 0D3F                        1F            .byte	$1F
03896 0D40                        3F            .byte	$3F
03897 0D41                        2F            .byte	$2F
03898 0D42                        1F            .byte	$1F
03899 0D43                        3F            .byte	$3F
03900 0D44                        37            .byte	$37
03901 0D45                        1F            .byte	$1F
03902 0D46                        3F            .byte	$3F
03903 0D47                        3F            .byte	$3F
03904 0D48                        1F            .byte	$1F
03905 0D49                        37            .byte	$37
03906 0D4A                        3F            .byte	$3F
03907 0D4B                        1F            .byte	$1F
03908 0D4C                        2F            .byte	$2F
03909 0D4D                        3F            .byte	$3F
03910 0D4E                        1F            .byte	$1F
03911 0D4F                        27            .byte	$27
03912 0D50                        3F            .byte	$3F
03913                                           ! 818   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03914 0D51                        2D            .byte	$2D
03915 0D52                        2D            .byte	$2D
03916 0D53                        3F            .byte	$3F
03917 0D54                        31            .byte	$31
03918 0D55                        2D            .byte	$2D
03919 0D56                        3F            .byte	$3F
03920 0D57                        36            .byte	$36
03921 0D58                        2D            .byte	$2D
03922 0D59                        3F            .byte	$3F
03923 0D5A                        3A            .byte	$3A
03924 0D5B                        2D            .byte	$2D
03925 0D5C                        3F            .byte	$3F
03926 0D5D                        3F            .byte	$3F
03927 0D5E                        2D            .byte	$2D
03928 0D5F                        3F            .byte	$3F
03929 0D60                        3F            .byte	$3F
03930 0D61                        2D            .byte	$2D
03931 0D62                        3A            .byte	$3A
03932 0D63                        3F            .byte	$3F
03933 0D64                        2D            .byte	$2D
03934 0D65                        36            .byte	$36
03935 0D66                        3F            .byte	$3F
03936 0D67                        2D            .byte	$2D
03937 0D68                        31            .byte	$31
03938                                           ! 819   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03939 0D69                        3F            .byte	$3F
03940 0D6A                        2D            .byte	$2D
03941 0D6B                        2D            .byte	$2D
03942 0D6C                        3F            .byte	$3F
03943 0D6D                        31            .byte	$31
03944 0D6E                        2D            .byte	$2D
03945 0D6F                        3F            .byte	$3F
03946 0D70                        36            .byte	$36
03947 0D71                        2D            .byte	$2D
03948 0D72                        3F            .byte	$3F
03949 0D73                        3A            .byte	$3A
03950 0D74                        2D            .byte	$2D
03951 0D75                        3F            .byte	$3F
03952 0D76                        3F            .byte	$3F
03953 0D77                        2D            .byte	$2D
03954 0D78                        3A            .byte	$3A
03955 0D79                        3F            .byte	$3F
03956 0D7A                        2D            .byte	$2D
03957 0D7B                        36            .byte	$36
03958 0D7C                        3F            .byte	$3F
03959 0D7D                        2D            .byte	$2D
03960 0D7E                        31            .byte	$31
03961 0D7F                        3F            .byte	$3F
03962 0D80                        2D            .byte	$2D
03963                                           ! 820   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03964 0D81                        2D            .byte	$2D
03965 0D82                        3F            .byte	$3F
03966 0D83                        2D            .byte	$2D
03967 0D84                        2D            .byte	$2D
03968 0D85                        3F            .byte	$3F
03969 0D86                        31            .byte	$31
03970 0D87                        2D            .byte	$2D
03971 0D88                        3F            .byte	$3F
03972 0D89                        36            .byte	$36
03973 0D8A                        2D            .byte	$2D
03974 0D8B                        3F            .byte	$3F
03975 0D8C                        3A            .byte	$3A
03976 0D8D                        2D            .byte	$2D
03977 0D8E                        3F            .byte	$3F
03978 0D8F                        3F            .byte	$3F
03979 0D90                        2D            .byte	$2D
03980 0D91                        3A            .byte	$3A
03981 0D92                        3F            .byte	$3F
03982 0D93                        2D            .byte	$2D
03983 0D94                        36            .byte	$36
03984 0D95                        3F            .byte	$3F
03985 0D96                        2D            .byte	$2D
03986 0D97                        31            .byte	$31
03987 0D98                        3F            .byte	$3F
03988                                           ! 821   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03989 0D99                        00            .byte	0
03990 0D9A                        00            .byte	0
03991 0D9B                        1C            .byte	$1C
03992 0D9C                        07            .byte	7
03993 0D9D                        00            .byte	0
03994 0D9E                        1C            .byte	$1C
03995 0D9F                        0E            .byte	$E
03996 0DA0                        00            .byte	0
03997 0DA1                        1C            .byte	$1C
03998 0DA2                        15            .byte	$15
03999 0DA3                        00            .byte	0
04000 0DA4                        1C            .byte	$1C
04001 0DA5                        1C            .byte	$1C
04002 0DA6                        00            .byte	0
04003 0DA7                        1C            .byte	$1C
04004 0DA8                        1C            .byte	$1C
04005 0DA9                        00            .byte	0
04006 0DAA                        15            .byte	$15
04007 0DAB                        1C            .byte	$1C
04008 0DAC                        00            .byte	0
04009 0DAD                        0E            .byte	$E
04010 0DAE                        1C            .byte	$1C
04011 0DAF                        00            .byte	0
04012 0DB0                        07            .byte	7
04013                                           ! 822   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04014 0DB1                        1C            .byte	$1C
04015 0DB2                        00            .byte	0
04016 0DB3                        00            .byte	0
04017 0DB4                        1C            .byte	$1C
04018 0DB5                        07            .byte	7
04019 0DB6                        00            .byte	0
04020 0DB7                        1C            .byte	$1C
04021 0DB8                        0E            .byte	$E
04022 0DB9                        00            .byte	0
04023 0DBA                        1C            .byte	$1C
04024 0DBB                        15            .byte	$15
04025 0DBC                        00            .byte	0
04026 0DBD                        1C            .byte	$1C
04027 0DBE                        1C            .byte	$1C
04028 0DBF                        00            .byte	0
04029 0DC0                        15            .byte	$15
04030 0DC1                        1C            .byte	$1C
04031 0DC2                        00            .byte	0
04032 0DC3                        0E            .byte	$E
04033 0DC4                        1C            .byte	$1C
04034 0DC5                        00            .byte	0
04035 0DC6                        07            .byte	7
04036 0DC7                        1C            .byte	$1C
04037 0DC8                        00            .byte	0
04038                                           ! 823   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04039 0DC9                        00            .byte	0
04040 0DCA                        1C            .byte	$1C
04041 0DCB                        00            .byte	0
04042 0DCC                        00            .byte	0
04043 0DCD                        1C            .byte	$1C
04044 0DCE                        07            .byte	7
04045 0DCF                        00            .byte	0
04046 0DD0                        1C            .byte	$1C
04047 0DD1                        0E            .byte	$E
04048 0DD2                        00            .byte	0
04049 0DD3                        1C            .byte	$1C
04050 0DD4                        15            .byte	$15
04051 0DD5                        00            .byte	0
04052 0DD6                        1C            .byte	$1C
04053 0DD7                        1C            .byte	$1C
04054 0DD8                        00            .byte	0
04055 0DD9                        15            .byte	$15
04056 0DDA                        1C            .byte	$1C
04057 0DDB                        00            .byte	0
04058 0DDC                        0E            .byte	$E
04059 0DDD                        1C            .byte	$1C
04060 0DDE                        00            .byte	0
04061 0DDF                        07            .byte	7
04062 0DE0                        1C            .byte	$1C
04063                                           ! 824   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04064 0DE1                        0E            .byte	$E
04065 0DE2                        0E            .byte	$E
04066 0DE3                        1C            .byte	$1C
04067 0DE4                        11            .byte	$11
04068 0DE5                        0E            .byte	$E
04069 0DE6                        1C            .byte	$1C
04070 0DE7                        15            .byte	$15
04071 0DE8                        0E            .byte	$E
04072 0DE9                        1C            .byte	$1C
04073 0DEA                        18            .byte	$18
04074 0DEB                        0E            .byte	$E
04075 0DEC                        1C            .byte	$1C
04076 0DED                        1C            .byte	$1C
04077 0DEE                        0E            .byte	$E
04078 0DEF                        1C            .byte	$1C
04079 0DF0                        1C            .byte	$1C
04080 0DF1                        0E            .byte	$E
04081 0DF2                        18            .byte	$18
04082 0DF3                        1C            .byte	$1C
04083 0DF4                        0E            .byte	$E
04084 0DF5                        15            .byte	$15
04085 0DF6                        1C            .byte	$1C
04086 0DF7                        0E            .byte	$E
04087 0DF8                        11            .byte	$11
04088                                           ! 825   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04089 0DF9                        1C            .byte	$1C
04090 0DFA                        0E            .byte	$E
04091 0DFB                        0E            .byte	$E
04092 0DFC                        1C            .byte	$1C
04093 0DFD                        11            .byte	$11
04094 0DFE                        0E            .byte	$E
04095 0DFF                        1C            .byte	$1C
04096 0E00                        15            .byte	$15
04097 0E01                        0E            .byte	$E
04098 0E02                        1C            .byte	$1C
04099 0E03                        18            .byte	$18
04100 0E04                        0E            .byte	$E
04101 0E05                        1C            .byte	$1C
04102 0E06                        1C            .byte	$1C
04103 0E07                        0E            .byte	$E
04104 0E08                        18            .byte	$18
04105 0E09                        1C            .byte	$1C
04106 0E0A                        0E            .byte	$E
04107 0E0B                        15            .byte	$15
04108 0E0C                        1C            .byte	$1C
04109 0E0D                        0E            .byte	$E
04110 0E0E                        11            .byte	$11
04111 0E0F                        1C            .byte	$1C
04112 0E10                        0E            .byte	$E
04113                                           ! 826   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04114 0E11                        0E            .byte	$E
04115 0E12                        1C            .byte	$1C
04116 0E13                        0E            .byte	$E
04117 0E14                        0E            .byte	$E
04118 0E15                        1C            .byte	$1C
04119 0E16                        11            .byte	$11
04120 0E17                        0E            .byte	$E
04121 0E18                        1C            .byte	$1C
04122 0E19                        15            .byte	$15
04123 0E1A                        0E            .byte	$E
04124 0E1B                        1C            .byte	$1C
04125 0E1C                        18            .byte	$18
04126 0E1D                        0E            .byte	$E
04127 0E1E                        1C            .byte	$1C
04128 0E1F                        1C            .byte	$1C
04129 0E20                        0E            .byte	$E
04130 0E21                        18            .byte	$18
04131 0E22                        1C            .byte	$1C
04132 0E23                        0E            .byte	$E
04133 0E24                        15            .byte	$15
04134 0E25                        1C            .byte	$1C
04135 0E26                        0E            .byte	$E
04136 0E27                        11            .byte	$11
04137 0E28                        1C            .byte	$1C
04138                                           ! 827   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04139 0E29                        14            .byte	$14
04140 0E2A                        14            .byte	$14
04141 0E2B                        1C            .byte	$1C
04142 0E2C                        16            .byte	$16
04143 0E2D                        14            .byte	$14
04144 0E2E                        1C            .byte	$1C
04145 0E2F                        18            .byte	$18
04146 0E30                        14            .byte	$14
04147 0E31                        1C            .byte	$1C
04148 0E32                        1A            .byte	$1A
04149 0E33                        14            .byte	$14
04150 0E34                        1C            .byte	$1C
04151 0E35                        1C            .byte	$1C
04152 0E36                        14            .byte	$14
04153 0E37                        1C            .byte	$1C
04154 0E38                        1C            .byte	$1C
04155 0E39                        14            .byte	$14
04156 0E3A                        1A            .byte	$1A
04157 0E3B                        1C            .byte	$1C
04158 0E3C                        14            .byte	$14
04159 0E3D                        18            .byte	$18
04160 0E3E                        1C            .byte	$1C
04161 0E3F                        14            .byte	$14
04162 0E40                        16            .byte	$16
04163                                           ! 828   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04164 0E41                        1C            .byte	$1C
04165 0E42                        14            .byte	$14
04166 0E43                        14            .byte	$14
04167 0E44                        1C            .byte	$1C
04168 0E45                        16            .byte	$16
04169 0E46                        14            .byte	$14
04170 0E47                        1C            .byte	$1C
04171 0E48                        18            .byte	$18
04172 0E49                        14            .byte	$14
04173 0E4A                        1C            .byte	$1C
04174 0E4B                        1A            .byte	$1A
04175 0E4C                        14            .byte	$14
04176 0E4D                        1C            .byte	$1C
04177 0E4E                        1C            .byte	$1C
04178 0E4F                        14            .byte	$14
04179 0E50                        1A            .byte	$1A
04180 0E51                        1C            .byte	$1C
04181 0E52                        14            .byte	$14
04182 0E53                        18            .byte	$18
04183 0E54                        1C            .byte	$1C
04184 0E55                        14            .byte	$14
04185 0E56                        16            .byte	$16
04186 0E57                        1C            .byte	$1C
04187 0E58                        14            .byte	$14
04188                                           ! 829   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04189 0E59                        14            .byte	$14
04190 0E5A                        1C            .byte	$1C
04191 0E5B                        14            .byte	$14
04192 0E5C                        14            .byte	$14
04193 0E5D                        1C            .byte	$1C
04194 0E5E                        16            .byte	$16
04195 0E5F                        14            .byte	$14
04196 0E60                        1C            .byte	$1C
04197 0E61                        18            .byte	$18
04198 0E62                        14            .byte	$14
04199 0E63                        1C            .byte	$1C
04200 0E64                        1A            .byte	$1A
04201 0E65                        14            .byte	$14
04202 0E66                        1C            .byte	$1C
04203 0E67                        1C            .byte	$1C
04204 0E68                        14            .byte	$14
04205 0E69                        1A            .byte	$1A
04206 0E6A                        1C            .byte	$1C
04207 0E6B                        14            .byte	$14
04208 0E6C                        18            .byte	$18
04209 0E6D                        1C            .byte	$1C
04210 0E6E                        14            .byte	$14
04211 0E6F                        16            .byte	$16
04212 0E70                        1C            .byte	$1C
04213                                           ! 830   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04214 0E71                        00            .byte	0
04215 0E72                        00            .byte	0
04216 0E73                        10            .byte	$10
04217 0E74                        04            .byte	4
04218 0E75                        00            .byte	0
04219 0E76                        10            .byte	$10
04220 0E77                        08            .byte	8
04221 0E78                        00            .byte	0
04222 0E79                        10            .byte	$10
04223 0E7A                        0C            .byte	$C
04224 0E7B                        00            .byte	0
04225 0E7C                        10            .byte	$10
04226 0E7D                        10            .byte	$10
04227 0E7E                        00            .byte	0
04228 0E7F                        10            .byte	$10
04229 0E80                        10            .byte	$10
04230 0E81                        00            .byte	0
04231 0E82                        0C            .byte	$C
04232 0E83                        10            .byte	$10
04233 0E84                        00            .byte	0
04234 0E85                        08            .byte	8
04235 0E86                        10            .byte	$10
04236 0E87                        00            .byte	0
04237 0E88                        04            .byte	4
04238                                           ! 831   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x
04239 0E89                        10            .byte	$10
04240 0E8A                        00            .byte	0
04241 0E8B                        00            .byte	0
04242 0E8C                        10            .byte	$10
04243 0E8D                        04            .byte	4
04244 0E8E                        00            .byte	0
04245 0E8F                        10            .byte	$10
04246 0E90                        08            .byte	8
04247 0E91                        00            .byte	0
04248 0E92                        10            .byte	$10
04249 0E93                        0C            .byte	$C
04250 0E94                        00            .byte	0
04251 0E95                        10            .byte	$10
04252 0E96                        10            .byte	$10
04253 0E97                        00            .byte	0
04254 0E98                        0C            .byte	$C
04255 0E99                        10            .byte	$10
04256 0E9A                        00            .byte	0
04257 0E9B                        08            .byte	8
04258 0E9C                        10            .byte	$10
04259 0E9D                        00            .byte	0
04260 0E9E                        04            .byte	4
04261                                           ! 831 10,0x00,
04262 0E9F                        10            .byte	$10
04263 0EA0                        00            .byte	0
04264                                           ! 832   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04265 0EA1                        00            .byte	0
04266 0EA2                        10            .byte	$10
04267 0EA3                        00            .byte	0
04268 0EA4                        00            .byte	0
04269 0EA5                        10            .byte	$10
04270 0EA6                        04            .byte	4
04271 0EA7                        00            .byte	0
04272 0EA8                        10            .byte	$10
04273 0EA9                        08            .byte	8
04274 0EAA                        00            .byte	0
04275 0EAB                        10            .byte	$10
04276 0EAC                        0C            .byte	$C
04277 0EAD                        00            .byte	0
04278 0EAE                        10            .byte	$10
04279 0EAF                        10            .byte	$10
04280 0EB0                        00            .byte	0
04281 0EB1                        0C            .byte	$C
04282 0EB2                        10            .byte	$10
04283 0EB3                        00            .byte	0
04284 0EB4                        08            .byte	8
04285 0EB5                        10            .byte	$10
04286 0EB6                        00            .byte	0
04287 0EB7                        04            .byte	4
04288 0EB8                        10            .byte	$10
04289                                           ! 833   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04290 0EB9                        08            .byte	8
04291 0EBA                        08            .byte	8
04292 0EBB                        10            .byte	$10
04293 0EBC                        0A            .byte	$A
04294 0EBD                        08            .byte	8
04295 0EBE                        10            .byte	$10
04296 0EBF                        0C            .byte	$C
04297 0EC0                        08            .byte	8
04298 0EC1                        10            .byte	$10
04299 0EC2                        0E            .byte	$E
04300 0EC3                        08            .byte	8
04301 0EC4                        10            .byte	$10
04302 0EC5                        10            .byte	$10
04303 0EC6                        08            .byte	8
04304 0EC7                        10            .byte	$10
04305 0EC8                        10            .byte	$10
04306 0EC9                        08            .byte	8
04307 0ECA                        0E            .byte	$E
04308 0ECB                        10            .byte	$10
04309 0ECC                        08            .byte	8
04310 0ECD                        0C            .byte	$C
04311 0ECE                        10            .byte	$10
04312 0ECF                        08            .byte	8
04313 0ED0                        0A            .byte	$A
04314                                           ! 834   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04315 0ED1                        10            .byte	$10
04316 0ED2                        08            .byte	8
04317 0ED3                        08            .byte	8
04318 0ED4                        10            .byte	$10
04319 0ED5                        0A            .byte	$A
04320 0ED6                        08            .byte	8
04321 0ED7                        10            .byte	$10
04322 0ED8                        0C            .byte	$C
04323 0ED9                        08            .byte	8
04324 0EDA                        10            .byte	$10
04325 0EDB                        0E            .byte	$E
04326 0EDC                        08            .byte	8
04327 0EDD                        10            .byte	$10
04328 0EDE                        10            .byte	$10
04329 0EDF                        08            .byte	8
04330 0EE0                        0E            .byte	$E
04331 0EE1                        10            .byte	$10
04332 0EE2                        08            .byte	8
04333 0EE3                        0C            .byte	$C
04334 0EE4                        10            .byte	$10
04335 0EE5                        08            .byte	8
04336 0EE6                        0A            .byte	$A
04337 0EE7                        10            .byte	$10
04338 0EE8                        08            .byte	8
04339                                           ! 835   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04340 0EE9                        08            .byte	8
04341 0EEA                        10            .byte	$10
04342 0EEB                        08            .byte	8
04343 0EEC                        08            .byte	8
04344 0EED                        10            .byte	$10
04345 0EEE                        0A            .byte	$A
04346 0EEF                        08            .byte	8
04347 0EF0                        10            .byte	$10
04348 0EF1                        0C            .byte	$C
04349 0EF2                        08            .byte	8
04350 0EF3                        10            .byte	$10
04351 0EF4                        0E            .byte	$E
04352 0EF5                        08            .byte	8
04353 0EF6                        10            .byte	$10
04354 0EF7                        10            .byte	$10
04355 0EF8                        08            .byte	8
04356 0EF9                        0E            .byte	$E
04357 0EFA                        10            .byte	$10
04358 0EFB                        08            .byte	8
04359 0EFC                        0C            .byte	$C
04360 0EFD                        10            .byte	$10
04361 0EFE                        08            .byte	8
04362 0EFF                        0A            .byte	$A
04363 0F00                        10            .byte	$10
04364                                           ! 836   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04365 0F01                        0B            .byte	$B
04366 0F02                        0B            .byte	$B
04367 0F03                        10            .byte	$10
04368 0F04                        0C            .byte	$C
04369 0F05                        0B            .byte	$B
04370 0F06                        10            .byte	$10
04371 0F07                        0D            .byte	$D
04372 0F08                        0B            .byte	$B
04373 0F09                        10            .byte	$10
04374 0F0A                        0F            .byte	$F
04375 0F0B                        0B            .byte	$B
04376 0F0C                        10            .byte	$10
04377 0F0D                        10            .byte	$10
04378 0F0E                        0B            .byte	$B
04379 0F0F                        10            .byte	$10
04380 0F10                        10            .byte	$10
04381 0F11                        0B            .byte	$B
04382 0F12                        0F            .byte	$F
04383 0F13                        10            .byte	$10
04384 0F14                        0B            .byte	$B
04385 0F15                        0D            .byte	$D
04386 0F16                        10            .byte	$10
04387 0F17                        0B            .byte	$B
04388 0F18                        0C            .byte	$C
04389                                           ! 837   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04390 0F19                        10            .byte	$10
04391 0F1A                        0B            .byte	$B
04392 0F1B                        0B            .byte	$B
04393 0F1C                        10            .byte	$10
04394 0F1D                        0C            .byte	$C
04395 0F1E                        0B            .byte	$B
04396 0F1F                        10            .byte	$10
04397 0F20                        0D            .byte	$D
04398 0F21                        0B            .byte	$B
04399 0F22                        10            .byte	$10
04400 0F23                        0F            .byte	$F
04401 0F24                        0B            .byte	$B
04402 0F25                        10            .byte	$10
04403 0F26                        10            .byte	$10
04404 0F27                        0B            .byte	$B
04405 0F28                        0F            .byte	$F
04406 0F29                        10            .byte	$10
04407 0F2A                        0B            .byte	$B
04408 0F2B                        0D            .byte	$D
04409 0F2C                        10            .byte	$10
04410 0F2D                        0B            .byte	$B
04411 0F2E                        0C            .byte	$C
04412 0F2F                        10            .byte	$10
04413 0F30                        0B            .byte	$B
04414                                           ! 838   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04415 0F31                        0B            .byte	$B
04416 0F32                        10            .byte	$10
04417 0F33                        0B            .byte	$B
04418 0F34                        0B            .byte	$B
04419 0F35                        10            .byte	$10
04420 0F36                        0C            .byte	$C
04421 0F37                        0B            .byte	$B
04422 0F38                        10            .byte	$10
04423 0F39                        0D            .byte	$D
04424 0F3A                        0B            .byte	$B
04425 0F3B                        10            .byte	$10
04426 0F3C                        0F            .byte	$F
04427 0F3D                        0B            .byte	$B
04428 0F3E                        10            .byte	$10
04429 0F3F                        10            .byte	$10
04430 0F40                        0B            .byte	$B
04431 0F41                        0F            .byte	$F
04432 0F42                        10            .byte	$10
04433 0F43                        0B            .byte	$B
04434 0F44                        0D            .byte	$D
04435 0F45                        10            .byte	$10
04436 0F46                        0B            .byte	$B
04437 0F47                        0C            .byte	$C
04438 0F48                        10            .byte	$10
04439                                           ! 839   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04440 0F49                        00            .byte	0
04441 0F4A                        00            .byte	0
04442 0F4B                        00            .byte	0
04443 0F4C                        00            .byte	0
04444 0F4D                        00            .byte	0
04445 0F4E                        00            .byte	0
04446 0F4F                        00            .byte	0
04447 0F50                        00            .byte	0
04448 0F51                        00            .byte	0
04449 0F52                        00            .byte	0
04450 0F53                        00            .byte	0
04451 0F54                        00            .byte	0
04452 0F55                        00            .byte	0
04453 0F56                        00            .byte	0
04454 0F57                        00            .byte	0
04455 0F58                        00            .byte	0
04456 0F59                        00            .byte	0
04457 0F5A                        00            .byte	0
04458 0F5B                        00            .byte	0
04459 0F5C                        00            .byte	0
04460 0F5D                        00            .byte	0
04461 0F5E                        00            .byte	0
04462 0F5F                        00            .byte	0
04463                                           ! 840 };
04464 0F60                        00            .byte	0
04465                                           !BCC_EOS
04466                                           ! 841 static Bit8u static_functionality[0x10]=
04467                                           ! 842 {
04468                       00000F61            _static_functionality:
04469                                           ! 843          0xff,
04470 0F61                        FF            .byte	$FF
04471                                           ! 844          0xe0,
04472 0F62                        E0            .byte	$E0
04473                                           ! 845          0x0f,
04474 0F63                        0F            .byte	$F
04475                                           ! 846          0x00, 0x00, 0x00, 0x00,
04476 0F64                        00            .byte	0
04477 0F65                        00            .byte	0
04478 0F66                        00            .byte	0
04479 0F67                        00            .byte	0
04480                                           ! 847          0x07,
04481 0F68                        07            .byte	7
04482                                           ! 848          0x02,
04483 0F69                        02            .byte	2
04484                                           ! 849          0x08,
04485 0F6A                        08            .byte	8
04486                                           ! 850          0xe7,
04487 0F6B                        E7            .byte	$E7
04488                                           ! 851          0x0c,
04489 0F6C                        0C            .byte	$C
04490                                           ! 852          0x00,
04491 0F6D                        00            .byte	0
04492                                           ! 853          0x00,
04493 0F6E                        00            .byte	0
04494                                           ! 854          0x00,
04495 0F6F                        00            .byte	0
04496                                           ! 855          0x00
04497                                           ! 856 };
04498 0F70                        00            .byte	0
04499                                           !BCC_EOS
04500                                           ! 857 static Bit8u vgafont8[256*8]=
04501                                           ! 858 {
04502                       00000F71            _vgafont8:
04503                                           ! 859  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04504 0F71                        00            .byte	0
04505 0F72                        00            .byte	0
04506 0F73                        00            .byte	0
04507 0F74                        00            .byte	0
04508 0F75                        00            .byte	0
04509 0F76                        00            .byte	0
04510 0F77                        00            .byte	0
04511 0F78                        00            .byte	0
04512                                           ! 860  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04513 0F79                        7E            .byte	$7E
04514 0F7A                        81            .byte	$81
04515 0F7B                        A5            .byte	$A5
04516 0F7C                        81            .byte	$81
04517 0F7D                        BD            .byte	$BD
04518 0F7E                        99            .byte	$99
04519 0F7F                        81            .byte	$81
04520 0F80                        7E            .byte	$7E
04521                                           ! 861  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04522 0F81                        7E            .byte	$7E
04523 0F82                        FF            .byte	$FF
04524 0F83                        DB            .byte	$DB
04525 0F84                        FF            .byte	$FF
04526 0F85                        C3            .byte	$C3
04527 0F86                        E7            .byte	$E7
04528 0F87                        FF            .byte	$FF
04529 0F88                        7E            .byte	$7E
04530                                           ! 862  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04531 0F89                        6C            .byte	$6C
04532 0F8A                        FE            .byte	$FE
04533 0F8B                        FE            .byte	$FE
04534 0F8C                        FE            .byte	$FE
04535 0F8D                        7C            .byte	$7C
04536 0F8E                        38            .byte	$38
04537 0F8F                        10            .byte	$10
04538 0F90                        00            .byte	0
04539                                           ! 863  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04540 0F91                        10            .byte	$10
04541 0F92                        38            .byte	$38
04542 0F93                        7C            .byte	$7C
04543 0F94                        FE            .byte	$FE
04544 0F95                        7C            .byte	$7C
04545 0F96                        38            .byte	$38
04546 0F97                        10            .byte	$10
04547 0F98                        00            .byte	0
04548                                           ! 864  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04549 0F99                        38            .byte	$38
04550 0F9A                        7C            .byte	$7C
04551 0F9B                        38            .byte	$38
04552 0F9C                        FE            .byte	$FE
04553 0F9D                        FE            .byte	$FE
04554 0F9E                        7C            .byte	$7C
04555 0F9F                        38            .byte	$38
04556 0FA0                        7C            .byte	$7C
04557                                           ! 865  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04558 0FA1                        10            .byte	$10
04559 0FA2                        10            .byte	$10
04560 0FA3                        38            .byte	$38
04561 0FA4                        7C            .byte	$7C
04562 0FA5                        FE            .byte	$FE
04563 0FA6                        7C            .byte	$7C
04564 0FA7                        38            .byte	$38
04565 0FA8                        7C            .byte	$7C
04566                                           ! 866  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04567 0FA9                        00            .byte	0
04568 0FAA                        00            .byte	0
04569 0FAB                        18            .byte	$18
04570 0FAC                        3C            .byte	$3C
04571 0FAD                        3C            .byte	$3C
04572 0FAE                        18            .byte	$18
04573 0FAF                        00            .byte	0
04574 0FB0                        00            .byte	0
04575                                           ! 867  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04576 0FB1                        FF            .byte	$FF
04577 0FB2                        FF            .byte	$FF
04578 0FB3                        E7            .byte	$E7
04579 0FB4                        C3            .byte	$C3
04580 0FB5                        C3            .byte	$C3
04581 0FB6                        E7            .byte	$E7
04582 0FB7                        FF            .byte	$FF
04583 0FB8                        FF            .byte	$FF
04584                                           ! 868  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04585 0FB9                        00            .byte	0
04586 0FBA                        3C            .byte	$3C
04587 0FBB                        66            .byte	$66
04588 0FBC                        42            .byte	$42
04589 0FBD                        42            .byte	$42
04590 0FBE                        66            .byte	$66
04591 0FBF                        3C            .byte	$3C
04592 0FC0                        00            .byte	0
04593                                           ! 869  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04594 0FC1                        FF            .byte	$FF
04595 0FC2                        C3            .byte	$C3
04596 0FC3                        99            .byte	$99
04597 0FC4                        BD            .byte	$BD
04598 0FC5                        BD            .byte	$BD
04599 0FC6                        99            .byte	$99
04600 0FC7                        C3            .byte	$C3
04601 0FC8                        FF            .byte	$FF
04602                                           ! 870  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04603 0FC9                        0F            .byte	$F
04604 0FCA                        07            .byte	7
04605 0FCB                        0F            .byte	$F
04606 0FCC                        7D            .byte	$7D
04607 0FCD                        CC            .byte	$CC
04608 0FCE                        CC            .byte	$CC
04609 0FCF                        CC            .byte	$CC
04610 0FD0                        78            .byte	$78
04611                                           ! 871  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04612 0FD1                        3C            .byte	$3C
04613 0FD2                        66            .byte	$66
04614 0FD3                        66            .byte	$66
04615 0FD4                        66            .byte	$66
04616 0FD5                        3C            .byte	$3C
04617 0FD6                        18            .byte	$18
04618 0FD7                        7E            .byte	$7E
04619 0FD8                        18            .byte	$18
04620                                           ! 872  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04621 0FD9                        3F            .byte	$3F
04622 0FDA                        33            .byte	$33
04623 0FDB                        3F            .byte	$3F
04624 0FDC                        30            .byte	$30
04625 0FDD                        30            .byte	$30
04626 0FDE                        70            .byte	$70
04627 0FDF                        F0            .byte	$F0
04628 0FE0                        E0            .byte	$E0
04629                                           ! 873  0x7f, 0x63, 0x7f, 0x
04630 0FE1                        7F            .byte	$7F
04631 0FE2                        63            .byte	$63
04632 0FE3                        7F            .byte	$7F
04633                                           ! 873 63, 0x63, 0x67, 0xe6, 0xc0,
04634 0FE4                        63            .byte	$63
04635 0FE5                        63            .byte	$63
04636 0FE6                        67            .byte	$67
04637 0FE7                        E6            .byte	$E6
04638 0FE8                        C0            .byte	$C0
04639                                           ! 874  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04640 0FE9                        99            .byte	$99
04641 0FEA                        5A            .byte	$5A
04642 0FEB                        3C            .byte	$3C
04643 0FEC                        E7            .byte	$E7
04644 0FED                        E7            .byte	$E7
04645 0FEE                        3C            .byte	$3C
04646 0FEF                        5A            .byte	$5A
04647 0FF0                        99            .byte	$99
04648                                           ! 875  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04649 0FF1                        80            .byte	$80
04650 0FF2                        E0            .byte	$E0
04651 0FF3                        F8            .byte	$F8
04652 0FF4                        FE            .byte	$FE
04653 0FF5                        F8            .byte	$F8
04654 0FF6                        E0            .byte	$E0
04655 0FF7                        80            .byte	$80
04656 0FF8                        00            .byte	0
04657                                           ! 876  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04658 0FF9                        02            .byte	2
04659 0FFA                        0E            .byte	$E
04660 0FFB                        3E            .byte	$3E
04661 0FFC                        FE            .byte	$FE
04662 0FFD                        3E            .byte	$3E
04663 0FFE                        0E            .byte	$E
04664 0FFF                        02            .byte	2
04665 1000                        00            .byte	0
04666                                           ! 877  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04667 1001                        18            .byte	$18
04668 1002                        3C            .byte	$3C
04669 1003                        7E            .byte	$7E
04670 1004                        18            .byte	$18
04671 1005                        18            .byte	$18
04672 1006                        7E            .byte	$7E
04673 1007                        3C            .byte	$3C
04674 1008                        18            .byte	$18
04675                                           ! 878  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04676 1009                        66            .byte	$66
04677 100A                        66            .byte	$66
04678 100B                        66            .byte	$66
04679 100C                        66            .byte	$66
04680 100D                        66            .byte	$66
04681 100E                        00            .byte	0
04682 100F                        66            .byte	$66
04683 1010                        00            .byte	0
04684                                           ! 879  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04685 1011                        7F            .byte	$7F
04686 1012                        DB            .byte	$DB
04687 1013                        DB            .byte	$DB
04688 1014                        7B            .byte	$7B
04689 1015                        1B            .byte	$1B
04690 1016                        1B            .byte	$1B
04691 1017                        1B            .byte	$1B
04692 1018                        00            .byte	0
04693                                           ! 880  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04694 1019                        3E            .byte	$3E
04695 101A                        63            .byte	$63
04696 101B                        38            .byte	$38
04697 101C                        6C            .byte	$6C
04698 101D                        6C            .byte	$6C
04699 101E                        38            .byte	$38
04700 101F                        CC            .byte	$CC
04701 1020                        78            .byte	$78
04702                                           ! 881  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04703 1021                        00            .byte	0
04704 1022                        00            .byte	0
04705 1023                        00            .byte	0
04706 1024                        00            .byte	0
04707 1025                        7E            .byte	$7E
04708 1026                        7E            .byte	$7E
04709 1027                        7E            .byte	$7E
04710 1028                        00            .byte	0
04711                                           ! 882  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04712 1029                        18            .byte	$18
04713 102A                        3C            .byte	$3C
04714 102B                        7E            .byte	$7E
04715 102C                        18            .byte	$18
04716 102D                        7E            .byte	$7E
04717 102E                        3C            .byte	$3C
04718 102F                        18            .byte	$18
04719 1030                        FF            .byte	$FF
04720                                           ! 883  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04721 1031                        18            .byte	$18
04722 1032                        3C            .byte	$3C
04723 1033                        7E            .byte	$7E
04724 1034                        18            .byte	$18
04725 1035                        18            .byte	$18
04726 1036                        18            .byte	$18
04727 1037                        18            .byte	$18
04728 1038                        00            .byte	0
04729                                           ! 884  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04730 1039                        18            .byte	$18
04731 103A                        18            .byte	$18
04732 103B                        18            .byte	$18
04733 103C                        18            .byte	$18
04734 103D                        7E            .byte	$7E
04735 103E                        3C            .byte	$3C
04736 103F                        18            .byte	$18
04737 1040                        00            .byte	0
04738                                           ! 885  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04739 1041                        00            .byte	0
04740 1042                        18            .byte	$18
04741 1043                        0C            .byte	$C
04742 1044                        FE            .byte	$FE
04743 1045                        0C            .byte	$C
04744 1046                        18            .byte	$18
04745 1047                        00            .byte	0
04746 1048                        00            .byte	0
04747                                           ! 886  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04748 1049                        00            .byte	0
04749 104A                        30            .byte	$30
04750 104B                        60            .byte	$60
04751 104C                        FE            .byte	$FE
04752 104D                        60            .byte	$60
04753 104E                        30            .byte	$30
04754 104F                        00            .byte	0
04755 1050                        00            .byte	0
04756                                           ! 887  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04757 1051                        00            .byte	0
04758 1052                        00            .byte	0
04759 1053                        C0            .byte	$C0
04760 1054                        C0            .byte	$C0
04761 1055                        C0            .byte	$C0
04762 1056                        FE            .byte	$FE
04763 1057                        00            .byte	0
04764 1058                        00            .byte	0
04765                                           ! 888  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04766 1059                        00            .byte	0
04767 105A                        24            .byte	$24
04768 105B                        66            .byte	$66
04769 105C                        FF            .byte	$FF
04770 105D                        66            .byte	$66
04771 105E                        24            .byte	$24
04772 105F                        00            .byte	0
04773 1060                        00            .byte	0
04774                                           ! 889  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04775 1061                        00            .byte	0
04776 1062                        18            .byte	$18
04777 1063                        3C            .byte	$3C
04778 1064                        7E            .byte	$7E
04779 1065                        FF            .byte	$FF
04780 1066                        FF            .byte	$FF
04781 1067                        00            .byte	0
04782 1068                        00            .byte	0
04783                                           ! 890  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04784 1069                        00            .byte	0
04785 106A                        FF            .byte	$FF
04786 106B                        FF            .byte	$FF
04787 106C                        7E            .byte	$7E
04788 106D                        3C            .byte	$3C
04789 106E                        18            .byte	$18
04790 106F                        00            .byte	0
04791 1070                        00            .byte	0
04792                                           ! 891  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04793 1071                        00            .byte	0
04794 1072                        00            .byte	0
04795 1073                        00            .byte	0
04796 1074                        00            .byte	0
04797 1075                        00            .byte	0
04798 1076                        00            .byte	0
04799 1077                        00            .byte	0
04800 1078                        00            .byte	0
04801                                           ! 892  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04802 1079                        30            .byte	$30
04803 107A                        78            .byte	$78
04804 107B                        78            .byte	$78
04805 107C                        30            .byte	$30
04806 107D                        30            .byte	$30
04807 107E                        00            .byte	0
04808 107F                        30            .byte	$30
04809 1080                        00            .byte	0
04810                                           ! 893  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04811 1081                        6C            .byte	$6C
04812 1082                        6C            .byte	$6C
04813 1083                        6C            .byte	$6C
04814 1084                        00            .byte	0
04815 1085                        00            .byte	0
04816 1086                        00            .byte	0
04817 1087                        00            .byte	0
04818 1088                        00            .byte	0
04819                                           ! 894  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04820 1089                        6C            .byte	$6C
04821 108A                        6C            .byte	$6C
04822 108B                        FE            .byte	$FE
04823 108C                        6C            .byte	$6C
04824 108D                        FE            .byte	$FE
04825 108E                        6C            .byte	$6C
04826 108F                        6C            .byte	$6C
04827 1090                        00            .byte	0
04828                                           ! 895  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04829 1091                        30            .byte	$30
04830 1092                        7C            .byte	$7C
04831 1093                        C0            .byte	$C0
04832 1094                        78            .byte	$78
04833 1095                        0C            .byte	$C
04834 1096                        F8            .byte	$F8
04835 1097                        30            .byte	$30
04836 1098                        00            .byte	0
04837                                           ! 896  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04838 1099                        00            .byte	0
04839 109A                        C6            .byte	$C6
04840 109B                        CC            .byte	$CC
04841 109C                        18            .byte	$18
04842 109D                        30            .byte	$30
04843 109E                        66            .byte	$66
04844 109F                        C6            .byte	$C6
04845 10A0                        00            .byte	0
04846                                           ! 897  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04847 10A1                        38            .byte	$38
04848 10A2                        6C            .byte	$6C
04849 10A3                        38            .byte	$38
04850 10A4                        76            .byte	$76
04851 10A5                        DC            .byte	$DC
04852 10A6                        CC            .byte	$CC
04853 10A7                        76            .byte	$76
04854 10A8                        00            .byte	0
04855                                           ! 898  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04856 10A9                        60            .byte	$60
04857 10AA                        60            .byte	$60
04858 10AB                        C0            .byte	$C0
04859 10AC                        00            .byte	0
04860 10AD                        00            .byte	0
04861 10AE                        00            .byte	0
04862 10AF                        00            .byte	0
04863 10B0                        00            .byte	0
04864                                           ! 899  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04865 10B1                        18            .byte	$18
04866 10B2                        30            .byte	$30
04867 10B3                        60            .byte	$60
04868 10B4                        60            .byte	$60
04869 10B5                        60            .byte	$60
04870 10B6                        30            .byte	$30
04871 10B7                        18            .byte	$18
04872 10B8                        00            .byte	0
04873                                           ! 900  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04874 10B9                        60            .byte	$60
04875 10BA                        30            .byte	$30
04876 10BB                        18            .byte	$18
04877 10BC                        18            .byte	$18
04878 10BD                        18            .byte	$18
04879 10BE                        30            .byte	$30
04880 10BF                        60            .byte	$60
04881 10C0                        00            .byte	0
04882                                           ! 901  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04883 10C1                        00            .byte	0
04884 10C2                        66            .byte	$66
04885 10C3                        3C            .byte	$3C
04886 10C4                        FF            .byte	$FF
04887 10C5                        3C            .byte	$3C
04888 10C6                        66            .byte	$66
04889 10C7                        00            .byte	0
04890 10C8                        00            .byte	0
04891                                           ! 902  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04892 10C9                        00            .byte	0
04893 10CA                        30            .byte	$30
04894 10CB                        30            .byte	$30
04895 10CC                        FC            .byte	$FC
04896 10CD                        30            .byte	$30
04897 10CE                        30            .byte	$30
04898 10CF                        00            .byte	0
04899 10D0                        00            .byte	0
04900                                           ! 903  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04901 10D1                        00            .byte	0
04902 10D2                        00            .byte	0
04903 10D3                        00            .byte	0
04904 10D4                        00            .byte	0
04905 10D5                        00            .byte	0
04906 10D6                        30            .byte	$30
04907 10D7                        30            .byte	$30
04908 10D8                        60            .byte	$60
04909                                           ! 904  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04910 10D9                        00            .byte	0
04911 10DA                        00            .byte	0
04912 10DB                        00            .byte	0
04913 10DC                        FC            .byte	$FC
04914 10DD                        00            .byte	0
04915 10DE                        00            .byte	0
04916 10DF                        00            .byte	0
04917 10E0                        00            .byte	0
04918                                           ! 905  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04919 10E1                        00            .byte	0
04920 10E2                        00            .byte	0
04921 10E3                        00            .byte	0
04922 10E4                        00            .byte	0
04923 10E5                        00            .byte	0
04924 10E6                        30            .byte	$30
04925 10E7                        30            .byte	$30
04926 10E8                        00            .byte	0
04927                                           ! 906  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04928 10E9                        06            .byte	6
04929 10EA                        0C            .byte	$C
04930 10EB                        18            .byte	$18
04931 10EC                        30            .byte	$30
04932 10ED                        60            .byte	$60
04933 10EE                        C0            .byte	$C0
04934 10EF                        80            .byte	$80
04935 10F0                        00            .byte	0
04936                                           ! 907  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04937 10F1                        7C            .byte	$7C
04938 10F2                        C6            .byte	$C6
04939 10F3                        CE            .byte	$CE
04940 10F4                        DE            .byte	$DE
04941 10F5                        F6            .byte	$F6
04942 10F6                        E6            .byte	$E6
04943 10F7                        7C            .byte	$7C
04944 10F8                        00            .byte	0
04945                                           ! 908  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04946 10F9                        30            .byte	$30
04947 10FA                        70            .byte	$70
04948 10FB                        30            .byte	$30
04949 10FC                        30            .byte	$30
04950 10FD                        30            .byte	$30
04951 10FE                        30            .byte	$30
04952 10FF                        FC            .byte	$FC
04953 1100                        00            .byte	0
04954                                           ! 909  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04955 1101                        78            .byte	$78
04956 1102                        CC            .byte	$CC
04957 1103                        0C            .byte	$C
04958 1104                        38            .byte	$38
04959 1105                        60            .byte	$60
04960 1106                        CC            .byte	$CC
04961 1107                        FC            .byte	$FC
04962 1108                        00            .byte	0
04963                                           ! 910  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04964 1109                        78            .byte	$78
04965 110A                        CC            .byte	$CC
04966 110B                        0C            .byte	$C
04967 110C                        38            .byte	$38
04968 110D                        0C            .byte	$C
04969 110E                        CC            .byte	$CC
04970 110F                        78            .byte	$78
04971 1110                        00            .byte	0
04972                                           ! 911  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04973 1111                        1C            .byte	$1C
04974 1112                        3C            .byte	$3C
04975 1113                        6C            .byte	$6C
04976 1114                        CC            .byte	$CC
04977 1115                        FE            .byte	$FE
04978 1116                        0C            .byte	$C
04979 1117                        1E            .byte	$1E
04980 1118                        00            .byte	0
04981                                           ! 912  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04982 1119                        FC            .byte	$FC
04983 111A                        C0            .byte	$C0
04984 111B                        F8            .byte	$F8
04985 111C                        0C            .byte	$C
04986 111D                        0C            .byte	$C
04987 111E                        CC            .byte	$CC
04988 111F                        78            .byte	$78
04989 1120                        00            .byte	0
04990                                           ! 913  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
04991 1121                        38            .byte	$38
04992 1122                        60            .byte	$60
04993 1123                        C0            .byte	$C0
04994 1124                        F8            .byte	$F8
04995 1125                        CC            .byte	$CC
04996 1126                        CC            .byte	$CC
04997 1127                        78            .byte	$78
04998 1128                        00            .byte	0
04999                                           ! 914  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
05000 1129                        FC            .byte	$FC
05001 112A                        CC            .byte	$CC
05002 112B                        0C            .byte	$C
05003 112C                        18            .byte	$18
05004 112D                        30            .byte	$30
05005 112E                        30            .byte	$30
05006 112F                        30            .byte	$30
05007 1130                        00            .byte	0
05008                                           ! 915  0x78, 0xcc
05009 1131                        78            .byte	$78
05010                                           ! 915 , 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05011 1132                        CC            .byte	$CC
05012 1133                        CC            .byte	$CC
05013 1134                        78            .byte	$78
05014 1135                        CC            .byte	$CC
05015 1136                        CC            .byte	$CC
05016 1137                        78            .byte	$78
05017 1138                        00            .byte	0
05018                                           ! 916  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
05019 1139                        78            .byte	$78
05020 113A                        CC            .byte	$CC
05021 113B                        CC            .byte	$CC
05022 113C                        7C            .byte	$7C
05023 113D                        0C            .byte	$C
05024 113E                        18            .byte	$18
05025 113F                        70            .byte	$70
05026 1140                        00            .byte	0
05027                                           ! 917  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05028 1141                        00            .byte	0
05029 1142                        30            .byte	$30
05030 1143                        30            .byte	$30
05031 1144                        00            .byte	0
05032 1145                        00            .byte	0
05033 1146                        30            .byte	$30
05034 1147                        30            .byte	$30
05035 1148                        00            .byte	0
05036                                           ! 918  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05037 1149                        00            .byte	0
05038 114A                        30            .byte	$30
05039 114B                        30            .byte	$30
05040 114C                        00            .byte	0
05041 114D                        00            .byte	0
05042 114E                        30            .byte	$30
05043 114F                        30            .byte	$30
05044 1150                        60            .byte	$60
05045                                           ! 919  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05046 1151                        18            .byte	$18
05047 1152                        30            .byte	$30
05048 1153                        60            .byte	$60
05049 1154                        C0            .byte	$C0
05050 1155                        60            .byte	$60
05051 1156                        30            .byte	$30
05052 1157                        18            .byte	$18
05053 1158                        00            .byte	0
05054                                           ! 920  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05055 1159                        00            .byte	0
05056 115A                        00            .byte	0
05057 115B                        FC            .byte	$FC
05058 115C                        00            .byte	0
05059 115D                        00            .byte	0
05060 115E                        FC            .byte	$FC
05061 115F                        00            .byte	0
05062 1160                        00            .byte	0
05063                                           ! 921  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05064 1161                        60            .byte	$60
05065 1162                        30            .byte	$30
05066 1163                        18            .byte	$18
05067 1164                        0C            .byte	$C
05068 1165                        18            .byte	$18
05069 1166                        30            .byte	$30
05070 1167                        60            .byte	$60
05071 1168                        00            .byte	0
05072                                           ! 922  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05073 1169                        78            .byte	$78
05074 116A                        CC            .byte	$CC
05075 116B                        0C            .byte	$C
05076 116C                        18            .byte	$18
05077 116D                        30            .byte	$30
05078 116E                        00            .byte	0
05079 116F                        30            .byte	$30
05080 1170                        00            .byte	0
05081                                           ! 923  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05082 1171                        7C            .byte	$7C
05083 1172                        C6            .byte	$C6
05084 1173                        DE            .byte	$DE
05085 1174                        DE            .byte	$DE
05086 1175                        DE            .byte	$DE
05087 1176                        C0            .byte	$C0
05088 1177                        78            .byte	$78
05089 1178                        00            .byte	0
05090                                           ! 924  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05091 1179                        30            .byte	$30
05092 117A                        78            .byte	$78
05093 117B                        CC            .byte	$CC
05094 117C                        CC            .byte	$CC
05095 117D                        FC            .byte	$FC
05096 117E                        CC            .byte	$CC
05097 117F                        CC            .byte	$CC
05098 1180                        00            .byte	0
05099                                           ! 925  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05100 1181                        FC            .byte	$FC
05101 1182                        66            .byte	$66
05102 1183                        66            .byte	$66
05103 1184                        7C            .byte	$7C
05104 1185                        66            .byte	$66
05105 1186                        66            .byte	$66
05106 1187                        FC            .byte	$FC
05107 1188                        00            .byte	0
05108                                           ! 926  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05109 1189                        3C            .byte	$3C
05110 118A                        66            .byte	$66
05111 118B                        C0            .byte	$C0
05112 118C                        C0            .byte	$C0
05113 118D                        C0            .byte	$C0
05114 118E                        66            .byte	$66
05115 118F                        3C            .byte	$3C
05116 1190                        00            .byte	0
05117                                           ! 927  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05118 1191                        F8            .byte	$F8
05119 1192                        6C            .byte	$6C
05120 1193                        66            .byte	$66
05121 1194                        66            .byte	$66
05122 1195                        66            .byte	$66
05123 1196                        6C            .byte	$6C
05124 1197                        F8            .byte	$F8
05125 1198                        00            .byte	0
05126                                           ! 928  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05127 1199                        FE            .byte	$FE
05128 119A                        62            .byte	$62
05129 119B                        68            .byte	$68
05130 119C                        78            .byte	$78
05131 119D                        68            .byte	$68
05132 119E                        62            .byte	$62
05133 119F                        FE            .byte	$FE
05134 11A0                        00            .byte	0
05135                                           ! 929  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05136 11A1                        FE            .byte	$FE
05137 11A2                        62            .byte	$62
05138 11A3                        68            .byte	$68
05139 11A4                        78            .byte	$78
05140 11A5                        68            .byte	$68
05141 11A6                        60            .byte	$60
05142 11A7                        F0            .byte	$F0
05143 11A8                        00            .byte	0
05144                                           ! 930  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05145 11A9                        3C            .byte	$3C
05146 11AA                        66            .byte	$66
05147 11AB                        C0            .byte	$C0
05148 11AC                        C0            .byte	$C0
05149 11AD                        CE            .byte	$CE
05150 11AE                        66            .byte	$66
05151 11AF                        3E            .byte	$3E
05152 11B0                        00            .byte	0
05153                                           ! 931  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05154 11B1                        CC            .byte	$CC
05155 11B2                        CC            .byte	$CC
05156 11B3                        CC            .byte	$CC
05157 11B4                        FC            .byte	$FC
05158 11B5                        CC            .byte	$CC
05159 11B6                        CC            .byte	$CC
05160 11B7                        CC            .byte	$CC
05161 11B8                        00            .byte	0
05162                                           ! 932  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05163 11B9                        78            .byte	$78
05164 11BA                        30            .byte	$30
05165 11BB                        30            .byte	$30
05166 11BC                        30            .byte	$30
05167 11BD                        30            .byte	$30
05168 11BE                        30            .byte	$30
05169 11BF                        78            .byte	$78
05170 11C0                        00            .byte	0
05171                                           ! 933  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05172 11C1                        1E            .byte	$1E
05173 11C2                        0C            .byte	$C
05174 11C3                        0C            .byte	$C
05175 11C4                        0C            .byte	$C
05176 11C5                        CC            .byte	$CC
05177 11C6                        CC            .byte	$CC
05178 11C7                        78            .byte	$78
05179 11C8                        00            .byte	0
05180                                           ! 934  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05181 11C9                        E6            .byte	$E6
05182 11CA                        66            .byte	$66
05183 11CB                        6C            .byte	$6C
05184 11CC                        78            .byte	$78
05185 11CD                        6C            .byte	$6C
05186 11CE                        66            .byte	$66
05187 11CF                        E6            .byte	$E6
05188 11D0                        00            .byte	0
05189                                           ! 935  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05190 11D1                        F0            .byte	$F0
05191 11D2                        60            .byte	$60
05192 11D3                        60            .byte	$60
05193 11D4                        60            .byte	$60
05194 11D5                        62            .byte	$62
05195 11D6                        66            .byte	$66
05196 11D7                        FE            .byte	$FE
05197 11D8                        00            .byte	0
05198                                           ! 936  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05199 11D9                        C6            .byte	$C6
05200 11DA                        EE            .byte	$EE
05201 11DB                        FE            .byte	$FE
05202 11DC                        FE            .byte	$FE
05203 11DD                        D6            .byte	$D6
05204 11DE                        C6            .byte	$C6
05205 11DF                        C6            .byte	$C6
05206 11E0                        00            .byte	0
05207                                           ! 937  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05208 11E1                        C6            .byte	$C6
05209 11E2                        E6            .byte	$E6
05210 11E3                        F6            .byte	$F6
05211 11E4                        DE            .byte	$DE
05212 11E5                        CE            .byte	$CE
05213 11E6                        C6            .byte	$C6
05214 11E7                        C6            .byte	$C6
05215 11E8                        00            .byte	0
05216                                           ! 938  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05217 11E9                        38            .byte	$38
05218 11EA                        6C            .byte	$6C
05219 11EB                        C6            .byte	$C6
05220 11EC                        C6            .byte	$C6
05221 11ED                        C6            .byte	$C6
05222 11EE                        6C            .byte	$6C
05223 11EF                        38            .byte	$38
05224 11F0                        00            .byte	0
05225                                           ! 939  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05226 11F1                        FC            .byte	$FC
05227 11F2                        66            .byte	$66
05228 11F3                        66            .byte	$66
05229 11F4                        7C            .byte	$7C
05230 11F5                        60            .byte	$60
05231 11F6                        60            .byte	$60
05232 11F7                        F0            .byte	$F0
05233 11F8                        00            .byte	0
05234                                           ! 940  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05235 11F9                        78            .byte	$78
05236 11FA                        CC            .byte	$CC
05237 11FB                        CC            .byte	$CC
05238 11FC                        CC            .byte	$CC
05239 11FD                        DC            .byte	$DC
05240 11FE                        78            .byte	$78
05241 11FF                        1C            .byte	$1C
05242 1200                        00            .byte	0
05243                                           ! 941  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05244 1201                        FC            .byte	$FC
05245 1202                        66            .byte	$66
05246 1203                        66            .byte	$66
05247 1204                        7C            .byte	$7C
05248 1205                        6C            .byte	$6C
05249 1206                        66            .byte	$66
05250 1207                        E6            .byte	$E6
05251 1208                        00            .byte	0
05252                                           ! 942  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05253 1209                        78            .byte	$78
05254 120A                        CC            .byte	$CC
05255 120B                        E0            .byte	$E0
05256 120C                        70            .byte	$70
05257 120D                        1C            .byte	$1C
05258 120E                        CC            .byte	$CC
05259 120F                        78            .byte	$78
05260 1210                        00            .byte	0
05261                                           ! 943  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05262 1211                        FC            .byte	$FC
05263 1212                        B4            .byte	$B4
05264 1213                        30            .byte	$30
05265 1214                        30            .byte	$30
05266 1215                        30            .byte	$30
05267 1216                        30            .byte	$30
05268 1217                        78            .byte	$78
05269 1218                        00            .byte	0
05270                                           ! 944  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05271 1219                        CC            .byte	$CC
05272 121A                        CC            .byte	$CC
05273 121B                        CC            .byte	$CC
05274 121C                        CC            .byte	$CC
05275 121D                        CC            .byte	$CC
05276 121E                        CC            .byte	$CC
05277 121F                        FC            .byte	$FC
05278 1220                        00            .byte	0
05279                                           ! 945  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05280 1221                        CC            .byte	$CC
05281 1222                        CC            .byte	$CC
05282 1223                        CC            .byte	$CC
05283 1224                        CC            .byte	$CC
05284 1225                        CC            .byte	$CC
05285 1226                        78            .byte	$78
05286 1227                        30            .byte	$30
05287 1228                        00            .byte	0
05288                                           ! 946  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05289 1229                        C6            .byte	$C6
05290 122A                        C6            .byte	$C6
05291 122B                        C6            .byte	$C6
05292 122C                        D6            .byte	$D6
05293 122D                        FE            .byte	$FE
05294 122E                        EE            .byte	$EE
05295 122F                        C6            .byte	$C6
05296 1230                        00            .byte	0
05297                                           ! 947  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05298 1231                        C6            .byte	$C6
05299 1232                        C6            .byte	$C6
05300 1233                        6C            .byte	$6C
05301 1234                        38            .byte	$38
05302 1235                        38            .byte	$38
05303 1236                        6C            .byte	$6C
05304 1237                        C6            .byte	$C6
05305 1238                        00            .byte	0
05306                                           ! 948  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05307 1239                        CC            .byte	$CC
05308 123A                        CC            .byte	$CC
05309 123B                        CC            .byte	$CC
05310 123C                        78            .byte	$78
05311 123D                        30            .byte	$30
05312 123E                        30            .byte	$30
05313 123F                        78            .byte	$78
05314 1240                        00            .byte	0
05315                                           ! 949  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05316 1241                        FE            .byte	$FE
05317 1242                        C6            .byte	$C6
05318 1243                        8C            .byte	$8C
05319 1244                        18            .byte	$18
05320 1245                        32            .byte	$32
05321 1246                        66            .byte	$66
05322 1247                        FE            .byte	$FE
05323 1248                        00            .byte	0
05324                                           ! 950  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05325 1249                        78            .byte	$78
05326 124A                        60            .byte	$60
05327 124B                        60            .byte	$60
05328 124C                        60            .byte	$60
05329 124D                        60            .byte	$60
05330 124E                        60            .byte	$60
05331 124F                        78            .byte	$78
05332 1250                        00            .byte	0
05333                                           ! 951  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05334 1251                        C0            .byte	$C0
05335 1252                        60            .byte	$60
05336 1253                        30            .byte	$30
05337 1254                        18            .byte	$18
05338 1255                        0C            .byte	$C
05339 1256                        06            .byte	6
05340 1257                        02            .byte	2
05341 1258                        00            .byte	0
05342                                           ! 952  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05343 1259                        78            .byte	$78
05344 125A                        18            .byte	$18
05345 125B                        18            .byte	$18
05346 125C                        18            .byte	$18
05347 125D                        18            .byte	$18
05348 125E                        18            .byte	$18
05349 125F                        78            .byte	$78
05350 1260                        00            .byte	0
05351                                           ! 953  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05352 1261                        10            .byte	$10
05353 1262                        38            .byte	$38
05354 1263                        6C            .byte	$6C
05355 1264                        C6            .byte	$C6
05356 1265                        00            .byte	0
05357 1266                        00            .byte	0
05358 1267                        00            .byte	0
05359 1268                        00            .byte	0
05360                                           ! 954  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05361 1269                        00            .byte	0
05362 126A                        00            .byte	0
05363 126B                        00            .byte	0
05364 126C                        00            .byte	0
05365 126D                        00            .byte	0
05366 126E                        00            .byte	0
05367 126F                        00            .byte	0
05368 1270                        FF            .byte	$FF
05369                                           ! 955  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05370 1271                        30            .byte	$30
05371 1272                        30            .byte	$30
05372 1273                        18            .byte	$18
05373 1274                        00            .byte	0
05374 1275                        00            .byte	0
05375 1276                        00            .byte	0
05376 1277                        00            .byte	0
05377 1278                        00            .byte	0
05378                                           ! 956  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05379 1279                        00            .byte	0
05380 127A                        00            .byte	0
05381 127B                        78            .byte	$78
05382 127C                        0C            .byte	$C
05383 127D                        7C            .byte	$7C
05384 127E                        CC            .byte	$CC
05385 127F                        76            .byte	$76
05386 1280                        00            .byte	0
05387                                           ! 957  
05388                                           ! 957 0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05389 1281                        E0            .byte	$E0
05390 1282                        60            .byte	$60
05391 1283                        60            .byte	$60
05392 1284                        7C            .byte	$7C
05393 1285                        66            .byte	$66
05394 1286                        66            .byte	$66
05395 1287                        DC            .byte	$DC
05396 1288                        00            .byte	0
05397                                           ! 958  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05398 1289                        00            .byte	0
05399 128A                        00            .byte	0
05400 128B                        78            .byte	$78
05401 128C                        CC            .byte	$CC
05402 128D                        C0            .byte	$C0
05403 128E                        CC            .byte	$CC
05404 128F                        78            .byte	$78
05405 1290                        00            .byte	0
05406                                           ! 959  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05407 1291                        1C            .byte	$1C
05408 1292                        0C            .byte	$C
05409 1293                        0C            .byte	$C
05410 1294                        7C            .byte	$7C
05411 1295                        CC            .byte	$CC
05412 1296                        CC            .byte	$CC
05413 1297                        76            .byte	$76
05414 1298                        00            .byte	0
05415                                           ! 960  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05416 1299                        00            .byte	0
05417 129A                        00            .byte	0
05418 129B                        78            .byte	$78
05419 129C                        CC            .byte	$CC
05420 129D                        FC            .byte	$FC
05421 129E                        C0            .byte	$C0
05422 129F                        78            .byte	$78
05423 12A0                        00            .byte	0
05424                                           ! 961  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05425 12A1                        38            .byte	$38
05426 12A2                        6C            .byte	$6C
05427 12A3                        60            .byte	$60
05428 12A4                        F0            .byte	$F0
05429 12A5                        60            .byte	$60
05430 12A6                        60            .byte	$60
05431 12A7                        F0            .byte	$F0
05432 12A8                        00            .byte	0
05433                                           ! 962  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05434 12A9                        00            .byte	0
05435 12AA                        00            .byte	0
05436 12AB                        76            .byte	$76
05437 12AC                        CC            .byte	$CC
05438 12AD                        CC            .byte	$CC
05439 12AE                        7C            .byte	$7C
05440 12AF                        0C            .byte	$C
05441 12B0                        F8            .byte	$F8
05442                                           ! 963  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05443 12B1                        E0            .byte	$E0
05444 12B2                        60            .byte	$60
05445 12B3                        6C            .byte	$6C
05446 12B4                        76            .byte	$76
05447 12B5                        66            .byte	$66
05448 12B6                        66            .byte	$66
05449 12B7                        E6            .byte	$E6
05450 12B8                        00            .byte	0
05451                                           ! 964  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05452 12B9                        30            .byte	$30
05453 12BA                        00            .byte	0
05454 12BB                        70            .byte	$70
05455 12BC                        30            .byte	$30
05456 12BD                        30            .byte	$30
05457 12BE                        30            .byte	$30
05458 12BF                        78            .byte	$78
05459 12C0                        00            .byte	0
05460                                           ! 965  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05461 12C1                        0C            .byte	$C
05462 12C2                        00            .byte	0
05463 12C3                        0C            .byte	$C
05464 12C4                        0C            .byte	$C
05465 12C5                        0C            .byte	$C
05466 12C6                        CC            .byte	$CC
05467 12C7                        CC            .byte	$CC
05468 12C8                        78            .byte	$78
05469                                           ! 966  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05470 12C9                        E0            .byte	$E0
05471 12CA                        60            .byte	$60
05472 12CB                        66            .byte	$66
05473 12CC                        6C            .byte	$6C
05474 12CD                        78            .byte	$78
05475 12CE                        6C            .byte	$6C
05476 12CF                        E6            .byte	$E6
05477 12D0                        00            .byte	0
05478                                           ! 967  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05479 12D1                        70            .byte	$70
05480 12D2                        30            .byte	$30
05481 12D3                        30            .byte	$30
05482 12D4                        30            .byte	$30
05483 12D5                        30            .byte	$30
05484 12D6                        30            .byte	$30
05485 12D7                        78            .byte	$78
05486 12D8                        00            .byte	0
05487                                           ! 968  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05488 12D9                        00            .byte	0
05489 12DA                        00            .byte	0
05490 12DB                        CC            .byte	$CC
05491 12DC                        FE            .byte	$FE
05492 12DD                        FE            .byte	$FE
05493 12DE                        D6            .byte	$D6
05494 12DF                        C6            .byte	$C6
05495 12E0                        00            .byte	0
05496                                           ! 969  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05497 12E1                        00            .byte	0
05498 12E2                        00            .byte	0
05499 12E3                        F8            .byte	$F8
05500 12E4                        CC            .byte	$CC
05501 12E5                        CC            .byte	$CC
05502 12E6                        CC            .byte	$CC
05503 12E7                        CC            .byte	$CC
05504 12E8                        00            .byte	0
05505                                           ! 970  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05506 12E9                        00            .byte	0
05507 12EA                        00            .byte	0
05508 12EB                        78            .byte	$78
05509 12EC                        CC            .byte	$CC
05510 12ED                        CC            .byte	$CC
05511 12EE                        CC            .byte	$CC
05512 12EF                        78            .byte	$78
05513 12F0                        00            .byte	0
05514                                           ! 971  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05515 12F1                        00            .byte	0
05516 12F2                        00            .byte	0
05517 12F3                        DC            .byte	$DC
05518 12F4                        66            .byte	$66
05519 12F5                        66            .byte	$66
05520 12F6                        7C            .byte	$7C
05521 12F7                        60            .byte	$60
05522 12F8                        F0            .byte	$F0
05523                                           ! 972  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05524 12F9                        00            .byte	0
05525 12FA                        00            .byte	0
05526 12FB                        76            .byte	$76
05527 12FC                        CC            .byte	$CC
05528 12FD                        CC            .byte	$CC
05529 12FE                        7C            .byte	$7C
05530 12FF                        0C            .byte	$C
05531 1300                        1E            .byte	$1E
05532                                           ! 973  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05533 1301                        00            .byte	0
05534 1302                        00            .byte	0
05535 1303                        DC            .byte	$DC
05536 1304                        76            .byte	$76
05537 1305                        66            .byte	$66
05538 1306                        60            .byte	$60
05539 1307                        F0            .byte	$F0
05540 1308                        00            .byte	0
05541                                           ! 974  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05542 1309                        00            .byte	0
05543 130A                        00            .byte	0
05544 130B                        7C            .byte	$7C
05545 130C                        C0            .byte	$C0
05546 130D                        78            .byte	$78
05547 130E                        0C            .byte	$C
05548 130F                        F8            .byte	$F8
05549 1310                        00            .byte	0
05550                                           ! 975  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05551 1311                        10            .byte	$10
05552 1312                        30            .byte	$30
05553 1313                        7C            .byte	$7C
05554 1314                        30            .byte	$30
05555 1315                        30            .byte	$30
05556 1316                        34            .byte	$34
05557 1317                        18            .byte	$18
05558 1318                        00            .byte	0
05559                                           ! 976  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05560 1319                        00            .byte	0
05561 131A                        00            .byte	0
05562 131B                        CC            .byte	$CC
05563 131C                        CC            .byte	$CC
05564 131D                        CC            .byte	$CC
05565 131E                        CC            .byte	$CC
05566 131F                        76            .byte	$76
05567 1320                        00            .byte	0
05568                                           ! 977  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05569 1321                        00            .byte	0
05570 1322                        00            .byte	0
05571 1323                        CC            .byte	$CC
05572 1324                        CC            .byte	$CC
05573 1325                        CC            .byte	$CC
05574 1326                        78            .byte	$78
05575 1327                        30            .byte	$30
05576 1328                        00            .byte	0
05577                                           ! 978  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05578 1329                        00            .byte	0
05579 132A                        00            .byte	0
05580 132B                        C6            .byte	$C6
05581 132C                        D6            .byte	$D6
05582 132D                        FE            .byte	$FE
05583 132E                        FE            .byte	$FE
05584 132F                        6C            .byte	$6C
05585 1330                        00            .byte	0
05586                                           ! 979  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05587 1331                        00            .byte	0
05588 1332                        00            .byte	0
05589 1333                        C6            .byte	$C6
05590 1334                        6C            .byte	$6C
05591 1335                        38            .byte	$38
05592 1336                        6C            .byte	$6C
05593 1337                        C6            .byte	$C6
05594 1338                        00            .byte	0
05595                                           ! 980  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05596 1339                        00            .byte	0
05597 133A                        00            .byte	0
05598 133B                        CC            .byte	$CC
05599 133C                        CC            .byte	$CC
05600 133D                        CC            .byte	$CC
05601 133E                        7C            .byte	$7C
05602 133F                        0C            .byte	$C
05603 1340                        F8            .byte	$F8
05604                                           ! 981  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05605 1341                        00            .byte	0
05606 1342                        00            .byte	0
05607 1343                        FC            .byte	$FC
05608 1344                        98            .byte	$98
05609 1345                        30            .byte	$30
05610 1346                        64            .byte	$64
05611 1347                        FC            .byte	$FC
05612 1348                        00            .byte	0
05613                                           ! 982  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05614 1349                        1C            .byte	$1C
05615 134A                        30            .byte	$30
05616 134B                        30            .byte	$30
05617 134C                        E0            .byte	$E0
05618 134D                        30            .byte	$30
05619 134E                        30            .byte	$30
05620 134F                        1C            .byte	$1C
05621 1350                        00            .byte	0
05622                                           ! 983  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05623 1351                        18            .byte	$18
05624 1352                        18            .byte	$18
05625 1353                        18            .byte	$18
05626 1354                        00            .byte	0
05627 1355                        18            .byte	$18
05628 1356                        18            .byte	$18
05629 1357                        18            .byte	$18
05630 1358                        00            .byte	0
05631                                           ! 984  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05632 1359                        E0            .byte	$E0
05633 135A                        30            .byte	$30
05634 135B                        30            .byte	$30
05635 135C                        1C            .byte	$1C
05636 135D                        30            .byte	$30
05637 135E                        30            .byte	$30
05638 135F                        E0            .byte	$E0
05639 1360                        00            .byte	0
05640                                           ! 985  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05641 1361                        76            .byte	$76
05642 1362                        DC            .byte	$DC
05643 1363                        00            .byte	0
05644 1364                        00            .byte	0
05645 1365                        00            .byte	0
05646 1366                        00            .byte	0
05647 1367                        00            .byte	0
05648 1368                        00            .byte	0
05649                                           ! 986  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05650 1369                        00            .byte	0
05651 136A                        10            .byte	$10
05652 136B                        38            .byte	$38
05653 136C                        6C            .byte	$6C
05654 136D                        C6            .byte	$C6
05655 136E                        C6            .byte	$C6
05656 136F                        FE            .byte	$FE
05657 1370                        00            .byte	0
05658                                           ! 987  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05659 1371                        78            .byte	$78
05660 1372                        CC            .byte	$CC
05661 1373                        C0            .byte	$C0
05662 1374                        CC            .byte	$CC
05663 1375                        78            .byte	$78
05664 1376                        18            .byte	$18
05665 1377                        0C            .byte	$C
05666 1378                        78            .byte	$78
05667                                           ! 988  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05668 1379                        00            .byte	0
05669 137A                        CC            .byte	$CC
05670 137B                        00            .byte	0
05671 137C                        CC            .byte	$CC
05672 137D                        CC            .byte	$CC
05673 137E                        CC            .byte	$CC
05674 137F                        7E            .byte	$7E
05675 1380                        00            .byte	0
05676                                           ! 989  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05677 1381                        1C            .byte	$1C
05678 1382                        00            .byte	0
05679 1383                        78            .byte	$78
05680 1384                        CC            .byte	$CC
05681 1385                        FC            .byte	$FC
05682 1386                        C0            .byte	$C0
05683 1387                        78            .byte	$78
05684 1388                        00            .byte	0
05685                                           ! 990  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05686 1389                        7E            .byte	$7E
05687 138A                        C3            .byte	$C3
05688 138B                        3C            .byte	$3C
05689 138C                        06            .byte	6
05690 138D                        3E            .byte	$3E
05691 138E                        66            .byte	$66
05692 138F                        3F            .byte	$3F
05693 1390                        00            .byte	0
05694                                           ! 991  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05695 1391                        CC            .byte	$CC
05696 1392                        00            .byte	0
05697 1393                        78            .byte	$78
05698 1394                        0C            .byte	$C
05699 1395                        7C            .byte	$7C
05700 1396                        CC            .byte	$CC
05701 1397                        7E            .byte	$7E
05702 1398                        00            .byte	0
05703                                           ! 992  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05704 1399                        E0            .byte	$E0
05705 139A                        00            .byte	0
05706 139B                        78            .byte	$78
05707 139C                        0C            .byte	$C
05708 139D                        7C            .byte	$7C
05709 139E                        CC            .byte	$CC
05710 139F                        7E            .byte	$7E
05711 13A0                        00            .byte	0
05712                                           ! 993  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05713 13A1                        30            .byte	$30
05714 13A2                        30            .byte	$30
05715 13A3                        78            .byte	$78
05716 13A4                        0C            .byte	$C
05717 13A5                        7C            .byte	$7C
05718 13A6                        CC            .byte	$CC
05719 13A7                        7E            .byte	$7E
05720 13A8                        00            .byte	0
05721                                           ! 994  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05722 13A9                        00            .byte	0
05723 13AA                        00            .byte	0
05724 13AB                        78            .byte	$78
05725 13AC                        C0            .byte	$C0
05726 13AD                        C0            .byte	$C0
05727 13AE                        78            .byte	$78
05728 13AF                        0C            .byte	$C
05729 13B0                        38            .byte	$38
05730                                           ! 995  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05731 13B1                        7E            .byte	$7E
05732 13B2                        C3            .byte	$C3
05733 13B3                        3C            .byte	$3C
05734 13B4                        66            .byte	$66
05735 13B5                        7E            .byte	$7E
05736 13B6                        60            .byte	$60
05737 13B7                        3C            .byte	$3C
05738 13B8                        00            .byte	0
05739                                           ! 996  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05740 13B9                        CC            .byte	$CC
05741 13BA                        00            .byte	0
05742 13BB                        78            .byte	$78
05743 13BC                        CC            .byte	$CC
05744 13BD                        FC            .byte	$FC
05745 13BE                        C0            .byte	$C0
05746 13BF                        78            .byte	$78
05747 13C0                        00            .byte	0
05748                                           ! 997  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05749 13C1                        E0            .byte	$E0
05750 13C2                        00            .byte	0
05751 13C3                        78            .byte	$78
05752 13C4                        CC            .byte	$CC
05753 13C5                        FC            .byte	$FC
05754 13C6                        C0            .byte	$C0
05755 13C7                        78            .byte	$78
05756 13C8                        00            .byte	0
05757                                           ! 998  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x7
05758 13C9                        CC            .byte	$CC
05759 13CA                        00            .byte	0
05760 13CB                        70            .byte	$70
05761 13CC                        30            .byte	$30
05762 13CD                        30            .byte	$30
05763 13CE                        30            .byte	$30
05764                                           ! 998 8, 0x00,
05765 13CF                        78            .byte	$78
05766 13D0                        00            .byte	0
05767                                           ! 999  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05768 13D1                        7C            .byte	$7C
05769 13D2                        C6            .byte	$C6
05770 13D3                        38            .byte	$38
05771 13D4                        18            .byte	$18
05772 13D5                        18            .byte	$18
05773 13D6                        18            .byte	$18
05774 13D7                        3C            .byte	$3C
05775 13D8                        00            .byte	0
05776                                           ! 1000  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05777 13D9                        E0            .byte	$E0
05778 13DA                        00            .byte	0
05779 13DB                        70            .byte	$70
05780 13DC                        30            .byte	$30
05781 13DD                        30            .byte	$30
05782 13DE                        30            .byte	$30
05783 13DF                        78            .byte	$78
05784 13E0                        00            .byte	0
05785                                           ! 1001  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05786 13E1                        C6            .byte	$C6
05787 13E2                        38            .byte	$38
05788 13E3                        6C            .byte	$6C
05789 13E4                        C6            .byte	$C6
05790 13E5                        FE            .byte	$FE
05791 13E6                        C6            .byte	$C6
05792 13E7                        C6            .byte	$C6
05793 13E8                        00            .byte	0
05794                                           ! 1002  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05795 13E9                        30            .byte	$30
05796 13EA                        30            .byte	$30
05797 13EB                        00            .byte	0
05798 13EC                        78            .byte	$78
05799 13ED                        CC            .byte	$CC
05800 13EE                        FC            .byte	$FC
05801 13EF                        CC            .byte	$CC
05802 13F0                        00            .byte	0
05803                                           ! 1003  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05804 13F1                        1C            .byte	$1C
05805 13F2                        00            .byte	0
05806 13F3                        FC            .byte	$FC
05807 13F4                        60            .byte	$60
05808 13F5                        78            .byte	$78
05809 13F6                        60            .byte	$60
05810 13F7                        FC            .byte	$FC
05811 13F8                        00            .byte	0
05812                                           ! 1004  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05813 13F9                        00            .byte	0
05814 13FA                        00            .byte	0
05815 13FB                        7F            .byte	$7F
05816 13FC                        0C            .byte	$C
05817 13FD                        7F            .byte	$7F
05818 13FE                        CC            .byte	$CC
05819 13FF                        7F            .byte	$7F
05820 1400                        00            .byte	0
05821                                           ! 1005  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05822 1401                        3E            .byte	$3E
05823 1402                        6C            .byte	$6C
05824 1403                        CC            .byte	$CC
05825 1404                        FE            .byte	$FE
05826 1405                        CC            .byte	$CC
05827 1406                        CC            .byte	$CC
05828 1407                        CE            .byte	$CE
05829 1408                        00            .byte	0
05830                                           ! 1006  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05831 1409                        78            .byte	$78
05832 140A                        CC            .byte	$CC
05833 140B                        00            .byte	0
05834 140C                        78            .byte	$78
05835 140D                        CC            .byte	$CC
05836 140E                        CC            .byte	$CC
05837 140F                        78            .byte	$78
05838 1410                        00            .byte	0
05839                                           ! 1007  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05840 1411                        00            .byte	0
05841 1412                        CC            .byte	$CC
05842 1413                        00            .byte	0
05843 1414                        78            .byte	$78
05844 1415                        CC            .byte	$CC
05845 1416                        CC            .byte	$CC
05846 1417                        78            .byte	$78
05847 1418                        00            .byte	0
05848                                           ! 1008  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05849 1419                        00            .byte	0
05850 141A                        E0            .byte	$E0
05851 141B                        00            .byte	0
05852 141C                        78            .byte	$78
05853 141D                        CC            .byte	$CC
05854 141E                        CC            .byte	$CC
05855 141F                        78            .byte	$78
05856 1420                        00            .byte	0
05857                                           ! 1009  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05858 1421                        78            .byte	$78
05859 1422                        CC            .byte	$CC
05860 1423                        00            .byte	0
05861 1424                        CC            .byte	$CC
05862 1425                        CC            .byte	$CC
05863 1426                        CC            .byte	$CC
05864 1427                        7E            .byte	$7E
05865 1428                        00            .byte	0
05866                                           ! 1010  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05867 1429                        00            .byte	0
05868 142A                        E0            .byte	$E0
05869 142B                        00            .byte	0
05870 142C                        CC            .byte	$CC
05871 142D                        CC            .byte	$CC
05872 142E                        CC            .byte	$CC
05873 142F                        7E            .byte	$7E
05874 1430                        00            .byte	0
05875                                           ! 1011  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05876 1431                        00            .byte	0
05877 1432                        CC            .byte	$CC
05878 1433                        00            .byte	0
05879 1434                        CC            .byte	$CC
05880 1435                        CC            .byte	$CC
05881 1436                        7C            .byte	$7C
05882 1437                        0C            .byte	$C
05883 1438                        F8            .byte	$F8
05884                                           ! 1012  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05885 1439                        C3            .byte	$C3
05886 143A                        18            .byte	$18
05887 143B                        3C            .byte	$3C
05888 143C                        66            .byte	$66
05889 143D                        66            .byte	$66
05890 143E                        3C            .byte	$3C
05891 143F                        18            .byte	$18
05892 1440                        00            .byte	0
05893                                           ! 1013  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05894 1441                        CC            .byte	$CC
05895 1442                        00            .byte	0
05896 1443                        CC            .byte	$CC
05897 1444                        CC            .byte	$CC
05898 1445                        CC            .byte	$CC
05899 1446                        CC            .byte	$CC
05900 1447                        78            .byte	$78
05901 1448                        00            .byte	0
05902                                           ! 1014  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05903 1449                        18            .byte	$18
05904 144A                        18            .byte	$18
05905 144B                        7E            .byte	$7E
05906 144C                        C0            .byte	$C0
05907 144D                        C0            .byte	$C0
05908 144E                        7E            .byte	$7E
05909 144F                        18            .byte	$18
05910 1450                        18            .byte	$18
05911                                           ! 1015  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05912 1451                        38            .byte	$38
05913 1452                        6C            .byte	$6C
05914 1453                        64            .byte	$64
05915 1454                        F0            .byte	$F0
05916 1455                        60            .byte	$60
05917 1456                        E6            .byte	$E6
05918 1457                        FC            .byte	$FC
05919 1458                        00            .byte	0
05920                                           ! 1016  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05921 1459                        CC            .byte	$CC
05922 145A                        CC            .byte	$CC
05923 145B                        78            .byte	$78
05924 145C                        FC            .byte	$FC
05925 145D                        30            .byte	$30
05926 145E                        FC            .byte	$FC
05927 145F                        30            .byte	$30
05928 1460                        30            .byte	$30
05929                                           ! 1017  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05930 1461                        F8            .byte	$F8
05931 1462                        CC            .byte	$CC
05932 1463                        CC            .byte	$CC
05933 1464                        FA            .byte	$FA
05934 1465                        C6            .byte	$C6
05935 1466                        CF            .byte	$CF
05936 1467                        C6            .byte	$C6
05937 1468                        C7            .byte	$C7
05938                                           ! 1018  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05939 1469                        0E            .byte	$E
05940 146A                        1B            .byte	$1B
05941 146B                        18            .byte	$18
05942 146C                        3C            .byte	$3C
05943 146D                        18            .byte	$18
05944 146E                        18            .byte	$18
05945 146F                        D8            .byte	$D8
05946 1470                        70            .byte	$70
05947                                           ! 1019  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05948 1471                        1C            .byte	$1C
05949 1472                        00            .byte	0
05950 1473                        78            .byte	$78
05951 1474                        0C            .byte	$C
05952 1475                        7C            .byte	$7C
05953 1476                        CC            .byte	$CC
05954 1477                        7E            .byte	$7E
05955 1478                        00            .byte	0
05956                                           ! 1020  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05957 1479                        38            .byte	$38
05958 147A                        00            .byte	0
05959 147B                        70            .byte	$70
05960 147C                        30            .byte	$30
05961 147D                        30            .byte	$30
05962 147E                        30            .byte	$30
05963 147F                        78            .byte	$78
05964 1480                        00            .byte	0
05965                                           ! 1021  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05966 1481                        00            .byte	0
05967 1482                        1C            .byte	$1C
05968 1483                        00            .byte	0
05969 1484                        78            .byte	$78
05970 1485                        CC            .byte	$CC
05971 1486                        CC            .byte	$CC
05972 1487                        78            .byte	$78
05973 1488                        00            .byte	0
05974                                           ! 1022  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05975 1489                        00            .byte	0
05976 148A                        1C            .byte	$1C
05977 148B                        00            .byte	0
05978 148C                        CC            .byte	$CC
05979 148D                        CC            .byte	$CC
05980 148E                        CC            .byte	$CC
05981 148F                        7E            .byte	$7E
05982 1490                        00            .byte	0
05983                                           ! 1023  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05984 1491                        00            .byte	0
05985 1492                        F8            .byte	$F8
05986 1493                        00            .byte	0
05987 1494                        F8            .byte	$F8
05988 1495                        CC            .byte	$CC
05989 1496                        CC            .byte	$CC
05990 1497                        CC            .byte	$CC
05991 1498                        00            .byte	0
05992                                           ! 1024  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05993 1499                        FC            .byte	$FC
05994 149A                        00            .byte	0
05995 149B                        CC            .byte	$CC
05996 149C                        EC            .byte	$EC
05997 149D                        FC            .byte	$FC
05998 149E                        DC            .byte	$DC
05999 149F                        CC            .byte	$CC
06000 14A0                        00            .byte	0
06001                                           ! 1025  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06002 14A1                        3C            .byte	$3C
06003 14A2                        6C            .byte	$6C
06004 14A3                        6C            .byte	$6C
06005 14A4                        3E            .byte	$3E
06006 14A5                        00            .byte	0
06007 14A6                        7E            .byte	$7E
06008 14A7                        00            .byte	0
06009 14A8                        00            .byte	0
06010                                           ! 1026  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06011 14A9                        38            .byte	$38
06012 14AA                        6C            .byte	$6C
06013 14AB                        6C            .byte	$6C
06014 14AC                        38            .byte	$38
06015 14AD                        00            .byte	0
06016 14AE                        7C            .byte	$7C
06017 14AF                        00            .byte	0
06018 14B0                        00            .byte	0
06019                                           ! 1027  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06020 14B1                        30            .byte	$30
06021 14B2                        00            .byte	0
06022 14B3                        30            .byte	$30
06023 14B4                        60            .byte	$60
06024 14B5                        C0            .byte	$C0
06025 14B6                        CC            .byte	$CC
06026 14B7                        78            .byte	$78
06027 14B8                        00            .byte	0
06028                                           ! 1028  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06029 14B9                        00            .byte	0
06030 14BA                        00            .byte	0
06031 14BB                        00            .byte	0
06032 14BC                        FC            .byte	$FC
06033 14BD                        C0            .byte	$C0
06034 14BE                        C0            .byte	$C0
06035 14BF                        00            .byte	0
06036 14C0                        00            .byte	0
06037                                           ! 1029  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06038 14C1                        00            .byte	0
06039 14C2                        00            .byte	0
06040 14C3                        00            .byte	0
06041 14C4                        FC            .byte	$FC
06042 14C5                        0C            .byte	$C
06043 14C6                        0C            .byte	$C
06044 14C7                        00            .byte	0
06045 14C8                        00            .byte	0
06046                                           ! 1030  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06047 14C9                        C3            .byte	$C3
06048 14CA                        C6            .byte	$C6
06049 14CB                        CC            .byte	$CC
06050 14CC                        DE            .byte	$DE
06051 14CD                        33            .byte	$33
06052 14CE                        66            .byte	$66
06053 14CF                        CC            .byte	$CC
06054 14D0                        0F            .byte	$F
06055                                           ! 1031  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06056 14D1                        C3            .byte	$C3
06057 14D2                        C6            .byte	$C6
06058 14D3                        CC            .byte	$CC
06059 14D4                        DB            .byte	$DB
06060 14D5                        37            .byte	$37
06061 14D6                        6F            .byte	$6F
06062 14D7                        CF            .byte	$CF
06063 14D8                        03            .byte	3
06064                                           ! 1032  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06065 14D9                        18            .byte	$18
06066 14DA                        18            .byte	$18
06067 14DB                        00            .byte	0
06068 14DC                        18            .byte	$18
06069 14DD                        18            .byte	$18
06070 14DE                        18            .byte	$18
06071 14DF                        18            .byte	$18
06072 14E0                        00            .byte	0
06073                                           ! 1033  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06074 14E1                        00            .byte	0
06075 14E2                        33            .byte	$33
06076 14E3                        66            .byte	$66
06077 14E4                        CC            .byte	$CC
06078 14E5                        66            .byte	$66
06079 14E6                        33            .byte	$33
06080 14E7                        00            .byte	0
06081 14E8                        00            .byte	0
06082                                           ! 1034  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06083 14E9                        00            .byte	0
06084 14EA                        CC            .byte	$CC
06085 14EB                        66            .byte	$66
06086 14EC                        33            .byte	$33
06087 14ED                        66            .byte	$66
06088 14EE                        CC            .byte	$CC
06089 14EF                        00            .byte	0
06090 14F0                        00            .byte	0
06091                                           ! 1035  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06092 14F1                        22            .byte	$22
06093 14F2                        88            .byte	$88
06094 14F3                        22            .byte	$22
06095 14F4                        88            .byte	$88
06096 14F5                        22            .byte	$22
06097 14F6                        88            .byte	$88
06098 14F7                        22            .byte	$22
06099 14F8                        88            .byte	$88
06100                                           ! 1036  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06101 14F9                        55            .byte	$55
06102 14FA                        AA            .byte	$AA
06103 14FB                        55            .byte	$55
06104 14FC                        AA            .byte	$AA
06105 14FD                        55            .byte	$55
06106 14FE                        AA            .byte	$AA
06107 14FF                        55            .byte	$55
06108 1500                        AA            .byte	$AA
06109                                           ! 1037  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06110 1501                        DB            .byte	$DB
06111 1502                        77            .byte	$77
06112 1503                        DB            .byte	$DB
06113 1504                        EE            .byte	$EE
06114 1505                        DB            .byte	$DB
06115 1506                        77            .byte	$77
06116 1507                        DB            .byte	$DB
06117 1508                        EE            .byte	$EE
06118                                           ! 1038  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06119 1509                        18            .byte	$18
06120 150A                        18            .byte	$18
06121 150B                        18            .byte	$18
06122 150C                        18            .byte	$18
06123 150D                        18            .byte	$18
06124 150E                        18            .byte	$18
06125 150F                        18            .byte	$18
06126 1510                        18            .byte	$18
06127                                           ! 1039  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06128 1511                        18            .byte	$18
06129 1512                        18            .byte	$18
06130 1513                        18            .byte	$18
06131 1514                        18            .byte	$18
06132 1515                        F8            .byte	$F8
06133 1516                        18            .byte	$18
06134 1517                        18            .byte	$18
06135 1518                        18            .byte	$18
06136                                           ! 1040  0x18, 0x18, 0xf8, 0x18, 0xf8,
06137 1519                        18            .byte	$18
06138 151A                        18            .byte	$18
06139 151B                        F8            .byte	$F8
06140 151C                        18            .byte	$18
06141                                           ! 1040  0x18, 0x18, 0x18,
06142 151D                        F8            .byte	$F8
06143 151E                        18            .byte	$18
06144 151F                        18            .byte	$18
06145 1520                        18            .byte	$18
06146                                           ! 1041  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06147 1521                        36            .byte	$36
06148 1522                        36            .byte	$36
06149 1523                        36            .byte	$36
06150 1524                        36            .byte	$36
06151 1525                        F6            .byte	$F6
06152 1526                        36            .byte	$36
06153 1527                        36            .byte	$36
06154 1528                        36            .byte	$36
06155                                           ! 1042  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06156 1529                        00            .byte	0
06157 152A                        00            .byte	0
06158 152B                        00            .byte	0
06159 152C                        00            .byte	0
06160 152D                        FE            .byte	$FE
06161 152E                        36            .byte	$36
06162 152F                        36            .byte	$36
06163 1530                        36            .byte	$36
06164                                           ! 1043  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06165 1531                        00            .byte	0
06166 1532                        00            .byte	0
06167 1533                        F8            .byte	$F8
06168 1534                        18            .byte	$18
06169 1535                        F8            .byte	$F8
06170 1536                        18            .byte	$18
06171 1537                        18            .byte	$18
06172 1538                        18            .byte	$18
06173                                           ! 1044  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06174 1539                        36            .byte	$36
06175 153A                        36            .byte	$36
06176 153B                        F6            .byte	$F6
06177 153C                        06            .byte	6
06178 153D                        F6            .byte	$F6
06179 153E                        36            .byte	$36
06180 153F                        36            .byte	$36
06181 1540                        36            .byte	$36
06182                                           ! 1045  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06183 1541                        36            .byte	$36
06184 1542                        36            .byte	$36
06185 1543                        36            .byte	$36
06186 1544                        36            .byte	$36
06187 1545                        36            .byte	$36
06188 1546                        36            .byte	$36
06189 1547                        36            .byte	$36
06190 1548                        36            .byte	$36
06191                                           ! 1046  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06192 1549                        00            .byte	0
06193 154A                        00            .byte	0
06194 154B                        FE            .byte	$FE
06195 154C                        06            .byte	6
06196 154D                        F6            .byte	$F6
06197 154E                        36            .byte	$36
06198 154F                        36            .byte	$36
06199 1550                        36            .byte	$36
06200                                           ! 1047  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06201 1551                        36            .byte	$36
06202 1552                        36            .byte	$36
06203 1553                        F6            .byte	$F6
06204 1554                        06            .byte	6
06205 1555                        FE            .byte	$FE
06206 1556                        00            .byte	0
06207 1557                        00            .byte	0
06208 1558                        00            .byte	0
06209                                           ! 1048  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06210 1559                        36            .byte	$36
06211 155A                        36            .byte	$36
06212 155B                        36            .byte	$36
06213 155C                        36            .byte	$36
06214 155D                        FE            .byte	$FE
06215 155E                        00            .byte	0
06216 155F                        00            .byte	0
06217 1560                        00            .byte	0
06218                                           ! 1049  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06219 1561                        18            .byte	$18
06220 1562                        18            .byte	$18
06221 1563                        F8            .byte	$F8
06222 1564                        18            .byte	$18
06223 1565                        F8            .byte	$F8
06224 1566                        00            .byte	0
06225 1567                        00            .byte	0
06226 1568                        00            .byte	0
06227                                           ! 1050  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06228 1569                        00            .byte	0
06229 156A                        00            .byte	0
06230 156B                        00            .byte	0
06231 156C                        00            .byte	0
06232 156D                        F8            .byte	$F8
06233 156E                        18            .byte	$18
06234 156F                        18            .byte	$18
06235 1570                        18            .byte	$18
06236                                           ! 1051  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06237 1571                        18            .byte	$18
06238 1572                        18            .byte	$18
06239 1573                        18            .byte	$18
06240 1574                        18            .byte	$18
06241 1575                        1F            .byte	$1F
06242 1576                        00            .byte	0
06243 1577                        00            .byte	0
06244 1578                        00            .byte	0
06245                                           ! 1052  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06246 1579                        18            .byte	$18
06247 157A                        18            .byte	$18
06248 157B                        18            .byte	$18
06249 157C                        18            .byte	$18
06250 157D                        FF            .byte	$FF
06251 157E                        00            .byte	0
06252 157F                        00            .byte	0
06253 1580                        00            .byte	0
06254                                           ! 1053  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06255 1581                        00            .byte	0
06256 1582                        00            .byte	0
06257 1583                        00            .byte	0
06258 1584                        00            .byte	0
06259 1585                        FF            .byte	$FF
06260 1586                        18            .byte	$18
06261 1587                        18            .byte	$18
06262 1588                        18            .byte	$18
06263                                           ! 1054  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06264 1589                        18            .byte	$18
06265 158A                        18            .byte	$18
06266 158B                        18            .byte	$18
06267 158C                        18            .byte	$18
06268 158D                        1F            .byte	$1F
06269 158E                        18            .byte	$18
06270 158F                        18            .byte	$18
06271 1590                        18            .byte	$18
06272                                           ! 1055  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06273 1591                        00            .byte	0
06274 1592                        00            .byte	0
06275 1593                        00            .byte	0
06276 1594                        00            .byte	0
06277 1595                        FF            .byte	$FF
06278 1596                        00            .byte	0
06279 1597                        00            .byte	0
06280 1598                        00            .byte	0
06281                                           ! 1056  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06282 1599                        18            .byte	$18
06283 159A                        18            .byte	$18
06284 159B                        18            .byte	$18
06285 159C                        18            .byte	$18
06286 159D                        FF            .byte	$FF
06287 159E                        18            .byte	$18
06288 159F                        18            .byte	$18
06289 15A0                        18            .byte	$18
06290                                           ! 1057  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06291 15A1                        18            .byte	$18
06292 15A2                        18            .byte	$18
06293 15A3                        1F            .byte	$1F
06294 15A4                        18            .byte	$18
06295 15A5                        1F            .byte	$1F
06296 15A6                        18            .byte	$18
06297 15A7                        18            .byte	$18
06298 15A8                        18            .byte	$18
06299                                           ! 1058  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06300 15A9                        36            .byte	$36
06301 15AA                        36            .byte	$36
06302 15AB                        36            .byte	$36
06303 15AC                        36            .byte	$36
06304 15AD                        37            .byte	$37
06305 15AE                        36            .byte	$36
06306 15AF                        36            .byte	$36
06307 15B0                        36            .byte	$36
06308                                           ! 1059  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06309 15B1                        36            .byte	$36
06310 15B2                        36            .byte	$36
06311 15B3                        37            .byte	$37
06312 15B4                        30            .byte	$30
06313 15B5                        3F            .byte	$3F
06314 15B6                        00            .byte	0
06315 15B7                        00            .byte	0
06316 15B8                        00            .byte	0
06317                                           ! 1060  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06318 15B9                        00            .byte	0
06319 15BA                        00            .byte	0
06320 15BB                        3F            .byte	$3F
06321 15BC                        30            .byte	$30
06322 15BD                        37            .byte	$37
06323 15BE                        36            .byte	$36
06324 15BF                        36            .byte	$36
06325 15C0                        36            .byte	$36
06326                                           ! 1061  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06327 15C1                        36            .byte	$36
06328 15C2                        36            .byte	$36
06329 15C3                        F7            .byte	$F7
06330 15C4                        00            .byte	0
06331 15C5                        FF            .byte	$FF
06332 15C6                        00            .byte	0
06333 15C7                        00            .byte	0
06334 15C8                        00            .byte	0
06335                                           ! 1062  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06336 15C9                        00            .byte	0
06337 15CA                        00            .byte	0
06338 15CB                        FF            .byte	$FF
06339 15CC                        00            .byte	0
06340 15CD                        F7            .byte	$F7
06341 15CE                        36            .byte	$36
06342 15CF                        36            .byte	$36
06343 15D0                        36            .byte	$36
06344                                           ! 1063  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06345 15D1                        36            .byte	$36
06346 15D2                        36            .byte	$36
06347 15D3                        37            .byte	$37
06348 15D4                        30            .byte	$30
06349 15D5                        37            .byte	$37
06350 15D6                        36            .byte	$36
06351 15D7                        36            .byte	$36
06352 15D8                        36            .byte	$36
06353                                           ! 1064  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06354 15D9                        00            .byte	0
06355 15DA                        00            .byte	0
06356 15DB                        FF            .byte	$FF
06357 15DC                        00            .byte	0
06358 15DD                        FF            .byte	$FF
06359 15DE                        00            .byte	0
06360 15DF                        00            .byte	0
06361 15E0                        00            .byte	0
06362                                           ! 1065  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06363 15E1                        36            .byte	$36
06364 15E2                        36            .byte	$36
06365 15E3                        F7            .byte	$F7
06366 15E4                        00            .byte	0
06367 15E5                        F7            .byte	$F7
06368 15E6                        36            .byte	$36
06369 15E7                        36            .byte	$36
06370 15E8                        36            .byte	$36
06371                                           ! 1066  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06372 15E9                        18            .byte	$18
06373 15EA                        18            .byte	$18
06374 15EB                        FF            .byte	$FF
06375 15EC                        00            .byte	0
06376 15ED                        FF            .byte	$FF
06377 15EE                        00            .byte	0
06378 15EF                        00            .byte	0
06379 15F0                        00            .byte	0
06380                                           ! 1067  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06381 15F1                        36            .byte	$36
06382 15F2                        36            .byte	$36
06383 15F3                        36            .byte	$36
06384 15F4                        36            .byte	$36
06385 15F5                        FF            .byte	$FF
06386 15F6                        00            .byte	0
06387 15F7                        00            .byte	0
06388 15F8                        00            .byte	0
06389                                           ! 1068  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06390 15F9                        00            .byte	0
06391 15FA                        00            .byte	0
06392 15FB                        FF            .byte	$FF
06393 15FC                        00            .byte	0
06394 15FD                        FF            .byte	$FF
06395 15FE                        18            .byte	$18
06396 15FF                        18            .byte	$18
06397 1600                        18            .byte	$18
06398                                           ! 1069  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06399 1601                        00            .byte	0
06400 1602                        00            .byte	0
06401 1603                        00            .byte	0
06402 1604                        00            .byte	0
06403 1605                        FF            .byte	$FF
06404 1606                        36            .byte	$36
06405 1607                        36            .byte	$36
06406 1608                        36            .byte	$36
06407                                           ! 1070  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06408 1609                        36            .byte	$36
06409 160A                        36            .byte	$36
06410 160B                        36            .byte	$36
06411 160C                        36            .byte	$36
06412 160D                        3F            .byte	$3F
06413 160E                        00            .byte	0
06414 160F                        00            .byte	0
06415 1610                        00            .byte	0
06416                                           ! 1071  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06417 1611                        18            .byte	$18
06418 1612                        18            .byte	$18
06419 1613                        1F            .byte	$1F
06420 1614                        18            .byte	$18
06421 1615                        1F            .byte	$1F
06422 1616                        00            .byte	0
06423 1617                        00            .byte	0
06424 1618                        00            .byte	0
06425                                           ! 1072  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06426 1619                        00            .byte	0
06427 161A                        00            .byte	0
06428 161B                        1F            .byte	$1F
06429 161C                        18            .byte	$18
06430 161D                        1F            .byte	$1F
06431 161E                        18            .byte	$18
06432 161F                        18            .byte	$18
06433 1620                        18            .byte	$18
06434                                           ! 1073  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06435 1621                        00            .byte	0
06436 1622                        00            .byte	0
06437 1623                        00            .byte	0
06438 1624                        00            .byte	0
06439 1625                        3F            .byte	$3F
06440 1626                        36            .byte	$36
06441 1627                        36            .byte	$36
06442 1628                        36            .byte	$36
06443                                           ! 1074  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06444 1629                        36            .byte	$36
06445 162A                        36            .byte	$36
06446 162B                        36            .byte	$36
06447 162C                        36            .byte	$36
06448 162D                        FF            .byte	$FF
06449 162E                        36            .byte	$36
06450 162F                        36            .byte	$36
06451 1630                        36            .byte	$36
06452                                           ! 1075  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06453 1631                        18            .byte	$18
06454 1632                        18            .byte	$18
06455 1633                        FF            .byte	$FF
06456 1634                        18            .byte	$18
06457 1635                        FF            .byte	$FF
06458 1636                        18            .byte	$18
06459 1637                        18            .byte	$18
06460 1638                        18            .byte	$18
06461                                           ! 1076  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06462 1639                        18            .byte	$18
06463 163A                        18            .byte	$18
06464 163B                        18            .byte	$18
06465 163C                        18            .byte	$18
06466 163D                        F8            .byte	$F8
06467 163E                        00            .byte	0
06468 163F                        00            .byte	0
06469 1640                        00            .byte	0
06470                                           ! 1077  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06471 1641                        00            .byte	0
06472 1642                        00            .byte	0
06473 1643                        00            .byte	0
06474 1644                        00            .byte	0
06475 1645                        1F            .byte	$1F
06476 1646                        18            .byte	$18
06477 1647                        18            .byte	$18
06478 1648                        18            .byte	$18
06479                                           ! 1078  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06480 1649                        FF            .byte	$FF
06481 164A                        FF            .byte	$FF
06482 164B                        FF            .byte	$FF
06483 164C                        FF            .byte	$FF
06484 164D                        FF            .byte	$FF
06485 164E                        FF            .byte	$FF
06486 164F                        FF            .byte	$FF
06487 1650                        FF            .byte	$FF
06488                                           ! 1079  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06489 1651                        00            .byte	0
06490 1652                        00            .byte	0
06491 1653                        00            .byte	0
06492 1654                        00            .byte	0
06493 1655                        FF            .byte	$FF
06494 1656                        FF            .byte	$FF
06495 1657                        FF            .byte	$FF
06496 1658                        FF            .byte	$FF
06497                                           ! 1080  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06498 1659                        F0            .byte	$F0
06499 165A                        F0            .byte	$F0
06500 165B                        F0            .byte	$F0
06501 165C                        F0            .byte	$F0
06502 165D                        F0            .byte	$F0
06503 165E                        F0            .byte	$F0
06504 165F                        F0            .byte	$F0
06505 1660                        F0            .byte	$F0
06506                                           ! 1081  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06507 1661                        0F            .byte	$F
06508 1662                        0F            .byte	$F
06509 1663                        0F            .byte	$F
06510 1664                        0F            .byte	$F
06511 1665                        0F            .byte	$F
06512 1666                        0F            .byte	$F
06513 1667                        0F            .byte	$F
06514 1668                        0F            .byte	$F
06515                                           ! 1082  0xff, 0xff, 0xff, 0
06516 1669                        FF            .byte	$FF
06517 166A                        FF            .byte	$FF
06518 166B                        FF            .byte	$FF
06519                                           ! 1082 xff, 0x00, 0x00, 0x00, 0x00,
06520 166C                        FF            .byte	$FF
06521 166D                        00            .byte	0
06522 166E                        00            .byte	0
06523 166F                        00            .byte	0
06524 1670                        00            .byte	0
06525                                           ! 1083  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06526 1671                        00            .byte	0
06527 1672                        00            .byte	0
06528 1673                        76            .byte	$76
06529 1674                        DC            .byte	$DC
06530 1675                        C8            .byte	$C8
06531 1676                        DC            .byte	$DC
06532 1677                        76            .byte	$76
06533 1678                        00            .byte	0
06534                                           ! 1084  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06535 1679                        00            .byte	0
06536 167A                        78            .byte	$78
06537 167B                        CC            .byte	$CC
06538 167C                        F8            .byte	$F8
06539 167D                        CC            .byte	$CC
06540 167E                        F8            .byte	$F8
06541 167F                        C0            .byte	$C0
06542 1680                        C0            .byte	$C0
06543                                           ! 1085  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06544 1681                        00            .byte	0
06545 1682                        FC            .byte	$FC
06546 1683                        CC            .byte	$CC
06547 1684                        C0            .byte	$C0
06548 1685                        C0            .byte	$C0
06549 1686                        C0            .byte	$C0
06550 1687                        C0            .byte	$C0
06551 1688                        00            .byte	0
06552                                           ! 1086  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06553 1689                        00            .byte	0
06554 168A                        FE            .byte	$FE
06555 168B                        6C            .byte	$6C
06556 168C                        6C            .byte	$6C
06557 168D                        6C            .byte	$6C
06558 168E                        6C            .byte	$6C
06559 168F                        6C            .byte	$6C
06560 1690                        00            .byte	0
06561                                           ! 1087  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06562 1691                        FC            .byte	$FC
06563 1692                        CC            .byte	$CC
06564 1693                        60            .byte	$60
06565 1694                        30            .byte	$30
06566 1695                        60            .byte	$60
06567 1696                        CC            .byte	$CC
06568 1697                        FC            .byte	$FC
06569 1698                        00            .byte	0
06570                                           ! 1088  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06571 1699                        00            .byte	0
06572 169A                        00            .byte	0
06573 169B                        7E            .byte	$7E
06574 169C                        D8            .byte	$D8
06575 169D                        D8            .byte	$D8
06576 169E                        D8            .byte	$D8
06577 169F                        70            .byte	$70
06578 16A0                        00            .byte	0
06579                                           ! 1089  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06580 16A1                        00            .byte	0
06581 16A2                        66            .byte	$66
06582 16A3                        66            .byte	$66
06583 16A4                        66            .byte	$66
06584 16A5                        66            .byte	$66
06585 16A6                        7C            .byte	$7C
06586 16A7                        60            .byte	$60
06587 16A8                        C0            .byte	$C0
06588                                           ! 1090  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06589 16A9                        00            .byte	0
06590 16AA                        76            .byte	$76
06591 16AB                        DC            .byte	$DC
06592 16AC                        18            .byte	$18
06593 16AD                        18            .byte	$18
06594 16AE                        18            .byte	$18
06595 16AF                        18            .byte	$18
06596 16B0                        00            .byte	0
06597                                           ! 1091  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06598 16B1                        FC            .byte	$FC
06599 16B2                        30            .byte	$30
06600 16B3                        78            .byte	$78
06601 16B4                        CC            .byte	$CC
06602 16B5                        CC            .byte	$CC
06603 16B6                        78            .byte	$78
06604 16B7                        30            .byte	$30
06605 16B8                        FC            .byte	$FC
06606                                           ! 1092  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06607 16B9                        38            .byte	$38
06608 16BA                        6C            .byte	$6C
06609 16BB                        C6            .byte	$C6
06610 16BC                        FE            .byte	$FE
06611 16BD                        C6            .byte	$C6
06612 16BE                        6C            .byte	$6C
06613 16BF                        38            .byte	$38
06614 16C0                        00            .byte	0
06615                                           ! 1093  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06616 16C1                        38            .byte	$38
06617 16C2                        6C            .byte	$6C
06618 16C3                        C6            .byte	$C6
06619 16C4                        C6            .byte	$C6
06620 16C5                        6C            .byte	$6C
06621 16C6                        6C            .byte	$6C
06622 16C7                        EE            .byte	$EE
06623 16C8                        00            .byte	0
06624                                           ! 1094  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06625 16C9                        1C            .byte	$1C
06626 16CA                        30            .byte	$30
06627 16CB                        18            .byte	$18
06628 16CC                        7C            .byte	$7C
06629 16CD                        CC            .byte	$CC
06630 16CE                        CC            .byte	$CC
06631 16CF                        78            .byte	$78
06632 16D0                        00            .byte	0
06633                                           ! 1095  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06634 16D1                        00            .byte	0
06635 16D2                        00            .byte	0
06636 16D3                        7E            .byte	$7E
06637 16D4                        DB            .byte	$DB
06638 16D5                        DB            .byte	$DB
06639 16D6                        7E            .byte	$7E
06640 16D7                        00            .byte	0
06641 16D8                        00            .byte	0
06642                                           ! 1096  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06643 16D9                        06            .byte	6
06644 16DA                        0C            .byte	$C
06645 16DB                        7E            .byte	$7E
06646 16DC                        DB            .byte	$DB
06647 16DD                        DB            .byte	$DB
06648 16DE                        7E            .byte	$7E
06649 16DF                        60            .byte	$60
06650 16E0                        C0            .byte	$C0
06651                                           ! 1097  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06652 16E1                        38            .byte	$38
06653 16E2                        60            .byte	$60
06654 16E3                        C0            .byte	$C0
06655 16E4                        F8            .byte	$F8
06656 16E5                        C0            .byte	$C0
06657 16E6                        60            .byte	$60
06658 16E7                        38            .byte	$38
06659 16E8                        00            .byte	0
06660                                           ! 1098  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06661 16E9                        78            .byte	$78
06662 16EA                        CC            .byte	$CC
06663 16EB                        CC            .byte	$CC
06664 16EC                        CC            .byte	$CC
06665 16ED                        CC            .byte	$CC
06666 16EE                        CC            .byte	$CC
06667 16EF                        CC            .byte	$CC
06668 16F0                        00            .byte	0
06669                                           ! 1099  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06670 16F1                        00            .byte	0
06671 16F2                        FC            .byte	$FC
06672 16F3                        00            .byte	0
06673 16F4                        FC            .byte	$FC
06674 16F5                        00            .byte	0
06675 16F6                        FC            .byte	$FC
06676 16F7                        00            .byte	0
06677 16F8                        00            .byte	0
06678                                           ! 1100  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06679 16F9                        30            .byte	$30
06680 16FA                        30            .byte	$30
06681 16FB                        FC            .byte	$FC
06682 16FC                        30            .byte	$30
06683 16FD                        30            .byte	$30
06684 16FE                        00            .byte	0
06685 16FF                        FC            .byte	$FC
06686 1700                        00            .byte	0
06687                                           ! 1101  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06688 1701                        60            .byte	$60
06689 1702                        30            .byte	$30
06690 1703                        18            .byte	$18
06691 1704                        30            .byte	$30
06692 1705                        60            .byte	$60
06693 1706                        00            .byte	0
06694 1707                        FC            .byte	$FC
06695 1708                        00            .byte	0
06696                                           ! 1102  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06697 1709                        18            .byte	$18
06698 170A                        30            .byte	$30
06699 170B                        60            .byte	$60
06700 170C                        30            .byte	$30
06701 170D                        18            .byte	$18
06702 170E                        00            .byte	0
06703 170F                        FC            .byte	$FC
06704 1710                        00            .byte	0
06705                                           ! 1103  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06706 1711                        0E            .byte	$E
06707 1712                        1B            .byte	$1B
06708 1713                        1B            .byte	$1B
06709 1714                        18            .byte	$18
06710 1715                        18            .byte	$18
06711 1716                        18            .byte	$18
06712 1717                        18            .byte	$18
06713 1718                        18            .byte	$18
06714                                           ! 1104  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06715 1719                        18            .byte	$18
06716 171A                        18            .byte	$18
06717 171B                        18            .byte	$18
06718 171C                        18            .byte	$18
06719 171D                        18            .byte	$18
06720 171E                        D8            .byte	$D8
06721 171F                        D8            .byte	$D8
06722 1720                        70            .byte	$70
06723                                           ! 1105  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06724 1721                        30            .byte	$30
06725 1722                        30            .byte	$30
06726 1723                        00            .byte	0
06727 1724                        FC            .byte	$FC
06728 1725                        00            .byte	0
06729 1726                        30            .byte	$30
06730 1727                        30            .byte	$30
06731 1728                        00            .byte	0
06732                                           ! 1106  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06733 1729                        00            .byte	0
06734 172A                        76            .byte	$76
06735 172B                        DC            .byte	$DC
06736 172C                        00            .byte	0
06737 172D                        76            .byte	$76
06738 172E                        DC            .byte	$DC
06739 172F                        00            .byte	0
06740 1730                        00            .byte	0
06741                                           ! 1107  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06742 1731                        38            .byte	$38
06743 1732                        6C            .byte	$6C
06744 1733                        6C            .byte	$6C
06745 1734                        38            .byte	$38
06746 1735                        00            .byte	0
06747 1736                        00            .byte	0
06748 1737                        00            .byte	0
06749 1738                        00            .byte	0
06750                                           ! 1108  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06751 1739                        00            .byte	0
06752 173A                        00            .byte	0
06753 173B                        00            .byte	0
06754 173C                        18            .byte	$18
06755 173D                        18            .byte	$18
06756 173E                        00            .byte	0
06757 173F                        00            .byte	0
06758 1740                        00            .byte	0
06759                                           ! 1109  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06760 1741                        00            .byte	0
06761 1742                        00            .byte	0
06762 1743                        00            .byte	0
06763 1744                        00            .byte	0
06764 1745                        18            .byte	$18
06765 1746                        00            .byte	0
06766 1747                        00            .byte	0
06767 1748                        00            .byte	0
06768                                           ! 1110  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06769 1749                        0F            .byte	$F
06770 174A                        0C            .byte	$C
06771 174B                        0C            .byte	$C
06772 174C                        0C            .byte	$C
06773 174D                        EC            .byte	$EC
06774 174E                        6C            .byte	$6C
06775 174F                        3C            .byte	$3C
06776 1750                        1C            .byte	$1C
06777                                           ! 1111  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06778 1751                        78            .byte	$78
06779 1752                        6C            .byte	$6C
06780 1753                        6C            .byte	$6C
06781 1754                        6C            .byte	$6C
06782 1755                        6C            .byte	$6C
06783 1756                        00            .byte	0
06784 1757                        00            .byte	0
06785 1758                        00            .byte	0
06786                                           ! 1112  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06787 1759                        70            .byte	$70
06788 175A                        18            .byte	$18
06789 175B                        30            .byte	$30
06790 175C                        60            .byte	$60
06791 175D                        78            .byte	$78
06792 175E                        00            .byte	0
06793 175F                        00            .byte	0
06794 1760                        00            .byte	0
06795                                           ! 1113  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06796 1761                        00            .byte	0
06797 1762                        00            .byte	0
06798 1763                        3C            .byte	$3C
06799 1764                        3C            .byte	$3C
06800 1765                        3C            .byte	$3C
06801 1766                        3C            .byte	$3C
06802 1767                        00            .byte	0
06803 1768                        00            .byte	0
06804                                           ! 1114  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06805 1769                        00            .byte	0
06806 176A                        00            .byte	0
06807 176B                        00            .byte	0
06808 176C                        00            .byte	0
06809 176D                        00            .byte	0
06810 176E                        00            .byte	0
06811 176F                        00            .byte	0
06812                                           ! 1115 };
06813 1770                        00            .byte	0
06814                                           !BCC_EOS
06815                                           ! 1116 static Bit8u vgafont14[256*14]=
06816                                           ! 1117 {
06817                       00001771            _vgafont14:
06818                                           ! 1118  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06819 1771                        00            .byte	0
06820 1772                        00            .byte	0
06821 1773                        00            .byte	0
06822 1774                        00            .byte	0
06823 1775                        00            .byte	0
06824 1776                        00            .byte	0
06825 1777                        00            .byte	0
06826 1778                        00            .byte	0
06827 1779                        00            .byte	0
06828 177A                        00            .byte	0
06829 177B                        00            .byte	0
06830 177C                        00            .byte	0
06831 177D                        00            .byte	0
06832 177E                        00            .byte	0
06833                                           ! 1119  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06834 177F                        00            .byte	0
06835 1780                        00            .byte	0
06836 1781                        7E            .byte	$7E
06837 1782                        81            .byte	$81
06838 1783                        A5            .byte	$A5
06839 1784                        81            .byte	$81
06840 1785                        81            .byte	$81
06841 1786                        BD            .byte	$BD
06842 1787                        99            .byte	$99
06843 1788                        81            .byte	$81
06844 1789                        7E            .byte	$7E
06845 178A                        00            .byte	0
06846 178B                        00            .byte	0
06847 178C                        00            .byte	0
06848                                           ! 1120  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06849 178D                        00            .byte	0
06850 178E                        00            .byte	0
06851 178F                        7E            .byte	$7E
06852 1790                        FF            .byte	$FF
06853 1791                        DB            .byte	$DB
06854 1792                        FF            .byte	$FF
06855 1793                        FF            .byte	$FF
06856 1794                        C3            .byte	$C3
06857 1795                        E7            .byte	$E7
06858 1796                        FF            .byte	$FF
06859 1797                        7E            .byte	$7E
06860 1798                        00            .byte	0
06861 1799                        00            .byte	0
06862 179A                        00            .byte	0
06863                                           ! 1121  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06864 179B                        00            .byte	0
06865 179C                        00            .byte	0
06866 179D                        00            .byte	0
06867 179E                        6C            .byte	$6C
06868 179F                        FE            .byte	$FE
06869 17A0                        FE            .byte	$FE
06870 17A1                        FE            .byte	$FE
06871 17A2                        FE            .byte	$FE
06872 17A3                        7C            .byte	$7C
06873 17A4                        38            .byte	$38
06874 17A5                        10            .byte	$10
06875 17A6                        00            .byte	0
06876 17A7                        00            .byte	0
06877 17A8                        00            .byte	0
06878                                           ! 1122  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x
06879 17A9                        00            .byte	0
06880 17AA                        00            .byte	0
06881 17AB                        00            .byte	0
06882 17AC                        10            .byte	$10
06883 17AD                        38            .byte	$38
06884 17AE                        7C            .byte	$7C
06885 17AF                        FE            .byte	$FE
06886 17B0                        7C            .byte	$7C
06887 17B1                        38            .byte	$38
06888 17B2                        10            .byte	$10
06889 17B3                        00            .byte	0
06890 17B4                        00            .byte	0
06891                                           ! 1122 00, 0x00,
06892 17B5                        00            .byte	0
06893 17B6                        00            .byte	0
06894                                           ! 1123  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06895 17B7                        00            .byte	0
06896 17B8                        00            .byte	0
06897 17B9                        18            .byte	$18
06898 17BA                        3C            .byte	$3C
06899 17BB                        3C            .byte	$3C
06900 17BC                        E7            .byte	$E7
06901 17BD                        E7            .byte	$E7
06902 17BE                        E7            .byte	$E7
06903 17BF                        18            .byte	$18
06904 17C0                        18            .byte	$18
06905 17C1                        3C            .byte	$3C
06906 17C2                        00            .byte	0
06907 17C3                        00            .byte	0
06908 17C4                        00            .byte	0
06909                                           ! 1124  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06910 17C5                        00            .byte	0
06911 17C6                        00            .byte	0
06912 17C7                        18            .byte	$18
06913 17C8                        3C            .byte	$3C
06914 17C9                        7E            .byte	$7E
06915 17CA                        FF            .byte	$FF
06916 17CB                        FF            .byte	$FF
06917 17CC                        7E            .byte	$7E
06918 17CD                        18            .byte	$18
06919 17CE                        18            .byte	$18
06920 17CF                        3C            .byte	$3C
06921 17D0                        00            .byte	0
06922 17D1                        00            .byte	0
06923 17D2                        00            .byte	0
06924                                           ! 1125  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06925 17D3                        00            .byte	0
06926 17D4                        00            .byte	0
06927 17D5                        00            .byte	0
06928 17D6                        00            .byte	0
06929 17D7                        00            .byte	0
06930 17D8                        18            .byte	$18
06931 17D9                        3C            .byte	$3C
06932 17DA                        3C            .byte	$3C
06933 17DB                        18            .byte	$18
06934 17DC                        00            .byte	0
06935 17DD                        00            .byte	0
06936 17DE                        00            .byte	0
06937 17DF                        00            .byte	0
06938 17E0                        00            .byte	0
06939                                           ! 1126  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06940 17E1                        FF            .byte	$FF
06941 17E2                        FF            .byte	$FF
06942 17E3                        FF            .byte	$FF
06943 17E4                        FF            .byte	$FF
06944 17E5                        FF            .byte	$FF
06945 17E6                        E7            .byte	$E7
06946 17E7                        C3            .byte	$C3
06947 17E8                        C3            .byte	$C3
06948 17E9                        E7            .byte	$E7
06949 17EA                        FF            .byte	$FF
06950 17EB                        FF            .byte	$FF
06951 17EC                        FF            .byte	$FF
06952 17ED                        FF            .byte	$FF
06953 17EE                        FF            .byte	$FF
06954                                           ! 1127  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06955 17EF                        00            .byte	0
06956 17F0                        00            .byte	0
06957 17F1                        00            .byte	0
06958 17F2                        00            .byte	0
06959 17F3                        3C            .byte	$3C
06960 17F4                        66            .byte	$66
06961 17F5                        42            .byte	$42
06962 17F6                        42            .byte	$42
06963 17F7                        66            .byte	$66
06964 17F8                        3C            .byte	$3C
06965 17F9                        00            .byte	0
06966 17FA                        00            .byte	0
06967 17FB                        00            .byte	0
06968 17FC                        00            .byte	0
06969                                           ! 1128  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06970 17FD                        FF            .byte	$FF
06971 17FE                        FF            .byte	$FF
06972 17FF                        FF            .byte	$FF
06973 1800                        FF            .byte	$FF
06974 1801                        C3            .byte	$C3
06975 1802                        99            .byte	$99
06976 1803                        BD            .byte	$BD
06977 1804                        BD            .byte	$BD
06978 1805                        99            .byte	$99
06979 1806                        C3            .byte	$C3
06980 1807                        FF            .byte	$FF
06981 1808                        FF            .byte	$FF
06982 1809                        FF            .byte	$FF
06983 180A                        FF            .byte	$FF
06984                                           ! 1129  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06985 180B                        00            .byte	0
06986 180C                        00            .byte	0
06987 180D                        1E            .byte	$1E
06988 180E                        0E            .byte	$E
06989 180F                        1A            .byte	$1A
06990 1810                        32            .byte	$32
06991 1811                        78            .byte	$78
06992 1812                        CC            .byte	$CC
06993 1813                        CC            .byte	$CC
06994 1814                        CC            .byte	$CC
06995 1815                        78            .byte	$78
06996 1816                        00            .byte	0
06997 1817                        00            .byte	0
06998 1818                        00            .byte	0
06999                                           ! 1130  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07000 1819                        00            .byte	0
07001 181A                        00            .byte	0
07002 181B                        3C            .byte	$3C
07003 181C                        66            .byte	$66
07004 181D                        66            .byte	$66
07005 181E                        66            .byte	$66
07006 181F                        3C            .byte	$3C
07007 1820                        18            .byte	$18
07008 1821                        7E            .byte	$7E
07009 1822                        18            .byte	$18
07010 1823                        18            .byte	$18
07011 1824                        00            .byte	0
07012 1825                        00            .byte	0
07013 1826                        00            .byte	0
07014                                           ! 1131  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07015 1827                        00            .byte	0
07016 1828                        00            .byte	0
07017 1829                        3F            .byte	$3F
07018 182A                        33            .byte	$33
07019 182B                        3F            .byte	$3F
07020 182C                        30            .byte	$30
07021 182D                        30            .byte	$30
07022 182E                        30            .byte	$30
07023 182F                        70            .byte	$70
07024 1830                        F0            .byte	$F0
07025 1831                        E0            .byte	$E0
07026 1832                        00            .byte	0
07027 1833                        00            .byte	0
07028 1834                        00            .byte	0
07029                                           ! 1132  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07030 1835                        00            .byte	0
07031 1836                        00            .byte	0
07032 1837                        7F            .byte	$7F
07033 1838                        63            .byte	$63
07034 1839                        7F            .byte	$7F
07035 183A                        63            .byte	$63
07036 183B                        63            .byte	$63
07037 183C                        63            .byte	$63
07038 183D                        67            .byte	$67
07039 183E                        E7            .byte	$E7
07040 183F                        E6            .byte	$E6
07041 1840                        C0            .byte	$C0
07042 1841                        00            .byte	0
07043 1842                        00            .byte	0
07044                                           ! 1133  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07045 1843                        00            .byte	0
07046 1844                        00            .byte	0
07047 1845                        18            .byte	$18
07048 1846                        18            .byte	$18
07049 1847                        DB            .byte	$DB
07050 1848                        3C            .byte	$3C
07051 1849                        E7            .byte	$E7
07052 184A                        3C            .byte	$3C
07053 184B                        DB            .byte	$DB
07054 184C                        18            .byte	$18
07055 184D                        18            .byte	$18
07056 184E                        00            .byte	0
07057 184F                        00            .byte	0
07058 1850                        00            .byte	0
07059                                           ! 1134  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07060 1851                        00            .byte	0
07061 1852                        00            .byte	0
07062 1853                        80            .byte	$80
07063 1854                        C0            .byte	$C0
07064 1855                        E0            .byte	$E0
07065 1856                        F8            .byte	$F8
07066 1857                        FE            .byte	$FE
07067 1858                        F8            .byte	$F8
07068 1859                        E0            .byte	$E0
07069 185A                        C0            .byte	$C0
07070 185B                        80            .byte	$80
07071 185C                        00            .byte	0
07072 185D                        00            .byte	0
07073 185E                        00            .byte	0
07074                                           ! 1135  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07075 185F                        00            .byte	0
07076 1860                        00            .byte	0
07077 1861                        02            .byte	2
07078 1862                        06            .byte	6
07079 1863                        0E            .byte	$E
07080 1864                        3E            .byte	$3E
07081 1865                        FE            .byte	$FE
07082 1866                        3E            .byte	$3E
07083 1867                        0E            .byte	$E
07084 1868                        06            .byte	6
07085 1869                        02            .byte	2
07086 186A                        00            .byte	0
07087 186B                        00            .byte	0
07088 186C                        00            .byte	0
07089                                           ! 1136  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07090 186D                        00            .byte	0
07091 186E                        00            .byte	0
07092 186F                        18            .byte	$18
07093 1870                        3C            .byte	$3C
07094 1871                        7E            .byte	$7E
07095 1872                        18            .byte	$18
07096 1873                        18            .byte	$18
07097 1874                        18            .byte	$18
07098 1875                        7E            .byte	$7E
07099 1876                        3C            .byte	$3C
07100 1877                        18            .byte	$18
07101 1878                        00            .byte	0
07102 1879                        00            .byte	0
07103 187A                        00            .byte	0
07104                                           ! 1137  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07105 187B                        00            .byte	0
07106 187C                        00            .byte	0
07107 187D                        66            .byte	$66
07108 187E                        66            .byte	$66
07109 187F                        66            .byte	$66
07110 1880                        66            .byte	$66
07111 1881                        66            .byte	$66
07112 1882                        66            .byte	$66
07113 1883                        00            .byte	0
07114 1884                        66            .byte	$66
07115 1885                        66            .byte	$66
07116 1886                        00            .byte	0
07117 1887                        00            .byte	0
07118 1888                        00            .byte	0
07119                                           ! 1138  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07120 1889                        00            .byte	0
07121 188A                        00            .byte	0
07122 188B                        7F            .byte	$7F
07123 188C                        DB            .byte	$DB
07124 188D                        DB            .byte	$DB
07125 188E                        DB            .byte	$DB
07126 188F                        7B            .byte	$7B
07127 1890                        1B            .byte	$1B
07128 1891                        1B            .byte	$1B
07129 1892                        1B            .byte	$1B
07130 1893                        1B            .byte	$1B
07131 1894                        00            .byte	0
07132 1895                        00            .byte	0
07133 1896                        00            .byte	0
07134                                           ! 1139  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07135 1897                        00            .byte	0
07136 1898                        7C            .byte	$7C
07137 1899                        C6            .byte	$C6
07138 189A                        60            .byte	$60
07139 189B                        38            .byte	$38
07140 189C                        6C            .byte	$6C
07141 189D                        C6            .byte	$C6
07142 189E                        C6            .byte	$C6
07143 189F                        6C            .byte	$6C
07144 18A0                        38            .byte	$38
07145 18A1                        0C            .byte	$C
07146 18A2                        C6            .byte	$C6
07147 18A3                        7C            .byte	$7C
07148 18A4                        00            .byte	0
07149                                           ! 1140  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07150 18A5                        00            .byte	0
07151 18A6                        00            .byte	0
07152 18A7                        00            .byte	0
07153 18A8                        00            .byte	0
07154 18A9                        00            .byte	0
07155 18AA                        00            .byte	0
07156 18AB                        00            .byte	0
07157 18AC                        00            .byte	0
07158 18AD                        FE            .byte	$FE
07159 18AE                        FE            .byte	$FE
07160 18AF                        FE            .byte	$FE
07161 18B0                        00            .byte	0
07162 18B1                        00            .byte	0
07163 18B2                        00            .byte	0
07164                                           ! 1141  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07165 18B3                        00            .byte	0
07166 18B4                        00            .byte	0
07167 18B5                        18            .byte	$18
07168 18B6                        3C            .byte	$3C
07169 18B7                        7E            .byte	$7E
07170 18B8                        18            .byte	$18
07171 18B9                        18            .byte	$18
07172 18BA                        18            .byte	$18
07173 18BB                        7E            .byte	$7E
07174 18BC                        3C            .byte	$3C
07175 18BD                        18            .byte	$18
07176 18BE                        7E            .byte	$7E
07177 18BF                        00            .byte	0
07178 18C0                        00            .byte	0
07179                                           ! 1142  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07180 18C1                        00            .byte	0
07181 18C2                        00            .byte	0
07182 18C3                        18            .byte	$18
07183 18C4                        3C            .byte	$3C
07184 18C5                        7E            .byte	$7E
07185 18C6                        18            .byte	$18
07186 18C7                        18            .byte	$18
07187 18C8                        18            .byte	$18
07188 18C9                        18            .byte	$18
07189 18CA                        18            .byte	$18
07190 18CB                        18            .byte	$18
07191 18CC                        00            .byte	0
07192 18CD                        00            .byte	0
07193 18CE                        00            .byte	0
07194                                           ! 1143  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07195 18CF                        00            .byte	0
07196 18D0                        00            .byte	0
07197 18D1                        18            .byte	$18
07198 18D2                        18            .byte	$18
07199 18D3                        18            .byte	$18
07200 18D4                        18            .byte	$18
07201 18D5                        18            .byte	$18
07202 18D6                        18            .byte	$18
07203 18D7                        7E            .byte	$7E
07204 18D8                        3C            .byte	$3C
07205 18D9                        18            .byte	$18
07206 18DA                        00            .byte	0
07207 18DB                        00            .byte	0
07208 18DC                        00            .byte	0
07209                                           ! 1144  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07210 18DD                        00            .byte	0
07211 18DE                        00            .byte	0
07212 18DF                        00            .byte	0
07213 18E0                        00            .byte	0
07214 18E1                        18            .byte	$18
07215 18E2                        0C            .byte	$C
07216 18E3                        FE            .byte	$FE
07217 18E4                        0C            .byte	$C
07218 18E5                        18            .byte	$18
07219 18E6                        00            .byte	0
07220 18E7                        00            .byte	0
07221 18E8                        00            .byte	0
07222 18E9                        00            .byte	0
07223 18EA                        00            .byte	0
07224                                           ! 1145  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07225 18EB                        00            .byte	0
07226 18EC                        00            .byte	0
07227 18ED                        00            .byte	0
07228 18EE                        00            .byte	0
07229 18EF                        30            .byte	$30
07230 18F0                        60            .byte	$60
07231 18F1                        FE            .byte	$FE
07232 18F2                        60            .byte	$60
07233 18F3                        30            .byte	$30
07234 18F4                        00            .byte	0
07235 18F5                        00            .byte	0
07236 18F6                        00            .byte	0
07237 18F7                        00            .byte	0
07238 18F8                        00            .byte	0
07239                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00
07240 18F9                        00            .byte	0
07241 18FA                        00            .byte	0
07242 18FB                        00            .byte	0
07243 18FC                        00            .byte	0
07244 18FD                        00            .byte	0
07245 18FE                        C0            .byte	$C0
07246 18FF                        C0            .byte	$C0
07247 1900                        C0            .byte	$C0
07248 1901                        FE            .byte	$FE
07249 1902                        00            .byte	0
07250 1903                        00            .byte	0
07251 1904                        00            .byte	0
07252 1905                        00            .byte	0
07253                                           ! 1146 ,
07254 1906                        00            .byte	0
07255                                           ! 1147  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07256 1907                        00            .byte	0
07257 1908                        00            .byte	0
07258 1909                        00            .byte	0
07259 190A                        00            .byte	0
07260 190B                        28            .byte	$28
07261 190C                        6C            .byte	$6C
07262 190D                        FE            .byte	$FE
07263 190E                        6C            .byte	$6C
07264 190F                        28            .byte	$28
07265 1910                        00            .byte	0
07266 1911                        00            .byte	0
07267 1912                        00            .byte	0
07268 1913                        00            .byte	0
07269 1914                        00            .byte	0
07270                                           ! 1148  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07271 1915                        00            .byte	0
07272 1916                        00            .byte	0
07273 1917                        00            .byte	0
07274 1918                        10            .byte	$10
07275 1919                        38            .byte	$38
07276 191A                        38            .byte	$38
07277 191B                        7C            .byte	$7C
07278 191C                        7C            .byte	$7C
07279 191D                        FE            .byte	$FE
07280 191E                        FE            .byte	$FE
07281 191F                        00            .byte	0
07282 1920                        00            .byte	0
07283 1921                        00            .byte	0
07284 1922                        00            .byte	0
07285                                           ! 1149  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07286 1923                        00            .byte	0
07287 1924                        00            .byte	0
07288 1925                        00            .byte	0
07289 1926                        FE            .byte	$FE
07290 1927                        FE            .byte	$FE
07291 1928                        7C            .byte	$7C
07292 1929                        7C            .byte	$7C
07293 192A                        38            .byte	$38
07294 192B                        38            .byte	$38
07295 192C                        10            .byte	$10
07296 192D                        00            .byte	0
07297 192E                        00            .byte	0
07298 192F                        00            .byte	0
07299 1930                        00            .byte	0
07300                                           ! 1150  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07301 1931                        00            .byte	0
07302 1932                        00            .byte	0
07303 1933                        00            .byte	0
07304 1934                        00            .byte	0
07305 1935                        00            .byte	0
07306 1936                        00            .byte	0
07307 1937                        00            .byte	0
07308 1938                        00            .byte	0
07309 1939                        00            .byte	0
07310 193A                        00            .byte	0
07311 193B                        00            .byte	0
07312 193C                        00            .byte	0
07313 193D                        00            .byte	0
07314 193E                        00            .byte	0
07315                                           ! 1151  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07316 193F                        00            .byte	0
07317 1940                        00            .byte	0
07318 1941                        18            .byte	$18
07319 1942                        3C            .byte	$3C
07320 1943                        3C            .byte	$3C
07321 1944                        3C            .byte	$3C
07322 1945                        18            .byte	$18
07323 1946                        18            .byte	$18
07324 1947                        00            .byte	0
07325 1948                        18            .byte	$18
07326 1949                        18            .byte	$18
07327 194A                        00            .byte	0
07328 194B                        00            .byte	0
07329 194C                        00            .byte	0
07330                                           ! 1152  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07331 194D                        00            .byte	0
07332 194E                        66            .byte	$66
07333 194F                        66            .byte	$66
07334 1950                        66            .byte	$66
07335 1951                        24            .byte	$24
07336 1952                        00            .byte	0
07337 1953                        00            .byte	0
07338 1954                        00            .byte	0
07339 1955                        00            .byte	0
07340 1956                        00            .byte	0
07341 1957                        00            .byte	0
07342 1958                        00            .byte	0
07343 1959                        00            .byte	0
07344 195A                        00            .byte	0
07345                                           ! 1153  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07346 195B                        00            .byte	0
07347 195C                        00            .byte	0
07348 195D                        6C            .byte	$6C
07349 195E                        6C            .byte	$6C
07350 195F                        FE            .byte	$FE
07351 1960                        6C            .byte	$6C
07352 1961                        6C            .byte	$6C
07353 1962                        6C            .byte	$6C
07354 1963                        FE            .byte	$FE
07355 1964                        6C            .byte	$6C
07356 1965                        6C            .byte	$6C
07357 1966                        00            .byte	0
07358 1967                        00            .byte	0
07359 1968                        00            .byte	0
07360                                           ! 1154  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07361 1969                        18            .byte	$18
07362 196A                        18            .byte	$18
07363 196B                        7C            .byte	$7C
07364 196C                        C6            .byte	$C6
07365 196D                        C2            .byte	$C2
07366 196E                        C0            .byte	$C0
07367 196F                        7C            .byte	$7C
07368 1970                        06            .byte	6
07369 1971                        86            .byte	$86
07370 1972                        C6            .byte	$C6
07371 1973                        7C            .byte	$7C
07372 1974                        18            .byte	$18
07373 1975                        18            .byte	$18
07374 1976                        00            .byte	0
07375                                           ! 1155  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07376 1977                        00            .byte	0
07377 1978                        00            .byte	0
07378 1979                        00            .byte	0
07379 197A                        00            .byte	0
07380 197B                        C2            .byte	$C2
07381 197C                        C6            .byte	$C6
07382 197D                        0C            .byte	$C
07383 197E                        18            .byte	$18
07384 197F                        30            .byte	$30
07385 1980                        66            .byte	$66
07386 1981                        C6            .byte	$C6
07387 1982                        00            .byte	0
07388 1983                        00            .byte	0
07389 1984                        00            .byte	0
07390                                           ! 1156  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07391 1985                        00            .byte	0
07392 1986                        00            .byte	0
07393 1987                        38            .byte	$38
07394 1988                        6C            .byte	$6C
07395 1989                        6C            .byte	$6C
07396 198A                        38            .byte	$38
07397 198B                        76            .byte	$76
07398 198C                        DC            .byte	$DC
07399 198D                        CC            .byte	$CC
07400 198E                        CC            .byte	$CC
07401 198F                        76            .byte	$76
07402 1990                        00            .byte	0
07403 1991                        00            .byte	0
07404 1992                        00            .byte	0
07405                                           ! 1157  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07406 1993                        00            .byte	0
07407 1994                        30            .byte	$30
07408 1995                        30            .byte	$30
07409 1996                        30            .byte	$30
07410 1997                        60            .byte	$60
07411 1998                        00            .byte	0
07412 1999                        00            .byte	0
07413 199A                        00            .byte	0
07414 199B                        00            .byte	0
07415 199C                        00            .byte	0
07416 199D                        00            .byte	0
07417 199E                        00            .byte	0
07418 199F                        00            .byte	0
07419 19A0                        00            .byte	0
07420                                           ! 1158  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07421 19A1                        00            .byte	0
07422 19A2                        00            .byte	0
07423 19A3                        0C            .byte	$C
07424 19A4                        18            .byte	$18
07425 19A5                        30            .byte	$30
07426 19A6                        30            .byte	$30
07427 19A7                        30            .byte	$30
07428 19A8                        30            .byte	$30
07429 19A9                        30            .byte	$30
07430 19AA                        18            .byte	$18
07431 19AB                        0C            .byte	$C
07432 19AC                        00            .byte	0
07433 19AD                        00            .byte	0
07434 19AE                        00            .byte	0
07435                                           ! 1159  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07436 19AF                        00            .byte	0
07437 19B0                        00            .byte	0
07438 19B1                        30            .byte	$30
07439 19B2                        18            .byte	$18
07440 19B3                        0C            .byte	$C
07441 19B4                        0C            .byte	$C
07442 19B5                        0C            .byte	$C
07443 19B6                        0C            .byte	$C
07444 19B7                        0C            .byte	$C
07445 19B8                        18            .byte	$18
07446 19B9                        30            .byte	$30
07447 19BA                        00            .byte	0
07448 19BB                        00            .byte	0
07449 19BC                        00            .byte	0
07450                                           ! 1160  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07451 19BD                        00            .byte	0
07452 19BE                        00            .byte	0
07453 19BF                        00            .byte	0
07454 19C0                        00            .byte	0
07455 19C1                        66            .byte	$66
07456 19C2                        3C            .byte	$3C
07457 19C3                        FF            .byte	$FF
07458 19C4                        3C            .byte	$3C
07459 19C5                        66            .byte	$66
07460 19C6                        00            .byte	0
07461 19C7                        00            .byte	0
07462 19C8                        00            .byte	0
07463 19C9                        00            .byte	0
07464 19CA                        00            .byte	0
07465                                           ! 1161  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07466 19CB                        00            .byte	0
07467 19CC                        00            .byte	0
07468 19CD                        00            .byte	0
07469 19CE                        00            .byte	0
07470 19CF                        18            .byte	$18
07471 19D0                        18            .byte	$18
07472 19D1                        7E            .byte	$7E
07473 19D2                        18            .byte	$18
07474 19D3                        18            .byte	$18
07475 19D4                        00            .byte	0
07476 19D5                        00            .byte	0
07477 19D6                        00            .byte	0
07478 19D7                        00            .byte	0
07479 19D8                        00            .byte	0
07480                                           ! 1162  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07481 19D9                        00            .byte	0
07482 19DA                        00            .byte	0
07483 19DB                        00            .byte	0
07484 19DC                        00            .byte	0
07485 19DD                        00            .byte	0
07486 19DE                        00            .byte	0
07487 19DF                        00            .byte	0
07488 19E0                        00            .byte	0
07489 19E1                        18            .byte	$18
07490 19E2                        18            .byte	$18
07491 19E3                        18            .byte	$18
07492 19E4                        30            .byte	$30
07493 19E5                        00            .byte	0
07494 19E6                        00            .byte	0
07495                                           ! 1163  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07496 19E7                        00            .byte	0
07497 19E8                        00            .byte	0
07498 19E9                        00            .byte	0
07499 19EA                        00            .byte	0
07500 19EB                        00            .byte	0
07501 19EC                        00            .byte	0
07502 19ED                        FE            .byte	$FE
07503 19EE                        00            .byte	0
07504 19EF                        00            .byte	0
07505 19F0                        00            .byte	0
07506 19F1                        00            .byte	0
07507 19F2                        00            .byte	0
07508 19F3                        00            .byte	0
07509 19F4                        00            .byte	0
07510                                           ! 1164  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07511 19F5                        00            .byte	0
07512 19F6                        00            .byte	0
07513 19F7                        00            .byte	0
07514 19F8                        00            .byte	0
07515 19F9                        00            .byte	0
07516 19FA                        00            .byte	0
07517 19FB                        00            .byte	0
07518 19FC                        00            .byte	0
07519 19FD                        00            .byte	0
07520 19FE                        18            .byte	$18
07521 19FF                        18            .byte	$18
07522 1A00                        00            .byte	0
07523 1A01                        00            .byte	0
07524 1A02                        00            .byte	0
07525                                           ! 1165  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07526 1A03                        00            .byte	0
07527 1A04                        00            .byte	0
07528 1A05                        02            .byte	2
07529 1A06                        06            .byte	6
07530 1A07                        0C            .byte	$C
07531 1A08                        18            .byte	$18
07532 1A09                        30            .byte	$30
07533 1A0A                        60            .byte	$60
07534 1A0B                        C0            .byte	$C0
07535 1A0C                        80            .byte	$80
07536 1A0D                        00            .byte	0
07537 1A0E                        00            .byte	0
07538 1A0F                        00            .byte	0
07539 1A10                        00            .byte	0
07540                                           ! 1166  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07541 1A11                        00            .byte	0
07542 1A12                        00            .byte	0
07543 1A13                        7C            .byte	$7C
07544 1A14                        C6            .byte	$C6
07545 1A15                        CE            .byte	$CE
07546 1A16                        DE            .byte	$DE
07547 1A17                        F6            .byte	$F6
07548 1A18                        E6            .byte	$E6
07549 1A19                        C6            .byte	$C6
07550 1A1A                        C6            .byte	$C6
07551 1A1B                        7C            .byte	$7C
07552 1A1C                        00            .byte	0
07553 1A1D                        00            .byte	0
07554 1A1E                        00            .byte	0
07555                                           ! 1167  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07556 1A1F                        00            .byte	0
07557 1A20                        00            .byte	0
07558 1A21                        18            .byte	$18
07559 1A22                        38            .byte	$38
07560 1A23                        78            .byte	$78
07561 1A24                        18            .byte	$18
07562 1A25                        18            .byte	$18
07563 1A26                        18            .byte	$18
07564 1A27                        18            .byte	$18
07565 1A28                        18            .byte	$18
07566 1A29                        7E            .byte	$7E
07567 1A2A                        00            .byte	0
07568 1A2B                        00            .byte	0
07569 1A2C                        00            .byte	0
07570                                           ! 1168  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07571 1A2D                        00            .byte	0
07572 1A2E                        00            .byte	0
07573 1A2F                        7C            .byte	$7C
07574 1A30                        C6            .byte	$C6
07575 1A31                        06            .byte	6
07576 1A32                        0C            .byte	$C
07577 1A33                        18            .byte	$18
07578 1A34                        30            .byte	$30
07579 1A35                        60            .byte	$60
07580 1A36                        C6            .byte	$C6
07581 1A37                        FE            .byte	$FE
07582 1A38                        00            .byte	0
07583 1A39                        00            .byte	0
07584 1A3A                        00            .byte	0
07585                                           ! 1169  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07586 1A3B                        00            .byte	0
07587 1A3C                        00            .byte	0
07588 1A3D                        7C            .byte	$7C
07589 1A3E                        C6            .byte	$C6
07590 1A3F                        06            .byte	6
07591 1A40                        06            .byte	6
07592 1A41                        3C            .byte	$3C
07593 1A42                        06            .byte	6
07594 1A43                        06            .byte	6
07595 1A44                        C6            .byte	$C6
07596 1A45                        7C            .byte	$7C
07597 1A46                        00            .byte	0
07598 1A47                        00            .byte	0
07599 1A48                        00            .byte	0
07600                                           ! 1170  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07601 1A49                        00            .byte	0
07602 1A4A                        00            .byte	0
07603 1A4B                        0C            .byte	$C
07604 1A4C                        1C            .byte	$1C
07605 1A4D                        3C            .byte	$3C
07606 1A4E                        6C            .byte	$6C
07607 1A4F                        CC            .byte	$CC
07608 1A50                        FE            .byte	$FE
07609 1A51                        0C            .byte	$C
07610 1A52                        0C            .byte	$C
07611 1A53                        1E            .byte	$1E
07612 1A54                        00            .byte	0
07613 1A55                        00            .byte	0
07614 1A56                        00            .byte	0
07615                                           ! 1171  0x00,
07616                                           ! 1171  0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07617 1A57                        00            .byte	0
07618 1A58                        00            .byte	0
07619 1A59                        FE            .byte	$FE
07620 1A5A                        C0            .byte	$C0
07621 1A5B                        C0            .byte	$C0
07622 1A5C                        C0            .byte	$C0
07623 1A5D                        FC            .byte	$FC
07624 1A5E                        06            .byte	6
07625 1A5F                        06            .byte	6
07626 1A60                        C6            .byte	$C6
07627 1A61                        7C            .byte	$7C
07628 1A62                        00            .byte	0
07629 1A63                        00            .byte	0
07630 1A64                        00            .byte	0
07631                                           ! 1172  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07632 1A65                        00            .byte	0
07633 1A66                        00            .byte	0
07634 1A67                        38            .byte	$38
07635 1A68                        60            .byte	$60
07636 1A69                        C0            .byte	$C0
07637 1A6A                        C0            .byte	$C0
07638 1A6B                        FC            .byte	$FC
07639 1A6C                        C6            .byte	$C6
07640 1A6D                        C6            .byte	$C6
07641 1A6E                        C6            .byte	$C6
07642 1A6F                        7C            .byte	$7C
07643 1A70                        00            .byte	0
07644 1A71                        00            .byte	0
07645 1A72                        00            .byte	0
07646                                           ! 1173  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07647 1A73                        00            .byte	0
07648 1A74                        00            .byte	0
07649 1A75                        FE            .byte	$FE
07650 1A76                        C6            .byte	$C6
07651 1A77                        06            .byte	6
07652 1A78                        0C            .byte	$C
07653 1A79                        18            .byte	$18
07654 1A7A                        30            .byte	$30
07655 1A7B                        30            .byte	$30
07656 1A7C                        30            .byte	$30
07657 1A7D                        30            .byte	$30
07658 1A7E                        00            .byte	0
07659 1A7F                        00            .byte	0
07660 1A80                        00            .byte	0
07661                                           ! 1174  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07662 1A81                        00            .byte	0
07663 1A82                        00            .byte	0
07664 1A83                        7C            .byte	$7C
07665 1A84                        C6            .byte	$C6
07666 1A85                        C6            .byte	$C6
07667 1A86                        C6            .byte	$C6
07668 1A87                        7C            .byte	$7C
07669 1A88                        C6            .byte	$C6
07670 1A89                        C6            .byte	$C6
07671 1A8A                        C6            .byte	$C6
07672 1A8B                        7C            .byte	$7C
07673 1A8C                        00            .byte	0
07674 1A8D                        00            .byte	0
07675 1A8E                        00            .byte	0
07676                                           ! 1175  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07677 1A8F                        00            .byte	0
07678 1A90                        00            .byte	0
07679 1A91                        7C            .byte	$7C
07680 1A92                        C6            .byte	$C6
07681 1A93                        C6            .byte	$C6
07682 1A94                        C6            .byte	$C6
07683 1A95                        7E            .byte	$7E
07684 1A96                        06            .byte	6
07685 1A97                        06            .byte	6
07686 1A98                        0C            .byte	$C
07687 1A99                        78            .byte	$78
07688 1A9A                        00            .byte	0
07689 1A9B                        00            .byte	0
07690 1A9C                        00            .byte	0
07691                                           ! 1176  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07692 1A9D                        00            .byte	0
07693 1A9E                        00            .byte	0
07694 1A9F                        00            .byte	0
07695 1AA0                        18            .byte	$18
07696 1AA1                        18            .byte	$18
07697 1AA2                        00            .byte	0
07698 1AA3                        00            .byte	0
07699 1AA4                        00            .byte	0
07700 1AA5                        18            .byte	$18
07701 1AA6                        18            .byte	$18
07702 1AA7                        00            .byte	0
07703 1AA8                        00            .byte	0
07704 1AA9                        00            .byte	0
07705 1AAA                        00            .byte	0
07706                                           ! 1177  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07707 1AAB                        00            .byte	0
07708 1AAC                        00            .byte	0
07709 1AAD                        00            .byte	0
07710 1AAE                        18            .byte	$18
07711 1AAF                        18            .byte	$18
07712 1AB0                        00            .byte	0
07713 1AB1                        00            .byte	0
07714 1AB2                        00            .byte	0
07715 1AB3                        18            .byte	$18
07716 1AB4                        18            .byte	$18
07717 1AB5                        30            .byte	$30
07718 1AB6                        00            .byte	0
07719 1AB7                        00            .byte	0
07720 1AB8                        00            .byte	0
07721                                           ! 1178  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07722 1AB9                        00            .byte	0
07723 1ABA                        00            .byte	0
07724 1ABB                        06            .byte	6
07725 1ABC                        0C            .byte	$C
07726 1ABD                        18            .byte	$18
07727 1ABE                        30            .byte	$30
07728 1ABF                        60            .byte	$60
07729 1AC0                        30            .byte	$30
07730 1AC1                        18            .byte	$18
07731 1AC2                        0C            .byte	$C
07732 1AC3                        06            .byte	6
07733 1AC4                        00            .byte	0
07734 1AC5                        00            .byte	0
07735 1AC6                        00            .byte	0
07736                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07737 1AC7                        00            .byte	0
07738 1AC8                        00            .byte	0
07739 1AC9                        00            .byte	0
07740 1ACA                        00            .byte	0
07741 1ACB                        00            .byte	0
07742 1ACC                        7E            .byte	$7E
07743 1ACD                        00            .byte	0
07744 1ACE                        00            .byte	0
07745 1ACF                        7E            .byte	$7E
07746 1AD0                        00            .byte	0
07747 1AD1                        00            .byte	0
07748 1AD2                        00            .byte	0
07749 1AD3                        00            .byte	0
07750 1AD4                        00            .byte	0
07751                                           ! 1180  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07752 1AD5                        00            .byte	0
07753 1AD6                        00            .byte	0
07754 1AD7                        60            .byte	$60
07755 1AD8                        30            .byte	$30
07756 1AD9                        18            .byte	$18
07757 1ADA                        0C            .byte	$C
07758 1ADB                        06            .byte	6
07759 1ADC                        0C            .byte	$C
07760 1ADD                        18            .byte	$18
07761 1ADE                        30            .byte	$30
07762 1ADF                        60            .byte	$60
07763 1AE0                        00            .byte	0
07764 1AE1                        00            .byte	0
07765 1AE2                        00            .byte	0
07766                                           ! 1181  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07767 1AE3                        00            .byte	0
07768 1AE4                        00            .byte	0
07769 1AE5                        7C            .byte	$7C
07770 1AE6                        C6            .byte	$C6
07771 1AE7                        C6            .byte	$C6
07772 1AE8                        0C            .byte	$C
07773 1AE9                        18            .byte	$18
07774 1AEA                        18            .byte	$18
07775 1AEB                        00            .byte	0
07776 1AEC                        18            .byte	$18
07777 1AED                        18            .byte	$18
07778 1AEE                        00            .byte	0
07779 1AEF                        00            .byte	0
07780 1AF0                        00            .byte	0
07781                                           ! 1182  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07782 1AF1                        00            .byte	0
07783 1AF2                        00            .byte	0
07784 1AF3                        7C            .byte	$7C
07785 1AF4                        C6            .byte	$C6
07786 1AF5                        C6            .byte	$C6
07787 1AF6                        DE            .byte	$DE
07788 1AF7                        DE            .byte	$DE
07789 1AF8                        DE            .byte	$DE
07790 1AF9                        DC            .byte	$DC
07791 1AFA                        C0            .byte	$C0
07792 1AFB                        7C            .byte	$7C
07793 1AFC                        00            .byte	0
07794 1AFD                        00            .byte	0
07795 1AFE                        00            .byte	0
07796                                           ! 1183  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07797 1AFF                        00            .byte	0
07798 1B00                        00            .byte	0
07799 1B01                        10            .byte	$10
07800 1B02                        38            .byte	$38
07801 1B03                        6C            .byte	$6C
07802 1B04                        C6            .byte	$C6
07803 1B05                        C6            .byte	$C6
07804 1B06                        FE            .byte	$FE
07805 1B07                        C6            .byte	$C6
07806 1B08                        C6            .byte	$C6
07807 1B09                        C6            .byte	$C6
07808 1B0A                        00            .byte	0
07809 1B0B                        00            .byte	0
07810 1B0C                        00            .byte	0
07811                                           ! 1184  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07812 1B0D                        00            .byte	0
07813 1B0E                        00            .byte	0
07814 1B0F                        FC            .byte	$FC
07815 1B10                        66            .byte	$66
07816 1B11                        66            .byte	$66
07817 1B12                        66            .byte	$66
07818 1B13                        7C            .byte	$7C
07819 1B14                        66            .byte	$66
07820 1B15                        66            .byte	$66
07821 1B16                        66            .byte	$66
07822 1B17                        FC            .byte	$FC
07823 1B18                        00            .byte	0
07824 1B19                        00            .byte	0
07825 1B1A                        00            .byte	0
07826                                           ! 1185  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07827 1B1B                        00            .byte	0
07828 1B1C                        00            .byte	0
07829 1B1D                        3C            .byte	$3C
07830 1B1E                        66            .byte	$66
07831 1B1F                        C2            .byte	$C2
07832 1B20                        C0            .byte	$C0
07833 1B21                        C0            .byte	$C0
07834 1B22                        C0            .byte	$C0
07835 1B23                        C2            .byte	$C2
07836 1B24                        66            .byte	$66
07837 1B25                        3C            .byte	$3C
07838 1B26                        00            .byte	0
07839 1B27                        00            .byte	0
07840 1B28                        00            .byte	0
07841                                           ! 1186  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07842 1B29                        00            .byte	0
07843 1B2A                        00            .byte	0
07844 1B2B                        F8            .byte	$F8
07845 1B2C                        6C            .byte	$6C
07846 1B2D                        66            .byte	$66
07847 1B2E                        66            .byte	$66
07848 1B2F                        66            .byte	$66
07849 1B30                        66            .byte	$66
07850 1B31                        66            .byte	$66
07851 1B32                        6C            .byte	$6C
07852 1B33                        F8            .byte	$F8
07853 1B34                        00            .byte	0
07854 1B35                        00            .byte	0
07855 1B36                        00            .byte	0
07856                                           ! 1187  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07857 1B37                        00            .byte	0
07858 1B38                        00            .byte	0
07859 1B39                        FE            .byte	$FE
07860 1B3A                        66            .byte	$66
07861 1B3B                        62            .byte	$62
07862 1B3C                        68            .byte	$68
07863 1B3D                        78            .byte	$78
07864 1B3E                        68            .byte	$68
07865 1B3F                        62            .byte	$62
07866 1B40                        66            .byte	$66
07867 1B41                        FE            .byte	$FE
07868 1B42                        00            .byte	0
07869 1B43                        00            .byte	0
07870 1B44                        00            .byte	0
07871                                           ! 1188  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07872 1B45                        00            .byte	0
07873 1B46                        00            .byte	0
07874 1B47                        FE            .byte	$FE
07875 1B48                        66            .byte	$66
07876 1B49                        62            .byte	$62
07877 1B4A                        68            .byte	$68
07878 1B4B                        78            .byte	$78
07879 1B4C                        68            .byte	$68
07880 1B4D                        60            .byte	$60
07881 1B4E                        60            .byte	$60
07882 1B4F                        F0            .byte	$F0
07883 1B50                        00            .byte	0
07884 1B51                        00            .byte	0
07885 1B52                        00            .byte	0
07886                                           ! 1189  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07887 1B53                        00            .byte	0
07888 1B54                        00            .byte	0
07889 1B55                        3C            .byte	$3C
07890 1B56                        66            .byte	$66
07891 1B57                        C2            .byte	$C2
07892 1B58                        C0            .byte	$C0
07893 1B59                        C0            .byte	$C0
07894 1B5A                        DE            .byte	$DE
07895 1B5B                        C6            .byte	$C6
07896 1B5C                        66            .byte	$66
07897 1B5D                        3A            .byte	$3A
07898 1B5E                        00            .byte	0
07899 1B5F                        00            .byte	0
07900 1B60                        00            .byte	0
07901                                           ! 1190  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07902 1B61                        00            .byte	0
07903 1B62                        00            .byte	0
07904 1B63                        C6            .byte	$C6
07905 1B64                        C6            .byte	$C6
07906 1B65                        C6            .byte	$C6
07907 1B66                        C6            .byte	$C6
07908 1B67                        FE            .byte	$FE
07909 1B68                        C6            .byte	$C6
07910 1B69                        C6            .byte	$C6
07911 1B6A                        C6            .byte	$C6
07912 1B6B                        C6            .byte	$C6
07913 1B6C                        00            .byte	0
07914 1B6D                        00            .byte	0
07915 1B6E                        00            .byte	0
07916                                           ! 1191  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07917 1B6F                        00            .byte	0
07918 1B70                        00            .byte	0
07919 1B71                        3C            .byte	$3C
07920 1B72                        18            .byte	$18
07921 1B73                        18            .byte	$18
07922 1B74                        18            .byte	$18
07923 1B75                        18            .byte	$18
07924 1B76                        18            .byte	$18
07925 1B77                        18            .byte	$18
07926 1B78                        18            .byte	$18
07927 1B79                        3C            .byte	$3C
07928 1B7A                        00            .byte	0
07929 1B7B                        00            .byte	0
07930 1B7C                        00            .byte	0
07931                                           ! 1192  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07932 1B7D                        00            .byte	0
07933 1B7E                        00            .byte	0
07934 1B7F                        1E            .byte	$1E
07935 1B80                        0C            .byte	$C
07936 1B81                        0C            .byte	$C
07937 1B82                        0C            .byte	$C
07938 1B83                        0C            .byte	$C
07939 1B84                        0C            .byte	$C
07940 1B85                        CC            .byte	$CC
07941 1B86                        CC            .byte	$CC
07942 1B87                        78            .byte	$78
07943 1B88                        00            .byte	0
07944 1B89                        00            .byte	0
07945 1B8A                        00            .byte	0
07946                                           ! 1193  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07947 1B8B                        00            .byte	0
07948 1B8C                        00            .byte	0
07949 1B8D                        E6            .byte	$E6
07950 1B8E                        66            .byte	$66
07951 1B8F                        6C            .byte	$6C
07952 1B90                        6C            .byte	$6C
07953 1B91                        78            .byte	$78
07954 1B92                        6C            .byte	$6C
07955 1B93                        6C            .byte	$6C
07956 1B94                        66            .byte	$66
07957 1B95                        E6            .byte	$E6
07958 1B96                        00            .byte	0
07959 1B97                        00            .byte	0
07960 1B98                        00            .byte	0
07961                                           ! 1194  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07962 1B99                        00            .byte	0
07963 1B9A                        00            .byte	0
07964 1B9B                        F0            .byte	$F0
07965 1B9C                        60            .byte	$60
07966 1B9D                        60            .byte	$60
07967 1B9E                        60            .byte	$60
07968 1B9F                        60            .byte	$60
07969 1BA0                        60            .byte	$60
07970 1BA1                        62            .byte	$62
07971 1BA2                        66            .byte	$66
07972 1BA3                        FE            .byte	$FE
07973 1BA4                        00            .byte	0
07974 1BA5                        00            .byte	0
07975 1BA6                        00            .byte	0
07976                                           ! 1195  0x00, 0x00, 0
07977 1BA7                        00            .byte	0
07978 1BA8                        00            .byte	0
07979                                           ! 1195 xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07980 1BA9                        C6            .byte	$C6
07981 1BAA                        EE            .byte	$EE
07982 1BAB                        FE            .byte	$FE
07983 1BAC                        FE            .byte	$FE
07984 1BAD                        D6            .byte	$D6
07985 1BAE                        C6            .byte	$C6
07986 1BAF                        C6            .byte	$C6
07987 1BB0                        C6            .byte	$C6
07988 1BB1                        C6            .byte	$C6
07989 1BB2                        00            .byte	0
07990 1BB3                        00            .byte	0
07991 1BB4                        00            .byte	0
07992                                           ! 1196  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07993 1BB5                        00            .byte	0
07994 1BB6                        00            .byte	0
07995 1BB7                        C6            .byte	$C6
07996 1BB8                        E6            .byte	$E6
07997 1BB9                        F6            .byte	$F6
07998 1BBA                        FE            .byte	$FE
07999 1BBB                        DE            .byte	$DE
08000 1BBC                        CE            .byte	$CE
08001 1BBD                        C6            .byte	$C6
08002 1BBE                        C6            .byte	$C6
08003 1BBF                        C6            .byte	$C6
08004 1BC0                        00            .byte	0
08005 1BC1                        00            .byte	0
08006 1BC2                        00            .byte	0
08007                                           ! 1197  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08008 1BC3                        00            .byte	0
08009 1BC4                        00            .byte	0
08010 1BC5                        38            .byte	$38
08011 1BC6                        6C            .byte	$6C
08012 1BC7                        C6            .byte	$C6
08013 1BC8                        C6            .byte	$C6
08014 1BC9                        C6            .byte	$C6
08015 1BCA                        C6            .byte	$C6
08016 1BCB                        C6            .byte	$C6
08017 1BCC                        6C            .byte	$6C
08018 1BCD                        38            .byte	$38
08019 1BCE                        00            .byte	0
08020 1BCF                        00            .byte	0
08021 1BD0                        00            .byte	0
08022                                           ! 1198  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08023 1BD1                        00            .byte	0
08024 1BD2                        00            .byte	0
08025 1BD3                        FC            .byte	$FC
08026 1BD4                        66            .byte	$66
08027 1BD5                        66            .byte	$66
08028 1BD6                        66            .byte	$66
08029 1BD7                        7C            .byte	$7C
08030 1BD8                        60            .byte	$60
08031 1BD9                        60            .byte	$60
08032 1BDA                        60            .byte	$60
08033 1BDB                        F0            .byte	$F0
08034 1BDC                        00            .byte	0
08035 1BDD                        00            .byte	0
08036 1BDE                        00            .byte	0
08037                                           ! 1199  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08038 1BDF                        00            .byte	0
08039 1BE0                        00            .byte	0
08040 1BE1                        7C            .byte	$7C
08041 1BE2                        C6            .byte	$C6
08042 1BE3                        C6            .byte	$C6
08043 1BE4                        C6            .byte	$C6
08044 1BE5                        C6            .byte	$C6
08045 1BE6                        D6            .byte	$D6
08046 1BE7                        DE            .byte	$DE
08047 1BE8                        7C            .byte	$7C
08048 1BE9                        0C            .byte	$C
08049 1BEA                        0E            .byte	$E
08050 1BEB                        00            .byte	0
08051 1BEC                        00            .byte	0
08052                                           ! 1200  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08053 1BED                        00            .byte	0
08054 1BEE                        00            .byte	0
08055 1BEF                        FC            .byte	$FC
08056 1BF0                        66            .byte	$66
08057 1BF1                        66            .byte	$66
08058 1BF2                        66            .byte	$66
08059 1BF3                        7C            .byte	$7C
08060 1BF4                        6C            .byte	$6C
08061 1BF5                        66            .byte	$66
08062 1BF6                        66            .byte	$66
08063 1BF7                        E6            .byte	$E6
08064 1BF8                        00            .byte	0
08065 1BF9                        00            .byte	0
08066 1BFA                        00            .byte	0
08067                                           ! 1201  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08068 1BFB                        00            .byte	0
08069 1BFC                        00            .byte	0
08070 1BFD                        7C            .byte	$7C
08071 1BFE                        C6            .byte	$C6
08072 1BFF                        C6            .byte	$C6
08073 1C00                        60            .byte	$60
08074 1C01                        38            .byte	$38
08075 1C02                        0C            .byte	$C
08076 1C03                        C6            .byte	$C6
08077 1C04                        C6            .byte	$C6
08078 1C05                        7C            .byte	$7C
08079 1C06                        00            .byte	0
08080 1C07                        00            .byte	0
08081 1C08                        00            .byte	0
08082                                           ! 1202  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08083 1C09                        00            .byte	0
08084 1C0A                        00            .byte	0
08085 1C0B                        7E            .byte	$7E
08086 1C0C                        7E            .byte	$7E
08087 1C0D                        5A            .byte	$5A
08088 1C0E                        18            .byte	$18
08089 1C0F                        18            .byte	$18
08090 1C10                        18            .byte	$18
08091 1C11                        18            .byte	$18
08092 1C12                        18            .byte	$18
08093 1C13                        3C            .byte	$3C
08094 1C14                        00            .byte	0
08095 1C15                        00            .byte	0
08096 1C16                        00            .byte	0
08097                                           ! 1203  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08098 1C17                        00            .byte	0
08099 1C18                        00            .byte	0
08100 1C19                        C6            .byte	$C6
08101 1C1A                        C6            .byte	$C6
08102 1C1B                        C6            .byte	$C6
08103 1C1C                        C6            .byte	$C6
08104 1C1D                        C6            .byte	$C6
08105 1C1E                        C6            .byte	$C6
08106 1C1F                        C6            .byte	$C6
08107 1C20                        C6            .byte	$C6
08108 1C21                        7C            .byte	$7C
08109 1C22                        00            .byte	0
08110 1C23                        00            .byte	0
08111 1C24                        00            .byte	0
08112                                           ! 1204  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08113 1C25                        00            .byte	0
08114 1C26                        00            .byte	0
08115 1C27                        C6            .byte	$C6
08116 1C28                        C6            .byte	$C6
08117 1C29                        C6            .byte	$C6
08118 1C2A                        C6            .byte	$C6
08119 1C2B                        C6            .byte	$C6
08120 1C2C                        C6            .byte	$C6
08121 1C2D                        6C            .byte	$6C
08122 1C2E                        38            .byte	$38
08123 1C2F                        10            .byte	$10
08124 1C30                        00            .byte	0
08125 1C31                        00            .byte	0
08126 1C32                        00            .byte	0
08127                                           ! 1205  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08128 1C33                        00            .byte	0
08129 1C34                        00            .byte	0
08130 1C35                        C6            .byte	$C6
08131 1C36                        C6            .byte	$C6
08132 1C37                        C6            .byte	$C6
08133 1C38                        C6            .byte	$C6
08134 1C39                        D6            .byte	$D6
08135 1C3A                        D6            .byte	$D6
08136 1C3B                        FE            .byte	$FE
08137 1C3C                        7C            .byte	$7C
08138 1C3D                        6C            .byte	$6C
08139 1C3E                        00            .byte	0
08140 1C3F                        00            .byte	0
08141 1C40                        00            .byte	0
08142                                           ! 1206  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08143 1C41                        00            .byte	0
08144 1C42                        00            .byte	0
08145 1C43                        C6            .byte	$C6
08146 1C44                        C6            .byte	$C6
08147 1C45                        6C            .byte	$6C
08148 1C46                        38            .byte	$38
08149 1C47                        38            .byte	$38
08150 1C48                        38            .byte	$38
08151 1C49                        6C            .byte	$6C
08152 1C4A                        C6            .byte	$C6
08153 1C4B                        C6            .byte	$C6
08154 1C4C                        00            .byte	0
08155 1C4D                        00            .byte	0
08156 1C4E                        00            .byte	0
08157                                           ! 1207  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08158 1C4F                        00            .byte	0
08159 1C50                        00            .byte	0
08160 1C51                        66            .byte	$66
08161 1C52                        66            .byte	$66
08162 1C53                        66            .byte	$66
08163 1C54                        66            .byte	$66
08164 1C55                        3C            .byte	$3C
08165 1C56                        18            .byte	$18
08166 1C57                        18            .byte	$18
08167 1C58                        18            .byte	$18
08168 1C59                        3C            .byte	$3C
08169 1C5A                        00            .byte	0
08170 1C5B                        00            .byte	0
08171 1C5C                        00            .byte	0
08172                                           ! 1208  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08173 1C5D                        00            .byte	0
08174 1C5E                        00            .byte	0
08175 1C5F                        FE            .byte	$FE
08176 1C60                        C6            .byte	$C6
08177 1C61                        8C            .byte	$8C
08178 1C62                        18            .byte	$18
08179 1C63                        30            .byte	$30
08180 1C64                        60            .byte	$60
08181 1C65                        C2            .byte	$C2
08182 1C66                        C6            .byte	$C6
08183 1C67                        FE            .byte	$FE
08184 1C68                        00            .byte	0
08185 1C69                        00            .byte	0
08186 1C6A                        00            .byte	0
08187                                           ! 1209  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08188 1C6B                        00            .byte	0
08189 1C6C                        00            .byte	0
08190 1C6D                        3C            .byte	$3C
08191 1C6E                        30            .byte	$30
08192 1C6F                        30            .byte	$30
08193 1C70                        30            .byte	$30
08194 1C71                        30            .byte	$30
08195 1C72                        30            .byte	$30
08196 1C73                        30            .byte	$30
08197 1C74                        30            .byte	$30
08198 1C75                        3C            .byte	$3C
08199 1C76                        00            .byte	0
08200 1C77                        00            .byte	0
08201 1C78                        00            .byte	0
08202                                           ! 1210  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08203 1C79                        00            .byte	0
08204 1C7A                        00            .byte	0
08205 1C7B                        80            .byte	$80
08206 1C7C                        C0            .byte	$C0
08207 1C7D                        E0            .byte	$E0
08208 1C7E                        70            .byte	$70
08209 1C7F                        38            .byte	$38
08210 1C80                        1C            .byte	$1C
08211 1C81                        0E            .byte	$E
08212 1C82                        06            .byte	6
08213 1C83                        02            .byte	2
08214 1C84                        00            .byte	0
08215 1C85                        00            .byte	0
08216 1C86                        00            .byte	0
08217                                           ! 1211  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08218 1C87                        00            .byte	0
08219 1C88                        00            .byte	0
08220 1C89                        3C            .byte	$3C
08221 1C8A                        0C            .byte	$C
08222 1C8B                        0C            .byte	$C
08223 1C8C                        0C            .byte	$C
08224 1C8D                        0C            .byte	$C
08225 1C8E                        0C            .byte	$C
08226 1C8F                        0C            .byte	$C
08227 1C90                        0C            .byte	$C
08228 1C91                        3C            .byte	$3C
08229 1C92                        00            .byte	0
08230 1C93                        00            .byte	0
08231 1C94                        00            .byte	0
08232                                           ! 1212  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08233 1C95                        10            .byte	$10
08234 1C96                        38            .byte	$38
08235 1C97                        6C            .byte	$6C
08236 1C98                        C6            .byte	$C6
08237 1C99                        00            .byte	0
08238 1C9A                        00            .byte	0
08239 1C9B                        00            .byte	0
08240 1C9C                        00            .byte	0
08241 1C9D                        00            .byte	0
08242 1C9E                        00            .byte	0
08243 1C9F                        00            .byte	0
08244 1CA0                        00            .byte	0
08245 1CA1                        00            .byte	0
08246 1CA2                        00            .byte	0
08247                                           ! 1213  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08248 1CA3                        00            .byte	0
08249 1CA4                        00            .byte	0
08250 1CA5                        00            .byte	0
08251 1CA6                        00            .byte	0
08252 1CA7                        00            .byte	0
08253 1CA8                        00            .byte	0
08254 1CA9                        00            .byte	0
08255 1CAA                        00            .byte	0
08256 1CAB                        00            .byte	0
08257 1CAC                        00            .byte	0
08258 1CAD                        00            .byte	0
08259 1CAE                        00            .byte	0
08260 1CAF                        FF            .byte	$FF
08261 1CB0                        00            .byte	0
08262                                           ! 1214  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08263 1CB1                        30            .byte	$30
08264 1CB2                        30            .byte	$30
08265 1CB3                        18            .byte	$18
08266 1CB4                        00            .byte	0
08267 1CB5                        00            .byte	0
08268 1CB6                        00            .byte	0
08269 1CB7                        00            .byte	0
08270 1CB8                        00            .byte	0
08271 1CB9                        00            .byte	0
08272 1CBA                        00            .byte	0
08273 1CBB                        00            .byte	0
08274 1CBC                        00            .byte	0
08275 1CBD                        00            .byte	0
08276 1CBE                        00            .byte	0
08277                                           ! 1215  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08278 1CBF                        00            .byte	0
08279 1CC0                        00            .byte	0
08280 1CC1                        00            .byte	0
08281 1CC2                        00            .byte	0
08282 1CC3                        00            .byte	0
08283 1CC4                        78            .byte	$78
08284 1CC5                        0C            .byte	$C
08285 1CC6                        7C            .byte	$7C
08286 1CC7                        CC            .byte	$CC
08287 1CC8                        CC            .byte	$CC
08288 1CC9                        76            .byte	$76
08289 1CCA                        00            .byte	0
08290 1CCB                        00            .byte	0
08291 1CCC                        00            .byte	0
08292                                           ! 1216  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08293 1CCD                        00            .byte	0
08294 1CCE                        00            .byte	0
08295 1CCF                        E0            .byte	$E0
08296 1CD0                        60            .byte	$60
08297 1CD1                        60            .byte	$60
08298 1CD2                        78            .byte	$78
08299 1CD3                        6C            .byte	$6C
08300 1CD4                        66            .byte	$66
08301 1CD5                        66            .byte	$66
08302 1CD6                        66            .byte	$66
08303 1CD7                        7C            .byte	$7C
08304 1CD8                        00            .byte	0
08305 1CD9                        00            .byte	0
08306 1CDA                        00            .byte	0
08307                                           ! 1217  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08308 1CDB                        00            .byte	0
08309 1CDC                        00            .byte	0
08310 1CDD                        00            .byte	0
08311 1CDE                        00            .byte	0
08312 1CDF                        00            .byte	0
08313 1CE0                        7C            .byte	$7C
08314 1CE1                        C6            .byte	$C6
08315 1CE2                        C0            .byte	$C0
08316 1CE3                        C0            .byte	$C0
08317 1CE4                        C6            .byte	$C6
08318 1CE5                        7C            .byte	$7C
08319 1CE6                        00            .byte	0
08320 1CE7                        00            .byte	0
08321 1CE8                        00            .byte	0
08322                                           ! 1218  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08323 1CE9                        00            .byte	0
08324 1CEA                        00            .byte	0
08325 1CEB                        1C            .byte	$1C
08326 1CEC                        0C            .byte	$C
08327 1CED                        0C            .byte	$C
08328 1CEE                        3C            .byte	$3C
08329 1CEF                        6C            .byte	$6C
08330 1CF0                        CC            .byte	$CC
08331 1CF1                        CC            .byte	$CC
08332 1CF2                        CC            .byte	$CC
08333 1CF3                        76            .byte	$76
08334 1CF4                        00            .byte	0
08335 1CF5                        00            .byte	0
08336 1CF6                        00            .byte	0
08337                                           ! 1219  0x00, 0x00, 0x00, 0x0
08338 1CF7                        00            .byte	0
08339 1CF8                        00            .byte	0
08340 1CF9                        00            .byte	0
08341                                           ! 1219 0, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08342 1CFA                        00            .byte	0
08343 1CFB                        00            .byte	0
08344 1CFC                        7C            .byte	$7C
08345 1CFD                        C6            .byte	$C6
08346 1CFE                        FE            .byte	$FE
08347 1CFF                        C0            .byte	$C0
08348 1D00                        C6            .byte	$C6
08349 1D01                        7C            .byte	$7C
08350 1D02                        00            .byte	0
08351 1D03                        00            .byte	0
08352 1D04                        00            .byte	0
08353                                           ! 1220  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08354 1D05                        00            .byte	0
08355 1D06                        00            .byte	0
08356 1D07                        38            .byte	$38
08357 1D08                        6C            .byte	$6C
08358 1D09                        64            .byte	$64
08359 1D0A                        60            .byte	$60
08360 1D0B                        F0            .byte	$F0
08361 1D0C                        60            .byte	$60
08362 1D0D                        60            .byte	$60
08363 1D0E                        60            .byte	$60
08364 1D0F                        F0            .byte	$F0
08365 1D10                        00            .byte	0
08366 1D11                        00            .byte	0
08367 1D12                        00            .byte	0
08368                                           ! 1221  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08369 1D13                        00            .byte	0
08370 1D14                        00            .byte	0
08371 1D15                        00            .byte	0
08372 1D16                        00            .byte	0
08373 1D17                        00            .byte	0
08374 1D18                        76            .byte	$76
08375 1D19                        CC            .byte	$CC
08376 1D1A                        CC            .byte	$CC
08377 1D1B                        CC            .byte	$CC
08378 1D1C                        7C            .byte	$7C
08379 1D1D                        0C            .byte	$C
08380 1D1E                        CC            .byte	$CC
08381 1D1F                        78            .byte	$78
08382 1D20                        00            .byte	0
08383                                           ! 1222  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08384 1D21                        00            .byte	0
08385 1D22                        00            .byte	0
08386 1D23                        E0            .byte	$E0
08387 1D24                        60            .byte	$60
08388 1D25                        60            .byte	$60
08389 1D26                        6C            .byte	$6C
08390 1D27                        76            .byte	$76
08391 1D28                        66            .byte	$66
08392 1D29                        66            .byte	$66
08393 1D2A                        66            .byte	$66
08394 1D2B                        E6            .byte	$E6
08395 1D2C                        00            .byte	0
08396 1D2D                        00            .byte	0
08397 1D2E                        00            .byte	0
08398                                           ! 1223  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08399 1D2F                        00            .byte	0
08400 1D30                        00            .byte	0
08401 1D31                        18            .byte	$18
08402 1D32                        18            .byte	$18
08403 1D33                        00            .byte	0
08404 1D34                        38            .byte	$38
08405 1D35                        18            .byte	$18
08406 1D36                        18            .byte	$18
08407 1D37                        18            .byte	$18
08408 1D38                        18            .byte	$18
08409 1D39                        3C            .byte	$3C
08410 1D3A                        00            .byte	0
08411 1D3B                        00            .byte	0
08412 1D3C                        00            .byte	0
08413                                           ! 1224  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08414 1D3D                        00            .byte	0
08415 1D3E                        00            .byte	0
08416 1D3F                        06            .byte	6
08417 1D40                        06            .byte	6
08418 1D41                        00            .byte	0
08419 1D42                        0E            .byte	$E
08420 1D43                        06            .byte	6
08421 1D44                        06            .byte	6
08422 1D45                        06            .byte	6
08423 1D46                        06            .byte	6
08424 1D47                        66            .byte	$66
08425 1D48                        66            .byte	$66
08426 1D49                        3C            .byte	$3C
08427 1D4A                        00            .byte	0
08428                                           ! 1225  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08429 1D4B                        00            .byte	0
08430 1D4C                        00            .byte	0
08431 1D4D                        E0            .byte	$E0
08432 1D4E                        60            .byte	$60
08433 1D4F                        60            .byte	$60
08434 1D50                        66            .byte	$66
08435 1D51                        6C            .byte	$6C
08436 1D52                        78            .byte	$78
08437 1D53                        6C            .byte	$6C
08438 1D54                        66            .byte	$66
08439 1D55                        E6            .byte	$E6
08440 1D56                        00            .byte	0
08441 1D57                        00            .byte	0
08442 1D58                        00            .byte	0
08443                                           ! 1226  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08444 1D59                        00            .byte	0
08445 1D5A                        00            .byte	0
08446 1D5B                        38            .byte	$38
08447 1D5C                        18            .byte	$18
08448 1D5D                        18            .byte	$18
08449 1D5E                        18            .byte	$18
08450 1D5F                        18            .byte	$18
08451 1D60                        18            .byte	$18
08452 1D61                        18            .byte	$18
08453 1D62                        18            .byte	$18
08454 1D63                        3C            .byte	$3C
08455 1D64                        00            .byte	0
08456 1D65                        00            .byte	0
08457 1D66                        00            .byte	0
08458                                           ! 1227  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08459 1D67                        00            .byte	0
08460 1D68                        00            .byte	0
08461 1D69                        00            .byte	0
08462 1D6A                        00            .byte	0
08463 1D6B                        00            .byte	0
08464 1D6C                        EC            .byte	$EC
08465 1D6D                        FE            .byte	$FE
08466 1D6E                        D6            .byte	$D6
08467 1D6F                        D6            .byte	$D6
08468 1D70                        D6            .byte	$D6
08469 1D71                        C6            .byte	$C6
08470 1D72                        00            .byte	0
08471 1D73                        00            .byte	0
08472 1D74                        00            .byte	0
08473                                           ! 1228  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08474 1D75                        00            .byte	0
08475 1D76                        00            .byte	0
08476 1D77                        00            .byte	0
08477 1D78                        00            .byte	0
08478 1D79                        00            .byte	0
08479 1D7A                        DC            .byte	$DC
08480 1D7B                        66            .byte	$66
08481 1D7C                        66            .byte	$66
08482 1D7D                        66            .byte	$66
08483 1D7E                        66            .byte	$66
08484 1D7F                        66            .byte	$66
08485 1D80                        00            .byte	0
08486 1D81                        00            .byte	0
08487 1D82                        00            .byte	0
08488                                           ! 1229  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08489 1D83                        00            .byte	0
08490 1D84                        00            .byte	0
08491 1D85                        00            .byte	0
08492 1D86                        00            .byte	0
08493 1D87                        00            .byte	0
08494 1D88                        7C            .byte	$7C
08495 1D89                        C6            .byte	$C6
08496 1D8A                        C6            .byte	$C6
08497 1D8B                        C6            .byte	$C6
08498 1D8C                        C6            .byte	$C6
08499 1D8D                        7C            .byte	$7C
08500 1D8E                        00            .byte	0
08501 1D8F                        00            .byte	0
08502 1D90                        00            .byte	0
08503                                           ! 1230  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08504 1D91                        00            .byte	0
08505 1D92                        00            .byte	0
08506 1D93                        00            .byte	0
08507 1D94                        00            .byte	0
08508 1D95                        00            .byte	0
08509 1D96                        DC            .byte	$DC
08510 1D97                        66            .byte	$66
08511 1D98                        66            .byte	$66
08512 1D99                        66            .byte	$66
08513 1D9A                        7C            .byte	$7C
08514 1D9B                        60            .byte	$60
08515 1D9C                        60            .byte	$60
08516 1D9D                        F0            .byte	$F0
08517 1D9E                        00            .byte	0
08518                                           ! 1231  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08519 1D9F                        00            .byte	0
08520 1DA0                        00            .byte	0
08521 1DA1                        00            .byte	0
08522 1DA2                        00            .byte	0
08523 1DA3                        00            .byte	0
08524 1DA4                        76            .byte	$76
08525 1DA5                        CC            .byte	$CC
08526 1DA6                        CC            .byte	$CC
08527 1DA7                        CC            .byte	$CC
08528 1DA8                        7C            .byte	$7C
08529 1DA9                        0C            .byte	$C
08530 1DAA                        0C            .byte	$C
08531 1DAB                        1E            .byte	$1E
08532 1DAC                        00            .byte	0
08533                                           ! 1232  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08534 1DAD                        00            .byte	0
08535 1DAE                        00            .byte	0
08536 1DAF                        00            .byte	0
08537 1DB0                        00            .byte	0
08538 1DB1                        00            .byte	0
08539 1DB2                        DC            .byte	$DC
08540 1DB3                        76            .byte	$76
08541 1DB4                        66            .byte	$66
08542 1DB5                        60            .byte	$60
08543 1DB6                        60            .byte	$60
08544 1DB7                        F0            .byte	$F0
08545 1DB8                        00            .byte	0
08546 1DB9                        00            .byte	0
08547 1DBA                        00            .byte	0
08548                                           ! 1233  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08549 1DBB                        00            .byte	0
08550 1DBC                        00            .byte	0
08551 1DBD                        00            .byte	0
08552 1DBE                        00            .byte	0
08553 1DBF                        00            .byte	0
08554 1DC0                        7C            .byte	$7C
08555 1DC1                        C6            .byte	$C6
08556 1DC2                        70            .byte	$70
08557 1DC3                        1C            .byte	$1C
08558 1DC4                        C6            .byte	$C6
08559 1DC5                        7C            .byte	$7C
08560 1DC6                        00            .byte	0
08561 1DC7                        00            .byte	0
08562 1DC8                        00            .byte	0
08563                                           ! 1234  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08564 1DC9                        00            .byte	0
08565 1DCA                        00            .byte	0
08566 1DCB                        10            .byte	$10
08567 1DCC                        30            .byte	$30
08568 1DCD                        30            .byte	$30
08569 1DCE                        FC            .byte	$FC
08570 1DCF                        30            .byte	$30
08571 1DD0                        30            .byte	$30
08572 1DD1                        30            .byte	$30
08573 1DD2                        36            .byte	$36
08574 1DD3                        1C            .byte	$1C
08575 1DD4                        00            .byte	0
08576 1DD5                        00            .byte	0
08577 1DD6                        00            .byte	0
08578                                           ! 1235  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08579 1DD7                        00            .byte	0
08580 1DD8                        00            .byte	0
08581 1DD9                        00            .byte	0
08582 1DDA                        00            .byte	0
08583 1DDB                        00            .byte	0
08584 1DDC                        CC            .byte	$CC
08585 1DDD                        CC            .byte	$CC
08586 1DDE                        CC            .byte	$CC
08587 1DDF                        CC            .byte	$CC
08588 1DE0                        CC            .byte	$CC
08589 1DE1                        76            .byte	$76
08590 1DE2                        00            .byte	0
08591 1DE3                        00            .byte	0
08592 1DE4                        00            .byte	0
08593                                           ! 1236  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08594 1DE5                        00            .byte	0
08595 1DE6                        00            .byte	0
08596 1DE7                        00            .byte	0
08597 1DE8                        00            .byte	0
08598 1DE9                        00            .byte	0
08599 1DEA                        66            .byte	$66
08600 1DEB                        66            .byte	$66
08601 1DEC                        66            .byte	$66
08602 1DED                        66            .byte	$66
08603 1DEE                        3C            .byte	$3C
08604 1DEF                        18            .byte	$18
08605 1DF0                        00            .byte	0
08606 1DF1                        00            .byte	0
08607 1DF2                        00            .byte	0
08608                                           ! 1237  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08609 1DF3                        00            .byte	0
08610 1DF4                        00            .byte	0
08611 1DF5                        00            .byte	0
08612 1DF6                        00            .byte	0
08613 1DF7                        00            .byte	0
08614 1DF8                        C6            .byte	$C6
08615 1DF9                        C6            .byte	$C6
08616 1DFA                        D6            .byte	$D6
08617 1DFB                        D6            .byte	$D6
08618 1DFC                        FE            .byte	$FE
08619 1DFD                        6C            .byte	$6C
08620 1DFE                        00            .byte	0
08621 1DFF                        00            .byte	0
08622 1E00                        00            .byte	0
08623                                           ! 1238  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08624 1E01                        00            .byte	0
08625 1E02                        00            .byte	0
08626 1E03                        00            .byte	0
08627 1E04                        00            .byte	0
08628 1E05                        00            .byte	0
08629 1E06                        C6            .byte	$C6
08630 1E07                        6C            .byte	$6C
08631 1E08                        38            .byte	$38
08632 1E09                        38            .byte	$38
08633 1E0A                        6C            .byte	$6C
08634 1E0B                        C6            .byte	$C6
08635 1E0C                        00            .byte	0
08636 1E0D                        00            .byte	0
08637 1E0E                        00            .byte	0
08638                                           ! 1239  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08639 1E0F                        00            .byte	0
08640 1E10                        00            .byte	0
08641 1E11                        00            .byte	0
08642 1E12                        00            .byte	0
08643 1E13                        00            .byte	0
08644 1E14                        C6            .byte	$C6
08645 1E15                        C6            .byte	$C6
08646 1E16                        C6            .byte	$C6
08647 1E17                        C6            .byte	$C6
08648 1E18                        7E            .byte	$7E
08649 1E19                        06            .byte	6
08650 1E1A                        0C            .byte	$C
08651 1E1B                        F8            .byte	$F8
08652 1E1C                        00            .byte	0
08653                                           ! 1240  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08654 1E1D                        00            .byte	0
08655 1E1E                        00            .byte	0
08656 1E1F                        00            .byte	0
08657 1E20                        00            .byte	0
08658 1E21                        00            .byte	0
08659 1E22                        FE            .byte	$FE
08660 1E23                        CC            .byte	$CC
08661 1E24                        18            .byte	$18
08662 1E25                        30            .byte	$30
08663 1E26                        66            .byte	$66
08664 1E27                        FE            .byte	$FE
08665 1E28                        00            .byte	0
08666 1E29                        00            .byte	0
08667 1E2A                        00            .byte	0
08668                                           ! 1241  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08669 1E2B                        00            .byte	0
08670 1E2C                        00            .byte	0
08671 1E2D                        0E            .byte	$E
08672 1E2E                        18            .byte	$18
08673 1E2F                        18            .byte	$18
08674 1E30                        18            .byte	$18
08675 1E31                        70            .byte	$70
08676 1E32                        18            .byte	$18
08677 1E33                        18            .byte	$18
08678 1E34                        18            .byte	$18
08679 1E35                        0E            .byte	$E
08680 1E36                        00            .byte	0
08681 1E37                        00            .byte	0
08682 1E38                        00            .byte	0
08683                                           ! 1242  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08684 1E39                        00            .byte	0
08685 1E3A                        00            .byte	0
08686 1E3B                        18            .byte	$18
08687 1E3C                        18            .byte	$18
08688 1E3D                        18            .byte	$18
08689 1E3E                        18            .byte	$18
08690 1E3F                        00            .byte	0
08691 1E40                        18            .byte	$18
08692 1E41                        18            .byte	$18
08693 1E42                        18            .byte	$18
08694 1E43                        18            .byte	$18
08695 1E44                        00            .byte	0
08696 1E45                        00            .byte	0
08697 1E46                        00            .byte	0
08698                                           ! 1243  0x00, 0x00, 0x70, 0x18, 0x18,
08699 1E47                        00            .byte	0
08700 1E48                        00            .byte	0
08701 1E49                        70            .byte	$70
08702 1E4A                        18            .byte	$18
08703                                           ! 1243  0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08704 1E4B                        18            .byte	$18
08705 1E4C                        18            .byte	$18
08706 1E4D                        0E            .byte	$E
08707 1E4E                        18            .byte	$18
08708 1E4F                        18            .byte	$18
08709 1E50                        18            .byte	$18
08710 1E51                        70            .byte	$70
08711 1E52                        00            .byte	0
08712 1E53                        00            .byte	0
08713 1E54                        00            .byte	0
08714                                           ! 1244  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08715 1E55                        00            .byte	0
08716 1E56                        00            .byte	0
08717 1E57                        76            .byte	$76
08718 1E58                        DC            .byte	$DC
08719 1E59                        00            .byte	0
08720 1E5A                        00            .byte	0
08721 1E5B                        00            .byte	0
08722 1E5C                        00            .byte	0
08723 1E5D                        00            .byte	0
08724 1E5E                        00            .byte	0
08725 1E5F                        00            .byte	0
08726 1E60                        00            .byte	0
08727 1E61                        00            .byte	0
08728 1E62                        00            .byte	0
08729                                           ! 1245  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08730 1E63                        00            .byte	0
08731 1E64                        00            .byte	0
08732 1E65                        00            .byte	0
08733 1E66                        00            .byte	0
08734 1E67                        10            .byte	$10
08735 1E68                        38            .byte	$38
08736 1E69                        6C            .byte	$6C
08737 1E6A                        C6            .byte	$C6
08738 1E6B                        C6            .byte	$C6
08739 1E6C                        FE            .byte	$FE
08740 1E6D                        00            .byte	0
08741 1E6E                        00            .byte	0
08742 1E6F                        00            .byte	0
08743 1E70                        00            .byte	0
08744                                           ! 1246  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08745 1E71                        00            .byte	0
08746 1E72                        00            .byte	0
08747 1E73                        3C            .byte	$3C
08748 1E74                        66            .byte	$66
08749 1E75                        C2            .byte	$C2
08750 1E76                        C0            .byte	$C0
08751 1E77                        C0            .byte	$C0
08752 1E78                        C2            .byte	$C2
08753 1E79                        66            .byte	$66
08754 1E7A                        3C            .byte	$3C
08755 1E7B                        0C            .byte	$C
08756 1E7C                        06            .byte	6
08757 1E7D                        7C            .byte	$7C
08758 1E7E                        00            .byte	0
08759                                           ! 1247  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08760 1E7F                        00            .byte	0
08761 1E80                        00            .byte	0
08762 1E81                        CC            .byte	$CC
08763 1E82                        CC            .byte	$CC
08764 1E83                        00            .byte	0
08765 1E84                        CC            .byte	$CC
08766 1E85                        CC            .byte	$CC
08767 1E86                        CC            .byte	$CC
08768 1E87                        CC            .byte	$CC
08769 1E88                        CC            .byte	$CC
08770 1E89                        76            .byte	$76
08771 1E8A                        00            .byte	0
08772 1E8B                        00            .byte	0
08773 1E8C                        00            .byte	0
08774                                           ! 1248  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08775 1E8D                        00            .byte	0
08776 1E8E                        0C            .byte	$C
08777 1E8F                        18            .byte	$18
08778 1E90                        30            .byte	$30
08779 1E91                        00            .byte	0
08780 1E92                        7C            .byte	$7C
08781 1E93                        C6            .byte	$C6
08782 1E94                        FE            .byte	$FE
08783 1E95                        C0            .byte	$C0
08784 1E96                        C6            .byte	$C6
08785 1E97                        7C            .byte	$7C
08786 1E98                        00            .byte	0
08787 1E99                        00            .byte	0
08788 1E9A                        00            .byte	0
08789                                           ! 1249  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08790 1E9B                        00            .byte	0
08791 1E9C                        10            .byte	$10
08792 1E9D                        38            .byte	$38
08793 1E9E                        6C            .byte	$6C
08794 1E9F                        00            .byte	0
08795 1EA0                        78            .byte	$78
08796 1EA1                        0C            .byte	$C
08797 1EA2                        7C            .byte	$7C
08798 1EA3                        CC            .byte	$CC
08799 1EA4                        CC            .byte	$CC
08800 1EA5                        76            .byte	$76
08801 1EA6                        00            .byte	0
08802 1EA7                        00            .byte	0
08803 1EA8                        00            .byte	0
08804                                           ! 1250  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08805 1EA9                        00            .byte	0
08806 1EAA                        00            .byte	0
08807 1EAB                        CC            .byte	$CC
08808 1EAC                        CC            .byte	$CC
08809 1EAD                        00            .byte	0
08810 1EAE                        78            .byte	$78
08811 1EAF                        0C            .byte	$C
08812 1EB0                        7C            .byte	$7C
08813 1EB1                        CC            .byte	$CC
08814 1EB2                        CC            .byte	$CC
08815 1EB3                        76            .byte	$76
08816 1EB4                        00            .byte	0
08817 1EB5                        00            .byte	0
08818 1EB6                        00            .byte	0
08819                                           ! 1251  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08820 1EB7                        00            .byte	0
08821 1EB8                        60            .byte	$60
08822 1EB9                        30            .byte	$30
08823 1EBA                        18            .byte	$18
08824 1EBB                        00            .byte	0
08825 1EBC                        78            .byte	$78
08826 1EBD                        0C            .byte	$C
08827 1EBE                        7C            .byte	$7C
08828 1EBF                        CC            .byte	$CC
08829 1EC0                        CC            .byte	$CC
08830 1EC1                        76            .byte	$76
08831 1EC2                        00            .byte	0
08832 1EC3                        00            .byte	0
08833 1EC4                        00            .byte	0
08834                                           ! 1252  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08835 1EC5                        00            .byte	0
08836 1EC6                        38            .byte	$38
08837 1EC7                        6C            .byte	$6C
08838 1EC8                        38            .byte	$38
08839 1EC9                        00            .byte	0
08840 1ECA                        78            .byte	$78
08841 1ECB                        0C            .byte	$C
08842 1ECC                        7C            .byte	$7C
08843 1ECD                        CC            .byte	$CC
08844 1ECE                        CC            .byte	$CC
08845 1ECF                        76            .byte	$76
08846 1ED0                        00            .byte	0
08847 1ED1                        00            .byte	0
08848 1ED2                        00            .byte	0
08849                                           ! 1253  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08850 1ED3                        00            .byte	0
08851 1ED4                        00            .byte	0
08852 1ED5                        00            .byte	0
08853 1ED6                        00            .byte	0
08854 1ED7                        3C            .byte	$3C
08855 1ED8                        66            .byte	$66
08856 1ED9                        60            .byte	$60
08857 1EDA                        66            .byte	$66
08858 1EDB                        3C            .byte	$3C
08859 1EDC                        0C            .byte	$C
08860 1EDD                        06            .byte	6
08861 1EDE                        3C            .byte	$3C
08862 1EDF                        00            .byte	0
08863 1EE0                        00            .byte	0
08864                                           ! 1254  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08865 1EE1                        00            .byte	0
08866 1EE2                        10            .byte	$10
08867 1EE3                        38            .byte	$38
08868 1EE4                        6C            .byte	$6C
08869 1EE5                        00            .byte	0
08870 1EE6                        7C            .byte	$7C
08871 1EE7                        C6            .byte	$C6
08872 1EE8                        FE            .byte	$FE
08873 1EE9                        C0            .byte	$C0
08874 1EEA                        C6            .byte	$C6
08875 1EEB                        7C            .byte	$7C
08876 1EEC                        00            .byte	0
08877 1EED                        00            .byte	0
08878 1EEE                        00            .byte	0
08879                                           ! 1255  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08880 1EEF                        00            .byte	0
08881 1EF0                        00            .byte	0
08882 1EF1                        CC            .byte	$CC
08883 1EF2                        CC            .byte	$CC
08884 1EF3                        00            .byte	0
08885 1EF4                        7C            .byte	$7C
08886 1EF5                        C6            .byte	$C6
08887 1EF6                        FE            .byte	$FE
08888 1EF7                        C0            .byte	$C0
08889 1EF8                        C6            .byte	$C6
08890 1EF9                        7C            .byte	$7C
08891 1EFA                        00            .byte	0
08892 1EFB                        00            .byte	0
08893 1EFC                        00            .byte	0
08894                                           ! 1256  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08895 1EFD                        00            .byte	0
08896 1EFE                        60            .byte	$60
08897 1EFF                        30            .byte	$30
08898 1F00                        18            .byte	$18
08899 1F01                        00            .byte	0
08900 1F02                        7C            .byte	$7C
08901 1F03                        C6            .byte	$C6
08902 1F04                        FE            .byte	$FE
08903 1F05                        C0            .byte	$C0
08904 1F06                        C6            .byte	$C6
08905 1F07                        7C            .byte	$7C
08906 1F08                        00            .byte	0
08907 1F09                        00            .byte	0
08908 1F0A                        00            .byte	0
08909                                           ! 1257  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08910 1F0B                        00            .byte	0
08911 1F0C                        00            .byte	0
08912 1F0D                        66            .byte	$66
08913 1F0E                        66            .byte	$66
08914 1F0F                        00            .byte	0
08915 1F10                        38            .byte	$38
08916 1F11                        18            .byte	$18
08917 1F12                        18            .byte	$18
08918 1F13                        18            .byte	$18
08919 1F14                        18            .byte	$18
08920 1F15                        3C            .byte	$3C
08921 1F16                        00            .byte	0
08922 1F17                        00            .byte	0
08923 1F18                        00            .byte	0
08924                                           ! 1258  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08925 1F19                        00            .byte	0
08926 1F1A                        18            .byte	$18
08927 1F1B                        3C            .byte	$3C
08928 1F1C                        66            .byte	$66
08929 1F1D                        00            .byte	0
08930 1F1E                        38            .byte	$38
08931 1F1F                        18            .byte	$18
08932 1F20                        18            .byte	$18
08933 1F21                        18            .byte	$18
08934 1F22                        18            .byte	$18
08935 1F23                        3C            .byte	$3C
08936 1F24                        00            .byte	0
08937 1F25                        00            .byte	0
08938 1F26                        00            .byte	0
08939                                           ! 1259  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08940 1F27                        00            .byte	0
08941 1F28                        60            .byte	$60
08942 1F29                        30            .byte	$30
08943 1F2A                        18            .byte	$18
08944 1F2B                        00            .byte	0
08945 1F2C                        38            .byte	$38
08946 1F2D                        18            .byte	$18
08947 1F2E                        18            .byte	$18
08948 1F2F                        18            .byte	$18
08949 1F30                        18            .byte	$18
08950 1F31                        3C            .byte	$3C
08951 1F32                        00            .byte	0
08952 1F33                        00            .byte	0
08953 1F34                        00            .byte	0
08954                                           ! 1260  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08955 1F35                        00            .byte	0
08956 1F36                        C6            .byte	$C6
08957 1F37                        C6            .byte	$C6
08958 1F38                        10            .byte	$10
08959 1F39                        38            .byte	$38
08960 1F3A                        6C            .byte	$6C
08961 1F3B                        C6            .byte	$C6
08962 1F3C                        C6            .byte	$C6
08963 1F3D                        FE            .byte	$FE
08964 1F3E                        C6            .byte	$C6
08965 1F3F                        C6            .byte	$C6
08966 1F40                        00            .byte	0
08967 1F41                        00            .byte	0
08968 1F42                        00            .byte	0
08969                                           ! 1261  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08970 1F43                        38            .byte	$38
08971 1F44                        6C            .byte	$6C
08972 1F45                        38            .byte	$38
08973 1F46                        00            .byte	0
08974 1F47                        38            .byte	$38
08975 1F48                        6C            .byte	$6C
08976 1F49                        C6            .byte	$C6
08977 1F4A                        C6            .byte	$C6
08978 1F4B                        FE            .byte	$FE
08979 1F4C                        C6            .byte	$C6
08980 1F4D                        C6            .byte	$C6
08981 1F4E                        00            .byte	0
08982 1F4F                        00            .byte	0
08983 1F50                        00            .byte	0
08984                                           ! 1262  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08985 1F51                        18            .byte	$18
08986 1F52                        30            .byte	$30
08987 1F53                        60            .byte	$60
08988 1F54                        00            .byte	0
08989 1F55                        FE            .byte	$FE
08990 1F56                        66            .byte	$66
08991 1F57                        60            .byte	$60
08992 1F58                        7C            .byte	$7C
08993 1F59                        60            .byte	$60
08994 1F5A                        66            .byte	$66
08995 1F5B                        FE            .byte	$FE
08996 1F5C                        00            .byte	0
08997 1F5D                        00            .byte	0
08998 1F5E                        00            .byte	0
08999                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09000 1F5F                        00            .byte	0
09001 1F60                        00            .byte	0
09002 1F61                        00            .byte	0
09003 1F62                        00            .byte	0
09004 1F63                        CC            .byte	$CC
09005 1F64                        76            .byte	$76
09006 1F65                        36            .byte	$36
09007 1F66                        7E            .byte	$7E
09008 1F67                        D8            .byte	$D8
09009 1F68                        D8            .byte	$D8
09010 1F69                        6E            .byte	$6E
09011 1F6A                        00            .byte	0
09012 1F6B                        00            .byte	0
09013 1F6C                        00            .byte	0
09014                                           ! 1264  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09015 1F6D                        00            .byte	0
09016 1F6E                        00            .byte	0
09017 1F6F                        3E            .byte	$3E
09018 1F70                        6C            .byte	$6C
09019 1F71                        CC            .byte	$CC
09020 1F72                        CC            .byte	$CC
09021 1F73                        FE            .byte	$FE
09022 1F74                        CC            .byte	$CC
09023 1F75                        CC            .byte	$CC
09024 1F76                        CC            .byte	$CC
09025 1F77                        CE            .byte	$CE
09026 1F78                        00            .byte	0
09027 1F79                        00            .byte	0
09028 1F7A                        00            .byte	0
09029                                           ! 1265  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09030 1F7B                        00            .byte	0
09031 1F7C                        10            .byte	$10
09032 1F7D                        38            .byte	$38
09033 1F7E                        6C            .byte	$6C
09034 1F7F                        00            .byte	0
09035 1F80                        7C            .byte	$7C
09036 1F81                        C6            .byte	$C6
09037 1F82                        C6            .byte	$C6
09038 1F83                        C6            .byte	$C6
09039 1F84                        C6            .byte	$C6
09040 1F85                        7C            .byte	$7C
09041 1F86                        00            .byte	0
09042 1F87                        00            .byte	0
09043 1F88                        00            .byte	0
09044                                           ! 1266  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09045 1F89                        00            .byte	0
09046 1F8A                        00            .byte	0
09047 1F8B                        C6            .byte	$C6
09048 1F8C                        C6            .byte	$C6
09049 1F8D                        00            .byte	0
09050 1F8E                        7C            .byte	$7C
09051 1F8F                        C6            .byte	$C6
09052 1F90                        C6            .byte	$C6
09053 1F91                        C6            .byte	$C6
09054 1F92                        C6            .byte	$C6
09055 1F93                        7C            .byte	$7C
09056 1F94                        00            .byte	0
09057 1F95                        00            .byte	0
09058 1F96                        00            .byte	0
09059                                           ! 1267  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0
09060 1F97                        00            .byte	0
09061 1F98                        60            .byte	$60
09062 1F99                        30            .byte	$30
09063 1F9A                        18            .byte	$18
09064 1F9B                        00            .byte	0
09065 1F9C                        7C            .byte	$7C
09066                                           ! 1267 xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09067 1F9D                        C6            .byte	$C6
09068 1F9E                        C6            .byte	$C6
09069 1F9F                        C6            .byte	$C6
09070 1FA0                        C6            .byte	$C6
09071 1FA1                        7C            .byte	$7C
09072 1FA2                        00            .byte	0
09073 1FA3                        00            .byte	0
09074 1FA4                        00            .byte	0
09075                                           ! 1268  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09076 1FA5                        00            .byte	0
09077 1FA6                        30            .byte	$30
09078 1FA7                        78            .byte	$78
09079 1FA8                        CC            .byte	$CC
09080 1FA9                        00            .byte	0
09081 1FAA                        CC            .byte	$CC
09082 1FAB                        CC            .byte	$CC
09083 1FAC                        CC            .byte	$CC
09084 1FAD                        CC            .byte	$CC
09085 1FAE                        CC            .byte	$CC
09086 1FAF                        76            .byte	$76
09087 1FB0                        00            .byte	0
09088 1FB1                        00            .byte	0
09089 1FB2                        00            .byte	0
09090                                           ! 1269  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09091 1FB3                        00            .byte	0
09092 1FB4                        60            .byte	$60
09093 1FB5                        30            .byte	$30
09094 1FB6                        18            .byte	$18
09095 1FB7                        00            .byte	0
09096 1FB8                        CC            .byte	$CC
09097 1FB9                        CC            .byte	$CC
09098 1FBA                        CC            .byte	$CC
09099 1FBB                        CC            .byte	$CC
09100 1FBC                        CC            .byte	$CC
09101 1FBD                        76            .byte	$76
09102 1FBE                        00            .byte	0
09103 1FBF                        00            .byte	0
09104 1FC0                        00            .byte	0
09105                                           ! 1270  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09106 1FC1                        00            .byte	0
09107 1FC2                        00            .byte	0
09108 1FC3                        C6            .byte	$C6
09109 1FC4                        C6            .byte	$C6
09110 1FC5                        00            .byte	0
09111 1FC6                        C6            .byte	$C6
09112 1FC7                        C6            .byte	$C6
09113 1FC8                        C6            .byte	$C6
09114 1FC9                        C6            .byte	$C6
09115 1FCA                        7E            .byte	$7E
09116 1FCB                        06            .byte	6
09117 1FCC                        0C            .byte	$C
09118 1FCD                        78            .byte	$78
09119 1FCE                        00            .byte	0
09120                                           ! 1271  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09121 1FCF                        00            .byte	0
09122 1FD0                        C6            .byte	$C6
09123 1FD1                        C6            .byte	$C6
09124 1FD2                        38            .byte	$38
09125 1FD3                        6C            .byte	$6C
09126 1FD4                        C6            .byte	$C6
09127 1FD5                        C6            .byte	$C6
09128 1FD6                        C6            .byte	$C6
09129 1FD7                        C6            .byte	$C6
09130 1FD8                        6C            .byte	$6C
09131 1FD9                        38            .byte	$38
09132 1FDA                        00            .byte	0
09133 1FDB                        00            .byte	0
09134 1FDC                        00            .byte	0
09135                                           ! 1272  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09136 1FDD                        00            .byte	0
09137 1FDE                        C6            .byte	$C6
09138 1FDF                        C6            .byte	$C6
09139 1FE0                        00            .byte	0
09140 1FE1                        C6            .byte	$C6
09141 1FE2                        C6            .byte	$C6
09142 1FE3                        C6            .byte	$C6
09143 1FE4                        C6            .byte	$C6
09144 1FE5                        C6            .byte	$C6
09145 1FE6                        C6            .byte	$C6
09146 1FE7                        7C            .byte	$7C
09147 1FE8                        00            .byte	0
09148 1FE9                        00            .byte	0
09149 1FEA                        00            .byte	0
09150                                           ! 1273  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09151 1FEB                        00            .byte	0
09152 1FEC                        18            .byte	$18
09153 1FED                        18            .byte	$18
09154 1FEE                        3C            .byte	$3C
09155 1FEF                        66            .byte	$66
09156 1FF0                        60            .byte	$60
09157 1FF1                        60            .byte	$60
09158 1FF2                        66            .byte	$66
09159 1FF3                        3C            .byte	$3C
09160 1FF4                        18            .byte	$18
09161 1FF5                        18            .byte	$18
09162 1FF6                        00            .byte	0
09163 1FF7                        00            .byte	0
09164 1FF8                        00            .byte	0
09165                                           ! 1274  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09166 1FF9                        00            .byte	0
09167 1FFA                        38            .byte	$38
09168 1FFB                        6C            .byte	$6C
09169 1FFC                        64            .byte	$64
09170 1FFD                        60            .byte	$60
09171 1FFE                        F0            .byte	$F0
09172 1FFF                        60            .byte	$60
09173 2000                        60            .byte	$60
09174 2001                        60            .byte	$60
09175 2002                        E6            .byte	$E6
09176 2003                        FC            .byte	$FC
09177 2004                        00            .byte	0
09178 2005                        00            .byte	0
09179 2006                        00            .byte	0
09180                                           ! 1275  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09181 2007                        00            .byte	0
09182 2008                        00            .byte	0
09183 2009                        66            .byte	$66
09184 200A                        66            .byte	$66
09185 200B                        3C            .byte	$3C
09186 200C                        18            .byte	$18
09187 200D                        7E            .byte	$7E
09188 200E                        18            .byte	$18
09189 200F                        7E            .byte	$7E
09190 2010                        18            .byte	$18
09191 2011                        18            .byte	$18
09192 2012                        00            .byte	0
09193 2013                        00            .byte	0
09194 2014                        00            .byte	0
09195                                           ! 1276  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09196 2015                        00            .byte	0
09197 2016                        F8            .byte	$F8
09198 2017                        CC            .byte	$CC
09199 2018                        CC            .byte	$CC
09200 2019                        F8            .byte	$F8
09201 201A                        C4            .byte	$C4
09202 201B                        CC            .byte	$CC
09203 201C                        DE            .byte	$DE
09204 201D                        CC            .byte	$CC
09205 201E                        CC            .byte	$CC
09206 201F                        C6            .byte	$C6
09207 2020                        00            .byte	0
09208 2021                        00            .byte	0
09209 2022                        00            .byte	0
09210                                           ! 1277  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09211 2023                        00            .byte	0
09212 2024                        0E            .byte	$E
09213 2025                        1B            .byte	$1B
09214 2026                        18            .byte	$18
09215 2027                        18            .byte	$18
09216 2028                        18            .byte	$18
09217 2029                        7E            .byte	$7E
09218 202A                        18            .byte	$18
09219 202B                        18            .byte	$18
09220 202C                        18            .byte	$18
09221 202D                        18            .byte	$18
09222 202E                        D8            .byte	$D8
09223 202F                        70            .byte	$70
09224 2030                        00            .byte	0
09225                                           ! 1278  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09226 2031                        00            .byte	0
09227 2032                        18            .byte	$18
09228 2033                        30            .byte	$30
09229 2034                        60            .byte	$60
09230 2035                        00            .byte	0
09231 2036                        78            .byte	$78
09232 2037                        0C            .byte	$C
09233 2038                        7C            .byte	$7C
09234 2039                        CC            .byte	$CC
09235 203A                        CC            .byte	$CC
09236 203B                        76            .byte	$76
09237 203C                        00            .byte	0
09238 203D                        00            .byte	0
09239 203E                        00            .byte	0
09240                                           ! 1279  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09241 203F                        00            .byte	0
09242 2040                        0C            .byte	$C
09243 2041                        18            .byte	$18
09244 2042                        30            .byte	$30
09245 2043                        00            .byte	0
09246 2044                        38            .byte	$38
09247 2045                        18            .byte	$18
09248 2046                        18            .byte	$18
09249 2047                        18            .byte	$18
09250 2048                        18            .byte	$18
09251 2049                        3C            .byte	$3C
09252 204A                        00            .byte	0
09253 204B                        00            .byte	0
09254 204C                        00            .byte	0
09255                                           ! 1280  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09256 204D                        00            .byte	0
09257 204E                        18            .byte	$18
09258 204F                        30            .byte	$30
09259 2050                        60            .byte	$60
09260 2051                        00            .byte	0
09261 2052                        7C            .byte	$7C
09262 2053                        C6            .byte	$C6
09263 2054                        C6            .byte	$C6
09264 2055                        C6            .byte	$C6
09265 2056                        C6            .byte	$C6
09266 2057                        7C            .byte	$7C
09267 2058                        00            .byte	0
09268 2059                        00            .byte	0
09269 205A                        00            .byte	0
09270                                           ! 1281  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09271 205B                        00            .byte	0
09272 205C                        18            .byte	$18
09273 205D                        30            .byte	$30
09274 205E                        60            .byte	$60
09275 205F                        00            .byte	0
09276 2060                        CC            .byte	$CC
09277 2061                        CC            .byte	$CC
09278 2062                        CC            .byte	$CC
09279 2063                        CC            .byte	$CC
09280 2064                        CC            .byte	$CC
09281 2065                        76            .byte	$76
09282 2066                        00            .byte	0
09283 2067                        00            .byte	0
09284 2068                        00            .byte	0
09285                                           ! 1282  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09286 2069                        00            .byte	0
09287 206A                        00            .byte	0
09288 206B                        76            .byte	$76
09289 206C                        DC            .byte	$DC
09290 206D                        00            .byte	0
09291 206E                        DC            .byte	$DC
09292 206F                        66            .byte	$66
09293 2070                        66            .byte	$66
09294 2071                        66            .byte	$66
09295 2072                        66            .byte	$66
09296 2073                        66            .byte	$66
09297 2074                        00            .byte	0
09298 2075                        00            .byte	0
09299 2076                        00            .byte	0
09300                                           ! 1283  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09301 2077                        76            .byte	$76
09302 2078                        DC            .byte	$DC
09303 2079                        00            .byte	0
09304 207A                        C6            .byte	$C6
09305 207B                        E6            .byte	$E6
09306 207C                        F6            .byte	$F6
09307 207D                        FE            .byte	$FE
09308 207E                        DE            .byte	$DE
09309 207F                        CE            .byte	$CE
09310 2080                        C6            .byte	$C6
09311 2081                        C6            .byte	$C6
09312 2082                        00            .byte	0
09313 2083                        00            .byte	0
09314 2084                        00            .byte	0
09315                                           ! 1284  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09316 2085                        00            .byte	0
09317 2086                        3C            .byte	$3C
09318 2087                        6C            .byte	$6C
09319 2088                        6C            .byte	$6C
09320 2089                        3E            .byte	$3E
09321 208A                        00            .byte	0
09322 208B                        7E            .byte	$7E
09323 208C                        00            .byte	0
09324 208D                        00            .byte	0
09325 208E                        00            .byte	0
09326 208F                        00            .byte	0
09327 2090                        00            .byte	0
09328 2091                        00            .byte	0
09329 2092                        00            .byte	0
09330                                           ! 1285  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09331 2093                        00            .byte	0
09332 2094                        38            .byte	$38
09333 2095                        6C            .byte	$6C
09334 2096                        6C            .byte	$6C
09335 2097                        38            .byte	$38
09336 2098                        00            .byte	0
09337 2099                        7C            .byte	$7C
09338 209A                        00            .byte	0
09339 209B                        00            .byte	0
09340 209C                        00            .byte	0
09341 209D                        00            .byte	0
09342 209E                        00            .byte	0
09343 209F                        00            .byte	0
09344 20A0                        00            .byte	0
09345                                           ! 1286  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09346 20A1                        00            .byte	0
09347 20A2                        00            .byte	0
09348 20A3                        30            .byte	$30
09349 20A4                        30            .byte	$30
09350 20A5                        00            .byte	0
09351 20A6                        30            .byte	$30
09352 20A7                        30            .byte	$30
09353 20A8                        60            .byte	$60
09354 20A9                        C6            .byte	$C6
09355 20AA                        C6            .byte	$C6
09356 20AB                        7C            .byte	$7C
09357 20AC                        00            .byte	0
09358 20AD                        00            .byte	0
09359 20AE                        00            .byte	0
09360                                           ! 1287  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09361 20AF                        00            .byte	0
09362 20B0                        00            .byte	0
09363 20B1                        00            .byte	0
09364 20B2                        00            .byte	0
09365 20B3                        00            .byte	0
09366 20B4                        00            .byte	0
09367 20B5                        FE            .byte	$FE
09368 20B6                        C0            .byte	$C0
09369 20B7                        C0            .byte	$C0
09370 20B8                        C0            .byte	$C0
09371 20B9                        00            .byte	0
09372 20BA                        00            .byte	0
09373 20BB                        00            .byte	0
09374 20BC                        00            .byte	0
09375                                           ! 1288  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09376 20BD                        00            .byte	0
09377 20BE                        00            .byte	0
09378 20BF                        00            .byte	0
09379 20C0                        00            .byte	0
09380 20C1                        00            .byte	0
09381 20C2                        00            .byte	0
09382 20C3                        FE            .byte	$FE
09383 20C4                        06            .byte	6
09384 20C5                        06            .byte	6
09385 20C6                        06            .byte	6
09386 20C7                        00            .byte	0
09387 20C8                        00            .byte	0
09388 20C9                        00            .byte	0
09389 20CA                        00            .byte	0
09390                                           ! 1289  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09391 20CB                        00            .byte	0
09392 20CC                        C0            .byte	$C0
09393 20CD                        C0            .byte	$C0
09394 20CE                        C6            .byte	$C6
09395 20CF                        CC            .byte	$CC
09396 20D0                        D8            .byte	$D8
09397 20D1                        30            .byte	$30
09398 20D2                        60            .byte	$60
09399 20D3                        DC            .byte	$DC
09400 20D4                        86            .byte	$86
09401 20D5                        0C            .byte	$C
09402 20D6                        18            .byte	$18
09403 20D7                        3E            .byte	$3E
09404 20D8                        00            .byte	0
09405                                           ! 1290  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09406 20D9                        00            .byte	0
09407 20DA                        C0            .byte	$C0
09408 20DB                        C0            .byte	$C0
09409 20DC                        C6            .byte	$C6
09410 20DD                        CC            .byte	$CC
09411 20DE                        D8            .byte	$D8
09412 20DF                        30            .byte	$30
09413 20E0                        66            .byte	$66
09414 20E1                        CE            .byte	$CE
09415 20E2                        9E            .byte	$9E
09416 20E3                        3E            .byte	$3E
09417 20E4                        06            .byte	6
09418 20E5                        06            .byte	6
09419 20E6                        00            .byte	0
09420                                           ! 1291  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3
09421 20E7                        00            .byte	0
09422 20E8                        00            .byte	0
09423 20E9                        18            .byte	$18
09424 20EA                        18            .byte	$18
09425 20EB                        00            .byte	0
09426 20EC                        18            .byte	$18
09427 20ED                        18            .byte	$18
09428                                           ! 1291 c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09429 20EE                        3C            .byte	$3C
09430 20EF                        3C            .byte	$3C
09431 20F0                        3C            .byte	$3C
09432 20F1                        18            .byte	$18
09433 20F2                        00            .byte	0
09434 20F3                        00            .byte	0
09435 20F4                        00            .byte	0
09436                                           ! 1292  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09437 20F5                        00            .byte	0
09438 20F6                        00            .byte	0
09439 20F7                        00            .byte	0
09440 20F8                        00            .byte	0
09441 20F9                        36            .byte	$36
09442 20FA                        6C            .byte	$6C
09443 20FB                        D8            .byte	$D8
09444 20FC                        6C            .byte	$6C
09445 20FD                        36            .byte	$36
09446 20FE                        00            .byte	0
09447 20FF                        00            .byte	0
09448 2100                        00            .byte	0
09449 2101                        00            .byte	0
09450 2102                        00            .byte	0
09451                                           ! 1293  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09452 2103                        00            .byte	0
09453 2104                        00            .byte	0
09454 2105                        00            .byte	0
09455 2106                        00            .byte	0
09456 2107                        D8            .byte	$D8
09457 2108                        6C            .byte	$6C
09458 2109                        36            .byte	$36
09459 210A                        6C            .byte	$6C
09460 210B                        D8            .byte	$D8
09461 210C                        00            .byte	0
09462 210D                        00            .byte	0
09463 210E                        00            .byte	0
09464 210F                        00            .byte	0
09465 2110                        00            .byte	0
09466                                           ! 1294  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09467 2111                        11            .byte	$11
09468 2112                        44            .byte	$44
09469 2113                        11            .byte	$11
09470 2114                        44            .byte	$44
09471 2115                        11            .byte	$11
09472 2116                        44            .byte	$44
09473 2117                        11            .byte	$11
09474 2118                        44            .byte	$44
09475 2119                        11            .byte	$11
09476 211A                        44            .byte	$44
09477 211B                        11            .byte	$11
09478 211C                        44            .byte	$44
09479 211D                        11            .byte	$11
09480 211E                        44            .byte	$44
09481                                           ! 1295  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09482 211F                        55            .byte	$55
09483 2120                        AA            .byte	$AA
09484 2121                        55            .byte	$55
09485 2122                        AA            .byte	$AA
09486 2123                        55            .byte	$55
09487 2124                        AA            .byte	$AA
09488 2125                        55            .byte	$55
09489 2126                        AA            .byte	$AA
09490 2127                        55            .byte	$55
09491 2128                        AA            .byte	$AA
09492 2129                        55            .byte	$55
09493 212A                        AA            .byte	$AA
09494 212B                        55            .byte	$55
09495 212C                        AA            .byte	$AA
09496                                           ! 1296  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09497 212D                        DD            .byte	$DD
09498 212E                        77            .byte	$77
09499 212F                        DD            .byte	$DD
09500 2130                        77            .byte	$77
09501 2131                        DD            .byte	$DD
09502 2132                        77            .byte	$77
09503 2133                        DD            .byte	$DD
09504 2134                        77            .byte	$77
09505 2135                        DD            .byte	$DD
09506 2136                        77            .byte	$77
09507 2137                        DD            .byte	$DD
09508 2138                        77            .byte	$77
09509 2139                        DD            .byte	$DD
09510 213A                        77            .byte	$77
09511                                           ! 1297  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09512 213B                        18            .byte	$18
09513 213C                        18            .byte	$18
09514 213D                        18            .byte	$18
09515 213E                        18            .byte	$18
09516 213F                        18            .byte	$18
09517 2140                        18            .byte	$18
09518 2141                        18            .byte	$18
09519 2142                        18            .byte	$18
09520 2143                        18            .byte	$18
09521 2144                        18            .byte	$18
09522 2145                        18            .byte	$18
09523 2146                        18            .byte	$18
09524 2147                        18            .byte	$18
09525 2148                        18            .byte	$18
09526                                           ! 1298  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09527 2149                        18            .byte	$18
09528 214A                        18            .byte	$18
09529 214B                        18            .byte	$18
09530 214C                        18            .byte	$18
09531 214D                        18            .byte	$18
09532 214E                        18            .byte	$18
09533 214F                        18            .byte	$18
09534 2150                        F8            .byte	$F8
09535 2151                        18            .byte	$18
09536 2152                        18            .byte	$18
09537 2153                        18            .byte	$18
09538 2154                        18            .byte	$18
09539 2155                        18            .byte	$18
09540 2156                        18            .byte	$18
09541                                           ! 1299  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09542 2157                        18            .byte	$18
09543 2158                        18            .byte	$18
09544 2159                        18            .byte	$18
09545 215A                        18            .byte	$18
09546 215B                        18            .byte	$18
09547 215C                        F8            .byte	$F8
09548 215D                        18            .byte	$18
09549 215E                        F8            .byte	$F8
09550 215F                        18            .byte	$18
09551 2160                        18            .byte	$18
09552 2161                        18            .byte	$18
09553 2162                        18            .byte	$18
09554 2163                        18            .byte	$18
09555 2164                        18            .byte	$18
09556                                           ! 1300  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09557 2165                        36            .byte	$36
09558 2166                        36            .byte	$36
09559 2167                        36            .byte	$36
09560 2168                        36            .byte	$36
09561 2169                        36            .byte	$36
09562 216A                        36            .byte	$36
09563 216B                        36            .byte	$36
09564 216C                        F6            .byte	$F6
09565 216D                        36            .byte	$36
09566 216E                        36            .byte	$36
09567 216F                        36            .byte	$36
09568 2170                        36            .byte	$36
09569 2171                        36            .byte	$36
09570 2172                        36            .byte	$36
09571                                           ! 1301  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09572 2173                        00            .byte	0
09573 2174                        00            .byte	0
09574 2175                        00            .byte	0
09575 2176                        00            .byte	0
09576 2177                        00            .byte	0
09577 2178                        00            .byte	0
09578 2179                        00            .byte	0
09579 217A                        FE            .byte	$FE
09580 217B                        36            .byte	$36
09581 217C                        36            .byte	$36
09582 217D                        36            .byte	$36
09583 217E                        36            .byte	$36
09584 217F                        36            .byte	$36
09585 2180                        36            .byte	$36
09586                                           ! 1302  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09587 2181                        00            .byte	0
09588 2182                        00            .byte	0
09589 2183                        00            .byte	0
09590 2184                        00            .byte	0
09591 2185                        00            .byte	0
09592 2186                        F8            .byte	$F8
09593 2187                        18            .byte	$18
09594 2188                        F8            .byte	$F8
09595 2189                        18            .byte	$18
09596 218A                        18            .byte	$18
09597 218B                        18            .byte	$18
09598 218C                        18            .byte	$18
09599 218D                        18            .byte	$18
09600 218E                        18            .byte	$18
09601                                           ! 1303  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09602 218F                        36            .byte	$36
09603 2190                        36            .byte	$36
09604 2191                        36            .byte	$36
09605 2192                        36            .byte	$36
09606 2193                        36            .byte	$36
09607 2194                        F6            .byte	$F6
09608 2195                        06            .byte	6
09609 2196                        F6            .byte	$F6
09610 2197                        36            .byte	$36
09611 2198                        36            .byte	$36
09612 2199                        36            .byte	$36
09613 219A                        36            .byte	$36
09614 219B                        36            .byte	$36
09615 219C                        36            .byte	$36
09616                                           ! 1304  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09617 219D                        36            .byte	$36
09618 219E                        36            .byte	$36
09619 219F                        36            .byte	$36
09620 21A0                        36            .byte	$36
09621 21A1                        36            .byte	$36
09622 21A2                        36            .byte	$36
09623 21A3                        36            .byte	$36
09624 21A4                        36            .byte	$36
09625 21A5                        36            .byte	$36
09626 21A6                        36            .byte	$36
09627 21A7                        36            .byte	$36
09628 21A8                        36            .byte	$36
09629 21A9                        36            .byte	$36
09630 21AA                        36            .byte	$36
09631                                           ! 1305  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09632 21AB                        00            .byte	0
09633 21AC                        00            .byte	0
09634 21AD                        00            .byte	0
09635 21AE                        00            .byte	0
09636 21AF                        00            .byte	0
09637 21B0                        FE            .byte	$FE
09638 21B1                        06            .byte	6
09639 21B2                        F6            .byte	$F6
09640 21B3                        36            .byte	$36
09641 21B4                        36            .byte	$36
09642 21B5                        36            .byte	$36
09643 21B6                        36            .byte	$36
09644 21B7                        36            .byte	$36
09645 21B8                        36            .byte	$36
09646                                           ! 1306  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09647 21B9                        36            .byte	$36
09648 21BA                        36            .byte	$36
09649 21BB                        36            .byte	$36
09650 21BC                        36            .byte	$36
09651 21BD                        36            .byte	$36
09652 21BE                        F6            .byte	$F6
09653 21BF                        06            .byte	6
09654 21C0                        FE            .byte	$FE
09655 21C1                        00            .byte	0
09656 21C2                        00            .byte	0
09657 21C3                        00            .byte	0
09658 21C4                        00            .byte	0
09659 21C5                        00            .byte	0
09660 21C6                        00            .byte	0
09661                                           ! 1307  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09662 21C7                        36            .byte	$36
09663 21C8                        36            .byte	$36
09664 21C9                        36            .byte	$36
09665 21CA                        36            .byte	$36
09666 21CB                        36            .byte	$36
09667 21CC                        36            .byte	$36
09668 21CD                        36            .byte	$36
09669 21CE                        FE            .byte	$FE
09670 21CF                        00            .byte	0
09671 21D0                        00            .byte	0
09672 21D1                        00            .byte	0
09673 21D2                        00            .byte	0
09674 21D3                        00            .byte	0
09675 21D4                        00            .byte	0
09676                                           ! 1308  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09677 21D5                        18            .byte	$18
09678 21D6                        18            .byte	$18
09679 21D7                        18            .byte	$18
09680 21D8                        18            .byte	$18
09681 21D9                        18            .byte	$18
09682 21DA                        F8            .byte	$F8
09683 21DB                        18            .byte	$18
09684 21DC                        F8            .byte	$F8
09685 21DD                        00            .byte	0
09686 21DE                        00            .byte	0
09687 21DF                        00            .byte	0
09688 21E0                        00            .byte	0
09689 21E1                        00            .byte	0
09690 21E2                        00            .byte	0
09691                                           ! 1309  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09692 21E3                        00            .byte	0
09693 21E4                        00            .byte	0
09694 21E5                        00            .byte	0
09695 21E6                        00            .byte	0
09696 21E7                        00            .byte	0
09697 21E8                        00            .byte	0
09698 21E9                        00            .byte	0
09699 21EA                        F8            .byte	$F8
09700 21EB                        18            .byte	$18
09701 21EC                        18            .byte	$18
09702 21ED                        18            .byte	$18
09703 21EE                        18            .byte	$18
09704 21EF                        18            .byte	$18
09705 21F0                        18            .byte	$18
09706                                           ! 1310  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09707 21F1                        18            .byte	$18
09708 21F2                        18            .byte	$18
09709 21F3                        18            .byte	$18
09710 21F4                        18            .byte	$18
09711 21F5                        18            .byte	$18
09712 21F6                        18            .byte	$18
09713 21F7                        18            .byte	$18
09714 21F8                        1F            .byte	$1F
09715 21F9                        00            .byte	0
09716 21FA                        00            .byte	0
09717 21FB                        00            .byte	0
09718 21FC                        00            .byte	0
09719 21FD                        00            .byte	0
09720 21FE                        00            .byte	0
09721                                           ! 1311  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09722 21FF                        18            .byte	$18
09723 2200                        18            .byte	$18
09724 2201                        18            .byte	$18
09725 2202                        18            .byte	$18
09726 2203                        18            .byte	$18
09727 2204                        18            .byte	$18
09728 2205                        18            .byte	$18
09729 2206                        FF            .byte	$FF
09730 2207                        00            .byte	0
09731 2208                        00            .byte	0
09732 2209                        00            .byte	0
09733 220A                        00            .byte	0
09734 220B                        00            .byte	0
09735 220C                        00            .byte	0
09736                                           ! 1312  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09737 220D                        00            .byte	0
09738 220E                        00            .byte	0
09739 220F                        00            .byte	0
09740 2210                        00            .byte	0
09741 2211                        00            .byte	0
09742 2212                        00            .byte	0
09743 2213                        00            .byte	0
09744 2214                        FF            .byte	$FF
09745 2215                        18            .byte	$18
09746 2216                        18            .byte	$18
09747 2217                        18            .byte	$18
09748 2218                        18            .byte	$18
09749 2219                        18            .byte	$18
09750 221A                        18            .byte	$18
09751                                           ! 1313  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09752 221B                        18            .byte	$18
09753 221C                        18            .byte	$18
09754 221D                        18            .byte	$18
09755 221E                        18            .byte	$18
09756 221F                        18            .byte	$18
09757 2220                        18            .byte	$18
09758 2221                        18            .byte	$18
09759 2222                        1F            .byte	$1F
09760 2223                        18            .byte	$18
09761 2224                        18            .byte	$18
09762 2225                        18            .byte	$18
09763 2226                        18            .byte	$18
09764 2227                        18            .byte	$18
09765 2228                        18            .byte	$18
09766                                           ! 1314  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09767 2229                        00            .byte	0
09768 222A                        00            .byte	0
09769 222B                        00            .byte	0
09770 222C                        00            .byte	0
09771 222D                        00            .byte	0
09772 222E                        00            .byte	0
09773 222F                        00            .byte	0
09774 2230                        FF            .byte	$FF
09775 2231                        00            .byte	0
09776 2232                        00            .byte	0
09777 2233                        00            .byte	0
09778 2234                        00            .byte	0
09779 2235                        00            .byte	0
09780 2236                        00            .byte	0
09781                                           ! 1315  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18,
09782 2237                        18            .byte	$18
09783 2238                        18            .byte	$18
09784 2239                        18            .byte	$18
09785 223A                        18            .byte	$18
09786 223B                        18            .byte	$18
09787 223C                        18            .byte	$18
09788 223D                        18            .byte	$18
09789 223E                        FF            .byte	$FF
09790                                           ! 1315  0x18, 0x18, 0x18, 0x18, 0x18,
09791 223F                        18            .byte	$18
09792 2240                        18            .byte	$18
09793 2241                        18            .byte	$18
09794 2242                        18            .byte	$18
09795 2243                        18            .byte	$18
09796 2244                        18            .byte	$18
09797                                           ! 1316  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09798 2245                        18            .byte	$18
09799 2246                        18            .byte	$18
09800 2247                        18            .byte	$18
09801 2248                        18            .byte	$18
09802 2249                        18            .byte	$18
09803 224A                        1F            .byte	$1F
09804 224B                        18            .byte	$18
09805 224C                        1F            .byte	$1F
09806 224D                        18            .byte	$18
09807 224E                        18            .byte	$18
09808 224F                        18            .byte	$18
09809 2250                        18            .byte	$18
09810 2251                        18            .byte	$18
09811 2252                        18            .byte	$18
09812                                           ! 1317  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09813 2253                        36            .byte	$36
09814 2254                        36            .byte	$36
09815 2255                        36            .byte	$36
09816 2256                        36            .byte	$36
09817 2257                        36            .byte	$36
09818 2258                        36            .byte	$36
09819 2259                        36            .byte	$36
09820 225A                        37            .byte	$37
09821 225B                        36            .byte	$36
09822 225C                        36            .byte	$36
09823 225D                        36            .byte	$36
09824 225E                        36            .byte	$36
09825 225F                        36            .byte	$36
09826 2260                        36            .byte	$36
09827                                           ! 1318  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09828 2261                        36            .byte	$36
09829 2262                        36            .byte	$36
09830 2263                        36            .byte	$36
09831 2264                        36            .byte	$36
09832 2265                        36            .byte	$36
09833 2266                        37            .byte	$37
09834 2267                        30            .byte	$30
09835 2268                        3F            .byte	$3F
09836 2269                        00            .byte	0
09837 226A                        00            .byte	0
09838 226B                        00            .byte	0
09839 226C                        00            .byte	0
09840 226D                        00            .byte	0
09841 226E                        00            .byte	0
09842                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09843 226F                        00            .byte	0
09844 2270                        00            .byte	0
09845 2271                        00            .byte	0
09846 2272                        00            .byte	0
09847 2273                        00            .byte	0
09848 2274                        3F            .byte	$3F
09849 2275                        30            .byte	$30
09850 2276                        37            .byte	$37
09851 2277                        36            .byte	$36
09852 2278                        36            .byte	$36
09853 2279                        36            .byte	$36
09854 227A                        36            .byte	$36
09855 227B                        36            .byte	$36
09856 227C                        36            .byte	$36
09857                                           ! 1320  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09858 227D                        36            .byte	$36
09859 227E                        36            .byte	$36
09860 227F                        36            .byte	$36
09861 2280                        36            .byte	$36
09862 2281                        36            .byte	$36
09863 2282                        F7            .byte	$F7
09864 2283                        00            .byte	0
09865 2284                        FF            .byte	$FF
09866 2285                        00            .byte	0
09867 2286                        00            .byte	0
09868 2287                        00            .byte	0
09869 2288                        00            .byte	0
09870 2289                        00            .byte	0
09871 228A                        00            .byte	0
09872                                           ! 1321  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09873 228B                        00            .byte	0
09874 228C                        00            .byte	0
09875 228D                        00            .byte	0
09876 228E                        00            .byte	0
09877 228F                        00            .byte	0
09878 2290                        FF            .byte	$FF
09879 2291                        00            .byte	0
09880 2292                        F7            .byte	$F7
09881 2293                        36            .byte	$36
09882 2294                        36            .byte	$36
09883 2295                        36            .byte	$36
09884 2296                        36            .byte	$36
09885 2297                        36            .byte	$36
09886 2298                        36            .byte	$36
09887                                           ! 1322  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09888 2299                        36            .byte	$36
09889 229A                        36            .byte	$36
09890 229B                        36            .byte	$36
09891 229C                        36            .byte	$36
09892 229D                        36            .byte	$36
09893 229E                        37            .byte	$37
09894 229F                        30            .byte	$30
09895 22A0                        37            .byte	$37
09896 22A1                        36            .byte	$36
09897 22A2                        36            .byte	$36
09898 22A3                        36            .byte	$36
09899 22A4                        36            .byte	$36
09900 22A5                        36            .byte	$36
09901 22A6                        36            .byte	$36
09902                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09903 22A7                        00            .byte	0
09904 22A8                        00            .byte	0
09905 22A9                        00            .byte	0
09906 22AA                        00            .byte	0
09907 22AB                        00            .byte	0
09908 22AC                        FF            .byte	$FF
09909 22AD                        00            .byte	0
09910 22AE                        FF            .byte	$FF
09911 22AF                        00            .byte	0
09912 22B0                        00            .byte	0
09913 22B1                        00            .byte	0
09914 22B2                        00            .byte	0
09915 22B3                        00            .byte	0
09916 22B4                        00            .byte	0
09917                                           ! 1324  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09918 22B5                        36            .byte	$36
09919 22B6                        36            .byte	$36
09920 22B7                        36            .byte	$36
09921 22B8                        36            .byte	$36
09922 22B9                        36            .byte	$36
09923 22BA                        F7            .byte	$F7
09924 22BB                        00            .byte	0
09925 22BC                        F7            .byte	$F7
09926 22BD                        36            .byte	$36
09927 22BE                        36            .byte	$36
09928 22BF                        36            .byte	$36
09929 22C0                        36            .byte	$36
09930 22C1                        36            .byte	$36
09931 22C2                        36            .byte	$36
09932                                           ! 1325  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09933 22C3                        18            .byte	$18
09934 22C4                        18            .byte	$18
09935 22C5                        18            .byte	$18
09936 22C6                        18            .byte	$18
09937 22C7                        18            .byte	$18
09938 22C8                        FF            .byte	$FF
09939 22C9                        00            .byte	0
09940 22CA                        FF            .byte	$FF
09941 22CB                        00            .byte	0
09942 22CC                        00            .byte	0
09943 22CD                        00            .byte	0
09944 22CE                        00            .byte	0
09945 22CF                        00            .byte	0
09946 22D0                        00            .byte	0
09947                                           ! 1326  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09948 22D1                        36            .byte	$36
09949 22D2                        36            .byte	$36
09950 22D3                        36            .byte	$36
09951 22D4                        36            .byte	$36
09952 22D5                        36            .byte	$36
09953 22D6                        36            .byte	$36
09954 22D7                        36            .byte	$36
09955 22D8                        FF            .byte	$FF
09956 22D9                        00            .byte	0
09957 22DA                        00            .byte	0
09958 22DB                        00            .byte	0
09959 22DC                        00            .byte	0
09960 22DD                        00            .byte	0
09961 22DE                        00            .byte	0
09962                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09963 22DF                        00            .byte	0
09964 22E0                        00            .byte	0
09965 22E1                        00            .byte	0
09966 22E2                        00            .byte	0
09967 22E3                        00            .byte	0
09968 22E4                        FF            .byte	$FF
09969 22E5                        00            .byte	0
09970 22E6                        FF            .byte	$FF
09971 22E7                        18            .byte	$18
09972 22E8                        18            .byte	$18
09973 22E9                        18            .byte	$18
09974 22EA                        18            .byte	$18
09975 22EB                        18            .byte	$18
09976 22EC                        18            .byte	$18
09977                                           ! 1328  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09978 22ED                        00            .byte	0
09979 22EE                        00            .byte	0
09980 22EF                        00            .byte	0
09981 22F0                        00            .byte	0
09982 22F1                        00            .byte	0
09983 22F2                        00            .byte	0
09984 22F3                        00            .byte	0
09985 22F4                        FF            .byte	$FF
09986 22F5                        36            .byte	$36
09987 22F6                        36            .byte	$36
09988 22F7                        36            .byte	$36
09989 22F8                        36            .byte	$36
09990 22F9                        36            .byte	$36
09991 22FA                        36            .byte	$36
09992                                           ! 1329  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09993 22FB                        36            .byte	$36
09994 22FC                        36            .byte	$36
09995 22FD                        36            .byte	$36
09996 22FE                        36            .byte	$36
09997 22FF                        36            .byte	$36
09998 2300                        36            .byte	$36
09999 2301                        36            .byte	$36
10000 2302                        3F            .byte	$3F
10001 2303                        00            .byte	0
10002 2304                        00            .byte	0
10003 2305                        00            .byte	0
10004 2306                        00            .byte	0
10005 2307                        00            .byte	0
10006 2308                        00            .byte	0
10007                                           ! 1330  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10008 2309                        18            .byte	$18
10009 230A                        18            .byte	$18
10010 230B                        18            .byte	$18
10011 230C                        18            .byte	$18
10012 230D                        18            .byte	$18
10013 230E                        1F            .byte	$1F
10014 230F                        18            .byte	$18
10015 2310                        1F            .byte	$1F
10016 2311                        00            .byte	0
10017 2312                        00            .byte	0
10018 2313                        00            .byte	0
10019 2314                        00            .byte	0
10020 2315                        00            .byte	0
10021 2316                        00            .byte	0
10022                                           ! 1331  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10023 2317                        00            .byte	0
10024 2318                        00            .byte	0
10025 2319                        00            .byte	0
10026 231A                        00            .byte	0
10027 231B                        00            .byte	0
10028 231C                        1F            .byte	$1F
10029 231D                        18            .byte	$18
10030 231E                        1F            .byte	$1F
10031 231F                        18            .byte	$18
10032 2320                        18            .byte	$18
10033 2321                        18            .byte	$18
10034 2322                        18            .byte	$18
10035 2323                        18            .byte	$18
10036 2324                        18            .byte	$18
10037                                           ! 1332  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10038 2325                        00            .byte	0
10039 2326                        00            .byte	0
10040 2327                        00            .byte	0
10041 2328                        00            .byte	0
10042 2329                        00            .byte	0
10043 232A                        00            .byte	0
10044 232B                        00            .byte	0
10045 232C                        3F            .byte	$3F
10046 232D                        36            .byte	$36
10047 232E                        36            .byte	$36
10048 232F                        36            .byte	$36
10049 2330                        36            .byte	$36
10050 2331                        36            .byte	$36
10051 2332                        36            .byte	$36
10052                                           ! 1333  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10053 2333                        36            .byte	$36
10054 2334                        36            .byte	$36
10055 2335                        36            .byte	$36
10056 2336                        36            .byte	$36
10057 2337                        36            .byte	$36
10058 2338                        36            .byte	$36
10059 2339                        36            .byte	$36
10060 233A                        FF            .byte	$FF
10061 233B                        36            .byte	$36
10062 233C                        36            .byte	$36
10063 233D                        36            .byte	$36
10064 233E                        36            .byte	$36
10065 233F                        36            .byte	$36
10066 2340                        36            .byte	$36
10067                                           ! 1334  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10068 2341                        18            .byte	$18
10069 2342                        18            .byte	$18
10070 2343                        18            .byte	$18
10071 2344                        18            .byte	$18
10072 2345                        18            .byte	$18
10073 2346                        FF            .byte	$FF
10074 2347                        18            .byte	$18
10075 2348                        FF            .byte	$FF
10076 2349                        18            .byte	$18
10077 234A                        18            .byte	$18
10078 234B                        18            .byte	$18
10079 234C                        18            .byte	$18
10080 234D                        18            .byte	$18
10081 234E                        18            .byte	$18
10082                                           ! 1335  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10083 234F                        18            .byte	$18
10084 2350                        18            .byte	$18
10085 2351                        18            .byte	$18
10086 2352                        18            .byte	$18
10087 2353                        18            .byte	$18
10088 2354                        18            .byte	$18
10089 2355                        18            .byte	$18
10090 2356                        F8            .byte	$F8
10091 2357                        00            .byte	0
10092 2358                        00            .byte	0
10093 2359                        00            .byte	0
10094 235A                        00            .byte	0
10095 235B                        00            .byte	0
10096 235C                        00            .byte	0
10097                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10098 235D                        00            .byte	0
10099 235E                        00            .byte	0
10100 235F                        00            .byte	0
10101 2360                        00            .byte	0
10102 2361                        00            .byte	0
10103 2362                        00            .byte	0
10104 2363                        00            .byte	0
10105 2364                        1F            .byte	$1F
10106 2365                        18            .byte	$18
10107 2366                        18            .byte	$18
10108 2367                        18            .byte	$18
10109 2368                        18            .byte	$18
10110 2369                        18            .byte	$18
10111 236A                        18            .byte	$18
10112                                           ! 1337  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10113 236B                        FF            .byte	$FF
10114 236C                        FF            .byte	$FF
10115 236D                        FF            .byte	$FF
10116 236E                        FF            .byte	$FF
10117 236F                        FF            .byte	$FF
10118 2370                        FF            .byte	$FF
10119 2371                        FF            .byte	$FF
10120 2372                        FF            .byte	$FF
10121 2373                        FF            .byte	$FF
10122 2374                        FF            .byte	$FF
10123 2375                        FF            .byte	$FF
10124 2376                        FF            .byte	$FF
10125 2377                        FF            .byte	$FF
10126 2378                        FF            .byte	$FF
10127                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10128 2379                        00            .byte	0
10129 237A                        00            .byte	0
10130 237B                        00            .byte	0
10131 237C                        00            .byte	0
10132 237D                        00            .byte	0
10133 237E                        00            .byte	0
10134 237F                        00            .byte	0
10135 2380                        FF            .byte	$FF
10136 2381                        FF            .byte	$FF
10137 2382                        FF            .byte	$FF
10138 2383                        FF            .byte	$FF
10139 2384                        FF            .byte	$FF
10140 2385                        FF            .byte	$FF
10141 2386                        FF            .byte	$FF
10142                                           ! 1339  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0
10143 2387                        F0            .byte	$F0
10144 2388                        F0            .byte	$F0
10145 2389                        F0            .byte	$F0
10146 238A                        F0            .byte	$F0
10147 238B                        F0            .byte	$F0
10148 238C                        F0            .byte	$F0
10149 238D                        F0            .byte	$F0
10150 238E                        F0            .byte	$F0
10151 238F                        F0            .byte	$F0
10152 2390                        F0            .byte	$F0
10153                                           ! 1339 xf0, 0xf0, 0xf0, 0xf0,
10154 2391                        F0            .byte	$F0
10155 2392                        F0            .byte	$F0
10156 2393                        F0            .byte	$F0
10157 2394                        F0            .byte	$F0
10158                                           ! 1340  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10159 2395                        0F            .byte	$F
10160 2396                        0F            .byte	$F
10161 2397                        0F            .byte	$F
10162 2398                        0F            .byte	$F
10163 2399                        0F            .byte	$F
10164 239A                        0F            .byte	$F
10165 239B                        0F            .byte	$F
10166 239C                        0F            .byte	$F
10167 239D                        0F            .byte	$F
10168 239E                        0F            .byte	$F
10169 239F                        0F            .byte	$F
10170 23A0                        0F            .byte	$F
10171 23A1                        0F            .byte	$F
10172 23A2                        0F            .byte	$F
10173                                           ! 1341  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10174 23A3                        FF            .byte	$FF
10175 23A4                        FF            .byte	$FF
10176 23A5                        FF            .byte	$FF
10177 23A6                        FF            .byte	$FF
10178 23A7                        FF            .byte	$FF
10179 23A8                        FF            .byte	$FF
10180 23A9                        FF            .byte	$FF
10181 23AA                        00            .byte	0
10182 23AB                        00            .byte	0
10183 23AC                        00            .byte	0
10184 23AD                        00            .byte	0
10185 23AE                        00            .byte	0
10186 23AF                        00            .byte	0
10187 23B0                        00            .byte	0
10188                                           ! 1342  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10189 23B1                        00            .byte	0
10190 23B2                        00            .byte	0
10191 23B3                        00            .byte	0
10192 23B4                        00            .byte	0
10193 23B5                        00            .byte	0
10194 23B6                        76            .byte	$76
10195 23B7                        DC            .byte	$DC
10196 23B8                        D8            .byte	$D8
10197 23B9                        D8            .byte	$D8
10198 23BA                        DC            .byte	$DC
10199 23BB                        76            .byte	$76
10200 23BC                        00            .byte	0
10201 23BD                        00            .byte	0
10202 23BE                        00            .byte	0
10203                                           ! 1343  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10204 23BF                        00            .byte	0
10205 23C0                        00            .byte	0
10206 23C1                        00            .byte	0
10207 23C2                        00            .byte	0
10208 23C3                        7C            .byte	$7C
10209 23C4                        C6            .byte	$C6
10210 23C5                        FC            .byte	$FC
10211 23C6                        C6            .byte	$C6
10212 23C7                        C6            .byte	$C6
10213 23C8                        FC            .byte	$FC
10214 23C9                        C0            .byte	$C0
10215 23CA                        C0            .byte	$C0
10216 23CB                        40            .byte	$40
10217 23CC                        00            .byte	0
10218                                           ! 1344  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10219 23CD                        00            .byte	0
10220 23CE                        00            .byte	0
10221 23CF                        FE            .byte	$FE
10222 23D0                        C6            .byte	$C6
10223 23D1                        C6            .byte	$C6
10224 23D2                        C0            .byte	$C0
10225 23D3                        C0            .byte	$C0
10226 23D4                        C0            .byte	$C0
10227 23D5                        C0            .byte	$C0
10228 23D6                        C0            .byte	$C0
10229 23D7                        C0            .byte	$C0
10230 23D8                        00            .byte	0
10231 23D9                        00            .byte	0
10232 23DA                        00            .byte	0
10233                                           ! 1345  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10234 23DB                        00            .byte	0
10235 23DC                        00            .byte	0
10236 23DD                        00            .byte	0
10237 23DE                        00            .byte	0
10238 23DF                        FE            .byte	$FE
10239 23E0                        6C            .byte	$6C
10240 23E1                        6C            .byte	$6C
10241 23E2                        6C            .byte	$6C
10242 23E3                        6C            .byte	$6C
10243 23E4                        6C            .byte	$6C
10244 23E5                        6C            .byte	$6C
10245 23E6                        00            .byte	0
10246 23E7                        00            .byte	0
10247 23E8                        00            .byte	0
10248                                           ! 1346  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10249 23E9                        00            .byte	0
10250 23EA                        00            .byte	0
10251 23EB                        FE            .byte	$FE
10252 23EC                        C6            .byte	$C6
10253 23ED                        60            .byte	$60
10254 23EE                        30            .byte	$30
10255 23EF                        18            .byte	$18
10256 23F0                        30            .byte	$30
10257 23F1                        60            .byte	$60
10258 23F2                        C6            .byte	$C6
10259 23F3                        FE            .byte	$FE
10260 23F4                        00            .byte	0
10261 23F5                        00            .byte	0
10262 23F6                        00            .byte	0
10263                                           ! 1347  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10264 23F7                        00            .byte	0
10265 23F8                        00            .byte	0
10266 23F9                        00            .byte	0
10267 23FA                        00            .byte	0
10268 23FB                        00            .byte	0
10269 23FC                        7E            .byte	$7E
10270 23FD                        D8            .byte	$D8
10271 23FE                        D8            .byte	$D8
10272 23FF                        D8            .byte	$D8
10273 2400                        D8            .byte	$D8
10274 2401                        70            .byte	$70
10275 2402                        00            .byte	0
10276 2403                        00            .byte	0
10277 2404                        00            .byte	0
10278                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10279 2405                        00            .byte	0
10280 2406                        00            .byte	0
10281 2407                        00            .byte	0
10282 2408                        00            .byte	0
10283 2409                        66            .byte	$66
10284 240A                        66            .byte	$66
10285 240B                        66            .byte	$66
10286 240C                        66            .byte	$66
10287 240D                        7C            .byte	$7C
10288 240E                        60            .byte	$60
10289 240F                        60            .byte	$60
10290 2410                        C0            .byte	$C0
10291 2411                        00            .byte	0
10292 2412                        00            .byte	0
10293                                           ! 1349  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10294 2413                        00            .byte	0
10295 2414                        00            .byte	0
10296 2415                        00            .byte	0
10297 2416                        00            .byte	0
10298 2417                        76            .byte	$76
10299 2418                        DC            .byte	$DC
10300 2419                        18            .byte	$18
10301 241A                        18            .byte	$18
10302 241B                        18            .byte	$18
10303 241C                        18            .byte	$18
10304 241D                        18            .byte	$18
10305 241E                        00            .byte	0
10306 241F                        00            .byte	0
10307 2420                        00            .byte	0
10308                                           ! 1350  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10309 2421                        00            .byte	0
10310 2422                        00            .byte	0
10311 2423                        7E            .byte	$7E
10312 2424                        18            .byte	$18
10313 2425                        3C            .byte	$3C
10314 2426                        66            .byte	$66
10315 2427                        66            .byte	$66
10316 2428                        66            .byte	$66
10317 2429                        3C            .byte	$3C
10318 242A                        18            .byte	$18
10319 242B                        7E            .byte	$7E
10320 242C                        00            .byte	0
10321 242D                        00            .byte	0
10322 242E                        00            .byte	0
10323                                           ! 1351  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10324 242F                        00            .byte	0
10325 2430                        00            .byte	0
10326 2431                        38            .byte	$38
10327 2432                        6C            .byte	$6C
10328 2433                        C6            .byte	$C6
10329 2434                        C6            .byte	$C6
10330 2435                        FE            .byte	$FE
10331 2436                        C6            .byte	$C6
10332 2437                        C6            .byte	$C6
10333 2438                        6C            .byte	$6C
10334 2439                        38            .byte	$38
10335 243A                        00            .byte	0
10336 243B                        00            .byte	0
10337 243C                        00            .byte	0
10338                                           ! 1352  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10339 243D                        00            .byte	0
10340 243E                        00            .byte	0
10341 243F                        38            .byte	$38
10342 2440                        6C            .byte	$6C
10343 2441                        C6            .byte	$C6
10344 2442                        C6            .byte	$C6
10345 2443                        C6            .byte	$C6
10346 2444                        6C            .byte	$6C
10347 2445                        6C            .byte	$6C
10348 2446                        6C            .byte	$6C
10349 2447                        EE            .byte	$EE
10350 2448                        00            .byte	0
10351 2449                        00            .byte	0
10352 244A                        00            .byte	0
10353                                           ! 1353  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10354 244B                        00            .byte	0
10355 244C                        00            .byte	0
10356 244D                        1E            .byte	$1E
10357 244E                        30            .byte	$30
10358 244F                        18            .byte	$18
10359 2450                        0C            .byte	$C
10360 2451                        3E            .byte	$3E
10361 2452                        66            .byte	$66
10362 2453                        66            .byte	$66
10363 2454                        66            .byte	$66
10364 2455                        3C            .byte	$3C
10365 2456                        00            .byte	0
10366 2457                        00            .byte	0
10367 2458                        00            .byte	0
10368                                           ! 1354  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10369 2459                        00            .byte	0
10370 245A                        00            .byte	0
10371 245B                        00            .byte	0
10372 245C                        00            .byte	0
10373 245D                        00            .byte	0
10374 245E                        7E            .byte	$7E
10375 245F                        DB            .byte	$DB
10376 2460                        DB            .byte	$DB
10377 2461                        7E            .byte	$7E
10378 2462                        00            .byte	0
10379 2463                        00            .byte	0
10380 2464                        00            .byte	0
10381 2465                        00            .byte	0
10382 2466                        00            .byte	0
10383                                           ! 1355  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10384 2467                        00            .byte	0
10385 2468                        00            .byte	0
10386 2469                        03            .byte	3
10387 246A                        06            .byte	6
10388 246B                        7E            .byte	$7E
10389 246C                        DB            .byte	$DB
10390 246D                        DB            .byte	$DB
10391 246E                        F3            .byte	$F3
10392 246F                        7E            .byte	$7E
10393 2470                        60            .byte	$60
10394 2471                        C0            .byte	$C0
10395 2472                        00            .byte	0
10396 2473                        00            .byte	0
10397 2474                        00            .byte	0
10398                                           ! 1356  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10399 2475                        00            .byte	0
10400 2476                        00            .byte	0
10401 2477                        1C            .byte	$1C
10402 2478                        30            .byte	$30
10403 2479                        60            .byte	$60
10404 247A                        60            .byte	$60
10405 247B                        7C            .byte	$7C
10406 247C                        60            .byte	$60
10407 247D                        60            .byte	$60
10408 247E                        30            .byte	$30
10409 247F                        1C            .byte	$1C
10410 2480                        00            .byte	0
10411 2481                        00            .byte	0
10412 2482                        00            .byte	0
10413                                           ! 1357  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10414 2483                        00            .byte	0
10415 2484                        00            .byte	0
10416 2485                        00            .byte	0
10417 2486                        7C            .byte	$7C
10418 2487                        C6            .byte	$C6
10419 2488                        C6            .byte	$C6
10420 2489                        C6            .byte	$C6
10421 248A                        C6            .byte	$C6
10422 248B                        C6            .byte	$C6
10423 248C                        C6            .byte	$C6
10424 248D                        C6            .byte	$C6
10425 248E                        00            .byte	0
10426 248F                        00            .byte	0
10427 2490                        00            .byte	0
10428                                           ! 1358  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10429 2491                        00            .byte	0
10430 2492                        00            .byte	0
10431 2493                        00            .byte	0
10432 2494                        FE            .byte	$FE
10433 2495                        00            .byte	0
10434 2496                        00            .byte	0
10435 2497                        FE            .byte	$FE
10436 2498                        00            .byte	0
10437 2499                        00            .byte	0
10438 249A                        FE            .byte	$FE
10439 249B                        00            .byte	0
10440 249C                        00            .byte	0
10441 249D                        00            .byte	0
10442 249E                        00            .byte	0
10443                                           ! 1359  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10444 249F                        00            .byte	0
10445 24A0                        00            .byte	0
10446 24A1                        00            .byte	0
10447 24A2                        18            .byte	$18
10448 24A3                        18            .byte	$18
10449 24A4                        7E            .byte	$7E
10450 24A5                        18            .byte	$18
10451 24A6                        18            .byte	$18
10452 24A7                        00            .byte	0
10453 24A8                        00            .byte	0
10454 24A9                        FF            .byte	$FF
10455 24AA                        00            .byte	0
10456 24AB                        00            .byte	0
10457 24AC                        00            .byte	0
10458                                           ! 1360  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10459 24AD                        00            .byte	0
10460 24AE                        00            .byte	0
10461 24AF                        30            .byte	$30
10462 24B0                        18            .byte	$18
10463 24B1                        0C            .byte	$C
10464 24B2                        06            .byte	6
10465 24B3                        0C            .byte	$C
10466 24B4                        18            .byte	$18
10467 24B5                        30            .byte	$30
10468 24B6                        00            .byte	0
10469 24B7                        7E            .byte	$7E
10470 24B8                        00            .byte	0
10471 24B9                        00            .byte	0
10472 24BA                        00            .byte	0
10473                                           ! 1361  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10474 24BB                        00            .byte	0
10475 24BC                        00            .byte	0
10476 24BD                        0C            .byte	$C
10477 24BE                        18            .byte	$18
10478 24BF                        30            .byte	$30
10479 24C0                        60            .byte	$60
10480 24C1                        30            .byte	$30
10481 24C2                        18            .byte	$18
10482 24C3                        0C            .byte	$C
10483 24C4                        00            .byte	0
10484 24C5                        7E            .byte	$7E
10485 24C6                        00            .byte	0
10486 24C7                        00            .byte	0
10487 24C8                        00            .byte	0
10488                                           ! 1362  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10489 24C9                        00            .byte	0
10490 24CA                        00            .byte	0
10491 24CB                        0E            .byte	$E
10492 24CC                        1B            .byte	$1B
10493 24CD                        1B            .byte	$1B
10494 24CE                        18            .byte	$18
10495 24CF                        18            .byte	$18
10496 24D0                        18            .byte	$18
10497 24D1                        18            .byte	$18
10498 24D2                        18            .byte	$18
10499 24D3                        18            .byte	$18
10500 24D4                        18            .byte	$18
10501 24D5                        18            .byte	$18
10502 24D6                        18            .byte	$18
10503                                           ! 1363  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x0
10504 24D7                        18            .byte	$18
10505 24D8                        18            .byte	$18
10506 24D9                        18            .byte	$18
10507 24DA                        18            .byte	$18
10508 24DB                        18            .byte	$18
10509 24DC                        18            .byte	$18
10510 24DD                        18            .byte	$18
10511 24DE                        18            .byte	$18
10512 24DF                        D8            .byte	$D8
10513 24E0                        D8            .byte	$D8
10514 24E1                        70            .byte	$70
10515                                           ! 1363 0, 0x00, 0x00,
10516 24E2                        00            .byte	0
10517 24E3                        00            .byte	0
10518 24E4                        00            .byte	0
10519                                           ! 1364  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10520 24E5                        00            .byte	0
10521 24E6                        00            .byte	0
10522 24E7                        00            .byte	0
10523 24E8                        18            .byte	$18
10524 24E9                        18            .byte	$18
10525 24EA                        00            .byte	0
10526 24EB                        7E            .byte	$7E
10527 24EC                        00            .byte	0
10528 24ED                        18            .byte	$18
10529 24EE                        18            .byte	$18
10530 24EF                        00            .byte	0
10531 24F0                        00            .byte	0
10532 24F1                        00            .byte	0
10533 24F2                        00            .byte	0
10534                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10535 24F3                        00            .byte	0
10536 24F4                        00            .byte	0
10537 24F5                        00            .byte	0
10538 24F6                        00            .byte	0
10539 24F7                        76            .byte	$76
10540 24F8                        DC            .byte	$DC
10541 24F9                        00            .byte	0
10542 24FA                        76            .byte	$76
10543 24FB                        DC            .byte	$DC
10544 24FC                        00            .byte	0
10545 24FD                        00            .byte	0
10546 24FE                        00            .byte	0
10547 24FF                        00            .byte	0
10548 2500                        00            .byte	0
10549                                           ! 1366  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10550 2501                        00            .byte	0
10551 2502                        38            .byte	$38
10552 2503                        6C            .byte	$6C
10553 2504                        6C            .byte	$6C
10554 2505                        38            .byte	$38
10555 2506                        00            .byte	0
10556 2507                        00            .byte	0
10557 2508                        00            .byte	0
10558 2509                        00            .byte	0
10559 250A                        00            .byte	0
10560 250B                        00            .byte	0
10561 250C                        00            .byte	0
10562 250D                        00            .byte	0
10563 250E                        00            .byte	0
10564                                           ! 1367  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10565 250F                        00            .byte	0
10566 2510                        00            .byte	0
10567 2511                        00            .byte	0
10568 2512                        00            .byte	0
10569 2513                        00            .byte	0
10570 2514                        00            .byte	0
10571 2515                        18            .byte	$18
10572 2516                        18            .byte	$18
10573 2517                        00            .byte	0
10574 2518                        00            .byte	0
10575 2519                        00            .byte	0
10576 251A                        00            .byte	0
10577 251B                        00            .byte	0
10578 251C                        00            .byte	0
10579                                           ! 1368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10580 251D                        00            .byte	0
10581 251E                        00            .byte	0
10582 251F                        00            .byte	0
10583 2520                        00            .byte	0
10584 2521                        00            .byte	0
10585 2522                        00            .byte	0
10586 2523                        00            .byte	0
10587 2524                        18            .byte	$18
10588 2525                        00            .byte	0
10589 2526                        00            .byte	0
10590 2527                        00            .byte	0
10591 2528                        00            .byte	0
10592 2529                        00            .byte	0
10593 252A                        00            .byte	0
10594                                           ! 1369  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10595 252B                        00            .byte	0
10596 252C                        0F            .byte	$F
10597 252D                        0C            .byte	$C
10598 252E                        0C            .byte	$C
10599 252F                        0C            .byte	$C
10600 2530                        0C            .byte	$C
10601 2531                        0C            .byte	$C
10602 2532                        EC            .byte	$EC
10603 2533                        6C            .byte	$6C
10604 2534                        3C            .byte	$3C
10605 2535                        1C            .byte	$1C
10606 2536                        00            .byte	0
10607 2537                        00            .byte	0
10608 2538                        00            .byte	0
10609                                           ! 1370  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10610 2539                        00            .byte	0
10611 253A                        D8            .byte	$D8
10612 253B                        6C            .byte	$6C
10613 253C                        6C            .byte	$6C
10614 253D                        6C            .byte	$6C
10615 253E                        6C            .byte	$6C
10616 253F                        6C            .byte	$6C
10617 2540                        00            .byte	0
10618 2541                        00            .byte	0
10619 2542                        00            .byte	0
10620 2543                        00            .byte	0
10621 2544                        00            .byte	0
10622 2545                        00            .byte	0
10623 2546                        00            .byte	0
10624                                           ! 1371  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10625 2547                        00            .byte	0
10626 2548                        70            .byte	$70
10627 2549                        D8            .byte	$D8
10628 254A                        30            .byte	$30
10629 254B                        60            .byte	$60
10630 254C                        C8            .byte	$C8
10631 254D                        F8            .byte	$F8
10632 254E                        00            .byte	0
10633 254F                        00            .byte	0
10634 2550                        00            .byte	0
10635 2551                        00            .byte	0
10636 2552                        00            .byte	0
10637 2553                        00            .byte	0
10638 2554                        00            .byte	0
10639                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10640 2555                        00            .byte	0
10641 2556                        00            .byte	0
10642 2557                        00            .byte	0
10643 2558                        00            .byte	0
10644 2559                        7C            .byte	$7C
10645 255A                        7C            .byte	$7C
10646 255B                        7C            .byte	$7C
10647 255C                        7C            .byte	$7C
10648 255D                        7C            .byte	$7C
10649 255E                        7C            .byte	$7C
10650 255F                        00            .byte	0
10651 2560                        00            .byte	0
10652 2561                        00            .byte	0
10653 2562                        00            .byte	0
10654                                           ! 1373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10655 2563                        00            .byte	0
10656 2564                        00            .byte	0
10657 2565                        00            .byte	0
10658 2566                        00            .byte	0
10659 2567                        00            .byte	0
10660 2568                        00            .byte	0
10661 2569                        00            .byte	0
10662 256A                        00            .byte	0
10663 256B                        00            .byte	0
10664 256C                        00            .byte	0
10665 256D                        00            .byte	0
10666 256E                        00            .byte	0
10667 256F                        00            .byte	0
10668                                           ! 1374 };
10669 2570                        00            .byte	0
10670                                           !BCC_EOS
10671                                           ! 1375 static Bit8u vgafont16[256*16]=
10672                                           ! 1376 {
10673                       00002571            _vgafont16:
10674                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10675 2571                        00            .byte	0
10676 2572                        00            .byte	0
10677 2573                        00            .byte	0
10678 2574                        00            .byte	0
10679 2575                        00            .byte	0
10680 2576                        00            .byte	0
10681 2577                        00            .byte	0
10682 2578                        00            .byte	0
10683 2579                        00            .byte	0
10684 257A                        00            .byte	0
10685 257B                        00            .byte	0
10686 257C                        00            .byte	0
10687 257D                        00            .byte	0
10688 257E                        00            .byte	0
10689 257F                        00            .byte	0
10690 2580                        00            .byte	0
10691                                           ! 1378  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10692 2581                        00            .byte	0
10693 2582                        00            .byte	0
10694 2583                        7E            .byte	$7E
10695 2584                        81            .byte	$81
10696 2585                        A5            .byte	$A5
10697 2586                        81            .byte	$81
10698 2587                        81            .byte	$81
10699 2588                        BD            .byte	$BD
10700 2589                        99            .byte	$99
10701 258A                        81            .byte	$81
10702 258B                        81            .byte	$81
10703 258C                        7E            .byte	$7E
10704 258D                        00            .byte	0
10705 258E                        00            .byte	0
10706 258F                        00            .byte	0
10707 2590                        00            .byte	0
10708                                           ! 1379  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10709 2591                        00            .byte	0
10710 2592                        00            .byte	0
10711 2593                        7E            .byte	$7E
10712 2594                        FF            .byte	$FF
10713 2595                        DB            .byte	$DB
10714 2596                        FF            .byte	$FF
10715 2597                        FF            .byte	$FF
10716 2598                        C3            .byte	$C3
10717 2599                        E7            .byte	$E7
10718 259A                        FF            .byte	$FF
10719 259B                        FF            .byte	$FF
10720 259C                        7E            .byte	$7E
10721 259D                        00            .byte	0
10722 259E                        00            .byte	0
10723 259F                        00            .byte	0
10724 25A0                        00            .byte	0
10725                                           ! 1380  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10726 25A1                        00            .byte	0
10727 25A2                        00            .byte	0
10728 25A3                        00            .byte	0
10729 25A4                        00            .byte	0
10730 25A5                        6C            .byte	$6C
10731 25A6                        FE            .byte	$FE
10732 25A7                        FE            .byte	$FE
10733 25A8                        FE            .byte	$FE
10734 25A9                        FE            .byte	$FE
10735 25AA                        7C            .byte	$7C
10736 25AB                        38            .byte	$38
10737 25AC                        10            .byte	$10
10738 25AD                        00            .byte	0
10739 25AE                        00            .byte	0
10740 25AF                        00            .byte	0
10741 25B0                        00            .byte	0
10742                                           ! 1381  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10743 25B1                        00            .byte	0
10744 25B2                        00            .byte	0
10745 25B3                        00            .byte	0
10746 25B4                        00            .byte	0
10747 25B5                        10            .byte	$10
10748 25B6                        38            .byte	$38
10749 25B7                        7C            .byte	$7C
10750 25B8                        FE            .byte	$FE
10751 25B9                        7C            .byte	$7C
10752 25BA                        38            .byte	$38
10753 25BB                        10            .byte	$10
10754 25BC                        00            .byte	0
10755 25BD                        00            .byte	0
10756 25BE                        00            .byte	0
10757 25BF                        00            .byte	0
10758 25C0                        00            .byte	0
10759                                           ! 1382  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10760 25C1                        00            .byte	0
10761 25C2                        00            .byte	0
10762 25C3                        00            .byte	0
10763 25C4                        18            .byte	$18
10764 25C5                        3C            .byte	$3C
10765 25C6                        3C            .byte	$3C
10766 25C7                        E7            .byte	$E7
10767 25C8                        E7            .byte	$E7
10768 25C9                        E7            .byte	$E7
10769 25CA                        18            .byte	$18
10770 25CB                        18            .byte	$18
10771 25CC                        3C            .byte	$3C
10772 25CD                        00            .byte	0
10773 25CE                        00            .byte	0
10774 25CF                        00            .byte	0
10775 25D0                        00            .byte	0
10776                                           ! 1383  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10777 25D1                        00            .byte	0
10778 25D2                        00            .byte	0
10779 25D3                        00            .byte	0
10780 25D4                        18            .byte	$18
10781 25D5                        3C            .byte	$3C
10782 25D6                        7E            .byte	$7E
10783 25D7                        FF            .byte	$FF
10784 25D8                        FF            .byte	$FF
10785 25D9                        7E            .byte	$7E
10786 25DA                        18            .byte	$18
10787 25DB                        18            .byte	$18
10788 25DC                        3C            .byte	$3C
10789 25DD                        00            .byte	0
10790 25DE                        00            .byte	0
10791 25DF                        00            .byte	0
10792 25E0                        00            .byte	0
10793                                           ! 1384  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10794 25E1                        00            .byte	0
10795 25E2                        00            .byte	0
10796 25E3                        00            .byte	0
10797 25E4                        00            .byte	0
10798 25E5                        00            .byte	0
10799 25E6                        00            .byte	0
10800 25E7                        18            .byte	$18
10801 25E8                        3C            .byte	$3C
10802 25E9                        3C            .byte	$3C
10803 25EA                        18            .byte	$18
10804 25EB                        00            .byte	0
10805 25EC                        00            .byte	0
10806 25ED                        00            .byte	0
10807 25EE                        00            .byte	0
10808 25EF                        00            .byte	0
10809 25F0                        00            .byte	0
10810                                           ! 1385  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10811 25F1                        FF            .byte	$FF
10812 25F2                        FF            .byte	$FF
10813 25F3                        FF            .byte	$FF
10814 25F4                        FF            .byte	$FF
10815 25F5                        FF            .byte	$FF
10816 25F6                        FF            .byte	$FF
10817 25F7                        E7            .byte	$E7
10818 25F8                        C3            .byte	$C3
10819 25F9                        C3            .byte	$C3
10820 25FA                        E7            .byte	$E7
10821 25FB                        FF            .byte	$FF
10822 25FC                        FF            .byte	$FF
10823 25FD                        FF            .byte	$FF
10824 25FE                        FF            .byte	$FF
10825 25FF                        FF            .byte	$FF
10826 2600                        FF            .byte	$FF
10827                                           ! 1386  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10828 2601                        00            .byte	0
10829 2602                        00            .byte	0
10830 2603                        00            .byte	0
10831 2604                        00            .byte	0
10832 2605                        00            .byte	0
10833 2606                        3C            .byte	$3C
10834 2607                        66            .byte	$66
10835 2608                        42            .byte	$42
10836 2609                        42            .byte	$42
10837 260A                        66            .byte	$66
10838 260B                        3C            .byte	$3C
10839 260C                        00            .byte	0
10840 260D                        00            .byte	0
10841 260E                        00            .byte	0
10842 260F                        00            .byte	0
10843 2610                        00            .byte	0
10844                                           ! 1387  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10845 2611                        FF            .byte	$FF
10846 2612                        FF            .byte	$FF
10847 2613                        FF            .byte	$FF
10848 2614                        FF            .byte	$FF
10849 2615                        FF            .byte	$FF
10850 2616                        C3            .byte	$C3
10851 2617                        99            .byte	$99
10852 2618                        BD            .byte	$BD
10853 2619                        BD            .byte	$BD
10854 261A                        99            .byte	$99
10855 261B                        C3            .byte	$C3
10856 261C                        FF            .byte	$FF
10857 261D                        FF            .byte	$FF
10858 261E                        FF            .byte	$FF
10859 261F                        FF            .byte	$FF
10860 2620                        FF            .byte	$FF
10861                                           ! 1388  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0
10862 2621                        00            .byte	0
10863 2622                        00            .byte	0
10864 2623                        1E            .byte	$1E
10865 2624                        0E            .byte	$E
10866 2625                        1A            .byte	$1A
10867 2626                        32            .byte	$32
10868 2627                        78            .byte	$78
10869 2628                        CC            .byte	$CC
10870 2629                        CC            .byte	$CC
10871 262A                        CC            .byte	$CC
10872 262B                        CC            .byte	$CC
10873 262C                        78            .byte	$78
10874 262D                        00            .byte	0
10875                                           ! 1388 x00, 0x00, 0x00,
10876 262E                        00            .byte	0
10877 262F                        00            .byte	0
10878 2630                        00            .byte	0
10879                                           ! 1389  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10880 2631                        00            .byte	0
10881 2632                        00            .byte	0
10882 2633                        3C            .byte	$3C
10883 2634                        66            .byte	$66
10884 2635                        66            .byte	$66
10885 2636                        66            .byte	$66
10886 2637                        66            .byte	$66
10887 2638                        3C            .byte	$3C
10888 2639                        18            .byte	$18
10889 263A                        7E            .byte	$7E
10890 263B                        18            .byte	$18
10891 263C                        18            .byte	$18
10892 263D                        00            .byte	0
10893 263E                        00            .byte	0
10894 263F                        00            .byte	0
10895 2640                        00            .byte	0
10896                                           ! 1390  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10897 2641                        00            .byte	0
10898 2642                        00            .byte	0
10899 2643                        3F            .byte	$3F
10900 2644                        33            .byte	$33
10901 2645                        3F            .byte	$3F
10902 2646                        30            .byte	$30
10903 2647                        30            .byte	$30
10904 2648                        30            .byte	$30
10905 2649                        30            .byte	$30
10906 264A                        70            .byte	$70
10907 264B                        F0            .byte	$F0
10908 264C                        E0            .byte	$E0
10909 264D                        00            .byte	0
10910 264E                        00            .byte	0
10911 264F                        00            .byte	0
10912 2650                        00            .byte	0
10913                                           ! 1391  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10914 2651                        00            .byte	0
10915 2652                        00            .byte	0
10916 2653                        7F            .byte	$7F
10917 2654                        63            .byte	$63
10918 2655                        7F            .byte	$7F
10919 2656                        63            .byte	$63
10920 2657                        63            .byte	$63
10921 2658                        63            .byte	$63
10922 2659                        63            .byte	$63
10923 265A                        67            .byte	$67
10924 265B                        E7            .byte	$E7
10925 265C                        E6            .byte	$E6
10926 265D                        C0            .byte	$C0
10927 265E                        00            .byte	0
10928 265F                        00            .byte	0
10929 2660                        00            .byte	0
10930                                           ! 1392  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10931 2661                        00            .byte	0
10932 2662                        00            .byte	0
10933 2663                        00            .byte	0
10934 2664                        18            .byte	$18
10935 2665                        18            .byte	$18
10936 2666                        DB            .byte	$DB
10937 2667                        3C            .byte	$3C
10938 2668                        E7            .byte	$E7
10939 2669                        3C            .byte	$3C
10940 266A                        DB            .byte	$DB
10941 266B                        18            .byte	$18
10942 266C                        18            .byte	$18
10943 266D                        00            .byte	0
10944 266E                        00            .byte	0
10945 266F                        00            .byte	0
10946 2670                        00            .byte	0
10947                                           ! 1393  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10948 2671                        00            .byte	0
10949 2672                        80            .byte	$80
10950 2673                        C0            .byte	$C0
10951 2674                        E0            .byte	$E0
10952 2675                        F0            .byte	$F0
10953 2676                        F8            .byte	$F8
10954 2677                        FE            .byte	$FE
10955 2678                        F8            .byte	$F8
10956 2679                        F0            .byte	$F0
10957 267A                        E0            .byte	$E0
10958 267B                        C0            .byte	$C0
10959 267C                        80            .byte	$80
10960 267D                        00            .byte	0
10961 267E                        00            .byte	0
10962 267F                        00            .byte	0
10963 2680                        00            .byte	0
10964                                           ! 1394  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10965 2681                        00            .byte	0
10966 2682                        02            .byte	2
10967 2683                        06            .byte	6
10968 2684                        0E            .byte	$E
10969 2685                        1E            .byte	$1E
10970 2686                        3E            .byte	$3E
10971 2687                        FE            .byte	$FE
10972 2688                        3E            .byte	$3E
10973 2689                        1E            .byte	$1E
10974 268A                        0E            .byte	$E
10975 268B                        06            .byte	6
10976 268C                        02            .byte	2
10977 268D                        00            .byte	0
10978 268E                        00            .byte	0
10979 268F                        00            .byte	0
10980 2690                        00            .byte	0
10981                                           ! 1395  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10982 2691                        00            .byte	0
10983 2692                        00            .byte	0
10984 2693                        18            .byte	$18
10985 2694                        3C            .byte	$3C
10986 2695                        7E            .byte	$7E
10987 2696                        18            .byte	$18
10988 2697                        18            .byte	$18
10989 2698                        18            .byte	$18
10990 2699                        7E            .byte	$7E
10991 269A                        3C            .byte	$3C
10992 269B                        18            .byte	$18
10993 269C                        00            .byte	0
10994 269D                        00            .byte	0
10995 269E                        00            .byte	0
10996 269F                        00            .byte	0
10997 26A0                        00            .byte	0
10998                                           ! 1396  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10999 26A1                        00            .byte	0
11000 26A2                        00            .byte	0
11001 26A3                        66            .byte	$66
11002 26A4                        66            .byte	$66
11003 26A5                        66            .byte	$66
11004 26A6                        66            .byte	$66
11005 26A7                        66            .byte	$66
11006 26A8                        66            .byte	$66
11007 26A9                        66            .byte	$66
11008 26AA                        00            .byte	0
11009 26AB                        66            .byte	$66
11010 26AC                        66            .byte	$66
11011 26AD                        00            .byte	0
11012 26AE                        00            .byte	0
11013 26AF                        00            .byte	0
11014 26B0                        00            .byte	0
11015                                           ! 1397  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11016 26B1                        00            .byte	0
11017 26B2                        00            .byte	0
11018 26B3                        7F            .byte	$7F
11019 26B4                        DB            .byte	$DB
11020 26B5                        DB            .byte	$DB
11021 26B6                        DB            .byte	$DB
11022 26B7                        7B            .byte	$7B
11023 26B8                        1B            .byte	$1B
11024 26B9                        1B            .byte	$1B
11025 26BA                        1B            .byte	$1B
11026 26BB                        1B            .byte	$1B
11027 26BC                        1B            .byte	$1B
11028 26BD                        00            .byte	0
11029 26BE                        00            .byte	0
11030 26BF                        00            .byte	0
11031 26C0                        00            .byte	0
11032                                           ! 1398  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11033 26C1                        00            .byte	0
11034 26C2                        7C            .byte	$7C
11035 26C3                        C6            .byte	$C6
11036 26C4                        60            .byte	$60
11037 26C5                        38            .byte	$38
11038 26C6                        6C            .byte	$6C
11039 26C7                        C6            .byte	$C6
11040 26C8                        C6            .byte	$C6
11041 26C9                        6C            .byte	$6C
11042 26CA                        38            .byte	$38
11043 26CB                        0C            .byte	$C
11044 26CC                        C6            .byte	$C6
11045 26CD                        7C            .byte	$7C
11046 26CE                        00            .byte	0
11047 26CF                        00            .byte	0
11048 26D0                        00            .byte	0
11049                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11050 26D1                        00            .byte	0
11051 26D2                        00            .byte	0
11052 26D3                        00            .byte	0
11053 26D4                        00            .byte	0
11054 26D5                        00            .byte	0
11055 26D6                        00            .byte	0
11056 26D7                        00            .byte	0
11057 26D8                        00            .byte	0
11058 26D9                        FE            .byte	$FE
11059 26DA                        FE            .byte	$FE
11060 26DB                        FE            .byte	$FE
11061 26DC                        FE            .byte	$FE
11062 26DD                        00            .byte	0
11063 26DE                        00            .byte	0
11064 26DF                        00            .byte	0
11065 26E0                        00            .byte	0
11066                                           ! 1400  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11067 26E1                        00            .byte	0
11068 26E2                        00            .byte	0
11069 26E3                        18            .byte	$18
11070 26E4                        3C            .byte	$3C
11071 26E5                        7E            .byte	$7E
11072 26E6                        18            .byte	$18
11073 26E7                        18            .byte	$18
11074 26E8                        18            .byte	$18
11075 26E9                        7E            .byte	$7E
11076 26EA                        3C            .byte	$3C
11077 26EB                        18            .byte	$18
11078 26EC                        7E            .byte	$7E
11079 26ED                        00            .byte	0
11080 26EE                        00            .byte	0
11081 26EF                        00            .byte	0
11082 26F0                        00            .byte	0
11083                                           ! 1401  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11084 26F1                        00            .byte	0
11085 26F2                        00            .byte	0
11086 26F3                        18            .byte	$18
11087 26F4                        3C            .byte	$3C
11088 26F5                        7E            .byte	$7E
11089 26F6                        18            .byte	$18
11090 26F7                        18            .byte	$18
11091 26F8                        18            .byte	$18
11092 26F9                        18            .byte	$18
11093 26FA                        18            .byte	$18
11094 26FB                        18            .byte	$18
11095 26FC                        18            .byte	$18
11096 26FD                        00            .byte	0
11097 26FE                        00            .byte	0
11098 26FF                        00            .byte	0
11099 2700                        00            .byte	0
11100                                           ! 1402  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11101 2701                        00            .byte	0
11102 2702                        00            .byte	0
11103 2703                        18            .byte	$18
11104 2704                        18            .byte	$18
11105 2705                        18            .byte	$18
11106 2706                        18            .byte	$18
11107 2707                        18            .byte	$18
11108 2708                        18            .byte	$18
11109 2709                        18            .byte	$18
11110 270A                        7E            .byte	$7E
11111 270B                        3C            .byte	$3C
11112 270C                        18            .byte	$18
11113 270D                        00            .byte	0
11114 270E                        00            .byte	0
11115 270F                        00            .byte	0
11116 2710                        00            .byte	0
11117                                           ! 1403  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11118 2711                        00            .byte	0
11119 2712                        00            .byte	0
11120 2713                        00            .byte	0
11121 2714                        00            .byte	0
11122 2715                        00            .byte	0
11123 2716                        18            .byte	$18
11124 2717                        0C            .byte	$C
11125 2718                        FE            .byte	$FE
11126 2719                        0C            .byte	$C
11127 271A                        18            .byte	$18
11128 271B                        00            .byte	0
11129 271C                        00            .byte	0
11130 271D                        00            .byte	0
11131 271E                        00            .byte	0
11132 271F                        00            .byte	0
11133 2720                        00            .byte	0
11134                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11135 2721                        00            .byte	0
11136 2722                        00            .byte	0
11137 2723                        00            .byte	0
11138 2724                        00            .byte	0
11139 2725                        00            .byte	0
11140 2726                        30            .byte	$30
11141 2727                        60            .byte	$60
11142 2728                        FE            .byte	$FE
11143 2729                        60            .byte	$60
11144 272A                        30            .byte	$30
11145 272B                        00            .byte	0
11146 272C                        00            .byte	0
11147 272D                        00            .byte	0
11148 272E                        00            .byte	0
11149 272F                        00            .byte	0
11150 2730                        00            .byte	0
11151                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11152 2731                        00            .byte	0
11153 2732                        00            .byte	0
11154 2733                        00            .byte	0
11155 2734                        00            .byte	0
11156 2735                        00            .byte	0
11157 2736                        00            .byte	0
11158 2737                        C0            .byte	$C0
11159 2738                        C0            .byte	$C0
11160 2739                        C0            .byte	$C0
11161 273A                        FE            .byte	$FE
11162 273B                        00            .byte	0
11163 273C                        00            .byte	0
11164 273D                        00            .byte	0
11165 273E                        00            .byte	0
11166 273F                        00            .byte	0
11167 2740                        00            .byte	0
11168                                           ! 1406  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11169 2741                        00            .byte	0
11170 2742                        00            .byte	0
11171 2743                        00            .byte	0
11172 2744                        00            .byte	0
11173 2745                        00            .byte	0
11174 2746                        24            .byte	$24
11175 2747                        66            .byte	$66
11176 2748                        FF            .byte	$FF
11177 2749                        66            .byte	$66
11178 274A                        24            .byte	$24
11179 274B                        00            .byte	0
11180 274C                        00            .byte	0
11181 274D                        00            .byte	0
11182 274E                        00            .byte	0
11183 274F                        00            .byte	0
11184 2750                        00            .byte	0
11185                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11186 2751                        00            .byte	0
11187 2752                        00            .byte	0
11188 2753                        00            .byte	0
11189 2754                        00            .byte	0
11190 2755                        10            .byte	$10
11191 2756                        38            .byte	$38
11192 2757                        38            .byte	$38
11193 2758                        7C            .byte	$7C
11194 2759                        7C            .byte	$7C
11195 275A                        FE            .byte	$FE
11196 275B                        FE            .byte	$FE
11197 275C                        00            .byte	0
11198 275D                        00            .byte	0
11199 275E                        00            .byte	0
11200 275F                        00            .byte	0
11201 2760                        00            .byte	0
11202                                           ! 1408  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11203 2761                        00            .byte	0
11204 2762                        00            .byte	0
11205 2763                        00            .byte	0
11206 2764                        00            .byte	0
11207 2765                        FE            .byte	$FE
11208 2766                        FE            .byte	$FE
11209 2767                        7C            .byte	$7C
11210 2768                        7C            .byte	$7C
11211 2769                        38            .byte	$38
11212 276A                        38            .byte	$38
11213 276B                        10            .byte	$10
11214 276C                        00            .byte	0
11215 276D                        00            .byte	0
11216 276E                        00            .byte	0
11217 276F                        00            .byte	0
11218 2770                        00            .byte	0
11219                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
11220 2771                        00            .byte	0
11221 2772                        00            .byte	0
11222 2773                        00            .byte	0
11223 2774                        00            .byte	0
11224 2775                        00            .byte	0
11225 2776                        00            .byte	0
11226 2777                        00            .byte	0
11227 2778                        00            .byte	0
11228 2779                        00            .byte	0
11229 277A                        00            .byte	0
11230 277B                        00            .byte	0
11231 277C                        00            .byte	0
11232 277D                        00            .byte	0
11233 277E                        00            .byte	0
11234 277F                        00            .byte	0
11235                                           ! 1409 0x00,
11236 2780                        00            .byte	0
11237                                           ! 1410  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11238 2781                        00            .byte	0
11239 2782                        00            .byte	0
11240 2783                        18            .byte	$18
11241 2784                        3C            .byte	$3C
11242 2785                        3C            .byte	$3C
11243 2786                        3C            .byte	$3C
11244 2787                        18            .byte	$18
11245 2788                        18            .byte	$18
11246 2789                        18            .byte	$18
11247 278A                        00            .byte	0
11248 278B                        18            .byte	$18
11249 278C                        18            .byte	$18
11250 278D                        00            .byte	0
11251 278E                        00            .byte	0
11252 278F                        00            .byte	0
11253 2790                        00            .byte	0
11254                                           ! 1411  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11255 2791                        00            .byte	0
11256 2792                        66            .byte	$66
11257 2793                        66            .byte	$66
11258 2794                        66            .byte	$66
11259 2795                        24            .byte	$24
11260 2796                        00            .byte	0
11261 2797                        00            .byte	0
11262 2798                        00            .byte	0
11263 2799                        00            .byte	0
11264 279A                        00            .byte	0
11265 279B                        00            .byte	0
11266 279C                        00            .byte	0
11267 279D                        00            .byte	0
11268 279E                        00            .byte	0
11269 279F                        00            .byte	0
11270 27A0                        00            .byte	0
11271                                           ! 1412  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11272 27A1                        00            .byte	0
11273 27A2                        00            .byte	0
11274 27A3                        00            .byte	0
11275 27A4                        6C            .byte	$6C
11276 27A5                        6C            .byte	$6C
11277 27A6                        FE            .byte	$FE
11278 27A7                        6C            .byte	$6C
11279 27A8                        6C            .byte	$6C
11280 27A9                        6C            .byte	$6C
11281 27AA                        FE            .byte	$FE
11282 27AB                        6C            .byte	$6C
11283 27AC                        6C            .byte	$6C
11284 27AD                        00            .byte	0
11285 27AE                        00            .byte	0
11286 27AF                        00            .byte	0
11287 27B0                        00            .byte	0
11288                                           ! 1413  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11289 27B1                        18            .byte	$18
11290 27B2                        18            .byte	$18
11291 27B3                        7C            .byte	$7C
11292 27B4                        C6            .byte	$C6
11293 27B5                        C2            .byte	$C2
11294 27B6                        C0            .byte	$C0
11295 27B7                        7C            .byte	$7C
11296 27B8                        06            .byte	6
11297 27B9                        06            .byte	6
11298 27BA                        86            .byte	$86
11299 27BB                        C6            .byte	$C6
11300 27BC                        7C            .byte	$7C
11301 27BD                        18            .byte	$18
11302 27BE                        18            .byte	$18
11303 27BF                        00            .byte	0
11304 27C0                        00            .byte	0
11305                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11306 27C1                        00            .byte	0
11307 27C2                        00            .byte	0
11308 27C3                        00            .byte	0
11309 27C4                        00            .byte	0
11310 27C5                        C2            .byte	$C2
11311 27C6                        C6            .byte	$C6
11312 27C7                        0C            .byte	$C
11313 27C8                        18            .byte	$18
11314 27C9                        30            .byte	$30
11315 27CA                        60            .byte	$60
11316 27CB                        C6            .byte	$C6
11317 27CC                        86            .byte	$86
11318 27CD                        00            .byte	0
11319 27CE                        00            .byte	0
11320 27CF                        00            .byte	0
11321 27D0                        00            .byte	0
11322                                           ! 1415  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11323 27D1                        00            .byte	0
11324 27D2                        00            .byte	0
11325 27D3                        38            .byte	$38
11326 27D4                        6C            .byte	$6C
11327 27D5                        6C            .byte	$6C
11328 27D6                        38            .byte	$38
11329 27D7                        76            .byte	$76
11330 27D8                        DC            .byte	$DC
11331 27D9                        CC            .byte	$CC
11332 27DA                        CC            .byte	$CC
11333 27DB                        CC            .byte	$CC
11334 27DC                        76            .byte	$76
11335 27DD                        00            .byte	0
11336 27DE                        00            .byte	0
11337 27DF                        00            .byte	0
11338 27E0                        00            .byte	0
11339                                           ! 1416  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11340 27E1                        00            .byte	0
11341 27E2                        30            .byte	$30
11342 27E3                        30            .byte	$30
11343 27E4                        30            .byte	$30
11344 27E5                        60            .byte	$60
11345 27E6                        00            .byte	0
11346 27E7                        00            .byte	0
11347 27E8                        00            .byte	0
11348 27E9                        00            .byte	0
11349 27EA                        00            .byte	0
11350 27EB                        00            .byte	0
11351 27EC                        00            .byte	0
11352 27ED                        00            .byte	0
11353 27EE                        00            .byte	0
11354 27EF                        00            .byte	0
11355 27F0                        00            .byte	0
11356                                           ! 1417  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11357 27F1                        00            .byte	0
11358 27F2                        00            .byte	0
11359 27F3                        0C            .byte	$C
11360 27F4                        18            .byte	$18
11361 27F5                        30            .byte	$30
11362 27F6                        30            .byte	$30
11363 27F7                        30            .byte	$30
11364 27F8                        30            .byte	$30
11365 27F9                        30            .byte	$30
11366 27FA                        30            .byte	$30
11367 27FB                        18            .byte	$18
11368 27FC                        0C            .byte	$C
11369 27FD                        00            .byte	0
11370 27FE                        00            .byte	0
11371 27FF                        00            .byte	0
11372 2800                        00            .byte	0
11373                                           ! 1418  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11374 2801                        00            .byte	0
11375 2802                        00            .byte	0
11376 2803                        30            .byte	$30
11377 2804                        18            .byte	$18
11378 2805                        0C            .byte	$C
11379 2806                        0C            .byte	$C
11380 2807                        0C            .byte	$C
11381 2808                        0C            .byte	$C
11382 2809                        0C            .byte	$C
11383 280A                        0C            .byte	$C
11384 280B                        18            .byte	$18
11385 280C                        30            .byte	$30
11386 280D                        00            .byte	0
11387 280E                        00            .byte	0
11388 280F                        00            .byte	0
11389 2810                        00            .byte	0
11390                                           ! 1419  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11391 2811                        00            .byte	0
11392 2812                        00            .byte	0
11393 2813                        00            .byte	0
11394 2814                        00            .byte	0
11395 2815                        00            .byte	0
11396 2816                        66            .byte	$66
11397 2817                        3C            .byte	$3C
11398 2818                        FF            .byte	$FF
11399 2819                        3C            .byte	$3C
11400 281A                        66            .byte	$66
11401 281B                        00            .byte	0
11402 281C                        00            .byte	0
11403 281D                        00            .byte	0
11404 281E                        00            .byte	0
11405 281F                        00            .byte	0
11406 2820                        00            .byte	0
11407                                           ! 1420  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11408 2821                        00            .byte	0
11409 2822                        00            .byte	0
11410 2823                        00            .byte	0
11411 2824                        00            .byte	0
11412 2825                        00            .byte	0
11413 2826                        18            .byte	$18
11414 2827                        18            .byte	$18
11415 2828                        7E            .byte	$7E
11416 2829                        18            .byte	$18
11417 282A                        18            .byte	$18
11418 282B                        00            .byte	0
11419 282C                        00            .byte	0
11420 282D                        00            .byte	0
11421 282E                        00            .byte	0
11422 282F                        00            .byte	0
11423 2830                        00            .byte	0
11424                                           ! 1421  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11425 2831                        00            .byte	0
11426 2832                        00            .byte	0
11427 2833                        00            .byte	0
11428 2834                        00            .byte	0
11429 2835                        00            .byte	0
11430 2836                        00            .byte	0
11431 2837                        00            .byte	0
11432 2838                        00            .byte	0
11433 2839                        00            .byte	0
11434 283A                        18            .byte	$18
11435 283B                        18            .byte	$18
11436 283C                        18            .byte	$18
11437 283D                        30            .byte	$30
11438 283E                        00            .byte	0
11439 283F                        00            .byte	0
11440 2840                        00            .byte	0
11441                                           ! 1422  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11442 2841                        00            .byte	0
11443 2842                        00            .byte	0
11444 2843                        00            .byte	0
11445 2844                        00            .byte	0
11446 2845                        00            .byte	0
11447 2846                        00            .byte	0
11448 2847                        00            .byte	0
11449 2848                        FE            .byte	$FE
11450 2849                        00            .byte	0
11451 284A                        00            .byte	0
11452 284B                        00            .byte	0
11453 284C                        00            .byte	0
11454 284D                        00            .byte	0
11455 284E                        00            .byte	0
11456 284F                        00            .byte	0
11457 2850                        00            .byte	0
11458                                           ! 1423  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11459 2851                        00            .byte	0
11460 2852                        00            .byte	0
11461 2853                        00            .byte	0
11462 2854                        00            .byte	0
11463 2855                        00            .byte	0
11464 2856                        00            .byte	0
11465 2857                        00            .byte	0
11466 2858                        00            .byte	0
11467 2859                        00            .byte	0
11468 285A                        00            .byte	0
11469 285B                        18            .byte	$18
11470 285C                        18            .byte	$18
11471 285D                        00            .byte	0
11472 285E                        00            .byte	0
11473 285F                        00            .byte	0
11474 2860                        00            .byte	0
11475                                           ! 1424  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11476 2861                        00            .byte	0
11477 2862                        00            .byte	0
11478 2863                        00            .byte	0
11479 2864                        00            .byte	0
11480 2865                        02            .byte	2
11481 2866                        06            .byte	6
11482 2867                        0C            .byte	$C
11483 2868                        18            .byte	$18
11484 2869                        30            .byte	$30
11485 286A                        60            .byte	$60
11486 286B                        C0            .byte	$C0
11487 286C                        80            .byte	$80
11488 286D                        00            .byte	0
11489 286E                        00            .byte	0
11490 286F                        00            .byte	0
11491 2870                        00            .byte	0
11492                                           ! 1425  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11493 2871                        00            .byte	0
11494 2872                        00            .byte	0
11495 2873                        3C            .byte	$3C
11496 2874                        66            .byte	$66
11497 2875                        C3            .byte	$C3
11498 2876                        C3            .byte	$C3
11499 2877                        DB            .byte	$DB
11500 2878                        DB            .byte	$DB
11501 2879                        C3            .byte	$C3
11502 287A                        C3            .byte	$C3
11503 287B                        66            .byte	$66
11504 287C                        3C            .byte	$3C
11505 287D                        00            .byte	0
11506 287E                        00            .byte	0
11507 287F                        00            .byte	0
11508 2880                        00            .byte	0
11509                                           ! 1426  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11510 2881                        00            .byte	0
11511 2882                        00            .byte	0
11512 2883                        18            .byte	$18
11513 2884                        38            .byte	$38
11514 2885                        78            .byte	$78
11515 2886                        18            .byte	$18
11516 2887                        18            .byte	$18
11517 2888                        18            .byte	$18
11518 2889                        18            .byte	$18
11519 288A                        18            .byte	$18
11520 288B                        18            .byte	$18
11521 288C                        7E            .byte	$7E
11522 288D                        00            .byte	0
11523 288E                        00            .byte	0
11524 288F                        00            .byte	0
11525 2890                        00            .byte	0
11526                                           ! 1427  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11527 2891                        00            .byte	0
11528 2892                        00            .byte	0
11529 2893                        7C            .byte	$7C
11530 2894                        C6            .byte	$C6
11531 2895                        06            .byte	6
11532 2896                        0C            .byte	$C
11533 2897                        18            .byte	$18
11534 2898                        30            .byte	$30
11535 2899                        60            .byte	$60
11536 289A                        C0            .byte	$C0
11537 289B                        C6            .byte	$C6
11538 289C                        FE            .byte	$FE
11539 289D                        00            .byte	0
11540 289E                        00            .byte	0
11541 289F                        00            .byte	0
11542 28A0                        00            .byte	0
11543                                           ! 1428  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11544 28A1                        00            .byte	0
11545 28A2                        00            .byte	0
11546 28A3                        7C            .byte	$7C
11547 28A4                        C6            .byte	$C6
11548 28A5                        06            .byte	6
11549 28A6                        06            .byte	6
11550 28A7                        3C            .byte	$3C
11551 28A8                        06            .byte	6
11552 28A9                        06            .byte	6
11553 28AA                        06            .byte	6
11554 28AB                        C6            .byte	$C6
11555 28AC                        7C            .byte	$7C
11556 28AD                        00            .byte	0
11557 28AE                        00            .byte	0
11558 28AF                        00            .byte	0
11559 28B0                        00            .byte	0
11560                                           ! 1429  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11561 28B1                        00            .byte	0
11562 28B2                        00            .byte	0
11563 28B3                        0C            .byte	$C
11564 28B4                        1C            .byte	$1C
11565 28B5                        3C            .byte	$3C
11566 28B6                        6C            .byte	$6C
11567 28B7                        CC            .byte	$CC
11568 28B8                        FE            .byte	$FE
11569 28B9                        0C            .byte	$C
11570 28BA                        0C            .byte	$C
11571 28BB                        0C            .byte	$C
11572 28BC                        1E            .byte	$1E
11573 28BD                        00            .byte	0
11574 28BE                        00            .byte	0
11575 28BF                        00            .byte	0
11576 28C0                        00            .byte	0
11577                                           ! 1430  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11578 28C1                        00            .byte	0
11579 28C2                        00            .byte	0
11580 28C3                        FE            .byte	$FE
11581 28C4                        C0            .byte	$C0
11582 28C5                        C0            .byte	$C0
11583 28C6                        C0            .byte	$C0
11584 28C7                        FC            .byte	$FC
11585 28C8                        06            .byte	6
11586 28C9                        06            .byte	6
11587 28CA                        06            .byte	6
11588 28CB                        C6            .byte	$C6
11589 28CC                        7C            .byte	$7C
11590 28CD                        00            .byte	0
11591 28CE                        00            .byte	0
11592 28CF                        00            .byte	0
11593 28D0                        00            .byte	0
11594                                           ! 1431  0x00
11595                                           ! 1431 , 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11596 28D1                        00            .byte	0
11597 28D2                        00            .byte	0
11598 28D3                        38            .byte	$38
11599 28D4                        60            .byte	$60
11600 28D5                        C0            .byte	$C0
11601 28D6                        C0            .byte	$C0
11602 28D7                        FC            .byte	$FC
11603 28D8                        C6            .byte	$C6
11604 28D9                        C6            .byte	$C6
11605 28DA                        C6            .byte	$C6
11606 28DB                        C6            .byte	$C6
11607 28DC                        7C            .byte	$7C
11608 28DD                        00            .byte	0
11609 28DE                        00            .byte	0
11610 28DF                        00            .byte	0
11611 28E0                        00            .byte	0
11612                                           ! 1432  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11613 28E1                        00            .byte	0
11614 28E2                        00            .byte	0
11615 28E3                        FE            .byte	$FE
11616 28E4                        C6            .byte	$C6
11617 28E5                        06            .byte	6
11618 28E6                        06            .byte	6
11619 28E7                        0C            .byte	$C
11620 28E8                        18            .byte	$18
11621 28E9                        30            .byte	$30
11622 28EA                        30            .byte	$30
11623 28EB                        30            .byte	$30
11624 28EC                        30            .byte	$30
11625 28ED                        00            .byte	0
11626 28EE                        00            .byte	0
11627 28EF                        00            .byte	0
11628 28F0                        00            .byte	0
11629                                           ! 1433  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11630 28F1                        00            .byte	0
11631 28F2                        00            .byte	0
11632 28F3                        7C            .byte	$7C
11633 28F4                        C6            .byte	$C6
11634 28F5                        C6            .byte	$C6
11635 28F6                        C6            .byte	$C6
11636 28F7                        7C            .byte	$7C
11637 28F8                        C6            .byte	$C6
11638 28F9                        C6            .byte	$C6
11639 28FA                        C6            .byte	$C6
11640 28FB                        C6            .byte	$C6
11641 28FC                        7C            .byte	$7C
11642 28FD                        00            .byte	0
11643 28FE                        00            .byte	0
11644 28FF                        00            .byte	0
11645 2900                        00            .byte	0
11646                                           ! 1434  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11647 2901                        00            .byte	0
11648 2902                        00            .byte	0
11649 2903                        7C            .byte	$7C
11650 2904                        C6            .byte	$C6
11651 2905                        C6            .byte	$C6
11652 2906                        C6            .byte	$C6
11653 2907                        7E            .byte	$7E
11654 2908                        06            .byte	6
11655 2909                        06            .byte	6
11656 290A                        06            .byte	6
11657 290B                        0C            .byte	$C
11658 290C                        78            .byte	$78
11659 290D                        00            .byte	0
11660 290E                        00            .byte	0
11661 290F                        00            .byte	0
11662 2910                        00            .byte	0
11663                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11664 2911                        00            .byte	0
11665 2912                        00            .byte	0
11666 2913                        00            .byte	0
11667 2914                        00            .byte	0
11668 2915                        18            .byte	$18
11669 2916                        18            .byte	$18
11670 2917                        00            .byte	0
11671 2918                        00            .byte	0
11672 2919                        00            .byte	0
11673 291A                        18            .byte	$18
11674 291B                        18            .byte	$18
11675 291C                        00            .byte	0
11676 291D                        00            .byte	0
11677 291E                        00            .byte	0
11678 291F                        00            .byte	0
11679 2920                        00            .byte	0
11680                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11681 2921                        00            .byte	0
11682 2922                        00            .byte	0
11683 2923                        00            .byte	0
11684 2924                        00            .byte	0
11685 2925                        18            .byte	$18
11686 2926                        18            .byte	$18
11687 2927                        00            .byte	0
11688 2928                        00            .byte	0
11689 2929                        00            .byte	0
11690 292A                        18            .byte	$18
11691 292B                        18            .byte	$18
11692 292C                        30            .byte	$30
11693 292D                        00            .byte	0
11694 292E                        00            .byte	0
11695 292F                        00            .byte	0
11696 2930                        00            .byte	0
11697                                           ! 1437  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11698 2931                        00            .byte	0
11699 2932                        00            .byte	0
11700 2933                        00            .byte	0
11701 2934                        06            .byte	6
11702 2935                        0C            .byte	$C
11703 2936                        18            .byte	$18
11704 2937                        30            .byte	$30
11705 2938                        60            .byte	$60
11706 2939                        30            .byte	$30
11707 293A                        18            .byte	$18
11708 293B                        0C            .byte	$C
11709 293C                        06            .byte	6
11710 293D                        00            .byte	0
11711 293E                        00            .byte	0
11712 293F                        00            .byte	0
11713 2940                        00            .byte	0
11714                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11715 2941                        00            .byte	0
11716 2942                        00            .byte	0
11717 2943                        00            .byte	0
11718 2944                        00            .byte	0
11719 2945                        00            .byte	0
11720 2946                        7E            .byte	$7E
11721 2947                        00            .byte	0
11722 2948                        00            .byte	0
11723 2949                        7E            .byte	$7E
11724 294A                        00            .byte	0
11725 294B                        00            .byte	0
11726 294C                        00            .byte	0
11727 294D                        00            .byte	0
11728 294E                        00            .byte	0
11729 294F                        00            .byte	0
11730 2950                        00            .byte	0
11731                                           ! 1439  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11732 2951                        00            .byte	0
11733 2952                        00            .byte	0
11734 2953                        00            .byte	0
11735 2954                        60            .byte	$60
11736 2955                        30            .byte	$30
11737 2956                        18            .byte	$18
11738 2957                        0C            .byte	$C
11739 2958                        06            .byte	6
11740 2959                        0C            .byte	$C
11741 295A                        18            .byte	$18
11742 295B                        30            .byte	$30
11743 295C                        60            .byte	$60
11744 295D                        00            .byte	0
11745 295E                        00            .byte	0
11746 295F                        00            .byte	0
11747 2960                        00            .byte	0
11748                                           ! 1440  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11749 2961                        00            .byte	0
11750 2962                        00            .byte	0
11751 2963                        7C            .byte	$7C
11752 2964                        C6            .byte	$C6
11753 2965                        C6            .byte	$C6
11754 2966                        0C            .byte	$C
11755 2967                        18            .byte	$18
11756 2968                        18            .byte	$18
11757 2969                        18            .byte	$18
11758 296A                        00            .byte	0
11759 296B                        18            .byte	$18
11760 296C                        18            .byte	$18
11761 296D                        00            .byte	0
11762 296E                        00            .byte	0
11763 296F                        00            .byte	0
11764 2970                        00            .byte	0
11765                                           ! 1441  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11766 2971                        00            .byte	0
11767 2972                        00            .byte	0
11768 2973                        00            .byte	0
11769 2974                        7C            .byte	$7C
11770 2975                        C6            .byte	$C6
11771 2976                        C6            .byte	$C6
11772 2977                        DE            .byte	$DE
11773 2978                        DE            .byte	$DE
11774 2979                        DE            .byte	$DE
11775 297A                        DC            .byte	$DC
11776 297B                        C0            .byte	$C0
11777 297C                        7C            .byte	$7C
11778 297D                        00            .byte	0
11779 297E                        00            .byte	0
11780 297F                        00            .byte	0
11781 2980                        00            .byte	0
11782                                           ! 1442  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11783 2981                        00            .byte	0
11784 2982                        00            .byte	0
11785 2983                        10            .byte	$10
11786 2984                        38            .byte	$38
11787 2985                        6C            .byte	$6C
11788 2986                        C6            .byte	$C6
11789 2987                        C6            .byte	$C6
11790 2988                        FE            .byte	$FE
11791 2989                        C6            .byte	$C6
11792 298A                        C6            .byte	$C6
11793 298B                        C6            .byte	$C6
11794 298C                        C6            .byte	$C6
11795 298D                        00            .byte	0
11796 298E                        00            .byte	0
11797 298F                        00            .byte	0
11798 2990                        00            .byte	0
11799                                           ! 1443  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11800 2991                        00            .byte	0
11801 2992                        00            .byte	0
11802 2993                        FC            .byte	$FC
11803 2994                        66            .byte	$66
11804 2995                        66            .byte	$66
11805 2996                        66            .byte	$66
11806 2997                        7C            .byte	$7C
11807 2998                        66            .byte	$66
11808 2999                        66            .byte	$66
11809 299A                        66            .byte	$66
11810 299B                        66            .byte	$66
11811 299C                        FC            .byte	$FC
11812 299D                        00            .byte	0
11813 299E                        00            .byte	0
11814 299F                        00            .byte	0
11815 29A0                        00            .byte	0
11816                                           ! 1444  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11817 29A1                        00            .byte	0
11818 29A2                        00            .byte	0
11819 29A3                        3C            .byte	$3C
11820 29A4                        66            .byte	$66
11821 29A5                        C2            .byte	$C2
11822 29A6                        C0            .byte	$C0
11823 29A7                        C0            .byte	$C0
11824 29A8                        C0            .byte	$C0
11825 29A9                        C0            .byte	$C0
11826 29AA                        C2            .byte	$C2
11827 29AB                        66            .byte	$66
11828 29AC                        3C            .byte	$3C
11829 29AD                        00            .byte	0
11830 29AE                        00            .byte	0
11831 29AF                        00            .byte	0
11832 29B0                        00            .byte	0
11833                                           ! 1445  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11834 29B1                        00            .byte	0
11835 29B2                        00            .byte	0
11836 29B3                        F8            .byte	$F8
11837 29B4                        6C            .byte	$6C
11838 29B5                        66            .byte	$66
11839 29B6                        66            .byte	$66
11840 29B7                        66            .byte	$66
11841 29B8                        66            .byte	$66
11842 29B9                        66            .byte	$66
11843 29BA                        66            .byte	$66
11844 29BB                        6C            .byte	$6C
11845 29BC                        F8            .byte	$F8
11846 29BD                        00            .byte	0
11847 29BE                        00            .byte	0
11848 29BF                        00            .byte	0
11849 29C0                        00            .byte	0
11850                                           ! 1446  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11851 29C1                        00            .byte	0
11852 29C2                        00            .byte	0
11853 29C3                        FE            .byte	$FE
11854 29C4                        66            .byte	$66
11855 29C5                        62            .byte	$62
11856 29C6                        68            .byte	$68
11857 29C7                        78            .byte	$78
11858 29C8                        68            .byte	$68
11859 29C9                        60            .byte	$60
11860 29CA                        62            .byte	$62
11861 29CB                        66            .byte	$66
11862 29CC                        FE            .byte	$FE
11863 29CD                        00            .byte	0
11864 29CE                        00            .byte	0
11865 29CF                        00            .byte	0
11866 29D0                        00            .byte	0
11867                                           ! 1447  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11868 29D1                        00            .byte	0
11869 29D2                        00            .byte	0
11870 29D3                        FE            .byte	$FE
11871 29D4                        66            .byte	$66
11872 29D5                        62            .byte	$62
11873 29D6                        68            .byte	$68
11874 29D7                        78            .byte	$78
11875 29D8                        68            .byte	$68
11876 29D9                        60            .byte	$60
11877 29DA                        60            .byte	$60
11878 29DB                        60            .byte	$60
11879 29DC                        F0            .byte	$F0
11880 29DD                        00            .byte	0
11881 29DE                        00            .byte	0
11882 29DF                        00            .byte	0
11883 29E0                        00            .byte	0
11884                                           ! 1448  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11885 29E1                        00            .byte	0
11886 29E2                        00            .byte	0
11887 29E3                        3C            .byte	$3C
11888 29E4                        66            .byte	$66
11889 29E5                        C2            .byte	$C2
11890 29E6                        C0            .byte	$C0
11891 29E7                        C0            .byte	$C0
11892 29E8                        DE            .byte	$DE
11893 29E9                        C6            .byte	$C6
11894 29EA                        C6            .byte	$C6
11895 29EB                        66            .byte	$66
11896 29EC                        3A            .byte	$3A
11897 29ED                        00            .byte	0
11898 29EE                        00            .byte	0
11899 29EF                        00            .byte	0
11900 29F0                        00            .byte	0
11901                                           ! 1449  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11902 29F1                        00            .byte	0
11903 29F2                        00            .byte	0
11904 29F3                        C6            .byte	$C6
11905 29F4                        C6            .byte	$C6
11906 29F5                        C6            .byte	$C6
11907 29F6                        C6            .byte	$C6
11908 29F7                        FE            .byte	$FE
11909 29F8                        C6            .byte	$C6
11910 29F9                        C6            .byte	$C6
11911 29FA                        C6            .byte	$C6
11912 29FB                        C6            .byte	$C6
11913 29FC                        C6            .byte	$C6
11914 29FD                        00            .byte	0
11915 29FE                        00            .byte	0
11916 29FF                        00            .byte	0
11917 2A00                        00            .byte	0
11918                                           ! 1450  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11919 2A01                        00            .byte	0
11920 2A02                        00            .byte	0
11921 2A03                        3C            .byte	$3C
11922 2A04                        18            .byte	$18
11923 2A05                        18            .byte	$18
11924 2A06                        18            .byte	$18
11925 2A07                        18            .byte	$18
11926 2A08                        18            .byte	$18
11927 2A09                        18            .byte	$18
11928 2A0A                        18            .byte	$18
11929 2A0B                        18            .byte	$18
11930 2A0C                        3C            .byte	$3C
11931 2A0D                        00            .byte	0
11932 2A0E                        00            .byte	0
11933 2A0F                        00            .byte	0
11934 2A10                        00            .byte	0
11935                                           ! 1451  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11936 2A11                        00            .byte	0
11937 2A12                        00            .byte	0
11938 2A13                        1E            .byte	$1E
11939 2A14                        0C            .byte	$C
11940 2A15                        0C            .byte	$C
11941 2A16                        0C            .byte	$C
11942 2A17                        0C            .byte	$C
11943 2A18                        0C            .byte	$C
11944 2A19                        CC            .byte	$CC
11945 2A1A                        CC            .byte	$CC
11946 2A1B                        CC            .byte	$CC
11947 2A1C                        78            .byte	$78
11948 2A1D                        00            .byte	0
11949 2A1E                        00            .byte	0
11950 2A1F                        00            .byte	0
11951 2A20                        00            .byte	0
11952                                           ! 1452  0x00, 0x00, 0xe
11953 2A21                        00            .byte	0
11954 2A22                        00            .byte	0
11955                                           ! 1452 6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11956 2A23                        E6            .byte	$E6
11957 2A24                        66            .byte	$66
11958 2A25                        66            .byte	$66
11959 2A26                        6C            .byte	$6C
11960 2A27                        78            .byte	$78
11961 2A28                        78            .byte	$78
11962 2A29                        6C            .byte	$6C
11963 2A2A                        66            .byte	$66
11964 2A2B                        66            .byte	$66
11965 2A2C                        E6            .byte	$E6
11966 2A2D                        00            .byte	0
11967 2A2E                        00            .byte	0
11968 2A2F                        00            .byte	0
11969 2A30                        00            .byte	0
11970                                           ! 1453  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11971 2A31                        00            .byte	0
11972 2A32                        00            .byte	0
11973 2A33                        F0            .byte	$F0
11974 2A34                        60            .byte	$60
11975 2A35                        60            .byte	$60
11976 2A36                        60            .byte	$60
11977 2A37                        60            .byte	$60
11978 2A38                        60            .byte	$60
11979 2A39                        60            .byte	$60
11980 2A3A                        62            .byte	$62
11981 2A3B                        66            .byte	$66
11982 2A3C                        FE            .byte	$FE
11983 2A3D                        00            .byte	0
11984 2A3E                        00            .byte	0
11985 2A3F                        00            .byte	0
11986 2A40                        00            .byte	0
11987                                           ! 1454  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11988 2A41                        00            .byte	0
11989 2A42                        00            .byte	0
11990 2A43                        C3            .byte	$C3
11991 2A44                        E7            .byte	$E7
11992 2A45                        FF            .byte	$FF
11993 2A46                        FF            .byte	$FF
11994 2A47                        DB            .byte	$DB
11995 2A48                        C3            .byte	$C3
11996 2A49                        C3            .byte	$C3
11997 2A4A                        C3            .byte	$C3
11998 2A4B                        C3            .byte	$C3
11999 2A4C                        C3            .byte	$C3
12000 2A4D                        00            .byte	0
12001 2A4E                        00            .byte	0
12002 2A4F                        00            .byte	0
12003 2A50                        00            .byte	0
12004                                           ! 1455  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12005 2A51                        00            .byte	0
12006 2A52                        00            .byte	0
12007 2A53                        C6            .byte	$C6
12008 2A54                        E6            .byte	$E6
12009 2A55                        F6            .byte	$F6
12010 2A56                        FE            .byte	$FE
12011 2A57                        DE            .byte	$DE
12012 2A58                        CE            .byte	$CE
12013 2A59                        C6            .byte	$C6
12014 2A5A                        C6            .byte	$C6
12015 2A5B                        C6            .byte	$C6
12016 2A5C                        C6            .byte	$C6
12017 2A5D                        00            .byte	0
12018 2A5E                        00            .byte	0
12019 2A5F                        00            .byte	0
12020 2A60                        00            .byte	0
12021                                           ! 1456  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12022 2A61                        00            .byte	0
12023 2A62                        00            .byte	0
12024 2A63                        7C            .byte	$7C
12025 2A64                        C6            .byte	$C6
12026 2A65                        C6            .byte	$C6
12027 2A66                        C6            .byte	$C6
12028 2A67                        C6            .byte	$C6
12029 2A68                        C6            .byte	$C6
12030 2A69                        C6            .byte	$C6
12031 2A6A                        C6            .byte	$C6
12032 2A6B                        C6            .byte	$C6
12033 2A6C                        7C            .byte	$7C
12034 2A6D                        00            .byte	0
12035 2A6E                        00            .byte	0
12036 2A6F                        00            .byte	0
12037 2A70                        00            .byte	0
12038                                           ! 1457  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12039 2A71                        00            .byte	0
12040 2A72                        00            .byte	0
12041 2A73                        FC            .byte	$FC
12042 2A74                        66            .byte	$66
12043 2A75                        66            .byte	$66
12044 2A76                        66            .byte	$66
12045 2A77                        7C            .byte	$7C
12046 2A78                        60            .byte	$60
12047 2A79                        60            .byte	$60
12048 2A7A                        60            .byte	$60
12049 2A7B                        60            .byte	$60
12050 2A7C                        F0            .byte	$F0
12051 2A7D                        00            .byte	0
12052 2A7E                        00            .byte	0
12053 2A7F                        00            .byte	0
12054 2A80                        00            .byte	0
12055                                           ! 1458  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12056 2A81                        00            .byte	0
12057 2A82                        00            .byte	0
12058 2A83                        7C            .byte	$7C
12059 2A84                        C6            .byte	$C6
12060 2A85                        C6            .byte	$C6
12061 2A86                        C6            .byte	$C6
12062 2A87                        C6            .byte	$C6
12063 2A88                        C6            .byte	$C6
12064 2A89                        C6            .byte	$C6
12065 2A8A                        D6            .byte	$D6
12066 2A8B                        DE            .byte	$DE
12067 2A8C                        7C            .byte	$7C
12068 2A8D                        0C            .byte	$C
12069 2A8E                        0E            .byte	$E
12070 2A8F                        00            .byte	0
12071 2A90                        00            .byte	0
12072                                           ! 1459  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12073 2A91                        00            .byte	0
12074 2A92                        00            .byte	0
12075 2A93                        FC            .byte	$FC
12076 2A94                        66            .byte	$66
12077 2A95                        66            .byte	$66
12078 2A96                        66            .byte	$66
12079 2A97                        7C            .byte	$7C
12080 2A98                        6C            .byte	$6C
12081 2A99                        66            .byte	$66
12082 2A9A                        66            .byte	$66
12083 2A9B                        66            .byte	$66
12084 2A9C                        E6            .byte	$E6
12085 2A9D                        00            .byte	0
12086 2A9E                        00            .byte	0
12087 2A9F                        00            .byte	0
12088 2AA0                        00            .byte	0
12089                                           ! 1460  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12090 2AA1                        00            .byte	0
12091 2AA2                        00            .byte	0
12092 2AA3                        7C            .byte	$7C
12093 2AA4                        C6            .byte	$C6
12094 2AA5                        C6            .byte	$C6
12095 2AA6                        60            .byte	$60
12096 2AA7                        38            .byte	$38
12097 2AA8                        0C            .byte	$C
12098 2AA9                        06            .byte	6
12099 2AAA                        C6            .byte	$C6
12100 2AAB                        C6            .byte	$C6
12101 2AAC                        7C            .byte	$7C
12102 2AAD                        00            .byte	0
12103 2AAE                        00            .byte	0
12104 2AAF                        00            .byte	0
12105 2AB0                        00            .byte	0
12106                                           ! 1461  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12107 2AB1                        00            .byte	0
12108 2AB2                        00            .byte	0
12109 2AB3                        FF            .byte	$FF
12110 2AB4                        DB            .byte	$DB
12111 2AB5                        99            .byte	$99
12112 2AB6                        18            .byte	$18
12113 2AB7                        18            .byte	$18
12114 2AB8                        18            .byte	$18
12115 2AB9                        18            .byte	$18
12116 2ABA                        18            .byte	$18
12117 2ABB                        18            .byte	$18
12118 2ABC                        3C            .byte	$3C
12119 2ABD                        00            .byte	0
12120 2ABE                        00            .byte	0
12121 2ABF                        00            .byte	0
12122 2AC0                        00            .byte	0
12123                                           ! 1462  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12124 2AC1                        00            .byte	0
12125 2AC2                        00            .byte	0
12126 2AC3                        C6            .byte	$C6
12127 2AC4                        C6            .byte	$C6
12128 2AC5                        C6            .byte	$C6
12129 2AC6                        C6            .byte	$C6
12130 2AC7                        C6            .byte	$C6
12131 2AC8                        C6            .byte	$C6
12132 2AC9                        C6            .byte	$C6
12133 2ACA                        C6            .byte	$C6
12134 2ACB                        C6            .byte	$C6
12135 2ACC                        7C            .byte	$7C
12136 2ACD                        00            .byte	0
12137 2ACE                        00            .byte	0
12138 2ACF                        00            .byte	0
12139 2AD0                        00            .byte	0
12140                                           ! 1463  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12141 2AD1                        00            .byte	0
12142 2AD2                        00            .byte	0
12143 2AD3                        C3            .byte	$C3
12144 2AD4                        C3            .byte	$C3
12145 2AD5                        C3            .byte	$C3
12146 2AD6                        C3            .byte	$C3
12147 2AD7                        C3            .byte	$C3
12148 2AD8                        C3            .byte	$C3
12149 2AD9                        C3            .byte	$C3
12150 2ADA                        66            .byte	$66
12151 2ADB                        3C            .byte	$3C
12152 2ADC                        18            .byte	$18
12153 2ADD                        00            .byte	0
12154 2ADE                        00            .byte	0
12155 2ADF                        00            .byte	0
12156 2AE0                        00            .byte	0
12157                                           ! 1464  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12158 2AE1                        00            .byte	0
12159 2AE2                        00            .byte	0
12160 2AE3                        C3            .byte	$C3
12161 2AE4                        C3            .byte	$C3
12162 2AE5                        C3            .byte	$C3
12163 2AE6                        C3            .byte	$C3
12164 2AE7                        C3            .byte	$C3
12165 2AE8                        DB            .byte	$DB
12166 2AE9                        DB            .byte	$DB
12167 2AEA                        FF            .byte	$FF
12168 2AEB                        66            .byte	$66
12169 2AEC                        66            .byte	$66
12170 2AED                        00            .byte	0
12171 2AEE                        00            .byte	0
12172 2AEF                        00            .byte	0
12173 2AF0                        00            .byte	0
12174                                           ! 1465  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12175 2AF1                        00            .byte	0
12176 2AF2                        00            .byte	0
12177 2AF3                        C3            .byte	$C3
12178 2AF4                        C3            .byte	$C3
12179 2AF5                        66            .byte	$66
12180 2AF6                        3C            .byte	$3C
12181 2AF7                        18            .byte	$18
12182 2AF8                        18            .byte	$18
12183 2AF9                        3C            .byte	$3C
12184 2AFA                        66            .byte	$66
12185 2AFB                        C3            .byte	$C3
12186 2AFC                        C3            .byte	$C3
12187 2AFD                        00            .byte	0
12188 2AFE                        00            .byte	0
12189 2AFF                        00            .byte	0
12190 2B00                        00            .byte	0
12191                                           ! 1466  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12192 2B01                        00            .byte	0
12193 2B02                        00            .byte	0
12194 2B03                        C3            .byte	$C3
12195 2B04                        C3            .byte	$C3
12196 2B05                        C3            .byte	$C3
12197 2B06                        66            .byte	$66
12198 2B07                        3C            .byte	$3C
12199 2B08                        18            .byte	$18
12200 2B09                        18            .byte	$18
12201 2B0A                        18            .byte	$18
12202 2B0B                        18            .byte	$18
12203 2B0C                        3C            .byte	$3C
12204 2B0D                        00            .byte	0
12205 2B0E                        00            .byte	0
12206 2B0F                        00            .byte	0
12207 2B10                        00            .byte	0
12208                                           ! 1467  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12209 2B11                        00            .byte	0
12210 2B12                        00            .byte	0
12211 2B13                        FF            .byte	$FF
12212 2B14                        C3            .byte	$C3
12213 2B15                        86            .byte	$86
12214 2B16                        0C            .byte	$C
12215 2B17                        18            .byte	$18
12216 2B18                        30            .byte	$30
12217 2B19                        60            .byte	$60
12218 2B1A                        C1            .byte	$C1
12219 2B1B                        C3            .byte	$C3
12220 2B1C                        FF            .byte	$FF
12221 2B1D                        00            .byte	0
12222 2B1E                        00            .byte	0
12223 2B1F                        00            .byte	0
12224 2B20                        00            .byte	0
12225                                           ! 1468  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12226 2B21                        00            .byte	0
12227 2B22                        00            .byte	0
12228 2B23                        3C            .byte	$3C
12229 2B24                        30            .byte	$30
12230 2B25                        30            .byte	$30
12231 2B26                        30            .byte	$30
12232 2B27                        30            .byte	$30
12233 2B28                        30            .byte	$30
12234 2B29                        30            .byte	$30
12235 2B2A                        30            .byte	$30
12236 2B2B                        30            .byte	$30
12237 2B2C                        3C            .byte	$3C
12238 2B2D                        00            .byte	0
12239 2B2E                        00            .byte	0
12240 2B2F                        00            .byte	0
12241 2B30                        00            .byte	0
12242                                           ! 1469  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12243 2B31                        00            .byte	0
12244 2B32                        00            .byte	0
12245 2B33                        00            .byte	0
12246 2B34                        80            .byte	$80
12247 2B35                        C0            .byte	$C0
12248 2B36                        E0            .byte	$E0
12249 2B37                        70            .byte	$70
12250 2B38                        38            .byte	$38
12251 2B39                        1C            .byte	$1C
12252 2B3A                        0E            .byte	$E
12253 2B3B                        06            .byte	6
12254 2B3C                        02            .byte	2
12255 2B3D                        00            .byte	0
12256 2B3E                        00            .byte	0
12257 2B3F                        00            .byte	0
12258 2B40                        00            .byte	0
12259                                           ! 1470  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12260 2B41                        00            .byte	0
12261 2B42                        00            .byte	0
12262 2B43                        3C            .byte	$3C
12263 2B44                        0C            .byte	$C
12264 2B45                        0C            .byte	$C
12265 2B46                        0C            .byte	$C
12266 2B47                        0C            .byte	$C
12267 2B48                        0C            .byte	$C
12268 2B49                        0C            .byte	$C
12269 2B4A                        0C            .byte	$C
12270 2B4B                        0C            .byte	$C
12271 2B4C                        3C            .byte	$3C
12272 2B4D                        00            .byte	0
12273 2B4E                        00            .byte	0
12274 2B4F                        00            .byte	0
12275 2B50                        00            .byte	0
12276                                           ! 1471  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12277 2B51                        10            .byte	$10
12278 2B52                        38            .byte	$38
12279 2B53                        6C            .byte	$6C
12280 2B54                        C6            .byte	$C6
12281 2B55                        00            .byte	0
12282 2B56                        00            .byte	0
12283 2B57                        00            .byte	0
12284 2B58                        00            .byte	0
12285 2B59                        00            .byte	0
12286 2B5A                        00            .byte	0
12287 2B5B                        00            .byte	0
12288 2B5C                        00            .byte	0
12289 2B5D                        00            .byte	0
12290 2B5E                        00            .byte	0
12291 2B5F                        00            .byte	0
12292 2B60                        00            .byte	0
12293                                           ! 1472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12294 2B61                        00            .byte	0
12295 2B62                        00            .byte	0
12296 2B63                        00            .byte	0
12297 2B64                        00            .byte	0
12298 2B65                        00            .byte	0
12299 2B66                        00            .byte	0
12300 2B67                        00            .byte	0
12301 2B68                        00            .byte	0
12302 2B69                        00            .byte	0
12303 2B6A                        00            .byte	0
12304 2B6B                        00            .byte	0
12305 2B6C                        00            .byte	0
12306 2B6D                        00            .byte	0
12307 2B6E                        FF            .byte	$FF
12308 2B6F                        00            .byte	0
12309 2B70                        00            .byte	0
12310                                           ! 1473  0x30, 0x30, 0x18, 0x00, 0x
12311 2B71                        30            .byte	$30
12312 2B72                        30            .byte	$30
12313 2B73                        18            .byte	$18
12314 2B74                        00            .byte	0
12315                                           ! 1473 00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12316 2B75                        00            .byte	0
12317 2B76                        00            .byte	0
12318 2B77                        00            .byte	0
12319 2B78                        00            .byte	0
12320 2B79                        00            .byte	0
12321 2B7A                        00            .byte	0
12322 2B7B                        00            .byte	0
12323 2B7C                        00            .byte	0
12324 2B7D                        00            .byte	0
12325 2B7E                        00            .byte	0
12326 2B7F                        00            .byte	0
12327 2B80                        00            .byte	0
12328                                           ! 1474  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12329 2B81                        00            .byte	0
12330 2B82                        00            .byte	0
12331 2B83                        00            .byte	0
12332 2B84                        00            .byte	0
12333 2B85                        00            .byte	0
12334 2B86                        78            .byte	$78
12335 2B87                        0C            .byte	$C
12336 2B88                        7C            .byte	$7C
12337 2B89                        CC            .byte	$CC
12338 2B8A                        CC            .byte	$CC
12339 2B8B                        CC            .byte	$CC
12340 2B8C                        76            .byte	$76
12341 2B8D                        00            .byte	0
12342 2B8E                        00            .byte	0
12343 2B8F                        00            .byte	0
12344 2B90                        00            .byte	0
12345                                           ! 1475  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12346 2B91                        00            .byte	0
12347 2B92                        00            .byte	0
12348 2B93                        E0            .byte	$E0
12349 2B94                        60            .byte	$60
12350 2B95                        60            .byte	$60
12351 2B96                        78            .byte	$78
12352 2B97                        6C            .byte	$6C
12353 2B98                        66            .byte	$66
12354 2B99                        66            .byte	$66
12355 2B9A                        66            .byte	$66
12356 2B9B                        66            .byte	$66
12357 2B9C                        7C            .byte	$7C
12358 2B9D                        00            .byte	0
12359 2B9E                        00            .byte	0
12360 2B9F                        00            .byte	0
12361 2BA0                        00            .byte	0
12362                                           ! 1476  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12363 2BA1                        00            .byte	0
12364 2BA2                        00            .byte	0
12365 2BA3                        00            .byte	0
12366 2BA4                        00            .byte	0
12367 2BA5                        00            .byte	0
12368 2BA6                        7C            .byte	$7C
12369 2BA7                        C6            .byte	$C6
12370 2BA8                        C0            .byte	$C0
12371 2BA9                        C0            .byte	$C0
12372 2BAA                        C0            .byte	$C0
12373 2BAB                        C6            .byte	$C6
12374 2BAC                        7C            .byte	$7C
12375 2BAD                        00            .byte	0
12376 2BAE                        00            .byte	0
12377 2BAF                        00            .byte	0
12378 2BB0                        00            .byte	0
12379                                           ! 1477  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12380 2BB1                        00            .byte	0
12381 2BB2                        00            .byte	0
12382 2BB3                        1C            .byte	$1C
12383 2BB4                        0C            .byte	$C
12384 2BB5                        0C            .byte	$C
12385 2BB6                        3C            .byte	$3C
12386 2BB7                        6C            .byte	$6C
12387 2BB8                        CC            .byte	$CC
12388 2BB9                        CC            .byte	$CC
12389 2BBA                        CC            .byte	$CC
12390 2BBB                        CC            .byte	$CC
12391 2BBC                        76            .byte	$76
12392 2BBD                        00            .byte	0
12393 2BBE                        00            .byte	0
12394 2BBF                        00            .byte	0
12395 2BC0                        00            .byte	0
12396                                           ! 1478  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12397 2BC1                        00            .byte	0
12398 2BC2                        00            .byte	0
12399 2BC3                        00            .byte	0
12400 2BC4                        00            .byte	0
12401 2BC5                        00            .byte	0
12402 2BC6                        7C            .byte	$7C
12403 2BC7                        C6            .byte	$C6
12404 2BC8                        FE            .byte	$FE
12405 2BC9                        C0            .byte	$C0
12406 2BCA                        C0            .byte	$C0
12407 2BCB                        C6            .byte	$C6
12408 2BCC                        7C            .byte	$7C
12409 2BCD                        00            .byte	0
12410 2BCE                        00            .byte	0
12411 2BCF                        00            .byte	0
12412 2BD0                        00            .byte	0
12413                                           ! 1479  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12414 2BD1                        00            .byte	0
12415 2BD2                        00            .byte	0
12416 2BD3                        38            .byte	$38
12417 2BD4                        6C            .byte	$6C
12418 2BD5                        64            .byte	$64
12419 2BD6                        60            .byte	$60
12420 2BD7                        F0            .byte	$F0
12421 2BD8                        60            .byte	$60
12422 2BD9                        60            .byte	$60
12423 2BDA                        60            .byte	$60
12424 2BDB                        60            .byte	$60
12425 2BDC                        F0            .byte	$F0
12426 2BDD                        00            .byte	0
12427 2BDE                        00            .byte	0
12428 2BDF                        00            .byte	0
12429 2BE0                        00            .byte	0
12430                                           ! 1480  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12431 2BE1                        00            .byte	0
12432 2BE2                        00            .byte	0
12433 2BE3                        00            .byte	0
12434 2BE4                        00            .byte	0
12435 2BE5                        00            .byte	0
12436 2BE6                        76            .byte	$76
12437 2BE7                        CC            .byte	$CC
12438 2BE8                        CC            .byte	$CC
12439 2BE9                        CC            .byte	$CC
12440 2BEA                        CC            .byte	$CC
12441 2BEB                        CC            .byte	$CC
12442 2BEC                        7C            .byte	$7C
12443 2BED                        0C            .byte	$C
12444 2BEE                        CC            .byte	$CC
12445 2BEF                        78            .byte	$78
12446 2BF0                        00            .byte	0
12447                                           ! 1481  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12448 2BF1                        00            .byte	0
12449 2BF2                        00            .byte	0
12450 2BF3                        E0            .byte	$E0
12451 2BF4                        60            .byte	$60
12452 2BF5                        60            .byte	$60
12453 2BF6                        6C            .byte	$6C
12454 2BF7                        76            .byte	$76
12455 2BF8                        66            .byte	$66
12456 2BF9                        66            .byte	$66
12457 2BFA                        66            .byte	$66
12458 2BFB                        66            .byte	$66
12459 2BFC                        E6            .byte	$E6
12460 2BFD                        00            .byte	0
12461 2BFE                        00            .byte	0
12462 2BFF                        00            .byte	0
12463 2C00                        00            .byte	0
12464                                           ! 1482  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12465 2C01                        00            .byte	0
12466 2C02                        00            .byte	0
12467 2C03                        18            .byte	$18
12468 2C04                        18            .byte	$18
12469 2C05                        00            .byte	0
12470 2C06                        38            .byte	$38
12471 2C07                        18            .byte	$18
12472 2C08                        18            .byte	$18
12473 2C09                        18            .byte	$18
12474 2C0A                        18            .byte	$18
12475 2C0B                        18            .byte	$18
12476 2C0C                        3C            .byte	$3C
12477 2C0D                        00            .byte	0
12478 2C0E                        00            .byte	0
12479 2C0F                        00            .byte	0
12480 2C10                        00            .byte	0
12481                                           ! 1483  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12482 2C11                        00            .byte	0
12483 2C12                        00            .byte	0
12484 2C13                        06            .byte	6
12485 2C14                        06            .byte	6
12486 2C15                        00            .byte	0
12487 2C16                        0E            .byte	$E
12488 2C17                        06            .byte	6
12489 2C18                        06            .byte	6
12490 2C19                        06            .byte	6
12491 2C1A                        06            .byte	6
12492 2C1B                        06            .byte	6
12493 2C1C                        06            .byte	6
12494 2C1D                        66            .byte	$66
12495 2C1E                        66            .byte	$66
12496 2C1F                        3C            .byte	$3C
12497 2C20                        00            .byte	0
12498                                           ! 1484  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12499 2C21                        00            .byte	0
12500 2C22                        00            .byte	0
12501 2C23                        E0            .byte	$E0
12502 2C24                        60            .byte	$60
12503 2C25                        60            .byte	$60
12504 2C26                        66            .byte	$66
12505 2C27                        6C            .byte	$6C
12506 2C28                        78            .byte	$78
12507 2C29                        78            .byte	$78
12508 2C2A                        6C            .byte	$6C
12509 2C2B                        66            .byte	$66
12510 2C2C                        E6            .byte	$E6
12511 2C2D                        00            .byte	0
12512 2C2E                        00            .byte	0
12513 2C2F                        00            .byte	0
12514 2C30                        00            .byte	0
12515                                           ! 1485  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12516 2C31                        00            .byte	0
12517 2C32                        00            .byte	0
12518 2C33                        38            .byte	$38
12519 2C34                        18            .byte	$18
12520 2C35                        18            .byte	$18
12521 2C36                        18            .byte	$18
12522 2C37                        18            .byte	$18
12523 2C38                        18            .byte	$18
12524 2C39                        18            .byte	$18
12525 2C3A                        18            .byte	$18
12526 2C3B                        18            .byte	$18
12527 2C3C                        3C            .byte	$3C
12528 2C3D                        00            .byte	0
12529 2C3E                        00            .byte	0
12530 2C3F                        00            .byte	0
12531 2C40                        00            .byte	0
12532                                           ! 1486  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12533 2C41                        00            .byte	0
12534 2C42                        00            .byte	0
12535 2C43                        00            .byte	0
12536 2C44                        00            .byte	0
12537 2C45                        00            .byte	0
12538 2C46                        E6            .byte	$E6
12539 2C47                        FF            .byte	$FF
12540 2C48                        DB            .byte	$DB
12541 2C49                        DB            .byte	$DB
12542 2C4A                        DB            .byte	$DB
12543 2C4B                        DB            .byte	$DB
12544 2C4C                        DB            .byte	$DB
12545 2C4D                        00            .byte	0
12546 2C4E                        00            .byte	0
12547 2C4F                        00            .byte	0
12548 2C50                        00            .byte	0
12549                                           ! 1487  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12550 2C51                        00            .byte	0
12551 2C52                        00            .byte	0
12552 2C53                        00            .byte	0
12553 2C54                        00            .byte	0
12554 2C55                        00            .byte	0
12555 2C56                        DC            .byte	$DC
12556 2C57                        66            .byte	$66
12557 2C58                        66            .byte	$66
12558 2C59                        66            .byte	$66
12559 2C5A                        66            .byte	$66
12560 2C5B                        66            .byte	$66
12561 2C5C                        66            .byte	$66
12562 2C5D                        00            .byte	0
12563 2C5E                        00            .byte	0
12564 2C5F                        00            .byte	0
12565 2C60                        00            .byte	0
12566                                           ! 1488  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12567 2C61                        00            .byte	0
12568 2C62                        00            .byte	0
12569 2C63                        00            .byte	0
12570 2C64                        00            .byte	0
12571 2C65                        00            .byte	0
12572 2C66                        7C            .byte	$7C
12573 2C67                        C6            .byte	$C6
12574 2C68                        C6            .byte	$C6
12575 2C69                        C6            .byte	$C6
12576 2C6A                        C6            .byte	$C6
12577 2C6B                        C6            .byte	$C6
12578 2C6C                        7C            .byte	$7C
12579 2C6D                        00            .byte	0
12580 2C6E                        00            .byte	0
12581 2C6F                        00            .byte	0
12582 2C70                        00            .byte	0
12583                                           ! 1489  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12584 2C71                        00            .byte	0
12585 2C72                        00            .byte	0
12586 2C73                        00            .byte	0
12587 2C74                        00            .byte	0
12588 2C75                        00            .byte	0
12589 2C76                        DC            .byte	$DC
12590 2C77                        66            .byte	$66
12591 2C78                        66            .byte	$66
12592 2C79                        66            .byte	$66
12593 2C7A                        66            .byte	$66
12594 2C7B                        66            .byte	$66
12595 2C7C                        7C            .byte	$7C
12596 2C7D                        60            .byte	$60
12597 2C7E                        60            .byte	$60
12598 2C7F                        F0            .byte	$F0
12599 2C80                        00            .byte	0
12600                                           ! 1490  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12601 2C81                        00            .byte	0
12602 2C82                        00            .byte	0
12603 2C83                        00            .byte	0
12604 2C84                        00            .byte	0
12605 2C85                        00            .byte	0
12606 2C86                        76            .byte	$76
12607 2C87                        CC            .byte	$CC
12608 2C88                        CC            .byte	$CC
12609 2C89                        CC            .byte	$CC
12610 2C8A                        CC            .byte	$CC
12611 2C8B                        CC            .byte	$CC
12612 2C8C                        7C            .byte	$7C
12613 2C8D                        0C            .byte	$C
12614 2C8E                        0C            .byte	$C
12615 2C8F                        1E            .byte	$1E
12616 2C90                        00            .byte	0
12617                                           ! 1491  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12618 2C91                        00            .byte	0
12619 2C92                        00            .byte	0
12620 2C93                        00            .byte	0
12621 2C94                        00            .byte	0
12622 2C95                        00            .byte	0
12623 2C96                        DC            .byte	$DC
12624 2C97                        76            .byte	$76
12625 2C98                        66            .byte	$66
12626 2C99                        60            .byte	$60
12627 2C9A                        60            .byte	$60
12628 2C9B                        60            .byte	$60
12629 2C9C                        F0            .byte	$F0
12630 2C9D                        00            .byte	0
12631 2C9E                        00            .byte	0
12632 2C9F                        00            .byte	0
12633 2CA0                        00            .byte	0
12634                                           ! 1492  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12635 2CA1                        00            .byte	0
12636 2CA2                        00            .byte	0
12637 2CA3                        00            .byte	0
12638 2CA4                        00            .byte	0
12639 2CA5                        00            .byte	0
12640 2CA6                        7C            .byte	$7C
12641 2CA7                        C6            .byte	$C6
12642 2CA8                        60            .byte	$60
12643 2CA9                        38            .byte	$38
12644 2CAA                        0C            .byte	$C
12645 2CAB                        C6            .byte	$C6
12646 2CAC                        7C            .byte	$7C
12647 2CAD                        00            .byte	0
12648 2CAE                        00            .byte	0
12649 2CAF                        00            .byte	0
12650 2CB0                        00            .byte	0
12651                                           ! 1493  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12652 2CB1                        00            .byte	0
12653 2CB2                        00            .byte	0
12654 2CB3                        10            .byte	$10
12655 2CB4                        30            .byte	$30
12656 2CB5                        30            .byte	$30
12657 2CB6                        FC            .byte	$FC
12658 2CB7                        30            .byte	$30
12659 2CB8                        30            .byte	$30
12660 2CB9                        30            .byte	$30
12661 2CBA                        30            .byte	$30
12662 2CBB                        36            .byte	$36
12663 2CBC                        1C            .byte	$1C
12664 2CBD                        00            .byte	0
12665 2CBE                        00            .byte	0
12666 2CBF                        00            .byte	0
12667 2CC0                        00            .byte	0
12668                                           ! 1494  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0
12669 2CC1                        00            .byte	0
12670 2CC2                        00            .byte	0
12671 2CC3                        00            .byte	0
12672 2CC4                        00            .byte	0
12673 2CC5                        00            .byte	0
12674 2CC6                        CC            .byte	$CC
12675                                           ! 1494 xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12676 2CC7                        CC            .byte	$CC
12677 2CC8                        CC            .byte	$CC
12678 2CC9                        CC            .byte	$CC
12679 2CCA                        CC            .byte	$CC
12680 2CCB                        CC            .byte	$CC
12681 2CCC                        76            .byte	$76
12682 2CCD                        00            .byte	0
12683 2CCE                        00            .byte	0
12684 2CCF                        00            .byte	0
12685 2CD0                        00            .byte	0
12686                                           ! 1495  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12687 2CD1                        00            .byte	0
12688 2CD2                        00            .byte	0
12689 2CD3                        00            .byte	0
12690 2CD4                        00            .byte	0
12691 2CD5                        00            .byte	0
12692 2CD6                        C3            .byte	$C3
12693 2CD7                        C3            .byte	$C3
12694 2CD8                        C3            .byte	$C3
12695 2CD9                        C3            .byte	$C3
12696 2CDA                        66            .byte	$66
12697 2CDB                        3C            .byte	$3C
12698 2CDC                        18            .byte	$18
12699 2CDD                        00            .byte	0
12700 2CDE                        00            .byte	0
12701 2CDF                        00            .byte	0
12702 2CE0                        00            .byte	0
12703                                           ! 1496  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12704 2CE1                        00            .byte	0
12705 2CE2                        00            .byte	0
12706 2CE3                        00            .byte	0
12707 2CE4                        00            .byte	0
12708 2CE5                        00            .byte	0
12709 2CE6                        C3            .byte	$C3
12710 2CE7                        C3            .byte	$C3
12711 2CE8                        C3            .byte	$C3
12712 2CE9                        DB            .byte	$DB
12713 2CEA                        DB            .byte	$DB
12714 2CEB                        FF            .byte	$FF
12715 2CEC                        66            .byte	$66
12716 2CED                        00            .byte	0
12717 2CEE                        00            .byte	0
12718 2CEF                        00            .byte	0
12719 2CF0                        00            .byte	0
12720                                           ! 1497  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12721 2CF1                        00            .byte	0
12722 2CF2                        00            .byte	0
12723 2CF3                        00            .byte	0
12724 2CF4                        00            .byte	0
12725 2CF5                        00            .byte	0
12726 2CF6                        C3            .byte	$C3
12727 2CF7                        66            .byte	$66
12728 2CF8                        3C            .byte	$3C
12729 2CF9                        18            .byte	$18
12730 2CFA                        3C            .byte	$3C
12731 2CFB                        66            .byte	$66
12732 2CFC                        C3            .byte	$C3
12733 2CFD                        00            .byte	0
12734 2CFE                        00            .byte	0
12735 2CFF                        00            .byte	0
12736 2D00                        00            .byte	0
12737                                           ! 1498  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12738 2D01                        00            .byte	0
12739 2D02                        00            .byte	0
12740 2D03                        00            .byte	0
12741 2D04                        00            .byte	0
12742 2D05                        00            .byte	0
12743 2D06                        C6            .byte	$C6
12744 2D07                        C6            .byte	$C6
12745 2D08                        C6            .byte	$C6
12746 2D09                        C6            .byte	$C6
12747 2D0A                        C6            .byte	$C6
12748 2D0B                        C6            .byte	$C6
12749 2D0C                        7E            .byte	$7E
12750 2D0D                        06            .byte	6
12751 2D0E                        0C            .byte	$C
12752 2D0F                        F8            .byte	$F8
12753 2D10                        00            .byte	0
12754                                           ! 1499  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12755 2D11                        00            .byte	0
12756 2D12                        00            .byte	0
12757 2D13                        00            .byte	0
12758 2D14                        00            .byte	0
12759 2D15                        00            .byte	0
12760 2D16                        FE            .byte	$FE
12761 2D17                        CC            .byte	$CC
12762 2D18                        18            .byte	$18
12763 2D19                        30            .byte	$30
12764 2D1A                        60            .byte	$60
12765 2D1B                        C6            .byte	$C6
12766 2D1C                        FE            .byte	$FE
12767 2D1D                        00            .byte	0
12768 2D1E                        00            .byte	0
12769 2D1F                        00            .byte	0
12770 2D20                        00            .byte	0
12771                                           ! 1500  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12772 2D21                        00            .byte	0
12773 2D22                        00            .byte	0
12774 2D23                        0E            .byte	$E
12775 2D24                        18            .byte	$18
12776 2D25                        18            .byte	$18
12777 2D26                        18            .byte	$18
12778 2D27                        70            .byte	$70
12779 2D28                        18            .byte	$18
12780 2D29                        18            .byte	$18
12781 2D2A                        18            .byte	$18
12782 2D2B                        18            .byte	$18
12783 2D2C                        0E            .byte	$E
12784 2D2D                        00            .byte	0
12785 2D2E                        00            .byte	0
12786 2D2F                        00            .byte	0
12787 2D30                        00            .byte	0
12788                                           ! 1501  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12789 2D31                        00            .byte	0
12790 2D32                        00            .byte	0
12791 2D33                        18            .byte	$18
12792 2D34                        18            .byte	$18
12793 2D35                        18            .byte	$18
12794 2D36                        18            .byte	$18
12795 2D37                        00            .byte	0
12796 2D38                        18            .byte	$18
12797 2D39                        18            .byte	$18
12798 2D3A                        18            .byte	$18
12799 2D3B                        18            .byte	$18
12800 2D3C                        18            .byte	$18
12801 2D3D                        00            .byte	0
12802 2D3E                        00            .byte	0
12803 2D3F                        00            .byte	0
12804 2D40                        00            .byte	0
12805                                           ! 1502  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12806 2D41                        00            .byte	0
12807 2D42                        00            .byte	0
12808 2D43                        70            .byte	$70
12809 2D44                        18            .byte	$18
12810 2D45                        18            .byte	$18
12811 2D46                        18            .byte	$18
12812 2D47                        0E            .byte	$E
12813 2D48                        18            .byte	$18
12814 2D49                        18            .byte	$18
12815 2D4A                        18            .byte	$18
12816 2D4B                        18            .byte	$18
12817 2D4C                        70            .byte	$70
12818 2D4D                        00            .byte	0
12819 2D4E                        00            .byte	0
12820 2D4F                        00            .byte	0
12821 2D50                        00            .byte	0
12822                                           ! 1503  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12823 2D51                        00            .byte	0
12824 2D52                        00            .byte	0
12825 2D53                        76            .byte	$76
12826 2D54                        DC            .byte	$DC
12827 2D55                        00            .byte	0
12828 2D56                        00            .byte	0
12829 2D57                        00            .byte	0
12830 2D58                        00            .byte	0
12831 2D59                        00            .byte	0
12832 2D5A                        00            .byte	0
12833 2D5B                        00            .byte	0
12834 2D5C                        00            .byte	0
12835 2D5D                        00            .byte	0
12836 2D5E                        00            .byte	0
12837 2D5F                        00            .byte	0
12838 2D60                        00            .byte	0
12839                                           ! 1504  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12840 2D61                        00            .byte	0
12841 2D62                        00            .byte	0
12842 2D63                        00            .byte	0
12843 2D64                        00            .byte	0
12844 2D65                        10            .byte	$10
12845 2D66                        38            .byte	$38
12846 2D67                        6C            .byte	$6C
12847 2D68                        C6            .byte	$C6
12848 2D69                        C6            .byte	$C6
12849 2D6A                        C6            .byte	$C6
12850 2D6B                        FE            .byte	$FE
12851 2D6C                        00            .byte	0
12852 2D6D                        00            .byte	0
12853 2D6E                        00            .byte	0
12854 2D6F                        00            .byte	0
12855 2D70                        00            .byte	0
12856                                           ! 1505  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12857 2D71                        00            .byte	0
12858 2D72                        00            .byte	0
12859 2D73                        3C            .byte	$3C
12860 2D74                        66            .byte	$66
12861 2D75                        C2            .byte	$C2
12862 2D76                        C0            .byte	$C0
12863 2D77                        C0            .byte	$C0
12864 2D78                        C0            .byte	$C0
12865 2D79                        C2            .byte	$C2
12866 2D7A                        66            .byte	$66
12867 2D7B                        3C            .byte	$3C
12868 2D7C                        0C            .byte	$C
12869 2D7D                        06            .byte	6
12870 2D7E                        7C            .byte	$7C
12871 2D7F                        00            .byte	0
12872 2D80                        00            .byte	0
12873                                           ! 1506  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12874 2D81                        00            .byte	0
12875 2D82                        00            .byte	0
12876 2D83                        CC            .byte	$CC
12877 2D84                        00            .byte	0
12878 2D85                        00            .byte	0
12879 2D86                        CC            .byte	$CC
12880 2D87                        CC            .byte	$CC
12881 2D88                        CC            .byte	$CC
12882 2D89                        CC            .byte	$CC
12883 2D8A                        CC            .byte	$CC
12884 2D8B                        CC            .byte	$CC
12885 2D8C                        76            .byte	$76
12886 2D8D                        00            .byte	0
12887 2D8E                        00            .byte	0
12888 2D8F                        00            .byte	0
12889 2D90                        00            .byte	0
12890                                           ! 1507  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12891 2D91                        00            .byte	0
12892 2D92                        0C            .byte	$C
12893 2D93                        18            .byte	$18
12894 2D94                        30            .byte	$30
12895 2D95                        00            .byte	0
12896 2D96                        7C            .byte	$7C
12897 2D97                        C6            .byte	$C6
12898 2D98                        FE            .byte	$FE
12899 2D99                        C0            .byte	$C0
12900 2D9A                        C0            .byte	$C0
12901 2D9B                        C6            .byte	$C6
12902 2D9C                        7C            .byte	$7C
12903 2D9D                        00            .byte	0
12904 2D9E                        00            .byte	0
12905 2D9F                        00            .byte	0
12906 2DA0                        00            .byte	0
12907                                           ! 1508  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12908 2DA1                        00            .byte	0
12909 2DA2                        10            .byte	$10
12910 2DA3                        38            .byte	$38
12911 2DA4                        6C            .byte	$6C
12912 2DA5                        00            .byte	0
12913 2DA6                        78            .byte	$78
12914 2DA7                        0C            .byte	$C
12915 2DA8                        7C            .byte	$7C
12916 2DA9                        CC            .byte	$CC
12917 2DAA                        CC            .byte	$CC
12918 2DAB                        CC            .byte	$CC
12919 2DAC                        76            .byte	$76
12920 2DAD                        00            .byte	0
12921 2DAE                        00            .byte	0
12922 2DAF                        00            .byte	0
12923 2DB0                        00            .byte	0
12924                                           ! 1509  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12925 2DB1                        00            .byte	0
12926 2DB2                        00            .byte	0
12927 2DB3                        CC            .byte	$CC
12928 2DB4                        00            .byte	0
12929 2DB5                        00            .byte	0
12930 2DB6                        78            .byte	$78
12931 2DB7                        0C            .byte	$C
12932 2DB8                        7C            .byte	$7C
12933 2DB9                        CC            .byte	$CC
12934 2DBA                        CC            .byte	$CC
12935 2DBB                        CC            .byte	$CC
12936 2DBC                        76            .byte	$76
12937 2DBD                        00            .byte	0
12938 2DBE                        00            .byte	0
12939 2DBF                        00            .byte	0
12940 2DC0                        00            .byte	0
12941                                           ! 1510  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12942 2DC1                        00            .byte	0
12943 2DC2                        60            .byte	$60
12944 2DC3                        30            .byte	$30
12945 2DC4                        18            .byte	$18
12946 2DC5                        00            .byte	0
12947 2DC6                        78            .byte	$78
12948 2DC7                        0C            .byte	$C
12949 2DC8                        7C            .byte	$7C
12950 2DC9                        CC            .byte	$CC
12951 2DCA                        CC            .byte	$CC
12952 2DCB                        CC            .byte	$CC
12953 2DCC                        76            .byte	$76
12954 2DCD                        00            .byte	0
12955 2DCE                        00            .byte	0
12956 2DCF                        00            .byte	0
12957 2DD0                        00            .byte	0
12958                                           ! 1511  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12959 2DD1                        00            .byte	0
12960 2DD2                        38            .byte	$38
12961 2DD3                        6C            .byte	$6C
12962 2DD4                        38            .byte	$38
12963 2DD5                        00            .byte	0
12964 2DD6                        78            .byte	$78
12965 2DD7                        0C            .byte	$C
12966 2DD8                        7C            .byte	$7C
12967 2DD9                        CC            .byte	$CC
12968 2DDA                        CC            .byte	$CC
12969 2DDB                        CC            .byte	$CC
12970 2DDC                        76            .byte	$76
12971 2DDD                        00            .byte	0
12972 2DDE                        00            .byte	0
12973 2DDF                        00            .byte	0
12974 2DE0                        00            .byte	0
12975                                           ! 1512  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12976 2DE1                        00            .byte	0
12977 2DE2                        00            .byte	0
12978 2DE3                        00            .byte	0
12979 2DE4                        00            .byte	0
12980 2DE5                        3C            .byte	$3C
12981 2DE6                        66            .byte	$66
12982 2DE7                        60            .byte	$60
12983 2DE8                        60            .byte	$60
12984 2DE9                        66            .byte	$66
12985 2DEA                        3C            .byte	$3C
12986 2DEB                        0C            .byte	$C
12987 2DEC                        06            .byte	6
12988 2DED                        3C            .byte	$3C
12989 2DEE                        00            .byte	0
12990 2DEF                        00            .byte	0
12991 2DF0                        00            .byte	0
12992                                           ! 1513  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12993 2DF1                        00            .byte	0
12994 2DF2                        10            .byte	$10
12995 2DF3                        38            .byte	$38
12996 2DF4                        6C            .byte	$6C
12997 2DF5                        00            .byte	0
12998 2DF6                        7C            .byte	$7C
12999 2DF7                        C6            .byte	$C6
13000 2DF8                        FE            .byte	$FE
13001 2DF9                        C0            .byte	$C0
13002 2DFA                        C0            .byte	$C0
13003 2DFB                        C6            .byte	$C6
13004 2DFC                        7C            .byte	$7C
13005 2DFD                        00            .byte	0
13006 2DFE                        00            .byte	0
13007 2DFF                        00            .byte	0
13008 2E00                        00            .byte	0
13009                                           ! 1514  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13010 2E01                        00            .byte	0
13011 2E02                        00            .byte	0
13012 2E03                        C6            .byte	$C6
13013 2E04                        00            .byte	0
13014 2E05                        00            .byte	0
13015 2E06                        7C            .byte	$7C
13016 2E07                        C6            .byte	$C6
13017 2E08                        FE            .byte	$FE
13018 2E09                        C0            .byte	$C0
13019 2E0A                        C0            .byte	$C0
13020 2E0B                        C6            .byte	$C6
13021 2E0C                        7C            .byte	$7C
13022 2E0D                        00            .byte	0
13023 2E0E                        00            .byte	0
13024 2E0F                        00            .byte	0
13025 2E10                        00            .byte	0
13026                                           ! 1515  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 
13027 2E11                        00            .byte	0
13028 2E12                        60            .byte	$60
13029 2E13                        30            .byte	$30
13030 2E14                        18            .byte	$18
13031 2E15                        00            .byte	0
13032 2E16                        7C            .byte	$7C
13033 2E17                        C6            .byte	$C6
13034 2E18                        FE            .byte	$FE
13035                                           ! 1515 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13036 2E19                        C0            .byte	$C0
13037 2E1A                        C0            .byte	$C0
13038 2E1B                        C6            .byte	$C6
13039 2E1C                        7C            .byte	$7C
13040 2E1D                        00            .byte	0
13041 2E1E                        00            .byte	0
13042 2E1F                        00            .byte	0
13043 2E20                        00            .byte	0
13044                                           ! 1516  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13045 2E21                        00            .byte	0
13046 2E22                        00            .byte	0
13047 2E23                        66            .byte	$66
13048 2E24                        00            .byte	0
13049 2E25                        00            .byte	0
13050 2E26                        38            .byte	$38
13051 2E27                        18            .byte	$18
13052 2E28                        18            .byte	$18
13053 2E29                        18            .byte	$18
13054 2E2A                        18            .byte	$18
13055 2E2B                        18            .byte	$18
13056 2E2C                        3C            .byte	$3C
13057 2E2D                        00            .byte	0
13058 2E2E                        00            .byte	0
13059 2E2F                        00            .byte	0
13060 2E30                        00            .byte	0
13061                                           ! 1517  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13062 2E31                        00            .byte	0
13063 2E32                        18            .byte	$18
13064 2E33                        3C            .byte	$3C
13065 2E34                        66            .byte	$66
13066 2E35                        00            .byte	0
13067 2E36                        38            .byte	$38
13068 2E37                        18            .byte	$18
13069 2E38                        18            .byte	$18
13070 2E39                        18            .byte	$18
13071 2E3A                        18            .byte	$18
13072 2E3B                        18            .byte	$18
13073 2E3C                        3C            .byte	$3C
13074 2E3D                        00            .byte	0
13075 2E3E                        00            .byte	0
13076 2E3F                        00            .byte	0
13077 2E40                        00            .byte	0
13078                                           ! 1518  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13079 2E41                        00            .byte	0
13080 2E42                        60            .byte	$60
13081 2E43                        30            .byte	$30
13082 2E44                        18            .byte	$18
13083 2E45                        00            .byte	0
13084 2E46                        38            .byte	$38
13085 2E47                        18            .byte	$18
13086 2E48                        18            .byte	$18
13087 2E49                        18            .byte	$18
13088 2E4A                        18            .byte	$18
13089 2E4B                        18            .byte	$18
13090 2E4C                        3C            .byte	$3C
13091 2E4D                        00            .byte	0
13092 2E4E                        00            .byte	0
13093 2E4F                        00            .byte	0
13094 2E50                        00            .byte	0
13095                                           ! 1519  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13096 2E51                        00            .byte	0
13097 2E52                        C6            .byte	$C6
13098 2E53                        00            .byte	0
13099 2E54                        10            .byte	$10
13100 2E55                        38            .byte	$38
13101 2E56                        6C            .byte	$6C
13102 2E57                        C6            .byte	$C6
13103 2E58                        C6            .byte	$C6
13104 2E59                        FE            .byte	$FE
13105 2E5A                        C6            .byte	$C6
13106 2E5B                        C6            .byte	$C6
13107 2E5C                        C6            .byte	$C6
13108 2E5D                        00            .byte	0
13109 2E5E                        00            .byte	0
13110 2E5F                        00            .byte	0
13111 2E60                        00            .byte	0
13112                                           ! 1520  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13113 2E61                        38            .byte	$38
13114 2E62                        6C            .byte	$6C
13115 2E63                        38            .byte	$38
13116 2E64                        00            .byte	0
13117 2E65                        38            .byte	$38
13118 2E66                        6C            .byte	$6C
13119 2E67                        C6            .byte	$C6
13120 2E68                        C6            .byte	$C6
13121 2E69                        FE            .byte	$FE
13122 2E6A                        C6            .byte	$C6
13123 2E6B                        C6            .byte	$C6
13124 2E6C                        C6            .byte	$C6
13125 2E6D                        00            .byte	0
13126 2E6E                        00            .byte	0
13127 2E6F                        00            .byte	0
13128 2E70                        00            .byte	0
13129                                           ! 1521  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13130 2E71                        18            .byte	$18
13131 2E72                        30            .byte	$30
13132 2E73                        60            .byte	$60
13133 2E74                        00            .byte	0
13134 2E75                        FE            .byte	$FE
13135 2E76                        66            .byte	$66
13136 2E77                        60            .byte	$60
13137 2E78                        7C            .byte	$7C
13138 2E79                        60            .byte	$60
13139 2E7A                        60            .byte	$60
13140 2E7B                        66            .byte	$66
13141 2E7C                        FE            .byte	$FE
13142 2E7D                        00            .byte	0
13143 2E7E                        00            .byte	0
13144 2E7F                        00            .byte	0
13145 2E80                        00            .byte	0
13146                                           ! 1522  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13147 2E81                        00            .byte	0
13148 2E82                        00            .byte	0
13149 2E83                        00            .byte	0
13150 2E84                        00            .byte	0
13151 2E85                        00            .byte	0
13152 2E86                        6E            .byte	$6E
13153 2E87                        3B            .byte	$3B
13154 2E88                        1B            .byte	$1B
13155 2E89                        7E            .byte	$7E
13156 2E8A                        D8            .byte	$D8
13157 2E8B                        DC            .byte	$DC
13158 2E8C                        77            .byte	$77
13159 2E8D                        00            .byte	0
13160 2E8E                        00            .byte	0
13161 2E8F                        00            .byte	0
13162 2E90                        00            .byte	0
13163                                           ! 1523  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13164 2E91                        00            .byte	0
13165 2E92                        00            .byte	0
13166 2E93                        3E            .byte	$3E
13167 2E94                        6C            .byte	$6C
13168 2E95                        CC            .byte	$CC
13169 2E96                        CC            .byte	$CC
13170 2E97                        FE            .byte	$FE
13171 2E98                        CC            .byte	$CC
13172 2E99                        CC            .byte	$CC
13173 2E9A                        CC            .byte	$CC
13174 2E9B                        CC            .byte	$CC
13175 2E9C                        CE            .byte	$CE
13176 2E9D                        00            .byte	0
13177 2E9E                        00            .byte	0
13178 2E9F                        00            .byte	0
13179 2EA0                        00            .byte	0
13180                                           ! 1524  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13181 2EA1                        00            .byte	0
13182 2EA2                        10            .byte	$10
13183 2EA3                        38            .byte	$38
13184 2EA4                        6C            .byte	$6C
13185 2EA5                        00            .byte	0
13186 2EA6                        7C            .byte	$7C
13187 2EA7                        C6            .byte	$C6
13188 2EA8                        C6            .byte	$C6
13189 2EA9                        C6            .byte	$C6
13190 2EAA                        C6            .byte	$C6
13191 2EAB                        C6            .byte	$C6
13192 2EAC                        7C            .byte	$7C
13193 2EAD                        00            .byte	0
13194 2EAE                        00            .byte	0
13195 2EAF                        00            .byte	0
13196 2EB0                        00            .byte	0
13197                                           ! 1525  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13198 2EB1                        00            .byte	0
13199 2EB2                        00            .byte	0
13200 2EB3                        C6            .byte	$C6
13201 2EB4                        00            .byte	0
13202 2EB5                        00            .byte	0
13203 2EB6                        7C            .byte	$7C
13204 2EB7                        C6            .byte	$C6
13205 2EB8                        C6            .byte	$C6
13206 2EB9                        C6            .byte	$C6
13207 2EBA                        C6            .byte	$C6
13208 2EBB                        C6            .byte	$C6
13209 2EBC                        7C            .byte	$7C
13210 2EBD                        00            .byte	0
13211 2EBE                        00            .byte	0
13212 2EBF                        00            .byte	0
13213 2EC0                        00            .byte	0
13214                                           ! 1526  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13215 2EC1                        00            .byte	0
13216 2EC2                        60            .byte	$60
13217 2EC3                        30            .byte	$30
13218 2EC4                        18            .byte	$18
13219 2EC5                        00            .byte	0
13220 2EC6                        7C            .byte	$7C
13221 2EC7                        C6            .byte	$C6
13222 2EC8                        C6            .byte	$C6
13223 2EC9                        C6            .byte	$C6
13224 2ECA                        C6            .byte	$C6
13225 2ECB                        C6            .byte	$C6
13226 2ECC                        7C            .byte	$7C
13227 2ECD                        00            .byte	0
13228 2ECE                        00            .byte	0
13229 2ECF                        00            .byte	0
13230 2ED0                        00            .byte	0
13231                                           ! 1527  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13232 2ED1                        00            .byte	0
13233 2ED2                        30            .byte	$30
13234 2ED3                        78            .byte	$78
13235 2ED4                        CC            .byte	$CC
13236 2ED5                        00            .byte	0
13237 2ED6                        CC            .byte	$CC
13238 2ED7                        CC            .byte	$CC
13239 2ED8                        CC            .byte	$CC
13240 2ED9                        CC            .byte	$CC
13241 2EDA                        CC            .byte	$CC
13242 2EDB                        CC            .byte	$CC
13243 2EDC                        76            .byte	$76
13244 2EDD                        00            .byte	0
13245 2EDE                        00            .byte	0
13246 2EDF                        00            .byte	0
13247 2EE0                        00            .byte	0
13248                                           ! 1528  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13249 2EE1                        00            .byte	0
13250 2EE2                        60            .byte	$60
13251 2EE3                        30            .byte	$30
13252 2EE4                        18            .byte	$18
13253 2EE5                        00            .byte	0
13254 2EE6                        CC            .byte	$CC
13255 2EE7                        CC            .byte	$CC
13256 2EE8                        CC            .byte	$CC
13257 2EE9                        CC            .byte	$CC
13258 2EEA                        CC            .byte	$CC
13259 2EEB                        CC            .byte	$CC
13260 2EEC                        76            .byte	$76
13261 2EED                        00            .byte	0
13262 2EEE                        00            .byte	0
13263 2EEF                        00            .byte	0
13264 2EF0                        00            .byte	0
13265                                           ! 1529  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13266 2EF1                        00            .byte	0
13267 2EF2                        00            .byte	0
13268 2EF3                        C6            .byte	$C6
13269 2EF4                        00            .byte	0
13270 2EF5                        00            .byte	0
13271 2EF6                        C6            .byte	$C6
13272 2EF7                        C6            .byte	$C6
13273 2EF8                        C6            .byte	$C6
13274 2EF9                        C6            .byte	$C6
13275 2EFA                        C6            .byte	$C6
13276 2EFB                        C6            .byte	$C6
13277 2EFC                        7E            .byte	$7E
13278 2EFD                        06            .byte	6
13279 2EFE                        0C            .byte	$C
13280 2EFF                        78            .byte	$78
13281 2F00                        00            .byte	0
13282                                           ! 1530  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13283 2F01                        00            .byte	0
13284 2F02                        C6            .byte	$C6
13285 2F03                        00            .byte	0
13286 2F04                        7C            .byte	$7C
13287 2F05                        C6            .byte	$C6
13288 2F06                        C6            .byte	$C6
13289 2F07                        C6            .byte	$C6
13290 2F08                        C6            .byte	$C6
13291 2F09                        C6            .byte	$C6
13292 2F0A                        C6            .byte	$C6
13293 2F0B                        C6            .byte	$C6
13294 2F0C                        7C            .byte	$7C
13295 2F0D                        00            .byte	0
13296 2F0E                        00            .byte	0
13297 2F0F                        00            .byte	0
13298 2F10                        00            .byte	0
13299                                           ! 1531  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13300 2F11                        00            .byte	0
13301 2F12                        C6            .byte	$C6
13302 2F13                        00            .byte	0
13303 2F14                        C6            .byte	$C6
13304 2F15                        C6            .byte	$C6
13305 2F16                        C6            .byte	$C6
13306 2F17                        C6            .byte	$C6
13307 2F18                        C6            .byte	$C6
13308 2F19                        C6            .byte	$C6
13309 2F1A                        C6            .byte	$C6
13310 2F1B                        C6            .byte	$C6
13311 2F1C                        7C            .byte	$7C
13312 2F1D                        00            .byte	0
13313 2F1E                        00            .byte	0
13314 2F1F                        00            .byte	0
13315 2F20                        00            .byte	0
13316                                           ! 1532  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13317 2F21                        00            .byte	0
13318 2F22                        18            .byte	$18
13319 2F23                        18            .byte	$18
13320 2F24                        7E            .byte	$7E
13321 2F25                        C3            .byte	$C3
13322 2F26                        C0            .byte	$C0
13323 2F27                        C0            .byte	$C0
13324 2F28                        C0            .byte	$C0
13325 2F29                        C3            .byte	$C3
13326 2F2A                        7E            .byte	$7E
13327 2F2B                        18            .byte	$18
13328 2F2C                        18            .byte	$18
13329 2F2D                        00            .byte	0
13330 2F2E                        00            .byte	0
13331 2F2F                        00            .byte	0
13332 2F30                        00            .byte	0
13333                                           ! 1533  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13334 2F31                        00            .byte	0
13335 2F32                        38            .byte	$38
13336 2F33                        6C            .byte	$6C
13337 2F34                        64            .byte	$64
13338 2F35                        60            .byte	$60
13339 2F36                        F0            .byte	$F0
13340 2F37                        60            .byte	$60
13341 2F38                        60            .byte	$60
13342 2F39                        60            .byte	$60
13343 2F3A                        60            .byte	$60
13344 2F3B                        E6            .byte	$E6
13345 2F3C                        FC            .byte	$FC
13346 2F3D                        00            .byte	0
13347 2F3E                        00            .byte	0
13348 2F3F                        00            .byte	0
13349 2F40                        00            .byte	0
13350                                           ! 1534  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13351 2F41                        00            .byte	0
13352 2F42                        00            .byte	0
13353 2F43                        C3            .byte	$C3
13354 2F44                        66            .byte	$66
13355 2F45                        3C            .byte	$3C
13356 2F46                        18            .byte	$18
13357 2F47                        FF            .byte	$FF
13358 2F48                        18            .byte	$18
13359 2F49                        FF            .byte	$FF
13360 2F4A                        18            .byte	$18
13361 2F4B                        18            .byte	$18
13362 2F4C                        18            .byte	$18
13363 2F4D                        00            .byte	0
13364 2F4E                        00            .byte	0
13365 2F4F                        00            .byte	0
13366 2F50                        00            .byte	0
13367                                           ! 1535  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13368 2F51                        00            .byte	0
13369 2F52                        FC            .byte	$FC
13370 2F53                        66            .byte	$66
13371 2F54                        66            .byte	$66
13372 2F55                        7C            .byte	$7C
13373 2F56                        62            .byte	$62
13374 2F57                        66            .byte	$66
13375 2F58                        6F            .byte	$6F
13376 2F59                        66            .byte	$66
13377 2F5A                        66            .byte	$66
13378 2F5B                        66            .byte	$66
13379 2F5C                        F3            .byte	$F3
13380 2F5D                        00            .byte	0
13381 2F5E                        00            .byte	0
13382 2F5F                        00            .byte	0
13383 2F60                        00            .byte	0
13384                                           ! 1536  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18,
13385 2F61                        00            .byte	0
13386 2F62                        0E            .byte	$E
13387 2F63                        1B            .byte	$1B
13388 2F64                        18            .byte	$18
13389 2F65                        18            .byte	$18
13390 2F66                        18            .byte	$18
13391 2F67                        7E            .byte	$7E
13392 2F68                        18            .byte	$18
13393 2F69                        18            .byte	$18
13394                                           ! 1536  0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13395 2F6A                        18            .byte	$18
13396 2F6B                        18            .byte	$18
13397 2F6C                        18            .byte	$18
13398 2F6D                        D8            .byte	$D8
13399 2F6E                        70            .byte	$70
13400 2F6F                        00            .byte	0
13401 2F70                        00            .byte	0
13402                                           ! 1537  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13403 2F71                        00            .byte	0
13404 2F72                        18            .byte	$18
13405 2F73                        30            .byte	$30
13406 2F74                        60            .byte	$60
13407 2F75                        00            .byte	0
13408 2F76                        78            .byte	$78
13409 2F77                        0C            .byte	$C
13410 2F78                        7C            .byte	$7C
13411 2F79                        CC            .byte	$CC
13412 2F7A                        CC            .byte	$CC
13413 2F7B                        CC            .byte	$CC
13414 2F7C                        76            .byte	$76
13415 2F7D                        00            .byte	0
13416 2F7E                        00            .byte	0
13417 2F7F                        00            .byte	0
13418 2F80                        00            .byte	0
13419                                           ! 1538  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13420 2F81                        00            .byte	0
13421 2F82                        0C            .byte	$C
13422 2F83                        18            .byte	$18
13423 2F84                        30            .byte	$30
13424 2F85                        00            .byte	0
13425 2F86                        38            .byte	$38
13426 2F87                        18            .byte	$18
13427 2F88                        18            .byte	$18
13428 2F89                        18            .byte	$18
13429 2F8A                        18            .byte	$18
13430 2F8B                        18            .byte	$18
13431 2F8C                        3C            .byte	$3C
13432 2F8D                        00            .byte	0
13433 2F8E                        00            .byte	0
13434 2F8F                        00            .byte	0
13435 2F90                        00            .byte	0
13436                                           ! 1539  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13437 2F91                        00            .byte	0
13438 2F92                        18            .byte	$18
13439 2F93                        30            .byte	$30
13440 2F94                        60            .byte	$60
13441 2F95                        00            .byte	0
13442 2F96                        7C            .byte	$7C
13443 2F97                        C6            .byte	$C6
13444 2F98                        C6            .byte	$C6
13445 2F99                        C6            .byte	$C6
13446 2F9A                        C6            .byte	$C6
13447 2F9B                        C6            .byte	$C6
13448 2F9C                        7C            .byte	$7C
13449 2F9D                        00            .byte	0
13450 2F9E                        00            .byte	0
13451 2F9F                        00            .byte	0
13452 2FA0                        00            .byte	0
13453                                           ! 1540  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13454 2FA1                        00            .byte	0
13455 2FA2                        18            .byte	$18
13456 2FA3                        30            .byte	$30
13457 2FA4                        60            .byte	$60
13458 2FA5                        00            .byte	0
13459 2FA6                        CC            .byte	$CC
13460 2FA7                        CC            .byte	$CC
13461 2FA8                        CC            .byte	$CC
13462 2FA9                        CC            .byte	$CC
13463 2FAA                        CC            .byte	$CC
13464 2FAB                        CC            .byte	$CC
13465 2FAC                        76            .byte	$76
13466 2FAD                        00            .byte	0
13467 2FAE                        00            .byte	0
13468 2FAF                        00            .byte	0
13469 2FB0                        00            .byte	0
13470                                           ! 1541  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13471 2FB1                        00            .byte	0
13472 2FB2                        00            .byte	0
13473 2FB3                        76            .byte	$76
13474 2FB4                        DC            .byte	$DC
13475 2FB5                        00            .byte	0
13476 2FB6                        DC            .byte	$DC
13477 2FB7                        66            .byte	$66
13478 2FB8                        66            .byte	$66
13479 2FB9                        66            .byte	$66
13480 2FBA                        66            .byte	$66
13481 2FBB                        66            .byte	$66
13482 2FBC                        66            .byte	$66
13483 2FBD                        00            .byte	0
13484 2FBE                        00            .byte	0
13485 2FBF                        00            .byte	0
13486 2FC0                        00            .byte	0
13487                                           ! 1542  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13488 2FC1                        76            .byte	$76
13489 2FC2                        DC            .byte	$DC
13490 2FC3                        00            .byte	0
13491 2FC4                        C6            .byte	$C6
13492 2FC5                        E6            .byte	$E6
13493 2FC6                        F6            .byte	$F6
13494 2FC7                        FE            .byte	$FE
13495 2FC8                        DE            .byte	$DE
13496 2FC9                        CE            .byte	$CE
13497 2FCA                        C6            .byte	$C6
13498 2FCB                        C6            .byte	$C6
13499 2FCC                        C6            .byte	$C6
13500 2FCD                        00            .byte	0
13501 2FCE                        00            .byte	0
13502 2FCF                        00            .byte	0
13503 2FD0                        00            .byte	0
13504                                           ! 1543  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13505 2FD1                        00            .byte	0
13506 2FD2                        3C            .byte	$3C
13507 2FD3                        6C            .byte	$6C
13508 2FD4                        6C            .byte	$6C
13509 2FD5                        3E            .byte	$3E
13510 2FD6                        00            .byte	0
13511 2FD7                        7E            .byte	$7E
13512 2FD8                        00            .byte	0
13513 2FD9                        00            .byte	0
13514 2FDA                        00            .byte	0
13515 2FDB                        00            .byte	0
13516 2FDC                        00            .byte	0
13517 2FDD                        00            .byte	0
13518 2FDE                        00            .byte	0
13519 2FDF                        00            .byte	0
13520 2FE0                        00            .byte	0
13521                                           ! 1544  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13522 2FE1                        00            .byte	0
13523 2FE2                        38            .byte	$38
13524 2FE3                        6C            .byte	$6C
13525 2FE4                        6C            .byte	$6C
13526 2FE5                        38            .byte	$38
13527 2FE6                        00            .byte	0
13528 2FE7                        7C            .byte	$7C
13529 2FE8                        00            .byte	0
13530 2FE9                        00            .byte	0
13531 2FEA                        00            .byte	0
13532 2FEB                        00            .byte	0
13533 2FEC                        00            .byte	0
13534 2FED                        00            .byte	0
13535 2FEE                        00            .byte	0
13536 2FEF                        00            .byte	0
13537 2FF0                        00            .byte	0
13538                                           ! 1545  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13539 2FF1                        00            .byte	0
13540 2FF2                        00            .byte	0
13541 2FF3                        30            .byte	$30
13542 2FF4                        30            .byte	$30
13543 2FF5                        00            .byte	0
13544 2FF6                        30            .byte	$30
13545 2FF7                        30            .byte	$30
13546 2FF8                        60            .byte	$60
13547 2FF9                        C0            .byte	$C0
13548 2FFA                        C6            .byte	$C6
13549 2FFB                        C6            .byte	$C6
13550 2FFC                        7C            .byte	$7C
13551 2FFD                        00            .byte	0
13552 2FFE                        00            .byte	0
13553 2FFF                        00            .byte	0
13554 3000                        00            .byte	0
13555                                           ! 1546  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13556 3001                        00            .byte	0
13557 3002                        00            .byte	0
13558 3003                        00            .byte	0
13559 3004                        00            .byte	0
13560 3005                        00            .byte	0
13561 3006                        00            .byte	0
13562 3007                        FE            .byte	$FE
13563 3008                        C0            .byte	$C0
13564 3009                        C0            .byte	$C0
13565 300A                        C0            .byte	$C0
13566 300B                        C0            .byte	$C0
13567 300C                        00            .byte	0
13568 300D                        00            .byte	0
13569 300E                        00            .byte	0
13570 300F                        00            .byte	0
13571 3010                        00            .byte	0
13572                                           ! 1547  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13573 3011                        00            .byte	0
13574 3012                        00            .byte	0
13575 3013                        00            .byte	0
13576 3014                        00            .byte	0
13577 3015                        00            .byte	0
13578 3016                        00            .byte	0
13579 3017                        FE            .byte	$FE
13580 3018                        06            .byte	6
13581 3019                        06            .byte	6
13582 301A                        06            .byte	6
13583 301B                        06            .byte	6
13584 301C                        00            .byte	0
13585 301D                        00            .byte	0
13586 301E                        00            .byte	0
13587 301F                        00            .byte	0
13588 3020                        00            .byte	0
13589                                           ! 1548  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13590 3021                        00            .byte	0
13591 3022                        C0            .byte	$C0
13592 3023                        C0            .byte	$C0
13593 3024                        C2            .byte	$C2
13594 3025                        C6            .byte	$C6
13595 3026                        CC            .byte	$CC
13596 3027                        18            .byte	$18
13597 3028                        30            .byte	$30
13598 3029                        60            .byte	$60
13599 302A                        CE            .byte	$CE
13600 302B                        9B            .byte	$9B
13601 302C                        06            .byte	6
13602 302D                        0C            .byte	$C
13603 302E                        1F            .byte	$1F
13604 302F                        00            .byte	0
13605 3030                        00            .byte	0
13606                                           ! 1549  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13607 3031                        00            .byte	0
13608 3032                        C0            .byte	$C0
13609 3033                        C0            .byte	$C0
13610 3034                        C2            .byte	$C2
13611 3035                        C6            .byte	$C6
13612 3036                        CC            .byte	$CC
13613 3037                        18            .byte	$18
13614 3038                        30            .byte	$30
13615 3039                        66            .byte	$66
13616 303A                        CE            .byte	$CE
13617 303B                        96            .byte	$96
13618 303C                        3E            .byte	$3E
13619 303D                        06            .byte	6
13620 303E                        06            .byte	6
13621 303F                        00            .byte	0
13622 3040                        00            .byte	0
13623                                           ! 1550  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13624 3041                        00            .byte	0
13625 3042                        00            .byte	0
13626 3043                        18            .byte	$18
13627 3044                        18            .byte	$18
13628 3045                        00            .byte	0
13629 3046                        18            .byte	$18
13630 3047                        18            .byte	$18
13631 3048                        18            .byte	$18
13632 3049                        3C            .byte	$3C
13633 304A                        3C            .byte	$3C
13634 304B                        3C            .byte	$3C
13635 304C                        18            .byte	$18
13636 304D                        00            .byte	0
13637 304E                        00            .byte	0
13638 304F                        00            .byte	0
13639 3050                        00            .byte	0
13640                                           ! 1551  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13641 3051                        00            .byte	0
13642 3052                        00            .byte	0
13643 3053                        00            .byte	0
13644 3054                        00            .byte	0
13645 3055                        00            .byte	0
13646 3056                        36            .byte	$36
13647 3057                        6C            .byte	$6C
13648 3058                        D8            .byte	$D8
13649 3059                        6C            .byte	$6C
13650 305A                        36            .byte	$36
13651 305B                        00            .byte	0
13652 305C                        00            .byte	0
13653 305D                        00            .byte	0
13654 305E                        00            .byte	0
13655 305F                        00            .byte	0
13656 3060                        00            .byte	0
13657                                           ! 1552  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13658 3061                        00            .byte	0
13659 3062                        00            .byte	0
13660 3063                        00            .byte	0
13661 3064                        00            .byte	0
13662 3065                        00            .byte	0
13663 3066                        D8            .byte	$D8
13664 3067                        6C            .byte	$6C
13665 3068                        36            .byte	$36
13666 3069                        6C            .byte	$6C
13667 306A                        D8            .byte	$D8
13668 306B                        00            .byte	0
13669 306C                        00            .byte	0
13670 306D                        00            .byte	0
13671 306E                        00            .byte	0
13672 306F                        00            .byte	0
13673 3070                        00            .byte	0
13674                                           ! 1553  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13675 3071                        11            .byte	$11
13676 3072                        44            .byte	$44
13677 3073                        11            .byte	$11
13678 3074                        44            .byte	$44
13679 3075                        11            .byte	$11
13680 3076                        44            .byte	$44
13681 3077                        11            .byte	$11
13682 3078                        44            .byte	$44
13683 3079                        11            .byte	$11
13684 307A                        44            .byte	$44
13685 307B                        11            .byte	$11
13686 307C                        44            .byte	$44
13687 307D                        11            .byte	$11
13688 307E                        44            .byte	$44
13689 307F                        11            .byte	$11
13690 3080                        44            .byte	$44
13691                                           ! 1554  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13692 3081                        55            .byte	$55
13693 3082                        AA            .byte	$AA
13694 3083                        55            .byte	$55
13695 3084                        AA            .byte	$AA
13696 3085                        55            .byte	$55
13697 3086                        AA            .byte	$AA
13698 3087                        55            .byte	$55
13699 3088                        AA            .byte	$AA
13700 3089                        55            .byte	$55
13701 308A                        AA            .byte	$AA
13702 308B                        55            .byte	$55
13703 308C                        AA            .byte	$AA
13704 308D                        55            .byte	$55
13705 308E                        AA            .byte	$AA
13706 308F                        55            .byte	$55
13707 3090                        AA            .byte	$AA
13708                                           ! 1555  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13709 3091                        DD            .byte	$DD
13710 3092                        77            .byte	$77
13711 3093                        DD            .byte	$DD
13712 3094                        77            .byte	$77
13713 3095                        DD            .byte	$DD
13714 3096                        77            .byte	$77
13715 3097                        DD            .byte	$DD
13716 3098                        77            .byte	$77
13717 3099                        DD            .byte	$DD
13718 309A                        77            .byte	$77
13719 309B                        DD            .byte	$DD
13720 309C                        77            .byte	$77
13721 309D                        DD            .byte	$DD
13722 309E                        77            .byte	$77
13723 309F                        DD            .byte	$DD
13724 30A0                        77            .byte	$77
13725                                           ! 1556  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13726 30A1                        18            .byte	$18
13727 30A2                        18            .byte	$18
13728 30A3                        18            .byte	$18
13729 30A4                        18            .byte	$18
13730 30A5                        18            .byte	$18
13731 30A6                        18            .byte	$18
13732 30A7                        18            .byte	$18
13733 30A8                        18            .byte	$18
13734 30A9                        18            .byte	$18
13735 30AA                        18            .byte	$18
13736 30AB                        18            .byte	$18
13737 30AC                        18            .byte	$18
13738 30AD                        18            .byte	$18
13739 30AE                        18            .byte	$18
13740 30AF                        18            .byte	$18
13741 30B0                        18            .byte	$18
13742                                           ! 1557  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18
13743 30B1                        18            .byte	$18
13744 30B2                        18            .byte	$18
13745 30B3                        18            .byte	$18
13746 30B4                        18            .byte	$18
13747 30B5                        18            .byte	$18
13748 30B6                        18            .byte	$18
13749 30B7                        18            .byte	$18
13750 30B8                        F8            .byte	$F8
13751 30B9                        18            .byte	$18
13752 30BA                        18            .byte	$18
13753 30BB                        18            .byte	$18
13754                                           ! 1557 , 0x18, 0x18, 0x18, 0x18,
13755 30BC                        18            .byte	$18
13756 30BD                        18            .byte	$18
13757 30BE                        18            .byte	$18
13758 30BF                        18            .byte	$18
13759 30C0                        18            .byte	$18
13760                                           ! 1558  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13761 30C1                        18            .byte	$18
13762 30C2                        18            .byte	$18
13763 30C3                        18            .byte	$18
13764 30C4                        18            .byte	$18
13765 30C5                        18            .byte	$18
13766 30C6                        F8            .byte	$F8
13767 30C7                        18            .byte	$18
13768 30C8                        F8            .byte	$F8
13769 30C9                        18            .byte	$18
13770 30CA                        18            .byte	$18
13771 30CB                        18            .byte	$18
13772 30CC                        18            .byte	$18
13773 30CD                        18            .byte	$18
13774 30CE                        18            .byte	$18
13775 30CF                        18            .byte	$18
13776 30D0                        18            .byte	$18
13777                                           ! 1559  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13778 30D1                        36            .byte	$36
13779 30D2                        36            .byte	$36
13780 30D3                        36            .byte	$36
13781 30D4                        36            .byte	$36
13782 30D5                        36            .byte	$36
13783 30D6                        36            .byte	$36
13784 30D7                        36            .byte	$36
13785 30D8                        F6            .byte	$F6
13786 30D9                        36            .byte	$36
13787 30DA                        36            .byte	$36
13788 30DB                        36            .byte	$36
13789 30DC                        36            .byte	$36
13790 30DD                        36            .byte	$36
13791 30DE                        36            .byte	$36
13792 30DF                        36            .byte	$36
13793 30E0                        36            .byte	$36
13794                                           ! 1560  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13795 30E1                        00            .byte	0
13796 30E2                        00            .byte	0
13797 30E3                        00            .byte	0
13798 30E4                        00            .byte	0
13799 30E5                        00            .byte	0
13800 30E6                        00            .byte	0
13801 30E7                        00            .byte	0
13802 30E8                        FE            .byte	$FE
13803 30E9                        36            .byte	$36
13804 30EA                        36            .byte	$36
13805 30EB                        36            .byte	$36
13806 30EC                        36            .byte	$36
13807 30ED                        36            .byte	$36
13808 30EE                        36            .byte	$36
13809 30EF                        36            .byte	$36
13810 30F0                        36            .byte	$36
13811                                           ! 1561  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13812 30F1                        00            .byte	0
13813 30F2                        00            .byte	0
13814 30F3                        00            .byte	0
13815 30F4                        00            .byte	0
13816 30F5                        00            .byte	0
13817 30F6                        F8            .byte	$F8
13818 30F7                        18            .byte	$18
13819 30F8                        F8            .byte	$F8
13820 30F9                        18            .byte	$18
13821 30FA                        18            .byte	$18
13822 30FB                        18            .byte	$18
13823 30FC                        18            .byte	$18
13824 30FD                        18            .byte	$18
13825 30FE                        18            .byte	$18
13826 30FF                        18            .byte	$18
13827 3100                        18            .byte	$18
13828                                           ! 1562  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13829 3101                        36            .byte	$36
13830 3102                        36            .byte	$36
13831 3103                        36            .byte	$36
13832 3104                        36            .byte	$36
13833 3105                        36            .byte	$36
13834 3106                        F6            .byte	$F6
13835 3107                        06            .byte	6
13836 3108                        F6            .byte	$F6
13837 3109                        36            .byte	$36
13838 310A                        36            .byte	$36
13839 310B                        36            .byte	$36
13840 310C                        36            .byte	$36
13841 310D                        36            .byte	$36
13842 310E                        36            .byte	$36
13843 310F                        36            .byte	$36
13844 3110                        36            .byte	$36
13845                                           ! 1563  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13846 3111                        36            .byte	$36
13847 3112                        36            .byte	$36
13848 3113                        36            .byte	$36
13849 3114                        36            .byte	$36
13850 3115                        36            .byte	$36
13851 3116                        36            .byte	$36
13852 3117                        36            .byte	$36
13853 3118                        36            .byte	$36
13854 3119                        36            .byte	$36
13855 311A                        36            .byte	$36
13856 311B                        36            .byte	$36
13857 311C                        36            .byte	$36
13858 311D                        36            .byte	$36
13859 311E                        36            .byte	$36
13860 311F                        36            .byte	$36
13861 3120                        36            .byte	$36
13862                                           ! 1564  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13863 3121                        00            .byte	0
13864 3122                        00            .byte	0
13865 3123                        00            .byte	0
13866 3124                        00            .byte	0
13867 3125                        00            .byte	0
13868 3126                        FE            .byte	$FE
13869 3127                        06            .byte	6
13870 3128                        F6            .byte	$F6
13871 3129                        36            .byte	$36
13872 312A                        36            .byte	$36
13873 312B                        36            .byte	$36
13874 312C                        36            .byte	$36
13875 312D                        36            .byte	$36
13876 312E                        36            .byte	$36
13877 312F                        36            .byte	$36
13878 3130                        36            .byte	$36
13879                                           ! 1565  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13880 3131                        36            .byte	$36
13881 3132                        36            .byte	$36
13882 3133                        36            .byte	$36
13883 3134                        36            .byte	$36
13884 3135                        36            .byte	$36
13885 3136                        F6            .byte	$F6
13886 3137                        06            .byte	6
13887 3138                        FE            .byte	$FE
13888 3139                        00            .byte	0
13889 313A                        00            .byte	0
13890 313B                        00            .byte	0
13891 313C                        00            .byte	0
13892 313D                        00            .byte	0
13893 313E                        00            .byte	0
13894 313F                        00            .byte	0
13895 3140                        00            .byte	0
13896                                           ! 1566  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13897 3141                        36            .byte	$36
13898 3142                        36            .byte	$36
13899 3143                        36            .byte	$36
13900 3144                        36            .byte	$36
13901 3145                        36            .byte	$36
13902 3146                        36            .byte	$36
13903 3147                        36            .byte	$36
13904 3148                        FE            .byte	$FE
13905 3149                        00            .byte	0
13906 314A                        00            .byte	0
13907 314B                        00            .byte	0
13908 314C                        00            .byte	0
13909 314D                        00            .byte	0
13910 314E                        00            .byte	0
13911 314F                        00            .byte	0
13912 3150                        00            .byte	0
13913                                           ! 1567  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13914 3151                        18            .byte	$18
13915 3152                        18            .byte	$18
13916 3153                        18            .byte	$18
13917 3154                        18            .byte	$18
13918 3155                        18            .byte	$18
13919 3156                        F8            .byte	$F8
13920 3157                        18            .byte	$18
13921 3158                        F8            .byte	$F8
13922 3159                        00            .byte	0
13923 315A                        00            .byte	0
13924 315B                        00            .byte	0
13925 315C                        00            .byte	0
13926 315D                        00            .byte	0
13927 315E                        00            .byte	0
13928 315F                        00            .byte	0
13929 3160                        00            .byte	0
13930                                           ! 1568  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13931 3161                        00            .byte	0
13932 3162                        00            .byte	0
13933 3163                        00            .byte	0
13934 3164                        00            .byte	0
13935 3165                        00            .byte	0
13936 3166                        00            .byte	0
13937 3167                        00            .byte	0
13938 3168                        F8            .byte	$F8
13939 3169                        18            .byte	$18
13940 316A                        18            .byte	$18
13941 316B                        18            .byte	$18
13942 316C                        18            .byte	$18
13943 316D                        18            .byte	$18
13944 316E                        18            .byte	$18
13945 316F                        18            .byte	$18
13946 3170                        18            .byte	$18
13947                                           ! 1569  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13948 3171                        18            .byte	$18
13949 3172                        18            .byte	$18
13950 3173                        18            .byte	$18
13951 3174                        18            .byte	$18
13952 3175                        18            .byte	$18
13953 3176                        18            .byte	$18
13954 3177                        18            .byte	$18
13955 3178                        1F            .byte	$1F
13956 3179                        00            .byte	0
13957 317A                        00            .byte	0
13958 317B                        00            .byte	0
13959 317C                        00            .byte	0
13960 317D                        00            .byte	0
13961 317E                        00            .byte	0
13962 317F                        00            .byte	0
13963 3180                        00            .byte	0
13964                                           ! 1570  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13965 3181                        18            .byte	$18
13966 3182                        18            .byte	$18
13967 3183                        18            .byte	$18
13968 3184                        18            .byte	$18
13969 3185                        18            .byte	$18
13970 3186                        18            .byte	$18
13971 3187                        18            .byte	$18
13972 3188                        FF            .byte	$FF
13973 3189                        00            .byte	0
13974 318A                        00            .byte	0
13975 318B                        00            .byte	0
13976 318C                        00            .byte	0
13977 318D                        00            .byte	0
13978 318E                        00            .byte	0
13979 318F                        00            .byte	0
13980 3190                        00            .byte	0
13981                                           ! 1571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13982 3191                        00            .byte	0
13983 3192                        00            .byte	0
13984 3193                        00            .byte	0
13985 3194                        00            .byte	0
13986 3195                        00            .byte	0
13987 3196                        00            .byte	0
13988 3197                        00            .byte	0
13989 3198                        FF            .byte	$FF
13990 3199                        18            .byte	$18
13991 319A                        18            .byte	$18
13992 319B                        18            .byte	$18
13993 319C                        18            .byte	$18
13994 319D                        18            .byte	$18
13995 319E                        18            .byte	$18
13996 319F                        18            .byte	$18
13997 31A0                        18            .byte	$18
13998                                           ! 1572  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13999 31A1                        18            .byte	$18
14000 31A2                        18            .byte	$18
14001 31A3                        18            .byte	$18
14002 31A4                        18            .byte	$18
14003 31A5                        18            .byte	$18
14004 31A6                        18            .byte	$18
14005 31A7                        18            .byte	$18
14006 31A8                        1F            .byte	$1F
14007 31A9                        18            .byte	$18
14008 31AA                        18            .byte	$18
14009 31AB                        18            .byte	$18
14010 31AC                        18            .byte	$18
14011 31AD                        18            .byte	$18
14012 31AE                        18            .byte	$18
14013 31AF                        18            .byte	$18
14014 31B0                        18            .byte	$18
14015                                           ! 1573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14016 31B1                        00            .byte	0
14017 31B2                        00            .byte	0
14018 31B3                        00            .byte	0
14019 31B4                        00            .byte	0
14020 31B5                        00            .byte	0
14021 31B6                        00            .byte	0
14022 31B7                        00            .byte	0
14023 31B8                        FF            .byte	$FF
14024 31B9                        00            .byte	0
14025 31BA                        00            .byte	0
14026 31BB                        00            .byte	0
14027 31BC                        00            .byte	0
14028 31BD                        00            .byte	0
14029 31BE                        00            .byte	0
14030 31BF                        00            .byte	0
14031 31C0                        00            .byte	0
14032                                           ! 1574  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14033 31C1                        18            .byte	$18
14034 31C2                        18            .byte	$18
14035 31C3                        18            .byte	$18
14036 31C4                        18            .byte	$18
14037 31C5                        18            .byte	$18
14038 31C6                        18            .byte	$18
14039 31C7                        18            .byte	$18
14040 31C8                        FF            .byte	$FF
14041 31C9                        18            .byte	$18
14042 31CA                        18            .byte	$18
14043 31CB                        18            .byte	$18
14044 31CC                        18            .byte	$18
14045 31CD                        18            .byte	$18
14046 31CE                        18            .byte	$18
14047 31CF                        18            .byte	$18
14048 31D0                        18            .byte	$18
14049                                           ! 1575  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14050 31D1                        18            .byte	$18
14051 31D2                        18            .byte	$18
14052 31D3                        18            .byte	$18
14053 31D4                        18            .byte	$18
14054 31D5                        18            .byte	$18
14055 31D6                        1F            .byte	$1F
14056 31D7                        18            .byte	$18
14057 31D8                        1F            .byte	$1F
14058 31D9                        18            .byte	$18
14059 31DA                        18            .byte	$18
14060 31DB                        18            .byte	$18
14061 31DC                        18            .byte	$18
14062 31DD                        18            .byte	$18
14063 31DE                        18            .byte	$18
14064 31DF                        18            .byte	$18
14065 31E0                        18            .byte	$18
14066                                           ! 1576  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14067 31E1                        36            .byte	$36
14068 31E2                        36            .byte	$36
14069 31E3                        36            .byte	$36
14070 31E4                        36            .byte	$36
14071 31E5                        36            .byte	$36
14072 31E6                        36            .byte	$36
14073 31E7                        36            .byte	$36
14074 31E8                        37            .byte	$37
14075 31E9                        36            .byte	$36
14076 31EA                        36            .byte	$36
14077 31EB                        36            .byte	$36
14078 31EC                        36            .byte	$36
14079 31ED                        36            .byte	$36
14080 31EE                        36            .byte	$36
14081 31EF                        36            .byte	$36
14082 31F0                        36            .byte	$36
14083                                           ! 1577  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14084 31F1                        36            .byte	$36
14085 31F2                        36            .byte	$36
14086 31F3                        36            .byte	$36
14087 31F4                        36            .byte	$36
14088 31F5                        36            .byte	$36
14089 31F6                        37            .byte	$37
14090 31F7                        30            .byte	$30
14091 31F8                        3F            .byte	$3F
14092 31F9                        00            .byte	0
14093 31FA                        00            .byte	0
14094 31FB                        00            .byte	0
14095 31FC                        00            .byte	0
14096 31FD                        00            .byte	0
14097 31FE                        00            .byte	0
14098 31FF                        00            .byte	0
14099 3200                        00            .byte	0
14100                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3
14101 3201                        00            .byte	0
14102 3202                        00            .byte	0
14103 3203                        00            .byte	0
14104 3204                        00            .byte	0
14105 3205                        00            .byte	0
14106 3206                        3F            .byte	$3F
14107 3207                        30            .byte	$30
14108 3208                        37            .byte	$37
14109 3209                        36            .byte	$36
14110 320A                        36            .byte	$36
14111 320B                        36            .byte	$36
14112 320C                        36            .byte	$36
14113 320D                        36            .byte	$36
14114                                           ! 1578 6, 0x36, 0x36,
14115 320E                        36            .byte	$36
14116 320F                        36            .byte	$36
14117 3210                        36            .byte	$36
14118                                           ! 1579  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14119 3211                        36            .byte	$36
14120 3212                        36            .byte	$36
14121 3213                        36            .byte	$36
14122 3214                        36            .byte	$36
14123 3215                        36            .byte	$36
14124 3216                        F7            .byte	$F7
14125 3217                        00            .byte	0
14126 3218                        FF            .byte	$FF
14127 3219                        00            .byte	0
14128 321A                        00            .byte	0
14129 321B                        00            .byte	0
14130 321C                        00            .byte	0
14131 321D                        00            .byte	0
14132 321E                        00            .byte	0
14133 321F                        00            .byte	0
14134 3220                        00            .byte	0
14135                                           ! 1580  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14136 3221                        00            .byte	0
14137 3222                        00            .byte	0
14138 3223                        00            .byte	0
14139 3224                        00            .byte	0
14140 3225                        00            .byte	0
14141 3226                        FF            .byte	$FF
14142 3227                        00            .byte	0
14143 3228                        F7            .byte	$F7
14144 3229                        36            .byte	$36
14145 322A                        36            .byte	$36
14146 322B                        36            .byte	$36
14147 322C                        36            .byte	$36
14148 322D                        36            .byte	$36
14149 322E                        36            .byte	$36
14150 322F                        36            .byte	$36
14151 3230                        36            .byte	$36
14152                                           ! 1581  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14153 3231                        36            .byte	$36
14154 3232                        36            .byte	$36
14155 3233                        36            .byte	$36
14156 3234                        36            .byte	$36
14157 3235                        36            .byte	$36
14158 3236                        37            .byte	$37
14159 3237                        30            .byte	$30
14160 3238                        37            .byte	$37
14161 3239                        36            .byte	$36
14162 323A                        36            .byte	$36
14163 323B                        36            .byte	$36
14164 323C                        36            .byte	$36
14165 323D                        36            .byte	$36
14166 323E                        36            .byte	$36
14167 323F                        36            .byte	$36
14168 3240                        36            .byte	$36
14169                                           ! 1582  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14170 3241                        00            .byte	0
14171 3242                        00            .byte	0
14172 3243                        00            .byte	0
14173 3244                        00            .byte	0
14174 3245                        00            .byte	0
14175 3246                        FF            .byte	$FF
14176 3247                        00            .byte	0
14177 3248                        FF            .byte	$FF
14178 3249                        00            .byte	0
14179 324A                        00            .byte	0
14180 324B                        00            .byte	0
14181 324C                        00            .byte	0
14182 324D                        00            .byte	0
14183 324E                        00            .byte	0
14184 324F                        00            .byte	0
14185 3250                        00            .byte	0
14186                                           ! 1583  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14187 3251                        36            .byte	$36
14188 3252                        36            .byte	$36
14189 3253                        36            .byte	$36
14190 3254                        36            .byte	$36
14191 3255                        36            .byte	$36
14192 3256                        F7            .byte	$F7
14193 3257                        00            .byte	0
14194 3258                        F7            .byte	$F7
14195 3259                        36            .byte	$36
14196 325A                        36            .byte	$36
14197 325B                        36            .byte	$36
14198 325C                        36            .byte	$36
14199 325D                        36            .byte	$36
14200 325E                        36            .byte	$36
14201 325F                        36            .byte	$36
14202 3260                        36            .byte	$36
14203                                           ! 1584  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14204 3261                        18            .byte	$18
14205 3262                        18            .byte	$18
14206 3263                        18            .byte	$18
14207 3264                        18            .byte	$18
14208 3265                        18            .byte	$18
14209 3266                        FF            .byte	$FF
14210 3267                        00            .byte	0
14211 3268                        FF            .byte	$FF
14212 3269                        00            .byte	0
14213 326A                        00            .byte	0
14214 326B                        00            .byte	0
14215 326C                        00            .byte	0
14216 326D                        00            .byte	0
14217 326E                        00            .byte	0
14218 326F                        00            .byte	0
14219 3270                        00            .byte	0
14220                                           ! 1585  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14221 3271                        36            .byte	$36
14222 3272                        36            .byte	$36
14223 3273                        36            .byte	$36
14224 3274                        36            .byte	$36
14225 3275                        36            .byte	$36
14226 3276                        36            .byte	$36
14227 3277                        36            .byte	$36
14228 3278                        FF            .byte	$FF
14229 3279                        00            .byte	0
14230 327A                        00            .byte	0
14231 327B                        00            .byte	0
14232 327C                        00            .byte	0
14233 327D                        00            .byte	0
14234 327E                        00            .byte	0
14235 327F                        00            .byte	0
14236 3280                        00            .byte	0
14237                                           ! 1586  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14238 3281                        00            .byte	0
14239 3282                        00            .byte	0
14240 3283                        00            .byte	0
14241 3284                        00            .byte	0
14242 3285                        00            .byte	0
14243 3286                        FF            .byte	$FF
14244 3287                        00            .byte	0
14245 3288                        FF            .byte	$FF
14246 3289                        18            .byte	$18
14247 328A                        18            .byte	$18
14248 328B                        18            .byte	$18
14249 328C                        18            .byte	$18
14250 328D                        18            .byte	$18
14251 328E                        18            .byte	$18
14252 328F                        18            .byte	$18
14253 3290                        18            .byte	$18
14254                                           ! 1587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14255 3291                        00            .byte	0
14256 3292                        00            .byte	0
14257 3293                        00            .byte	0
14258 3294                        00            .byte	0
14259 3295                        00            .byte	0
14260 3296                        00            .byte	0
14261 3297                        00            .byte	0
14262 3298                        FF            .byte	$FF
14263 3299                        36            .byte	$36
14264 329A                        36            .byte	$36
14265 329B                        36            .byte	$36
14266 329C                        36            .byte	$36
14267 329D                        36            .byte	$36
14268 329E                        36            .byte	$36
14269 329F                        36            .byte	$36
14270 32A0                        36            .byte	$36
14271                                           ! 1588  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14272 32A1                        36            .byte	$36
14273 32A2                        36            .byte	$36
14274 32A3                        36            .byte	$36
14275 32A4                        36            .byte	$36
14276 32A5                        36            .byte	$36
14277 32A6                        36            .byte	$36
14278 32A7                        36            .byte	$36
14279 32A8                        3F            .byte	$3F
14280 32A9                        00            .byte	0
14281 32AA                        00            .byte	0
14282 32AB                        00            .byte	0
14283 32AC                        00            .byte	0
14284 32AD                        00            .byte	0
14285 32AE                        00            .byte	0
14286 32AF                        00            .byte	0
14287 32B0                        00            .byte	0
14288                                           ! 1589  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14289 32B1                        18            .byte	$18
14290 32B2                        18            .byte	$18
14291 32B3                        18            .byte	$18
14292 32B4                        18            .byte	$18
14293 32B5                        18            .byte	$18
14294 32B6                        1F            .byte	$1F
14295 32B7                        18            .byte	$18
14296 32B8                        1F            .byte	$1F
14297 32B9                        00            .byte	0
14298 32BA                        00            .byte	0
14299 32BB                        00            .byte	0
14300 32BC                        00            .byte	0
14301 32BD                        00            .byte	0
14302 32BE                        00            .byte	0
14303 32BF                        00            .byte	0
14304 32C0                        00            .byte	0
14305                                           ! 1590  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14306 32C1                        00            .byte	0
14307 32C2                        00            .byte	0
14308 32C3                        00            .byte	0
14309 32C4                        00            .byte	0
14310 32C5                        00            .byte	0
14311 32C6                        1F            .byte	$1F
14312 32C7                        18            .byte	$18
14313 32C8                        1F            .byte	$1F
14314 32C9                        18            .byte	$18
14315 32CA                        18            .byte	$18
14316 32CB                        18            .byte	$18
14317 32CC                        18            .byte	$18
14318 32CD                        18            .byte	$18
14319 32CE                        18            .byte	$18
14320 32CF                        18            .byte	$18
14321 32D0                        18            .byte	$18
14322                                           ! 1591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14323 32D1                        00            .byte	0
14324 32D2                        00            .byte	0
14325 32D3                        00            .byte	0
14326 32D4                        00            .byte	0
14327 32D5                        00            .byte	0
14328 32D6                        00            .byte	0
14329 32D7                        00            .byte	0
14330 32D8                        3F            .byte	$3F
14331 32D9                        36            .byte	$36
14332 32DA                        36            .byte	$36
14333 32DB                        36            .byte	$36
14334 32DC                        36            .byte	$36
14335 32DD                        36            .byte	$36
14336 32DE                        36            .byte	$36
14337 32DF                        36            .byte	$36
14338 32E0                        36            .byte	$36
14339                                           ! 1592  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14340 32E1                        36            .byte	$36
14341 32E2                        36            .byte	$36
14342 32E3                        36            .byte	$36
14343 32E4                        36            .byte	$36
14344 32E5                        36            .byte	$36
14345 32E6                        36            .byte	$36
14346 32E7                        36            .byte	$36
14347 32E8                        FF            .byte	$FF
14348 32E9                        36            .byte	$36
14349 32EA                        36            .byte	$36
14350 32EB                        36            .byte	$36
14351 32EC                        36            .byte	$36
14352 32ED                        36            .byte	$36
14353 32EE                        36            .byte	$36
14354 32EF                        36            .byte	$36
14355 32F0                        36            .byte	$36
14356                                           ! 1593  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14357 32F1                        18            .byte	$18
14358 32F2                        18            .byte	$18
14359 32F3                        18            .byte	$18
14360 32F4                        18            .byte	$18
14361 32F5                        18            .byte	$18
14362 32F6                        FF            .byte	$FF
14363 32F7                        18            .byte	$18
14364 32F8                        FF            .byte	$FF
14365 32F9                        18            .byte	$18
14366 32FA                        18            .byte	$18
14367 32FB                        18            .byte	$18
14368 32FC                        18            .byte	$18
14369 32FD                        18            .byte	$18
14370 32FE                        18            .byte	$18
14371 32FF                        18            .byte	$18
14372 3300                        18            .byte	$18
14373                                           ! 1594  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14374 3301                        18            .byte	$18
14375 3302                        18            .byte	$18
14376 3303                        18            .byte	$18
14377 3304                        18            .byte	$18
14378 3305                        18            .byte	$18
14379 3306                        18            .byte	$18
14380 3307                        18            .byte	$18
14381 3308                        F8            .byte	$F8
14382 3309                        00            .byte	0
14383 330A                        00            .byte	0
14384 330B                        00            .byte	0
14385 330C                        00            .byte	0
14386 330D                        00            .byte	0
14387 330E                        00            .byte	0
14388 330F                        00            .byte	0
14389 3310                        00            .byte	0
14390                                           ! 1595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14391 3311                        00            .byte	0
14392 3312                        00            .byte	0
14393 3313                        00            .byte	0
14394 3314                        00            .byte	0
14395 3315                        00            .byte	0
14396 3316                        00            .byte	0
14397 3317                        00            .byte	0
14398 3318                        1F            .byte	$1F
14399 3319                        18            .byte	$18
14400 331A                        18            .byte	$18
14401 331B                        18            .byte	$18
14402 331C                        18            .byte	$18
14403 331D                        18            .byte	$18
14404 331E                        18            .byte	$18
14405 331F                        18            .byte	$18
14406 3320                        18            .byte	$18
14407                                           ! 1596  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14408 3321                        FF            .byte	$FF
14409 3322                        FF            .byte	$FF
14410 3323                        FF            .byte	$FF
14411 3324                        FF            .byte	$FF
14412 3325                        FF            .byte	$FF
14413 3326                        FF            .byte	$FF
14414 3327                        FF            .byte	$FF
14415 3328                        FF            .byte	$FF
14416 3329                        FF            .byte	$FF
14417 332A                        FF            .byte	$FF
14418 332B                        FF            .byte	$FF
14419 332C                        FF            .byte	$FF
14420 332D                        FF            .byte	$FF
14421 332E                        FF            .byte	$FF
14422 332F                        FF            .byte	$FF
14423 3330                        FF            .byte	$FF
14424                                           ! 1597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14425 3331                        00            .byte	0
14426 3332                        00            .byte	0
14427 3333                        00            .byte	0
14428 3334                        00            .byte	0
14429 3335                        00            .byte	0
14430 3336                        00            .byte	0
14431 3337                        00            .byte	0
14432 3338                        FF            .byte	$FF
14433 3339                        FF            .byte	$FF
14434 333A                        FF            .byte	$FF
14435 333B                        FF            .byte	$FF
14436 333C                        FF            .byte	$FF
14437 333D                        FF            .byte	$FF
14438 333E                        FF            .byte	$FF
14439 333F                        FF            .byte	$FF
14440 3340                        FF            .byte	$FF
14441                                           ! 1598  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14442 3341                        F0            .byte	$F0
14443 3342                        F0            .byte	$F0
14444 3343                        F0            .byte	$F0
14445 3344                        F0            .byte	$F0
14446 3345                        F0            .byte	$F0
14447 3346                        F0            .byte	$F0
14448 3347                        F0            .byte	$F0
14449 3348                        F0            .byte	$F0
14450 3349                        F0            .byte	$F0
14451 334A                        F0            .byte	$F0
14452 334B                        F0            .byte	$F0
14453 334C                        F0            .byte	$F0
14454 334D                        F0            .byte	$F0
14455 334E                        F0            .byte	$F0
14456 334F                        F0            .byte	$F0
14457 3350                        F0            .byte	$F0
14458                                           ! 1599  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x
14459 3351                        0F            .byte	$F
14460 3352                        0F            .byte	$F
14461 3353                        0F            .byte	$F
14462 3354                        0F            .byte	$F
14463 3355                        0F            .byte	$F
14464 3356                        0F            .byte	$F
14465 3357                        0F            .byte	$F
14466 3358                        0F            .byte	$F
14467 3359                        0F            .byte	$F
14468 335A                        0F            .byte	$F
14469 335B                        0F            .byte	$F
14470 335C                        0F            .byte	$F
14471 335D                        0F            .byte	$F
14472 335E                        0F            .byte	$F
14473 335F                        0F            .byte	$F
14474                                           ! 1599 0f,
14475 3360                        0F            .byte	$F
14476                                           ! 1600  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14477 3361                        FF            .byte	$FF
14478 3362                        FF            .byte	$FF
14479 3363                        FF            .byte	$FF
14480 3364                        FF            .byte	$FF
14481 3365                        FF            .byte	$FF
14482 3366                        FF            .byte	$FF
14483 3367                        FF            .byte	$FF
14484 3368                        00            .byte	0
14485 3369                        00            .byte	0
14486 336A                        00            .byte	0
14487 336B                        00            .byte	0
14488 336C                        00            .byte	0
14489 336D                        00            .byte	0
14490 336E                        00            .byte	0
14491 336F                        00            .byte	0
14492 3370                        00            .byte	0
14493                                           ! 1601  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14494 3371                        00            .byte	0
14495 3372                        00            .byte	0
14496 3373                        00            .byte	0
14497 3374                        00            .byte	0
14498 3375                        00            .byte	0
14499 3376                        76            .byte	$76
14500 3377                        DC            .byte	$DC
14501 3378                        D8            .byte	$D8
14502 3379                        D8            .byte	$D8
14503 337A                        D8            .byte	$D8
14504 337B                        DC            .byte	$DC
14505 337C                        76            .byte	$76
14506 337D                        00            .byte	0
14507 337E                        00            .byte	0
14508 337F                        00            .byte	0
14509 3380                        00            .byte	0
14510                                           ! 1602  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14511 3381                        00            .byte	0
14512 3382                        00            .byte	0
14513 3383                        78            .byte	$78
14514 3384                        CC            .byte	$CC
14515 3385                        CC            .byte	$CC
14516 3386                        CC            .byte	$CC
14517 3387                        D8            .byte	$D8
14518 3388                        CC            .byte	$CC
14519 3389                        C6            .byte	$C6
14520 338A                        C6            .byte	$C6
14521 338B                        C6            .byte	$C6
14522 338C                        CC            .byte	$CC
14523 338D                        00            .byte	0
14524 338E                        00            .byte	0
14525 338F                        00            .byte	0
14526 3390                        00            .byte	0
14527                                           ! 1603  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14528 3391                        00            .byte	0
14529 3392                        00            .byte	0
14530 3393                        FE            .byte	$FE
14531 3394                        C6            .byte	$C6
14532 3395                        C6            .byte	$C6
14533 3396                        C0            .byte	$C0
14534 3397                        C0            .byte	$C0
14535 3398                        C0            .byte	$C0
14536 3399                        C0            .byte	$C0
14537 339A                        C0            .byte	$C0
14538 339B                        C0            .byte	$C0
14539 339C                        C0            .byte	$C0
14540 339D                        00            .byte	0
14541 339E                        00            .byte	0
14542 339F                        00            .byte	0
14543 33A0                        00            .byte	0
14544                                           ! 1604  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14545 33A1                        00            .byte	0
14546 33A2                        00            .byte	0
14547 33A3                        00            .byte	0
14548 33A4                        00            .byte	0
14549 33A5                        FE            .byte	$FE
14550 33A6                        6C            .byte	$6C
14551 33A7                        6C            .byte	$6C
14552 33A8                        6C            .byte	$6C
14553 33A9                        6C            .byte	$6C
14554 33AA                        6C            .byte	$6C
14555 33AB                        6C            .byte	$6C
14556 33AC                        6C            .byte	$6C
14557 33AD                        00            .byte	0
14558 33AE                        00            .byte	0
14559 33AF                        00            .byte	0
14560 33B0                        00            .byte	0
14561                                           ! 1605  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14562 33B1                        00            .byte	0
14563 33B2                        00            .byte	0
14564 33B3                        00            .byte	0
14565 33B4                        FE            .byte	$FE
14566 33B5                        C6            .byte	$C6
14567 33B6                        60            .byte	$60
14568 33B7                        30            .byte	$30
14569 33B8                        18            .byte	$18
14570 33B9                        30            .byte	$30
14571 33BA                        60            .byte	$60
14572 33BB                        C6            .byte	$C6
14573 33BC                        FE            .byte	$FE
14574 33BD                        00            .byte	0
14575 33BE                        00            .byte	0
14576 33BF                        00            .byte	0
14577 33C0                        00            .byte	0
14578                                           ! 1606  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14579 33C1                        00            .byte	0
14580 33C2                        00            .byte	0
14581 33C3                        00            .byte	0
14582 33C4                        00            .byte	0
14583 33C5                        00            .byte	0
14584 33C6                        7E            .byte	$7E
14585 33C7                        D8            .byte	$D8
14586 33C8                        D8            .byte	$D8
14587 33C9                        D8            .byte	$D8
14588 33CA                        D8            .byte	$D8
14589 33CB                        D8            .byte	$D8
14590 33CC                        70            .byte	$70
14591 33CD                        00            .byte	0
14592 33CE                        00            .byte	0
14593 33CF                        00            .byte	0
14594 33D0                        00            .byte	0
14595                                           ! 1607  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14596 33D1                        00            .byte	0
14597 33D2                        00            .byte	0
14598 33D3                        00            .byte	0
14599 33D4                        00            .byte	0
14600 33D5                        66            .byte	$66
14601 33D6                        66            .byte	$66
14602 33D7                        66            .byte	$66
14603 33D8                        66            .byte	$66
14604 33D9                        66            .byte	$66
14605 33DA                        7C            .byte	$7C
14606 33DB                        60            .byte	$60
14607 33DC                        60            .byte	$60
14608 33DD                        C0            .byte	$C0
14609 33DE                        00            .byte	0
14610 33DF                        00            .byte	0
14611 33E0                        00            .byte	0
14612                                           ! 1608  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14613 33E1                        00            .byte	0
14614 33E2                        00            .byte	0
14615 33E3                        00            .byte	0
14616 33E4                        00            .byte	0
14617 33E5                        76            .byte	$76
14618 33E6                        DC            .byte	$DC
14619 33E7                        18            .byte	$18
14620 33E8                        18            .byte	$18
14621 33E9                        18            .byte	$18
14622 33EA                        18            .byte	$18
14623 33EB                        18            .byte	$18
14624 33EC                        18            .byte	$18
14625 33ED                        00            .byte	0
14626 33EE                        00            .byte	0
14627 33EF                        00            .byte	0
14628 33F0                        00            .byte	0
14629                                           ! 1609  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14630 33F1                        00            .byte	0
14631 33F2                        00            .byte	0
14632 33F3                        00            .byte	0
14633 33F4                        7E            .byte	$7E
14634 33F5                        18            .byte	$18
14635 33F6                        3C            .byte	$3C
14636 33F7                        66            .byte	$66
14637 33F8                        66            .byte	$66
14638 33F9                        66            .byte	$66
14639 33FA                        3C            .byte	$3C
14640 33FB                        18            .byte	$18
14641 33FC                        7E            .byte	$7E
14642 33FD                        00            .byte	0
14643 33FE                        00            .byte	0
14644 33FF                        00            .byte	0
14645 3400                        00            .byte	0
14646                                           ! 1610  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14647 3401                        00            .byte	0
14648 3402                        00            .byte	0
14649 3403                        00            .byte	0
14650 3404                        38            .byte	$38
14651 3405                        6C            .byte	$6C
14652 3406                        C6            .byte	$C6
14653 3407                        C6            .byte	$C6
14654 3408                        FE            .byte	$FE
14655 3409                        C6            .byte	$C6
14656 340A                        C6            .byte	$C6
14657 340B                        6C            .byte	$6C
14658 340C                        38            .byte	$38
14659 340D                        00            .byte	0
14660 340E                        00            .byte	0
14661 340F                        00            .byte	0
14662 3410                        00            .byte	0
14663                                           ! 1611  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14664 3411                        00            .byte	0
14665 3412                        00            .byte	0
14666 3413                        38            .byte	$38
14667 3414                        6C            .byte	$6C
14668 3415                        C6            .byte	$C6
14669 3416                        C6            .byte	$C6
14670 3417                        C6            .byte	$C6
14671 3418                        6C            .byte	$6C
14672 3419                        6C            .byte	$6C
14673 341A                        6C            .byte	$6C
14674 341B                        6C            .byte	$6C
14675 341C                        EE            .byte	$EE
14676 341D                        00            .byte	0
14677 341E                        00            .byte	0
14678 341F                        00            .byte	0
14679 3420                        00            .byte	0
14680                                           ! 1612  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14681 3421                        00            .byte	0
14682 3422                        00            .byte	0
14683 3423                        1E            .byte	$1E
14684 3424                        30            .byte	$30
14685 3425                        18            .byte	$18
14686 3426                        0C            .byte	$C
14687 3427                        3E            .byte	$3E
14688 3428                        66            .byte	$66
14689 3429                        66            .byte	$66
14690 342A                        66            .byte	$66
14691 342B                        66            .byte	$66
14692 342C                        3C            .byte	$3C
14693 342D                        00            .byte	0
14694 342E                        00            .byte	0
14695 342F                        00            .byte	0
14696 3430                        00            .byte	0
14697                                           ! 1613  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14698 3431                        00            .byte	0
14699 3432                        00            .byte	0
14700 3433                        00            .byte	0
14701 3434                        00            .byte	0
14702 3435                        00            .byte	0
14703 3436                        7E            .byte	$7E
14704 3437                        DB            .byte	$DB
14705 3438                        DB            .byte	$DB
14706 3439                        DB            .byte	$DB
14707 343A                        7E            .byte	$7E
14708 343B                        00            .byte	0
14709 343C                        00            .byte	0
14710 343D                        00            .byte	0
14711 343E                        00            .byte	0
14712 343F                        00            .byte	0
14713 3440                        00            .byte	0
14714                                           ! 1614  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14715 3441                        00            .byte	0
14716 3442                        00            .byte	0
14717 3443                        00            .byte	0
14718 3444                        03            .byte	3
14719 3445                        06            .byte	6
14720 3446                        7E            .byte	$7E
14721 3447                        DB            .byte	$DB
14722 3448                        DB            .byte	$DB
14723 3449                        F3            .byte	$F3
14724 344A                        7E            .byte	$7E
14725 344B                        60            .byte	$60
14726 344C                        C0            .byte	$C0
14727 344D                        00            .byte	0
14728 344E                        00            .byte	0
14729 344F                        00            .byte	0
14730 3450                        00            .byte	0
14731                                           ! 1615  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14732 3451                        00            .byte	0
14733 3452                        00            .byte	0
14734 3453                        1C            .byte	$1C
14735 3454                        30            .byte	$30
14736 3455                        60            .byte	$60
14737 3456                        60            .byte	$60
14738 3457                        7C            .byte	$7C
14739 3458                        60            .byte	$60
14740 3459                        60            .byte	$60
14741 345A                        60            .byte	$60
14742 345B                        30            .byte	$30
14743 345C                        1C            .byte	$1C
14744 345D                        00            .byte	0
14745 345E                        00            .byte	0
14746 345F                        00            .byte	0
14747 3460                        00            .byte	0
14748                                           ! 1616  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14749 3461                        00            .byte	0
14750 3462                        00            .byte	0
14751 3463                        00            .byte	0
14752 3464                        7C            .byte	$7C
14753 3465                        C6            .byte	$C6
14754 3466                        C6            .byte	$C6
14755 3467                        C6            .byte	$C6
14756 3468                        C6            .byte	$C6
14757 3469                        C6            .byte	$C6
14758 346A                        C6            .byte	$C6
14759 346B                        C6            .byte	$C6
14760 346C                        C6            .byte	$C6
14761 346D                        00            .byte	0
14762 346E                        00            .byte	0
14763 346F                        00            .byte	0
14764 3470                        00            .byte	0
14765                                           ! 1617  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14766 3471                        00            .byte	0
14767 3472                        00            .byte	0
14768 3473                        00            .byte	0
14769 3474                        00            .byte	0
14770 3475                        FE            .byte	$FE
14771 3476                        00            .byte	0
14772 3477                        00            .byte	0
14773 3478                        FE            .byte	$FE
14774 3479                        00            .byte	0
14775 347A                        00            .byte	0
14776 347B                        FE            .byte	$FE
14777 347C                        00            .byte	0
14778 347D                        00            .byte	0
14779 347E                        00            .byte	0
14780 347F                        00            .byte	0
14781 3480                        00            .byte	0
14782                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14783 3481                        00            .byte	0
14784 3482                        00            .byte	0
14785 3483                        00            .byte	0
14786 3484                        00            .byte	0
14787 3485                        18            .byte	$18
14788 3486                        18            .byte	$18
14789 3487                        7E            .byte	$7E
14790 3488                        18            .byte	$18
14791 3489                        18            .byte	$18
14792 348A                        00            .byte	0
14793 348B                        00            .byte	0
14794 348C                        FF            .byte	$FF
14795 348D                        00            .byte	0
14796 348E                        00            .byte	0
14797 348F                        00            .byte	0
14798 3490                        00            .byte	0
14799                                           ! 1619  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14800 3491                        00            .byte	0
14801 3492                        00            .byte	0
14802 3493                        00            .byte	0
14803 3494                        30            .byte	$30
14804 3495                        18            .byte	$18
14805 3496                        0C            .byte	$C
14806 3497                        06            .byte	6
14807 3498                        0C            .byte	$C
14808 3499                        18            .byte	$18
14809 349A                        30            .byte	$30
14810 349B                        00            .byte	0
14811 349C                        7E            .byte	$7E
14812 349D                        00            .byte	0
14813 349E                        00            .byte	0
14814 349F                        00            .byte	0
14815 34A0                        00            .byte	0
14816                                           ! 1620  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14817 34A1                        00            .byte	0
14818 34A2                        00            .byte	0
14819 34A3                        00            .byte	0
14820 34A4                        0C            .byte	$C
14821 34A5                        18            .byte	$18
14822 34A6                        30            .byte	$30
14823 34A7                        60            .byte	$60
14824 34A8                        30            .byte	$30
14825 34A9                        18            .byte	$18
14826 34AA                        0C            .byte	$C
14827 34AB                        00            .byte	0
14828 34AC                        7E            .byte	$7E
14829 34AD                        00            .byte	0
14830 34AE                        00            .byte	0
14831 34AF                        00            .byte	0
14832 34B0                        00            .byte	0
14833                                           ! 1621  0x00, 
14834 34B1                        00            .byte	0
14835                                           ! 1621 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14836 34B2                        00            .byte	0
14837 34B3                        0E            .byte	$E
14838 34B4                        1B            .byte	$1B
14839 34B5                        1B            .byte	$1B
14840 34B6                        18            .byte	$18
14841 34B7                        18            .byte	$18
14842 34B8                        18            .byte	$18
14843 34B9                        18            .byte	$18
14844 34BA                        18            .byte	$18
14845 34BB                        18            .byte	$18
14846 34BC                        18            .byte	$18
14847 34BD                        18            .byte	$18
14848 34BE                        18            .byte	$18
14849 34BF                        18            .byte	$18
14850 34C0                        18            .byte	$18
14851                                           ! 1622  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14852 34C1                        18            .byte	$18
14853 34C2                        18            .byte	$18
14854 34C3                        18            .byte	$18
14855 34C4                        18            .byte	$18
14856 34C5                        18            .byte	$18
14857 34C6                        18            .byte	$18
14858 34C7                        18            .byte	$18
14859 34C8                        18            .byte	$18
14860 34C9                        D8            .byte	$D8
14861 34CA                        D8            .byte	$D8
14862 34CB                        D8            .byte	$D8
14863 34CC                        70            .byte	$70
14864 34CD                        00            .byte	0
14865 34CE                        00            .byte	0
14866 34CF                        00            .byte	0
14867 34D0                        00            .byte	0
14868                                           ! 1623  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14869 34D1                        00            .byte	0
14870 34D2                        00            .byte	0
14871 34D3                        00            .byte	0
14872 34D4                        00            .byte	0
14873 34D5                        18            .byte	$18
14874 34D6                        18            .byte	$18
14875 34D7                        00            .byte	0
14876 34D8                        7E            .byte	$7E
14877 34D9                        00            .byte	0
14878 34DA                        18            .byte	$18
14879 34DB                        18            .byte	$18
14880 34DC                        00            .byte	0
14881 34DD                        00            .byte	0
14882 34DE                        00            .byte	0
14883 34DF                        00            .byte	0
14884 34E0                        00            .byte	0
14885                                           ! 1624  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14886 34E1                        00            .byte	0
14887 34E2                        00            .byte	0
14888 34E3                        00            .byte	0
14889 34E4                        00            .byte	0
14890 34E5                        00            .byte	0
14891 34E6                        76            .byte	$76
14892 34E7                        DC            .byte	$DC
14893 34E8                        00            .byte	0
14894 34E9                        76            .byte	$76
14895 34EA                        DC            .byte	$DC
14896 34EB                        00            .byte	0
14897 34EC                        00            .byte	0
14898 34ED                        00            .byte	0
14899 34EE                        00            .byte	0
14900 34EF                        00            .byte	0
14901 34F0                        00            .byte	0
14902                                           ! 1625  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14903 34F1                        00            .byte	0
14904 34F2                        38            .byte	$38
14905 34F3                        6C            .byte	$6C
14906 34F4                        6C            .byte	$6C
14907 34F5                        38            .byte	$38
14908 34F6                        00            .byte	0
14909 34F7                        00            .byte	0
14910 34F8                        00            .byte	0
14911 34F9                        00            .byte	0
14912 34FA                        00            .byte	0
14913 34FB                        00            .byte	0
14914 34FC                        00            .byte	0
14915 34FD                        00            .byte	0
14916 34FE                        00            .byte	0
14917 34FF                        00            .byte	0
14918 3500                        00            .byte	0
14919                                           ! 1626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14920 3501                        00            .byte	0
14921 3502                        00            .byte	0
14922 3503                        00            .byte	0
14923 3504                        00            .byte	0
14924 3505                        00            .byte	0
14925 3506                        00            .byte	0
14926 3507                        00            .byte	0
14927 3508                        18            .byte	$18
14928 3509                        18            .byte	$18
14929 350A                        00            .byte	0
14930 350B                        00            .byte	0
14931 350C                        00            .byte	0
14932 350D                        00            .byte	0
14933 350E                        00            .byte	0
14934 350F                        00            .byte	0
14935 3510                        00            .byte	0
14936                                           ! 1627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14937 3511                        00            .byte	0
14938 3512                        00            .byte	0
14939 3513                        00            .byte	0
14940 3514                        00            .byte	0
14941 3515                        00            .byte	0
14942 3516                        00            .byte	0
14943 3517                        00            .byte	0
14944 3518                        00            .byte	0
14945 3519                        18            .byte	$18
14946 351A                        00            .byte	0
14947 351B                        00            .byte	0
14948 351C                        00            .byte	0
14949 351D                        00            .byte	0
14950 351E                        00            .byte	0
14951 351F                        00            .byte	0
14952 3520                        00            .byte	0
14953                                           ! 1628  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14954 3521                        00            .byte	0
14955 3522                        0F            .byte	$F
14956 3523                        0C            .byte	$C
14957 3524                        0C            .byte	$C
14958 3525                        0C            .byte	$C
14959 3526                        0C            .byte	$C
14960 3527                        0C            .byte	$C
14961 3528                        EC            .byte	$EC
14962 3529                        6C            .byte	$6C
14963 352A                        6C            .byte	$6C
14964 352B                        3C            .byte	$3C
14965 352C                        1C            .byte	$1C
14966 352D                        00            .byte	0
14967 352E                        00            .byte	0
14968 352F                        00            .byte	0
14969 3530                        00            .byte	0
14970                                           ! 1629  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14971 3531                        00            .byte	0
14972 3532                        D8            .byte	$D8
14973 3533                        6C            .byte	$6C
14974 3534                        6C            .byte	$6C
14975 3535                        6C            .byte	$6C
14976 3536                        6C            .byte	$6C
14977 3537                        6C            .byte	$6C
14978 3538                        00            .byte	0
14979 3539                        00            .byte	0
14980 353A                        00            .byte	0
14981 353B                        00            .byte	0
14982 353C                        00            .byte	0
14983 353D                        00            .byte	0
14984 353E                        00            .byte	0
14985 353F                        00            .byte	0
14986 3540                        00            .byte	0
14987                                           ! 1630  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14988 3541                        00            .byte	0
14989 3542                        70            .byte	$70
14990 3543                        D8            .byte	$D8
14991 3544                        30            .byte	$30
14992 3545                        60            .byte	$60
14993 3546                        C8            .byte	$C8
14994 3547                        F8            .byte	$F8
14995 3548                        00            .byte	0
14996 3549                        00            .byte	0
14997 354A                        00            .byte	0
14998 354B                        00            .byte	0
14999 354C                        00            .byte	0
15000 354D                        00            .byte	0
15001 354E                        00            .byte	0
15002 354F                        00            .byte	0
15003 3550                        00            .byte	0
15004                                           ! 1631  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15005 3551                        00            .byte	0
15006 3552                        00            .byte	0
15007 3553                        00            .byte	0
15008 3554                        00            .byte	0
15009 3555                        7C            .byte	$7C
15010 3556                        7C            .byte	$7C
15011 3557                        7C            .byte	$7C
15012 3558                        7C            .byte	$7C
15013 3559                        7C            .byte	$7C
15014 355A                        7C            .byte	$7C
15015 355B                        7C            .byte	$7C
15016 355C                        00            .byte	0
15017 355D                        00            .byte	0
15018 355E                        00            .byte	0
15019 355F                        00            .byte	0
15020 3560                        00            .byte	0
15021                                           ! 1632  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15022 3561                        00            .byte	0
15023 3562                        00            .byte	0
15024 3563                        00            .byte	0
15025 3564                        00            .byte	0
15026 3565                        00            .byte	0
15027 3566                        00            .byte	0
15028 3567                        00            .byte	0
15029 3568                        00            .byte	0
15030 3569                        00            .byte	0
15031 356A                        00            .byte	0
15032 356B                        00            .byte	0
15033 356C                        00            .byte	0
15034 356D                        00            .byte	0
15035 356E                        00            .byte	0
15036 356F                        00            .byte	0
15037                                           ! 1633 };
15038 3570                        00            .byte	0
15039                                           !BCC_EOS
15040                                           ! 1634 static Bit8u vgafont14alt[1]={0x00};
15041                       00003571            _vgafont14alt:
15042 3571                        00            .byte	0
15043                                           !BCC_EOS
15044                                           ! 1635 static Bit8u vgafont16alt[1]={0x00};
15045                       00003572            _vgafont16alt:
15046 3572                        00            .byte	0
15047                                           !BCC_EOS
15048                                           ! 1636 #asm
15049                                           !BCC_ASM
15050                       00003573            init_vga_card:
15051                                           ;; switch to color mode and enable CPU access 480 lines
15052 3573           BA                   03C2    mov dx, #0x3C2
15053 3576           B0                     C3    mov al, #0xC3
15054 3578           EE                           outb dx,al
15055                                           ;; more than 64k 3C4/04
15056 3579           BA                   03C4    mov dx, #0x3C4
15057 357C           B0                     04    mov al, #0x04
15058 357E           EE                           outb dx,al
15059 357F           BA                   03C5    mov dx, #0x3C5
15060 3582           B0                     02    mov al, #0x02
15061 3584           EE                           outb dx,al
15062 3585           BB                   358F    mov bx, #msg_vga_init
15063 3588           53                           push bx
15064 3589           E8         483B              call _printf
15065 358C           44                           inc sp
15066 358D           44                           inc sp
15067 358E           C3                           ret
15068                       0000358F            msg_vga_init:
15069 358F                        56            .ascii "VGABios $Id: vgabios.c,v 1.67 2008/01/27 09:44:12 vruppert Exp $"
15070 35CF                        0D            .byte 0x0d,0x0a,0x00
15071                                           ! 1658 endasm
15072                                           !BCC_ENDASM
15073                                           ! 1659 #asm
15074                                           !BCC_ASM
15075                       000035D2            init_bios_area:
15076 35D2           1E                           push ds
15077 35D3           B8                   0040    mov ax, # 0x40
15078 35D6           8ED8                         mov ds, ax
15079                                           ;; init detected hardware BIOS Area
15080 35D8           BB                   0010    mov bx, # 0x10
15081 35DB           8B07                         mov ax, [bx]
15082 35DD           25                   FFCF    and ax, #0xffcf
15083                                           ;; set 80x25 color (not clear from RBIL but usual)
15084 35E0           0D                   0020    or ax, #0x0020
15085 35E3           8907                         mov [bx], ax
15086                                           ;; Just for the first int10 find its children
15087                                           ;; the default char height
15088 35E5           BB                   0085    mov bx, # 0x85
15089 35E8           B0                     10    mov al, #0x10
15090 35EA           8807                         mov [bx], al
15091                                           ;; Clear the screen
15092 35EC           BB                   0087    mov bx, # 0x87
15093 35EF           B0                     60    mov al, #0x60
15094 35F1           8807                         mov [bx], al
15095                                           ;; Set the basic screen we have
15096 35F3           BB                   0088    mov bx, # 0x88
15097 35F6           B0                     F9    mov al, #0xf9
15098 35F8           8807                         mov [bx], al
15099                                           ;; Set the basic modeset options
15100 35FA           BB                   0089    mov bx, # 0x89
15101 35FD           B0                     51    mov al, #0x51
15102 35FF           8807                         mov [bx], al
15103                                           ;; Set the default MSR
15104 3601           BB                   0065    mov bx, # 0x65
15105 3604           B0                     09    mov al, #0x09
15106 3606           8807                         mov [bx], al
15107 3608           1F                           pop ds
15108 3609           C3                           ret
15109                       0000360A            _video_save_pointer_table:
15110 360A                      02A1              .word _video_param_table
15111 360C                      C000              .word 0xc000
15112 360E                      0000              .word 0
15113 3610                      0000              .word 0
15114 3612                      0000              .word 0
15115 3614                      0000              .word 0
15116 3616                      0000              .word 0
15117 3618                      0000              .word 0
15118 361A                      0000              .word 0
15119 361C                      0000              .word 0
15120 361E                      0000              .word 0
15121 3620                      0000              .word 0
15122 3622                      0000              .word 0
15123 3624                      0000              .word 0
15124                                           ! 1709 endasm
15125                                           !BCC_ENDASM
15126                                           ! 1710 static void display_splash_screen()
15127                                           ! 1711 {
15128                                           
15129                       00003626            _display_splash_screen:
15130                                           ! 1712 }
15131 3626           C3                         ret
15132                                           ! 1713 static void display_info()
15133                                           ! 1714 {
15134                       00003627            _display_info:
15135                                           ! 1715 #asm
15136                                           !BCC_ASM
15137 3627           B8                   C000   mov ax,#0xc000
15138 362A           8ED8                        mov ds,ax
15139 362C           BE                   0022   mov si,#vgabios_name
15140 362F           E8         0013             call _display_string
15141 3632           BE                   0038   mov si,#vgabios_version
15142 3635           E8         000D             call _display_string
15143                                            ;;mov si,#vgabios_copyright
15144                                            ;;call _display_string
15145                                            ;;mov si,#crlf
15146                                            ;;call _display_string
15147 3638           BE                   0080   mov si,#vgabios_license
15148 363B           E8         0007             call _display_string
15149 363E           BE                   00B5   mov si,#vgabios_website
15150 3641           E8         0001             call _display_string
15151                                           ! 1730 endasm
15152                                           !BCC_ENDASM
15153                                           ! 1731 }
15154 3644           C3                         ret
15155                                           ! 1732 static void display_string()
15156                                           ! 1733 {
15157                       00003645            _display_string:
15158                                           ! 1734 #asm
15159                                           !BCC_ASM
15160 3645           8CD8                        mov ax,ds
15161 3647           8EC0                        mov es,ax
15162 3649           89F7                        mov di,si
15163 364B           31C9                        xor cx,cx
15164 364D           F7D1                        not cx
15165 364F           30C0                        xor al,al
15166 3651           FC                          cld
15167 3652           F2                          repne
15168 3653           AE                           scasb
15169 3654           F7D1                        not cx
15170 3656           49                          dec cx
15171 3657           51                          push cx
15172 3658           B8                   0300   mov ax,#0x0300
15173 365B           BB                   0000   mov bx,#0x0000
15174 365E           CD                     10   int #0x10
15175 3660           59                          pop cx
15176 3661           B8                   1301   mov ax,#0x1301
15177 3664           BB                   000B   mov bx,#0x000b
15178 3667           89F5                        mov bp,si
15179 3669           CD                     10   int #0x10
15180                                           ! 1755 endasm
15181                                           !BCC_ENDASM
15182                                           ! 1756 }
15183 366B           C3                         ret
15184                                           ! 1757 static void int10_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15185                                           ! 1758   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15186                       0000366C            _int10_debugmsg:
15187                                           !BCC_EOS
15188                                           ! 1759 {
15189                                           ! 1760  if(( AX >> 8 )!=0x0E)
15190 366C           55                         push	bp
15191 366D           89E5                       mov	bp,sp
15192                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15193 366F           8B46         12            mov	ax,$12[bp]
15194 3672           88E0                       mov	al,ah
15195 3674           30E4                       xor	ah,ah
15196                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
15197 3676           3D                   000E  cmp	ax,*$E
15198 3679           74           20            je  	.1
15199                       0000367B            .2:
15200                                           ! 1761   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
15201                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15202 367B           FF76         0E            push	$E[bp]
15203                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15204 367E           FF76         10            push	$10[bp]
15205                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15206 3681           FF76         0C            push	$C[bp]
15207                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15208 3684           8A46         12            mov	al,$12[bp]
15209                                           ! Debug: list unsigned char = al+0 (used reg = )
15210 3687           30E4                       xor	ah,ah
15211 3689           50                         push	ax
15212                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
15213 368A           8B46         12            mov	ax,$12[bp]
15214 368D           88E0                       mov	al,ah
15215 368F           30E4                       xor	ah,ah
15216                                           ! Debug: list unsigned int = ax+0 (used reg = )
15217 3691           50                         push	ax
15218                                           ! Debug: list * char = .3+0 (used reg = )
15219 3692           BB                   A13F  mov	bx,#.3
15220 3695           53                         push	bx
15221                                           ! Debug: func () void = printf+0 (used reg = )
15222 3696           E8         472E            call	_printf
15223 3699           89EC                       mov	sp,bp
15224                                           !BCC_EOS
15225                                           ! 1762 }
15226                       0000369B            .1:
15227 369B           5D                         pop	bp
15228 369C           C3                         ret
15229                                           ! 1763 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15230                                           ! Register BX used in function int10_debugmsg
15231                                           ! 1764   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15232                       0000369D            _int10_func:
15233                                           !BCC_EOS
15234                                           ! 1765 {
15235                                           ! 1766  switch(( AX >> 8 ))
15236 369D           55                         push	bp
15237 369E           89E5                       mov	bp,sp
15238                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15239 36A0           8B46         12            mov	ax,$12[bp]
15240 36A3           88E0                       mov	al,ah
15241 36A5           30E4                       xor	ah,ah
15242                                           ! 1767   {
15243 36A7           E9         04F6            br 	.6
15244                                           ! 1768    case 0x00:
15245                                           ! 1769      biosfn_set_video_mode(( AX & 0x00ff ));
15246                       000036AA            .7:
15247                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15248 36AA           8A46         12            mov	al,$12[bp]
15249                                           ! Debug: list unsigned char = al+0 (used reg = )
15250 36AD           30E4                       xor	ah,ah
15251 36AF           50                         push	ax
15252                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15253 36B0           E8         0545            call	_biosfn_set_video_mode
15254 36B3           44                         inc	sp
15255 36B4           44                         inc	sp
15256                                           !BCC_EOS
15257                                           ! 1770      switch(( AX & 0x00ff )&0x7F)
15258                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15259 36B5           8A46         12            mov	al,$12[bp]
15260                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15261 36B8           24                     7F  and	al,*$7F
15262                                           ! 1771       {case 6:
15263 36BA           EB           24            jmp .A
15264                                           ! 1772         AX = ((AX & 0xff00) | (0x3F));
15265                       000036BC            .B:
15266                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15267 36BC           8B46         12            mov	ax,$12[bp]
15268 36BF           30C0                       xor	al,al
15269                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15270 36C1           0C                     3F  or	al,*$3F
15271                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15272 36C3           8946         12            mov	$12[bp],ax
15273                                           !BCC_EOS
15274                                           ! 1773         break;
15275 36C6           EB           3D            jmp .8
15276                                           !BCC_EOS
15277                                           ! 1774        case 0:
15278                                           ! 1775        case 1:
15279                       000036C8            .C:
15280                                           ! 1776        case 2:
15281                       000036C8            .D:
15282                                           ! 1777        case 3:
15283                       000036C8            .E:
15284                                           ! 1778        case 4:
15285                       000036C8            .F:
15286                                           ! 1779        case 5:
15287                       000036C8            .10:
15288                                           ! 1780        case 7:
15289                       000036C8            .11:
15290                                           ! 1781         AX = ((AX & 0xff00) | (0x30));
15291                       000036C8            .12:
15292                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15293 36C8           8B46         12            mov	ax,$12[bp]
15294 36CB           30C0                       xor	al,al
15295                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15296 36CD           0C                     30  or	al,*$30
15297                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15298 36CF           8946         12            mov	$12[bp],ax
15299                                           !BCC_EOS
15300                                           ! 1782         break;
15301 36D2           EB           31            jmp .8
15302                                           !BCC_EOS
15303                                           ! 1783       default:
15304                                           ! 1784         AX = ((AX & 0xff00) | (0x20));
15305                       000036D4            .13:
15306                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15307 36D4           8B46         12            mov	ax,$12[bp]
15308 36D7           30C0                       xor	al,al
15309                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15310 36D9           0C                     20  or	al,*$20
15311                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15312 36DB           8946         12            mov	$12[bp],ax
15313                                           !BCC_EOS
15314                                           ! 1785       }
15315                                           ! 1786      break;
15316 36DE           EB           25            jmp .8
15317                       000036E0            .A:
15318 36E0           2C                     00  sub	al,*0
15319 36E2           72           F0            jb 	.13
15320 36E4           3C                     07  cmp	al,*7
15321 36E6           77           1B            ja  	.14
15322 36E8           30E4                       xor	ah,ah
15323 36EA           D1E0                       shl	ax,*1
15324 36EC           89C3                       mov	bx,ax
15325 36EE           2E                         seg	cs
15326 36EF           FFA7       36F3            br	.15[bx]
15327                       000036F3            .15:
15328 36F3                      36C8            .word	.C
15329 36F5                      36C8            .word	.D
15330 36F7                      36C8            .word	.E
15331 36F9                      36C8            .word	.F
15332 36FB                      36C8            .word	.10
15333 36FD                      36C8            .word	.11
15334 36FF                      36BC            .word	.B
15335 3701                      36C8            .word	.12
15336                       00003703            .14:
15337 3703           EB           CF            jmp	.13
15338                       00003705            .8:
15339 3705           E9         04EE            br 	.4
15340                                           !BCC_EOS
15341                                           ! 1787    case 0x01:
15342                                           ! 1788      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15343                       00003708            .16:
15344                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15345 3708           8A46         10            mov	al,$10[bp]
15346                                           ! Debug: list unsigned char = al+0 (used reg = )
15347 370B           30E4                       xor	ah,ah
15348 370D           50                         push	ax
15349                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15350 370E           8B46         10            mov	ax,$10[bp]
15351 3711           88E0                       mov	al,ah
15352 3713           30E4                       xor	ah,ah
15353                                           ! Debug: list unsigned int = ax+0 (used reg = )
15354 3715           50                         push	ax
15355                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15356 3716           E8         0B8C            call	_biosfn_set_cursor_shape
15357 3719           83C4                   04  add	sp,*4
15358                                           !BCC_EOS
15359                                           ! 1789      break;
15360 371C           E9         04D7            br 	.4
15361                                           !BCC_EOS
15362                                           ! 1790    case 0x02:
15363                                           ! 1791      biosfn_set_curs
15364                                           ! 1791 or_pos(( BX >> 8 ),DX);
15365                       0000371F            .17:
15366                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15367 371F           FF76         0E            push	$E[bp]
15368                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15369 3722           8B46         0C            mov	ax,$C[bp]
15370 3725           88E0                       mov	al,ah
15371 3727           30E4                       xor	ah,ah
15372                                           ! Debug: list unsigned int = ax+0 (used reg = )
15373 3729           50                         push	ax
15374                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15375 372A           E8         0C93            call	_biosfn_set_cursor_pos
15376 372D           83C4                   04  add	sp,*4
15377                                           !BCC_EOS
15378                                           ! 1792      break;
15379 3730           E9         04C3            br 	.4
15380                                           !BCC_EOS
15381                                           ! 1793    case 0x03:
15382                                           ! 1794      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15383                       00003733            .18:
15384                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15385 3733           8D5E         0E            lea	bx,$E[bp]
15386 3736           53                         push	bx
15387                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15388 3737           8D5E         10            lea	bx,$10[bp]
15389 373A           53                         push	bx
15390                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15391 373B           8B46         0C            mov	ax,$C[bp]
15392 373E           88E0                       mov	al,ah
15393 3740           30E4                       xor	ah,ah
15394                                           ! Debug: list unsigned int = ax+0 (used reg = )
15395 3742           50                         push	ax
15396                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15397 3743           E8         0D7A            call	_biosfn_get_cursor_pos
15398 3746           83C4                   06  add	sp,*6
15399                                           !BCC_EOS
15400                                           ! 1795      break;
15401 3749           E9         04AA            br 	.4
15402                                           !BCC_EOS
15403                                           ! 1796    case 0x04:
15404                                           ! 1797      unimplemented();
15405                       0000374C            .19:
15406                                           ! Debug: func () void = unimplemented+0 (used reg = )
15407 374C           E8         465C            call	_unimplemented
15408                                           !BCC_EOS
15409                                           ! 1798      AX=0x00;
15410                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15411 374F           31C0                       xor	ax,ax
15412 3751           8946         12            mov	$12[bp],ax
15413                                           !BCC_EOS
15414                                           ! 1799      BX=0x00;
15415                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15416 3754           31C0                       xor	ax,ax
15417 3756           8946         0C            mov	$C[bp],ax
15418                                           !BCC_EOS
15419                                           ! 1800      CX=0x00;
15420                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15421 3759           31C0                       xor	ax,ax
15422 375B           8946         10            mov	$10[bp],ax
15423                                           !BCC_EOS
15424                                           ! 1801      DX=0x00;
15425                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15426 375E           31C0                       xor	ax,ax
15427 3760           8946         0E            mov	$E[bp],ax
15428                                           !BCC_EOS
15429                                           ! 1802      break;
15430 3763           E9         0490            br 	.4
15431                                           !BCC_EOS
15432                                           ! 1803    case 0x05:
15433                                           ! 1804      biosfn_set_active_page(( AX & 0x00ff ));
15434                       00003766            .1A:
15435                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15436 3766           8A46         12            mov	al,$12[bp]
15437                                           ! Debug: list unsigned char = al+0 (used reg = )
15438 3769           30E4                       xor	ah,ah
15439 376B           50                         push	ax
15440                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15441 376C           E8         0DC6            call	_biosfn_set_active_page
15442 376F           44                         inc	sp
15443 3770           44                         inc	sp
15444                                           !BCC_EOS
15445                                           ! 1805      break;
15446 3771           E9         0482            br 	.4
15447                                           !BCC_EOS
15448                                           ! 1806    case 0x06:
15449                                           ! 1807      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15450                       00003774            .1B:
15451                                           ! Debug: list int = const 1 (used reg = )
15452 3774           B8                   0001  mov	ax,*1
15453 3777           50                         push	ax
15454                                           ! Debug: list int = const $FF (used reg = )
15455 3778           B8                   00FF  mov	ax,#$FF
15456 377B           50                         push	ax
15457                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15458 377C           8A46         0E            mov	al,$E[bp]
15459                                           ! Debug: list unsigned char = al+0 (used reg = )
15460 377F           30E4                       xor	ah,ah
15461 3781           50                         push	ax
15462                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15463 3782           8B46         0E            mov	ax,$E[bp]
15464 3785           88E0                       mov	al,ah
15465 3787           30E4                       xor	ah,ah
15466                                           ! Debug: list unsigned int = ax+0 (used reg = )
15467 3789           50                         push	ax
15468                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15469 378A           8A46         10            mov	al,$10[bp]
15470                                           ! Debug: list unsigned char = al+0 (used reg = )
15471 378D           30E4                       xor	ah,ah
15472 378F           50                         push	ax
15473                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15474 3790           8B46         10            mov	ax,$10[bp]
15475 3793           88E0                       mov	al,ah
15476 3795           30E4                       xor	ah,ah
15477                                           ! Debug: list unsigned int = ax+0 (used reg = )
15478 3797           50                         push	ax
15479                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15480 3798           8B46         0C            mov	ax,$C[bp]
15481 379B           88E0                       mov	al,ah
15482 379D           30E4                       xor	ah,ah
15483                                           ! Debug: list unsigned int = ax+0 (used reg = )
15484 379F           50                         push	ax
15485                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15486 37A0           8A46         12            mov	al,$12[bp]
15487                                           ! Debug: list unsigned char = al+0 (used reg = )
15488 37A3           30E4                       xor	ah,ah
15489 37A5           50                         push	ax
15490                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15491 37A6           E8         1222            call	_biosfn_scroll
15492 37A9           83C4                   10  add	sp,*$10
15493                                           !BCC_EOS
15494                                           ! 1808      break;
15495 37AC           E9         0447            br 	.4
15496                                           !BCC_EOS
15497                                           ! 1809    case 0x07:
15498                                           ! 1810      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15499                       000037AF            .1C:
15500                                           ! Debug: list int = const 0 (used reg = )
15501 37AF           31C0                       xor	ax,ax
15502 37B1           50                         push	ax
15503                                           ! Debug: list int = const $FF (used reg = )
15504 37B2           B8                   00FF  mov	ax,#$FF
15505 37B5           50                         push	ax
15506                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15507 37B6           8A46         0E            mov	al,$E[bp]
15508                                           ! Debug: list unsigned char = al+0 (used reg = )
15509 37B9           30E4                       xor	ah,ah
15510 37BB           50                         push	ax
15511                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15512 37BC           8B46         0E            mov	ax,$E[bp]
15513 37BF           88E0                       mov	al,ah
15514 37C1           30E4                       xor	ah,ah
15515                                           ! Debug: list unsigned int = ax+0 (used reg = )
15516 37C3           50                         push	ax
15517                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15518 37C4           8A46         10            mov	al,$10[bp]
15519                                           ! Debug: list unsigned char = al+0 (used reg = )
15520 37C7           30E4                       xor	ah,ah
15521 37C9           50                         push	ax
15522                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15523 37CA           8B46         10            mov	ax,$10[bp]
15524 37CD           88E0                       mov	al,ah
15525 37CF           30E4                       xor	ah,ah
15526                                           ! Debug: list unsigned int = ax+0 (used reg = )
15527 37D1           50                         push	ax
15528                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15529 37D2           8B46         0C            mov	ax,$C[bp]
15530 37D5           88E0                       mov	al,ah
15531 37D7           30E4                       xor	ah,ah
15532                                           ! Debug: list unsigned int = ax+0 (used reg = )
15533 37D9           50                         push	ax
15534                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15535 37DA           8A46         12            mov	al,$12[bp]
15536                                           ! Debug: list unsigned char = al+0 (used reg = )
15537 37DD           30E4                       xor	ah,ah
15538 37DF           50                         push	ax
15539                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15540 37E0           E8         11E8            call	_biosfn_scroll
15541 37E3           83C4                   10  add	sp,*$10
15542                                           !BCC_EOS
15543                                           ! 1811      break;
15544 37E6           E9         040D            br 	.4
15545                                           !BCC_EOS
15546                                           ! 1812    case 0x08:
15547                                           ! 1813      biosfn_read_char_attr(( BX >> 8 ),&AX);
15548                       000037E9            .1D:
15549                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15550 37E9           8D5E         12            lea	bx,$12[bp]
15551 37EC           53                         push	bx
15552                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15553 37ED           8B46         0C            mov	ax,$C[bp]
15554 37F0           88E0                       mov	al,ah
15555 37F2           30E4                       xor	ah,ah
15556                                           ! Debug: list unsigned int = ax+0 (used reg = )
15557 37F4           50                         push	ax
15558                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15559 37F5           E8         1900            call	_biosfn_read_char_attr
15560 37F8           83C4                   04  add	sp,*4
15561                                           !BCC_EOS
15562                                           ! 1814      break;
15563 37FB           E9         03F8            br 	.4
15564                                           !BCC_EOS
15565                                           ! 1815    case 0x09:
15566                                           ! 1816      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15567                       000037FE            .1E:
15568                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15569 37FE           FF76         10            push	$10[bp]
15570                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15571 3801           8A46         0C            mov	al,$C[bp]
15572                                           ! Debug: list unsigned char = al+0 (used reg = )
15573 3804           30E4                       xor	ah,ah
15574 3806           50                         push	ax
15575                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15576 3807           8B46         0C            mov	ax,$C[bp]
15577 380A           88E0                       mov	al,ah
15578 380C           30E4                       xor	ah,ah
15579                                           ! Debug: list unsigned int = ax+0 (used reg = )
15580 380E           50                         push	ax
15581                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15582 380F           8A46         12            mov	al,$12[bp]
15583                                           ! Debug: list unsigned char = al+0 (used reg = )
15584 3812           30E4                       xor	ah,ah
15585 3814           50                         push	ax
15586                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15587 3815           E8         1E28            call	_biosfn_write_char_attr
15588 3818           83C4                   08  add	sp,*8
15589                                           !BCC_EOS
15590                                           ! 1817      break;
15591 381B           E9         03D8            br 	.4
15592                                           !BCC_EOS
15593                                           ! 1818    case 0x0A:
15594                                           ! 1819      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15595                       0000381E            .1F:
15596                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15597 381E           FF76         10            push	$10[bp]
15598                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15599 3821           8A46         0C            mov	al,$C[bp]
15600                                           ! Debug: list unsigned char = al+0 (used reg = )
15601 3824           30E4                       xor	ah,ah
15602 3826           50                         push	ax
15603                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15604 3827           8B46         0C            mov	ax,$C[bp]
15605 382A           88E0                       mov	al,ah
15606 382C           30E4                       xor	ah,ah
15607                                           ! Debug: list unsigned int = ax+0 (used reg = )
15608 382E           50                         push	ax
15609                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15610 382F           8A46         12            mov	al,$12[bp]
15611                                           ! Debug: list unsigned char = al+0 (used reg = )
15612 3832           30E4                       xor	ah,ah
15613 3834           50                         push	ax
15614                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15615 3835           E8         2001            call	_biosfn_write_char_only
15616 3838           83C4                   08  add	sp,*8
15617                                           !BCC_EOS
15618                                           ! 1820      break;
15619 383B           E9         03B8            br 	.4
15620                                           !BCC_EOS
15621                                           ! 1821    case 0x0C:
15622                                           ! 1822      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15623                       0000383E            .20:
15624                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15625 383E           FF76         0E            push	$E[bp]
15626                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15627 3841           FF76         10            push	$10[bp]
15628                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15629 3844           8A46         12            mov	al,$12[bp]
15630                                           ! Debug: list unsigned char = al+0 (used reg = )
15631 3847           30E4                       xor	ah,ah
15632 3849           50                         push	ax
15633                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15634 384A           8B46         0C            mov	ax,$C[bp]
15635 384D           88E0                       mov	al,ah
15636 384F           30E4                       xor	ah,ah
15637                                           ! Debug: list unsigned int = ax+0 (used reg = )
15638 3851           50                         push	ax
15639                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15640 3852           E8         225A            call	_biosfn_write_pixel
15641 3855           83C4                   08  add	sp,*8
15642                                           !BCC_EOS
15643                                           ! 1823      break;
15644 3858           E9         039B            br 	.4
15645                                           !BCC_EOS
15646                                           ! 1824    case 0x0D:
15647                                           ! 1825      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15648                       0000385B            .21:
15649                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15650 385B           8D5E         12            lea	bx,$12[bp]
15651 385E           53                         push	bx
15652                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15653 385F           FF76         0E            push	$E[bp]
15654                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15655 3862           FF76         10            push	$10[bp]
15656                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15657 3865           8B46         0C            mov	ax,$C[bp]
15658 3868           88E0                       mov	al,ah
15659 386A           30E4                       xor	ah,ah
15660                                           ! Debug: list unsigned int = ax+0 (used reg = )
15661 386C           50                         push	ax
15662                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15663 386D           E8         24E0            call	_biosfn_read_pixel
15664 3870           83C4                   08  add	sp,*8
15665                                           !BCC_EOS
15666                                           ! 1826      break;
15667 3873           E9         0380            br 	.4
15668                                           !BCC_EOS
15669                                           ! 1827    case 0x0E:
15670                                           ! 1828      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15671                       00003876            .22:
15672                                           ! Debug: list int = const 2 (used reg = )
15673 3876           B8                   0002  mov	ax,*2
15674 3879           50                         push	ax
15675                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15676 387A           8A46         0C            mov	al,$C[bp]
15677                                           ! Debug: list unsigned char = al+0 (used reg = )
15678 387D           30E4                       xor	ah,ah
15679 387F           50                         push	ax
15680                                           ! Debug: list int = const $FF (used reg = )
15681 3880           B8                   00FF  mov	ax,#$FF
15682 3883           50                         push	ax
15683                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15684 3884           8A46         12            mov	al,$12[bp]
15685                                           ! Debug: list unsigned char = al+0 (used reg = )
15686 3887           30E4                       xor	ah,ah
15687 3889           50                         push	ax
15688                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15689 388A           E8         26CC            call	_biosfn_write_teletype
15690 388D           83C4                   08  add	sp,*8
15691                                           !BCC_EOS
15692                                           ! 1829      break;
15693 3890           E9         0363            br 	.4
15694                                           !BCC_EOS
15695                                           ! 1830    case 0x10:
15696                                           ! 1831      biosfn_perform_gray_scale_summing(BX,CX);
15697                       00003893            .23:
15698                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15699 3893           FF76         10            push	$10[bp]
15700                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15701 3896           FF76         0C            push	$C[bp]
15702                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15703 3899           E8         2CBA            call	_biosfn_perform_gray_scale_summing
15704 389C           83C4                   04  add	sp,*4
15705                                           !BCC_EOS
15706                                           ! 1832      break;
15707 389F           E9         0354            br 	.4
15708                                           !BCC_EOS
15709                                           ! 1833    case 0x11:
15710                                           ! 1834      switch(( AX & 0x00ff ))
15711                       000038A2            .24:
15712                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15713 38A2           8A46         12            mov	al,$12[bp]
15714                                           ! 1835       {
15715 38A5           E9         00E4            br 	.27
15716                                           ! 1836        case 0x00:
15717                                           ! 1837        case 0x10:
15718                       000038A8            .28:
15719                                           ! 1838         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15720                       000038A8            .29:
15721                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15722 38A8           8B46         0C            mov	ax,$C[bp]
15723 38AB           88E0                       mov	al,ah
15724 38AD           30E4                       xor	ah,ah
15725                                           ! Debug: list unsigned int = ax+0 (used reg = )
15726 38AF           50                         push	ax
15727                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15728 38B0           8A46         0C            mov	al,$C[bp]
15729                                           ! Debug: list unsigned char = al+0 (used reg = )
15730 38B3           30E4                       xor	ah,ah
15731 38B5           50                         push	ax
15732                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15733 38B6           FF76         0E            push	$E[bp]
15734                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15735 38B9           FF76         10            push	$10[bp]
15736                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15737 38BC           FF76         08            push	8[bp]
15738                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15739 38BF           FF76         16            push	$16[bp]
15740                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15741 38C2           8A46         12            mov	al,$12[bp]
15742                                           ! Debug: list unsigned char = al+0 (used reg = )
15743 38C5           30E4                       xor	ah,ah
15744 38C7           50                         push	ax
15745                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15746 38C8           E8         2F32            call	_biosfn_load_text_user_pat
15747 38CB           83C4                   0E  add	sp,*$E
15748                                           !BCC_EOS
15749                                           ! 1839         break;
15750 38CE           E9         0111            br 	.25
15751                                           !BCC_EOS
15752                                           ! 1840        case 0x01:
15753                                           ! 1841        case 0x11:
15754                       000038D1            .2A:
15755                                           ! 1842         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15756                       000038D1            .2B:
15757                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15758 38D1           8A46         0C            mov	al,$C[bp]
15759                                           ! Debug: list unsigned char = al+0 (used reg = )
15760 38D4           30E4                       xor	ah,ah
15761 38D6           50                         push	ax
15762                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15763 38D7           8A46         12            mov	al,$12[bp]
15764                                           ! Debug: list unsigned char = al+0 (used reg = )
15765 38DA           30E4                       xor	ah,ah
15766 38DC           50                         push	ax
15767                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15768 38DD           E8         2FB9            call	_biosfn_load_text_8_14_pat
15769 38E0           83C4                   04  add	sp,*4
15770                                           !BCC_EOS
15771                                           ! 1843         break;
15772 38E3           E9         00FC            br 	.25
15773                                           !BCC_EOS
15774                                           ! 1844        case 0x02:
15775                                           ! 1845        case 0x12:
15776                       000038E6            .2C:
15777                                           ! 1846         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15778                       000038E6            .2D:
15779                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15780 38E6           8A46         0C            mov	al,$C[bp]
15781                                           ! Debug: list unsigned char = al+0 (used reg = )
15782 38E9           30E4                       xor	ah,ah
15783 38EB           50                         push	ax
15784                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15785 38EC           8A46         12            mov	al,$12[bp]
15786                                           ! Debug: list unsigned char = al+0 (used reg = )
15787 38EF           30E4                       xor	ah,ah
15788 38F1           50                         push	ax
15789                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15790 38F2           E8         303B            call	_biosfn_load_text_8_8_pat
15791 38F5           83C4                   04  add	sp,*4
15792                                           !BCC_EOS
15793                                           ! 1847         break;
15794 38F8           E9         00E7            br 	.25
15795                                           !BCC_EOS
15796                                           ! 1848        case 0x04:
15797                                           ! 1849        case 0x14:
15798                       000038FB            .2E:
15799                                           ! 1850         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15800                       000038FB            .2F:
15801                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15802 38FB           8A46         0C            mov	al,$C[bp]
15803                                           ! Debug: list unsigned char = al+0 (used reg = )
15804 38FE           30E4                       xor	ah,ah
15805 3900           50                         push	ax
15806                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15807 3901           8A46         12            mov	al,$12[bp]
15808                                           ! Debug: list unsigned char = al+0 (used reg = )
15809 3904           30E4                       xor	ah,ah
15810 3906           50                         push	ax
15811                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15812 3907           E8         30C4            call	_biosfn_load_text_8_16_pat
15813 390A           83C4                   04  add	sp,*4
15814                                           !BCC_EOS
15815                                           ! 1851         break;
15816 390D           E9         00D2            br 	.25
15817                                           !BCC_EOS
15818                                           ! 1852        case 0x20:
15819                                           ! 1853         biosfn_load_gfx_8_8_chars(ES,BP);
15820                       00003910            .30:
15821                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15822 3910           FF76         08            push	8[bp]
15823                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15824 3913           FF76         16            push	$16[bp]
15825                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15826 3916           E8         3146            call	_biosfn_load_gfx_8_8_chars
15827 3919           83C4                   04  add	sp,*4
15828                                           !BCC_EOS
15829                                           ! 1854         break;
15830 391C           E9         00C3            br 	.25
15831                                           !BCC_EOS
15832                                           ! 1855        case 0x21:
15833                                           ! 1856         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15834                       0000391F            .31:
15835                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15836 391F           8A46         0E            mov	al,$E[bp]
15837                                           ! Debug: list unsigned char = al+0 (used reg = )
15838 3922           30E4                       xor	ah,ah
15839 3924           50                         push	ax
15840                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15841 3925           8A46         0C            mov	al,$C[bp]
15842                                           ! Debug: list unsigned char = al+0 (used reg = )
15843 3928           30E4                       xor	ah,ah
15844 392A           50                         push	ax
15845                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15846 392B           FF76         10            push	$10[bp]
15847                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15848 392E           FF76         08            push	8[bp]
15849                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15850 3931           FF76         16            push	$16[bp]
15851                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15852 3934           E8         3130            call	_biosfn_load_gfx_user_chars
15853 3937           83C4                   0A  add	sp,*$A
15854                                           !BCC_EOS
15855                                           ! 1857         break;
15856 393A           E9         00A5            br 	.25
15857                                           !BCC_EOS
15858                                           ! 1858        case 0x22:
15859                                           ! 1859         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15860                       0000393D            .32:
15861                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15862 393D           8A46         0C            mov	al,$C[bp]
15863                                           ! Debug: list unsigned char = al+0 (used reg = )
15864 3940           30E4                       xor	ah,ah
15865 3942           50                         push	ax
15866                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15867 3943           E8         3129            call	_biosfn_load_gfx_8_14_chars
15868 3946           44                         inc	sp
15869 3947           44                         inc	sp
15870                                           !BCC_EOS
15871                                           ! 1860         break;
15872 3948           E9         0097            br 	.25
15873                                           !BCC_EOS
15874                                           ! 1861        case 0x23:
15875                                           ! 1862         biosfn_load_gfx_8_8_dd_chars(( BX 
15876                       0000394B            .33:
15877                                           ! 1862 & 0x00ff ));
15878                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15879 394B           8A46         0C            mov	al,$C[bp]
15880                                           ! Debug: list unsigned char = al+0 (used reg = )
15881 394E           30E4                       xor	ah,ah
15882 3950           50                         push	ax
15883                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15884 3951           E8         3123            call	_biosfn_load_gfx_8_8_dd_chars
15885 3954           44                         inc	sp
15886 3955           44                         inc	sp
15887                                           !BCC_EOS
15888                                           ! 1863         break;
15889 3956           E9         0089            br 	.25
15890                                           !BCC_EOS
15891                                           ! 1864        case 0x24:
15892                                           ! 1865         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15893                       00003959            .34:
15894                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15895 3959           8A46         0C            mov	al,$C[bp]
15896                                           ! Debug: list unsigned char = al+0 (used reg = )
15897 395C           30E4                       xor	ah,ah
15898 395E           50                         push	ax
15899                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15900 395F           E8         311D            call	_biosfn_load_gfx_8_16_chars
15901 3962           44                         inc	sp
15902 3963           44                         inc	sp
15903                                           !BCC_EOS
15904                                           ! 1866         break;
15905 3964           E9         007B            br 	.25
15906                                           !BCC_EOS
15907                                           ! 1867        case 0x30:
15908                                           ! 1868         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15909                       00003967            .35:
15910                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15911 3967           8D5E         0E            lea	bx,$E[bp]
15912 396A           53                         push	bx
15913                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15914 396B           8D5E         10            lea	bx,$10[bp]
15915 396E           53                         push	bx
15916                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15917 396F           8D5E         08            lea	bx,8[bp]
15918 3972           53                         push	bx
15919                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15920 3973           8D5E         16            lea	bx,$16[bp]
15921 3976           53                         push	bx
15922                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15923 3977           8B46         0C            mov	ax,$C[bp]
15924 397A           88E0                       mov	al,ah
15925 397C           30E4                       xor	ah,ah
15926                                           ! Debug: list unsigned int = ax+0 (used reg = )
15927 397E           50                         push	ax
15928                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15929 397F           E8         3105            call	_biosfn_get_font_info
15930 3982           83C4                   0A  add	sp,*$A
15931                                           !BCC_EOS
15932                                           ! 1869         break;
15933 3985           EB           5B            jmp .25
15934                                           !BCC_EOS
15935                                           ! 1870        default:
15936                                           ! 1871         unknown();
15937                       00003987            .36:
15938                                           ! Debug: func () void = unknown+0 (used reg = )
15939 3987           E8         442F            call	_unknown
15940                                           !BCC_EOS
15941                                           ! 1872       }
15942                                           ! 1873      break;
15943 398A           EB           56            jmp .25
15944                       0000398C            .27:
15945 398C           2C                     00  sub	al,*0
15946 398E         0F84         FF16            beq 	.28
15947 3992           2C                     01  sub	al,*1
15948 3994         0F84         FF39            beq 	.2A
15949 3998           2C                     01  sub	al,*1
15950 399A         0F84         FF48            beq 	.2C
15951 399E           2C                     02  sub	al,*2
15952 39A0         0F84         FF57            beq 	.2E
15953 39A4           2C                     0C  sub	al,*$C
15954 39A6         0F84         FEFE            beq 	.29
15955 39AA           2C                     01  sub	al,*1
15956 39AC         0F84         FF21            beq 	.2B
15957 39B0           2C                     01  sub	al,*1
15958 39B2         0F84         FF30            beq 	.2D
15959 39B6           2C                     02  sub	al,*2
15960 39B8         0F84         FF3F            beq 	.2F
15961 39BC           2C                     0C  sub	al,*$C
15962 39BE         0F84         FF4E            beq 	.30
15963 39C2           2C                     01  sub	al,*1
15964 39C4         0F84         FF57            beq 	.31
15965 39C8           2C                     01  sub	al,*1
15966 39CA         0F84         FF6F            beq 	.32
15967 39CE           2C                     01  sub	al,*1
15968 39D0         0F84         FF77            beq 	.33
15969 39D4           2C                     01  sub	al,*1
15970 39D6         0F84         FF7F            beq 	.34
15971 39DA           2C                     0C  sub	al,*$C
15972 39DC         0F84         FF87            beq 	.35
15973 39E0           EB           A5            jmp	.36
15974                       000039E2            .25:
15975 39E2           E9         0211            br 	.4
15976                                           !BCC_EOS
15977                                           ! 1874    case 0x12:
15978                                           ! 1875      switch(( BX & 0x00ff ))
15979                       000039E5            .37:
15980                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15981 39E5           8A46         0C            mov	al,$C[bp]
15982                                           ! 1876       {
15983 39E8           EB           3F            jmp .3A
15984                                           ! 1877        case 0x20:
15985                                           ! 1878         biosfn_alternate_prtsc();
15986                       000039EA            .3B:
15987                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15988 39EA           E8         3285            call	_biosfn_alternate_prtsc
15989                                           !BCC_EOS
15990                                           ! 1879         break;
15991 39ED           EB           48            jmp .38
15992                                           !BCC_EOS
15993                                           ! 1880        case 0x35:
15994                                           ! 1881         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15995                       000039EF            .3C:
15996                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15997 39EF           FF76         0E            push	$E[bp]
15998                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15999 39F2           FF76         16            push	$16[bp]
16000                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
16001 39F5           8A46         12            mov	al,$12[bp]
16002                                           ! Debug: list unsigned char = al+0 (used reg = )
16003 39F8           30E4                       xor	ah,ah
16004 39FA           50                         push	ax
16005                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
16006 39FB           E8         338B            call	_biosfn_switch_video_interface
16007 39FE           83C4                   06  add	sp,*6
16008                                           !BCC_EOS
16009                                           ! 1882         AX = ((AX & 0xff00) | (0x12));
16010                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16011 3A01           8B46         12            mov	ax,$12[bp]
16012 3A04           30C0                       xor	al,al
16013                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16014 3A06           0C                     12  or	al,*$12
16015                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16016 3A08           8946         12            mov	$12[bp],ax
16017                                           !BCC_EOS
16018                                           ! 1883         break;
16019 3A0B           EB           2A            jmp .38
16020                                           !BCC_EOS
16021                                           ! 1884        case 0x36:
16022                                           ! 1885         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
16023                       00003A0D            .3D:
16024                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16025 3A0D           8A46         12            mov	al,$12[bp]
16026                                           ! Debug: list unsigned char = al+0 (used reg = )
16027 3A10           30E4                       xor	ah,ah
16028 3A12           50                         push	ax
16029                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
16030 3A13           E8         337B            call	_biosfn_enable_video_refresh_control
16031 3A16           44                         inc	sp
16032 3A17           44                         inc	sp
16033                                           !BCC_EOS
16034                                           ! 1886         AX = ((AX & 0xff00) | (0x12));
16035                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16036 3A18           8B46         12            mov	ax,$12[bp]
16037 3A1B           30C0                       xor	al,al
16038                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16039 3A1D           0C                     12  or	al,*$12
16040                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16041 3A1F           8946         12            mov	$12[bp],ax
16042                                           !BCC_EOS
16043                                           ! 1887         break;
16044 3A22           EB           13            jmp .38
16045                                           !BCC_EOS
16046                                           ! 1888        default:
16047                                           ! 1889         unknown();
16048                       00003A24            .3E:
16049                                           ! Debug: func () void = unknown+0 (used reg = )
16050 3A24           E8         4392            call	_unknown
16051                                           !BCC_EOS
16052                                           ! 1890       }
16053                                           ! 1891      break;
16054 3A27           EB           0E            jmp .38
16055                       00003A29            .3A:
16056 3A29           2C                     20  sub	al,*$20
16057 3A2B           74           BD            je 	.3B
16058 3A2D           2C                     15  sub	al,*$15
16059 3A2F           74           BE            je 	.3C
16060 3A31           2C                     01  sub	al,*1
16061 3A33           74           D8            je 	.3D
16062 3A35           EB           ED            jmp	.3E
16063                       00003A37            .38:
16064 3A37           E9         01BC            br 	.4
16065                                           !BCC_EOS
16066                                           ! 1892    case 0x13:
16067                                           ! 1893      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16068                       00003A3A            .3F:
16069                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16070 3A3A           FF76         08            push	8[bp]
16071                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16072 3A3D           FF76         16            push	$16[bp]
16073                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16074 3A40           8A46         0E            mov	al,$E[bp]
16075                                           ! Debug: list unsigned char = al+0 (used reg = )
16076 3A43           30E4                       xor	ah,ah
16077 3A45           50                         push	ax
16078                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16079 3A46           8B46         0E            mov	ax,$E[bp]
16080 3A49           88E0                       mov	al,ah
16081 3A4B           30E4                       xor	ah,ah
16082                                           ! Debug: list unsigned int = ax+0 (used reg = )
16083 3A4D           50                         push	ax
16084                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16085 3A4E           FF76         10            push	$10[bp]
16086                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16087 3A51           8A46         0C            mov	al,$C[bp]
16088                                           ! Debug: list unsigned char = al+0 (used reg = )
16089 3A54           30E4                       xor	ah,ah
16090 3A56           50                         push	ax
16091                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16092 3A57           8B46         0C            mov	ax,$C[bp]
16093 3A5A           88E0                       mov	al,ah
16094 3A5C           30E4                       xor	ah,ah
16095                                           ! Debug: list unsigned int = ax+0 (used reg = )
16096 3A5E           50                         push	ax
16097                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16098 3A5F           8A46         12            mov	al,$12[bp]
16099                                           ! Debug: list unsigned char = al+0 (used reg = )
16100 3A62           30E4                       xor	ah,ah
16101 3A64           50                         push	ax
16102                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16103 3A65           E8         3331            call	_biosfn_write_string
16104 3A68           83C4                   10  add	sp,*$10
16105                                           !BCC_EOS
16106                                           ! 1894      break;
16107 3A6B           E9         0188            br 	.4
16108                                           !BCC_EOS
16109                                           ! 1895    case 0x1B:
16110                                           ! 1896      biosfn_read_state_info(BX,ES,DI);
16111                       00003A6E            .40:
16112                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16113 3A6E           FF76         04            push	4[bp]
16114                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16115 3A71           FF76         16            push	$16[bp]
16116                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16117 3A74           FF76         0C            push	$C[bp]
16118                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16119 3A77           E8         346B            call	_biosfn_read_state_info
16120 3A7A           83C4                   06  add	sp,*6
16121                                           !BCC_EOS
16122                                           ! 1897      AX = ((AX & 0xff00) | (0x1B));
16123                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16124 3A7D           8B46         12            mov	ax,$12[bp]
16125 3A80           30C0                       xor	al,al
16126                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16127 3A82           0C                     1B  or	al,*$1B
16128                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16129 3A84           8946         12            mov	$12[bp],ax
16130                                           !BCC_EOS
16131                                           ! 1898      break;
16132 3A87           E9         016C            br 	.4
16133                                           !BCC_EOS
16134                                           ! 1899    case 0x1C:
16135                                           ! 1900      switch(( AX & 0x00ff ))
16136                       00003A8A            .41:
16137                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16138 3A8A           8A46         12            mov	al,$12[bp]
16139                                           ! 1901       {
16140 3A8D           EB           36            jmp .44
16141                                           ! 1902        case 0x00:
16142                                           ! 1903         biosfn_read_video_state_size(CX,&BX);
16143                       00003A8F            .45:
16144                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16145 3A8F           8D5E         0C            lea	bx,$C[bp]
16146 3A92           53                         push	bx
16147                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16148 3A93           FF76         10            push	$10[bp]
16149                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16150 3A96           E8         35CB            call	_biosfn_read_video_state_size
16151 3A99           83C4                   04  add	sp,*4
16152                                           !BCC_EOS
16153                                           ! 1904         break;
16154 3A9C           EB           35            jmp .42
16155                                           !BCC_EOS
16156                                           ! 1905        case 0x01:
16157                                           ! 1906         biosfn_save_video_state(CX,ES,BX);
16158                       00003A9E            .46:
16159                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16160 3A9E           FF76         0C            push	$C[bp]
16161                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16162 3AA1           FF76         16            push	$16[bp]
16163                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16164 3AA4           FF76         10            push	$10[bp]
16165                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16166 3AA7           E8         35DE            call	_biosfn_save_video_state
16167 3AAA           83C4                   06  add	sp,*6
16168                                           !BCC_EOS
16169                                           ! 1907         break;
16170 3AAD           EB           24            jmp .42
16171                                           !BCC_EOS
16172                                           ! 1908        case 0x02:
16173                                           ! 1909         biosfn_restore_video_state(CX,ES,BX);
16174                       00003AAF            .47:
16175                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16176 3AAF           FF76         0C            push	$C[bp]
16177                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16178 3AB2           FF76         16            push	$16[bp]
16179                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16180 3AB5           FF76         10            push	$10[bp]
16181                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16182 3AB8           E8         3B97            call	_biosfn_restore_video_state
16183 3ABB           83C4                   06  add	sp,*6
16184                                           !BCC_EOS
16185                                           ! 1910         break;
16186 3ABE           EB           13            jmp .42
16187                                           !BCC_EOS
16188                                           ! 1911        default:
16189                                           ! 1912         unknown();
16190                       00003AC0            .48:
16191                                           ! Debug: func () void = unknown+0 (used reg = )
16192 3AC0           E8         42F6            call	_unknown
16193                                           !BCC_EOS
16194                                           ! 1913       }
16195                                           ! 1914      AX = ((AX & 0xff00) | (0x1C));
16196 3AC3           EB           0E            jmp .42
16197                       00003AC5            .44:
16198 3AC5           2C                     00  sub	al,*0
16199 3AC7           74           C6            je 	.45
16200 3AC9           2C                     01  sub	al,*1
16201 3ACB           74           D1            je 	.46
16202 3ACD           2C                     01  sub	al,*1
16203 3ACF           74           DE            je 	.47
16204 3AD1           EB           ED            jmp	.48
16205                       00003AD3            .42:
16206                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16207 3AD3           8B46         12            mov	ax,$12[bp]
16208 3AD6           30C0                       xor	al,al
16209                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16210 3AD8           0C                     1C  or	al,*$1C
16211                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16212 3ADA           8946         12            mov	$12[bp],ax
16213                                           !BCC_EOS
16214                                           ! 1915      break;
16215 3ADD           E9         0116            br 	.4
16216                                           !BCC_EOS
16217                                           ! 1916    case 0x4f:
16218                                           ! 1917      if (vbe_has_vbe_display()) {
16219                       00003AE0            .49:
16220                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16221 3AE0           E8         59D1            call	_vbe_has_vbe_display
16222 3AE3           85C0                       test	ax,ax
16223 3AE5         0F84         00AA            beq 	.4A
16224                       00003AE9            .4B:
16225                                           ! 1918        switch(( AX & 0x00ff ))
16226                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16227 3AE9           8A46         12            mov	al,$12[bp]
16228                                           ! 1919        {
16229 3AEC           E9         0077            br 	.4E
16230                                           ! 1920          case 0x00:
16231                                           ! 1921           vbe_biosfn_return_controller_information(&AX,ES,DI);
16232                       00003AEF            .4F:
16233                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16234 3AEF           FF76         04            push	4[bp]
16235                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16236 3AF2           FF76         16            push	$16[bp]
16237                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16238 3AF5           8D5E         12            lea	bx,$12[bp]
16239 3AF8           53                         push	bx
16240                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16241 3AF9           E8         5A31            call	_vbe_biosfn_return_controller_information
16242 3AFC           83C4                   06  add	sp,*6
16243                                           !BCC_EOS
16244                                           ! 1922           break;
16245 3AFF           E9         008F            br 	.4C
16246                                           !BCC_EOS
16247                                           ! 1923          case 0x01:
16248                                           ! 1924           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16249                       00003B02            .50:
16250                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16251 3B02           FF76         04            push	4[bp]
16252                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16253 3B05           FF76         16            push	$16[bp]
16254                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16255 3B08           FF76         10            push	$10[bp]
16256                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16257 3B0B           8D5E         12            lea	bx,$12[bp]
16258 3B0E           53                         push	bx
16259                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16260 3B0F           E8         5CB1            call	_vbe_biosfn_return_mode_information
16261 3B12           83C4                   08  add	sp,*8
16262                                           !BCC_EOS
16263                                           ! 1925           break;
16264 3B15           EB           7A            jmp .4C
16265                                           !BCC_EOS
16266                                           ! 1926          case 0x02:
16267                                           ! 1927           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16268                       00003B17            .51:
16269                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16270 3B17           FF76         04            push	4[bp]
16271                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16272 3B1A           FF76         16            push	$16[bp]
16273                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16274 3B1D           FF76         0C            push	$C[bp]
16275                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16276 3B20           8D5E         12            lea	bx,$12[bp]
16277 3B23           53                         push	bx
16278                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16279 3B24           E8         5E26            call	_vbe_biosfn_set_mode
16280 3B27           83C4                   08  add	sp,*8
16281                                           !BCC_EOS
16282                                           ! 1928           break;
16283 3B2A           EB           65            jmp .4C
16284                                           !BCC_EOS
16285                                           ! 1929          case 0x04:
16286                                           ! 1930           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16287                       00003B2C            .52:
16288                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16289 3B2C           8D5E         0C            lea	bx,$C[bp]
16290 3B2F           53                         push	bx
16291                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16292 3B30           FF76         16            push	$16[bp]
16293                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16294 3B33           FF76         0E            push	$E[bp]
16295                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16296 3B36           FF76         10            push	$10[bp]
16297                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16298 3B39           8D5E         12            lea	bx,$12[bp]
16299 3B3C           53                         push	bx
16300                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16301 3B3D           E8         617A            call	_vbe_biosfn_save_restore_state
16302 3B40           83C4                   0A  add	sp,*$A
16303                                           !BCC_EOS
16304                                           ! 1931           break;
16305 3B43           EB           4C            jmp .4C
16306                                           !BCC_EOS
16307                                           ! 1932          case 0x09:
16308                                           ! 1933           unimplemented();
16309                       00003B45            .53:
16310                                           ! Debug: func () void = unimplemented+0 (used reg = )
16311 3B45           E8         4263            call	_unimplemented
16312                                           !BCC_EOS
16313                                           ! 1934           AX=0x100;
16314                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16315 3B48           B8                   0100  mov	ax,#$100
16316 3B4B           8946         12            mov	$12[bp],ax
16317                                           !BCC_EOS
16318                                           ! 1935           break;
16319 3B4E           EB           41            jmp .4C
16320                                           !BCC_EOS
16321                                           ! 1936          case 0x0A:
16322                                           ! 1937           unimplemented();
16323                       00003B50            .54:
16324                                           ! Debug: func () void = unimplemented+0 (used reg = )
16325 3B50           E8         4258            call	_unimplemented
16326                                           !BCC_EOS
16327                                           ! 1938           AX=0x100;
16328                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16329 3B53           B8                   0100  mov	ax,#$100
16330 3B56           8946         12            mov	$12[bp],ax
16331                                           !BCC_EOS
16332                                           ! 1939           break;
16333 3B59           EB           36            jmp .4C
16334                                           !BCC_EOS
16335                                           ! 1940          default:
16336                                           ! 1941           unknown();
16337                       00003B5B            .55:
16338                                           ! Debug: func () void = unknown+0 (used reg = )
16339 3B5B           E8         425B            call	_unknown
16340                                           !BCC_EOS
16341                                           ! 1942           AX=0x100;
16342                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16343 3B5E           B8                   0100  mov	ax,#$100
16344 3B61           8946         12            mov	$12[bp],ax
16345                                           !BCC_EOS
16346                                           ! 1943           }
16347                                           ! 1944         }
16348 3B64           EB           2B            jmp .4C
16349                       00003B66            .4E:
16350 3B66           2C                     00  sub	al,*0
16351 3B68           72           F1            jb 	.55
16352 3B6A           3C                     0A  cmp	al,*$A
16353 3B6C           77           21            ja  	.56
16354 3B6E           30E4                       xor	ah,ah
16355 3B70           D1E0                       shl	ax,*1
16356 3B72           89C3                       mov	bx,ax
16357 3B74           2E                         seg	cs
16358 3B75           FFA7       3B79            br	.57[bx]
16359                       00003B79            .57:
16360 3B79                      3AEF            .word	.4F
16361 3B7B                      3B02            .word	.50
16362 3B7D                      3B17            .word	.51
16363 3B7F                      3B5B            .word	.55
16364 3B81                      3B2C            .word	.52
16365 3B83                      3B5B            .word	.55
16366 3B85                      3B5B            .word	.55
16367 3B87                      3B5B            .word	.55
16368 3B89                      3B5B            .word	.55
16369 3B8B                      3B45            .word	.53
16370 3B8D                      3B50            .word	.54
16371                       00003B8F            .56:
16372 3B8F           EB           CA            jmp	.55
16373                       00003B91            .4C:
16374                                           ! 1945         else {
16375 3B91           EB           06            jmp .58
16376                       00003B93            .4A:
16377                                           ! 1946     
16378                                           ! 1946       AX=0x0100;
16379                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16380 3B93           B8                   0100  mov	ax,#$100
16381 3B96           8946         12            mov	$12[bp],ax
16382                                           !BCC_EOS
16383                                           ! 1947           }
16384                                           ! 1948         break;
16385                       00003B99            .58:
16386 3B99           EB           5B            jmp .4
16387                                           !BCC_EOS
16388                                           ! 1949    default:
16389                                           ! 1950      unknown();
16390                       00003B9B            .59:
16391                                           ! Debug: func () void = unknown+0 (used reg = )
16392 3B9B           E8         421B            call	_unknown
16393                                           !BCC_EOS
16394                                           ! 1951   }
16395                                           ! 1952 }
16396 3B9E           EB           56            jmp .4
16397                       00003BA0            .6:
16398 3BA0           2D                   0000  sub	ax,*0
16399 3BA3           7C           F6            jl 	.59
16400 3BA5           3D                   001C  cmp	ax,*$1C
16401 3BA8           77           43            ja  	.5A
16402 3BAA           D1E0                       shl	ax,*1
16403 3BAC           89C3                       mov	bx,ax
16404 3BAE           2E                         seg	cs
16405 3BAF           FFA7       3BB3            br	.5B[bx]
16406                       00003BB3            .5B:
16407 3BB3                      36AA            .word	.7
16408 3BB5                      3708            .word	.16
16409 3BB7                      371F            .word	.17
16410 3BB9                      3733            .word	.18
16411 3BBB                      374C            .word	.19
16412 3BBD                      3766            .word	.1A
16413 3BBF                      3774            .word	.1B
16414 3BC1                      37AF            .word	.1C
16415 3BC3                      37E9            .word	.1D
16416 3BC5                      37FE            .word	.1E
16417 3BC7                      381E            .word	.1F
16418 3BC9                      3B9B            .word	.59
16419 3BCB                      383E            .word	.20
16420 3BCD                      385B            .word	.21
16421 3BCF                      3876            .word	.22
16422 3BD1                      3B9B            .word	.59
16423 3BD3                      3893            .word	.23
16424 3BD5                      38A2            .word	.24
16425 3BD7                      39E5            .word	.37
16426 3BD9                      3A3A            .word	.3F
16427 3BDB                      3B9B            .word	.59
16428 3BDD                      3B9B            .word	.59
16429 3BDF                      3B9B            .word	.59
16430 3BE1                      3B9B            .word	.59
16431 3BE3                      3B9B            .word	.59
16432 3BE5                      3B9B            .word	.59
16433 3BE7                      3B9B            .word	.59
16434 3BE9                      3A6E            .word	.40
16435 3BEB                      3A8A            .word	.41
16436                       00003BED            .5A:
16437 3BED           2D                   004F  sub	ax,*$4F
16438 3BF0         0F84         FEEC            beq 	.49
16439 3BF4           EB           A5            jmp	.59
16440                       00003BF6            .4:
16441                       FFFFFFFE            ..FFFF	=	-2
16442 3BF6           5D                         pop	bp
16443 3BF7           C3                         ret
16444                                           ! 1953 static void biosfn_set_video_mode(mode) Bit8u mode;
16445                                           ! Register BX used in function int10_func
16446                       00003BF8            _biosfn_set_video_mode:
16447                                           !BCC_EOS
16448                                           ! 1954 {
16449                                           ! 1955  Bit8u noclearmem=mode&0x80;
16450 3BF8           55                         push	bp
16451 3BF9           89E5                       mov	bp,sp
16452 3BFB           4C                         dec	sp
16453                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16454 3BFC           8A46         04            mov	al,4[bp]
16455 3BFF           24                     80  and	al,#$80
16456                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16457 3C01           8846         FF            mov	-1[bp],al
16458                                           !BCC_EOS
16459                                           ! 1956  Bit8u line,mmask,*palette,vpti;
16460                                           !BCC_EOS
16461                                           ! 1957  Bit16u i,twidth,theightm1,cheight;
16462                                           !BCC_EOS
16463                                           ! 1958  Bit8u modeset_ctl,video_ctl,vga_switches;
16464                                           !BCC_EOS
16465                                           ! 1959  Bit16u crtc_addr;
16466                                           !BCC_EOS
16467                                           ! 1960  if (vbe_has_vbe_display()) {
16468 3C04           83C4                   EB  add	sp,*-$15
16469                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16470 3C07           E8         58AA            call	_vbe_has_vbe_display
16471 3C0A           85C0                       test	ax,ax
16472 3C0C           74           08            je  	.5C
16473                       00003C0E            .5D:
16474                                           ! 1961    dispi_set_enable(0x00);
16475                                           ! Debug: list int = const 0 (used reg = )
16476 3C0E           31C0                       xor	ax,ax
16477 3C10           50                         push	ax
16478                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16479 3C11           E8         566D            call	_dispi_set_enable
16480 3C14           44                         inc	sp
16481 3C15           44                         inc	sp
16482                                           !BCC_EOS
16483                                           ! 1962   }
16484                                           ! 1963  mode=mode&0x7f;
16485                       00003C16            .5C:
16486                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16487 3C16           8A46         04            mov	al,4[bp]
16488 3C19           24                     7F  and	al,*$7F
16489                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16490 3C1B           8846         04            mov	4[bp],al
16491                                           !BCC_EOS
16492                                           ! 1964  line=find_vga_entry(mode);
16493                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16494 3C1E           8A46         04            mov	al,4[bp]
16495 3C21           30E4                       xor	ah,ah
16496 3C23           50                         push	ax
16497                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16498 3C24           E8         4009            call	_find_vga_entry
16499 3C27           44                         inc	sp
16500 3C28           44                         inc	sp
16501                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16502 3C29           8846         FE            mov	-2[bp],al
16503                                           !BCC_EOS
16504                                           ! 1965  printf("mode search %02x found line %02x\n",mode,line);
16505                                           ! Debug: list unsigned char line = [S+$18-4] (used reg = )
16506 3C2C           8A46         FE            mov	al,-2[bp]
16507 3C2F           30E4                       xor	ah,ah
16508 3C31           50                         push	ax
16509                                           ! Debug: list unsigned char mode = [S+$1A+2] (used reg = )
16510 3C32           8A46         04            mov	al,4[bp]
16511 3C35           30E4                       xor	ah,ah
16512 3C37           50                         push	ax
16513                                           ! Debug: list * char = .5E+0 (used reg = )
16514 3C38           BB                   A11D  mov	bx,#.5E
16515 3C3B           53                         push	bx
16516                                           ! Debug: func () void = printf+0 (used reg = )
16517 3C3C           E8         4188            call	_printf
16518 3C3F           83C4                   06  add	sp,*6
16519                                           !BCC_EOS
16520                                           ! 1966  if(line==0xFF)
16521                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16522 3C42           8A46         FE            mov	al,-2[bp]
16523 3C45           3C                     FF  cmp	al,#$FF
16524 3C47           75           04            jne 	.5F
16525                       00003C49            .60:
16526                                           ! 1967   return;
16527 3C49           89EC                       mov	sp,bp
16528 3C4B           5D                         pop	bp
16529 3C4C           C3                         ret
16530                                           !BCC_EOS
16531                                           ! 1968  vpti=line_to_vpti[line];
16532                       00003C4D            .5F:
16533                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16534 3C4D           8A46         FE            mov	al,-2[bp]
16535 3C50           30E4                       xor	ah,ah
16536 3C52           89C3                       mov	bx,ax
16537                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16538 3C54           8A87       028D            mov	al,_line_to_vpti[bx]
16539 3C58           8846         F9            mov	-7[bp],al
16540                                           !BCC_EOS
16541                                           ! 1969  twidth=video_param_table[vpti].twidth;
16542                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16543 3C5B           8A46         F9            mov	al,-7[bp]
16544 3C5E           30E4                       xor	ah,ah
16545 3C60           B1                     06  mov	cl,*6
16546 3C62           D3E0                       shl	ax,cl
16547 3C64           89C3                       mov	bx,ax
16548                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16549 3C66           8A87       02A1            mov	al,_video_param_table[bx]
16550 3C6A           30E4                       xor	ah,ah
16551 3C6C           8946         F4            mov	-$C[bp],ax
16552                                           !BCC_EOS
16553                                           ! 1970  theightm1=video_param_table[vpti].theightm1;
16554                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16555 3C6F           8A46         F9            mov	al,-7[bp]
16556 3C72           30E4                       xor	ah,ah
16557 3C74           B1                     06  mov	cl,*6
16558 3C76           D3E0                       shl	ax,cl
16559 3C78           89C3                       mov	bx,ax
16560 3C7A           81C3                 02A1  add	bx,#_video_param_table
16561                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16562 3C7E           8A47         01            mov	al,1[bx]
16563 3C81           30E4                       xor	ah,ah
16564 3C83           8946         F2            mov	-$E[bp],ax
16565                                           !BCC_EOS
16566                                           ! 1971  cheight=video_param_table[vpti].cheight;
16567                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16568 3C86           8A46         F9            mov	al,-7[bp]
16569 3C89           30E4                       xor	ah,ah
16570 3C8B           B1                     06  mov	cl,*6
16571 3C8D           D3E0                       shl	ax,cl
16572 3C8F           89C3                       mov	bx,ax
16573 3C91           81C3                 02A1  add	bx,#_video_param_table
16574                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16575 3C95           8A47         02            mov	al,2[bx]
16576 3C98           30E4                       xor	ah,ah
16577 3C9A           8946         F0            mov	-$10[bp],ax
16578                                           !BCC_EOS
16579                                           ! 1972  video_ctl=read_byte(0x40,0x87);
16580                                           ! Debug: list int = const $87 (used reg = )
16581 3C9D           B8                   0087  mov	ax,#$87
16582 3CA0           50                         push	ax
16583                                           ! Debug: list int = const $40 (used reg = )
16584 3CA1           B8                   0040  mov	ax,*$40
16585 3CA4           50                         push	ax
16586                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16587 3CA5           E8         4074            call	_read_byte
16588 3CA8           83C4                   04  add	sp,*4
16589                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16590 3CAB           8846         EE            mov	-$12[bp],al
16591                                           !BCC_EOS
16592                                           ! 1973  vga_switches=read_byte(0x40,0x88);
16593                                           ! Debug: list int = const $88 (used reg = )
16594 3CAE           B8                   0088  mov	ax,#$88
16595 3CB1           50                         push	ax
16596                                           ! Debug: list int = const $40 (used reg = )
16597 3CB2           B8                   0040  mov	ax,*$40
16598 3CB5           50                         push	ax
16599                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16600 3CB6           E8         4063            call	_read_byte
16601 3CB9           83C4                   04  add	sp,*4
16602                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16603 3CBC           8846         ED            mov	-$13[bp],al
16604                                           !BCC_EOS
16605                                           ! 1974  modeset_ctl=read_byte(0x40,0x89);
16606                                           ! Debug: list int = const $89 (used reg = )
16607 3CBF           B8                   0089  mov	ax,#$89
16608 3CC2           50                         push	ax
16609                                           ! Debug: list int = const $40 (used reg = )
16610 3CC3           B8                   0040  mov	ax,*$40
16611 3CC6           50                         push	ax
16612                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16613 3CC7           E8         4052            call	_read_byte
16614 3CCA           83C4                   04  add	sp,*4
16615                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16616 3CCD           8846         EF            mov	-$11[bp],al
16617                                           !BCC_EOS
16618                                           ! 1975  if((modeset_ctl&0x08)==0)
16619                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16620 3CD0           8A46         EF            mov	al,-$11[bp]
16621 3CD3           24                     08  and	al,*8
16622                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16623 3CD5           84C0                       test	al,al
16624 3CD7         0F85         0145            bne 	.61
16625                       00003CDB            .62:
16626                                           ! 1976   {
16627                                           ! 1977    outb(0x3c6,vga_modes[line].pelmask);
16628                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16629 3CDB           8A46         FE            mov	al,-2[bp]
16630 3CDE           30E4                       xor	ah,ah
16631 3CE0           B1                     03  mov	cl,*3
16632 3CE2           D3E0                       shl	ax,cl
16633 3CE4           89C3                       mov	bx,ax
16634 3CE6           81C3                 020D  add	bx,#_vga_modes
16635                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16636 3CEA           8A47         06            mov	al,6[bx]
16637 3CED           30E4                       xor	ah,ah
16638 3CEF           50                         push	ax
16639                                           ! Debug: list int = const $3C6 (used reg = )
16640 3CF0           B8                   03C6  mov	ax,#$3C6
16641 3CF3           50                         push	ax
16642                                           ! Debug: func () void = outb+0 (used reg = )
16643 3CF4           E8         4091            call	_outb
16644 3CF7           83C4                   04  add	sp,*4
16645                                           !BCC_EOS
16646                                           ! 1978    outb(0x3c8,0x00);
16647                                           ! Debug: list int = const 0 (used reg = )
16648 3CFA           31C0                       xor	ax,ax
16649 3CFC           50                         push	ax
16650                                           ! Debug: list int = const $3C8 (used reg = )
16651 3CFD           B8                   03C8  mov	ax,#$3C8
16652 3D00           50                         push	ax
16653                                           ! Debug: func () void = outb+0 (used reg = )
16654 3D01           E8         4084            call	_outb
16655 3D04           83C4                   04  add	sp,*4
16656                                           !BCC_EOS
16657                                           ! 1979    switch(vga_modes[line].dacmodel)
16658                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16659 3D07           8A46         FE            mov	al,-2[bp]
16660 3D0A           30E4                       xor	ah,ah
16661 3D0C           B1                     03  mov	cl,*3
16662 3D0E           D3E0                       shl	ax,cl
16663 3D10           89C3                       mov	bx,ax
16664 3D12           81C3                 020D  add	bx,#_vga_modes
16665 3D16           8A47         07            mov	al,7[bx]
16666                                           ! 1980     {case 0:
16667 3D19           EB           22            jmp .65
16668                                           ! 1981       palette=&palette0;
16669                       00003D1B            .66:
16670                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16671 3D1B           BB                   0A21  mov	bx,#_palette0
16672 3D1E           895E         FA            mov	-6[bp],bx
16673                                           !BCC_EOS
16674                                           ! 1982       break;
16675 3D21           EB           2A            jmp .63
16676                                           !BCC_EOS
16677                                           ! 1983      case 1:
16678                                           ! 1984       palette=&palette1;
16679                       00003D23            .67:
16680                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16681 3D23           BB                   0AE1  mov	bx,#_palette1
16682 3D26           895E         FA            mov	-6[bp],bx
16683                                           !BCC_EOS
16684                                           ! 1985       break;
16685 3D29           EB           22            jmp .63
16686                                           !BCC_EOS
16687                                           ! 1986      case 2:
16688                                           ! 1987       palette=&palette2;
16689                       00003D2B            .68:
16690                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16691 3D2B           BB                   0BA1  mov	bx,#_palette2
16692 3D2E           895E         FA            mov	-6[bp],bx
16693                                           !BCC_EOS
16694                                           ! 1988       break;
16695 3D31           EB           1A            jmp .63
16696                                           !BCC_EOS
16697                                           ! 1989      case 3:
16698                                           ! 1990       palette=&palette3;
16699                       00003D33            .69:
16700                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16701 3D33           BB                   0C61  mov	bx,#_palette3
16702 3D36           895E         FA            mov	-6[bp],bx
16703                                           !BCC_EOS
16704                                           ! 1991       break;
16705 3D39           EB           12            jmp .63
16706                                           !BCC_EOS
16707                                           ! 1992     }
16708                                           ! 1993    for(i=0;i<0x0100;i++)
16709 3D3B           EB           10            jmp .63
16710                       00003D3D            .65:
16711 3D3D           2C                     00  sub	al,*0
16712 3D3F           74           DA            je 	.66
16713 3D41           2C                     01  sub	al,*1
16714 3D43           74           DE            je 	.67
16715 3D45           2C                     01  sub	al,*1
16716 3D47           74           E2            je 	.68
16717 3D49           2C                     01  sub	al,*1
16718 3D4B           74           E6            je 	.69
16719                       00003D4D            .63:
16720                       FFFFFFE8            ..FFFE	=	-$18
16721                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16722 3D4D           31C0                       xor	ax,ax
16723 3D4F           8946         F6            mov	-$A[bp],ax
16724                                           !BCC_EOS
16725                                           !BCC_EOS
16726                                           ! 1994     {if(i<=dac_regs[vga_modes[line].dacmodel])
16727 3D52           E9         00AB            br 	.6C
16728                       00003D55            .6D:
16729                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16730 3D55           8A46         FE            mov	al,-2[bp]
16731 3D58           30E4                       xor	ah,ah
16732 3D5A           B1                     03  mov	cl,*3
16733 3D5C           D3E0                       shl	ax,cl
16734 3D5E           89C3                       mov	bx,ax
16735 3D60           81C3                 020D  add	bx,#_vga_modes
16736                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16737 3D64           8A47         07            mov	al,7[bx]
16738 3D67           30E4                       xor	ah,ah
16739 3D69           89C3                       mov	bx,ax
16740                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16741 3D6B           8A87       029D            mov	al,_dac_regs[bx]
16742 3D6F           30E4                       xor	ah,ah
16743 3D71           3B46         F6            cmp	ax,-$A[bp]
16744 3D74           72           5C            jb  	.6E
16745                       00003D76            .6F:
16746                                           ! 1995       {outb(0x3c9,palette[(i*3)+0]);
16747                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16748 3D76           8B46         F6            mov	ax,-$A[bp]
16749 3D79           89C2                       mov	dx,ax
16750 3D7B           D1E0                       shl	ax,*1
16751 3D7D           01D0                       add	ax,dx
16752                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16753                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16754 3D7F           0346         FA            add	ax,-6[bp]
16755 3D82           89C3                       mov	bx,ax
16756                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16757 3D84           8A07                       mov	al,[bx]
16758 3D86           30E4                       xor	ah,ah
16759 3D88           50                         push	ax
16760                                           ! Debug: list int = const $3C9 (used reg = )
16761 3D89           B8                   03C9  mov	ax,#$3C9
16762 3D8C           50                         push	ax
16763                                           ! Debug: func () void = outb+0 (used reg = )
16764 3D8D           E8         3FF8            call	_outb
16765 3D90           83C4                   04  add	sp,*4
16766                                           !BCC_EOS
16767                                           ! 1996        outb(0x3c9,palette[(i*3)+1]);
16768                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16769 3D93           8B46         F6            mov	ax,-$A[bp]
16770 3D96           89C2                       mov	dx,ax
16771 3D98           D1E0                       shl	ax,*1
16772 3D9A           01D0                       add	ax,dx
16773                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16774                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16775 3D9C           40                         inc	ax
16776 3D9D           0346         FA            add	ax,-6[bp]
16777 3DA0           89C3                       mov	bx,ax
16778                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16779 3DA2           8A07                       mov	al,[bx]
16780 3DA4           30E4                       xor	ah,ah
16781 3DA6           50                         push	ax
16782                                           ! Debug: list int = const $3C9 (used reg = )
16783 3DA7           B8                   03C9  mov	ax,#$3C9
16784 3DAA           50                         push	ax
16785                                           ! Debug: func () void = outb+0 (used reg = )
16786 3DAB           E8         3FDA            call	_outb
16787 3DAE           83C4                   04  add	sp,*4
16788                                           !BCC_EOS
16789                                           ! 1997        outb(0x3c9,palette[(i*3)+2]);
16790                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16791 3DB1           8B46         F6            mov	ax,-$A[bp]
16792 3DB4           89C2                       mov	dx,ax
16793 3DB6           D1E0                       shl	ax,*1
16794 3DB8           01D0                       add	ax,dx
16795                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16796                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16797 3DBA           40                         inc	ax
16798 3DBB           40                         inc	ax
16799 3DBC           0346         FA            add	ax,-6[bp]
16800 3DBF           89C3                       mov	bx,ax
16801                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16802 3DC1           8A07                       mov	al,[bx]
16803 3DC3           30E4                       xor	ah,ah
16804 3DC5           50                         push	ax
16805                                           ! Debug: list int = const $3C9 (used reg = )
16806 3DC6           B8                   03C9  mov	ax,#$3C9
16807 3DC9           50                         push	ax
16808                                           ! Debug: func () void = outb+0 (used reg = )
16809 3DCA           E8         3FBB            call	_outb
16810 3DCD           83C4                   04  add	sp,*4
16811                                           !BCC_EOS
16812                                           ! 1998       }
16813                                           ! 1999      else
16814                                           ! 2000       {outb(0x3c9,0);
16815 3DD0           EB           27            jmp .70
16816                       00003DD2            .6E:
16817                                           ! Debug: list int = const 0 (used reg = )
16818 3DD2           31C0                       xor	ax,ax
16819 3DD4           50                         push	ax
16820                                           ! Debug: list int = const $3C9 (used reg = )
16821 3DD5           B8                   03C9  mov	ax,#$3C9
16822 3DD8           50                         push	ax
16823                                           ! Debug: func () void = outb+0 (used reg = )
16824 3DD9           E8         3FAC            call	_outb
16825 3DDC           83C4                   04  add	sp,*4
16826                                           !BCC_EOS
16827                                           ! 2001        outb(0x3c9,0);
16828                                           ! Debug: list int = const 0 (used reg = )
16829 3DDF           31C0                       xor	ax,ax
16830 3DE1           50                         push	ax
16831                                           ! Debug: list int = const $3C9 (used reg = )
16832 3DE2           B8                   03C9  mov	ax,#$3C9
16833 3DE5           50                         push	ax
16834                                           ! Debug: func () void = outb+0 (used reg = )
16835 3DE6           E8         3F9F            call	_outb
16836 3DE9           83C4                   04  add	sp,*4
16837                                           !BCC_EOS
16838                                           ! 2002        outb(0x3c9,0);
16839                                           ! Debug: list int = const 0 (used reg = )
16840 3DEC           31C0                       xor	ax,ax
16841 3DEE           50                         push	ax
16842                                           ! Debug: list int = const $3C9 (used reg = )
16843 3DEF           B8                   03C9  mov	ax,#$3C9
16844 3DF2           50                         push	ax
16845                                           ! Debug: func () void = outb+0 (used reg = )
16846 3DF3           E8         3F92            call	_outb
16847 3DF6           83C4                   04  add	sp,*4
16848                                           !BCC_EOS
16849                                           ! 2003       }
16850                                           ! 2004     }
16851                       00003DF9            .70:
16852                                           ! 2005    if((modeset_ctl&0x02)==0x02)
16853                       00003DF9            .6B:
16854                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16855 3DF9           8B46         F6            mov	ax,-$A[bp]
16856 3DFC           40                         inc	ax
16857 3DFD           8946         F6            mov	-$A[bp],ax
16858                       00003E00            .6C:
16859                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16860 3E00           8B46         F6            mov	ax,-$A[bp]
16861 3E03           3D                   0100  cmp	ax,#$100
16862 3E06         0F82         FF4B            blo 	.6D
16863                       00003E0A            .71:
16864                       00003E0A            .6A:
16865                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16866 3E0A           8A46         EF            mov	al,-$11[bp]
16867 3E0D           24                     02  and	al,*2
16868                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16869 3E0F           3C                     02  cmp	al,*2
16870 3E11           75           0D            jne 	.72
16871                       00003E13            .73:
16872                                           ! 2006     {
16873                                           ! 2007      biosfn_perform_gray_scale_summing(0x00, 0x100);
16874                                           ! Debug: list int = const $100 (used reg = )
16875 3E13           B8                   0100  mov	ax,#$100
16876 3E16           50                         push	ax
16877                                           ! Debug: list int = const 0 (used reg = )
16878 3E17           31C0                       xor	ax,ax
16879 3E19           50                         push	ax
16880                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16881 3E1A           E8         2739            call	_biosfn_perform_gray_scale_summing
16882 3E1D           83C4                   04  add	sp,*4
16883                                           !BCC_EOS
16884                                           ! 2008     }
16885                                           ! 2009   }
16886                       00003E20            .72:
16887                                           ! 2010  inb(0x3da);
16888                       00003E20            .61:
16889                                           ! Debug: list int = const $3DA (used reg = )
16890 3E20           B8                   03DA  mov	ax,#$3DA
16891 3E23           50                         push	ax
16892                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16893 3E24           E8         3F4B            call	_inb
16894 3E27           44                         inc	sp
16895 3E28           44                         inc	sp
16896                                           !BCC_EOS
16897                                           ! 2011  for(i=0;i<=0x13;i++)
16898                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16899 3E29           31C0                       xor	ax,ax
16900 3E2B           8946         F6            mov	-$A[bp],ax
16901                                           !BCC_EOS
16902                                           !BCC_EOS
16903                                           ! 2012   {outb(0x3c0,i);
16904 3E2E           EB           38            jmp .76
16905                       00003E30            .77:
16906                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16907 3E30           FF76         F6            push	-$A[bp]
16908                                           ! Debug: list int = const $3C0 (used reg = )
16909 3E33           B8                   03C0  mov	ax,#$3C0
16910 3E36           50                         push	ax
16911                                           ! Debug: func () void = outb+0 (used reg = )
16912 3E37           E8         3F4E            call	_outb
16913 3E3A           83C4                   04  add	sp,*4
16914                                           !BCC_EOS
16915                                           ! 2013    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16916                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16917 3E3D           8A46         F9            mov	al,-7[bp]
16918 3E40           30E4                       xor	ah,ah
16919 3E42           B1                     06  mov	cl,*6
16920 3E44           D3E0                       shl	ax,cl
16921 3E46           89C3                       mov	bx,ax
16922 3E48           81C3                 02A1  add	bx,#_video_param_table
16923                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16924 3E4C           8B46         F6            mov	ax,-$A[bp]
16925 3E4F           01C3                       add	bx,ax
16926                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16927 3E51           8A47         23            mov	al,$23[bx]
16928 3E54           30E4                       xor	ah,ah
16929 3E56           50                         push	ax
16930                                           ! Debug: list int = const $3C0 (used reg = )
16931 3E57           B8                   03C0  mov	ax,#$3C0
16932 3E5A           50                         push	ax
16933                                           ! Debug: func () void = outb+0 (used reg = )
16934 3E5B           E8         3F2A            call	_outb
16935 3E5E           83C4                   04  add	sp,*4
16936                                           !BCC_EOS
16937                                           ! 2014   }
16938                                           ! 2015  outb(0x3c0,0x14);
16939                       00003E61            .75:
16940                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16941 3E61           8B46         F6            mov	ax,-$A[bp]
16942 3E64           40                         inc	ax
16943 3E65           8946         F6            mov	-$A[bp],ax
16944                       00003E68            .76:
16945                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16946 3E68           8B46         F6            mov	ax,-$A[bp]
16947 3E6B           3D                   0013  cmp	ax,*$13
16948 3E6E           76           C0            jbe	.77
16949                       00003E70            .78:
16950                       00003E70            .74:
16951                                           ! Debug: list int = const $14 (used reg = )
16952 3E70           B8                   0014  mov	ax,*$14
16953 3E73           50                         push	ax
16954                                           ! Debug: list int = const $3C0 (used reg = )
16955 3E74           B8                   03C0  mov	ax,#$3C0
16956 3E77           50                         push	ax
16957                                           ! Debug: func () void = outb+0 (used reg = )
16958 3E78           E8         3F0D            call	_outb
16959 3E7B           83C4                   04  add	sp,*4
16960                                           !BCC_EOS
16961                                           ! 2016  outb(0x3c0,0x00);
16962                                           ! Debug: list int = const 0 (used reg = )
16963 3E7E           31C0                       xor	ax,ax
16964 3E80           50                         push	ax
16965                                           ! Debug: list int = const $3C0 (used reg = )
16966 3E81           B8                   03C0  mov	ax,#$3C0
16967 3E84           50                         push	ax
16968                                           ! Debug: func () void = outb+0 (used reg = )
16969 3E85           E8         3F00            call	_outb
16970 3E88           83C4                   04  add	sp,*4
16971                                           !BCC_EOS
16972                                           ! 2017  outb(0x3c4,0);
16973                                           ! Debug: list int = const 0 (used reg = )
16974 3E8B           31C0                       xor	ax,ax
16975 3E8D           50                         push	ax
16976                                           ! Debug: list int = const $3C4 (used reg = )
16977 3E8E           B8                   03C4  mov	ax,#$3C4
16978 3E91           50                         push	ax
16979                                           ! Debug: func () void = outb+0 (used reg = )
16980 3E92           E8         3EF3            call	_outb
16981 3E95           83C4                   04  add	sp,*4
16982                                           !BCC_EOS
16983                                           ! 2018  outb(0x3c5,0x03);
16984                                           ! Debug: list int = const 3 (used reg = )
16985 3E98           B8                   0003  mov	ax,*3
16986 3E9B           50                         push	ax
16987                                           ! Debug: list int = const $3C5 (used reg = )
16988 3E9C           B8                   03C5  mov	ax,#$3C5
16989 3E9F           50                         push	ax
16990                                           ! Debug: func () void = outb+0 (used reg = )
16991 3EA0           E8         3EE5            call	_outb
16992 3EA3           83C4                   04  add	sp,*4
16993                                           !BCC_EOS
16994                                           ! 2019  for(i=1;i<=4;i++)
16995                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16996 3EA6           B8                   0001  mov	ax,*1
16997 3EA9           8946         F6            mov	-$A[bp],ax
16998                                           !BCC_EOS
16999                                           !BCC_EOS
17000                                           ! 2020   {outb(0x3c4,i);
17001 3EAC           EB           3F            jmp .7B
17002                       00003EAE            .7C:
17003                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17004 3EAE           FF76         F6            push	-$A[bp]
17005                                           ! Debug: list int = const $3C4 (used reg = )
17006 3EB1           B8                   03C4  mov	ax,#$3C4
17007 3EB4           50                         push	ax
17008                                           ! Debug: func () void = outb+0 (used reg = )
17009 3EB5           E8         3ED0            call	_outb
17010 3EB8           83C4                   04  add	sp,*4
17011                                           !BCC_EOS
17012                                           ! 2021    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
17013                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17014 3EBB           8B46         F6            mov	ax,-$A[bp]
17015 3EBE           48                         dec	ax
17016 3EBF           50                         push	ax
17017                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
17018 3EC0           8A46         F9            mov	al,-7[bp]
17019 3EC3           30E4                       xor	ah,ah
17020 3EC5           B1                     06  mov	cl,*6
17021 3EC7           D3E0                       shl	ax,cl
17022 3EC9           89C3                       mov	bx,ax
17023 3ECB           81C3                 02A1  add	bx,#_video_param_table
17024                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
17025 3ECF           8B46         E8            mov	ax,-$18[bp]
17026 3ED2           01C3                       add	bx,ax
17027 3ED4           44                         inc	sp
17028 3ED5           44                         inc	sp
17029                                           ! Debug: list unsigned char = [bx+5] (used reg = )
17030 3ED6           8A47         05            mov	al,5[bx]
17031 3ED9           30E4                       xor	ah,ah
17032 3EDB           50                         push	ax
17033                                           ! Debug: list int = const $3C5 (used reg = )
17034 3EDC           B8                   03C5  mov	ax,#$3C5
17035 3EDF           50                         push	ax
17036                                           ! Debug: func () void = outb+0 (used reg = )
17037 3EE0           E8         3EA5            call	_outb
17038 3EE3           83C4                   04  add	sp,*4
17039                                           !BCC_EOS
17040                                           ! 2022   }
17041                                           ! 2023  for(i=0;i<=8;i++)
17042                       00003EE6            .7A:
17043                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17044 3EE6           8B46         F6            mov	ax,-$A[bp]
17045 3EE9           40                         inc	ax
17046 3EEA           8946         F6            mov	-$A[bp],ax
17047                       00003EED            .7B:
17048                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
17049 3EED           8B46         F6            mov	ax,-$A[bp]
17050 3EF0           3D                   0004  cmp	ax,*4
17051 3EF3           76           B9            jbe	.7C
17052                       00003EF5            .7D:
17053                       00003EF5            .79:
17054                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17055 3EF5           31C0                       xor	ax,ax
17056 3EF7           8946         F6            mov	-$A[bp],ax
17057                                           !BCC_EOS
17058                                           !BCC_EOS
17059                                           ! 2024   {outb(0x3ce,i);
17060 3EFA           EB           38            jmp .80
17061                       00003EFC            .81:
17062                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17063 3EFC           FF76         F6            push	-$A[bp]
17064                                           ! Debug: list int = const $3CE (used reg = )
17065 3EFF           B8                   03CE  mov	ax,#$3CE
17066 3F02           50                         push	ax
17067                                           ! Debug: func () void = outb+0 (used reg = )
17068 3F03           E8         3E82            call	_outb
17069 3F06           83C4                   04  add	sp,*4
17070                                           !BCC_EOS
17071                                           ! 2025    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
17072                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17073 3F09           8A46         F9            mov	al,-7[bp]
17074 3F0C           30E4                       xor	ah,ah
17075 3F0E           B1                     06  mov	cl,*6
17076 3F10           D3E0                       shl	ax,cl
17077 3F12           89C3                       mov	bx,ax
17078 3F14           81C3                 02A1  add	bx,#_video_param_table
17079                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
17080 3F18           8B46         F6            mov	ax,-$A[bp]
17081 3F1B           01C3                       add	bx,ax
17082                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
17083 3F1D           8A47         37            mov	al,$37[bx]
17084 3F20           30E4                       xor	ah,ah
17085 3F22           50                         push	ax
17086                                           ! Debug: list int = const $3CF (used reg = )
17087 3F23           B8                   03CF  mov	ax,#$3CF
17088 3F26           50                         push	ax
17089                                           ! Debug: func () void = outb+0 (used reg = )
17090 3F27           E8         3E5E            call	_outb
17091 3F2A           83C4                   04  add	sp,*4
17092                                           !BCC_EOS
17093                                           ! 2026   }
17094                                           ! 2027  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17095                       00003F2D            .7F:
17096                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17097 3F2D           8B46         F6            mov	ax,-$A[bp]
17098 3F30           40                         inc	ax
17099 3F31           8946         F6            mov	-$A[bp],ax
17100                       00003F34            .80:
17101                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17102 3F34           8B46         F6            mov	ax,-$A[bp]
17103 3F37           3D                   0008  cmp	ax,*8
17104 3F3A           76           C0            jbe	.81
17105                       00003F3C            .82:
17106                       00003F3C            .7E:
17107                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17108 3F3C           8A46         FE            mov	al,-2[bp]
17109 3F3F           30E4                       xor	ah,ah
17110 3F41           B1                     03  mov	cl,*3
17111 3F43           D3E0                       shl	ax,cl
17112 3F45           89C3                       mov	bx,ax
17113 3F47           81C3                 020D  add	bx,#_vga_modes
17114                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17115 3F4B           8A47         02            mov	al,2[bx]
17116 3F4E           3C                     01  cmp	al,*1
17117 3F50           75           05            jne 	.83
17118                       00003F52            .84:
17119 3F52           B8                   03B4  mov	ax,#$3B4
17120 3F55           EB           03            jmp .85
17121                       00003F57            .83:
17122 3F57           B8                   03D4  mov	ax,#$3D4
17123                       00003F5A            .85:
17124                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17125 3F5A           8946         EA            mov	-$16[bp],ax
17126                                           !BCC_EOS
17127                                           ! 2028  outw(crtc_addr,0x0011);
17128                                           ! Debug: list int = const $11 (used reg = )
17129 3F5D           B8                   0011  mov	ax,*$11
17130 3F60           50                         push	ax
17131                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17132 3F61           FF76         EA            push	-$16[bp]
17133                                           ! Debug: func () void = outw+0 (used reg = )
17134 3F64           E8         3E31            call	_outw
17135 3F67           83C4                   04  add	sp,*4
17136                                           !BCC_EOS
17137                                           ! 2029  for(i=0;i<=0x18;i++)
17138                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17139 3F6A           31C0                       xor	ax,ax
17140 3F6C           8946         F6            mov	-$A[bp],ax
17141                                           !BCC_EOS
17142                                           !BCC_EOS
17143                                           ! 2030   {outb(crtc_addr,i);
17144 3F6F           EB           38            jmp .88
17145                       00003F71            .89:
17146                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17147 3F71           FF76         F6            push	-$A[bp]
17148                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17149 3F74           FF76         EA            push	-$16[bp]
17150                                           ! Debug: func () void = outb+0 (used reg = )
17151 3F77           E8         3E0E            call	_outb
17152 3F7A           83C4                   04  add	sp,*4
17153                                           !BCC_EOS
17154                                           ! 2031    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17155                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17156 3F7D           8A46         F9            mov	al,-7[bp]
17157 3F80           30E4                       xor	ah,ah
17158 3F82           B1                     06  mov	cl,*6
17159 3F84           D3E0                       shl	ax,cl
17160 3F86           89C3                       mov	bx,ax
17161 3F88           81C3                 02A1  add	bx,#_video_param_table
17162                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17163 3F8C           8B46         F6            mov	ax,-$A[bp]
17164 3F8F           01C3                       add	bx,ax
17165                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17166 3F91           8A47         0A            mov	al,$A[bx]
17167 3F94           30E4                       xor	ah,ah
17168 3F96           50                         push	ax
17169                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17170 3F97           8B46         EA            mov	ax,-$16[bp]
17171                                           ! Debug: list unsigned int = ax+1 (used reg = )
17172 3F9A           40                         inc	ax
17173 3F9B           50                         push	ax
17174                                           ! Debug: func () void = outb+0 (used reg = )
17175 3F9C           E8         3DE9            call	_outb
17176 3F9F           83C4                   04  add	sp,*4
17177                                           !BCC_EOS
17178                                           ! 2032   }
17179                                           ! 2033  outb(0x3c2,video_param_tab
17180                       00003FA2            .87:
17181                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17182 3FA2           8B46         F6            mov	ax,-$A[bp]
17183 3FA5           40                         inc	ax
17184 3FA6           8946         F6            mov	-$A[bp],ax
17185                       00003FA9            .88:
17186                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17187 3FA9           8B46         F6            mov	ax,-$A[bp]
17188 3FAC           3D                   0018  cmp	ax,*$18
17189 3FAF           76           C0            jbe	.89
17190                       00003FB1            .8A:
17191                       00003FB1            .86:
17192                                           ! 2033 le[vpti].miscreg);
17193                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17194 3FB1           8A46         F9            mov	al,-7[bp]
17195 3FB4           30E4                       xor	ah,ah
17196 3FB6           B1                     06  mov	cl,*6
17197 3FB8           D3E0                       shl	ax,cl
17198 3FBA           89C3                       mov	bx,ax
17199 3FBC           81C3                 02A1  add	bx,#_video_param_table
17200                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17201 3FC0           8A47         09            mov	al,9[bx]
17202 3FC3           30E4                       xor	ah,ah
17203 3FC5           50                         push	ax
17204                                           ! Debug: list int = const $3C2 (used reg = )
17205 3FC6           B8                   03C2  mov	ax,#$3C2
17206 3FC9           50                         push	ax
17207                                           ! Debug: func () void = outb+0 (used reg = )
17208 3FCA           E8         3DBB            call	_outb
17209 3FCD           83C4                   04  add	sp,*4
17210                                           !BCC_EOS
17211                                           ! 2034  outb(0x3c0,0x20);
17212                                           ! Debug: list int = const $20 (used reg = )
17213 3FD0           B8                   0020  mov	ax,*$20
17214 3FD3           50                         push	ax
17215                                           ! Debug: list int = const $3C0 (used reg = )
17216 3FD4           B8                   03C0  mov	ax,#$3C0
17217 3FD7           50                         push	ax
17218                                           ! Debug: func () void = outb+0 (used reg = )
17219 3FD8           E8         3DAD            call	_outb
17220 3FDB           83C4                   04  add	sp,*4
17221                                           !BCC_EOS
17222                                           ! 2035  inb(0x3da);
17223                                           ! Debug: list int = const $3DA (used reg = )
17224 3FDE           B8                   03DA  mov	ax,#$3DA
17225 3FE1           50                         push	ax
17226                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17227 3FE2           E8         3D8D            call	_inb
17228 3FE5           44                         inc	sp
17229 3FE6           44                         inc	sp
17230                                           !BCC_EOS
17231                                           ! 2036  if(noclearmem==0x00)
17232                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17233 3FE7           8A46         FF            mov	al,-1[bp]
17234 3FEA           84C0                       test	al,al
17235 3FEC         0F85         00C1            bne 	.8B
17236                       00003FF0            .8C:
17237                                           ! 2037   {
17238                                           ! 2038    if(vga_modes[line].class==0x00)
17239                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17240 3FF0           8A46         FE            mov	al,-2[bp]
17241 3FF3           30E4                       xor	ah,ah
17242 3FF5           B1                     03  mov	cl,*3
17243 3FF7           D3E0                       shl	ax,cl
17244 3FF9           89C3                       mov	bx,ax
17245 3FFB           81C3                 020D  add	bx,#_vga_modes
17246                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17247 3FFF           8A47         01            mov	al,1[bx]
17248 4002           84C0                       test	al,al
17249 4004           75           26            jne 	.8D
17250                       00004006            .8E:
17251                                           ! 2039     {
17252                                           ! 2040      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17253                                           ! Debug: list int = const $4000 (used reg = )
17254 4006           B8                   4000  mov	ax,#$4000
17255 4009           50                         push	ax
17256                                           ! Debug: list int = const $720 (used reg = )
17257 400A           B8                   0720  mov	ax,#$720
17258 400D           50                         push	ax
17259                                           ! Debug: list int = const 0 (used reg = )
17260 400E           31C0                       xor	ax,ax
17261 4010           50                         push	ax
17262                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17263 4011           8A46         FE            mov	al,-2[bp]
17264 4014           30E4                       xor	ah,ah
17265 4016           B1                     03  mov	cl,*3
17266 4018           D3E0                       shl	ax,cl
17267 401A           89C3                       mov	bx,ax
17268 401C           81C3                 020D  add	bx,#_vga_modes
17269                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17270 4020           FF77         04            push	4[bx]
17271                                           ! Debug: func () void = memsetw+0 (used reg = )
17272 4023           E8         3C71            call	_memsetw
17273 4026           83C4                   08  add	sp,*8
17274                                           !BCC_EOS
17275                                           ! 2041     }
17276                                           ! 2042    else
17277                                           ! 2043     {
17278 4029           E9         0085            br 	.8F
17279                       0000402C            .8D:
17280                                           ! 2044      if(mode<0x0d)
17281                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17282 402C           8A46         04            mov	al,4[bp]
17283 402F           3C                     0D  cmp	al,*$D
17284 4031           73           24            jae 	.90
17285                       00004033            .91:
17286                                           ! 2045       {
17287                                           ! 2046        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17288                                           ! Debug: list int = const $4000 (used reg = )
17289 4033           B8                   4000  mov	ax,#$4000
17290 4036           50                         push	ax
17291                                           ! Debug: list int = const 0 (used reg = )
17292 4037           31C0                       xor	ax,ax
17293 4039           50                         push	ax
17294                                           ! Debug: list int = const 0 (used reg = )
17295 403A           31C0                       xor	ax,ax
17296 403C           50                         push	ax
17297                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17298 403D           8A46         FE            mov	al,-2[bp]
17299 4040           30E4                       xor	ah,ah
17300 4042           B1                     03  mov	cl,*3
17301 4044           D3E0                       shl	ax,cl
17302 4046           89C3                       mov	bx,ax
17303 4048           81C3                 020D  add	bx,#_vga_modes
17304                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17305 404C           FF77         04            push	4[bx]
17306                                           ! Debug: func () void = memsetw+0 (used reg = )
17307 404F           E8         3C45            call	_memsetw
17308 4052           83C4                   08  add	sp,*8
17309                                           !BCC_EOS
17310                                           ! 2047       }
17311                                           ! 2048      else
17312                                           ! 2049       {
17313 4055           EB           5A            jmp .92
17314                       00004057            .90:
17315                                           ! 2050        outb( 0x3c4, 0x02 );
17316                                           ! Debug: list int = const 2 (used reg = )
17317 4057           B8                   0002  mov	ax,*2
17318 405A           50                         push	ax
17319                                           ! Debug: list int = const $3C4 (used reg = )
17320 405B           B8                   03C4  mov	ax,#$3C4
17321 405E           50                         push	ax
17322                                           ! Debug: func () void = outb+0 (used reg = )
17323 405F           E8         3D26            call	_outb
17324 4062           83C4                   04  add	sp,*4
17325                                           !BCC_EOS
17326                                           ! 2051        mmask = inb( 0x3c5 );
17327                                           ! Debug: list int = const $3C5 (used reg = )
17328 4065           B8                   03C5  mov	ax,#$3C5
17329 4068           50                         push	ax
17330                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17331 4069           E8         3D06            call	_inb
17332 406C           44                         inc	sp
17333 406D           44                         inc	sp
17334                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17335 406E           8846         FD            mov	-3[bp],al
17336                                           !BCC_EOS
17337                                           ! 2052        outb( 0x3c5, 0x0f );
17338                                           ! Debug: list int = const $F (used reg = )
17339 4071           B8                   000F  mov	ax,*$F
17340 4074           50                         push	ax
17341                                           ! Debug: list int = const $3C5 (used reg = )
17342 4075           B8                   03C5  mov	ax,#$3C5
17343 4078           50                         push	ax
17344                                           ! Debug: func () void = outb+0 (used reg = )
17345 4079           E8         3D0C            call	_outb
17346 407C           83C4                   04  add	sp,*4
17347                                           !BCC_EOS
17348                                           ! 2053        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17349                                           ! Debug: list unsigned int = const $8000 (used reg = )
17350 407F           B8                   8000  mov	ax,#$8000
17351 4082           50                         push	ax
17352                                           ! Debug: list int = const 0 (used reg = )
17353 4083           31C0                       xor	ax,ax
17354 4085           50                         push	ax
17355                                           ! Debug: list int = const 0 (used reg = )
17356 4086           31C0                       xor	ax,ax
17357 4088           50                         push	ax
17358                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17359 4089           8A46         FE            mov	al,-2[bp]
17360 408C           30E4                       xor	ah,ah
17361 408E           B1                     03  mov	cl,*3
17362 4090           D3E0                       shl	ax,cl
17363 4092           89C3                       mov	bx,ax
17364 4094           81C3                 020D  add	bx,#_vga_modes
17365                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17366 4098           FF77         04            push	4[bx]
17367                                           ! Debug: func () void = memsetw+0 (used reg = )
17368 409B           E8         3BF9            call	_memsetw
17369 409E           83C4                   08  add	sp,*8
17370                                           !BCC_EOS
17371                                           ! 2054        outb( 0x3c5, mmask );
17372                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17373 40A1           8A46         FD            mov	al,-3[bp]
17374 40A4           30E4                       xor	ah,ah
17375 40A6           50                         push	ax
17376                                           ! Debug: list int = const $3C5 (used reg = )
17377 40A7           B8                   03C5  mov	ax,#$3C5
17378 40AA           50                         push	ax
17379                                           ! Debug: func () void = outb+0 (used reg = )
17380 40AB           E8         3CDA            call	_outb
17381 40AE           83C4                   04  add	sp,*4
17382                                           !BCC_EOS
17383                                           ! 2055       }
17384                                           ! 2056     }
17385                       000040B1            .92:
17386                                           ! 2057   }
17387                       000040B1            .8F:
17388                                           ! 2058  write_byte(0x40,0x49,mode);
17389                       000040B1            .8B:
17390                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17391 40B1           8A46         04            mov	al,4[bp]
17392 40B4           30E4                       xor	ah,ah
17393 40B6           50                         push	ax
17394                                           ! Debug: list int = const $49 (used reg = )
17395 40B7           B8                   0049  mov	ax,*$49
17396 40BA           50                         push	ax
17397                                           ! Debug: list int = const $40 (used reg = )
17398 40BB           B8                   0040  mov	ax,*$40
17399 40BE           50                         push	ax
17400                                           ! Debug: func () void = write_byte+0 (used reg = )
17401 40BF           E8         3C80            call	_write_byte
17402 40C2           83C4                   06  add	sp,*6
17403                                           !BCC_EOS
17404                                           ! 2059  write_word(0x40,0x4A,twidth);
17405                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17406 40C5           FF76         F4            push	-$C[bp]
17407                                           ! Debug: list int = const $4A (used reg = )
17408 40C8           B8                   004A  mov	ax,*$4A
17409 40CB           50                         push	ax
17410                                           ! Debug: list int = const $40 (used reg = )
17411 40CC           B8                   0040  mov	ax,*$40
17412 40CF           50                         push	ax
17413                                           ! Debug: func () void = write_word+0 (used reg = )
17414 40D0           E8         3C87            call	_write_word
17415 40D3           83C4                   06  add	sp,*6
17416                                           !BCC_EOS
17417                                           ! 2060  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17418                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17419 40D6           8A46         F9            mov	al,-7[bp]
17420 40D9           30E4                       xor	ah,ah
17421 40DB           B1                     06  mov	cl,*6
17422 40DD           D3E0                       shl	ax,cl
17423 40DF           89C3                       mov	bx,ax
17424 40E1           81C3                 02A1  add	bx,#_video_param_table
17425                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17426                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17427                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17428 40E5           FF77         03            push	3[bx]
17429                                           ! Debug: list int = const $4C (used reg = )
17430 40E8           B8                   004C  mov	ax,*$4C
17431 40EB           50                         push	ax
17432                                           ! Debug: list int = const $40 (used reg = )
17433 40EC           B8                   0040  mov	ax,*$40
17434 40EF           50                         push	ax
17435                                           ! Debug: func () void = write_word+0 (used reg = )
17436 40F0           E8         3C67            call	_write_word
17437 40F3           83C4                   06  add	sp,*6
17438                                           !BCC_EOS
17439                                           ! 2061  write_word(0x40,0x63,crtc_addr);
17440                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17441 40F6           FF76         EA            push	-$16[bp]
17442                                           ! Debug: list int = const $63 (used reg = )
17443 40F9           B8                   0063  mov	ax,*$63
17444 40FC           50                         push	ax
17445                                           ! Debug: list int = const $40 (used reg = )
17446 40FD           B8                   0040  mov	ax,*$40
17447 4100           50                         push	ax
17448                                           ! Debug: func () void = write_word+0 (used reg = )
17449 4101           E8         3C56            call	_write_word
17450 4104           83C4                   06  add	sp,*6
17451                                           !BCC_EOS
17452                                           ! 2062  write_byte(0x40,0x84,theightm1);
17453                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17454 4107           FF76         F2            push	-$E[bp]
17455                                           ! Debug: list int = const $84 (used reg = )
17456 410A           B8                   0084  mov	ax,#$84
17457 410D           50                         push	ax
17458                                           ! Debug: list int = const $40 (used reg = )
17459 410E           B8                   0040  mov	ax,*$40
17460 4111           50                         push	ax
17461                                           ! Debug: func () void = write_byte+0 (used reg = )
17462 4112           E8         3C2D            call	_write_byte
17463 4115           83C4                   06  add	sp,*6
17464                                           !BCC_EOS
17465                                           ! 2063  write_word(0x40,0x85,cheight);
17466                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17467 4118           FF76         F0            push	-$10[bp]
17468                                           ! Debug: list int = const $85 (used reg = )
17469 411B           B8                   0085  mov	ax,#$85
17470 411E           50                         push	ax
17471                                           ! Debug: list int = const $40 (used reg = )
17472 411F           B8                   0040  mov	ax,*$40
17473 4122           50                         push	ax
17474                                           ! Debug: func () void = write_word+0 (used reg = )
17475 4123           E8         3C34            call	_write_word
17476 4126           83C4                   06  add	sp,*6
17477                                           !BCC_EOS
17478                                           ! 2064  write_byte(0x40,0x87,(0x60|noclearmem));
17479                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17480                                           ! Debug: expression subtree swapping
17481 4129           8A46         FF            mov	al,-1[bp]
17482 412C           0C                     60  or	al,*$60
17483                                           ! Debug: list unsigned char = al+0 (used reg = )
17484 412E           30E4                       xor	ah,ah
17485 4130           50                         push	ax
17486                                           ! Debug: list int = const $87 (used reg = )
17487 4131           B8                   0087  mov	ax,#$87
17488 4134           50                         push	ax
17489                                           ! Debug: list int = const $40 (used reg = )
17490 4135           B8                   0040  mov	ax,*$40
17491 4138           50                         push	ax
17492                                           ! Debug: func () void = write_byte+0 (used reg = )
17493 4139           E8         3C06            call	_write_byte
17494 413C           83C4                   06  add	sp,*6
17495                                           !BCC_EOS
17496                                           ! 2065  write_byte(0x40,0x88,0xF9);
17497                                           ! Debug: list int = const $F9 (used reg = )
17498 413F           B8                   00F9  mov	ax,#$F9
17499 4142           50                         push	ax
17500                                           ! Debug: list int = const $88 (used reg = )
17501 4143           B8                   0088  mov	ax,#$88
17502 4146           50                         push	ax
17503                                           ! Debug: list int = const $40 (used reg = )
17504 4147           B8                   0040  mov	ax,*$40
17505 414A           50                         push	ax
17506                                           ! Debug: func () void = write_byte+0 (used reg = )
17507 414B           E8         3BF4            call	_write_byte
17508 414E           83C4                   06  add	sp,*6
17509                                           !BCC_EOS
17510                                           ! 2066  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17511                                           ! Debug: list int = const $89 (used reg = )
17512 4151           B8                   0089  mov	ax,#$89
17513 4154           50                         push	ax
17514                                           ! Debug: list int = const $40 (used reg = )
17515 4155           B8                   0040  mov	ax,*$40
17516 4158           50                         push	ax
17517                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17518 4159           E8         3BC0            call	_read_byte
17519 415C           83C4                   04  add	sp,*4
17520                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17521 415F           24                     7F  and	al,*$7F
17522                                           ! Debug: list unsigned char = al+0 (used reg = )
17523 4161           30E4                       xor	ah,ah
17524 4163           50                         push	ax
17525                                           ! Debug: list int = const $89 (used reg = )
17526 4164           B8                   0089  mov	ax,#$89
17527 4167           50                         push	ax
17528                                           ! Debug: list int = const $40 (used reg = )
17529 4168           B8                   0040  mov	ax,*$40
17530 416B           50                         push	ax
17531                                           ! Debug: func () void = write_byte+0 (used reg = )
17532 416C           E8         3BD3            call	_write_byte
17533 416F           83C4                   06  add	sp,*6
17534                                           !BCC_EOS
17535                                           ! 2067  write_byte(0x40,0x8A,0x08);
17536                                           ! Debug: list int = const 8 (used reg = )
17537 4172           B8                   0008  mov	ax,*8
17538 4175           50                         push	ax
17539                                           ! Debug: list int = const $8A (used reg = )
17540 4176           B8                   008A  mov	ax,#$8A
17541 4179           50                         push	ax
17542                                           ! Debug: list int = const $40 (used reg = )
17543 417A           B8                   0040  mov	ax,*$40
17544 417D           50                         push	ax
17545                                           ! Debug: func () void = write_byte+0 (used reg = )
17546 417E           E8         3BC1            call	_write_byte
17547 4181           83C4                   06  add	sp,*6
17548                                           !BCC_EOS
17549                                           ! 2068  write_word(0x40,0xA8, video_save_pointer_table);
17550                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17551 4184           BB                   360A  mov	bx,#_video_save_pointer_table
17552 4187           53                         push	bx
17553                                           ! Debug: list int = const $A8 (used reg = )
17554 4188           B8                   00A8  mov	ax,#$A8
17555 418B           50                         push	ax
17556                                           ! Debug: list int = const $40 (used reg = )
17557 418C           B8                   0040  mov	ax,*$40
17558 418F           50                         push	ax
17559                                           ! Debug: func () void = write_word+0 (used reg = )
17560 4190           E8         3BC7            call	_write_word
17561 4193           83C4                   06  add	sp,*6
17562                                           !BCC_EOS
17563                                           ! 2069  write_word(0x40,0xA8 +2, 0xc000);
17564                                           ! Debug: list unsigned int = const $C000 (used reg = )
17565 4196           B8                   C000  mov	ax,#$C000
17566 4199           50                         push	ax
17567                                           ! Debug: list int = const $AA (used reg = )
17568 419A           B8                   00AA  mov	ax,#$AA
17569 419D           50                         push	ax
17570                                           ! Debug: list int = const $40 (used reg = )
17571 419E           B8                   0040  mov	ax,*$40
17572 41A1           50                         push	ax
17573                                           ! Debug: func () void = write_word+0 (used reg = )
17574 41A2           E8         3BB5            call	_write_word
17575 41A5           83C4                   06  add	sp,*6
17576                                           !BCC_EOS
17577                                           ! 2070  write_byte(0x40,0x65,0x00);
17578                                           ! Debug: list int = const 0 (used reg = )
17579 41A8           31C0                       xor	ax,ax
17580 41AA           50                         push	ax
17581                                           ! Debug: list int = const $65 (used reg = )
17582 41AB           B8                   0065  mov	ax,*$65
17583 41AE           50                         push	ax
17584                                           ! Debug: list int = const $40 (used reg = )
17585 41AF           B8                   0040  mov	ax,*$40
17586 41B2           50                         push	ax
17587                                           ! Debug: func () void = write_byte+0 (used reg = )
17588 41B3           E8         3B8C            call	_write_byte
17589 41B6           83C4                   06  add	sp,*6
17590                                           !BCC_EOS
17591                                           ! 2071  write_byte(0x40,0x66,0x00);
17592                                           ! Debug: list int = const 0 (used reg = )
17593 41B9           31C0                       xor	ax,ax
17594 41BB           50                         push	ax
17595                                           ! Debug: list int = const $66 (used reg = )
17596 41BC           B8                   0066  mov	ax,*$66
17597 41BF           50                         push	ax
17598                                           ! Debug: list int = const $40 (used reg = )
17599 41C0           B8                   0040  mov	ax,*$40
17600 41C3           50                         push	ax
17601                                           ! Debug: func () void = write_byte+0 (used reg = )
17602 41C4           E8         3B7B            call	_write_byte
17603 41C7           83C4                   06  add	sp,*6
17604                                           !BCC_EOS
17605                                           ! 2072  if(vga_modes[line].class==0x00)
17606                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17607 41CA           8A46         FE            mov	al,-2[bp]
17608 41CD           30E4                       xor	ah,ah
17609 41CF           B1                     03  mov	cl,*3
17610 41D1           D3E0                       shl	ax,cl
17611 41D3           89C3                       mov	bx,ax
17612 41D5           81C3                 020D  add	bx,#_vga_modes
17613                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17614 41D9           8A47         01            mov	al,1[bx]
17615 41DC           84C0                       test	al,al
17616 41DE           75           0E            jne 	.93
17617                       000041E0            .94:
17618                                           ! 2073   {
17619                                           ! 2074    biosfn_set_cursor_shape(0x06,0x07);
17620                                           ! Debug: list int = const 7 (used reg = )
17621 41E0           B8                   0007  mov	ax,*7
17622 41E3           50                         push	ax
17623                                           ! Debug: list int = const 6 (used reg = )
17624 41E4           B8                   0006  mov	ax,*6
17625 41E7           50                         push	ax
17626                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17627 41E8           E8         00BA            call	_biosfn_set_cursor_shape
17628 41EB           83C4                   04  add	sp,*4
17629                                           !BCC_EOS
17630                                           ! 2075   }
17631                                           ! 2076  for(i=0;i<8;i++)
17632                       000041EE            .93:
17633                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17634 41EE           31C0                       xor	ax,ax
17635 41F0           8946         F6            mov	-$A[bp],ax
17636                                           !BCC_EOS
17637                                           !BCC_EOS
17638                                           ! 2077   biosfn_set_cursor_pos(i,0x0000);
17639 41F3           EB           13            jmp .97
17640                       000041F5            .98:
17641                                           ! Debug: list int = const 0 (used reg = )
17642 41F5           31C0                       xor	ax,ax
17643 41F7           50                         push	ax
17644                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17645 41F8           FF76         F6            push	-$A[bp]
17646                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17647 41FB           E8         01C2            call	_biosfn_set_cursor_pos
17648 41FE           83C4                   04  add	sp,*4
17649                                           !BCC_EOS
17650                                           ! 2078  biosfn_set_active_page(0x00);
17651                       00004201            .96:
17652                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17653 4201           8B46         F6            mov	ax,-$A[bp]
17654 4204           40                         inc	ax
17655 4205           8946         F6            mov	-$A[bp],ax
17656                       00004208            .97:
17657                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17658 4208           8B46         F6            mov	ax,-$A[bp]
17659 420B           3D                   0008  cmp	ax,*8
17660 420E           72           E5            jb 	.98
17661                       00004210            .99:
17662                       00004210            .95:
17663                                           ! Debug: list int = const 0 (used reg = )
17664 4210           31C0                       xor	ax,ax
17665 4212           50                         push	ax
17666                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17667 4213           E8         031F            call	_biosfn_set_active_page
17668 4216           44                         inc	sp
17669 4217           44                         inc	sp
17670                                           !BCC_EOS
17671                                           ! 2079  if(vga_modes[line].class==0x00)
17672                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17673 4218           8A46         FE            mov	al,-2[bp]
17674 421B           30E4                       xor	ah,ah
17675 421D           B1                     03  mov	cl,*3
17676 421F           D3E0                       shl	ax,cl
17677 4221           89C3                       mov	bx,ax
17678 4223           81C3                 020D  add	bx,#_vga_modes
17679                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17680 4227           8A47         01            mov	al,1[bx]
17681 422A           84C0                       test	al,al
17682 422C           75           0E            jne 	.9A
17683                       0000422E            .9B:
17684                                           ! 2080   {
17685                                           ! 2081 #asm
17686                                           !BCC_EOS
17687                                           !BCC_ASM
17688                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17689                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17690                       00000008            _biosfn_set_video_mode.theightm1	set	8
17691                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17692                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17693                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17694                       00000014            _biosfn_set_video_mode.line	set	$14
17695                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17696                       00000006            _biosfn_set_video_mode.cheight	set	6
17697                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17698                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17699                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17700                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17701                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17702                       0000000C            _biosfn_set_video_mode.i	set	$C
17703                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17704                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17705                       00000004            .biosfn_set_video_mode.mode	set	4
17706                       00000010            _biosfn_set_video_mode.palette	set	$10
17707                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17708                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17709                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17710                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17711                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17712                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17713                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17714                       00000013            _biosfn_set_video_mode.mmask	set	$13
17715                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17716                                             ;; copy and activate 8x16 font
17717 422E           B8                   1104    mov ax, #0x1104
17718 4231           B3                     00    mov bl, #0x00
17719 4233           CD                     10    int #0x10
17720 4235           B8                   1103    mov ax, #0x1103
17721 4238           B3                     00    mov bl, #0x00
17722 423A           CD                     10    int #0x10
17723                                           ! 2089 endasm
17724                                           !BCC_ENDASM
17725                                           !BCC_EOS
17726                                           ! 2090   }
17727                                           ! 2091 #asm
17728                       0000423C            .9A:
17729                                           !BCC_EOS
17730                                           !BCC_ASM
17731                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17732                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17733                       00000008            _biosfn_set_video_mode.theightm1	set	8
17734                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17735                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17736                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17737                       00000014            _biosfn_set_video_mode.line	set	$14
17738                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17739                       00000006            _biosfn_set_video_mode.cheight	set	6
17740                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17741                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17742                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17743                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17744                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17745                       0000000C            _biosfn_set_video_mode.i	set	$C
17746                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17747                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17748                       00000004            .biosfn_set_video_mode.mode	set	4
17749                       00000010            _biosfn_set_video_mode.palette	set	$10
17750                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17751                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17752                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17753                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17754                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17755                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17756                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17757                       00000013            _biosfn_set_video_mode.mmask	set	$13
17758                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17759                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   423C           1E                           push ds
 +a   423D           31C0                         xor ax, ax
 +a   423F           8ED8                         mov ds, ax
 +a   4241           B8                   1371    mov ax,  #_vgafont8+128*8
 +a   4244           A3         007C              mov 0x1f*4, ax
 +a   4247           B8                   C000    mov ax,  #0xC000
 +a   424A           A3         007E              mov 0x1f*4+2, ax
 +a   424D           1F                           pop ds
17760                                           ! 2093 endasm
17761                                           !BCC_ENDASM
17762                                           !BCC_EOS
17763                                           ! 2094   switch(cheight)
17764 424E           8B46         F0            mov	ax,-$10[bp]
17765                                           ! 2095    {case 8:
17766 4251           E9         003E            br 	.9E
17767                                           ! 2096 #asm
17768                       00004254            .9F:
17769                                           !BCC_EOS
17770                                           !BCC_ASM
17771                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17772                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17773                       00000008            _biosfn_set_video_mode.theightm1	set	8
17774                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17775                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17776                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17777                       00000014            _biosfn_set_video_mode.line	set	$14
17778                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17779                       00000006            _biosfn_set_video_mode.cheight	set	6
17780                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17781                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17782                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17783                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17784                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17785                       0000000C            _biosfn_set_video_mode.i	set	$C
17786                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17787                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17788                       00000004            .biosfn_set_video_mode.mode	set	4
17789                       00000010            _biosfn_set_video_mode.palette	set	$10
17790                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17791                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17792                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17793                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17794                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17795                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17796                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17797                       00000013            _biosfn_set_video_mode.mmask	set	$13
17798                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17799                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   4254           1E                           push ds
 +a   4255           31C0                         xor ax, ax
 +a   4257           8ED8                         mov ds, ax
 +a   4259           B8                   0F71    mov ax,  #_vgafont8
 +a   425C           A3         010C              mov 0x43*4, ax
 +a   425F           B8                   C000    mov ax,  #0xC000
 +a   4262           A3         010E              mov 0x43*4+2, ax
 +a   4265           1F                           pop ds
17800                                           ! 2098 endasm
17801                                           !BCC_ENDASM
17802                                           !BCC_EOS
17803                                           ! 2099      break;
17804 4266           EB           39            jmp .9C
17805                                           !BCC_EOS
17806                                           ! 2100     case 14:
17807                                           ! 2101 #asm
17808                       00004268            .A0:
17809                                           !BCC_EOS
17810                                           !BCC_ASM
17811                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17812                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17813                       00000008            _biosfn_set_video_mode.theightm1	set	8
17814                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17815                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17816                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17817                       00000014            _biosfn_set_video_mode.line	set	$14
17818                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17819                       00000006            _biosfn_set_video_mode.cheight	set	6
17820                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17821                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17822                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17823                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17824                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17825                       0000000C            _biosfn_set_video_mode.i	set	$C
17826                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17827                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17828                       00000004            .biosfn_set_video_mode.mode	set	4
17829                       00000010            _biosfn_set_video_mode.palette	set	$10
17830                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17831                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17832                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17833                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17834                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17835                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17836                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17837                       00000013            _biosfn_set_video_mode.mmask	set	$13
17838                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17839                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   4268           1E                           push ds
 +a   4269           31C0                         xor ax, ax
 +a   426B           8ED8                         mov ds, ax
 +a   426D           B8                   1771    mov ax,  #_vgafont14
 +a   4270           A3         010C              mov 0x43*4, ax
 +a   4273           B8                   C000    mov ax,  #0xC000
 +a   4276           A3         010E              mov 0x43*4+2, ax
 +a   4279           1F                           pop ds
17840                                           ! 2103 endasm
17841                                           !BCC_ENDASM
17842                                           !BCC_EOS
17843                                           ! 2104      break;
17844 427A           EB           25            jmp .9C
17845                                           !BCC_EOS
17846                                           ! 2105     case 16:
17847                                           ! 2106 #asm
17848                       0000427C            .A1:
17849                                           !BCC_EOS
17850                                           !BCC_ASM
17851                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17852                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17853                       00000008            _biosfn_set_video_mode.theightm1	set	8
17854                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17855                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17856                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17857                       00000014            _biosfn_set_video_mode.line	set	$14
17858                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17859                       00000006            _biosfn_set_video_mode.cheight	set	6
17860                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17861                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17862                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17863                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17864                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17865                       0000000C            _biosfn_set_video_mode.i	set	$C
17866                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17867                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17868                       00000004            .biosfn_set_video_mode.mode	set	4
17869                       00000010            _biosfn_set_video_mode.palette	set	$10
17870                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17871                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17872                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17873                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17874                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17875                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17876                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17877                       00000013            _biosfn_set_video_mode.mmask	set	$13
17878                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17879                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   427C           1E                           push ds
 +a   427D           31C0                         xor ax, ax
 +a   427F           8ED8                         mov ds, ax
 +a   4281           B8                   2571    mov ax,  #_vgafont16
 +a   4284           A3         010C              mov 0x43*4, ax
 +a   4287           B8                   C000    mov ax,  #0xC000
 +a   428A           A3         010E              mov 0x43*4+2, ax
 +a   428D           1F                           pop ds
17880                                           ! 2108 endasm
17881                                           !BCC_ENDASM
17882                                           !BCC_EOS
17883                                           ! 2109      break;
17884 428E           EB           11            jmp .9C
17885                                           !BCC_EOS
17886                                           ! 2110    }
17887                                           ! 2111 }
17888 4290           EB           0F            jmp .9C
17889                       00004292            .9E:
17890 4292           2D                   0008  sub	ax,*8
17891 4295           74           BD            je 	.9F
17892 4297           2D                   0006  sub	ax,*6
17893 429A           74           CC            je 	.A0
17894 429C           2D                   0002  sub	ax,*2
17895 429F           74           DB            je 	.A1
17896                       000042A1            .9C:
17897                       FFFFFFE8            ..FFFD	=	-$18
17898 42A1           89EC                       mov	sp,bp
17899 42A3           5D                         pop	bp
17900 42A4           C3                         ret
17901                                           ! 2112 static void biosfn_set_cursor_shape (CH,CL)
17902                                           ! Register BX used in function biosfn_set_video_mode
17903                                           ! 2113 Bit8u CH;Bit8u CL;
17904                       000042A5            _biosfn_set_cursor_shape:
17905                                           !BCC_EOS
17906                                           !BCC_EOS
17907                                           ! 2114 {Bit16u cheight,curs,crtc_addr;
17908                                           !BCC_EOS
17909                                           ! 2115  Bit8u modeset_ctl;
17910                                           !BCC_EOS
17911                                           ! 2116  CH&=0x3f;
17912 42A5           55                         push	bp
17913 42A6           89E5                       mov	bp,sp
17914 42A8           83C4                   F8  add	sp,*-8
17915                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17916 42AB           8A46         04            mov	al,4[bp]
17917 42AE           24                     3F  and	al,*$3F
17918 42B0           8846         04            mov	4[bp],al
17919                                           !BCC_EOS
17920                                           ! 2117  CL&=0x1f;
17921                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17922 42B3           8A46         06            mov	al,6[bp]
17923 42B6           24                     1F  and	al,*$1F
17924 42B8           8846         06            mov	6[bp],al
17925                                           !BCC_EOS
17926                                           ! 2118  curs=(CH<<8)+CL;
17927                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17928 42BB           8A46         04            mov	al,4[bp]
17929 42BE           30E4                       xor	ah,ah
17930 42C0           88C4                       mov	ah,al
17931 42C2           30C0                       xor	al,al
17932                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17933 42C4           0246         06            add	al,6[bp]
17934 42C7           80D4                   00  adc	ah,*0
17935                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17936 42CA           8946         FC            mov	-4[bp],ax
17937                                           !BCC_EOS
17938                                           ! 2119  write_word(0x40,0x60,curs);
17939                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17940 42CD           FF76         FC            push	-4[bp]
17941                                           ! Debug: list int = const $60 (used reg = )
17942 42D0           B8                   0060  mov	ax,*$60
17943 42D3           50                         push	ax
17944                                           ! Debug: list int = const $40 (used reg = )
17945 42D4           B8                   0040  mov	ax,*$40
17946 42D7           50                         push	ax
17947                                           ! Debug: func () void = write_word+0 (used reg = )
17948 42D8           E8         3A7F            call	_write_word
17949 42DB           83C4                   06  add	sp,*6
17950                                           !BCC_EOS
17951                                           ! 2120  modeset_ctl=read_byte(0x40,0x89);
17952                                           ! Debug: list int = const $89 (used reg = )
17953 42DE           B8                   0089  mov	ax,#$89
17954 42E1           50                         push	ax
17955                                           ! Debug: list int = const $40 (used reg = )
17956 42E2           B8                   0040  mov	ax,*$40
17957 42E5           50                         push	ax
17958                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17959 42E6           E8         3A33            call	_read_byte
17960 42E9           83C4                   04  add	sp,*4
17961                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17962 42EC           8846         F9            mov	-7[bp],al
17963                                           !BCC_EOS
17964                                           ! 2121  cheight = read_word(0x40,0x85);
17965                                           ! Debug: list int = const $85 (used reg = )
17966 42EF           B8                   0085  mov	ax,#$85
17967 42F2           50                         push	ax
17968                                           ! Debug: list int = const $40 (used reg = )
17969 42F3           B8                   0040  mov	ax,*$40
17970 42F6           50                         push	ax
17971                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17972 42F7           E8         3A35            call	_read_word
17973 42FA           83C4                   04  add	sp,*4
17974                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17975 42FD           8946         FE            mov	-2[bp],ax
17976                                           !BCC_EOS
17977                                           ! 2122  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17978                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17979 4300           8A46         F9            mov	al,-7[bp]
17980 4303           24                     01  and	al,*1
17981 4305           84C0                       test	al,al
17982 4307           74           66            je  	.A2
17983                       00004309            .A6:
17984                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17985 4309           8B46         FE            mov	ax,-2[bp]
17986 430C           3D                   0008  cmp	ax,*8
17987 430F           76           5E            jbe 	.A2
17988                       00004311            .A5:
17989                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17990 4311           8A46         06            mov	al,6[bp]
17991 4314           3C                     08  cmp	al,*8
17992 4316           73           57            jae 	.A2
17993                       00004318            .A4:
17994                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17995 4318           8A46         04            mov	al,4[bp]
17996 431B           3C                     20  cmp	al,*$20
17997 431D           73           50            jae 	.A2
17998                       0000431F            .A3:
17999                                           ! 2123   {
18000                                           ! 2124    if(CL!=(CH+1))
18001                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18002 431F           8A46         04            mov	al,4[bp]
18003 4322           30E4                       xor	ah,ah
18004                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
18005                                           ! Debug: expression subtree swapping
18006 4324           40                         inc	ax
18007 4325           50                         push	ax
18008 4326           8A46         06            mov	al,6[bp]
18009 4329           30E4                       xor	ah,ah
18010 432B           3B46         F6            cmp	ax,-$A[bp]
18011 432E           8D66         F8            lea	sp,-8[bp]
18012 4331           74           15            je  	.A7
18013                       00004333            .A8:
18014                                           ! 2125     {
18015                                           ! 2126      CH 
18016                                           ! 2126 = ((CH+1) * cheight / 8) -1;
18017                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18018 4333           8A46         04            mov	al,4[bp]
18019 4336           30E4                       xor	ah,ah
18020                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18021 4338           40                         inc	ax
18022 4339           8B4E         FE            mov	cx,-2[bp]
18023 433C           F7E9                       imul	cx
18024                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18025 433E           B1                     03  mov	cl,*3
18026 4340           D3E8                       shr	ax,cl
18027                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18028                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
18029 4342           48                         dec	ax
18030 4343           8846         04            mov	4[bp],al
18031                                           !BCC_EOS
18032                                           ! 2127     }
18033                                           ! 2128    else
18034                                           ! 2129     {
18035 4346           EB           14            jmp .A9
18036                       00004348            .A7:
18037                                           ! 2130      CH = ((CL+1) * cheight / 8) - 2;
18038                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18039 4348           8A46         06            mov	al,6[bp]
18040 434B           30E4                       xor	ah,ah
18041                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18042 434D           40                         inc	ax
18043 434E           8B4E         FE            mov	cx,-2[bp]
18044 4351           F7E9                       imul	cx
18045                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18046 4353           B1                     03  mov	cl,*3
18047 4355           D3E8                       shr	ax,cl
18048                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
18049                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
18050 4357           48                         dec	ax
18051 4358           48                         dec	ax
18052 4359           8846         04            mov	4[bp],al
18053                                           !BCC_EOS
18054                                           ! 2131     }
18055                                           ! 2132    CL = ((CL+1) * cheight / 8) - 1;
18056                       0000435C            .A9:
18057                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18058 435C           8A46         06            mov	al,6[bp]
18059 435F           30E4                       xor	ah,ah
18060                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18061 4361           40                         inc	ax
18062 4362           8B4E         FE            mov	cx,-2[bp]
18063 4365           F7E9                       imul	cx
18064                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18065 4367           B1                     03  mov	cl,*3
18066 4369           D3E8                       shr	ax,cl
18067                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18068                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
18069 436B           48                         dec	ax
18070 436C           8846         06            mov	6[bp],al
18071                                           !BCC_EOS
18072                                           ! 2133   }
18073                                           ! 2134  crtc_addr=read_word(0x40,0x63);
18074                       0000436F            .A2:
18075                                           ! Debug: list int = const $63 (used reg = )
18076 436F           B8                   0063  mov	ax,*$63
18077 4372           50                         push	ax
18078                                           ! Debug: list int = const $40 (used reg = )
18079 4373           B8                   0040  mov	ax,*$40
18080 4376           50                         push	ax
18081                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18082 4377           E8         39B5            call	_read_word
18083 437A           83C4                   04  add	sp,*4
18084                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
18085 437D           8946         FA            mov	-6[bp],ax
18086                                           !BCC_EOS
18087                                           ! 2135  outb(crtc_addr,0x0a);
18088                                           ! Debug: list int = const $A (used reg = )
18089 4380           B8                   000A  mov	ax,*$A
18090 4383           50                         push	ax
18091                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18092 4384           FF76         FA            push	-6[bp]
18093                                           ! Debug: func () void = outb+0 (used reg = )
18094 4387           E8         39FE            call	_outb
18095 438A           83C4                   04  add	sp,*4
18096                                           !BCC_EOS
18097                                           ! 2136  outb(crtc_addr+1,CH);
18098                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18099 438D           8A46         04            mov	al,4[bp]
18100 4390           30E4                       xor	ah,ah
18101 4392           50                         push	ax
18102                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18103 4393           8B46         FA            mov	ax,-6[bp]
18104                                           ! Debug: list unsigned int = ax+1 (used reg = )
18105 4396           40                         inc	ax
18106 4397           50                         push	ax
18107                                           ! Debug: func () void = outb+0 (used reg = )
18108 4398           E8         39ED            call	_outb
18109 439B           83C4                   04  add	sp,*4
18110                                           !BCC_EOS
18111                                           ! 2137  outb(crtc_addr,0x0b);
18112                                           ! Debug: list int = const $B (used reg = )
18113 439E           B8                   000B  mov	ax,*$B
18114 43A1           50                         push	ax
18115                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18116 43A2           FF76         FA            push	-6[bp]
18117                                           ! Debug: func () void = outb+0 (used reg = )
18118 43A5           E8         39E0            call	_outb
18119 43A8           83C4                   04  add	sp,*4
18120                                           !BCC_EOS
18121                                           ! 2138  outb(crtc_addr+1,CL);
18122                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18123 43AB           8A46         06            mov	al,6[bp]
18124 43AE           30E4                       xor	ah,ah
18125 43B0           50                         push	ax
18126                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18127 43B1           8B46         FA            mov	ax,-6[bp]
18128                                           ! Debug: list unsigned int = ax+1 (used reg = )
18129 43B4           40                         inc	ax
18130 43B5           50                         push	ax
18131                                           ! Debug: func () void = outb+0 (used reg = )
18132 43B6           E8         39CF            call	_outb
18133 43B9           83C4                   04  add	sp,*4
18134                                           !BCC_EOS
18135                                           ! 2139 }
18136 43BC           89EC                       mov	sp,bp
18137 43BE           5D                         pop	bp
18138 43BF           C3                         ret
18139                                           ! 2140 static void biosfn_set_cursor_pos (page, cursor)
18140                                           ! 2141 Bit8u page;Bit16u cursor;
18141                       000043C0            _biosfn_set_cursor_pos:
18142                                           !BCC_EOS
18143                                           !BCC_EOS
18144                                           ! 2142 {
18145                                           ! 2143  Bit8u xcurs,ycurs,current;
18146                                           !BCC_EOS
18147                                           ! 2144  Bit16u nbcols,nbrows,address,crtc_addr;
18148                                           !BCC_EOS
18149                                           ! 2145  if(page>7)return;
18150 43C0           55                         push	bp
18151 43C1           89E5                       mov	bp,sp
18152 43C3           83C4                   F4  add	sp,*-$C
18153                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18154 43C6           8A46         04            mov	al,4[bp]
18155 43C9           3C                     07  cmp	al,*7
18156 43CB           76           04            jbe 	.AA
18157                       000043CD            .AB:
18158 43CD           89EC                       mov	sp,bp
18159 43CF           5D                         pop	bp
18160 43D0           C3                         ret
18161                                           !BCC_EOS
18162                                           ! 2146  write_word(0x40, 0x50 +2*page, cursor);
18163                       000043D1            .AA:
18164                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18165 43D1           FF76         06            push	6[bp]
18166                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18167                                           ! Debug: expression subtree swapping
18168 43D4           8A46         04            mov	al,4[bp]
18169 43D7           30E4                       xor	ah,ah
18170 43D9           D1E0                       shl	ax,*1
18171                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18172                                           ! Debug: expression subtree swapping
18173                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18174 43DB           05                   0050  add	ax,*$50
18175 43DE           50                         push	ax
18176                                           ! Debug: list int = const $40 (used reg = )
18177 43DF           B8                   0040  mov	ax,*$40
18178 43E2           50                         push	ax
18179                                           ! Debug: func () void = write_word+0 (used reg = )
18180 43E3           E8         3974            call	_write_word
18181 43E6           83C4                   06  add	sp,*6
18182                                           !BCC_EOS
18183                                           ! 2147  current=read_byte(0x40,0x62);
18184                                           ! Debug: list int = const $62 (used reg = )
18185 43E9           B8                   0062  mov	ax,*$62
18186 43EC           50                         push	ax
18187                                           ! Debug: list int = const $40 (used reg = )
18188 43ED           B8                   0040  mov	ax,*$40
18189 43F0           50                         push	ax
18190                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18191 43F1           E8         3928            call	_read_byte
18192 43F4           83C4                   04  add	sp,*4
18193                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18194 43F7           8846         FD            mov	-3[bp],al
18195                                           !BCC_EOS
18196                                           ! 2148  if(page==current)
18197                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18198 43FA           8A46         04            mov	al,4[bp]
18199 43FD           3A46         FD            cmp	al,-3[bp]
18200 4400         0F85         00B8            bne 	.AC
18201                       00004404            .AD:
18202                                           ! 2149   {
18203                                           ! 2150    nbcols=read_word(0x40,0x4A);
18204                                           ! Debug: list int = const $4A (used reg = )
18205 4404           B8                   004A  mov	ax,*$4A
18206 4407           50                         push	ax
18207                                           ! Debug: list int = const $40 (used reg = )
18208 4408           B8                   0040  mov	ax,*$40
18209 440B           50                         push	ax
18210                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18211 440C           E8         3920            call	_read_word
18212 440F           83C4                   04  add	sp,*4
18213                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18214 4412           8946         FA            mov	-6[bp],ax
18215                                           !BCC_EOS
18216                                           ! 2151    nbrows=read_byte(0x40,0x84)+1;
18217                                           ! Debug: list int = const $84 (used reg = )
18218 4415           B8                   0084  mov	ax,#$84
18219 4418           50                         push	ax
18220                                           ! Debug: list int = const $40 (used reg = )
18221 4419           B8                   0040  mov	ax,*$40
18222 441C           50                         push	ax
18223                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18224 441D           E8         38FC            call	_read_byte
18225 4420           83C4                   04  add	sp,*4
18226                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18227 4423           30E4                       xor	ah,ah
18228                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18229 4425           40                         inc	ax
18230 4426           8946         F8            mov	-8[bp],ax
18231                                           !BCC_EOS
18232                                           ! 2152    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18233                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18234 4429           8A46         06            mov	al,6[bp]
18235                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18236 442C           8846         FF            mov	-1[bp],al
18237                                           !BCC_EOS
18238                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18239 442F           8B46         06            mov	ax,6[bp]
18240 4432           30C0                       xor	al,al
18241                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18242 4434           88E0                       mov	al,ah
18243 4436           30E4                       xor	ah,ah
18244                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18245 4438           8846         FE            mov	-2[bp],al
18246                                           !BCC_EOS
18247                                           ! 2153    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18248                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18249 443B           8A46         FE            mov	al,-2[bp]
18250 443E           30E4                       xor	ah,ah
18251 4440           8B4E         FA            mov	cx,-6[bp]
18252 4443           F7E9                       imul	cx
18253 4445           50                         push	ax
18254                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18255 4446           8B46         FA            mov	ax,-6[bp]
18256 4449           8B4E         F8            mov	cx,-8[bp]
18257 444C           F7E9                       imul	cx
18258                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18259 444E           0C                     FF  or	al,#$FF
18260                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18261                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18262 4450           89C3                       mov	bx,ax
18263 4452           8A46         04            mov	al,4[bp]
18264 4455           30E4                       xor	ah,ah
18265 4457           93                         xchg	ax,bx
18266 4458           40                         inc	ax
18267 4459           89D9                       mov	cx,bx
18268 445B           F7E9                       imul	cx
18269                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18270 445D           0246         FF            add	al,-1[bp]
18271 4460           80D4                   00  adc	ah,*0
18272                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18273 4463           0346         F2            add	ax,-$E[bp]
18274 4466           44                         inc	sp
18275 4467           44                         inc	sp
18276                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18277 4468           8946         F6            mov	-$A[bp],ax
18278                                           !BCC_EOS
18279                                           ! 2154    crtc_addr=read_word(0x40,0x63);
18280                                           ! Debug: list int = const $63 (used reg = )
18281 446B           B8                   0063  mov	ax,*$63
18282 446E           50                         push	ax
18283                                           ! Debug: list int = const $40 (used reg = )
18284 446F           B8                   0040  mov	ax,*$40
18285 4472           50                         push	ax
18286                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18287 4473           E8         38B9            call	_read_word
18288 4476           83C4                   04  add	sp,*4
18289                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18290 4479           8946         F4            mov	-$C[bp],ax
18291                                           !BCC_EOS
18292                                           ! 2155    outb(crtc_addr,0x0e);
18293                                           ! Debug: list int = const $E (used reg = )
18294 447C           B8                   000E  mov	ax,*$E
18295 447F           50                         push	ax
18296                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18297 4480           FF76         F4            push	-$C[bp]
18298                                           ! Debug: func () void = outb+0 (used reg = )
18299 4483           E8         3902            call	_outb
18300 4486           83C4                   04  add	sp,*4
18301                                           !BCC_EOS
18302                                           ! 2156    outb(crtc_addr+1,(address&0xff00)>>8);
18303                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18304 4489           8B46         F6            mov	ax,-$A[bp]
18305 448C           30C0                       xor	al,al
18306                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18307 448E           88E0                       mov	al,ah
18308 4490           30E4                       xor	ah,ah
18309                                           ! Debug: list unsigned int = ax+0 (used reg = )
18310 4492           50                         push	ax
18311                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18312 4493           8B46         F4            mov	ax,-$C[bp]
18313                                           ! Debug: list unsigned int = ax+1 (used reg = )
18314 4496           40                         inc	ax
18315 4497           50                         push	ax
18316                                           ! Debug: func () void = outb+0 (used reg = )
18317 4498           E8         38ED            call	_outb
18318 449B           83C4                   04  add	sp,*4
18319                                           !BCC_EOS
18320                                           ! 2157    outb(crtc_addr,0x0f);
18321                                           ! Debug: list int = const $F (used reg = )
18322 449E           B8                   000F  mov	ax,*$F
18323 44A1           50                         push	ax
18324                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18325 44A2           FF76         F4            push	-$C[bp]
18326                                           ! Debug: func () void = outb+0 (used reg = )
18327 44A5           E8         38E0            call	_outb
18328 44A8           83C4                   04  add	sp,*4
18329                                           !BCC_EOS
18330                                           ! 2158    outb(crtc_addr+1,address&0x00ff);
18331                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18332 44AB           8A46         F6            mov	al,-$A[bp]
18333                                           ! Debug: list unsigned char = al+0 (used reg = )
18334 44AE           30E4                       xor	ah,ah
18335 44B0           50                         push	ax
18336                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18337 44B1           8B46         F4            mov	ax,-$C[bp]
18338                                           ! Debug: list unsigned int = ax+1 (used reg = )
18339 44B4           40                         inc	ax
18340 44B5           50                         push	ax
18341                                           ! Debug: func () void = outb+0 (used reg = )
18342 44B6           E8         38CF            call	_outb
18343 44B9           83C4                   04  add	sp,*4
18344                                           !BCC_EOS
18345                                           ! 2159   }
18346                                           ! 2160 }
18347                       000044BC            .AC:
18348 44BC           89EC                       mov	sp,bp
18349 44BE           5D                         pop	bp
18350 44BF           C3                         ret
18351                                           ! 2161 static void biosfn_get_cursor_pos (page,shape, pos)
18352                                           ! Register BX used in function biosfn_set_cursor_pos
18353                                           ! 2162 Bit8u page;Bit16u *shape;Bit16u *pos;
18354                       000044C0            _biosfn_get_cursor_pos:
18355                                           !BCC_EOS
18356                                           !BCC_EOS
18357                                           !BCC_EOS
18358                                           ! 2163 {
18359                                           ! 2164  Bit16u ss=get_SS();
18360 44C0           55                         push	bp
18361 44C1           89E5                       mov	bp,sp
18362 44C3           4C                         dec	sp
18363 44C4           4C                         dec	sp
18364                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18365 44C5           E8         38E0            call	_get_SS
18366                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18367 44C8           8946         FE            mov	-2[bp],ax
18368                                           !BCC_EOS
18369                                           ! 2165  write_word(ss, shape, 0);
18370                                           ! Debug: list int = const 0 (used reg = )
18371 44CB           31C0                       xor	ax,ax
18372 44CD           50                         push	ax
18373                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18374 44CE           FF76         06            push	6[bp]
18375                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18376 44D1           FF76         FE            push	-2[bp]
18377                                           ! Debug: func () void = write_word+0 (used reg = )
18378 44D4           E8         3883            call	_write_word
18379 44D7           83C4                   06  add	sp,*6
18380                                           !BCC_EOS
18381                                           ! 2166  write_word(ss, pos, 0);
18382                                           ! Debug: list int = const 0 (used reg = )
18383 44DA           31C0                       xor	ax,ax
18384 44DC           50                         push	ax
18385                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18386 44DD           FF76         08            push	8[bp]
18387                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18388 44E0           FF76         FE            push	-2[bp]
18389                                           ! Debug: func () void = write_word+0 (used reg = )
18390 44E3           E8         3874            call	_write_word
18391 44E6           83C4                   06  add	sp,*6
18392                                           !BCC_EOS
18393                                           ! 2167  if(page>7)return;
18394                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18395 44E9           8A46         04            mov	al,4[bp]
18396 44EC           3C                     07  cmp	al,*7
18397 44EE           76           04            jbe 	.AE
18398                       000044F0            .AF:
18399 44F0           89EC                       mov	sp,bp
18400 44F2           5D                         pop	bp
18401 44F3           C3                         ret
18402                                           !BCC_EOS
18403                                           ! 2168  write_word(ss,shape,read_word(0x40,0x60));
18404                       000044F4            .AE:
18405                                           ! Debug: list int = const $60 (used reg = )
18406 44F4           B8                   0060  mov	ax,*$60
18407 44F7           50                         push	ax
18408                                           ! Debug: list int = const $40 (used reg = )
18409 44F8           B8                   0040  mov	ax,*$40
18410 44FB           50                         push	ax
18411                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18412 44FC           E8         3830            call	_read_word
18413 44FF           83C4                   04  add	sp,*4
18414                                           ! Debug: list unsigned short = ax+0 (used reg = )
18415 4502           50                         push	ax
18416                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18417 4503           FF76         06            push	6[bp]
18418                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18419 4506           FF76         FE            push	-2[bp]
18420                                           ! Debug: func () void = write_word+0 (used reg = )
18421 4509           E8         384E            call	_write_word
18422 450C           83C4                   06  add	sp,*6
18423                                           !BCC_EOS
18424                                           ! 2169  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18425                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18426 450F           8A46         04            mov	al,4[bp]
18427 4512           30E4                       xor	ah,ah
18428 4514           D1E0                       shl	ax,*1
18429                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18430                                           ! Debug: expression subtree swapping
18431                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18432 4516           05                   0050  add	ax,*$50
18433 4519           50                         push	ax
18434                                           ! Debug: list int = const $40 (used reg = )
18435 451A           B8                   0040  mov	ax,*$40
18436 451D           50                         push	ax
18437                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18438 451E           E8         380E            call	_read_word
18439 4521           83C4                   04  add	sp,*4
18440                                           ! Debug: list unsigned short = ax+0 (used reg = )
18441 4524           50                         push	ax
18442                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18443 4525           FF76         08            push	8[bp]
18444                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18445 4528           FF76         FE            push	-2[bp]
18446                                           ! Debug: func () void = write_word+0 (used reg = )
18447 452B           E8         382C            call	_write_word
18448 452E           83C4                   06  add	sp,*6
18449                                           !BCC_EOS
18450                                           ! 2170 }
18451 4531           89EC                       mov	sp,bp
18452 4533           5D                         pop	bp
18453 4534           C3                         ret
18454                                           ! 2171 static void biosfn_set_active_page (page)
18455                                           ! 2172 Bit8u page;
18456                       00004535            _biosfn_set_active_page:
18457                                           !BCC_EOS
18458                                           ! 2173 {
18459                                           ! 2174  Bit16u cursor,dummy,crtc_addr;
18460                                           !BCC_EOS
18461                                           ! 2175  Bit16u nbcols,nbrows,address;
18462                                           !BCC_EOS
18463                                           ! 2176  Bit8u mode,line;
18464                                           !BCC_EOS
18465                                           ! 2177  if(page>7)return;
18466 4535           55                         push	bp
18467 4536           89E5                       mov	bp,sp
18468 4538           83C4                   F2  add	sp,*-$E
18469                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18470 453B           8A46         04            mov	al,4[bp]
18471 453E           3C                     07  cmp	al,*7
18472 4540           76           04            jbe 	.B0
18473                       00004542            .B1:
18474 4542           89EC                       mov	sp,bp
18475 4544           5D                         pop	bp
18476 4545           C3                         ret
18477                                           !BCC_EOS
18478                                           ! 2178  mode=read_byte(0x40,0x49);
18479                       00004546            .B0:
18480                                           ! Debug: list int = const $49 (used reg = )
18481 4546           B8                   0049  mov	ax,*$49
18482 4549           50                         push	ax
18483                                           ! Debug: list int = const $40 (used reg = )
18484 454A           B8                   0040  mov	ax,*$40
18485 454D           50                         push	ax
18486                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18487 454E           E8         37CB            call	_read_byte
18488 4551           83C4                   04  add	sp,*4
18489                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18490 4554           8846         F3            mov	-$D[bp],al
18491                                           !BCC_EOS
18492                                           ! 2179  line=find_vga_entry(mode);
18493                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18494 4557           8A46         F3            mov	al,-$D[bp]
18495 455A           30E4                       xor	ah,ah
18496 455C           50                         push	ax
18497                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18498 455D           E8         36D0            call	_find_vga_entry
18499 4560           44                         inc	sp
18500 4561           44                         inc	sp
18501                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18502 4562           8846         F2            mov	-$E[bp],al
18503                                           !BCC_EOS
18504                                           ! 2180  if(line==0xFF)return;
18505                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18506 4565           8A46         F2            mov	al,-$E[bp]
18507 4568           3C                     FF  cmp	al,#$FF
18508 456A           75           04            jne 	.B2
18509                       0000456C            .B3:
18510 456C           89EC                       mov	sp,bp
18511 456E           5D                         pop	bp
18512 456F           C3                         ret
18513                                           !BCC_EOS
18514                                           ! 2181  biosfn_get_cursor_pos(page,&dummy,&cursor);
18515                       00004570            .B2:
18516                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18517 4570           8D5E         FE            lea	bx,-2[bp]
18518 4573           53                         push	bx
18519                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18520 4574           8D5E         FC            lea	bx,-4[bp]
18521 4577           53                         push	bx
18522                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18523 4578           8A46         04            mov	al,4[bp]
18524 457B           30E4                       xor	ah,ah
18525 457D           50                         push	ax
18526                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18527 457E           E8         FF3F            call	_biosfn_get_cursor_pos
18528 4581           83C4                   06  add	sp,*6
18529                                           !BCC_EOS
18530                                           ! 2182  if(vga_modes[line].class==0x00)
18531                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18532 4584           8A46         F2            mov	al,-$E[bp]
18533 4587           30E4                       xor	ah,ah
18534 4589           B1                     03  mov	cl,*3
18535 458B           D3E0                       shl	ax,cl
18536 458D           89C3                       mov	bx,ax
18537 458F           81C3                 020D  add	bx,#_vga_modes
18538                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18539 4593           8A47         01            mov	al,1[bx]
18540 4596           84C0                       test	al,al
18541 4598           75           6E            jne 	.B4
18542                       0000459A            .B5:
18543                                           ! 2183   {
18544                                           ! 2184    nbcols=read_word(0x40,0x4A);
18545                                           ! Debug: list int = const $4A (used reg = )
18546 459A           B8                   004A  mov	ax,*$4A
18547 459D           50                         push	ax
18548                                           ! Debug: list int = const $40 (used reg = )
18549 459E           B8                   0040  mov	ax,*$40
18550 45A1           50                         push	ax
18551                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18552 45A2           E8         378A            call	_read_word
18553 45A5           83C4                   04  add	sp,*4
18554                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18555 45A8           8946         F8            mov	-8[bp],ax
18556                                           !BCC_EOS
18557                                           ! 2185    nbrows=read_byte(0x40,0x84)+1;
18558                                           ! Debug: list int = const $84 (used reg = )
18559 45AB           B8                   0084  mov	ax,#$84
18560 45AE           50                         push	ax
18561                                           ! Debug: list int = const $40 (used reg = )
18562 45AF           B8                   0040  mov	ax,*$40
18563 45B2           50                         push	ax
18564                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18565 45B3           E8         3766            call	_read_byte
18566 45B6           83C4                   04  add	sp,*4
18567                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18568 45B9           30E4                       xor	ah,ah
18569                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18570 45BB           40                         inc	ax
18571 45BC           8946         F6            mov	-$A[bp],ax
18572                                           !BCC_EOS
18573                                           ! 2186    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18574                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18575 45BF           8B46         F8            mov	ax,-8[bp]
18576 45C2           8B4E         F6            mov	cx,-$A[bp]
18577 45C5           F7E9                       imul	cx
18578                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18579 45C7           D1E0                       shl	ax,*1
18580                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18581 45C9           0C                     FF  or	al,#$FF
18582                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18583                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18584 45CB           89C3                       mov	bx,ax
18585 45CD           8A46         04            mov	al,4[bp]
18586 45D0           30E4                       xor	ah,ah
18587 45D2           93                         xchg	ax,bx
18588 45D3           40                         inc	ax
18589 45D4           89D9                       mov	cx,bx
18590 45D6           F7E9                       imul	cx
18591                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18592 45D8           8946         F4            mov	-$C[bp],ax
18593                                           !BCC_EOS
18594                                           ! 2187    write_word(0x40,0x4E,address);
18595                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18596 45DB           FF76         F4            push	-$C[bp]
18597                                           ! Debug: list int = const $4E (used reg = )
18598 45DE           B8                   004E  mov	ax,*$4E
18599 45E1           50                         push	ax
18600                                           ! Debug: list int = const $40 (used reg = )
18601 45E2           B8                   0040  mov	ax,*$40
18602 45E5           50                         push	ax
18603                                           ! Debug: func () void = write_word+0 (used reg = )
18604 45E6           E8         3771            call	_write_word
18605 45E9           83C4                   06  add	sp,*6
18606                                           !BCC_EOS
18607                                           ! 2188    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18608                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18609 45EC           8B46         F8            mov	ax,-8[bp]
18610 45EF           8B4E         F6            mov	cx,-$A[bp]
18611 45F2           F7E9                       imul	cx
18612                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18613 45F4           0C                     FF  or	al,#$FF
18614                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18615                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18616 45F6           89C3                       mov	bx,ax
18617 45F8           8A46         04            mov	al,4[bp]
18618 45FB           30E4                       xor	ah,ah
18619 45FD           93                         xchg	ax,bx
18620 45FE           40                         inc	ax
18621 45FF           89D9                       mov	cx,bx
18622 4601           F7E9                       imul	cx
18623                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18624 4603           8946         F4            mov	-$C[bp],ax
18625                                           !BCC_EOS
18626                                           ! 2189   }
18627                                           ! 2190  else
18628                                           ! 2191   {
18629 4606           EB           24            jmp .B6
18630                       00004608            .B4:
18631                                           ! 2192    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18632                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18633 4608           8A46         F2            mov	al,-$E[bp]
18634 460B           30E4                       xor	ah,ah
18635 460D           89C3                       mov	bx,ax
18636                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18637 460F           8A87       028D            mov	al,_line_to_vpti[bx]
18638 4613           30E4                       xor	ah,ah
18639 4615           B1                     06  mov	cl,*6
18640 4617           D3E0                       shl	ax,cl
18641 4619           89C3                       mov	bx,ax
18642 461B           81C3                 02A1  add	bx,#_video_param_table
18643                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18644                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18645                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18646 461F           8A46         04            mov	al,4[bp]
18647 4622           30E4                       xor	ah,ah
18648 4624           8B4F         03            mov	cx,3[bx]
18649 4627           F7E9                       imul	cx
18650                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18651 4629           8946         F4            mov	-$C[bp],ax
18652                                           !BCC_EOS
18653                                           ! 2193   }
18654                                           ! 2194  crtc_addr=read_word(0x40,0x63);
18655                       0000462C            .B6:
18656                                           ! Debug: list int = const $63 (used reg = )
18657 462C           B8                   0063  mov	ax,*$63
18658 462F           50                         push	ax
18659                                           ! Debug: list int = const $40 (used reg = )
18660 4630           B8                   0040  mov	ax,*$40
18661 4633           50                         push	ax
18662                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18663 4634           E8         36F8            call	_read_word
18664 4637           83C4                   04  add	sp,*4
18665                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18666 463A           8946         FA            mov	-6[bp],ax
18667                                           !BCC_EOS
18668                                           ! 2195  outb(crtc_addr,0x0c);
18669                                           ! Debug: list int = const $C (used reg = )
18670 463D           B8                   000C  mov	ax,*$C
18671 4640           50                         push	ax
18672                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18673 4641           FF76         FA            push	-6[bp]
18674                                           ! Debug: func () void = outb+0 (used reg = )
18675 4644           E8         3741            call	_outb
18676 4647           83C4                   04  add	sp,*4
18677                                           !BCC_EOS
18678                                           ! 2196  outb(crtc_addr+1,(address&0xff00)>>8);
18679                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18680 464A           8B46         F4            mov	ax,-$C[bp]
18681 464D           30C0                       xor	al,al
18682                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18683 464F           88E0                       mov	al,ah
18684 4651           30E4                       xor	ah,ah
18685                                           ! Debug: list unsigned int = ax+0 (used reg = )
18686 4653           50                         push	ax
18687                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18688 4654           8B46         FA            mov	ax,-6[bp]
18689                                           ! Debug: list unsigned int = ax+1 (used reg = )
18690 4657           40                         inc	ax
18691 4658           50                         push	ax
18692                                           ! Debug: func () void = outb+0 (used reg = )
18693 4659           E8         372C            call	_outb
18694 465C           83C4                   04  add	sp,*4
18695                                           !BCC_EOS
18696                                           ! 2197  outb(crtc_addr,0x0d);
18697                                           ! Debug: list int = const $D (used reg = )
18698 465F           B8                   000D  mov	ax,*$D
18699 4662           50                         push	ax
18700                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18701 4663           FF76         FA            push	-6[bp]
18702                                           ! Debug: func () void = outb+0 (used reg = )
18703 4666           E8         371F            call	_outb
18704 4669           83C4                   04  add	sp,*4
18705                                           !BCC_EOS
18706                                           ! 2198  outb(crtc_addr+1,address&0x00ff);
18707                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18708 466C           8A46         F4            mov	al,-$C[bp]
18709                                           ! Debug: list unsigned char = al+0 (used reg = )
18710 466F           30E4                       xor	ah,ah
18711 4671           50                         push	ax
18712                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18713 4672           8B46         FA            mov	ax,-6[bp]
18714                                           ! Debug: list unsigned int = ax+1 (used reg = )
18715 4675           40                         inc	ax
18716 4676           50                         push	ax
18717                                           ! Debug: func () void = outb+0 (used reg = )
18718 4677           E8         370E            call	_outb
18719 467A           83C4                   04  add	sp,*4
18720                                           !BCC_EOS
18721                                           ! 2199  write_byte(0x40,0x62,page);
18722                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18723 467D           8A46         04            mov	al,4[bp]
18724 4680           30E4                       xor	ah,ah
18725 4682           50                         push	ax
18726                                           ! Debug: list int = const $62 (used reg = )
18727 4683           B8                   0062  mov	ax,*$62
18728 4686           50                         push	ax
18729                                           ! Debug: list int = const $40 (used reg = )
18730 4687           B8                   0040  mov	ax,*$40
18731 468A           50                         push	ax
18732                                           ! Debug: func () void = write_byte+0 (used reg = )
18733 468B           E8         36B4            call	_write_byte
18734 468E           83C4                   06  add	sp,*6
18735                                           !BCC_EOS
18736                                           ! 2200  printf("Set active page %02x address %04x\n",page,address);
18737                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18738 4691           FF76         F4            push	-$C[bp]
18739                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18740 4694           8A46         04            mov	al,4[bp]
18741 4697           30E4                       xor	ah,ah
18742 4699           50                         push	ax
18743                                           ! Debug: list * char = .B7+0 (used reg = )
18744 469A           BB                   A0FA  mov	bx,#.B7
18745 469D           53                         push	bx
18746                                           ! Debug: func () void = printf+0 (used reg = )
18747 469E           E8         3726            call	_printf
18748 46A1           83C4                   06  add	sp,*6
18749                                           !BCC_EOS
18750                                           ! 2201  biosfn_set_cursor_pos(page,cursor);
18751                                           ! 2201 
18752                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18753 46A4           FF76         FE            push	-2[bp]
18754                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18755 46A7           8A46         04            mov	al,4[bp]
18756 46AA           30E4                       xor	ah,ah
18757 46AC           50                         push	ax
18758                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18759 46AD           E8         FD10            call	_biosfn_set_cursor_pos
18760 46B0           83C4                   04  add	sp,*4
18761                                           !BCC_EOS
18762                                           ! 2202 }
18763 46B3           89EC                       mov	sp,bp
18764 46B5           5D                         pop	bp
18765 46B6           C3                         ret
18766                                           ! 2203 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18767                                           ! Register BX used in function biosfn_set_active_page
18768                                           ! 2204 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18769                       000046B7            _vgamem_copy_pl4:
18770                                           !BCC_EOS
18771                                           !BCC_EOS
18772                                           !BCC_EOS
18773                                           !BCC_EOS
18774                                           !BCC_EOS
18775                                           !BCC_EOS
18776                                           ! 2205 {
18777                                           ! 2206  Bit16u src,dest;
18778                                           !BCC_EOS
18779                                           ! 2207  Bit8u i;
18780                                           !BCC_EOS
18781                                           ! 2208  src=ysrc*cheight*nbcols+xstart;
18782 46B7           55                         push	bp
18783 46B8           89E5                       mov	bp,sp
18784 46BA           83C4                   FA  add	sp,*-6
18785                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18786 46BD           8A46         0E            mov	al,$E[bp]
18787 46C0           30E4                       xor	ah,ah
18788 46C2           89C3                       mov	bx,ax
18789 46C4           8A46         06            mov	al,6[bp]
18790 46C7           30E4                       xor	ah,ah
18791 46C9           89D9                       mov	cx,bx
18792 46CB           F7E9                       imul	cx
18793                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18794 46CD           89C3                       mov	bx,ax
18795 46CF           8A46         0C            mov	al,$C[bp]
18796 46D2           30E4                       xor	ah,ah
18797 46D4           93                         xchg	ax,bx
18798 46D5           89D9                       mov	cx,bx
18799 46D7           F7E9                       imul	cx
18800                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18801 46D9           0246         04            add	al,4[bp]
18802 46DC           80D4                   00  adc	ah,*0
18803                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18804 46DF           8946         FE            mov	-2[bp],ax
18805                                           !BCC_EOS
18806                                           ! 2209  dest=ydest*cheight*nbcols+xstart;
18807                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18808 46E2           8A46         0E            mov	al,$E[bp]
18809 46E5           30E4                       xor	ah,ah
18810 46E7           89C3                       mov	bx,ax
18811 46E9           8A46         08            mov	al,8[bp]
18812 46EC           30E4                       xor	ah,ah
18813 46EE           89D9                       mov	cx,bx
18814 46F0           F7E9                       imul	cx
18815                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18816 46F2           89C3                       mov	bx,ax
18817 46F4           8A46         0C            mov	al,$C[bp]
18818 46F7           30E4                       xor	ah,ah
18819 46F9           93                         xchg	ax,bx
18820 46FA           89D9                       mov	cx,bx
18821 46FC           F7E9                       imul	cx
18822                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18823 46FE           0246         04            add	al,4[bp]
18824 4701           80D4                   00  adc	ah,*0
18825                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18826 4704           8946         FC            mov	-4[bp],ax
18827                                           !BCC_EOS
18828                                           ! 2210  outw(0x3ce, 0x0105);
18829                                           ! Debug: list int = const $105 (used reg = )
18830 4707           B8                   0105  mov	ax,#$105
18831 470A           50                         push	ax
18832                                           ! Debug: list int = const $3CE (used reg = )
18833 470B           B8                   03CE  mov	ax,#$3CE
18834 470E           50                         push	ax
18835                                           ! Debug: func () void = outw+0 (used reg = )
18836 470F           E8         3686            call	_outw
18837 4712           83C4                   04  add	sp,*4
18838                                           !BCC_EOS
18839                                           ! 2211  for(i=0;i<cheight;i++)
18840                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18841 4715           30C0                       xor	al,al
18842 4717           8846         FB            mov	-5[bp],al
18843                                           !BCC_EOS
18844                                           !BCC_EOS
18845                                           ! 2212   {
18846 471A           EB           43            jmp .BA
18847                       0000471C            .BB:
18848                                           ! 2213    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18849                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18850 471C           8A46         0A            mov	al,$A[bp]
18851 471F           30E4                       xor	ah,ah
18852 4721           50                         push	ax
18853                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18854 4722           8A46         0C            mov	al,$C[bp]
18855 4725           30E4                       xor	ah,ah
18856 4727           89C3                       mov	bx,ax
18857 4729           8A46         FB            mov	al,-5[bp]
18858 472C           30E4                       xor	ah,ah
18859 472E           89D9                       mov	cx,bx
18860 4730           F7E9                       imul	cx
18861                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18862                                           ! Debug: expression subtree swapping
18863 4732           0346         FE            add	ax,-2[bp]
18864                                           ! Debug: list unsigned int = ax+0 (used reg = )
18865 4735           50                         push	ax
18866                                           ! Debug: list unsigned int = const $A000 (used reg = )
18867 4736           B8                   A000  mov	ax,#$A000
18868 4739           50                         push	ax
18869                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18870 473A           8A46         0C            mov	al,$C[bp]
18871 473D           30E4                       xor	ah,ah
18872 473F           89C3                       mov	bx,ax
18873 4741           8A46         FB            mov	al,-5[bp]
18874 4744           30E4                       xor	ah,ah
18875 4746           89D9                       mov	cx,bx
18876 4748           F7E9                       imul	cx
18877                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18878                                           ! Debug: expression subtree swapping
18879 474A           0346         FC            add	ax,-4[bp]
18880                                           ! Debug: list unsigned int = ax+0 (used reg = )
18881 474D           50                         push	ax
18882                                           ! Debug: list unsigned int = const $A000 (used reg = )
18883 474E           B8                   A000  mov	ax,#$A000
18884 4751           50                         push	ax
18885                                           ! Debug: func () void = memcpyb+0 (used reg = )
18886 4752           E8         3567            call	_memcpyb
18887 4755           83C4                   0A  add	sp,*$A
18888                                           !BCC_EOS
18889                                           ! 2214   }
18890                                           ! 2215  outw(0x3ce, 0x0005);
18891                       00004758            .B9:
18892                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18893 4758           8A46         FB            mov	al,-5[bp]
18894 475B           40                         inc	ax
18895 475C           8846         FB            mov	-5[bp],al
18896                       0000475F            .BA:
18897                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18898 475F           8A46         FB            mov	al,-5[bp]
18899 4762           3A46         0E            cmp	al,$E[bp]
18900 4765           72           B5            jb 	.BB
18901                       00004767            .BC:
18902                       00004767            .B8:
18903                                           ! Debug: list int = const 5 (used reg = )
18904 4767           B8                   0005  mov	ax,*5
18905 476A           50                         push	ax
18906                                           ! Debug: list int = const $3CE (used reg = )
18907 476B           B8                   03CE  mov	ax,#$3CE
18908 476E           50                         push	ax
18909                                           ! Debug: func () void = outw+0 (used reg = )
18910 476F           E8         3626            call	_outw
18911 4772           83C4                   04  add	sp,*4
18912                                           !BCC_EOS
18913                                           ! 2216 }
18914 4775           89EC                       mov	sp,bp
18915 4777           5D                         pop	bp
18916 4778           C3                         ret
18917                                           ! 2217 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18918                                           ! Register BX used in function vgamem_copy_pl4
18919                                           ! 2218 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18920                       00004779            _vgamem_fill_pl4:
18921                                           !BCC_EOS
18922                                           !BCC_EOS
18923                                           !BCC_EOS
18924                                           !BCC_EOS
18925                                           !BCC_EOS
18926                                           !BCC_EOS
18927                                           ! 2219 {
18928                                           ! 2220  Bit16u dest;
18929                                           !BCC_EOS
18930                                           ! 2221  Bit8u i;
18931                                           !BCC_EOS
18932                                           ! 2222  dest=ystart*cheight*nbcols+xstart;
18933 4779           55                         push	bp
18934 477A           89E5                       mov	bp,sp
18935 477C           83C4                   FC  add	sp,*-4
18936                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18937 477F           8A46         0C            mov	al,$C[bp]
18938 4782           30E4                       xor	ah,ah
18939 4784           89C3                       mov	bx,ax
18940 4786           8A46         06            mov	al,6[bp]
18941 4789           30E4                       xor	ah,ah
18942 478B           89D9                       mov	cx,bx
18943 478D           F7E9                       imul	cx
18944                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18945 478F           89C3                       mov	bx,ax
18946 4791           8A46         0A            mov	al,$A[bp]
18947 4794           30E4                       xor	ah,ah
18948 4796           93                         xchg	ax,bx
18949 4797           89D9                       mov	cx,bx
18950 4799           F7E9                       imul	cx
18951                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18952 479B           0246         04            add	al,4[bp]
18953 479E           80D4                   00  adc	ah,*0
18954                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18955 47A1           8946         FE            mov	-2[bp],ax
18956                                           !BCC_EOS
18957                                           ! 2223  outw(0x3ce, 0x0205);
18958                                           ! Debug: list int = const $205 (used reg = )
18959 47A4           B8                   0205  mov	ax,#$205
18960 47A7           50                         push	ax
18961                                           ! Debug: list int = const $3CE (used reg = )
18962 47A8           B8                   03CE  mov	ax,#$3CE
18963 47AB           50                         push	ax
18964                                           ! Debug: func () void = outw+0 (used reg = )
18965 47AC           E8         35E9            call	_outw
18966 47AF           83C4                   04  add	sp,*4
18967                                           !BCC_EOS
18968                                           ! 2224  for(i=0;i<cheight;i++)
18969                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18970 47B2           30C0                       xor	al,al
18971 47B4           8846         FD            mov	-3[bp],al
18972                                           !BCC_EOS
18973                                           !BCC_EOS
18974                                           ! 2225   {
18975 47B7           EB           31            jmp .BF
18976                       000047B9            .C0:
18977                                           ! 2226    memsetb(0xa000,dest+i*nbcols,attr,cols);
18978                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18979 47B9           8A46         08            mov	al,8[bp]
18980 47BC           30E4                       xor	ah,ah
18981 47BE           50                         push	ax
18982                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18983 47BF           8A46         0E            mov	al,$E[bp]
18984 47C2           30E4                       xor	ah,ah
18985 47C4           50                         push	ax
18986                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18987 47C5           8A46         0A            mov	al,$A[bp]
18988 47C8           30E4                       xor	ah,ah
18989 47CA           89C3                       mov	bx,ax
18990 47CC           8A46         FD            mov	al,-3[bp]
18991 47CF           30E4                       xor	ah,ah
18992 47D1           89D9                       mov	cx,bx
18993 47D3           F7E9                       imul	cx
18994                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18995                                           ! Debug: expression subtree swapping
18996 47D5           0346         FE            add	ax,-2[bp]
18997                                           ! Debug: list unsigned int = ax+0 (used reg = )
18998 47D8           50                         push	ax
18999                                           ! Debug: list unsigned int = const $A000 (used reg = )
19000 47D9           B8                   A000  mov	ax,#$A000
19001 47DC           50                         push	ax
19002                                           ! Debug: func () void = memsetb+0 (used reg = )
19003 47DD           E8         3492            call	_memsetb
19004 47E0           83C4                   08  add	sp,*8
19005                                           !BCC_EOS
19006                                           ! 2227   }
19007                                           ! 2228  outw(0x3ce, 0x0005);
19008                       000047E3            .BE:
19009                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19010 47E3           8A46         FD            mov	al,-3[bp]
19011 47E6           40                         inc	ax
19012 47E7           8846         FD            mov	-3[bp],al
19013                       000047EA            .BF:
19014                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19015 47EA           8A46         FD            mov	al,-3[bp]
19016 47ED           3A46         0C            cmp	al,$C[bp]
19017 47F0           72           C7            jb 	.C0
19018                       000047F2            .C1:
19019                       000047F2            .BD:
19020                                           ! Debug: list int = const 5 (used reg = )
19021 47F2           B8                   0005  mov	ax,*5
19022 47F5           50                         push	ax
19023                                           ! Debug: list int = const $3CE (used reg = )
19024 47F6           B8                   03CE  mov	ax,#$3CE
19025 47F9           50                         push	ax
19026                                           ! Debug: func () void = outw+0 (used reg = )
19027 47FA           E8         359B            call	_outw
19028 47FD           83C4                   04  add	sp,*4
19029                                           !BCC_EOS
19030                                           ! 2229 }
19031 4800           89EC                       mov	sp,bp
19032 4802           5D                         pop	bp
19033 4803           C3                         ret
19034                                           ! 2230 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
19035                                           ! Register BX used in function vgamem_fill_pl4
19036                                           ! 2231 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
19037                       00004804            _vgamem_copy_cga:
19038                                           !BCC_EOS
19039                                           !BCC_EOS
19040                                           !BCC_EOS
19041                                           !BCC_EOS
19042                                           !BCC_EOS
19043                                           !BCC_EOS
19044                                           ! 2232 {
19045                                           ! 2233  Bit16u src,dest;
19046                                           !BCC_EOS
19047                                           ! 2234  Bit8u i;
19048                                           !BCC_EOS
19049                                           ! 2235  src=((ysrc*cheight*nbcols)>>1)+xstart;
19050 4804           55                         push	bp
19051 4805           89E5                       mov	bp,sp
19052 4807           83C4                   FA  add	sp,*-6
19053                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
19054 480A           8A46         0E            mov	al,$E[bp]
19055 480D           30E4                       xor	ah,ah
19056 480F           89C3                       mov	bx,ax
19057 4811           8A46         06            mov	al,6[bp]
19058 4814           30E4                       xor	ah,ah
19059 4816           89D9                       mov	cx,bx
19060 4818           F7E9                       imul	cx
19061                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19062 481A           89C3                       mov	bx,ax
19063 481C           8A46         0C            mov	al,$C[bp]
19064 481F           30E4                       xor	ah,ah
19065 4821           93                         xchg	ax,bx
19066 4822           89D9                       mov	cx,bx
19067 4824           F7E9                       imul	cx
19068                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19069 4826           D1E8                       shr	ax,*1
19070                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19071 4828           0246         04            add	al,4[bp]
19072 482B           80D4                   00  adc	ah,*0
19073                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
19074 482E           8946         FE            mov	-2[bp],ax
19075                                           !BCC_EOS
19076                                           ! 2236  dest=((ydest*cheight*nbcols)>>1)+xstart;
19077                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
19078 4831           8A46         0E            mov	al,$E[bp]
19079 4834           30E4                       xor	ah,ah
19080 4836           89C3                       mov	bx,ax
19081 4838           8A46         08            mov	al,8[bp]
19082 483B           30E4                       xor	ah,ah
19083 483D           89D9                       mov	cx,bx
19084 483F           F7E9                       imul	cx
19085                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19086 4841           89C3                       mov	bx,ax
19087 4843           8A46         0C            mov	al,$C[bp]
19088 4846           30E4                       xor	ah,ah
19089 4848           93                         xchg	ax,bx
19090 4849           89D9                       mov	cx,bx
19091 484B           F7E9                       imul	cx
19092                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19093 484D           D1E8                       shr	ax,*1
19094                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19095 484F           0246         04            add	al,4[bp]
19096 4852           80D4                   00  adc	ah,*0
19097                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
19098 4855           8946         FC            mov	-4[bp],ax
19099                                           !BCC_EOS
19100                                           ! 2237  for(i=0;i<cheight;i++)
19101                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19102 4858           30C0                       xor	al,al
19103 485A           8846         FB            mov	-5[bp],al
19104                                           !BCC_EOS
19105                                           !BCC_EOS
19106                                           ! 2238   {
19107 485D           E9         00A8            br 	.C4
19108                       00004860            .C5:
19109                                           ! 2239    if (i & 1)
19110                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19111 4860           8A46         FB            mov	al,-5[bp]
19112 4863           24                     01  and	al,*1
19113 4865           84C0                       test	al,al
19114 4867           74           56            je  	.C6
19115                       00004869            .C7:
19116                                           ! 2240      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19117                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19118 4869           8A46         0A            mov	al,$A[bp]
19119 486C           30E4                       xor	ah,ah
19120 486E           50                         push	ax
19121                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19122 486F           8A46         FB            mov	al,-5[bp]
19123 4872           30E4                       xor	ah,ah
19124 4874           D1E8                       shr	ax,*1
19125                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19126 4876           89C3                       mov	bx,ax
19127 4878           8A46         0C            mov	al,$C[bp]
19128 487B           30E4                       xor	ah,ah
19129 487D           93                         xchg	ax,bx
19130 487E           89D9                       mov	cx,bx
19131 4880           F7E9                       imul	cx
19132 4882           50                         push	ax
19133                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19134                                           ! Debug: expression subtree swapping
19135 4883           8B46         FE            mov	ax,-2[bp]
19136                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19137 4886           05                   2000  add	ax,#$2000
19138 4889           0346         F6            add	ax,-$A[bp]
19139 488C           44                         inc	sp
19140 488D           44                         inc	sp
19141                                           ! Debug: list unsigned int = ax+0 (used reg = )
19142 488E           50                         push	ax
19143                                           ! Debug: list unsigned int = const $B800 (used reg = )
19144 488F           B8                   B800  mov	ax,#$B800
19145 4892           50                         push	ax
19146                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19147 4893           8A46         FB            mov	al,-5[bp]
19148 4896           30E4                       xor	ah,ah
19149 4898           D1E8                       shr	ax,*1
19150                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19151 489A           89C3                       mov	bx,ax
19152 489C           8A46         0C            mov	al,$C[bp]
19153 489F           30E4                       xor	ah,ah
19154 48A1           93                         xchg	ax,bx
19155 48A2           89D9                       mov	cx,bx
19156 48A4           F7E9                       imul	cx
19157 48A6           50                         push	ax
19158                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19159                                           ! Debug: expression subtree swapping
19160 48A7           8B46         FC            mov	ax,-4[bp]
19161                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19162 48AA           05                   2000  add	ax,#$2000
19163 48AD           0346         F2            add	ax,-$E[bp]
19164 48B0           44                         inc	sp
19165 48B1           44                         inc	sp
19166                                           ! Debug: list unsigned int = ax+0 (used reg = )
19167 48B2           50                         push	ax
19168                                           ! Debug: list unsigned int = const $B800 (used reg = )
19169 48B3           B8                   B800  mov	ax,#$B800
19170 48B6           50                         push	ax
19171                                           ! Debug: func () void = memcpyb+0 (used reg = )
19172 48B7           E8         3402            call	_memcpyb
19173 48BA           83C4                   0A  add	sp,*$A
19174                                           !BCC_EOS
19175                                           ! 2241    else
19176                                           ! 2242      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19177 48BD           EB           42            jmp .C8
19178                       000048BF            .C6:
19179                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19180 48BF           8A46         0A            mov	al,$A[bp]
19181 48C2           30E4                       xor	ah,ah
19182 48C4           50                         push	ax
19183                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19184 48C5           8A46         FB            mov	al,-5[bp]
19185 48C8           30E4                       xor	ah,ah
19186 48CA           D1E8                       shr	ax,*1
19187                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19188 48CC           89C3                       mov	bx,ax
19189 48CE           8A46         0C            mov	al,$C[bp]
19190 48D1           30E4                       xor	ah,ah
19191 48D3           93                         xchg	ax,bx
19192 48D4           89D9                       mov	cx,bx
19193 48D6           F7E9                       imul	cx
19194                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19195                                           ! Debug: expression subtree swapping
19196 48D8           0346         FE            add	ax,-2[bp]
19197                                           ! Debug: list unsigned int = ax+0 (used reg = )
19198 48DB           50                         push	ax
19199                                           ! Debug: list unsigned int = const $B800 (used reg = )
19200 48DC           B8                   B800  mov	ax,#$B800
19201 48DF           50                         push	ax
19202                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19203 48E0           8A46         FB            mov	al,-5[bp]
19204 48E3           30E4                       xor	ah,ah
19205 48E5           D1E8                       shr	ax,*1
19206                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19207 48E7           89C3                       mov	bx,ax
19208 48E9           8A46         0C            mov	al,$C[bp]
19209 48EC           30E4                       xor	ah,ah
19210 48EE           93                         xchg	ax,bx
19211 48EF           89D9                       mov	cx,bx
19212 48F1           F7E9                       imul	cx
19213                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19214                                           ! Debug: expression subtree swapping
19215 48F3           0346         FC            add	ax,-4[bp]
19216                                           ! Debug: list unsigned int = ax+0 (used reg = )
19217 48F6           50                         push	ax
19218                                           ! Debug: list unsigned int = const $B800 (used reg = )
19219 48F7           B8                   B800  mov	ax,#$B800
19220 48FA           50                         push	ax
19221                                           ! Debug: func () void = memcpyb+0 (used reg = )
19222 48FB           E8         33BE            call	_memcpyb
19223 48FE           83C4                   0A  add	sp,*$A
19224                                           !BCC_EOS
19225                                           ! 2243   }
19226                       00004901            .C8:
19227                                           ! 2244 }
19228                       00004901            .C3:
19229                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19230 4901           8A46         FB            mov	al,-5[bp]
19231 4904           40                         inc	ax
19232 4905           8846         FB            mov	-5[bp],al
19233                       00004908            .C4:
19234                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19235 4908           8A46         FB            mov	al,-5[bp]
19236 490B           3A46         0E            cmp	al,$E[bp]
19237 490E         0F82         FF4E            blo 	.C5
19238                       00004912            .C9:
19239                       00004912            .C2:
19240 4912           89EC                       mov	sp,bp
19241 4914           5D                         pop	bp
19242 4915           C3                         ret
19243                                           ! 2245 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19244                                           ! Register BX used in function vgamem_copy_cga
19245                                           ! 2246 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19246                       00004916            _vgamem_fill_cga:
19247                                           !BCC_EOS
19248                                           !BCC_EOS
19249                                           !BCC_EOS
19250                                           !BCC_EOS
19251                                           !BCC_EOS
19252                                           !BCC_EOS
19253                                           ! 2247 {
19254                                           ! 2248  Bit16u dest;
19255                                           !BCC_EOS
19256                                           ! 2249  Bit8u i;
19257                                           !BCC_EOS
19258                                           ! 2250  dest=((ystart*cheight*nbcols)>>1)+xstart;
19259 4916           55                         push	bp
19260 4917           89E5                       mov	bp,sp
19261 4919           83C4                   FC  add	sp,*-4
19262                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19263 491C           8A46         0C            mov	al,$C[bp]
19264 491F           30E4                       xor	ah,ah
19265 4921           89C3                       mov	bx,ax
19266 4923           8A46         06            mov	al,6[bp]
19267 4926           30E4                       xor	ah,ah
19268 4928           89D9                       mov	cx,bx
19269 492A           F7E9                       imul	cx
19270                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19271 492C           89C3                       mov	bx,ax
19272 492E           8A46         0A            mov	al,$A[bp]
19273 4931           30E4                       xor	ah,ah
19274 4933           93                         xchg	ax,bx
19275 4934           89D9                       mov	cx,bx
19276 4936           F7E9                       imul	cx
19277                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19278 4938           D1E8                       shr	ax,*1
19279                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19280 493A           0246         04            add	al,4[bp]
19281 493D           80D4                   00  adc	ah,*0
19282                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19283 4940           8946         FE            mov	-2[bp],ax
19284                                           !BCC_EOS
19285                                           ! 2251  for(i=0;i<cheight;i++)
19286                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19287 4943           30C0                       xor	al,al
19288 4945           8846         FD            mov	-3[bp],al
19289                                           !BCC_EOS
19290                                           !BCC_EOS
19291                                           ! 2252   {
19292 4948           EB           75            jmp .CC
19293                       0000494A            .CD:
19294                                           ! 2253    if (i & 1)
19295                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19296 494A           8A46         FD            mov	al,-3[bp]
19297 494D           24                     01  and	al,*1
19298 494F           84C0                       test	al,al
19299 4951           74           38            je  	.CE
19300                       00004953            .CF:
19301                                           ! 2254      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19302                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19303 4953           8A46         08            mov	al,8[bp]
19304 4956           30E4                       xor	ah,ah
19305 4958           50                         push	ax
19306                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19307 4959           8A46         0E            mov	al,$E[bp]
19308 495C           30E4                       xor	ah,ah
19309 495E           50                         push	ax
19310                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19311 495F           8A46         FD            mov	al,-3[bp]
19312 4962           30E4                       xor	ah,ah
19313 4964           D1E8                       shr	ax,*1
19314                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19315 4966           89C3                       mov	bx,ax
19316 4968           8A46         0A            mov	al,$A[bp]
19317 496B           30E4                       xor	ah,ah
19318 496D           93                         xchg	ax,bx
19319 496E           89D9                       mov	cx,bx
19320 4970           F7E9                       imul	cx
19321 4972           50                         push	ax
19322                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19323                                           ! Debug: expression subtree swapping
19324 4973           8B46         FE            mov	ax,-2[bp]
19325                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19326 4976           05                   2000  add	ax,#$2000
19327 4979           0346         F6            add	ax,-$A[bp]
19328 497C           44                         inc	sp
19329 497D           44                         inc	sp
19330                                           ! Debug: list unsigned int = ax+0 (used reg = )
19331 497E           50                         push	ax
19332                                           ! Debug: list unsigned int = const $B800 (used reg = )
19333 497F           B8                   B800  mov	ax,#$B800
19334 4982           50                         push	ax
19335                                           ! Debug: func () void = memsetb+0 (used reg = )
19336 4983           E8         32EC            call	_memsetb
19337 4986           83C4                   08  add	sp,*8
19338                                           !BCC_EOS
19339                                           ! 2255    else
19340                                           ! 2256      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19341 4989           EB           2D            jmp .D0
19342                       0000498B            .CE:
19343                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19344 498B           8A46         08            mov	al,8[bp]
19345 498E           30E4                       xor	ah,ah
19346 4990           50                         push	ax
19347                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19348 4991           8A46         0E            mov	al,$E[bp]
19349 4994           30E4                       xor	ah,ah
19350 4996           50                         push	ax
19351                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19352 4997           8A46         FD            mov	al,-3[bp]
19353 499A           30E4                       xor	ah,ah
19354 499C           D1E8                       shr	ax,*1
19355                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19356 499E           89C3                       mov	bx,ax
19357 49A0           8A46         0A            mov	al,$A[bp]
19358 49A3           30E4                       xor	ah,ah
19359 49A5           93                         xchg	ax,bx
19360 49A6           89D9                       mov	cx,bx
19361 49A8           F7E9                       imul	cx
19362                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19363                                           ! Debug: expression subtree swapping
19364 49AA           0346         FE            add	ax,-2[bp]
19365                                           ! Debug: list unsigned int = ax+0 (used reg = )
19366 49AD           50                         push	ax
19367                                           ! Debug: list unsigned int = const $B800 (used reg = )
19368 49AE           B8                   B800  mov	ax,#$B800
19369 49B1           50                         push	ax
19370                                           ! Debug: func () void = memsetb+0 (used reg = )
19371 49B2           E8         32BD            call	_memsetb
19372 49B5           83C4                   08  add	sp,*8
19373                                           !BCC_EOS
19374                                           ! 2257   }
19375                       000049B8            .D0:
19376                                           ! 2258 }
19377                       000049B8            .CB:
19378                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19379 49B8           8A46         FD            mov	al,-3[bp]
19380 49BB           40                         inc	ax
19381 49BC           8846         FD            mov	-3[bp],al
19382                       000049BF            .CC:
19383                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19384 49BF           8A46         FD            mov	al,-3[bp]
19385 49C2           3A46         0C            cmp	al,$C[bp]
19386 49C5           72           83            jb 	.CD
19387                       000049C7            .D1:
19388                       000049C7            .CA:
19389 49C7           89EC                       mov	sp,bp
19390 49C9           5D                         pop	bp
19391 49CA           C3                         ret
19392                                           ! 2259 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19393                                           ! Register BX used in function vgamem_fill_cga
19394                                           ! 2260 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19395                       000049CB            _biosfn_scroll:
19396                                           !BCC_EOS
19397                                           !BCC_EOS
19398                                           !BCC_EOS
19399                                           !BCC_EOS
19400                                           !BCC_EOS
19401                                           !BCC_EOS
19402                                           !BCC_EOS
19403                                           !BCC_EOS
19404                                           ! 2261 {
19405                                           ! 2262  Bit8u mode,line,cheight,bpp,cols;
19406                                           !BCC_EOS
19407                                           ! 2263  Bit16u nbcols,nbrows,i;
19408                                           !BCC_EOS
19409                                           ! 2264  Bit16u address;
19410                                           !BCC_EOS
19411                                           ! 2265  if(rul>rlr)return;
19412 49CB           55                         push	bp
19413 49CC           89E5                       mov	bp,sp
19414 49CE           83C4                   F2  add	sp,*-$E
19415                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19416 49D1           8A46         08            mov	al,8[bp]
19417 49D4           3A46         0C            cmp	al,$C[bp]
19418 49D7           76           04            jbe 	.D2
19419                       000049D9            .D3:
19420 49D9           89EC                       mov	sp,bp
19421 49DB           5D                         pop	bp
19422 49DC           C3                         ret
19423                                           !BCC_EOS
19424                                           ! 2266  if(cul>clr)return;
19425                       000049DD            .D2:
19426                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19427 49DD           8A46         0A            mov	al,$A[bp]
19428 49E0           3A46         0E            cmp	al,$E[bp]
19429 49E3           76           04            jbe 	.D4
19430                       000049E5            .D5:
19431 49E5           89EC                       mov	sp,bp
19432 49E7           5D                         pop	bp
19433 49E8           C3                         ret
19434                                           !BCC_EOS
19435                                           ! 2267  mode=read_byte(0x40,0x49);
19436                       000049E9            .D4:
19437                                           ! Debug: list int = const $49 (used reg = )
19438 49E9           B8                   0049  mov	ax,*$49
19439 49EC           50                         push	ax
19440                                           ! Debug: list int = const $40 (used reg = )
19441 49ED           B8                   0040  mov	ax,*$40
19442 49F0           50                         push	ax
19443                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19444 49F1           E8         3328            call	_read_byte
19445 49F4           83C4                   04  add	sp,*4
19446                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19447 49F7           8846         FF            mov	-1[bp],al
19448                                           !BCC_EOS
19449                                           ! 2268  line=find_vga_entry(mode);
19450                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19451 49FA           8A46         FF            mov	al,-1[bp]
19452 49FD           30E4                       xor	ah,ah
19453 49FF           50                         push	ax
19454                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19455 4A00           E8         322D            call	_find_vga_entry
19456 4A03           44                         inc	sp
19457 4A04           44                         inc	sp
19458                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19459 4A05           8846         FE            mov	-2[bp],al
19460                                           !BCC_EOS
19461                                           ! 2269  if(line==0xFF)return;
19462                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19463 4A08           8A46         FE            mov	al,-2[bp]
19464 4A0B           3C                     FF  cmp	al,#$FF
19465 4A0D           75           04            jne 	.D6
19466                       00004A0F            .D7:
19467 4A0F           89EC                       mov	sp,bp
19468 4A11           5D                         pop	bp
19469 4A12           C3                         ret
19470                                           !BCC_EOS
19471                                           ! 2270  nbrows=read_byte(0x40,0x84)+1;
19472                       00004A13            .D6:
19473                                           ! Debug: list int = const $84 (used reg = )
19474 4A13           B8                   0084  mov	ax,#$84
19475 4A16           50                         push	ax
19476                                           ! Debug: list int = const $40 (used reg = )
19477 4A17           B8                   0040  mov	ax,*$40
19478 4A1A           50                         push	ax
19479                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19480 4A1B           E8         32FE            call	_read_byte
19481 4A1E           83C4                   04  add	sp,*4
19482                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19483 4A21           30E4                       xor	ah,ah
19484                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19485 4A23           40                         inc	ax
19486 4A24           8946         F6            mov	-$A[bp],ax
19487                                           !BCC_EOS
19488                                           ! 2271  nbcols=read_word(0x40,0x4A);
19489                                           ! Debug: list int = const $4A (used reg = )
19490 4A27           B8                   004A  mov	ax,*$4A
19491 4A2A           50                         push	ax
19492                                           ! Debug: list int = const $40 (used reg = )
19493 4A2B           B8                   0040  mov	ax,*$40
19494 4A2E           50                         push	ax
19495                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19496 4A2F           E8         32FD            call	_read_word
19497 4A32           83C4                   04  add	sp,*4
19498                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19499 4A35           8946         F8            mov	-8[bp],ax
19500                                           !BCC_EOS
19501                                           ! 2272  if(page==0xFF)
19502                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19503 4A38           8A46         10            mov	al,$10[bp]
19504 4A3B           3C                     FF  cmp	al,#$FF
19505 4A3D           75           11            jne 	.D8
19506                       00004A3F            .D9:
19507                                           ! 2273   page=read_byte(0x40,0x62);
19508                                           ! Debug: list int = const $62 (used reg = )
19509 4A3F           B8                   0062  mov	ax,*$62
19510 4A42           50                         push	ax
19511                                           ! Debug: list int = const $40 (used reg = )
19512 4A43           B8                   0040  mov	ax,*$40
19513 4A46           50                         push	ax
19514                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19515 4A47           E8         32D2            call	_read_byte
19516 4A4A           83C4                   04  add	sp,*4
19517                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19518 4A4D           8846         10            mov	$10[bp],al
19519                                           !BCC_EOS
19520                                           ! 2274  if(rlr>=nbrows)rlr=nbrows-1;
19521                       00004A50            .D8:
19522                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19523 4A50           8A46         0C            mov	al,$C[bp]
19524 4A53           30E4                       xor	ah,ah
19525 4A55           3B46         F6            cmp	ax,-$A[bp]
19526 4A58           72           07            jb  	.DA
19527                       00004A5A            .DB:
19528                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19529 4A5A           8B46         F6            mov	ax,-$A[bp]
19530                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19531 4A5D           48                         dec	ax
19532 4A5E           8846         0C            mov	$C[bp],al
19533                                           !BCC_EOS
19534                                           ! 2275  if(clr>
19535                       00004A61            .DA:
19536                                           ! 2275 =nbcols)clr=nbcols-1;
19537                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19538 4A61           8A46         0E            mov	al,$E[bp]
19539 4A64           30E4                       xor	ah,ah
19540 4A66           3B46         F8            cmp	ax,-8[bp]
19541 4A69           72           07            jb  	.DC
19542                       00004A6B            .DD:
19543                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19544 4A6B           8B46         F8            mov	ax,-8[bp]
19545                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19546 4A6E           48                         dec	ax
19547 4A6F           8846         0E            mov	$E[bp],al
19548                                           !BCC_EOS
19549                                           ! 2276  if(nblines>nbrows)nblines=0;
19550                       00004A72            .DC:
19551                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19552 4A72           8A46         04            mov	al,4[bp]
19553 4A75           30E4                       xor	ah,ah
19554 4A77           3B46         F6            cmp	ax,-$A[bp]
19555 4A7A           76           05            jbe 	.DE
19556                       00004A7C            .DF:
19557                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19558 4A7C           30C0                       xor	al,al
19559 4A7E           8846         04            mov	4[bp],al
19560                                           !BCC_EOS
19561                                           ! 2277  cols=clr-cul+1;
19562                       00004A81            .DE:
19563                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19564 4A81           8A46         0E            mov	al,$E[bp]
19565 4A84           30E4                       xor	ah,ah
19566 4A86           2A46         0A            sub	al,$A[bp]
19567 4A89           80DC                   00  sbb	ah,*0
19568                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19569                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19570 4A8C           40                         inc	ax
19571 4A8D           8846         FB            mov	-5[bp],al
19572                                           !BCC_EOS
19573                                           ! 2278  if(vga_modes[line].class==0x00)
19574                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19575 4A90           8A46         FE            mov	al,-2[bp]
19576 4A93           30E4                       xor	ah,ah
19577 4A95           B1                     03  mov	cl,*3
19578 4A97           D3E0                       shl	ax,cl
19579 4A99           89C3                       mov	bx,ax
19580 4A9B           81C3                 020D  add	bx,#_vga_modes
19581                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19582 4A9F           8A47         01            mov	al,1[bx]
19583 4AA2           84C0                       test	al,al
19584 4AA4         0F85         0269            bne 	.E0
19585                       00004AA8            .E1:
19586                                           ! 2279   {
19587                                           ! 2280    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19588                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19589 4AA8           8B46         F8            mov	ax,-8[bp]
19590 4AAB           8B4E         F6            mov	cx,-$A[bp]
19591 4AAE           F7E9                       imul	cx
19592                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19593 4AB0           D1E0                       shl	ax,*1
19594                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19595 4AB2           0C                     FF  or	al,#$FF
19596                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19597                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19598 4AB4           89C3                       mov	bx,ax
19599 4AB6           8A46         10            mov	al,$10[bp]
19600 4AB9           30E4                       xor	ah,ah
19601 4ABB           93                         xchg	ax,bx
19602 4ABC           40                         inc	ax
19603 4ABD           89D9                       mov	cx,bx
19604 4ABF           F7E9                       imul	cx
19605                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19606 4AC1           8946         F2            mov	-$E[bp],ax
19607                                           !BCC_EOS
19608                                           ! 2281    printf("Scroll, address %04x (%04x %04x %02x)\n",address,nbrows,nbcols,page);
19609                                           ! Debug: list unsigned char page = [S+$10+$E] (used reg = )
19610 4AC4           8A46         10            mov	al,$10[bp]
19611 4AC7           30E4                       xor	ah,ah
19612 4AC9           50                         push	ax
19613                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19614 4ACA           FF76         F8            push	-8[bp]
19615                                           ! Debug: list unsigned short nbrows = [S+$14-$C] (used reg = )
19616 4ACD           FF76         F6            push	-$A[bp]
19617                                           ! Debug: list unsigned short address = [S+$16-$10] (used reg = )
19618 4AD0           FF76         F2            push	-$E[bp]
19619                                           ! Debug: list * char = .E2+0 (used reg = )
19620 4AD3           BB                   A0D3  mov	bx,#.E2
19621 4AD6           53                         push	bx
19622                                           ! Debug: func () void = printf+0 (used reg = )
19623 4AD7           E8         32ED            call	_printf
19624 4ADA           83C4                   0A  add	sp,*$A
19625                                           !BCC_EOS
19626                                           ! 2282    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19627                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19628 4ADD           8A46         04            mov	al,4[bp]
19629 4AE0           84C0                       test	al,al
19630 4AE2           75           67            jne 	.E3
19631                       00004AE4            .E8:
19632                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19633 4AE4           8A46         08            mov	al,8[bp]
19634 4AE7           84C0                       test	al,al
19635 4AE9           75           60            jne 	.E3
19636                       00004AEB            .E7:
19637                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19638 4AEB           8A46         0A            mov	al,$A[bp]
19639 4AEE           84C0                       test	al,al
19640 4AF0           75           59            jne 	.E3
19641                       00004AF2            .E6:
19642                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19643 4AF2           8B46         F6            mov	ax,-$A[bp]
19644                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19645                                           ! Debug: expression subtree swapping
19646 4AF5           48                         dec	ax
19647 4AF6           50                         push	ax
19648 4AF7           8A46         0C            mov	al,$C[bp]
19649 4AFA           30E4                       xor	ah,ah
19650 4AFC           3B46         F0            cmp	ax,-$10[bp]
19651 4AFF           8D66         F2            lea	sp,-$E[bp]
19652 4B02           75           47            jne 	.E3
19653                       00004B04            .E5:
19654                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19655 4B04           8B46         F8            mov	ax,-8[bp]
19656                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19657                                           ! Debug: expression subtree swapping
19658 4B07           48                         dec	ax
19659 4B08           50                         push	ax
19660 4B09           8A46         0E            mov	al,$E[bp]
19661 4B0C           30E4                       xor	ah,ah
19662 4B0E           3B46         F0            cmp	ax,-$10[bp]
19663 4B11           8D66         F2            lea	sp,-$E[bp]
19664 4B14           75           35            jne 	.E3
19665                       00004B16            .E4:
19666                                           ! 2283     {
19667                                           ! 2284      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19668                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19669 4B16           8B46         F6            mov	ax,-$A[bp]
19670 4B19           8B4E         F8            mov	cx,-8[bp]
19671 4B1C           F7E9                       imul	cx
19672                                           ! Debug: list unsigned int = ax+0 (used reg = )
19673 4B1E           50                         push	ax
19674                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19675 4B1F           8A46         06            mov	al,6[bp]
19676 4B22           30E4                       xor	ah,ah
19677                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19678 4B24           B9                   0100  mov	cx,#$100
19679 4B27           F7E9                       imul	cx
19680                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19681                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19682 4B29           05                   0020  add	ax,*$20
19683 4B2C           50                         push	ax
19684                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19685 4B2D           FF76         F2            push	-$E[bp]
19686                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19687 4B30           8A46         FE            mov	al,-2[bp]
19688 4B33           30E4                       xor	ah,ah
19689 4B35           B1                     03  mov	cl,*3
19690 4B37           D3E0                       shl	ax,cl
19691 4B39           89C3                       mov	bx,ax
19692 4B3B           81C3                 020D  add	bx,#_vga_modes
19693                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19694 4B3F           FF77         04            push	4[bx]
19695                                           ! Debug: func () void = memsetw+0 (used reg = )
19696 4B42           E8         3152            call	_memsetw
19697 4B45           83C4                   08  add	sp,*8
19698                                           !BCC_EOS
19699                                           ! 2285     }
19700                                           ! 2286    else
19701                                           ! 2287     {
19702 4B48           E9         01C3            br 	.E9
19703                       00004B4B            .E3:
19704                                           ! 2288      if(dir==1)
19705                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19706 4B4B           8A46         12            mov	al,$12[bp]
19707 4B4E           3C                     01  cmp	al,*1
19708 4B50         0F85         00DC            bne 	.EA
19709                       00004B54            .EB:
19710                                           ! 2289       {for(i=rul;i<=rlr;i++)
19711                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19712 4B54           8A46         08            mov	al,8[bp]
19713 4B57           30E4                       xor	ah,ah
19714 4B59           8946         F4            mov	-$C[bp],ax
19715                                           !BCC_EOS
19716                                           !BCC_EOS
19717                                           ! 2290         {
19718 4B5C           E9         00C2            br 	.EE
19719                       00004B5F            .EF:
19720                                           ! 2291          if((i+nblines>rlr)||(nblines==0))
19721                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19722 4B5F           8B46         F4            mov	ax,-$C[bp]
19723 4B62           0246         04            add	al,4[bp]
19724 4B65           80D4                   00  adc	ah,*0
19725                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19726 4B68           50                         push	ax
19727 4B69           8A46         0C            mov	al,$C[bp]
19728 4B6C           30E4                       xor	ah,ah
19729 4B6E           3B46         F0            cmp	ax,-$10[bp]
19730 4B71           8D66         F2            lea	sp,-$E[bp]
19731 4B74           72           07            jb  	.F1
19732                       00004B76            .F2:
19733                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19734 4B76           8A46         04            mov	al,4[bp]
19735 4B79           84C0                       test	al,al
19736 4B7B           75           42            jne 	.F0
19737                       00004B7D            .F1:
19738                                           ! 2292           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19739                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19740 4B7D           8A46         FB            mov	al,-5[bp]
19741 4B80           30E4                       xor	ah,ah
19742 4B82           50                         push	ax
19743                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19744 4B83           8A46         06            mov	al,6[bp]
19745 4B86           30E4                       xor	ah,ah
19746                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19747 4B88           B9                   0100  mov	cx,#$100
19748 4B8B           F7E9                       imul	cx
19749                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19750                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19751 4B8D           05                   0020  add	ax,*$20
19752 4B90           50                         push	ax
19753                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19754 4B91           8B46         F4            mov	ax,-$C[bp]
19755 4B94           8B4E         F8            mov	cx,-8[bp]
19756 4B97           F7E9                       imul	cx
19757                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19758 4B99           0246         0A            add	al,$A[bp]
19759 4B9C           80D4                   00  adc	ah,*0
19760                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19761 4B9F           D1E0                       shl	ax,*1
19762                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19763                                           ! Debug: expression subtree swapping
19764 4BA1           0346         F2            add	ax,-$E[bp]
19765                                           ! Debug: list unsigned int = ax+0 (used reg = )
19766 4BA4           50                         push	ax
19767                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19768 4BA5           8A46         FE            mov	al,-2[bp]
19769 4BA8           30E4                       xor	ah,ah
19770 4BAA           B1                     03  mov	cl,*3
19771 4BAC           D3E0                       shl	ax,cl
19772 4BAE           89C3                       mov	bx,ax
19773 4BB0           81C3                 020D  add	bx,#_vga_modes
19774                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19775 4BB4           FF77         04            push	4[bx]
19776                                           ! Debug: func () void = memsetw+0 (used reg = )
19777 4BB7           E8         30DD            call	_memsetw
19778 4BBA           83C4                   08  add	sp,*8
19779                                           !BCC_EOS
19780                                           ! 2293          else
19781                                           ! 2294           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19782 4BBD           EB           5B            jmp .F3
19783                       00004BBF            .F0:
19784                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19785 4BBF           8A46         FB            mov	al,-5[bp]
19786 4BC2           30E4                       xor	ah,ah
19787 4BC4           50                         push	ax
19788                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19789 4BC5           8B46         F4            mov	ax,-$C[bp]
19790 4BC8           0246         04            add	al,4[bp]
19791 4BCB           80D4                   00  adc	ah,*0
19792                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19793 4BCE           8B4E         F8            mov	cx,-8[bp]
19794 4BD1           F7E9                       imul	cx
19795                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19796 4BD3           0246         0A            add	al,$A[bp]
19797 4BD6           80D4                   00  adc	ah,*0
19798                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19799 4BD9           D1E0                       shl	ax,*1
19800                                           ! Debug: list unsigned int = ax+0 (used reg = )
19801 4BDB           50                         push	ax
19802                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19803 4BDC           8A46         FE            mov	al,-2[bp]
19804 4BDF           30E4                       xor	ah,ah
19805 4BE1           B1                     03  mov	cl,*3
19806 4BE3           D3E0                       shl	ax,cl
19807 4BE5           89C3                       mov	bx,ax
19808 4BE7           81C3                 020D  add	bx,#_vga_modes
19809                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19810 4BEB           FF77         04            push	4[bx]
19811                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19812 4BEE           8B46         F4            mov	ax,-$C[bp]
19813 4BF1           8B4E         F8            mov	cx,-8[bp]
19814 4BF4           F7E9                       imul	cx
19815                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19816 4BF6           0246         0A            add	al,$A[bp]
19817 4BF9           80D4                   00  adc	ah,*0
19818                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19819 4BFC           D1E0                       shl	ax,*1
19820                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19821                                           ! Debug: expression subtree swapping
19822 4BFE           0346         F2            add	ax,-$E[bp]
19823                                           ! Debug: list unsigned int = ax+0 (used reg = )
19824 4C01           50                         push	ax
19825                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19826 4C02           8A46         FE            mov	al,-2[bp]
19827 4C05           30E4                       xor	ah,ah
19828 4C07           B1                     03  mov	cl,*3
19829 4C09           D3E0                       shl	ax,cl
19830 4C0B           89C3                       mov	bx,ax
19831 4C0D           81C3                 020D  add	bx,#_vga_modes
19832                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19833 4C11           FF77         04            push	4[bx]
19834                                           ! Debug: func () void = memcpyw+0 (used reg = )
19835 4C14           E8         30D5            call	_memcpyw
19836 4C17           83C4                   0A  add	sp,*$A
19837                                           !BCC_EOS
19838                                           ! 2295         }
19839                       00004C1A            .F3:
19840                                           ! 2296       }
19841                       00004C1A            .ED:
19842                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19843 4C1A           8B46         F4            mov	ax,-$C[bp]
19844 4C1D           40                         inc	ax
19845 4C1E           8946         F4            mov	-$C[bp],ax
19846                       00004C21            .EE:
19847                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19848 4C21           8A46         0C            mov	al,$C[bp]
19849 4C24           30E4                       xor	ah,ah
19850 4C26           3B46         F4            cmp	ax,-$C[bp]
19851 4C29         0F83         FF32            bhis	.EF
19852                       00004C2D            .F4:
19853                       00004C2D            .EC:
19854                                           ! 2297      else
19855                                           ! 2298       {for(i=rlr;i>=rul;i--)
19856 4C2D           E9         00DE            br 	.F5
19857                       00004C30            .EA:
19858                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19859 4C30           8A46         0C            mov	al,$C[bp]
19860 4C33           30E4                       xor	ah,ah
19861 4C35           8946         F4            mov	-$C[bp],ax
19862                                           !BCC_EOS
19863                                           !BCC_EOS
19864                                           ! 2299         {
19865 4C38           E9         00C7            br 	.F8
19866                       00004C3B            .F9:
19867                                           ! 2300          if((i<rul+nblines)||(nblines==0))
19868                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19869 4C3B           8A46         08            mov	al,8[bp]
19870 4C3E           30E4                       xor	ah,ah
19871 4C40           0246         04            add	al,4[bp]
19872 4C43           80D4                   00  adc	ah,*0
19873                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19874 4C46           3B46         F4            cmp	ax,-$C[bp]
19875 4C49           77           07            ja  	.FB
19876                       00004C4B            .FC:
19877                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19878 4C4B           8A46         04            mov	al,4[bp]
19879 4C4E           84C0                       test	al,al
19880 4C50           75           42            jne 	.FA
19881                       00004C52            .FB:
19882                                           ! 2301           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19883                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19884 4C52           8A46         FB            mov	al,-5[bp]
19885 4C55           30E4                       xor	ah,ah
19886 4C57           50                         push	ax
19887                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19888 4C58           8A46         06            mov	al,6[bp]
19889 4C5B           30E4                       xor	ah,ah
19890                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19891 4C5D           B9                   0100  mov	cx,#$100
19892 4C60           F7E9                       imul	cx
19893                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19894                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19895 4C62           05                   0020  add	ax,*$20
19896 4C65           50                         push	ax
19897                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19898 4C66           8B46         F4            mov	ax,-$C[bp]
19899 4C69           8B4E         F8            mov	cx,-8[bp]
19900 4C6C           F7E9                       imul	cx
19901                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19902 4C6E           0246         0A            add	al,$A[bp]
19903 4C71           80D4                   00  adc	ah,*0
19904                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19905 4C74           D1E0                       shl	ax,*1
19906                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19907                                           ! Debug: expression subtree swapping
19908 4C76           0346         F2            add	ax,-$E[bp]
19909                                           ! Debug: list unsigned int = ax+0 (used reg = )
19910 4C79           50                         push	ax
19911                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19912 4C7A           8A46         FE            mov	al,-2[bp]
19913 4C7D           30E4                       xor	ah,ah
19914 4C7F           B1                     03  mov	cl,*3
19915 4C81           D3E0                       shl	ax,cl
19916 4C83           89C3                       mov	bx,ax
19917 4C85           81C3                 020D  add	bx,#_vga_modes
19918                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19919 4C89           FF77         04            push	4[bx]
19920                                           ! Debug: func () void = memsetw+0 (used reg = )
19921 4C8C           E8         3008            call	_memsetw
19922 4C8F           83C4                   08  add	sp,*8
19923                                           !BCC_EOS
19924                                           ! 2302          else
19925                                           ! 2303           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19926 4C92           EB           5B            jmp .FD
19927                       00004C94            .FA:
19928                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19929 4C94           8A46         FB            mov	al,-5[bp]
19930 4C97           30E4                       xor	ah,ah
19931 4C99           50                         push	ax
19932                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19933 4C9A           8B46         F4            mov	ax,-$C[bp]
19934 4C9D           2A46         04            sub	al,4[bp]
19935 4CA0           80DC                   00  sbb	ah,*0
19936                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19937 4CA3           8B4E         F8            mov	cx,-8[bp]
19938 4CA6           F7E9                       imul	cx
19939                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19940 4CA8           0246         0A            add	al,$A[bp]
19941 4CAB           80D4                   00  adc	ah,*0
19942                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19943 4CAE           D1E0                       shl	ax,*1
19944                                           ! Debug: list unsigned int = ax+0 (used reg = )
19945 4CB0           50                         push	ax
19946                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19947 4CB1           8A46         FE            mov	al,-2[bp]
19948 4CB4           30E4                       xor	ah,ah
19949 4CB6           B1                     03  mov	cl,*3
19950 4CB8           D3E0                       shl	ax,cl
19951 4CBA           89C3                       mov	bx,ax
19952 4CBC           81C3                 020D  add	bx,#_vga_modes
19953                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19954 4CC0           FF77         04            push	4[bx]
19955                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19956 4CC3           8B46         F4            mov	ax,-$C[bp]
19957 4CC6           8B4E         F8            mov	cx,-8[bp]
19958 4CC9           F7E9                       imul	cx
19959                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19960 4CCB           0246         0A            add	al,$A[bp]
19961 4CCE           80D4                   00  adc	ah,*0
19962                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19963 4CD1           D1E0                       shl	ax,*1
19964                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19965                                           ! Debug: expression subtree swapping
19966 4CD3           0346         F2            add	ax,-$E[bp]
19967                                           ! Debug: list unsigned int = ax+0 (used reg = )
19968 4CD6           50                         push	ax
19969                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19970 4CD7           8A46         FE            mov	al,-2[bp]
19971 4CDA           30E4                       xor	ah,ah
19972 4CDC           B1                     03  mov	cl,*3
19973 4CDE           D3E0                       shl	ax,cl
19974 4CE0           89C3                       mov	bx,ax
19975 4CE2           81C3                 020D  add	bx,#_vga_modes
19976                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19977 4CE6           FF77         04            push	4[bx]
19978                                           ! Debug: func () void = memcpyw+0 (used reg = )
19979 4CE9           E8         3000            call	_memcpyw
19980 4CEC           83C4                   0A  add	sp,*$A
19981                                           !BCC_EOS
19982                                           ! 2304          if (i>rlr) break;
19983                       00004CEF            .FD:
19984                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19985 4CEF           8A46         0C            mov	al,$C[bp]
19986 4CF2           30E4                       xor	ah,ah
19987 4CF4           3B46         F4            cmp	ax,-$C[bp]
19988 4CF7           73           02            jae 	.FE
19989                       00004CF9            .FF:
19990 4CF9           EB           13            jmp .F6
19991                                           !BCC_EOS
19992                                           ! 2305         }
19993                       00004CFB            .FE:
19994                                           ! 2306       }
19995                       00004CFB            .F7:
19996                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19997 4CFB           8B46         F4            mov	ax,-$C[bp]
19998 4CFE           48                         dec	ax
19999 4CFF           8946         F4            mov	-$C[bp],ax
20000                       00004D02            .F8:
20001                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20002 4D02           8A46         08            mov	al,8[bp]
20003 4D05           30E4                       xor	ah,ah
20004 4D07           3B46         F4            cmp	ax,-$C[bp]
20005 4D0A         0F86         FF2D            blos	.F9
20006                       00004D0E            .100:
20007                       00004D0E            .F6:
20008                                           ! 2307     }
20009                       00004D0E            .F5:
20010                                           ! 2308   }
20011                       00004D0E            .E9:
20012                                           ! 2309  else
20013                                           ! 2310   {
20014 4D0E           E9         03E3            br 	.101
20015                       00004D11            .E0:
20016                                           ! 2311    cheight=video_param_table[line_to_vpti[line]].cheight;
20017                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
20018 4D11           8A46         FE            mov	al,-2[bp]
20019 4D14           30E4                       xor	ah,ah
20020 4D16           89C3                       mov	bx,ax
20021                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
20022 4D18           8A87       028D            mov	al,_line_to_vpti[bx]
20023 4D1C           30E4                       xor	ah,ah
20024 4D1E           B1                     06  mov	cl,*6
20025 4D20           D3E0                       shl	ax,cl
20026 4D22           89C3                       mov	bx,ax
20027 4D24           81C3                 02A1  add	bx,#_video_param_table
20028                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
20029 4D28           8A47         02            mov	al,2[bx]
20030 4D2B           8846         FD            mov	-3[bp],al
20031                                           !BCC_EOS
20032                                           ! 2312    switch(vga_modes[line].memmodel)
20033                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20034 4D2E           8A46         FE            mov	al,-2[bp]
20035 4D31           30E4                       xor	ah,ah
20036 4D33           B1                     03  mov	cl,*3
20037 4D35           D3E0                       shl	ax,cl
20038 4D37           89C3                       mov	bx,ax
20039 4D39           81C3                 020D  add	bx,#_vga_modes
20040 4D3D           8A47         02            mov	al,2[bx]
20041                                           ! 2313     {
20042 4D40           E9         039D            br 	.104
20043                                           ! 2314      case 0x04:
20044                                           ! 2315      case 0x03:
20045                       00004D43            .105:
20046                                           ! 2316        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20047                       00004D43            .106:
20048                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20049 4D43           8A46         04            mov	al,4[bp]
20050 4D46           84C0                       test	al,al
20051 4D48         0F85         0089            bne 	.107
20052                       00004D4C            .10C:
20053                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20054 4D4C           8A46         08            mov	al,8[bp]
20055 4D4F           84C0                       test	al,al
20056 4D51         0F85         0080            bne 	.107
20057                       00004D55            .10B:
20058                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20059 4D55           8A46         0A            mov	al,$A[bp]
20060 4D58           84C0                       test	al,al
20061 4D5A           75           79            jne 	.107
20062                       00004D5C            .10A:
20063                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20064 4D5C           8B46         F6            mov	ax,-$A[bp]
20065                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20066                                           ! Debug: expression subtree swapping
20067 4D5F           48                         dec	ax
20068 4D60           50                         push	ax
20069 4D61           8A46         0C            mov	al,$C[bp]
20070 4D64           30E4                       xor	ah,ah
20071 4D66           3B46         F0            cmp	ax,0+..FFFC[bp]
20072 4D69           8D66         F2            lea	sp,2+..FFFC[bp]
20073 4D6C           75           67            jne 	.107
20074                       00004D6E            .109:
20075                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20076 4D6E           8B46         F8            mov	ax,-8[bp]
20077                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20078                                           ! Debug: expression subtree swapping
20079 4D71           48                         dec	ax
20080 4D72           50                         push	ax
20081 4D73           8A46         0E            mov	al,$E[bp]
20082 4D76           30E4                       xor	ah,ah
20083 4D78           3B46         F0            cmp	ax,0+..FFFC[bp]
20084 4D7B           8D66         F2            lea	sp,2+..FFFC[bp]
20085 4D7E           75           55            jne 	.107
20086                       00004D80            .108:
20087                                           ! 2317         {
20088                                           ! 2318          outw(0x3ce, 0x0205);
20089                                           ! Debug: list int = const $205 (used reg = )
20090 4D80           B8                   0205  mov	ax,#$205
20091 4D83           50                         push	ax
20092                                           ! Debug: list int = const $3CE (used reg = )
20093 4D84           B8                   03CE  mov	ax,#$3CE
20094 4D87           50                         push	ax
20095                                           ! Debug: func () void = outw+0 (used reg = )
20096 4D88           E8         300D            call	_outw
20097 4D8B           83C4                   04  add	sp,*4
20098                                           !BCC_EOS
20099                                           ! 2319          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
20100                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20101 4D8E           8B46         F6            mov	ax,-$A[bp]
20102 4D91           8B4E         F8            mov	cx,-8[bp]
20103 4D94           F7E9                       imul	cx
20104                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20105 4D96           89C3                       mov	bx,ax
20106 4D98           8A46         FD            mov	al,-3[bp]
20107 4D9B           30E4                       xor	ah,ah
20108 4D9D           93                         xchg	ax,bx
20109 4D9E           89D9                       mov	cx,bx
20110 4DA0           F7E9                       imul	cx
20111                                           ! Debug: list unsigned int = ax+0 (used reg = )
20112 4DA2           50                         push	ax
20113                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20114 4DA3           8A46         06            mov	al,6[bp]
20115 4DA6           30E4                       xor	ah,ah
20116 4DA8           50                         push	ax
20117                                           ! Debug: list int = const 0 (used reg = )
20118 4DA9           31C0                       xor	ax,ax
20119 4DAB           50                         push	ax
20120                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20121 4DAC           8A46         FE            mov	al,-2[bp]
20122 4DAF           30E4                       xor	ah,ah
20123 4DB1           B1                     03  mov	cl,*3
20124 4DB3           D3E0                       shl	ax,cl
20125 4DB5           89C3                       mov	bx,ax
20126 4DB7           81C3                 020D  add	bx,#_vga_modes
20127                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20128 4DBB           FF77         04            push	4[bx]
20129                                           ! Debug: func () void = memsetb+0 (used reg = )
20130 4DBE           E8         2EB1            call	_memsetb
20131 4DC1           83C4                   08  add	sp,*8
20132                                           !BCC_EOS
20133                                           ! 2320          outw(0x3ce, 0x0005);
20134                                           ! Debug: list int = const 5 (used reg = )
20135 4DC4           B8                   0005  mov	ax,*5
20136 4DC7           50                         push	ax
20137                                           ! Debug: list int = const $3CE (used reg = )
20138 4DC8           B8                   03CE  mov	ax,#$3CE
20139 4DCB           50                         push	ax
20140                                           ! Debug: func () void = outw+0 (used reg = )
20141 4DCC           E8         2FC9            call	_outw
20142 4DCF           83C4                   04  add	sp,*4
20143                                           !BCC_EOS
20144                                           ! 2321         }
20145                                           ! 2322        else
20146                                           ! 2323         {
20147 4DD2           E9         0121            br 	.10D
20148                       00004DD5            .107:
20149                                           ! 2324          if(dir==1)
20150                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20151 4DD5           8A46         12            mov	al,$12[bp]
20152 4DD8           3C                     01  cmp	al,*1
20153 4DDA         0F85         008A            bne 	.10E
20154                       00004DDE            .10F:
20155                                           ! 2325           {for(i=rul;i<=rlr;i++)
20156                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20157 4DDE           8A46         08            mov	al,8[bp]
20158 4DE1           30E4                       xor	ah,ah
20159 4DE3           8946         F4            mov	-$C[bp],ax
20160                                           !BCC_EOS
20161                                           !BCC_EOS
20162                                           ! 2326             {
20163 4DE6           EB           73            jmp .112
20164                       00004DE8            .113:
20165                                           ! 2327              if((i+nblines>rlr)||(nblines==0))
20166                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20167 4DE8           8B46         F4            mov	ax,-$C[bp]
20168 4DEB           0246         04            add	al,4[bp]
20169 4DEE           80D4                   00  adc	ah,*0
20170                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20171 4DF1           50                         push	ax
20172 4DF2           8A46         0C            mov	al,$C[bp]
20173 4DF5           30E4                       xor	ah,ah
20174 4DF7           3B46         F0            cmp	ax,0+..FFFC[bp]
20175 4DFA           8D66         F2            lea	sp,2+..FFFC[bp]
20176 4DFD           72           07            jb  	.115
20177                       00004DFF            .116:
20178                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20179 4DFF           8A46         04            mov	al,4[bp]
20180 4E02           84C0                       test	al,al
20181 4E04           75           26            jne 	.114
20182                       00004E06            .115:
20183                                           ! 2328               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20184                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20185 4E06           8A46         06            mov	al,6[bp]
20186 4E09           30E4                       xor	ah,ah
20187 4E0B           50                         push	ax
20188                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20189 4E0C           8A46         FD            mov	al,-3[bp]
20190 4E0F           30E4                       xor	ah,ah
20191 4E11           50                         push	ax
20192                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20193 4E12           FF76         F8            push	-8[bp]
20194                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20195 4E15           8A46         FB            mov	al,-5[bp]
20196 4E18           30E4                       xor	ah,ah
20197 4E1A           50                         push	ax
20198                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20199 4E1B           FF76         F4            push	-$C[bp]
20200                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20201 4E1E           8A46         0A            mov	al,$A[bp]
20202 4E21           30E4                       xor	ah,ah
20203 4E23           50                         push	ax
20204                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20205 4E24           E8         F952            call	_vgamem_fill_pl4
20206 4E27           83C4                   0C  add	sp,*$C
20207                                           !BCC_EOS
20208                                           ! 2329              else
20209                                           ! 2330               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20210 4E2A           EB           28            jmp .117
20211                       00004E2C            .114:
20212                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20213 4E2C           8A46         FD            mov	al,-3[bp]
20214 4E2F           30E4                       xor	ah,ah
20215 4E31           50                         push	ax
20216                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20217 4E32           FF76         F8            push	-8[bp]
20218                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20219 4E35           8A46         FB            mov	al,-5[bp]
20220 4E38           30E4                       xor	ah,ah
20221 4E3A           50                         push	ax
20222                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20223 4E3B           FF76         F4            push	-$C[bp]
20224                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20225 4E3E           8B46         F4            mov	ax,-$C[bp]
20226 4E41           0246         04            add	al,4[bp]
20227 4E44           80D4                   00  adc	ah,*0
20228                                           ! Debug: list unsigned int = ax+0 (used reg = )
20229 4E47           50                         push	ax
20230                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20231 4E48           8A46         0A            mov	al,$A[bp]
20232 4E4B           30E4                       xor	ah,ah
20233 4E4D           50                         push	ax
20234                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20235 4E4E           E8         F866            call	_vgamem_copy_pl4
20236 4E51           83C4                   0C  add	sp,*$C
20237                                           !BCC_EOS
20238                                           ! 2331             }
20239                       00004E54            .117:
20240                                           ! 2332           }
20241                       00004E54            .111:
20242                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20243 4E54           8B46         F4            mov	ax,-$C[bp]
20244 4E57           40                         inc	ax
20245 4E58           8946         F4            mov	-$C[bp],ax
20246                       00004E5B            .112:
20247                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20248 4E5B           8A46         0C            mov	al,$C[bp]
20249 4E5E           30E4                       xor	ah,ah
20250 4E60           3B46         F4            cmp	ax,-$C[bp]
20251 4E63           73           83            jae	.113
20252                       00004E65            .118:
20253                       00004E65            .110:
20254                                           ! 2333          else
20255                                           ! 2334           {for(i=rlr;i>=rul;i--)
20256 4E65           E9         008E            br 	.119
20257                       00004E68            .10E:
20258                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20259 4E68           8A46         0C            mov	al,$C[bp]
20260 4E6B           30E4                       xor	ah,ah
20261 4E6D           8946         F4            mov	-$C[bp],ax
20262                                           !BCC_EOS
20263                                           !BCC_EOS
20264                                           ! 2335             {
20265 4E70           EB           78            jmp .11C
20266                       00004E72            .11D:
20267                                           ! 2336              if((i<rul+nblines)||(nblines==0))
20268                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20269 4E72           8A46         08            mov	al,8[bp]
20270 4E75           30E4                       xor	ah,ah
20271 4E77           0246         04            add	al,4[bp]
20272 4E7A           80D4                   00  adc	ah,*0
20273                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20274 4E7D           3B46         F4            cmp	ax,-$C[bp]
20275 4E80           77           07            ja  	.11F
20276                       00004E82            .120:
20277                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20278 4E82           8A46         04            mov	al,4[bp]
20279 4E85           84C0                       test	al,al
20280 4E87           75           26            jne 	.11E
20281                       00004E89            .11F:
20282                                           ! 2337               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20283                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20284 4E89           8A46         06            mov	al,6[bp]
20285 4E8C           30E4                       xor	ah,ah
20286 4E8E           50                         push	ax
20287                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20288 4E8F           8A46         FD            mov	al,-3[bp]
20289 4E92           30E4                       xor	ah,ah
20290 4E94           50                         push	ax
20291                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20292 4E95           FF76         F8            push	-8[bp]
20293                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20294 4E98           8A46         FB            mov	al,-5[bp]
20295 4E9B           30E4                       xor	ah,ah
20296 4E9D           50                         push	ax
20297                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20298 4E9E           FF76         F4            push	-$C[bp]
20299                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20300 4EA1           8A46         0A            mov	al,$A[bp]
20301 4EA4           30E4                       xor	ah,ah
20302 4EA6           50                         push	ax
20303                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20304 4EA7           E8         F8CF            call	_vgamem_fill_pl4
20305 4EAA           83C4                   0C  add	sp,*$C
20306                                           !BCC_EOS
20307                                           ! 2338              else
20308                                           ! 2339               vgamem_copy_pl4(cul,i,i-nblines,co
20309 4EAD           EB           28            jmp .121
20310                       00004EAF            .11E:
20311                                           ! 2339 ls,nbcols,cheight);
20312                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20313 4EAF           8A46         FD            mov	al,-3[bp]
20314 4EB2           30E4                       xor	ah,ah
20315 4EB4           50                         push	ax
20316                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20317 4EB5           FF76         F8            push	-8[bp]
20318                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20319 4EB8           8A46         FB            mov	al,-5[bp]
20320 4EBB           30E4                       xor	ah,ah
20321 4EBD           50                         push	ax
20322                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20323 4EBE           8B46         F4            mov	ax,-$C[bp]
20324 4EC1           2A46         04            sub	al,4[bp]
20325 4EC4           80DC                   00  sbb	ah,*0
20326                                           ! Debug: list unsigned int = ax+0 (used reg = )
20327 4EC7           50                         push	ax
20328                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20329 4EC8           FF76         F4            push	-$C[bp]
20330                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20331 4ECB           8A46         0A            mov	al,$A[bp]
20332 4ECE           30E4                       xor	ah,ah
20333 4ED0           50                         push	ax
20334                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20335 4ED1           E8         F7E3            call	_vgamem_copy_pl4
20336 4ED4           83C4                   0C  add	sp,*$C
20337                                           !BCC_EOS
20338                                           ! 2340              if (i>rlr) break;
20339                       00004ED7            .121:
20340                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20341 4ED7           8A46         0C            mov	al,$C[bp]
20342 4EDA           30E4                       xor	ah,ah
20343 4EDC           3B46         F4            cmp	ax,-$C[bp]
20344 4EDF           73           02            jae 	.122
20345                       00004EE1            .123:
20346 4EE1           EB           13            jmp .11A
20347                                           !BCC_EOS
20348                                           ! 2341             }
20349                       00004EE3            .122:
20350                                           ! 2342           }
20351                       00004EE3            .11B:
20352                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20353 4EE3           8B46         F4            mov	ax,-$C[bp]
20354 4EE6           48                         dec	ax
20355 4EE7           8946         F4            mov	-$C[bp],ax
20356                       00004EEA            .11C:
20357                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20358 4EEA           8A46         08            mov	al,8[bp]
20359 4EED           30E4                       xor	ah,ah
20360 4EEF           3B46         F4            cmp	ax,-$C[bp]
20361 4EF2         0F86         FF7C            blos	.11D
20362                       00004EF6            .124:
20363                       00004EF6            .11A:
20364                                           ! 2343         }
20365                       00004EF6            .119:
20366                                           ! 2344        break;
20367                       00004EF6            .10D:
20368 4EF6           E9         01FB            br 	.102
20369                                           !BCC_EOS
20370                                           ! 2345      case 0x02:
20371                                           ! 2346        bpp=vga_modes[line].pixbits;
20372                       00004EF9            .125:
20373                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20374 4EF9           8A46         FE            mov	al,-2[bp]
20375 4EFC           30E4                       xor	ah,ah
20376 4EFE           B1                     03  mov	cl,*3
20377 4F00           D3E0                       shl	ax,cl
20378 4F02           89C3                       mov	bx,ax
20379 4F04           81C3                 020D  add	bx,#_vga_modes
20380                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20381 4F08           8A47         03            mov	al,3[bx]
20382 4F0B           8846         FC            mov	-4[bp],al
20383                                           !BCC_EOS
20384                                           ! 2347        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20385                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20386 4F0E           8A46         04            mov	al,4[bp]
20387 4F11           84C0                       test	al,al
20388 4F13           75           77            jne 	.126
20389                       00004F15            .12B:
20390                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20391 4F15           8A46         08            mov	al,8[bp]
20392 4F18           84C0                       test	al,al
20393 4F1A           75           70            jne 	.126
20394                       00004F1C            .12A:
20395                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20396 4F1C           8A46         0A            mov	al,$A[bp]
20397 4F1F           84C0                       test	al,al
20398 4F21           75           69            jne 	.126
20399                       00004F23            .129:
20400                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20401 4F23           8B46         F6            mov	ax,-$A[bp]
20402                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20403                                           ! Debug: expression subtree swapping
20404 4F26           48                         dec	ax
20405 4F27           50                         push	ax
20406 4F28           8A46         0C            mov	al,$C[bp]
20407 4F2B           30E4                       xor	ah,ah
20408 4F2D           3B46         F0            cmp	ax,0+..FFFC[bp]
20409 4F30           8D66         F2            lea	sp,2+..FFFC[bp]
20410 4F33           75           57            jne 	.126
20411                       00004F35            .128:
20412                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20413 4F35           8B46         F8            mov	ax,-8[bp]
20414                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20415                                           ! Debug: expression subtree swapping
20416 4F38           48                         dec	ax
20417 4F39           50                         push	ax
20418 4F3A           8A46         0E            mov	al,$E[bp]
20419 4F3D           30E4                       xor	ah,ah
20420 4F3F           3B46         F0            cmp	ax,0+..FFFC[bp]
20421 4F42           8D66         F2            lea	sp,2+..FFFC[bp]
20422 4F45           75           45            jne 	.126
20423                       00004F47            .127:
20424                                           ! 2348         {
20425                                           ! 2349          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20426                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20427 4F47           8B46         F6            mov	ax,-$A[bp]
20428 4F4A           8B4E         F8            mov	cx,-8[bp]
20429 4F4D           F7E9                       imul	cx
20430                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20431 4F4F           89C3                       mov	bx,ax
20432 4F51           8A46         FD            mov	al,-3[bp]
20433 4F54           30E4                       xor	ah,ah
20434 4F56           93                         xchg	ax,bx
20435 4F57           89D9                       mov	cx,bx
20436 4F59           F7E9                       imul	cx
20437                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20438 4F5B           89C3                       mov	bx,ax
20439 4F5D           8A46         FC            mov	al,-4[bp]
20440 4F60           30E4                       xor	ah,ah
20441 4F62           93                         xchg	ax,bx
20442 4F63           89D9                       mov	cx,bx
20443 4F65           F7E9                       imul	cx
20444                                           ! Debug: list unsigned int = ax+0 (used reg = )
20445 4F67           50                         push	ax
20446                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20447 4F68           8A46         06            mov	al,6[bp]
20448 4F6B           30E4                       xor	ah,ah
20449 4F6D           50                         push	ax
20450                                           ! Debug: list int = const 0 (used reg = )
20451 4F6E           31C0                       xor	ax,ax
20452 4F70           50                         push	ax
20453                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20454 4F71           8A46         FE            mov	al,-2[bp]
20455 4F74           30E4                       xor	ah,ah
20456 4F76           B1                     03  mov	cl,*3
20457 4F78           D3E0                       shl	ax,cl
20458 4F7A           89C3                       mov	bx,ax
20459 4F7C           81C3                 020D  add	bx,#_vga_modes
20460                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20461 4F80           FF77         04            push	4[bx]
20462                                           ! Debug: func () void = memsetb+0 (used reg = )
20463 4F83           E8         2CEC            call	_memsetb
20464 4F86           83C4                   08  add	sp,*8
20465                                           !BCC_EOS
20466                                           ! 2350         }
20467                                           ! 2351        else
20468                                           ! 2352         {
20469 4F89           E9         0144            br 	.12C
20470                       00004F8C            .126:
20471                                           ! 2353          if(bpp==2)
20472                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20473 4F8C           8A46         FC            mov	al,-4[bp]
20474 4F8F           3C                     02  cmp	al,*2
20475 4F91           75           1C            jne 	.12D
20476                       00004F93            .12E:
20477                                           ! 2354           {
20478                                           ! 2355            cul<<=1;
20479                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20480 4F93           8A46         0A            mov	al,$A[bp]
20481 4F96           30E4                       xor	ah,ah
20482 4F98           D1E0                       shl	ax,*1
20483 4F9A           8846         0A            mov	$A[bp],al
20484                                           !BCC_EOS
20485                                           ! 2356            cols<<=1;
20486                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20487 4F9D           8A46         FB            mov	al,-5[bp]
20488 4FA0           30E4                       xor	ah,ah
20489 4FA2           D1E0                       shl	ax,*1
20490 4FA4           8846         FB            mov	-5[bp],al
20491                                           !BCC_EOS
20492                                           ! 2357            nbcols<<=1;
20493                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20494 4FA7           8B46         F8            mov	ax,-8[bp]
20495 4FAA           D1E0                       shl	ax,*1
20496 4FAC           8946         F8            mov	-8[bp],ax
20497                                           !BCC_EOS
20498                                           ! 2358           }
20499                                           ! 2359          if(dir==1)
20500                       00004FAF            .12D:
20501                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20502 4FAF           8A46         12            mov	al,$12[bp]
20503 4FB2           3C                     01  cmp	al,*1
20504 4FB4         0F85         008A            bne 	.12F
20505                       00004FB8            .130:
20506                                           ! 2360           {for(i=rul;i<=rlr;i++)
20507                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20508 4FB8           8A46         08            mov	al,8[bp]
20509 4FBB           30E4                       xor	ah,ah
20510 4FBD           8946         F4            mov	-$C[bp],ax
20511                                           !BCC_EOS
20512                                           !BCC_EOS
20513                                           ! 2361             {
20514 4FC0           EB           73            jmp .133
20515                       00004FC2            .134:
20516                                           ! 2362              if((i+nblines>rlr)||(nblines==0))
20517                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20518 4FC2           8B46         F4            mov	ax,-$C[bp]
20519 4FC5           0246         04            add	al,4[bp]
20520 4FC8           80D4                   00  adc	ah,*0
20521                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20522 4FCB           50                         push	ax
20523 4FCC           8A46         0C            mov	al,$C[bp]
20524 4FCF           30E4                       xor	ah,ah
20525 4FD1           3B46         F0            cmp	ax,0+..FFFC[bp]
20526 4FD4           8D66         F2            lea	sp,2+..FFFC[bp]
20527 4FD7           72           07            jb  	.136
20528                       00004FD9            .137:
20529                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20530 4FD9           8A46         04            mov	al,4[bp]
20531 4FDC           84C0                       test	al,al
20532 4FDE           75           26            jne 	.135
20533                       00004FE0            .136:
20534                                           ! 2363               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20535                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20536 4FE0           8A46         06            mov	al,6[bp]
20537 4FE3           30E4                       xor	ah,ah
20538 4FE5           50                         push	ax
20539                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20540 4FE6           8A46         FD            mov	al,-3[bp]
20541 4FE9           30E4                       xor	ah,ah
20542 4FEB           50                         push	ax
20543                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20544 4FEC           FF76         F8            push	-8[bp]
20545                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20546 4FEF           8A46         FB            mov	al,-5[bp]
20547 4FF2           30E4                       xor	ah,ah
20548 4FF4           50                         push	ax
20549                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20550 4FF5           FF76         F4            push	-$C[bp]
20551                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20552 4FF8           8A46         0A            mov	al,$A[bp]
20553 4FFB           30E4                       xor	ah,ah
20554 4FFD           50                         push	ax
20555                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20556 4FFE           E8         F915            call	_vgamem_fill_cga
20557 5001           83C4                   0C  add	sp,*$C
20558                                           !BCC_EOS
20559                                           ! 2364              else
20560                                           ! 2365               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20561 5004           EB           28            jmp .138
20562                       00005006            .135:
20563                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20564 5006           8A46         FD            mov	al,-3[bp]
20565 5009           30E4                       xor	ah,ah
20566 500B           50                         push	ax
20567                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20568 500C           FF76         F8            push	-8[bp]
20569                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20570 500F           8A46         FB            mov	al,-5[bp]
20571 5012           30E4                       xor	ah,ah
20572 5014           50                         push	ax
20573                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20574 5015           FF76         F4            push	-$C[bp]
20575                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20576 5018           8B46         F4            mov	ax,-$C[bp]
20577 501B           0246         04            add	al,4[bp]
20578 501E           80D4                   00  adc	ah,*0
20579                                           ! Debug: list unsigned int = ax+0 (used reg = )
20580 5021           50                         push	ax
20581                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20582 5022           8A46         0A            mov	al,$A[bp]
20583 5025           30E4                       xor	ah,ah
20584 5027           50                         push	ax
20585                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20586 5028           E8         F7D9            call	_vgamem_copy_cga
20587 502B           83C4                   0C  add	sp,*$C
20588                                           !BCC_EOS
20589                                           ! 2366             }
20590                       0000502E            .138:
20591                                           ! 2367           }
20592                       0000502E            .132:
20593                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20594 502E           8B46         F4            mov	ax,-$C[bp]
20595 5031           40                         inc	ax
20596 5032           8946         F4            mov	-$C[bp],ax
20597                       00005035            .133:
20598                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20599 5035           8A46         0C            mov	al,$C[bp]
20600 5038           30E4                       xor	ah,ah
20601 503A           3B46         F4            cmp	ax,-$C[bp]
20602 503D           73           83            jae	.134
20603                       0000503F            .139:
20604                       0000503F            .131:
20605                                           ! 2368          else
20606                                           ! 2369           {for(i=rlr;i>=rul;i--)
20607 503F           E9         008E            br 	.13A
20608                       00005042            .12F:
20609                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20610 5042           8A46         0C            mov	al,$C[bp]
20611 5045           30E4                       xor	ah,ah
20612 5047           8946         F4            mov	-$C[bp],ax
20613                                           !BCC_EOS
20614                                           !BCC_EOS
20615                                           ! 2370             {
20616 504A           EB           78            jmp .13D
20617                       0000504C            .13E:
20618                                           ! 2371              if((i<rul+nblines)||(nblines==0))
20619                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20620 504C           8A46         08            mov	al,8[bp]
20621 504F           30E4                       xor	ah,ah
20622 5051           0246         04            add	al,4[bp]
20623 5054           80D4                   00  adc	ah,*0
20624                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20625 5057           3B46         F4            cmp	ax,-$C[bp]
20626 505A           77           07            ja  	.140
20627                       0000505C            .141:
20628                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20629 505C           8A46         04            mov	al,4[bp]
20630 505F           84C0                       test	al,al
20631 5061           75           26            jne 	.13F
20632                       00005063            .140:
20633                                           ! 2372               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20634                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20635 5063           8A46         06            mov	al,6[bp]
20636 5066           30E4                       xor	ah,ah
20637 5068           50                         push	ax
20638                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20639 5069           8A46         FD            mov	al,-3[bp]
20640 506C           30E4                       xor	ah,ah
20641 506E           50                         push	ax
20642                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20643 506F           FF76         F8            push	-8[bp]
20644                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20645 5072           8A46         FB            mov	al,-5[bp]
20646 5075           30E4                       xor	ah,ah
20647 5077           50                         push	ax
20648                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20649 5078           FF76         F4            push	-$C[bp]
20650                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20651 507B           8A46         0A            mov	al,$A[bp]
20652 507E           30E4                       xor	ah,ah
20653 5080           50                         push	ax
20654                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20655 5081           E8         F892            call	_vgamem_fill_cga
20656 5084           83C4                   0C  add	sp,*$C
20657                                           !BCC_EOS
20658                                           ! 2373              else
20659                                           ! 2374               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20660 5087           EB           28            jmp .142
20661                       00005089            .13F:
20662                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20663 5089           8A46         FD            mov	al,-3[bp]
20664 508C           30E4                       xor	ah,ah
20665 508E           50                         push	ax
20666                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20667 508F           FF76         F8            push	-8[bp]
20668                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20669 5092           8A46         FB            mov	al,-5[bp]
20670 5095           30E4                       xor	ah,ah
20671 5097           50                         push	ax
20672                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20673 5098           8B46         F4            mov	ax,-$C[bp]
20674 509B           2A46         04            sub	al,4[bp]
20675 509E           80DC                   00  sbb	ah,*0
20676                                           ! Debug: list unsigned int = ax+0 (used reg = )
20677 50A1           50                         push	ax
20678                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20679 50A2           FF76         F4            push	-$C[bp]
20680                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20681 50A5           8A46         0A            mov	al,$A[bp]
20682 50A8           30E4                       xor	ah,ah
20683 50AA           50                         push	ax
20684                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20685 50AB           E8         F756            call	_vgamem_copy_cga
20686 50AE           83C4                   0C  add	sp,*$C
20687                                           !BCC_EOS
20688                                           ! 2375              if (i>rlr) break;
20689                       000050B1            .142:
20690                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20691 50B1           8A46         0C            mov	al,$C[bp]
20692 50B4           30E4                       xor	ah,ah
20693 50B6           3B46         F4            cmp	ax,-$C[bp]
20694 50B9           73           02            jae 	.143
20695                       000050BB            .144:
20696 50BB           EB           13            jmp .13B
20697                                           !BCC_EOS
20698                                           ! 2376             }
20699                       000050BD            .143:
20700                                           ! 2377           }
20701                       000050BD            .13C:
20702                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20703 50BD           8B46         F4            mov	ax,-$C[bp]
20704 50C0           48                         dec	ax
20705 50C1           8946         F4            mov	-$C[bp],ax
20706                       000050C4            .13D:
20707                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20708 50C4           8A46         08            mov	al,8[bp]
20709 50C7           30E4                       xor	ah,ah
20710 50C9           3B46         F4            cmp	ax,-$C[bp]
20711 50CC         0F86         FF7C            blos	.13E
20712                       000050D0            .145:
20713                       000050D0            .13B:
20714                                           ! 2378         }
20715                       000050D0            .13A:
20716                                           ! 2379        break;
20717                       000050D0            .12C:
20718 50D0           EB           22            jmp .102
20719                                           !BCC_EOS
20720                                           ! 2380      default:
20721                                           ! 2381        printf("Scroll in graphics mode ");
20722                       000050D2            .146:
20723                                           ! Debug: list * char = .147+0 (used reg = )
20724 50D2           BB                   A0BA  mov	bx,#.147
20725 50D5           53                         push	bx
20726                                           ! Debug: func () void = printf+0 (used reg = )
20727 50D6           E8         2CEE            call	_printf
20728 50D9           44                         inc	sp
20729 50DA           44                         inc	sp
20730                                           !BCC_EOS
20731                                           ! 2382        unimplemented();
20732                                           ! Debug: func () void = unimplemented+0 (used reg = )
20733 50DB           E8         2CCD            call	_unimplemented
20734                                           !BCC_EOS
20735                                           ! 2383     }
20736                                           ! 2384   }
20737 50DE           EB           14            jmp .102
20738                       000050E0            .104:
20739 50E0           2C                     02  sub	al,*2
20740 50E2         0F84         FE13            beq 	.125
20741 50E6           2C                     01  sub	al,*1
20742 50E8         0F84         FC57            beq 	.106
20743 50EC           2C                     01  sub	al,*1
20744 50EE         0F84         FC51            beq 	.105
20745 50F2           EB           DE            jmp	.146
20746                       000050F4            .102:
20747                       FFFFFFF0            ..FFFC	=	-$10
20748                                           ! 2385 }
20749                       000050F4            .101:
20750 50F4           89EC                       mov	sp,bp
20751 50F6           5D                         pop	bp
20752 50F7           C3                         ret
20753                                           ! 2386 static void biosfn_read_char_attr (page,car)
20754                                           ! Register BX used in function biosfn_scroll
20755                                           ! 2387 Bit8u page;Bit16u *car;
20756                       000050F8            _biosfn_read_char_attr:
20757                                           !BCC_EOS
20758                                           !BCC_EOS
20759                                           ! 2388 {Bit16u ss=get_SS();
20760 50F8           55                         push	bp
20761 50F9           89E5                       mov	bp,sp
20762 50FB           4C                         dec	sp
20763 50FC           4C                         dec	sp
20764                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20765 50FD           E8         2CA8            call	_get_SS
20766                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20767 5100           8946         FE            mov	-2[bp],ax
20768                                           !BCC_EOS
20769                                           ! 2389  Bit8u xcurs,ycurs,mode,line;
20770                                           !BCC_EOS
20771                                           ! 2390  Bit16u nbcols,nbrows,address;
20772                                           !BCC_EOS
20773                                           ! 2391  Bit16u cursor,dummy;
20774                                           !BCC_EOS
20775                                           ! 2392  mode=read_byte(0x40,0x49);
20776 5103           83C4                   F2  add	sp,*-$E
20777                                           ! Debug: list int = const $49 (used reg = )
20778 5106           B8                   0049  mov	ax,*$49
20779 5109           50                         push	ax
20780                                           ! Debug: list int = const $40 (used reg = )
20781 510A           B8                   0040  mov	ax,*$40
20782 510D           50                         push	ax
20783                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20784 510E           E8         2C0B            call	_read_byte
20785 5111           83C4                   04  add	sp,*4
20786                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20787 5114           8846         FB            mov	-5[bp],al
20788                                           !BCC_EOS
20789                                           ! 2393  line=find_vga_entry(mode);
20790                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20791 5117           8A46         FB            mov	al,-5[bp]
20792 511A           30E4                       xor	ah,ah
20793 511C           50                         push	ax
20794                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20795 511D           E8         2B10            call	_find_vga_entry
20796 5120           44                         inc	sp
20797 5121           44                         inc	sp
20798                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20799 5122           8846         FA            mov	-6[bp],al
20800                                           !BCC_EOS
20801                                           ! 2394  if(line==0xFF)return;
20802                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20803 5125           8A46         FA            mov	al,-6[bp]
20804 5128           3C                     FF  cmp	al,#$FF
20805 512A           75           04            jne 	.148
20806                       0000512C            .149:
20807 512C           89EC                       mov	sp,bp
20808 512E           5D                         pop	bp
20809 512F           C3                         ret
20810                                           !BCC_EOS
20811                                           ! 2395  biosfn_get_cursor_pos(page,&dummy,&cursor);
20812                       00005130            .148:
20813                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20814 5130           8D5E         F2            lea	bx,-$E[bp]
20815 5133           53                         push	bx
20816                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20817 5134           8D5E         F0            lea	bx,-$10[bp]
20818 5137           53                         push	bx
20819                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20820 5138           8A46         04            mov	al,4[bp]
20821 513B           30E4                       xor	ah,ah
20822 513D           50                         push	ax
20823                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20824 513E           E8         F37F            call	_biosfn_get_cursor_pos
20825 5141           83C4                   06  add	sp,*6
20826                                           !BCC_EOS
20827                                           ! 2396  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20828                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20829 5144           8A46         F2            mov	al,-$E[bp]
20830                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20831 5147           8846         FD            mov	-3[bp],al
20832                                           !BCC_EOS
20833                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20834 514A           8B46         F2            mov	ax,-$E[bp]
20835 514D           30C0                       xor	al,al
20836                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20837 514F           88E0                       mov	al,ah
20838 5151           30E4                       xor	ah,ah
20839                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20840 5153           8846         FC            mov	-4[bp],al
20841                                           !BCC_EOS
20842                                           ! 2397  nbrows=read_byte(0x40,0x84)+1;
20843                                           ! Debug: list int = const $84 (used reg = )
20844 5156           B8                   0084  mov	ax,#$84
20845 5159           50                         push	ax
20846                                           ! Debug: list int = const $40 (used reg = )
20847 515A           B8                   0040  mov	ax,*$40
20848 515D           50                         push	ax
20849                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20850 515E           E8         2BBB            call	_read_byte
20851 5161           83C4                   04  add	sp,*4
20852                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20853 5164           30E4                       xor	ah,ah
20854                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20855 5166           40                         inc	ax
20856 5167           8946         F6            mov	-$A[bp],ax
20857                                           !BCC_EOS
20858                                           ! 2398  nbcols=read_word(0x40,0x4A);
20859                                           ! Debug: list int = const $4A (used reg = )
20860 516A           B8                   004A  mov	ax,*$4A
20861 516D           50                         push	ax
20862                                           ! Debug: list int = const $40 (used reg = )
20863 516E           B8                   0040  mov	ax,*$40
20864 5171           50                         push	ax
20865                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20866 5172           E8         2BBA            call	_read_word
20867 5175           83C4                   04  add	sp,*4
20868                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20869 5178           8946         F8            mov	-8[bp],ax
20870                                           !BCC_EOS
20871                                           ! 2399  if(vga_modes[line].class==0x00)
20872                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20873 517B           8A46         FA            mov	al,-6[bp]
20874 517E           30E4                       xor	ah,ah
20875 5180           B1                     03  mov	cl,*3
20876 5182           D3E0                       shl	ax,cl
20877 5184           89C3                       mov	bx,ax
20878 5186           81C3                 020D  add	bx,#_vga_modes
20879                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20880 518A           8A47         01            mov	al,1[bx]
20881 518D           84C0                       test	al,al
20882 518F           75           5E            jne 	.14A
20883                       00005191            .14B:
20884                                           ! 2400   {
20885                                           ! 2401    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20886                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20887 5191           8A46         FC            mov	al,-4[bp]
20888 5194           30E4                       xor	ah,ah
20889 5196           8B4E         F8            mov	cx,-8[bp]
20890 5199           F7E9                       imul	cx
20891                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20892                                           ! Debug: expression subtree swapping
20893 519B           0246         FD            add	al,-3[bp]
20894 519E           80D4                   00  adc	ah,*0
20895                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20896 51A1           D1E0                       shl	ax,*1
20897 51A3           50                         push	ax
20898                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20899 51A4           8B46         F8            mov	ax,-8[bp]
20900 51A7           8B4E         F6            mov	cx,-$A[bp]
20901 51AA           F7E9                       imul	cx
20902                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20903 51AC           D1E0                       shl	ax,*1
20904                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20905 51AE           0C                     FF  or	al,#$FF
20906                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20907                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20908 51B0           89C3                       mov	bx,ax
20909 51B2           8A46         04            mov	al,4[bp]
20910 51B5           30E4                       xor	ah,ah
20911 51B7           93                         xchg	ax,bx
20912 51B8           40                         inc	ax
20913 51B9           89D9                       mov	cx,bx
20914 51BB           F7E9                       imul	cx
20915                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20916 51BD           0346         EE            add	ax,-$12[bp]
20917 51C0           44                         inc	sp
20918 51C1           44                         inc	sp
20919                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20920 51C2           8946         F4            mov	-$C[bp],ax
20921                                           !BCC_EOS
20922                                           ! 2402    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20923                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20924 51C5           FF76         F4            push	-$C[bp]
20925                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20926 51C8           8A46         FA            mov	al,-6[bp]
20927 51CB           30E4                       xor	ah,ah
20928 51CD           B1                     03  mov	cl,*3
20929 51CF           D3E0                       shl	ax,cl
20930 51D1           89C3                       mov	bx,ax
20931 51D3           81C3                 020D  add	bx,#_vga_modes
20932                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20933 51D7           FF77         04            push	4[bx]
20934                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20935 51DA           E8         2B52            call	_read_word
20936 51DD           83C4                   04  add	sp,*4
20937                                           ! Debug: list unsigned short = ax+0 (used reg = )
20938 51E0           50                         push	ax
20939                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20940 51E1           FF76         06            push	6[bp]
20941                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20942 51E4           FF76         FE            push	-2[bp]
20943                                           ! Debug: func () void = write_word+0 (used reg = )
20944 51E7           E8         2B70            call	_write_word
20945 51EA           83C4                   06  add	sp,*6
20946                                           !BCC_EOS
20947                                           ! 2403   }
20948                                           ! 2404  else
20949                                           ! 2405   {
20950 51ED           EB           03            jmp .14C
20951                       000051EF            .14A:
20952                                           ! 2406    unimplemented();
20953                                           ! Debug: func () void = unimplemented+0 (used reg = )
20954 51EF           E8         2BB9            call	_unimplemented
20955                                           !BCC_EOS
20956                                           ! 2407   }
20957                                           ! 2408 }
20958                       000051F2            .14C:
20959 51F2           89EC                       mov	sp,bp
20960 51F4           5D                         pop	bp
20961 51F5           C3                         ret
20962                                           ! 2409 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20963                                           ! Register BX used in function biosfn_read_char_attr
20964                                           ! 2410 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20965                       000051F6            _write_gfx_char_pl4:
20966                                           !BCC_EOS
20967                                           !BCC_EOS
20968                                           !BCC_EOS
20969                                           !BCC_EOS
20970                                           !BCC_EOS
20971                                           !BCC_EOS
20972                                           ! 2411 {
20973                                           ! 2412  Bit8u i,j,mask;
20974                                           !BCC_EOS
20975                                           ! 2413  Bit8u *fdata;
20976                                           !BCC_EOS
20977                                           ! 2414  Bit16u addr,dest,src;
20978                                           !BCC_EOS
20979                                           ! 2415  switch(cheight)
20980 51F6           55                         push	bp
20981 51F7           89E5                       mov	bp,sp
20982 51F9           83C4                   F4  add	sp,*-$C
20983 51FC           8A46         0E            mov	al,$E[bp]
20984                                           ! 2416   {case 14:
20985 51FF           EB           18            jmp .14F
20986                                           ! 2417     fdata = &vgafont14;
20987                       00005201            .150:
20988                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20989 5201           BB                   1771  mov	bx,#_vgafont14
20990 5204           895E         FA            mov	-6[bp],bx
20991                                           !BCC_EOS
20992                                           ! 2418     break;
20993                                           ! 2418 
20994 5207           EB           1A            jmp .14D
20995                                           !BCC_EOS
20996                                           ! 2419    case 16:
20997                                           ! 2420     fdata = &vgafont16;
20998                       00005209            .151:
20999                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21000 5209           BB                   2571  mov	bx,#_vgafont16
21001 520C           895E         FA            mov	-6[bp],bx
21002                                           !BCC_EOS
21003                                           ! 2421     break;
21004 520F           EB           12            jmp .14D
21005                                           !BCC_EOS
21006                                           ! 2422    default:
21007                                           ! 2423     fdata = &vgafont8;
21008                       00005211            .152:
21009                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21010 5211           BB                   0F71  mov	bx,#_vgafont8
21011 5214           895E         FA            mov	-6[bp],bx
21012                                           !BCC_EOS
21013                                           ! 2424   }
21014                                           ! 2425  addr=xcurs+ycurs*cheight*nbcols;
21015 5217           EB           0A            jmp .14D
21016                       00005219            .14F:
21017 5219           2C                     0E  sub	al,*$E
21018 521B           74           E4            je 	.150
21019 521D           2C                     02  sub	al,*2
21020 521F           74           E8            je 	.151
21021 5221           EB           EE            jmp	.152
21022                       00005223            .14D:
21023                       FFFFFFF2            ..FFFB	=	-$E
21024                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
21025 5223           8A46         0E            mov	al,$E[bp]
21026 5226           30E4                       xor	ah,ah
21027 5228           89C3                       mov	bx,ax
21028 522A           8A46         0A            mov	al,$A[bp]
21029 522D           30E4                       xor	ah,ah
21030 522F           89D9                       mov	cx,bx
21031 5231           F7E9                       imul	cx
21032                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
21033 5233           89C3                       mov	bx,ax
21034 5235           8A46         0C            mov	al,$C[bp]
21035 5238           30E4                       xor	ah,ah
21036 523A           93                         xchg	ax,bx
21037 523B           89D9                       mov	cx,bx
21038 523D           F7E9                       imul	cx
21039                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
21040                                           ! Debug: expression subtree swapping
21041 523F           0246         08            add	al,8[bp]
21042 5242           80D4                   00  adc	ah,*0
21043                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21044 5245           8946         F8            mov	-8[bp],ax
21045                                           !BCC_EOS
21046                                           ! 2426  src = car * cheight;
21047                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
21048 5248           8A46         0E            mov	al,$E[bp]
21049 524B           30E4                       xor	ah,ah
21050 524D           89C3                       mov	bx,ax
21051 524F           8A46         04            mov	al,4[bp]
21052 5252           30E4                       xor	ah,ah
21053 5254           89D9                       mov	cx,bx
21054 5256           F7E9                       imul	cx
21055                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21056 5258           8946         F4            mov	-$C[bp],ax
21057                                           !BCC_EOS
21058                                           ! 2427  outw(0x3c4, 0x0f02);
21059                                           ! Debug: list int = const $F02 (used reg = )
21060 525B           B8                   0F02  mov	ax,#$F02
21061 525E           50                         push	ax
21062                                           ! Debug: list int = const $3C4 (used reg = )
21063 525F           B8                   03C4  mov	ax,#$3C4
21064 5262           50                         push	ax
21065                                           ! Debug: func () void = outw+0 (used reg = )
21066 5263           E8         2B32            call	_outw
21067 5266           83C4                   04  add	sp,*4
21068                                           !BCC_EOS
21069                                           ! 2428  outw(0x3ce, 0x0205);
21070                                           ! Debug: list int = const $205 (used reg = )
21071 5269           B8                   0205  mov	ax,#$205
21072 526C           50                         push	ax
21073                                           ! Debug: list int = const $3CE (used reg = )
21074 526D           B8                   03CE  mov	ax,#$3CE
21075 5270           50                         push	ax
21076                                           ! Debug: func () void = outw+0 (used reg = )
21077 5271           E8         2B24            call	_outw
21078 5274           83C4                   04  add	sp,*4
21079                                           !BCC_EOS
21080                                           ! 2429  if(attr&0x80)
21081                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21082 5277           8A46         06            mov	al,6[bp]
21083 527A           24                     80  and	al,#$80
21084 527C           84C0                       test	al,al
21085 527E           74           10            je  	.153
21086                       00005280            .154:
21087                                           ! 2430   {
21088                                           ! 2431    outw(0x3ce, 0x1803);
21089                                           ! Debug: list int = const $1803 (used reg = )
21090 5280           B8                   1803  mov	ax,#$1803
21091 5283           50                         push	ax
21092                                           ! Debug: list int = const $3CE (used reg = )
21093 5284           B8                   03CE  mov	ax,#$3CE
21094 5287           50                         push	ax
21095                                           ! Debug: func () void = outw+0 (used reg = )
21096 5288           E8         2B0D            call	_outw
21097 528B           83C4                   04  add	sp,*4
21098                                           !BCC_EOS
21099                                           ! 2432   }
21100                                           ! 2433  else
21101                                           ! 2434   {
21102 528E           EB           0E            jmp .155
21103                       00005290            .153:
21104                                           ! 2435    outw(0x3ce, 0x0003);
21105                                           ! Debug: list int = const 3 (used reg = )
21106 5290           B8                   0003  mov	ax,*3
21107 5293           50                         push	ax
21108                                           ! Debug: list int = const $3CE (used reg = )
21109 5294           B8                   03CE  mov	ax,#$3CE
21110 5297           50                         push	ax
21111                                           ! Debug: func () void = outw+0 (used reg = )
21112 5298           E8         2AFD            call	_outw
21113 529B           83C4                   04  add	sp,*4
21114                                           !BCC_EOS
21115                                           ! 2436   }
21116                                           ! 2437  for(i=0;i<cheight;i++)
21117                       0000529E            .155:
21118                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21119 529E           30C0                       xor	al,al
21120 52A0           8846         FF            mov	-1[bp],al
21121                                           !BCC_EOS
21122                                           !BCC_EOS
21123                                           ! 2438   {
21124 52A3           E9         00A6            br 	.158
21125                       000052A6            .159:
21126                                           ! 2439    dest=addr+i*nbcols;
21127                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21128 52A6           8A46         0C            mov	al,$C[bp]
21129 52A9           30E4                       xor	ah,ah
21130 52AB           89C3                       mov	bx,ax
21131 52AD           8A46         FF            mov	al,-1[bp]
21132 52B0           30E4                       xor	ah,ah
21133 52B2           89D9                       mov	cx,bx
21134 52B4           F7E9                       imul	cx
21135                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21136                                           ! Debug: expression subtree swapping
21137 52B6           0346         F8            add	ax,-8[bp]
21138                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21139 52B9           8946         F6            mov	-$A[bp],ax
21140                                           !BCC_EOS
21141                                           ! 2440    for(j=0;j<8;j++)
21142                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21143 52BC           30C0                       xor	al,al
21144 52BE           8846         FE            mov	-2[bp],al
21145                                           !BCC_EOS
21146                                           !BCC_EOS
21147                                           ! 2441     {
21148 52C1           EB           79            jmp .15C
21149                       000052C3            .15D:
21150                                           ! 2442      mask=0x80>>j;
21151                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21152 52C3           8A46         FE            mov	al,-2[bp]
21153 52C6           30E4                       xor	ah,ah
21154 52C8           89C3                       mov	bx,ax
21155 52CA           B8                   0080  mov	ax,#$80
21156 52CD           89D9                       mov	cx,bx
21157 52CF           D3F8                       sar	ax,cl
21158                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21159 52D1           8846         FD            mov	-3[bp],al
21160                                           !BCC_EOS
21161                                           ! 2443      outw(0x3ce, (mask << 8) | 0x08);
21162                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21163 52D4           8A46         FD            mov	al,-3[bp]
21164 52D7           30E4                       xor	ah,ah
21165 52D9           88C4                       mov	ah,al
21166 52DB           30C0                       xor	al,al
21167                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21168 52DD           0C                     08  or	al,*8
21169                                           ! Debug: list unsigned int = ax+0 (used reg = )
21170 52DF           50                         push	ax
21171                                           ! Debug: list int = const $3CE (used reg = )
21172 52E0           B8                   03CE  mov	ax,#$3CE
21173 52E3           50                         push	ax
21174                                           ! Debug: func () void = outw+0 (used reg = )
21175 52E4           E8         2AB1            call	_outw
21176 52E7           83C4                   04  add	sp,*4
21177                                           !BCC_EOS
21178                                           ! 2444      read_byte(0xa000,dest);
21179                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21180 52EA           FF76         F6            push	-$A[bp]
21181                                           ! Debug: list unsigned int = const $A000 (used reg = )
21182 52ED           B8                   A000  mov	ax,#$A000
21183 52F0           50                         push	ax
21184                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21185 52F1           E8         2A28            call	_read_byte
21186 52F4           83C4                   04  add	sp,*4
21187                                           !BCC_EOS
21188                                           ! 2445      if(fdata[src+i]&mask)
21189                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21190 52F7           8B46         F4            mov	ax,-$C[bp]
21191 52FA           0246         FF            add	al,-1[bp]
21192 52FD           80D4                   00  adc	ah,*0
21193                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21194 5300           0346         FA            add	ax,-6[bp]
21195 5303           89C3                       mov	bx,ax
21196                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21197 5305           8A07                       mov	al,[bx]
21198 5307           2246         FD            and	al,-3[bp]
21199 530A           84C0                       test	al,al
21200 530C           74           17            je  	.15E
21201                       0000530E            .15F:
21202                                           ! 2446       {
21203                                           ! 2447        write_byte(0xa000,dest,attr&0x0f);
21204                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21205 530E           8A46         06            mov	al,6[bp]
21206 5311           24                     0F  and	al,*$F
21207                                           ! Debug: list unsigned char = al+0 (used reg = )
21208 5313           30E4                       xor	ah,ah
21209 5315           50                         push	ax
21210                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21211 5316           FF76         F6            push	-$A[bp]
21212                                           ! Debug: list unsigned int = const $A000 (used reg = )
21213 5319           B8                   A000  mov	ax,#$A000
21214 531C           50                         push	ax
21215                                           ! Debug: func () void = write_byte+0 (used reg = )
21216 531D           E8         2A22            call	_write_byte
21217 5320           83C4                   06  add	sp,*6
21218                                           !BCC_EOS
21219                                           ! 2448       }
21220                                           ! 2449      else
21221                                           ! 2450       {
21222 5323           EB           10            jmp .160
21223                       00005325            .15E:
21224                                           ! 2451        write_byte(0xa000,dest,0x00);
21225                                           ! Debug: list int = const 0 (used reg = )
21226 5325           31C0                       xor	ax,ax
21227 5327           50                         push	ax
21228                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21229 5328           FF76         F6            push	-$A[bp]
21230                                           ! Debug: list unsigned int = const $A000 (used reg = )
21231 532B           B8                   A000  mov	ax,#$A000
21232 532E           50                         push	ax
21233                                           ! Debug: func () void = write_byte+0 (used reg = )
21234 532F           E8         2A10            call	_write_byte
21235 5332           83C4                   06  add	sp,*6
21236                                           !BCC_EOS
21237                                           ! 2452       }
21238                                           ! 2453     }
21239                       00005335            .160:
21240                                           ! 2454   }
21241                       00005335            .15B:
21242                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21243 5335           8A46         FE            mov	al,-2[bp]
21244 5338           40                         inc	ax
21245 5339           8846         FE            mov	-2[bp],al
21246                       0000533C            .15C:
21247                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21248 533C           8A46         FE            mov	al,-2[bp]
21249 533F           3C                     08  cmp	al,*8
21250 5341         0F82         FF7E            blo 	.15D
21251                       00005345            .161:
21252                       00005345            .15A:
21253                                           ! 2455 #asm
21254                       00005345            .157:
21255                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21256 5345           8A46         FF            mov	al,-1[bp]
21257 5348           40                         inc	ax
21258 5349           8846         FF            mov	-1[bp],al
21259                       0000534C            .158:
21260                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21261 534C           8A46         FF            mov	al,-1[bp]
21262 534F           3A46         0E            cmp	al,$E[bp]
21263 5352         0F82         FF50            blo 	.159
21264                       00005356            .162:
21265                       00005356            .156:
21266                                           !BCC_EOS
21267                                           !BCC_ASM
21268                       0000000A            _write_gfx_char_pl4.j	set	$A
21269                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21270                       00000006            _write_gfx_char_pl4.fdata	set	6
21271                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21272                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21273                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21274                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21275                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21276                       0000000B            _write_gfx_char_pl4.i	set	$B
21277                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21278                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21279                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21280                       00000009            _write_gfx_char_pl4.mask	set	9
21281                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21282                       00000002            _write_gfx_char_pl4.dest	set	2
21283                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21284                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21285                       00000008            .write_gfx_char_pl4.xcurs	set	8
21286                       00000000            _write_gfx_char_pl4.src	set	0
21287                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21288                       00000012            _write_gfx_char_pl4.attr	set	$12
21289                       00000006            .write_gfx_char_pl4.attr	set	6
21290                       00000010            _write_gfx_char_pl4.car	set	$10
21291                       00000004            .write_gfx_char_pl4.car	set	4
21292                       00000004            _write_gfx_char_pl4.addr	set	4
21293                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21294 5356           BA                   03CE    mov dx, # 0x3ce
21295 5359           B8                   FF08    mov ax, #0xff08
21296 535C           EF                           out dx, ax
21297 535D           B8                   0005    mov ax, #0x0005
21298 5360           EF                           out dx, ax
21299 5361           B8                   0003    mov ax, #0x0003
21300 5364           EF                           out dx, ax
21301                                           ! 2463 endasm
21302                                           !BCC_ENDASM
21303                                           !BCC_EOS
21304                                           ! 2464 }
21305 5365           89EC                       mov	sp,bp
21306 5367           5D                         pop	bp
21307 5368           C3                         ret
21308                                           ! 2465 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21309                                           ! Register BX used in function write_gfx_char_pl4
21310                                           ! 2466 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21311                       00005369            _write_gfx_char_cga:
21312                                           !BCC_EOS
21313                                           !BCC_EOS
21314                                           !BCC_EOS
21315                                           !BCC_EOS
21316                                           !BCC_EOS
21317                                           !BCC_EOS
21318                                           ! 2467 {
21319                                           ! 2468  Bit8u i,j,mask,data;
21320                                           !BCC_EOS
21321                                           ! 2469  Bit8u *fdata;
21322                                           !BCC_EOS
21323                                           ! 2470  Bit16u addr,dest,src;
21324                                           !BCC_EOS
21325                                           ! 2471  fdata = &vgafont8;
21326 5369           55                         push	bp
21327 536A           89E5                       mov	bp,sp
21328 536C           83C4                   F4  add	sp,*-$C
21329                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21330 536F           BB                   0F71  mov	bx,#_vgafont8
21331 5372           895E         FA            mov	-6[bp],bx
21332                                           !BCC_EOS
21333                                           ! 2472  addr=(xcurs*bpp)+ycurs*320;
21334                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21335 5375           8A46         0A            mov	al,$A[bp]
21336 5378           30E4                       xor	ah,ah
21337 537A           B9                   0140  mov	cx,#$140
21338 537D           F7E9                       imul	cx
21339 537F           50                         push	ax
21340                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21341 5380           8A46         0E            mov	al,$E[bp]
21342 5383           30E4                       xor	ah,ah
21343 5385           89C3                       mov	bx,ax
21344 5387           8A46         08            mov	al,8[bp]
21345 538A           30E4                       xor	ah,ah
21346 538C           89D9                       mov	cx,bx
21347 538E           F7E9                       imul	cx
21348                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21349 5390           0346         F2            add	ax,-$E[bp]
21350 5393           44                         inc	sp
21351 5394           44                         inc	sp
21352                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21353 5395           8946         F8            mov	-8[bp],ax
21354                                           !BCC_EOS
21355                                           ! 2473  src = car * 8;
21356                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21357 5398           8A46         04            mov	al,4[bp]
21358 539B           30E4                       xor	ah,ah
21359 539D           B1                     03  mov	cl,*3
21360 539F           D3E0                       shl	ax,cl
21361                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21362 53A1           8946         F4            mov	-$C[bp],ax
21363                                           !BCC_EOS
21364                                           ! 2474  for(i=0;i<8;i++)
21365                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21366 53A4           30C0                       xor	al,al
21367 53A6           8846         FF            mov	-1[bp],al
21368                                           !BCC_EOS
21369                                           !BCC_EOS
21370                                           ! 2475   {
21371 53A9           E9         01B3            br 	.165
21372                       000053AC            .166:
21373                                           ! 2476    dest=addr+(i>>1)*80;
21374                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21375 53AC           8A46         FF            mov	al,-1[bp]
21376 53AF           30E4                       xor	ah,ah
21377 53B1           D1E8                       shr	ax,*1
21378                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21379 53B3           B9                   0050  mov	cx,*$50
21380 53B6           F7E9                       imul	cx
21381                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21382                                           ! Debug: expression subtree swapping
21383 53B8           0346         F8            add	ax,-8[bp]
21384                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21385 53BB           8946         F6            mov	-$A[bp],ax
21386                                           !BCC_EOS
21387                                           ! 2477    if (i & 1) dest += 0x2000;
21388                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21389 53BE           8A46         FF            mov	al,-1[bp]
21390 53C1           24                     01  and	al,*1
21391 53C3           84C0                       test	al,al
21392 53C5           74           09            je  	.167
21393                       000053C7            .168:
21394                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21395 53C7           8B46         F6            mov	ax,-$A[bp]
21396 53CA           05                   2000  add	ax,#$2000
21397 53CD           8946         F6            mov	-$A[bp],ax
21398                                           !BCC_EOS
21399                                           ! 2478    mask = 0x80;
21400                       000053D0            .167:
21401                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21402 53D0           B0                     80  mov	al,#$80
21403 53D2           8846         FD            mov	-3[bp],al
21404                                           !BCC_EOS
21405                                           ! 2479    if (bpp == 1)
21406                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21407 53D5           8A46         0E            mov	al,$E[bp]
21408 53D8           3C                     01  cmp	al,*1
21409 53DA         0F85         00B3            bne 	.169
21410                       000053DE            .16A:
21411                                           ! 2480     {
21412                                           ! 2481      if (attr & 0x80)
21413                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21414 53DE           8A46         06            mov	al,6[bp]
21415 53E1           24                     80  and	al,#$80
21416 53E3           84C0                       test	al,al
21417 53E5           74           12            je  	.16B
21418                       000053E7            .16C:
21419                                           ! 2482       {
21420                                           ! 2483        data = read_byte(0xb800,dest);
21421                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21422 53E7           FF76         F6            push	-$A[bp]
21423                                           ! Debug: list unsigned int = const $B800 (used reg = )
21424 53EA           B8                   B800  mov	ax,#$B800
21425 53ED           50                         push	ax
21426                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21427 53EE           E8         292B            call	_read_byte
21428 53F1           83C4                   04  add	sp,*4
21429                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21430 53F4           8846         FC            mov	-4[bp],al
21431                                           !BCC_EOS
21432                                           ! 2484       }
21433                                           ! 2485      else
21434                                           ! 2486       {
21435 53F7           EB           05            jmp .16D
21436                       000053F9            .16B:
21437                                           ! 2487        data = 0x00;
21438                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21439 53F9           30C0                       xor	al,al
21440 53FB           8846         FC            mov	-4[bp],al
21441                                           !BCC_EOS
21442                                           ! 2488       }
21443                                           ! 2489      for(j=0;j<8;j++)
21444                       000053FE            .16D:
21445                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21446 53FE           30C0                       xor	al,al
21447 5400           8846         FE            mov	-2[bp],al
21448                                           !BCC_EOS
21449                                           !BCC_EOS
21450                                           ! 2490       {
21451 5403           EB           6F            jmp .170
21452                       00005405            .171:
21453                                           ! 2491        if (fdata[src+i] & mask)
21454                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21455 5405           8B46         F4            mov	ax,-$C[bp]
21456 5408           0246         FF            add	al,-1[bp]
21457 540B           80D4                   00  adc	ah,*0
21458                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21459 540E           0346         FA            add	ax,-6[bp]
21460 5411           89C3                       mov	bx,ax
21461                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21462 5413           8A07                       mov	al,[bx]
21463 5415           2246         FD            and	al,-3[bp]
21464 5418           84C0                       test	al,al
21465 541A           74           47            je  	.172
21466                       0000541C            .173:
21467                                           ! 2492         {
21468                                           ! 2493          if (attr & 0x80)
21469                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21470 541C           8A46         06            mov	al,6[bp]
21471 541F           24                     80  and	al,#$80
21472 5421           84C0                       test	al,al
21473 5423           74           20            je  	.174
21474                       00005425            .175:
21475                                           ! 2494           {
21476                                           ! 2495            data ^= (attr & 0x01) << (7-j);
21477                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21478 5425           B8                   0007  mov	ax,*7
21479 5428           2A46         FE            sub	al,-2[bp]
21480 542B           80DC                   00  sbb	ah,*0
21481 542E           50                         push	ax
21482                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21483 542F           8A46         06            mov	al,6[bp]
21484 5432           24                     01  and	al,*1
21485                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21486 5434           30E4                       xor	ah,ah
21487 5436           8B4E         F2            mov	cx,-$E[bp]
21488 5439           D3E0                       shl	ax,cl
21489 543B           44                         inc	sp
21490 543C           44                         inc	sp
21491                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21492 543D           3246         FC            xor	al,-4[bp]
21493 5440           8846         FC            mov	-4[bp],al
21494                                           !BCC_EOS
21495                                           ! 2496           }
21496                                           ! 2497          else
21497                                           ! 2498           {
21498 5443           EB           1E            jmp .176
21499                       00005445            .174:
21500                                           ! 2499            data |= (attr & 0x01) << (7-j);
21501                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21502 5445           B8                   0007  mov	ax,*7
21503 5448           2A46         FE            sub	al,-2[bp]
21504 544B           80DC                   00  sbb	ah,*0
21505 544E           50                         push	ax
21506                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21507 544F           8A46         06            mov	al,6[bp]
21508 5452           24                     01  and	al,*1
21509                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21510 5454           30E4                       xor	ah,ah
21511 5456           8B4E         F2            mov	cx,-$E[bp]
21512 5459           D3E0                       shl	ax,cl
21513 545B           44                         inc	sp
21514 545C           44                         inc	sp
21515                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21516 545D           0A46         FC            or	al,-4[bp]
21517 5460           8846         FC            mov	-4[bp],al
21518                                           !BCC_EOS
21519                                           ! 2500           }
21520                                           ! 2501         }
21521                       00005463            .176:
21522                                           ! 2502        mask >>= 1;
21523                       00005463            .172:
21524                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21525 5463           8A46         FD            mov	al,-3[bp]
21526 5466           30E4                       xor	ah,ah
21527 5468           D1E8                       shr	ax,*1
21528 546A           8846         FD            mov	-3[bp],al
21529                                           !BCC_EOS
21530                                           ! 2503       }
21531                                           ! 2504      write_byte(0xb800,dest,data);
21532                       0000546D            .16F:
21533                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21534 546D           8A46         FE            mov	al,-2[bp]
21535 5470           40                         inc	ax
21536 5471           8846         FE            mov	-2[bp],al
21537                       00005474            .170:
21538                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21539 5474           8A46         FE            mov	al,-2[bp]
21540 5477           3C                     08  cmp	al,*8
21541 5479           72           8A            jb 	.171
21542                       0000547B            .177:
21543                       0000547B            .16E:
21544                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21545 547B           8A46         FC            mov	al,-4[bp]
21546 547E           30E4                       xor	ah,ah
21547 5480           50                         push	ax
21548                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21549 5481           FF76         F6            push	-$A[bp]
21550                                           ! Debug: list unsigned int = const $B800 (used reg = )
21551 5484           B8                   B800  mov	ax,#$B800
21552 5487           50                         push	ax
21553                                           ! Debug: func () void = write_byte+0 (used reg = )
21554 5488           E8         28B7            call	_write_byte
21555 548B           83C4                   06  add	sp,*6
21556                                           !BCC_EOS
21557                                           ! 2505     }
21558                                           ! 2506    else
21559                                           ! 2507     {
21560 548E           E9         00C7            br 	.178
21561                       00005491            .169:
21562                                           ! 2508      while (mask > 0)
21563                                           ! 2509       {
21564 5491           E9         00BB            br 	.17A
21565                       00005494            .17B:
21566                                           ! 2510        if (attr & 0x80)
21567                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21568 5494           8A46         06            mov	al,6[bp]
21569 5497           24                     80  and	al,#$80
21570 5499           84C0                       test	al,al
21571 549B           74           12            je  	.17C
21572                       0000549D            .17D:
21573                                           ! 2511         {
21574                                           ! 2512          data = read_byte(0xb800,dest);
21575                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21576 549D           FF76         F6            push	-$A[bp]
21577                                           ! Debug: list unsigned int = const $B800 (used reg = )
21578 54A0           B8                   B800  mov	ax,#$B800
21579 54A3           50                         push	ax
21580                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21581 54A4           E8         2875            call	_read_byte
21582 54A7           83C4                   04  add	sp,*4
21583                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21584 54AA           8846         FC            mov	-4[bp],al
21585                                           !BCC_EOS
21586                                           ! 2513         }
21587                                           ! 2514        else
21588                                           ! 2515         {
21589 54AD           EB           05            jmp .17E
21590                       000054AF            .17C:
21591                                           ! 2516          data = 0x00;
21592                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21593 54AF           30C0                       xor	al,al
21594 54B1           8846         FC            mov	-4[bp],al
21595                                           !BCC_EOS
21596                                           ! 2517         }
21597                                           ! 2518        for(j=0;j<4;j++)
21598                       000054B4            .17E:
21599                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21600 54B4           30C0                       xor	al,al
21601 54B6           8846         FE            mov	-2[bp],al
21602                                           !BCC_EOS
21603                                           !BCC_EOS
21604                                           ! 2519         {
21605 54B9           EB           73            jmp .181
21606                       000054BB            .182:
21607                                           ! 2520          if (fdata[src+i] & mask)
21608                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21609 54BB           8B46         F4            mov	ax,-$C[bp]
21610 54BE           0246         FF            add	al,-1[bp]
21611 54C1           80D4                   00  adc	ah,*0
21612                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21613 54C4           0346         FA            add	ax,-6[bp]
21614 54C7           89C3                       mov	bx,ax
21615                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21616 54C9           8A07                       mov	al,[bx]
21617 54CB           2246         FD            and	al,-3[bp]
21618 54CE           84C0                       test	al,al
21619 54D0           74           4B            je  	.183
21620                       000054D2            .184:
21621                                           ! 2521           {
21622                                           ! 2522            if (attr & 0x80)
21623                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21624 54D2           8A46         06            mov	al,6[bp]
21625 54D5           24                     80  and	al,#$80
21626 54D7           84C0                       test	al,al
21627 54D9           74           22            je  	.185
21628                       000054DB            .186:
21629                                           ! 2523             {
21630                                           ! 2524              data ^= (attr & 0x03) << ((3-j)*2);
21631                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21632 54DB           B8                   0003  mov	ax,*3
21633 54DE           2A46         FE            sub	al,-2[bp]
21634 54E1           80DC                   00  sbb	ah,*0
21635                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21636 54E4           D1E0                       shl	ax,*1
21637 54E6           50                         push	ax
21638                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21639 54E7           8A46         06            mov	al,6[bp]
21640 54EA           24                     03  and	al,*3
21641                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21642 54EC           30E4                       xor	ah,ah
21643 54EE           8B4E         F2            mov	cx,-$E[bp]
21644 54F1           D3E0                       shl	ax,cl
21645 54F3           44                         inc	sp
21646 54F4           44                         inc	sp
21647                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21648 54F5           3246         FC            xor	al,-4[bp]
21649 54F8           8846         FC            mov	-4[bp],al
21650                                           !BCC_EOS
21651                                           ! 2525             }
21652                                           ! 2526            else
21653                                           ! 2527             {
21654 54FB           EB           20            jmp .187
21655                       000054FD            .185:
21656                                           ! 2528              data |= (attr & 0x03) << ((3-j)*2);
21657                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21658 54FD           B8                   0003  mov	ax,*3
21659 5500           2A46         FE            sub	al,-2[bp]
21660 5503           80DC                   00  sbb	ah,*0
21661                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21662 5506           D1E0                       shl	ax,*1
21663 5508           50                         push	ax
21664                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21665 5509           8A46         06            mov	al,6[bp]
21666 550C           24                     03  and	al,*3
21667                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21668 550E           30E4                       xor	ah,ah
21669 5510           8B4E         F2            mov	cx,-$E[bp]
21670 5513           D3E0                       shl	ax,cl
21671 5515           44                         inc	sp
21672 5516           44                         inc	sp
21673                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21674 5517           0A46         FC            or	al,-4[bp]
21675 551A           8846         FC            mov	-4[bp],al
21676                                           !BCC_EOS
21677                                           ! 2529             }
21678                                           ! 2530           }
21679                       0000551D            .187:
21680                                           ! 2531          mask >>= 1;
21681                       0000551D            .183:
21682                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21683 551D           8A46         FD            mov	al,-3[bp]
21684 5520           30E4                       xor	ah,ah
21685 5522           D1E8                       shr	ax,*1
21686 5524           8846         FD            mov	-3[bp],al
21687                                           !BCC_EOS
21688                                           ! 2532         }
21689                                           ! 2533      
21690                                           ! 2533   write_byte(0xb800,dest,data);
21691                       00005527            .180:
21692                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21693 5527           8A46         FE            mov	al,-2[bp]
21694 552A           40                         inc	ax
21695 552B           8846         FE            mov	-2[bp],al
21696                       0000552E            .181:
21697                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21698 552E           8A46         FE            mov	al,-2[bp]
21699 5531           3C                     04  cmp	al,*4
21700 5533           72           86            jb 	.182
21701                       00005535            .188:
21702                       00005535            .17F:
21703                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21704 5535           8A46         FC            mov	al,-4[bp]
21705 5538           30E4                       xor	ah,ah
21706 553A           50                         push	ax
21707                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21708 553B           FF76         F6            push	-$A[bp]
21709                                           ! Debug: list unsigned int = const $B800 (used reg = )
21710 553E           B8                   B800  mov	ax,#$B800
21711 5541           50                         push	ax
21712                                           ! Debug: func () void = write_byte+0 (used reg = )
21713 5542           E8         27FD            call	_write_byte
21714 5545           83C4                   06  add	sp,*6
21715                                           !BCC_EOS
21716                                           ! 2534        dest += 1;
21717                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21718 5548           8B46         F6            mov	ax,-$A[bp]
21719 554B           40                         inc	ax
21720 554C           8946         F6            mov	-$A[bp],ax
21721                                           !BCC_EOS
21722                                           ! 2535       }
21723                                           ! 2536     }
21724                       0000554F            .17A:
21725                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21726 554F           8A46         FD            mov	al,-3[bp]
21727 5552           84C0                       test	al,al
21728 5554         0F85         FF3C            bne 	.17B
21729                       00005558            .189:
21730                       00005558            .179:
21731                                           ! 2537   }
21732                       00005558            .178:
21733                                           ! 2538 }
21734                       00005558            .164:
21735                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21736 5558           8A46         FF            mov	al,-1[bp]
21737 555B           40                         inc	ax
21738 555C           8846         FF            mov	-1[bp],al
21739                       0000555F            .165:
21740                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21741 555F           8A46         FF            mov	al,-1[bp]
21742 5562           3C                     08  cmp	al,*8
21743 5564         0F82         FE44            blo 	.166
21744                       00005568            .18A:
21745                       00005568            .163:
21746 5568           89EC                       mov	sp,bp
21747 556A           5D                         pop	bp
21748 556B           C3                         ret
21749                                           ! 2539 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21750                                           ! Register BX used in function write_gfx_char_cga
21751                                           ! 2540 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21752                       0000556C            _write_gfx_char_lin:
21753                                           !BCC_EOS
21754                                           !BCC_EOS
21755                                           !BCC_EOS
21756                                           !BCC_EOS
21757                                           !BCC_EOS
21758                                           ! 2541 {
21759                                           ! 2542  Bit8u i,j,mask,data;
21760                                           !BCC_EOS
21761                                           ! 2543  Bit8u *fdata;
21762                                           !BCC_EOS
21763                                           ! 2544  Bit16u addr,dest,src;
21764                                           !BCC_EOS
21765                                           ! 2545  fdata = &vgafont8;
21766 556C           55                         push	bp
21767 556D           89E5                       mov	bp,sp
21768 556F           83C4                   F4  add	sp,*-$C
21769                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21770 5572           BB                   0F71  mov	bx,#_vgafont8
21771 5575           895E         FA            mov	-6[bp],bx
21772                                           !BCC_EOS
21773                                           ! 2546  addr=xcurs*8+ycurs*nbcols*64;
21774                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21775 5578           8A46         0C            mov	al,$C[bp]
21776 557B           30E4                       xor	ah,ah
21777 557D           89C3                       mov	bx,ax
21778 557F           8A46         0A            mov	al,$A[bp]
21779 5582           30E4                       xor	ah,ah
21780 5584           89D9                       mov	cx,bx
21781 5586           F7E9                       imul	cx
21782                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21783 5588           B1                     06  mov	cl,*6
21784 558A           D3E0                       shl	ax,cl
21785 558C           50                         push	ax
21786                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21787 558D           8A46         08            mov	al,8[bp]
21788 5590           30E4                       xor	ah,ah
21789 5592           B1                     03  mov	cl,*3
21790 5594           D3E0                       shl	ax,cl
21791                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21792 5596           0346         F2            add	ax,-$E[bp]
21793 5599           44                         inc	sp
21794 559A           44                         inc	sp
21795                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21796 559B           8946         F8            mov	-8[bp],ax
21797                                           !BCC_EOS
21798                                           ! 2547  src = car * 8;
21799                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21800 559E           8A46         04            mov	al,4[bp]
21801 55A1           30E4                       xor	ah,ah
21802 55A3           B1                     03  mov	cl,*3
21803 55A5           D3E0                       shl	ax,cl
21804                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21805 55A7           8946         F4            mov	-$C[bp],ax
21806                                           !BCC_EOS
21807                                           ! 2548  for(i=0;i<8;i++)
21808                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21809 55AA           30C0                       xor	al,al
21810 55AC           8846         FF            mov	-1[bp],al
21811                                           !BCC_EOS
21812                                           !BCC_EOS
21813                                           ! 2549   {
21814 55AF           E9         0081            br 	.18D
21815                       000055B2            .18E:
21816                                           ! 2550    dest=addr+i*nbcols*8;
21817                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21818 55B2           8A46         0C            mov	al,$C[bp]
21819 55B5           30E4                       xor	ah,ah
21820 55B7           89C3                       mov	bx,ax
21821 55B9           8A46         FF            mov	al,-1[bp]
21822 55BC           30E4                       xor	ah,ah
21823 55BE           89D9                       mov	cx,bx
21824 55C0           F7E9                       imul	cx
21825                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21826 55C2           B1                     03  mov	cl,*3
21827 55C4           D3E0                       shl	ax,cl
21828                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21829                                           ! Debug: expression subtree swapping
21830 55C6           0346         F8            add	ax,-8[bp]
21831                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21832 55C9           8946         F6            mov	-$A[bp],ax
21833                                           !BCC_EOS
21834                                           ! 2551    mask = 0x80;
21835                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21836 55CC           B0                     80  mov	al,#$80
21837 55CE           8846         FD            mov	-3[bp],al
21838                                           !BCC_EOS
21839                                           ! 2552    for(j=0;j<8;j++)
21840                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21841 55D1           30C0                       xor	al,al
21842 55D3           8846         FE            mov	-2[bp],al
21843                                           !BCC_EOS
21844                                           !BCC_EOS
21845                                           ! 2553     {
21846 55D6           EB           4D            jmp .191
21847                       000055D8            .192:
21848                                           ! 2554      data = 0x00;
21849                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21850 55D8           30C0                       xor	al,al
21851 55DA           8846         FC            mov	-4[bp],al
21852                                           !BCC_EOS
21853                                           ! 2555      if (fdata[src+i] & mask)
21854                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21855 55DD           8B46         F4            mov	ax,-$C[bp]
21856 55E0           0246         FF            add	al,-1[bp]
21857 55E3           80D4                   00  adc	ah,*0
21858                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21859 55E6           0346         FA            add	ax,-6[bp]
21860 55E9           89C3                       mov	bx,ax
21861                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21862 55EB           8A07                       mov	al,[bx]
21863 55ED           2246         FD            and	al,-3[bp]
21864 55F0           84C0                       test	al,al
21865 55F2           74           06            je  	.193
21866                       000055F4            .194:
21867                                           ! 2556       {
21868                                           ! 2557        data = attr;
21869                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21870 55F4           8A46         06            mov	al,6[bp]
21871 55F7           8846         FC            mov	-4[bp],al
21872                                           !BCC_EOS
21873                                           ! 2558       }
21874                                           ! 2559      write_byte(0xa000,dest+j,data);
21875                       000055FA            .193:
21876                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21877 55FA           8A46         FC            mov	al,-4[bp]
21878 55FD           30E4                       xor	ah,ah
21879 55FF           50                         push	ax
21880                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21881 5600           8B46         F6            mov	ax,-$A[bp]
21882 5603           0246         FE            add	al,-2[bp]
21883 5606           80D4                   00  adc	ah,*0
21884                                           ! Debug: list unsigned int = ax+0 (used reg = )
21885 5609           50                         push	ax
21886                                           ! Debug: list unsigned int = const $A000 (used reg = )
21887 560A           B8                   A000  mov	ax,#$A000
21888 560D           50                         push	ax
21889                                           ! Debug: func () void = write_byte+0 (used reg = )
21890 560E           E8         2731            call	_write_byte
21891 5611           83C4                   06  add	sp,*6
21892                                           !BCC_EOS
21893                                           ! 2560      mask >>= 1;
21894                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21895 5614           8A46         FD            mov	al,-3[bp]
21896 5617           30E4                       xor	ah,ah
21897 5619           D1E8                       shr	ax,*1
21898 561B           8846         FD            mov	-3[bp],al
21899                                           !BCC_EOS
21900                                           ! 2561     }
21901                                           ! 2562   }
21902                       0000561E            .190:
21903                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21904 561E           8A46         FE            mov	al,-2[bp]
21905 5621           40                         inc	ax
21906 5622           8846         FE            mov	-2[bp],al
21907                       00005625            .191:
21908                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21909 5625           8A46         FE            mov	al,-2[bp]
21910 5628           3C                     08  cmp	al,*8
21911 562A           72           AC            jb 	.192
21912                       0000562C            .195:
21913                       0000562C            .18F:
21914                                           ! 2563 }
21915                       0000562C            .18C:
21916                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21917 562C           8A46         FF            mov	al,-1[bp]
21918 562F           40                         inc	ax
21919 5630           8846         FF            mov	-1[bp],al
21920                       00005633            .18D:
21921                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21922 5633           8A46         FF            mov	al,-1[bp]
21923 5636           3C                     08  cmp	al,*8
21924 5638         0F82         FF76            blo 	.18E
21925                       0000563C            .196:
21926                       0000563C            .18B:
21927 563C           89EC                       mov	sp,bp
21928 563E           5D                         pop	bp
21929 563F           C3                         ret
21930                                           ! 2564 static void biosfn_write_char_attr (car,page,attr,count)
21931                                           ! Register BX used in function write_gfx_char_lin
21932                                           ! 2565 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21933                       00005640            _biosfn_write_char_attr:
21934                                           !BCC_EOS
21935                                           !BCC_EOS
21936                                           !BCC_EOS
21937                                           !BCC_EOS
21938                                           ! 2566 {
21939                                           ! 2567  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21940                                           !BCC_EOS
21941                                           ! 2568  Bit16u nbcols,nbrows,address;
21942                                           !BCC_EOS
21943                                           ! 2569  Bit16u cursor,dummy;
21944                                           !BCC_EOS
21945                                           ! 2570  mode=read_byte(0x40,0x49);
21946 5640           55                         push	bp
21947 5641           89E5                       mov	bp,sp
21948 5643           83C4                   F0  add	sp,*-$10
21949                                           ! Debug: list int = const $49 (used reg = )
21950 5646           B8                   0049  mov	ax,*$49
21951 5649           50                         push	ax
21952                                           ! Debug: list int = const $40 (used reg = )
21953 564A           B8                   0040  mov	ax,*$40
21954 564D           50                         push	ax
21955                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21956 564E           E8         26CB            call	_read_byte
21957 5651           83C4                   04  add	sp,*4
21958                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21959 5654           8846         FC            mov	-4[bp],al
21960                                           !BCC_EOS
21961                                           ! 2571  line=find_vga_entry(mode);
21962                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21963 5657           8A46         FC            mov	al,-4[bp]
21964 565A           30E4                       xor	ah,ah
21965 565C           50                         push	ax
21966                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21967 565D           E8         25D0            call	_find_vga_entry
21968 5660           44                         inc	sp
21969 5661           44                         inc	sp
21970                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21971 5662           8846         FB            mov	-5[bp],al
21972                                           !BCC_EOS
21973                                           ! 2572  if(line==0xFF)return;
21974                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21975 5665           8A46         FB            mov	al,-5[bp]
21976 5668           3C                     FF  cmp	al,#$FF
21977 566A           75           04            jne 	.197
21978                       0000566C            .198:
21979 566C           89EC                       mov	sp,bp
21980 566E           5D                         pop	bp
21981 566F           C3                         ret
21982                                           !BCC_EOS
21983                                           ! 2573  biosfn_get_cursor_pos(page,&dummy,&cursor);
21984                       00005670            .197:
21985                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21986 5670           8D5E         F2            lea	bx,-$E[bp]
21987 5673           53                         push	bx
21988                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21989 5674           8D5E         F0            lea	bx,-$10[bp]
21990 5677           53                         push	bx
21991                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21992 5678           8A46         06            mov	al,6[bp]
21993 567B           30E4                       xor	ah,ah
21994 567D           50                         push	ax
21995                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21996 567E           E8         EE3F            call	_biosfn_get_cursor_pos
21997 5681           83C4                   06  add	sp,*6
21998                                           !BCC_EOS
21999                                           ! 2574  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22000                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22001 5684           8A46         F2            mov	al,-$E[bp]
22002                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22003 5687           8846         FE            mov	-2[bp],al
22004                                           !BCC_EOS
22005                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22006 568A           8B46         F2            mov	ax,-$E[bp]
22007 568D           30C0                       xor	al,al
22008                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22009 568F           88E0                       mov	al,ah
22010 5691           30E4                       xor	ah,ah
22011                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22012 5693           8846         FD            mov	-3[bp],al
22013                                           !BCC_EOS
22014                                           ! 2575  nbrows=read_byte(0x40,0x84)+1;
22015                                           ! Debug: list int = const $84 (used reg = )
22016 5696           B8                   0084  mov	ax,#$84
22017 5699           50                         push	ax
22018                                           ! Debug: list int = const $40 (used reg = )
22019 569A           B8                   0040  mov	ax,*$40
22020 569D           50                         push	ax
22021                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22022 569E           E8         267B            call	_read_byte
22023 56A1           83C4                   04  add	sp,*4
22024                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22025 56A4           30E4                       xor	ah,ah
22026                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22027 56A6           40                         inc	ax
22028 56A7           8946         F6            mov	-$A[bp],ax
22029                                           !BCC_EOS
22030                                           ! 2576  nbcols=read_word(0x40,0x4A);
22031                                           ! Debug: list int = const $4A (used reg = )
22032 56AA           B8                   004A  mov	ax,*$4A
22033 56AD           50                         push	ax
22034                                           ! Debug: list int = const $40 (used reg = )
22035 56AE           B8                   0040  mov	ax,*$40
22036 56B1           50                         push	ax
22037                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22038 56B2           E8         267A            call	_read_word
22039 56B5           83C4                   04  add	sp,*4
22040                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22041 56B8           8946         F8            mov	-8[bp],ax
22042                                           !BCC_EOS
22043                                           ! 2577  if(vga_modes[line].class==0x00)
22044                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22045 56BB           8A46         FB            mov	al,-5[bp]
22046 56BE           30E4                       xor	ah,ah
22047 56C0           B1                     03  mov	cl,*3
22048 56C2           D3E0                       shl	ax,cl
22049 56C4           89C3                       mov	bx,ax
22050 56C6           81C3                 020D  add	bx,#_vga_modes
22051                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22052 56CA           8A47         01            mov	al,1[bx]
22053 56CD           84C0                       test	al,al
22054 56CF         0F85         006A            bne 	.199
22055                       000056D3            .19A:
22056                                           ! 2578   {
22057                                           ! 2579    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22058                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22059 56D3           8A46         FD            mov	al,-3[bp]
22060 56D6           30E4                       xor	ah,ah
22061 56D8           8B4E         F8            mov	cx,-8[bp]
22062 56DB           F7E9                       imul	cx
22063                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22064                                           ! Debug: expression subtree swapping
22065 56DD           0246         FE            add	al,-2[bp]
22066 56E0           80D4                   00  adc	ah,*0
22067                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22068 56E3           D1E0                       shl	ax,*1
22069 56E5           50                         push	ax
22070                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22071 56E6           8B46         F8            mov	ax,-8[bp]
22072 56E9           8B4E         F6            mov	cx,-$A[bp]
22073 56EC           F7E9                       imul	cx
22074                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22075 56EE           D1E0                       shl	ax,*1
22076                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22077 56F0           0C                     FF  or	al,#$FF
22078                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22079                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22080 56F2           89C3                       mov	bx,ax
22081 56F4           8A46         06            mov	al,6[bp]
22082 56F7           30E4                       xor	ah,ah
22083 56F9           93                         xchg	ax,bx
22084 56FA           40                         inc	ax
22085 56FB           89D9                       mov	cx,bx
22086 56FD           F7E9                       imul	cx
22087                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22088 56FF           0346         EE            add	ax,-$12[bp]
22089 5702           44                         inc	sp
22090 5703           44                         inc	sp
22091                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22092 5704           8946         F4            mov	-$C[bp],ax
22093                                           !BCC_EOS
22094                                           ! 2580    dummy=((Bit16u)attr<<8)+car;
22095                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
22096 5707           8A46         08            mov	al,8[bp]
22097 570A           30E4                       xor	ah,ah
22098                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
22099 570C           88C4                       mov	ah,al
22100 570E           30C0                       xor	al,al
22101                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
22102 5710           0246         04            add	al,4[bp]
22103 5713           80D4                   00  adc	ah,*0
22104                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
22105 5716           8946         F0            mov	-$10[bp],ax
22106                                           !BCC_EOS
22107                                           ! 2581    memsetw(vga_modes[line].sstart,address,dummy,count);
22108                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
22109 5719           FF76         0A            push	$A[bp]
22110                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
22111 571C           FF76         F0            push	-$10[bp]
22112                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
22113 571F           FF76         F4            push	-$C[bp]
22114                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
22115 5722           8A46         FB            mov	al,-5[bp]
22116 5725           30E4                       xor	ah,ah
22117 5727           B1                     03  mov	cl,*3
22118 5729           D3E0                       shl	ax,cl
22119 572B           89C3                       mov	bx,ax
22120 572D           81C3                 020D  add	bx,#_vga_modes
22121                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22122 5731           FF77         04            push	4[bx]
22123                                           ! Debug: func () void = memsetw+0 (used reg = )
22124 5734           E8         2560            call	_memsetw
22125 5737           83C4                   08  add	sp,*8
22126                                           !BCC_EOS
22127                                           ! 2582   }
22128                                           ! 2583  else
22129                                           ! 2584   {
22130 573A           E9         00F8            br 	.19B
22131                       0000573D            .199:
22132                                           ! 2585    cheight=video_param_table[line_to_vpti[line]].cheight;
22133                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22134 573D           8A46         FB            mov	al,-5[bp]
22135 5740           30E4                       xor	ah,ah
22136 5742           89C3                       mov	bx,ax
22137                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22138 5744           8A87       028D            mov	al,_line_to_vpti[bx]
22139 5748           30E4                       xor	ah,ah
22140 574A           B1                     06  mov	cl,*6
22141 574C           D3E0                       shl	ax,cl
22142 574E           89C3                       mov	bx,ax
22143 5750           81C3                 02A1  add	bx,#_video_param_table
22144                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22145 5754           8A47         02            mov	al,2[bx]
22146 5757           8846         FF            mov	-1[bp],al
22147                                           !BCC_EOS
22148                                           ! 2586    bpp=vga_modes[line].pixbits;
22149                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22150 575A           8A46         FB            mov	al,-5[bp]
22151 575D           30E4                       xor	ah,ah
22152 575F           B1                     03  mov	cl,*3
22153 5761           D3E0                       shl	ax,cl
22154 5763           89C3                       mov	bx,ax
22155 5765           81C3                 020D  add	bx,#_vga_modes
22156                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22157 5769           8A47         03            mov	al,3[bx]
22158 576C           8846         FA            mov	-6[bp],al
22159                                           !BCC_EOS
22160                                           ! 2587    while((count-->0) && (xcurs<nbcols))
22161                                           ! 2588     {
22162 576F           E9         00AB            br 	.19D
22163                       00005772            .19E:
22164                                           ! 2589      switch(vga_modes[line].memmodel)
22165                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22166 5772           8A46         FB            mov	al,-5[bp]
22167 5775           30E4                       xor	ah,ah
22168 5777           B1                     03  mov	cl,*3
22169 5779           D3E0                       shl	ax,cl
22170 577B           89C3                       mov	bx,ax
22171 577D           81C3                 020D  add	bx,#_vga_modes
22172 5781           8A47         02            mov	al,2[bx]
22173                                           ! 2590       {
22174 5784           EB           7A            jmp .1A1
22175                                           ! 2591        case 0x04:
22176                                           ! 2592        case 0x03:
22177                       00005786            .1A2:
22178                                           ! 2593          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22179                       00005786            .1A3:
22180                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22181 5786           8A46         FF            mov	al,-1[bp]
22182 5789           30E4                       xor	ah,ah
22183 578B           50                         push	ax
22184                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22185 578C           FF76         F8            push	-8[bp]
22186                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22187 578F           8A46         FD            mov	al,-3[bp]
22188 5792           30E4                       xor	ah,ah
22189 5794           50                         push	ax
22190                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22191 5795           8A46         FE            mov	al,-2[bp]
22192 5798           30E4                       xor	ah,ah
22193 579A           50                         push	ax
22194                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22195 579B           8A46         08            mov	al,8[bp]
22196 579E           30E4                       xor	ah,ah
22197 57A0           50                         push	ax
22198                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22199 57A1           8A46         04            mov	al,4[bp]
22200 57A4           30E4                       xor	ah,ah
22201 57A6           50                         push	ax
22202                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22203 57A7           E8         FA4C            call	_write_gfx_char_pl4
22204 57AA           83C4                   0C  add	sp,*$C
22205                                           !BCC_EOS
22206                                           ! 2594          break;
22207 57AD           EB           67            jmp .19F
22208                                           !BCC_EOS
22209                                           ! 2595        case 0x02:
22210                                           ! 2596          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22211                       000057AF            .1A4:
22212                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22213 57AF           8A46         FA            mov	al,-6[bp]
22214 57B2           30E4                       xor	ah,ah
22215 57B4           50                         push	ax
22216                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22217 57B5           FF76         F8            push	-8[bp]
22218                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22219 57B8           8A46         FD            mov	al,-3[bp]
22220 57BB           30E4                       xor	ah,ah
22221 57BD           50                         push	ax
22222                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22223 57BE           8A46         FE            mov	al,-2[bp]
22224 57C1           30E4                       xor	ah,ah
22225 57C3           50                         push	ax
22226                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22227 57C4           8A46         08            mov	al,8[bp]
22228 57C7           30E4                       xor	ah,ah
22229 57C9           50                         push	ax
22230                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22231 57CA           8A46         04            mov	al,4[bp]
22232 57CD           30E4                       xor	ah,ah
22233 57CF           50                         push	ax
22234                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22235 57D0           E8         FB96            call	_write_gfx_char_cga
22236 57D3           83C4                   0C  add	sp,*$C
22237                                           !BCC_EOS
22238                                           ! 2597          break;
22239 57D6           EB           3E            jmp .19F
22240                                           !BCC_EOS
22241                                           ! 2598        case 0x05:
22242                                           ! 2599          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22243                       000057D8            .1A5:
22244                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22245 57D8           FF76         F8            push	-8[bp]
22246                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22247 57DB           8A46         FD            mov	al,-3[bp]
22248 57DE           30E4                       xor	ah,ah
22249 57E0           50                         push	ax
22250                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22251 57E1           8A46         FE            mov	al,-2[bp]
22252 57E4           30E4                       xor	ah,ah
22253 57E6           50                         push	ax
22254                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22255 57E7           8A46         08            mov	al,8[bp]
22256 57EA           30E4                       xor	ah,ah
22257 57EC           50                         push	ax
22258                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22259 57ED           8A46         04            mov	al,4[bp]
22260 57F0           30E4                       xor	ah,ah
22261 57F2           50                         push	ax
22262                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22263 57F3           E8         FD76            call	_write_gfx_char_lin
22264 57F6           83C4                   0A  add	sp,*$A
22265                                           !BCC_EOS
22266                                           ! 2600          break;
22267 57F9           EB           1B            jmp .19F
22268                                           !BCC_EOS
22269                                           ! 2601        default:
22270                                           ! 2602          unimplemented();
22271                       000057FB            .1A6:
22272                                           ! Debug: func () void = unimplemented+0 (used reg = )
22273 57FB           E8         25AD            call	_unimplemented
22274                                           !BCC_EOS
22275                                           ! 2603       }
22276                                           ! 2604      xcurs++;
22277 57FE           EB           16            jmp .19F
22278                       00005800            .1A1:
22279 5800           2C                     02  sub	al,*2
22280 5802           74           AB            je 	.1A4
22281 5804           2C                     01  sub	al,*1
22282 5806         0F84         FF7C            beq 	.1A3
22283 580A           2C                     01  sub	al,*1
22284 580C         0F84         FF76            beq 	.1A2
22285 5810           2C                     01  sub	al,*1
22286 5812           74           C4            je 	.1A5
22287 5814           EB           E5            jmp	.1A6
22288                       00005816            .19F:
22289                       FFFFFFEE            ..FFFA	=	-$12
22290                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22291 5816           8A46         FE            mov	al,-2[bp]
22292 5819           40                         inc	ax
22293 581A           8846         FE            mov	-2[bp],al
22294                                           !BCC_EOS
22295                                           ! 2605     }
22296                                           ! 2606   }
22297                       0000581D            .19D:
22298                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22299 581D           8B46         0A            mov	ax,$A[bp]
22300 5820           48                         dec	ax
22301 5821           8946         0A            mov	$A[bp],ax
22302                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22303 5824           3D                   FFFF  cmp	ax,*-1
22304 5827           74           0C            je  	.1A7
22305                       00005829            .1A8:
22306                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22307 5829           8A46         FE            mov	al,-2[bp]
22308 582C           30E4                       xor	ah,ah
22309 582E           3B46         F8            cmp	ax,-8[bp]
22310 5831         0F82         FF3D            blo 	.19E
22311                       00005835            .1A7:
22312                       00005835            .19C:
22313                                           ! 2607 }
22314                       00005835            .19B:
22315 5835           89EC                       mov	sp,bp
22316 5837           5D                         pop	bp
22317 5838           C3                         ret
22318                                           ! 2608 static void biosfn_write_char_only (car,page,attr,count)
22319                                           ! Register BX used in function biosfn_write_char_attr
22320                                           ! 2609 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22321                       00005839            _biosfn_write_char_only:
22322                                           !BCC_EOS
22323                                           !BCC_EOS
22324                                           !BCC_EOS
22325                                           !BCC_EOS
22326                                           ! 2610 {
22327                                           ! 2611  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22328                                           !BCC_EOS
22329                                           ! 2612  Bit16u nbcols,nbrows,address;
22330                                           !BCC_EOS
22331                                           ! 2613  Bit16u cursor,dummy;
22332                                           !BCC_EOS
22333                                           ! 2614  mode=read_byte(0x40,0x49);
22334 5839           55                         push	bp
22335 583A           89E5                       mov	bp,sp
22336 583C           83C4                   F0  add	sp,*-$10
22337                                           ! Debug: list int = const $49 (used reg = )
22338 583F           B8                   0049  mov	ax,*$49
22339 5842           50                         push	ax
22340                                           ! Debug: list int = const $40 (used reg = )
22341 5843           B8                   0040  mov	ax,*$40
22342 5846           50                         push	ax
22343                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22344 5847           E8         24D2            call	_read_byte
22345 584A           83C4                   04  add	sp,*4
22346                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22347 584D           8846         FC            mov	-4[bp],al
22348                                           !BCC_EOS
22349                                           ! 2615  line=find_vga_entry(mode);
22350                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22351 5850           8A46         FC            mov	al,-4[bp]
22352 5853           30E4                       xor	ah,ah
22353 5855           50                         push	ax
22354                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22355 5856           E8         23D7            call	_find_vga_entry
22356 5859           44                         inc	sp
22357 585A           44                         inc	sp
22358                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22359 585B           8846         FB            mov	-5[bp],al
22360                                           !BCC_EOS
22361                                           ! 2616  if(line==0xFF)return;
22362                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22363 585E           8A46         FB            mov	al,-5[bp]
22364 5861           3C                     FF  cmp	al,#$FF
22365 5863           75           04            jne 	.1A9
22366                       00005865            .1AA:
22367 5865           89EC                       mov	sp,bp
22368 5867           5D                         pop	bp
22369 5868           C3                         ret
22370                                           !BCC_EOS
22371                                           ! 2617  bi
22372                                           ! 2617 osfn_get_cursor_pos(page,&dummy,&cursor);
22373                       00005869            .1A9:
22374                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22375 5869           8D5E         F2            lea	bx,-$E[bp]
22376 586C           53                         push	bx
22377                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22378 586D           8D5E         F0            lea	bx,-$10[bp]
22379 5870           53                         push	bx
22380                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22381 5871           8A46         06            mov	al,6[bp]
22382 5874           30E4                       xor	ah,ah
22383 5876           50                         push	ax
22384                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22385 5877           E8         EC46            call	_biosfn_get_cursor_pos
22386 587A           83C4                   06  add	sp,*6
22387                                           !BCC_EOS
22388                                           ! 2618  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22389                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22390 587D           8A46         F2            mov	al,-$E[bp]
22391                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22392 5880           8846         FE            mov	-2[bp],al
22393                                           !BCC_EOS
22394                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22395 5883           8B46         F2            mov	ax,-$E[bp]
22396 5886           30C0                       xor	al,al
22397                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22398 5888           88E0                       mov	al,ah
22399 588A           30E4                       xor	ah,ah
22400                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22401 588C           8846         FD            mov	-3[bp],al
22402                                           !BCC_EOS
22403                                           ! 2619  nbrows=read_byte(0x40,0x84)+1;
22404                                           ! Debug: list int = const $84 (used reg = )
22405 588F           B8                   0084  mov	ax,#$84
22406 5892           50                         push	ax
22407                                           ! Debug: list int = const $40 (used reg = )
22408 5893           B8                   0040  mov	ax,*$40
22409 5896           50                         push	ax
22410                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22411 5897           E8         2482            call	_read_byte
22412 589A           83C4                   04  add	sp,*4
22413                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22414 589D           30E4                       xor	ah,ah
22415                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22416 589F           40                         inc	ax
22417 58A0           8946         F6            mov	-$A[bp],ax
22418                                           !BCC_EOS
22419                                           ! 2620  nbcols=read_word(0x40,0x4A);
22420                                           ! Debug: list int = const $4A (used reg = )
22421 58A3           B8                   004A  mov	ax,*$4A
22422 58A6           50                         push	ax
22423                                           ! Debug: list int = const $40 (used reg = )
22424 58A7           B8                   0040  mov	ax,*$40
22425 58AA           50                         push	ax
22426                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22427 58AB           E8         2481            call	_read_word
22428 58AE           83C4                   04  add	sp,*4
22429                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22430 58B1           8946         F8            mov	-8[bp],ax
22431                                           !BCC_EOS
22432                                           ! 2621  if(vga_modes[line].class==0x00)
22433                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22434 58B4           8A46         FB            mov	al,-5[bp]
22435 58B7           30E4                       xor	ah,ah
22436 58B9           B1                     03  mov	cl,*3
22437 58BB           D3E0                       shl	ax,cl
22438 58BD           89C3                       mov	bx,ax
22439 58BF           81C3                 020D  add	bx,#_vga_modes
22440                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22441 58C3           8A47         01            mov	al,1[bx]
22442 58C6           84C0                       test	al,al
22443 58C8           75           6E            jne 	.1AB
22444                       000058CA            .1AC:
22445                                           ! 2622   {
22446                                           ! 2623    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22447                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22448 58CA           8A46         FD            mov	al,-3[bp]
22449 58CD           30E4                       xor	ah,ah
22450 58CF           8B4E         F8            mov	cx,-8[bp]
22451 58D2           F7E9                       imul	cx
22452                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22453                                           ! Debug: expression subtree swapping
22454 58D4           0246         FE            add	al,-2[bp]
22455 58D7           80D4                   00  adc	ah,*0
22456                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22457 58DA           D1E0                       shl	ax,*1
22458 58DC           50                         push	ax
22459                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22460 58DD           8B46         F8            mov	ax,-8[bp]
22461 58E0           8B4E         F6            mov	cx,-$A[bp]
22462 58E3           F7E9                       imul	cx
22463                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22464 58E5           D1E0                       shl	ax,*1
22465                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22466 58E7           0C                     FF  or	al,#$FF
22467                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22468                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22469 58E9           89C3                       mov	bx,ax
22470 58EB           8A46         06            mov	al,6[bp]
22471 58EE           30E4                       xor	ah,ah
22472 58F0           93                         xchg	ax,bx
22473 58F1           40                         inc	ax
22474 58F2           89D9                       mov	cx,bx
22475 58F4           F7E9                       imul	cx
22476                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22477 58F6           0346         EE            add	ax,-$12[bp]
22478 58F9           44                         inc	sp
22479 58FA           44                         inc	sp
22480                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22481 58FB           8946         F4            mov	-$C[bp],ax
22482                                           !BCC_EOS
22483                                           ! 2624    while(count-->0)
22484                                           ! 2625     {write_byte(vga_modes[line].sstart,address,car);
22485 58FE           EB           29            jmp .1AE
22486                       00005900            .1AF:
22487                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22488 5900           8A46         04            mov	al,4[bp]
22489 5903           30E4                       xor	ah,ah
22490 5905           50                         push	ax
22491                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22492 5906           FF76         F4            push	-$C[bp]
22493                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22494 5909           8A46         FB            mov	al,-5[bp]
22495 590C           30E4                       xor	ah,ah
22496 590E           B1                     03  mov	cl,*3
22497 5910           D3E0                       shl	ax,cl
22498 5912           89C3                       mov	bx,ax
22499 5914           81C3                 020D  add	bx,#_vga_modes
22500                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22501 5918           FF77         04            push	4[bx]
22502                                           ! Debug: func () void = write_byte+0 (used reg = )
22503 591B           E8         2424            call	_write_byte
22504 591E           83C4                   06  add	sp,*6
22505                                           !BCC_EOS
22506                                           ! 2626      address+=2;
22507                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22508 5921           8B46         F4            mov	ax,-$C[bp]
22509 5924           40                         inc	ax
22510 5925           40                         inc	ax
22511 5926           8946         F4            mov	-$C[bp],ax
22512                                           !BCC_EOS
22513                                           ! 2627     }
22514                                           ! 2628   }
22515                       00005929            .1AE:
22516                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22517 5929           8B46         0A            mov	ax,$A[bp]
22518 592C           48                         dec	ax
22519 592D           8946         0A            mov	$A[bp],ax
22520                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22521 5930           3D                   FFFF  cmp	ax,*-1
22522 5933           75           CB            jne	.1AF
22523                       00005935            .1B0:
22524                       00005935            .1AD:
22525                                           ! 2629  else
22526                                           ! 2630   {
22527 5935           E9         00F8            br 	.1B1
22528                       00005938            .1AB:
22529                                           ! 2631    cheight=video_param_table[line_to_vpti[line]].cheight;
22530                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22531 5938           8A46         FB            mov	al,-5[bp]
22532 593B           30E4                       xor	ah,ah
22533 593D           89C3                       mov	bx,ax
22534                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22535 593F           8A87       028D            mov	al,_line_to_vpti[bx]
22536 5943           30E4                       xor	ah,ah
22537 5945           B1                     06  mov	cl,*6
22538 5947           D3E0                       shl	ax,cl
22539 5949           89C3                       mov	bx,ax
22540 594B           81C3                 02A1  add	bx,#_video_param_table
22541                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22542 594F           8A47         02            mov	al,2[bx]
22543 5952           8846         FF            mov	-1[bp],al
22544                                           !BCC_EOS
22545                                           ! 2632    bpp=vga_modes[line].pixbits;
22546                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22547 5955           8A46         FB            mov	al,-5[bp]
22548 5958           30E4                       xor	ah,ah
22549 595A           B1                     03  mov	cl,*3
22550 595C           D3E0                       shl	ax,cl
22551 595E           89C3                       mov	bx,ax
22552 5960           81C3                 020D  add	bx,#_vga_modes
22553                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22554 5964           8A47         03            mov	al,3[bx]
22555 5967           8846         FA            mov	-6[bp],al
22556                                           !BCC_EOS
22557                                           ! 2633    while((count-->0) && (xcurs<nbcols))
22558                                           ! 2634     {
22559 596A           E9         00AB            br 	.1B3
22560                       0000596D            .1B4:
22561                                           ! 2635      switch(vga_modes[line].memmodel)
22562                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22563 596D           8A46         FB            mov	al,-5[bp]
22564 5970           30E4                       xor	ah,ah
22565 5972           B1                     03  mov	cl,*3
22566 5974           D3E0                       shl	ax,cl
22567 5976           89C3                       mov	bx,ax
22568 5978           81C3                 020D  add	bx,#_vga_modes
22569 597C           8A47         02            mov	al,2[bx]
22570                                           ! 2636       {
22571 597F           EB           7A            jmp .1B7
22572                                           ! 2637        case 0x04:
22573                                           ! 2638        case 0x03:
22574                       00005981            .1B8:
22575                                           ! 2639          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22576                       00005981            .1B9:
22577                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22578 5981           8A46         FF            mov	al,-1[bp]
22579 5984           30E4                       xor	ah,ah
22580 5986           50                         push	ax
22581                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22582 5987           FF76         F8            push	-8[bp]
22583                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22584 598A           8A46         FD            mov	al,-3[bp]
22585 598D           30E4                       xor	ah,ah
22586 598F           50                         push	ax
22587                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22588 5990           8A46         FE            mov	al,-2[bp]
22589 5993           30E4                       xor	ah,ah
22590 5995           50                         push	ax
22591                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22592 5996           8A46         08            mov	al,8[bp]
22593 5999           30E4                       xor	ah,ah
22594 599B           50                         push	ax
22595                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22596 599C           8A46         04            mov	al,4[bp]
22597 599F           30E4                       xor	ah,ah
22598 59A1           50                         push	ax
22599                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22600 59A2           E8         F851            call	_write_gfx_char_pl4
22601 59A5           83C4                   0C  add	sp,*$C
22602                                           !BCC_EOS
22603                                           ! 2640          break;
22604 59A8           EB           67            jmp .1B5
22605                                           !BCC_EOS
22606                                           ! 2641        case 0x02:
22607                                           ! 2642          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22608                       000059AA            .1BA:
22609                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22610 59AA           8A46         FA            mov	al,-6[bp]
22611 59AD           30E4                       xor	ah,ah
22612 59AF           50                         push	ax
22613                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22614 59B0           FF76         F8            push	-8[bp]
22615                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22616 59B3           8A46         FD            mov	al,-3[bp]
22617 59B6           30E4                       xor	ah,ah
22618 59B8           50                         push	ax
22619                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22620 59B9           8A46         FE            mov	al,-2[bp]
22621 59BC           30E4                       xor	ah,ah
22622 59BE           50                         push	ax
22623                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22624 59BF           8A46         08            mov	al,8[bp]
22625 59C2           30E4                       xor	ah,ah
22626 59C4           50                         push	ax
22627                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22628 59C5           8A46         04            mov	al,4[bp]
22629 59C8           30E4                       xor	ah,ah
22630 59CA           50                         push	ax
22631                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22632 59CB           E8         F99B            call	_write_gfx_char_cga
22633 59CE           83C4                   0C  add	sp,*$C
22634                                           !BCC_EOS
22635                                           ! 2643          break;
22636 59D1           EB           3E            jmp .1B5
22637                                           !BCC_EOS
22638                                           ! 2644        case 0x05:
22639                                           ! 2645          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22640                       000059D3            .1BB:
22641                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22642 59D3           FF76         F8            push	-8[bp]
22643                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22644 59D6           8A46         FD            mov	al,-3[bp]
22645 59D9           30E4                       xor	ah,ah
22646 59DB           50                         push	ax
22647                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22648 59DC           8A46         FE            mov	al,-2[bp]
22649 59DF           30E4                       xor	ah,ah
22650 59E1           50                         push	ax
22651                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22652 59E2           8A46         08            mov	al,8[bp]
22653 59E5           30E4                       xor	ah,ah
22654 59E7           50                         push	ax
22655                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22656 59E8           8A46         04            mov	al,4[bp]
22657 59EB           30E4                       xor	ah,ah
22658 59ED           50                         push	ax
22659                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22660 59EE           E8         FB7B            call	_write_gfx_char_lin
22661 59F1           83C4                   0A  add	sp,*$A
22662                                           !BCC_EOS
22663                                           ! 2646          break;
22664 59F4           EB           1B            jmp .1B5
22665                                           !BCC_EOS
22666                                           ! 2647        default:
22667                                           ! 2648          unimplemented();
22668                       000059F6            .1BC:
22669                                           ! Debug: func () void = unimplemented+0 (used reg = )
22670 59F6           E8         23B2            call	_unimplemented
22671                                           !BCC_EOS
22672                                           ! 2649       }
22673                                           ! 2650      xcurs++;
22674 59F9           EB           16            jmp .1B5
22675                       000059FB            .1B7:
22676 59FB           2C                     02  sub	al,*2
22677 59FD           74           AB            je 	.1BA
22678 59FF           2C                     01  sub	al,*1
22679 5A01         0F84         FF7C            beq 	.1B9
22680 5A05           2C                     01  sub	al,*1
22681 5A07         0F84         FF76            beq 	.1B8
22682 5A0B           2C                     01  sub	al,*1
22683 5A0D           74           C4            je 	.1BB
22684 5A0F           EB           E5            jmp	.1BC
22685                       00005A11            .1B5:
22686                       FFFFFFEE            ..FFF9	=	-$12
22687                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22688 5A11           8A46         FE            mov	al,-2[bp]
22689 5A14           40                         inc	ax
22690 5A15           8846         FE            mov	-2[bp],al
22691                                           !BCC_EOS
22692                                           ! 2651     }
22693                                           ! 2652   }
22694                       00005A18            .1B3:
22695                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22696 5A18           8B46         0A            mov	ax,$A[bp]
22697 5A1B           48                         dec	ax
22698 5A1C           8946         0A            mov	$A[bp],ax
22699                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22700 5A1F           3D                   FFFF  cmp	ax,*-1
22701 5A22           74           0C            je  	.1BD
22702                       00005A24            .1BE:
22703                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22704 5A24           8A46         FE            mov	al,-2[bp]
22705 5A27           30E4                       xor	ah,ah
22706 5A29           3B46         F8            cmp	ax,-8[bp]
22707 5A2C         0F82         FF3D            blo 	.1B4
22708                       00005A30            .1BD:
22709                       00005A30            .1B2:
22710                                           ! 2653 }
22711                       00005A30            .1B1:
22712 5A30           89EC                       mov	sp,bp
22713 5A32           5D                         pop	bp
22714 5A33           C3                         ret
22715                                           ! 2654 #asm
22716                                           !BCC_ASM
22717                       00000008            _biosfn_write_char_only.count	set	8
22718                       00000006            _biosfn_write_char_only.attr	set	6
22719                       00000004            _biosfn_write_char_only.page	set	4
22720                       00000002            _biosfn_write_char_only.car	set	2
22721                       00005A34            biosfn_group_0B:
22722 5A34           80FF                   00    cmp bh, #0x00
22723 5A37           74           09              je biosfn_set_border_color
22724 5A39           80FF                   01    cmp bh, #0x01
22725 5A3C           74           43              je biosfn_set_palette
22726 5A3E           E8         2378              call _unknown
22727 5A41           C3                           ret
22728                       00005A42            biosfn_set_border_color:
22729 5A42           50                           push ax
22730 5A43           53                           push bx
22731 5A44           51                           push cx
22732 5A45           52                           push dx
22733 5A46           BA                   03DA    mov dx, # 0x3da
22734 5A49           EC                           in al, dx
22735 5A4A           BA                   03C0    mov dx, # 0x3c0
22736 5A4D           B0                     00    mov al, #0x00
22737 5A4F           EE                           out dx, al
22738 5A50           88D8                         mov al, bl
22739 5A52           24                     0F    and al, #0x0f
22740 5A54           A8                     08    test al, #0x08
22741 5A56           74           02              jz set_low_border
22742 5A58           04                     08    add al, #0x08
22743                       00005A5A            set_low_border:
22744 5A5A           EE                           out dx, al
22745 5A5B           B1                     01    mov cl, #0x01
22746 5A5D           80E3                   10    and bl, #0x10
22747                       00005A60            set_intensity_loop:
22748 5A60           BA                   03C0    mov dx, # 0x3c0
22749 5A63           88C8                         mov al, cl
22750 5A65           EE                           out dx, al
22751 5A66           BA                   03C1    mov dx, # 0x3c1
22752 5A69           EC                           in al, dx
22753 5A6A           24                     EF    and al, #0xef
22754 5A6C           08D8                         or al, bl
22755 5A6E           BA                   03C0    mov dx, # 0x3c0
22756 5A71           EE                           out dx, al
22757 5A72           FEC1                         inc cl
22758 5A74           80F9                   04    cmp cl, #0x04
22759 5A77           75           E7              jne set_intensity_loop
22760 5A79           B0                     20    mov al, #0x20
22761 5A7B           EE                           out dx, al
22762 5A7C           5A                           pop dx
22763 5A7D           59                           pop cx
22764 5A7E           5B                           pop bx
22765 5A7F           58                           pop ax
22766 5A80           C3                           ret
22767                       00005A81            biosfn_set_palette:
22768 5A81           50                           push ax
22769 5A82           53                           push bx
22770 5A83           51                           push cx
22771 5A84           52                           push dx
22772 5A85           BA                   03DA    mov dx, # 0x3da
22773 5A88           EC                           in al, dx
22774 5A89           B1                     01    mov cl, #0x01
22775 5A8B           80E3                   01    and bl, #0x01
22776                       00005A8E            set_cga_palette_loop:
22777 5A8E           BA                   03C0    mov dx, # 0x3c0
22778 5A91           88C8                         mov al, cl
22779 5A93           EE                           out dx, al
22780 5A94           BA                   03C1    mov dx, # 0x3c1
22781 5A97           EC                           in al, dx
22782 5A98           24                     FE    and al, #0xfe
22783 5A9A           08D8                         or al, bl
22784 5A9C           BA                   03C0    mov dx, # 0x3c0
22785 5A9F           EE                           out dx, al
22786 5AA0           FEC1                         inc cl
22787 5AA2           80F9                   04    cmp cl, #0x04
22788 5AA5           75           E7              jne set_cga_palette_loop
22789 5AA7           B0                     20    mov al, #0x20
22790 5AA9           EE                           out dx, al
22791 5AAA           5A                           pop dx
22792 5AAB           59                           pop cx
22793 5AAC           5B                           pop bx
22794 5AAD           58                           pop ax
22795 5AAE           C3                           ret
22796                                           ! 2730 endasm
22797                                           !BCC_ENDASM
22798                                           ! 2731 static void biosf
22799                                           ! Register BX used in function biosfn_write_char_only
22800                                           ! 2731 n_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22801                       00005AAF            _biosfn_write_pixel:
22802                                           !BCC_EOS
22803                                           !BCC_EOS
22804                                           !BCC_EOS
22805                                           !BCC_EOS
22806                                           ! 2732 {
22807                                           ! 2733  Bit8u mode,line,mask,attr,data;
22808                                           !BCC_EOS
22809                                           ! 2734  Bit16u addr;
22810                                           !BCC_EOS
22811                                           ! 2735  mode=read_byte(0x40,0x49);
22812 5AAF           55                         push	bp
22813 5AB0           89E5                       mov	bp,sp
22814 5AB2           83C4                   F8  add	sp,*-8
22815                                           ! Debug: list int = const $49 (used reg = )
22816 5AB5           B8                   0049  mov	ax,*$49
22817 5AB8           50                         push	ax
22818                                           ! Debug: list int = const $40 (used reg = )
22819 5AB9           B8                   0040  mov	ax,*$40
22820 5ABC           50                         push	ax
22821                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22822 5ABD           E8         225C            call	_read_byte
22823 5AC0           83C4                   04  add	sp,*4
22824                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22825 5AC3           8846         FF            mov	-1[bp],al
22826                                           !BCC_EOS
22827                                           ! 2736  line=find_vga_entry(mode);
22828                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22829 5AC6           8A46         FF            mov	al,-1[bp]
22830 5AC9           30E4                       xor	ah,ah
22831 5ACB           50                         push	ax
22832                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22833 5ACC           E8         2161            call	_find_vga_entry
22834 5ACF           44                         inc	sp
22835 5AD0           44                         inc	sp
22836                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22837 5AD1           8846         FE            mov	-2[bp],al
22838                                           !BCC_EOS
22839                                           ! 2737  if(line==0xFF)return;
22840                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22841 5AD4           8A46         FE            mov	al,-2[bp]
22842 5AD7           3C                     FF  cmp	al,#$FF
22843 5AD9           75           04            jne 	.1BF
22844                       00005ADB            .1C0:
22845 5ADB           89EC                       mov	sp,bp
22846 5ADD           5D                         pop	bp
22847 5ADE           C3                         ret
22848                                           !BCC_EOS
22849                                           ! 2738  if(vga_modes[line].class==0x00)return;
22850                       00005ADF            .1BF:
22851                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22852 5ADF           8A46         FE            mov	al,-2[bp]
22853 5AE2           30E4                       xor	ah,ah
22854 5AE4           B1                     03  mov	cl,*3
22855 5AE6           D3E0                       shl	ax,cl
22856 5AE8           89C3                       mov	bx,ax
22857 5AEA           81C3                 020D  add	bx,#_vga_modes
22858                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22859 5AEE           8A47         01            mov	al,1[bx]
22860 5AF1           84C0                       test	al,al
22861 5AF3           75           04            jne 	.1C1
22862                       00005AF5            .1C2:
22863 5AF5           89EC                       mov	sp,bp
22864 5AF7           5D                         pop	bp
22865 5AF8           C3                         ret
22866                                           !BCC_EOS
22867                                           ! 2739  switch(vga_modes[line].memmodel)
22868                       00005AF9            .1C1:
22869                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22870 5AF9           8A46         FE            mov	al,-2[bp]
22871 5AFC           30E4                       xor	ah,ah
22872 5AFE           B1                     03  mov	cl,*3
22873 5B00           D3E0                       shl	ax,cl
22874 5B02           89C3                       mov	bx,ax
22875 5B04           81C3                 020D  add	bx,#_vga_modes
22876 5B08           8A47         02            mov	al,2[bx]
22877                                           ! 2740   {
22878 5B0B           E9         0226            br 	.1C5
22879                                           ! 2741    case 0x04:
22880                                           ! 2742    case 0x03:
22881                       00005B0E            .1C6:
22882                                           ! 2743      addr = CX/8+DX*read_word(0x40,0x4A);
22883                       00005B0E            .1C7:
22884                                           ! Debug: list int = const $4A (used reg = )
22885 5B0E           B8                   004A  mov	ax,*$4A
22886 5B11           50                         push	ax
22887                                           ! Debug: list int = const $40 (used reg = )
22888 5B12           B8                   0040  mov	ax,*$40
22889 5B15           50                         push	ax
22890                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22891 5B16           E8         2216            call	_read_word
22892 5B19           83C4                   04  add	sp,*4
22893                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22894                                           ! Debug: expression subtree swapping
22895 5B1C           8B4E         0A            mov	cx,$A[bp]
22896 5B1F           F7E9                       imul	cx
22897 5B21           50                         push	ax
22898                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22899 5B22           8B46         08            mov	ax,8[bp]
22900 5B25           B1                     03  mov	cl,*3
22901 5B27           D3E8                       shr	ax,cl
22902                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22903 5B29           0346         F6            add	ax,0+..FFF8[bp]
22904 5B2C           44                         inc	sp
22905 5B2D           44                         inc	sp
22906                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22907 5B2E           8946         F8            mov	-8[bp],ax
22908                                           !BCC_EOS
22909                                           ! 2744      mask = 0x80 >> (CX & 0x07);
22910                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22911 5B31           8A46         08            mov	al,8[bp]
22912 5B34           24                     07  and	al,*7
22913                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22914 5B36           30E4                       xor	ah,ah
22915 5B38           89C3                       mov	bx,ax
22916 5B3A           B8                   0080  mov	ax,#$80
22917 5B3D           89D9                       mov	cx,bx
22918 5B3F           D3F8                       sar	ax,cl
22919                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22920 5B41           8846         FD            mov	-3[bp],al
22921                                           !BCC_EOS
22922                                           ! 2745      outw(0x3ce, (mask << 8) | 0x08);
22923                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22924 5B44           8A46         FD            mov	al,-3[bp]
22925 5B47           30E4                       xor	ah,ah
22926 5B49           88C4                       mov	ah,al
22927 5B4B           30C0                       xor	al,al
22928                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22929 5B4D           0C                     08  or	al,*8
22930                                           ! Debug: list unsigned int = ax+0 (used reg = )
22931 5B4F           50                         push	ax
22932                                           ! Debug: list int = const $3CE (used reg = )
22933 5B50           B8                   03CE  mov	ax,#$3CE
22934 5B53           50                         push	ax
22935                                           ! Debug: func () void = outw+0 (used reg = )
22936 5B54           E8         2241            call	_outw
22937 5B57           83C4                   04  add	sp,*4
22938                                           !BCC_EOS
22939                                           ! 2746      outw(0x3ce, 0x0205);
22940                                           ! Debug: list int = const $205 (used reg = )
22941 5B5A           B8                   0205  mov	ax,#$205
22942 5B5D           50                         push	ax
22943                                           ! Debug: list int = const $3CE (used reg = )
22944 5B5E           B8                   03CE  mov	ax,#$3CE
22945 5B61           50                         push	ax
22946                                           ! Debug: func () void = outw+0 (used reg = )
22947 5B62           E8         2233            call	_outw
22948 5B65           83C4                   04  add	sp,*4
22949                                           !BCC_EOS
22950                                           ! 2747      data = read_byte(0xa000,addr);
22951                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22952 5B68           FF76         F8            push	-8[bp]
22953                                           ! Debug: list unsigned int = const $A000 (used reg = )
22954 5B6B           B8                   A000  mov	ax,#$A000
22955 5B6E           50                         push	ax
22956                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22957 5B6F           E8         21AA            call	_read_byte
22958 5B72           83C4                   04  add	sp,*4
22959                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22960 5B75           8846         FB            mov	-5[bp],al
22961                                           !BCC_EOS
22962                                           ! 2748      if (AL & 0x80)
22963                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22964 5B78           8A46         06            mov	al,6[bp]
22965 5B7B           24                     80  and	al,#$80
22966 5B7D           84C0                       test	al,al
22967 5B7F           74           0E            je  	.1C8
22968                       00005B81            .1C9:
22969                                           ! 2749       {
22970                                           ! 2750        outw(0x3ce, 0x1803);
22971                                           ! Debug: list int = const $1803 (used reg = )
22972 5B81           B8                   1803  mov	ax,#$1803
22973 5B84           50                         push	ax
22974                                           ! Debug: list int = const $3CE (used reg = )
22975 5B85           B8                   03CE  mov	ax,#$3CE
22976 5B88           50                         push	ax
22977                                           ! Debug: func () void = outw+0 (used reg = )
22978 5B89           E8         220C            call	_outw
22979 5B8C           83C4                   04  add	sp,*4
22980                                           !BCC_EOS
22981                                           ! 2751       }
22982                                           ! 2752      write_byte(0xa000,addr,AL);
22983                       00005B8F            .1C8:
22984                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22985 5B8F           8A46         06            mov	al,6[bp]
22986 5B92           30E4                       xor	ah,ah
22987 5B94           50                         push	ax
22988                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22989 5B95           FF76         F8            push	-8[bp]
22990                                           ! Debug: list unsigned int = const $A000 (used reg = )
22991 5B98           B8                   A000  mov	ax,#$A000
22992 5B9B           50                         push	ax
22993                                           ! Debug: func () void = write_byte+0 (used reg = )
22994 5B9C           E8         21A3            call	_write_byte
22995 5B9F           83C4                   06  add	sp,*6
22996                                           !BCC_EOS
22997                                           ! 2753 #asm
22998                                           !BCC_EOS
22999                                           !BCC_ASM
23000                       0000000C            _biosfn_write_pixel.BH	set	$C
23001                       00000004            .biosfn_write_pixel.BH	set	4
23002                       00000010            _biosfn_write_pixel.CX	set	$10
23003                       00000008            .biosfn_write_pixel.CX	set	8
23004                       00000006            _biosfn_write_pixel.line	set	6
23005                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
23006                       0000000E            _biosfn_write_pixel.AL	set	$E
23007                       00000006            .biosfn_write_pixel.AL	set	6
23008                       00000003            _biosfn_write_pixel.data	set	3
23009                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
23010                       00000012            _biosfn_write_pixel.DX	set	$12
23011                       0000000A            .biosfn_write_pixel.DX	set	$A
23012                       00000005            _biosfn_write_pixel.mask	set	5
23013                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
23014                       00000004            _biosfn_write_pixel.attr	set	4
23015                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
23016                       00000007            _biosfn_write_pixel.mode	set	7
23017                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
23018                       00000000            _biosfn_write_pixel.addr	set	0
23019                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
23020 5BA2           BA                   03CE       mov dx, # 0x3ce
23021 5BA5           B8                   FF08       mov ax, #0xff08
23022 5BA8           EF                              out dx, ax
23023 5BA9           B8                   0005       mov ax, #0x0005
23024 5BAC           EF                              out dx, ax
23025 5BAD           B8                   0003       mov ax, #0x0003
23026 5BB0           EF                              out dx, ax
23027                                           ! 2761 endasm
23028                                           !BCC_ENDASM
23029                                           !BCC_EOS
23030                                           ! 2762      break;
23031 5BB1           E9         0198            br 	.1C3
23032                                           !BCC_EOS
23033                                           ! 2763    case 0x02:
23034                                           ! 2764      if(vga_modes[line].pixbits==2)
23035                       00005BB4            .1CA:
23036                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23037 5BB4           8A46         FE            mov	al,-2[bp]
23038 5BB7           30E4                       xor	ah,ah
23039 5BB9           B1                     03  mov	cl,*3
23040 5BBB           D3E0                       shl	ax,cl
23041 5BBD           89C3                       mov	bx,ax
23042 5BBF           81C3                 020D  add	bx,#_vga_modes
23043                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23044 5BC3           8A47         03            mov	al,3[bx]
23045 5BC6           3C                     02  cmp	al,*2
23046 5BC8           75           1C            jne 	.1CB
23047                       00005BCA            .1CC:
23048                                           ! 2765       {
23049                                           ! 2766        addr=(CX>>2)+(DX>>1)*80;
23050                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23051 5BCA           8B46         0A            mov	ax,$A[bp]
23052 5BCD           D1E8                       shr	ax,*1
23053                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23054 5BCF           B9                   0050  mov	cx,*$50
23055 5BD2           F7E9                       imul	cx
23056 5BD4           50                         push	ax
23057                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
23058 5BD5           8B46         08            mov	ax,8[bp]
23059 5BD8           D1E8                       shr	ax,*1
23060 5BDA           D1E8                       shr	ax,*1
23061                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23062 5BDC           0346         F6            add	ax,0+..FFF8[bp]
23063 5BDF           44                         inc	sp
23064 5BE0           44                         inc	sp
23065                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23066 5BE1           8946         F8            mov	-8[bp],ax
23067                                           !BCC_EOS
23068                                           ! 2767       }
23069                                           ! 2768      else
23070                                           ! 2769       {
23071 5BE4           EB           1A            jmp .1CD
23072                       00005BE6            .1CB:
23073                                           ! 2770        addr=(CX>>3)+(DX>>1)*80;
23074                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23075 5BE6           8B46         0A            mov	ax,$A[bp]
23076 5BE9           D1E8                       shr	ax,*1
23077                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23078 5BEB           B9                   0050  mov	cx,*$50
23079 5BEE           F7E9                       imul	cx
23080 5BF0           50                         push	ax
23081                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
23082 5BF1           8B46         08            mov	ax,8[bp]
23083 5BF4           B1                     03  mov	cl,*3
23084 5BF6           D3E8                       shr	ax,cl
23085                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23086 5BF8           0346         F6            add	ax,0+..FFF8[bp]
23087 5BFB           44                         inc	sp
23088 5BFC           44                         inc	sp
23089                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23090 5BFD           8946         F8            mov	-8[bp],ax
23091                                           !BCC_EOS
23092                                           ! 2771       }
23093                                           ! 2772      if (DX & 1) addr += 0x2000;
23094                       00005C00            .1CD:
23095                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23096 5C00           8A46         0A            mov	al,$A[bp]
23097 5C03           24                     01  and	al,*1
23098 5C05           84C0                       test	al,al
23099 5C07           74           09            je  	.1CE
23100                       00005C09            .1CF:
23101                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
23102 5C09           8B46         F8            mov	ax,-8[bp]
23103 5C0C           05                   2000  add	ax,#$2000
23104 5C0F           8946         F8            mov	-8[bp],ax
23105                                           !BCC_EOS
23106                                           ! 2773      data = read_byte(0xb800,addr);
23107                       00005C12            .1CE:
23108                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
23109 5C12           FF76         F8            push	-8[bp]
23110                                           ! Debug: list unsigned int = const $B800 (used reg = )
23111 5C15           B8                   B800  mov	ax,#$B800
23112 5C18           50                         push	ax
23113                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23114 5C19           E8         2100            call	_read_byte
23115 5C1C           83C4                   04  add	sp,*4
23116                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
23117 5C1F           8846         FB            mov	-5[bp],al
23118                                           !BCC_EOS
23119                                           ! 2774      if(vga_modes[line].pixbits==2)
23120                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23121 5C22           8A46         FE            mov	al,-2[bp]
23122 5C25           30E4                       xor	ah,ah
23123 5C27           B1                     03  mov	cl,*3
23124 5C29           D3E0                       shl	ax,cl
23125 5C2B           89C3                       mov	bx,ax
23126 5C2D           81C3                 020D  add	bx,#_vga_modes
23127                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23128 5C31           8A47         03            mov	al,3[bx]
23129 5C34           3C                     02  cmp	al,*2
23130 5C36           75           46            jne 	.1D0
23131                       00005C38            .1D1:
23132                                           ! 2775       {
23133                                           ! 2776        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
23134                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23135 5C38           8A46         08            mov	al,8[bp]
23136 5C3B           24                     03  and	al,*3
23137                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23138 5C3D           50                         push	ax
23139 5C3E           B8                   0003  mov	ax,*3
23140 5C41           2A46         F6            sub	al,0+..FFF8[bp]
23141 5C44           80DC                   00  sbb	ah,*0
23142 5C47           44                         inc	sp
23143 5C48           44                         inc	sp
23144                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23145 5C49           D1E0                       shl	ax,*1
23146 5C4B           50                         push	ax
23147                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
23148 5C4C           8A46         06            mov	al,6[bp]
23149 5C4F           24                     03  and	al,*3
23150                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23151 5C51           30E4                       xor	ah,ah
23152 5C53           8B4E         F6            mov	cx,0+..FFF8[bp]
23153 5C56           D3E0                       shl	ax,cl
23154 5C58           44                         inc	sp
23155 5C59           44                         inc	sp
23156                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23157 5C5A           8846         FC            mov	-4[bp],al
23158                                           !BCC_EOS
23159                                           ! 2777        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23160                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23161 5C5D           8A46         08            mov	al,8[bp]
23162 5C60           24                     03  and	al,*3
23163                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23164 5C62           50                         push	ax
23165 5C63           B8                   0003  mov	ax,*3
23166 5C66           2A46         F6            sub	al,0+..FFF8[bp]
23167 5C69           80DC                   00  sbb	ah,*0
23168 5C6C           44                         inc	sp
23169 5C6D           44                         inc	sp
23170                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23171 5C6E           D1E0                       shl	ax,*1
23172                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23173 5C70           89C3                       mov	bx,ax
23174 5C72           B8                   0003  mov	ax,*3
23175 5C75           89D9                       mov	cx,bx
23176 5C77           D3E0                       shl	ax,cl
23177                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23178 5C79           8846         FD            mov	-3[bp],al
23179                                           !BCC_EOS
23180                                           ! 2778       }
23181                                           ! 2779      else
23182                                           ! 2780       {
23183 5C7C           EB           40            jmp .1D2
23184                       00005C7E            .1D0:
23185                                           ! 2781        attr = (AL & 0x01) << (7 - (CX & 0x07));
23186                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23187 5C7E           8A46         08            mov	al,8[bp]
23188 5C81           24                     07  and	al,*7
23189                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23190 5C83           50                         push	ax
23191 5C84           B8                   0007  mov	ax,*7
23192 5C87           2A46         F6            sub	al,0+..FFF8[bp]
23193 5C8A           80DC                   00  sbb	ah,*0
23194 5C8D           44                         inc	sp
23195 5C8E           44                         inc	sp
23196 5C8F           50                         push	ax
23197                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23198 5C90           8A46         06            mov	al,6[bp]
23199 5C93           24                     01  and	al,*1
23200                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23201 5C95           30E4                       xor	ah,ah
23202 5C97           8B4E         F6            mov	cx,0+..FFF8[bp]
23203 5C9A           D3E0                       shl	ax,cl
23204 5C9C           44                         inc	sp
23205 5C9D           44                         inc	sp
23206                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23207 5C9E           8846         FC            mov	-4[bp],al
23208                                           !BCC_EOS
23209                                           ! 2782        mask = 0x01 << (7 - (CX & 0x07));
23210                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23211 5CA1           8A46         08            mov	al,8[bp]
23212 5CA4           24                     07  and	al,*7
23213                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23214 5CA6           50                         push	ax
23215 5CA7           B8                   0007  mov	ax,*7
23216 5CAA           2A46         F6            sub	al,0+..FFF8[bp]
23217 5CAD           80DC                   00  sbb	ah,*0
23218 5CB0           44                         inc	sp
23219 5CB1           44                         inc	sp
23220                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23221 5CB2           89C3                       mov	bx,ax
23222 5CB4           B8                   0001  mov	ax,*1
23223 5CB7           89D9                       mov	cx,bx
23224 5CB9           D3E0                       shl	ax,cl
23225                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23226 5CBB           8846         FD            mov	-3[bp],al
23227                                           !BCC_EOS
23228                                           ! 2783       }
23229                                           ! 2784      if (AL & 0x80)
23230                       00005CBE            .1D2:
23231                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23232 5CBE           8A46         06            mov	al,6[bp]
23233 5CC1           24                     80  and	al,#$80
23234 5CC3           84C0                       test	al,al
23235 5CC5           74           0B            je  	.1D3
23236                       00005CC7            .1D4:
23237                                           ! 2785       {
23238                                           ! 2786        data ^= attr;
23239                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23240 5CC7           8A46         FB            mov	al,-5[bp]
23241 5CCA           3246         FC            xor	al,-4[bp]
23242 5CCD           8846         FB            mov	-5[bp],al
23243                                           !BCC_EOS
23244                                           ! 2787       }
23245                                           ! 2788      else
23246                                           ! 2789       {
23247 5CD0           EB           16            jmp .1D5
23248                       00005CD2            .1D3:
23249                                           ! 2790        data &= ~mask;
23250                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23251 5CD2           8A46         FD            mov	al,-3[bp]
23252 5CD5           30E4                       xor	ah,ah
23253 5CD7           F7D0                       not	ax
23254                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23255 5CD9           2246         FB            and	al,-5[bp]
23256 5CDC           8846         FB            mov	-5[bp],al
23257                                           !BCC_EOS
23258                                           ! 2791        data |= attr;
23259                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23260 5CDF           8A46         FB            mov	al,-5[bp]
23261 5CE2           0A46         FC            or	al,-4[bp]
23262 5CE5           8846         FB            mov	-5[bp],al
23263                                           !BCC_EOS
23264                                           ! 2792       }
23265                                           ! 2793      write_byte(0xb800,addr,data);
23266                       00005CE8            .1D5:
23267                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23268 5CE8           8A46         FB            mov	al,-5[bp]
23269 5CEB           30E4                       xor	ah,ah
23270 5CED           50                         push	ax
23271                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23272 5CEE           FF76         F8            push	-8[bp]
23273                                           ! Debug: list unsigned int = const $B800 (used reg = )
23274 5CF1           B8                   B800  mov	ax,#$B800
23275 5CF4           50                         push	ax
23276                                           ! Debug: func () void = write_byte+0 (used reg = )
23277 5CF5           E8         204A            call	_write_byte
23278 5CF8           83C4                   06  add	sp,*6
23279                                           !BCC_EOS
23280                                           ! 2794      break;
23281 5CFB           EB           4F            jmp .1C3
23282                                           !BCC_EOS
23283                                           ! 2795    case 0x05:
23284                                           ! 2796      addr=CX+DX*(read_word(0x40,0x4A)*8);
23285                       00005CFD            .1D6:
23286                                           ! Debug: list int = const $4A (used reg = )
23287 5CFD           B8                   004A  mov	ax,*$4A
23288 5D00           50                         push	ax
23289                                           ! Debug: list int = const $40 (used reg = )
23290 5D01           B8                   0040  mov	ax,*$40
23291 5D04           50                         push	ax
23292                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23293 5D05           E8         2027            call	_read_word
23294 5D08           83C4                   04  add	sp,*4
23295                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23296 5D0B           B1                     03  mov	cl,*3
23297 5D0D           D3E0                       shl	ax,cl
23298                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23299                                           ! Debug: expression subtree swapping
23300 5D0F           8B4E         0A            mov	cx,$A[bp]
23301 5D12           F7E9                       imul	cx
23302                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23303                                           ! Debug: expression subtree swapping
23304 5D14           0346         08            add	ax,8[bp]
23305                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23306 5D17           8946         F8            mov	-8[bp],ax
23307                                           !BCC_EOS
23308                                           ! 2797      write_byte(0xa000,addr,AL);
23309                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23310 5D1A           8A46         06            mov	al,6[bp]
23311 5D1D           30E4                       xor	ah,ah
23312 5D1F           50                         push	ax
23313                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23314 5D20           FF76         F8            push	-8[bp]
23315                                           ! Debug: list unsigned int = const $A000 (used reg = )
23316 5D23           B8                   A000  mov	ax,#$A000
23317 5D26           50                         push	ax
23318                                           ! Debug: func () void = write_byte+0 (used reg = )
23319 5D27           E8         2018            call	_write_byte
23320 5D2A           83C4                   06  add	sp,*6
23321                                           !BCC_EOS
23322                                           ! 2798      break;
23323 5D2D           EB           1D            jmp .1C3
23324                                           !BCC_EOS
23325                                           ! 2799    default:
23326                                           ! 2800      unimplemented();
23327                       00005D2F            .1D7:
23328                                           ! Debug: func () void = unimplemented+0 (used reg = )
23329 5D2F           E8         2079            call	_unimplemented
23330                                           !BCC_EOS
23331                                           ! 2801   }
23332                                           ! 2802 }
23333 5D32           EB           18            jmp .1C3
23334                       00005D34            .1C5:
23335 5D34           2C                     02  sub	al,*2
23336 5D36         0F84         FE7A            beq 	.1CA
23337 5D3A           2C                     01  sub	al,*1
23338 5D3C         0F84         FDCE            beq 	.1C7
23339 5D40           2C                     01  sub	al,*1
23340 5D42         0F84         FDC8            beq 	.1C6
23341 5D46           2C                     01  sub	al,*1
23342 5D48           74           B3            je 	.1D6
23343 5D4A           EB           E3            jmp	.1D7
23344                       00005D4C            .1C3:
23345                       FFFFFFF6            ..FFF8	=	-$A
23346 5D4C           89EC                       mov	sp,bp
23347 5D4E           5D                         pop	bp
23348 5D4F           C3                         ret
23349                                           ! 2803 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23350                                           ! Register BX used in function biosfn_write_pixel
23351                       00005D50            _biosfn_read_pixel:
23352                                           !BCC_EOS
23353                                           !BCC_EOS
23354                                           !BCC_EOS
23355                                           !BCC_EOS
23356                                           ! 2804 {
23357                                           ! 2805  Bit8u mode,line,mask,attr,data,i;
23358                                           !BCC_EOS
23359                                           ! 2806  Bit16u addr;
23360                                           !BCC_EOS
23361                                           ! 2807  Bit16u ss=get_SS();
23362 5D50           55                         push	bp
23363 5D51           89E5                       mov	bp,sp
23364 5D53           83C4                   F6  add	sp,*-$A
23365                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23366 5D56           E8         204F            call	_get_SS
23367                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23368 5D59           8946         F6            mov	-$A[bp],ax
23369                                           !BCC_EOS
23370                                           ! 2808  mode=read_byte(0x40,0x49);
23371                                           ! Debug: list int = const $49 (used reg = )
23372 5D5C           B8                   0049  mov	ax,*$49
23373 5D5F           50                         push	ax
23374                                           ! Debug: list int = const $40 (used reg = )
23375 5D60           B8                   0040  mov	ax,*$40
23376 5D63           50                         push	ax
23377                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23378 5D64           E8         1FB5            call	_read_byte
23379 5D67           83C4                   04  add	sp,*4
23380                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23381 5D6A           8846         FF            mov	-1[bp],al
23382                                           !BCC_EOS
23383                                           ! 2809  line=find_vga_entry(mode);
23384                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23385 5D6D           8A46         FF            mov	al,-1[bp]
23386 5D70           30E4                       xor	ah,ah
23387 5D72           50                         push	ax
23388                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23389 5D73           E8         1EBA            call	_find_vga_entry
23390 5D76           44                         inc	sp
23391 5D77           44                         inc	sp
23392                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23393 5D78           8846         FE            mov	-2[bp],al
23394                                           !BCC_EOS
23395                                           ! 2810  if(line==0xFF)return;
23396                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23397 5D7B           8A46         FE            mov	al,-2[bp]
23398 5D7E           3C                     FF  cmp	al,#$FF
23399 5D80           75           04            jne 	.1D8
23400                       00005D82            .1D9:
23401 5D82           89EC                       mov	sp,bp
23402 5D84           5D                         pop	bp
23403 5D85           C3                         ret
23404                                           !BCC_EOS
23405                                           ! 2811  if(vga_modes[line].class==0x00)return;
23406                       00005D86            .1D8:
23407                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23408 5D86           8A46         FE            mov	al,-2[bp]
23409 5D89           30E4                       xor	ah,ah
23410 5D8B           B1                     03  mov	cl,*3
23411 5D8D           D3E0                       shl	ax,cl
23412 5D8F           89C3                       mov	bx,ax
23413 5D91           81C3                 020D  add	bx,#_vga_modes
23414                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23415 5D95           8A47         01            mov	al,1[bx]
23416 5D98           84C0                       test	al,al
23417 5D9A           75           04            jne 	.1DA
23418                       00005D9C            .1DB:
23419 5D9C           89EC                       mov	sp,bp
23420 5D9E           5D                         pop	bp
23421 5D9F           C3                         ret
23422                                           !BCC_EOS
23423                                           ! 2812  switch(vga_modes[line].memmodel)
23424                       00005DA0            .1DA:
23425                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23426 5DA0           8A46         FE            mov	al,-2[bp]
23427 5DA3           30E4                       xor	ah,ah
23428 5DA5           B1                     03  mov	cl,*3
23429 5DA7           D3E0                       shl	ax,cl
23430 5DA9           89C3                       mov	bx,ax
23431 5DAB           81C3                 020D  add	bx,#_vga_modes
23432 5DAF           8A47         02            mov	al,2[bx]
23433                                           ! 2813   {
23434 5DB2           E9         016A            br 	.1DE
23435                                           ! 2814    case 0x04:
23436                                           ! 2815    case 0x03:
23437                       00005DB5            .1DF:
23438                                           ! 2816      addr = CX/8+DX*read_word(0x40,0x4A);
23439                       00005DB5            .1E0:
23440                                           ! Debug: list int = const $4A (used reg = )
23441 5DB5           B8                   004A  mov	ax,*$4A
23442 5DB8           50                         push	ax
23443                                           ! Debug: list int = const $40 (used reg = )
23444 5DB9           B8                   0040  mov	ax,*$40
23445 5DBC           50                         push	ax
23446                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23447 5DBD           E8         1F6F            call	_read_word
23448 5DC0           83C4                   04  add	sp,*4
23449                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23450                                           ! Debug: expression subtree swapping
23451 5DC3           8B4E         08            mov	cx,8[bp]
23452 5DC6           F7E9                       imul	cx
23453 5DC8           50                         push	ax
23454                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23455 5DC9           8B46         06            mov	ax,6[bp]
23456 5DCC           B1                     03  mov	cl,*3
23457 5DCE           D3E8                       shr	ax,cl
23458                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23459 5DD0           0346         F4            add	ax,0+..FFF7[bp]
23460 5DD3           44                         inc	sp
23461 5DD4           44                         inc	sp
23462                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23463 5DD5           8946         F8            mov	-8[bp],ax
23464                                           !BCC_EOS
23465                                           ! 2817      mask = 0x80 >> (CX & 0x07);
23466                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23467 5DD8           8A46         06            mov	al,6[bp]
23468 5DDB           24                     07  and	al,*7
23469                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23470 5DDD           30E4                       xor	ah,ah
23471 5DDF           89C3                       mov	bx,ax
23472 5DE1           B8                   0080  mov	ax,#$80
23473 5DE4           89D9                       mov	cx,bx
23474 5DE6           D3F8                       sar	ax,cl
23475                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23476 5DE8           8846         FD            mov	-3[bp],al
23477                                           !BCC_EOS
23478                                           ! 2818      attr = 0x00;
23479                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23480 5DEB           30C0                       xor	al,al
23481 5DED           8846         FC            mov	-4[bp],al
23482                                           !BCC_EOS
23483                                           ! 2819      for(i=0;i<4;i++)
23484                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23485 5DF0           30C0                       xor	al,al
23486 5DF2           8846         FA            mov	-6[bp],al
23487                                           !BCC_EOS
23488                                           !BCC_EOS
23489                                           ! 2820       {
23490 5DF5           EB           4B            jmp .1E3
23491                       00005DF7            .1E4:
23492                                           ! 2821        outw(0x3ce, (i << 8) | 0x04);
23493                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23494 5DF7           8A46         FA            mov	al,-6[bp]
23495 5DFA           30E4                       xor	ah,ah
23496 5DFC           88C4                       mov	ah,al
23497 5DFE           30C0                       xor	al,al
23498                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23499 5E00           0C                     04  or	al,*4
23500                                           ! Debug: list unsigned int = ax+0 (used reg = )
23501 5E02           50                         push	ax
23502                                           ! Debug: list int = const $3CE (used reg = )
23503 5E03           B8                   03CE  mov	ax,#$3CE
23504 5E06           50                         push	ax
23505                                           ! Debug: func () void = outw+0 (used reg = )
23506 5E07           E8         1F8E            call	_outw
23507 5E0A           83C4                   04  add	sp,*4
23508                                           !BCC_EOS
23509                                           ! 2822        da
23510                                           ! 2822 ta = read_byte(0xa000,addr) & mask;
23511                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23512 5E0D           FF76         F8            push	-8[bp]
23513                                           ! Debug: list unsigned int = const $A000 (used reg = )
23514 5E10           B8                   A000  mov	ax,#$A000
23515 5E13           50                         push	ax
23516                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23517 5E14           E8         1F05            call	_read_byte
23518 5E17           83C4                   04  add	sp,*4
23519                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23520 5E1A           2246         FD            and	al,-3[bp]
23521                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23522 5E1D           8846         FB            mov	-5[bp],al
23523                                           !BCC_EOS
23524                                           ! 2823        if (data > 0) attr |= (0x01 << i);
23525                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23526 5E20           8A46         FB            mov	al,-5[bp]
23527 5E23           84C0                       test	al,al
23528 5E25           74           14            je  	.1E5
23529                       00005E27            .1E6:
23530                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23531 5E27           8A46         FA            mov	al,-6[bp]
23532 5E2A           30E4                       xor	ah,ah
23533 5E2C           89C3                       mov	bx,ax
23534 5E2E           B8                   0001  mov	ax,*1
23535 5E31           89D9                       mov	cx,bx
23536 5E33           D3E0                       shl	ax,cl
23537                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23538 5E35           0A46         FC            or	al,-4[bp]
23539 5E38           8846         FC            mov	-4[bp],al
23540                                           !BCC_EOS
23541                                           ! 2824       }
23542                       00005E3B            .1E5:
23543                                           ! 2825      break;
23544                       00005E3B            .1E2:
23545                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23546 5E3B           8A46         FA            mov	al,-6[bp]
23547 5E3E           40                         inc	ax
23548 5E3F           8846         FA            mov	-6[bp],al
23549                       00005E42            .1E3:
23550                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23551 5E42           8A46         FA            mov	al,-6[bp]
23552 5E45           3C                     04  cmp	al,*4
23553 5E47           72           AE            jb 	.1E4
23554                       00005E49            .1E7:
23555                       00005E49            .1E1:
23556 5E49           E9         00EB            br 	.1DC
23557                                           !BCC_EOS
23558                                           ! 2826    case 0x02:
23559                                           ! 2827      addr=(CX>>2)+(DX>>1)*80;
23560                       00005E4C            .1E8:
23561                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23562 5E4C           8B46         08            mov	ax,8[bp]
23563 5E4F           D1E8                       shr	ax,*1
23564                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23565 5E51           B9                   0050  mov	cx,*$50
23566 5E54           F7E9                       imul	cx
23567 5E56           50                         push	ax
23568                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23569 5E57           8B46         06            mov	ax,6[bp]
23570 5E5A           D1E8                       shr	ax,*1
23571 5E5C           D1E8                       shr	ax,*1
23572                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23573 5E5E           0346         F4            add	ax,0+..FFF7[bp]
23574 5E61           44                         inc	sp
23575 5E62           44                         inc	sp
23576                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23577 5E63           8946         F8            mov	-8[bp],ax
23578                                           !BCC_EOS
23579                                           ! 2828      if (DX & 1) addr += 0x2000;
23580                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23581 5E66           8A46         08            mov	al,8[bp]
23582 5E69           24                     01  and	al,*1
23583 5E6B           84C0                       test	al,al
23584 5E6D           74           09            je  	.1E9
23585                       00005E6F            .1EA:
23586                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23587 5E6F           8B46         F8            mov	ax,-8[bp]
23588 5E72           05                   2000  add	ax,#$2000
23589 5E75           8946         F8            mov	-8[bp],ax
23590                                           !BCC_EOS
23591                                           ! 2829      data = read_byte(0xb800,addr);
23592                       00005E78            .1E9:
23593                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23594 5E78           FF76         F8            push	-8[bp]
23595                                           ! Debug: list unsigned int = const $B800 (used reg = )
23596 5E7B           B8                   B800  mov	ax,#$B800
23597 5E7E           50                         push	ax
23598                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23599 5E7F           E8         1E9A            call	_read_byte
23600 5E82           83C4                   04  add	sp,*4
23601                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23602 5E85           8846         FB            mov	-5[bp],al
23603                                           !BCC_EOS
23604                                           ! 2830      if(vga_modes[line].pixbits==2)
23605                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23606 5E88           8A46         FE            mov	al,-2[bp]
23607 5E8B           30E4                       xor	ah,ah
23608 5E8D           B1                     03  mov	cl,*3
23609 5E8F           D3E0                       shl	ax,cl
23610 5E91           89C3                       mov	bx,ax
23611 5E93           81C3                 020D  add	bx,#_vga_modes
23612                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23613 5E97           8A47         03            mov	al,3[bx]
23614 5E9A           3C                     02  cmp	al,*2
23615 5E9C           75           25            jne 	.1EB
23616                       00005E9E            .1EC:
23617                                           ! 2831       {
23618                                           ! 2832        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23619                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23620 5E9E           8A46         06            mov	al,6[bp]
23621 5EA1           24                     03  and	al,*3
23622                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23623 5EA3           50                         push	ax
23624 5EA4           B8                   0003  mov	ax,*3
23625 5EA7           2A46         F4            sub	al,0+..FFF7[bp]
23626 5EAA           80DC                   00  sbb	ah,*0
23627 5EAD           44                         inc	sp
23628 5EAE           44                         inc	sp
23629                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23630 5EAF           D1E0                       shl	ax,*1
23631                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23632 5EB1           89C3                       mov	bx,ax
23633 5EB3           8A46         FB            mov	al,-5[bp]
23634 5EB6           30E4                       xor	ah,ah
23635 5EB8           89D9                       mov	cx,bx
23636 5EBA           D3E8                       shr	ax,cl
23637                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23638 5EBC           24                     03  and	al,*3
23639                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23640 5EBE           8846         FC            mov	-4[bp],al
23641                                           !BCC_EOS
23642                                           ! 2833       }
23643                                           ! 2834      else
23644                                           ! 2835       {
23645 5EC1           EB           21            jmp .1ED
23646                       00005EC3            .1EB:
23647                                           ! 2836        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23648                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23649 5EC3           8A46         06            mov	al,6[bp]
23650 5EC6           24                     07  and	al,*7
23651                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23652 5EC8           50                         push	ax
23653 5EC9           B8                   0007  mov	ax,*7
23654 5ECC           2A46         F4            sub	al,0+..FFF7[bp]
23655 5ECF           80DC                   00  sbb	ah,*0
23656 5ED2           44                         inc	sp
23657 5ED3           44                         inc	sp
23658                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23659 5ED4           89C3                       mov	bx,ax
23660 5ED6           8A46         FB            mov	al,-5[bp]
23661 5ED9           30E4                       xor	ah,ah
23662 5EDB           89D9                       mov	cx,bx
23663 5EDD           D3E8                       shr	ax,cl
23664                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23665 5EDF           24                     01  and	al,*1
23666                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23667 5EE1           8846         FC            mov	-4[bp],al
23668                                           !BCC_EOS
23669                                           ! 2837       }
23670                                           ! 2838      break;
23671                       00005EE4            .1ED:
23672 5EE4           EB           51            jmp .1DC
23673                                           !BCC_EOS
23674                                           ! 2839    case 0x05:
23675                                           ! 2840      addr=CX+DX*(read_word(0x40,0x4A)*8);
23676                       00005EE6            .1EE:
23677                                           ! Debug: list int = const $4A (used reg = )
23678 5EE6           B8                   004A  mov	ax,*$4A
23679 5EE9           50                         push	ax
23680                                           ! Debug: list int = const $40 (used reg = )
23681 5EEA           B8                   0040  mov	ax,*$40
23682 5EED           50                         push	ax
23683                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23684 5EEE           E8         1E3E            call	_read_word
23685 5EF1           83C4                   04  add	sp,*4
23686                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23687 5EF4           B1                     03  mov	cl,*3
23688 5EF6           D3E0                       shl	ax,cl
23689                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23690                                           ! Debug: expression subtree swapping
23691 5EF8           8B4E         08            mov	cx,8[bp]
23692 5EFB           F7E9                       imul	cx
23693                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23694                                           ! Debug: expression subtree swapping
23695 5EFD           0346         06            add	ax,6[bp]
23696                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23697 5F00           8946         F8            mov	-8[bp],ax
23698                                           !BCC_EOS
23699                                           ! 2841      attr=read_byte(0xa000,addr);
23700                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23701 5F03           FF76         F8            push	-8[bp]
23702                                           ! Debug: list unsigned int = const $A000 (used reg = )
23703 5F06           B8                   A000  mov	ax,#$A000
23704 5F09           50                         push	ax
23705                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23706 5F0A           E8         1E0F            call	_read_byte
23707 5F0D           83C4                   04  add	sp,*4
23708                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23709 5F10           8846         FC            mov	-4[bp],al
23710                                           !BCC_EOS
23711                                           ! 2842      break;
23712 5F13           EB           22            jmp .1DC
23713                                           !BCC_EOS
23714                                           ! 2843    default:
23715                                           ! 2844      unimplemented();
23716                       00005F15            .1EF:
23717                                           ! Debug: func () void = unimplemented+0 (used reg = )
23718 5F15           E8         1E93            call	_unimplemented
23719                                           !BCC_EOS
23720                                           ! 2845      attr = 0;
23721                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23722 5F18           30C0                       xor	al,al
23723 5F1A           8846         FC            mov	-4[bp],al
23724                                           !BCC_EOS
23725                                           ! 2846   }
23726                                           ! 2847  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23727 5F1D           EB           18            jmp .1DC
23728                       00005F1F            .1DE:
23729 5F1F           2C                     02  sub	al,*2
23730 5F21         0F84         FF27            beq 	.1E8
23731 5F25           2C                     01  sub	al,*1
23732 5F27         0F84         FE8A            beq 	.1E0
23733 5F2B           2C                     01  sub	al,*1
23734 5F2D         0F84         FE84            beq 	.1DF
23735 5F31           2C                     01  sub	al,*1
23736 5F33           74           B1            je 	.1EE
23737 5F35           EB           DE            jmp	.1EF
23738                       00005F37            .1DC:
23739                       FFFFFFF4            ..FFF7	=	-$C
23740                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23741 5F37           FF76         0A            push	$A[bp]
23742                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23743 5F3A           FF76         F6            push	-$A[bp]
23744                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23745 5F3D           E8         1DEF            call	_read_word
23746 5F40           83C4                   04  add	sp,*4
23747                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23748 5F43           30C0                       xor	al,al
23749                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23750 5F45           0A46         FC            or	al,-4[bp]
23751                                           ! Debug: list unsigned int = ax+0 (used reg = )
23752 5F48           50                         push	ax
23753                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23754 5F49           FF76         0A            push	$A[bp]
23755                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23756 5F4C           FF76         F6            push	-$A[bp]
23757                                           ! Debug: func () void = write_word+0 (used reg = )
23758 5F4F           E8         1E08            call	_write_word
23759 5F52           83C4                   06  add	sp,*6
23760                                           !BCC_EOS
23761                                           ! 2848 }
23762 5F55           89EC                       mov	sp,bp
23763 5F57           5D                         pop	bp
23764 5F58           C3                         ret
23765                                           ! 2849 static void biosfn_write_teletype (car, page, attr, flag)
23766                                           ! Register BX used in function biosfn_read_pixel
23767                                           ! 2850 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23768                       00005F59            _biosfn_write_teletype:
23769                                           !BCC_EOS
23770                                           !BCC_EOS
23771                                           !BCC_EOS
23772                                           !BCC_EOS
23773                                           ! 2851 {
23774                                           ! 2852  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23775                                           !BCC_EOS
23776                                           ! 2853  Bit16u nbcols,nbrows,address;
23777                                           !BCC_EOS
23778                                           ! 2854  Bit16u cursor,dummy;
23779                                           !BCC_EOS
23780                                           ! 2855  if(page==0xff)
23781 5F59           55                         push	bp
23782 5F5A           89E5                       mov	bp,sp
23783 5F5C           83C4                   F0  add	sp,*-$10
23784                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23785 5F5F           8A46         06            mov	al,6[bp]
23786 5F62           3C                     FF  cmp	al,#$FF
23787 5F64           75           11            jne 	.1F0
23788                       00005F66            .1F1:
23789                                           ! 2856   page=read_byte(0x40,0x62);
23790                                           ! Debug: list int = const $62 (used reg = )
23791 5F66           B8                   0062  mov	ax,*$62
23792 5F69           50                         push	ax
23793                                           ! Debug: list int = const $40 (used reg = )
23794 5F6A           B8                   0040  mov	ax,*$40
23795 5F6D           50                         push	ax
23796                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23797 5F6E           E8         1DAB            call	_read_byte
23798 5F71           83C4                   04  add	sp,*4
23799                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23800 5F74           8846         06            mov	6[bp],al
23801                                           !BCC_EOS
23802                                           ! 2857  mode=read_byte(0x40,0x49);
23803                       00005F77            .1F0:
23804                                           ! Debug: list int = const $49 (used reg = )
23805 5F77           B8                   0049  mov	ax,*$49
23806 5F7A           50                         push	ax
23807                                           ! Debug: list int = const $40 (used reg = )
23808 5F7B           B8                   0040  mov	ax,*$40
23809 5F7E           50                         push	ax
23810                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23811 5F7F           E8         1D9A            call	_read_byte
23812 5F82           83C4                   04  add	sp,*4
23813                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23814 5F85           8846         FC            mov	-4[bp],al
23815                                           !BCC_EOS
23816                                           ! 2858  line=find_vga_entry(mode);
23817                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23818 5F88           8A46         FC            mov	al,-4[bp]
23819 5F8B           30E4                       xor	ah,ah
23820 5F8D           50                         push	ax
23821                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23822 5F8E           E8         1C9F            call	_find_vga_entry
23823 5F91           44                         inc	sp
23824 5F92           44                         inc	sp
23825                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23826 5F93           8846         FB            mov	-5[bp],al
23827                                           !BCC_EOS
23828                                           ! 2859  if(line==0xFF)return;
23829                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23830 5F96           8A46         FB            mov	al,-5[bp]
23831 5F99           3C                     FF  cmp	al,#$FF
23832 5F9B           75           04            jne 	.1F2
23833                       00005F9D            .1F3:
23834 5F9D           89EC                       mov	sp,bp
23835 5F9F           5D                         pop	bp
23836 5FA0           C3                         ret
23837                                           !BCC_EOS
23838                                           ! 2860  biosfn_get_cursor_pos(page,&dummy,&cursor);
23839                       00005FA1            .1F2:
23840                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23841 5FA1           8D5E         F2            lea	bx,-$E[bp]
23842 5FA4           53                         push	bx
23843                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23844 5FA5           8D5E         F0            lea	bx,-$10[bp]
23845 5FA8           53                         push	bx
23846                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23847 5FA9           8A46         06            mov	al,6[bp]
23848 5FAC           30E4                       xor	ah,ah
23849 5FAE           50                         push	ax
23850                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23851 5FAF           E8         E50E            call	_biosfn_get_cursor_pos
23852 5FB2           83C4                   06  add	sp,*6
23853                                           !BCC_EOS
23854                                           ! 2861  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23855                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23856 5FB5           8A46         F2            mov	al,-$E[bp]
23857                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23858 5FB8           8846         FE            mov	-2[bp],al
23859                                           !BCC_EOS
23860                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23861 5FBB           8B46         F2            mov	ax,-$E[bp]
23862 5FBE           30C0                       xor	al,al
23863                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23864 5FC0           88E0                       mov	al,ah
23865 5FC2           30E4                       xor	ah,ah
23866                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23867 5FC4           8846         FD            mov	-3[bp],al
23868                                           !BCC_EOS
23869                                           ! 2862  nbrows=read_byte(0x40,0x84)+1;
23870                                           ! Debug: list int = const $84 (used reg = )
23871 5FC7           B8                   0084  mov	ax,#$84
23872 5FCA           50                         push	ax
23873                                           ! Debug: list int = const $40 (used reg = )
23874 5FCB           B8                   0040  mov	ax,*$40
23875 5FCE           50                         push	ax
23876                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23877 5FCF           E8         1D4A            call	_read_byte
23878 5FD2           83C4                   04  add	sp,*4
23879                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23880 5FD5           30E4                       xor	ah,ah
23881                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23882 5FD7           40                         inc	ax
23883 5FD8           8946         F6            mov	-$A[bp],ax
23884                                           !BCC_EOS
23885                                           ! 2863  nbcols=read_word(0x40,0x4A);
23886                                           ! Debug: list int = const $4A (used reg = )
23887 5FDB           B8                   004A  mov	ax,*$4A
23888 5FDE           50                         push	ax
23889                                           ! Debug: list int = const $40 (used reg = )
23890 5FDF           B8                   0040  mov	ax,*$40
23891 5FE2           50                         push	ax
23892                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23893 5FE3           E8         1D49            call	_read_word
23894 5FE6           83C4                   04  add	sp,*4
23895                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23896 5FE9           8946         F8            mov	-8[bp],ax
23897                                           !BCC_EOS
23898                                           ! 2864  switch(car)
23899 5FEC           8A46         04            mov	al,4[bp]
23900                                           ! 2865   {
23901 5FEF           E9         01EF            br 	.1F6
23902                                           ! 2866    case 7:
23903                                           ! 2867     break;
23904                       00005FF2            .1F7:
23905 5FF2           E9         020D            br 	.1F4
23906                                           !BCC_EOS
23907                                           ! 2868    case 8:
23908                                           ! 2869     if(xcurs>0)xcurs--;
23909                       00005FF5            .1F8:
23910                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23911 5FF5           8A46         FE            mov	al,-2[bp]
23912 5FF8           84C0                       test	al,al
23913 5FFA           74           07            je  	.1F9
23914                       00005FFC            .1FA:
23915                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23916 5FFC           8A46         FE            mov	al,-2[bp]
23917 5FFF           48                         dec	ax
23918 6000           8846         FE            mov	-2[bp],al
23919                                           !BCC_EOS
23920                                           ! 2870     break;
23921                       00006003            .1F9:
23922 6003           E9         01FC            br 	.1F4
23923                                           !BCC_EOS
23924                                           ! 2871    case '\r':
23925                                           ! 2872     xcurs=0;
23926                       00006006            .1FB:
23927                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23928 6006           30C0                       xor	al,al
23929 6008           8846         FE            mov	-2[bp],al
23930                                           !BCC_EOS
23931                                           ! 2873     break;
23932 600B           E9         01F4            br 	.1F4
23933                                           !BCC_EOS
23934                                           ! 2874    case '\n':
23935                                           ! 2875     ycurs++;
23936                       0000600E            .1FC:
23937                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23938 600E           8A46         FD            mov	al,-3[bp]
23939 6011           40                         inc	ax
23940 6012           8846         FD            mov	-3[bp],al
23941                                           !BCC_EOS
23942                                           ! 2876     break;
23943 6015           E9         01EA            br 	.1F4
23944                                           !BCC_EOS
23945                                           ! 2877    case '\t':
23946                                           ! 2878     do
23947                       00006018            .1FD:
23948                                           ! 2879      {
23949                       00006018            .200:
23950                                           ! 2880       biosfn_write_teletype(' ',page,attr,flag);
23951                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23952 6018           8A46         0A            mov	al,$A[bp]
23953 601B           30E4                       xor	ah,ah
23954 601D           50                         push	ax
23955                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23956 601E           8A46         08            mov	al,8[bp]
23957 6021           30E4                       xor	ah,ah
23958 6023           50                         push	ax
23959                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23960 6024           8A46         06            mov	al,6[bp]
23961 6027           30E4                       xor	ah,ah
23962 6029           50                         push	ax
23963                                           ! Debug: list int = const $20 (used reg = )
23964 602A           B8                   0020  mov	ax,*$20
23965 602D           50                         push	ax
23966                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23967 602E           E8         FF28            call	_biosfn_write_teletype
23968 6031           83C4                   08  add	sp,*8
23969                                           !BCC_EOS
23970                                           ! 2881       biosfn_get_cursor_pos(page,&dummy,&cursor);
23971                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23972 6034           8D5E         F2            lea	bx,-$E[bp]
23973 6037           53                         push	bx
23974                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23975 6038           8D5E         F0            lea	bx,-$10[bp]
23976 603B           53                         push	bx
23977                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23978 603C           8A46         06            mov	al,6[bp]
23979 603F           30E4                       xor	ah,ah
23980 6041           50                         push	ax
23981                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23982 6042           E8         E47B            call	_biosfn_get_cursor_pos
23983 6045           83C4                   06  add	sp,*6
23984                                           !BCC_EOS
23985                                           ! 2882       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23986                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23987 6048           8A46         F2            mov	al,-$E[bp]
23988                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23989 604B           8846         FE            mov	-2[bp],al
23990                                           !BCC_EOS
23991                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23992 604E           8B46         F2            mov	ax,-$E[bp]
23993 6051           30C0                       xor	al,al
23994                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23995 6053           88E0                       mov	al,ah
23996 6055           30E4                       xor	ah,ah
23997                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23998 6057           8846         FD            mov	-3[bp],al
23999                                           !BCC_EOS
24000                                           ! 2883      }while(xcurs%8==0);
24001                       0000605A            .1FF:
24002                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
24003 605A           8A46         FE            mov	al,-2[bp]
24004 605D           30E4                       xor	ah,ah
24005 605F           24                     07  and	al,*7
24006                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
24007 6061           84C0                       test	al,al
24008 6063           74           B3            je 	.200
24009                       00006065            .201:
24010                                           !BCC_EOS
24011                                           ! 2884     break;
24012                       00006065            .1FE:
24013 6065           E9         019A            br 	.1F4
24014                                           !BCC_EOS
24015                                           ! 2885    default:
24016                                           ! 2886     if(vga_modes[line].class==0x00)
24017                       00006068            .202:
24018                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24019 6068           8A46         FB            mov	al,-5[bp]
24020 606B           30E4                       xor	ah,ah
24021 606D           B1                     03  mov	cl,*3
24022 606F           D3E0                       shl	ax,cl
24023 6071           89C3                       mov	bx,ax
24024 6073           81C3                 020D  add	bx,#_vga_modes
24025                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24026 6077           8A47         01            mov	al,1[bx]
24027 607A           84C0                       test	al,al
24028 607C         0F85         0082            bne 	.203
24029                       00006080            .204:
24030                                           ! 2887      {
24031                                           ! 2888       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
24032                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
24033 6080           8A46         FD            mov	al,-3[bp]
24034 6083           30E4                       xor	ah,ah
24035 6085           8B4E         F8            mov	cx,-8[bp]
24036 6088           F7E9                       imul	cx
24037                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24038                                           ! Debug: expression subtree swapping
24039 608A           0246         FE            add	al,-2[bp]
24040 608D           80D4                   00  adc	ah,*0
24041                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24042 6090           D1E0                       shl	ax,*1
24043 6092           50                         push	ax
24044                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24045 6093           8B46         F8            mov	ax,-8[bp]
24046 6096           8B4E         F6            mov	cx,-$A[bp]
24047 6099           F7E9                       imul	cx
24048                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24049 609B           D1E0                       shl	ax,*1
24050                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24051 609D           0C                     FF  or	al,#$FF
24052                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24053                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24054 609F           89C3                       mov	bx,ax
24055 60A1           8A46         06            mov	al,6[bp]
24056 60A4           30E4                       xor	ah,ah
24057 60A6           93                         xchg	ax,bx
24058 60A7           40                         inc	ax
24059 60A8           89D9                       mov	cx,bx
24060 60AA           F7E9                       imul	cx
24061                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24062 60AC           0346         EE            add	ax,0+..FFF6[bp]
24063 60AF           44                         inc	sp
24064 60B0           44                         inc	sp
24065                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24066 60B1           8946         F4            mov	-$C[bp],ax
24067                                           !BCC_EOS
24068                                           ! 2889       write_byte(vga_modes[line].sstart,address,car);
24069                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
24070 60B4           8A46         04            mov	al,4[bp]
24071 60B7           30E4                       xor	ah,ah
24072 60B9           50                         push	ax
24073                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
24074 60BA           FF76         F4            push	-$C[bp]
24075                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24076 60BD           8A46         FB            mov	al,-5[bp]
24077 60C0           30E4                       xor	ah,ah
24078 60C2           B1                     03  mov	cl,*3
24079 60C4           D3E0                       shl	ax,cl
24080 60C6           89C3                       mov	bx,ax
24081 60C8           81C3                 020D  add	bx,#_vga_modes
24082                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24083 60CC           FF77         04            push	4[bx]
24084                                           ! Debug: func () void = write_byte+0 (used reg = )
24085 60CF           E8         1C70            call	_write_byte
24086 60D2           83C4                   06  add	sp,*6
24087                                           !BCC_EOS
24088                                           ! 2890       if(flag==3)
24089                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
24090 60D5           8A46         0A            mov	al,$A[bp]
24091 60D8           3C                     03  cmp	al,*3
24092 60DA           75           23            jne 	.205
24093                       000060DC            .206:
24094                                           ! 2891        write_byte(vga_modes[line].sstart,address+1,attr);
24095                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
24096 60DC           8A46         08            mov	al,8[bp]
24097 60DF           30E4                       xor	ah,ah
24098 60E1           50                         push	ax
24099                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
24100 60E2           8B46         F4            mov	ax,-$C[bp]
24101                                           ! Debug: list unsigned int = ax+1 (used reg = )
24102 60E5           40                         inc	ax
24103 60E6           50                         push	ax
24104                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24105 60E7           8A46         FB            mov	al,-5[bp]
24106 60EA           30E4                       xor	ah,ah
24107 60EC           B1                     03  mov	cl,*3
24108 60EE           D3E0                       shl	ax,cl
24109 60F0           89C3                       mov	bx,ax
24110 60F2           81C3                 020D  add	bx,#_vga_modes
24111                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24112 60F6           FF77         04            push	4[bx]
24113                                           ! Debug: func () void = write_byte+0 (used reg = )
24114 60F9           E8         1C46            call	_write_byte
24115 60FC           83C4                   06  add	sp,*6
24116                                           !BCC_EOS
24117                                           ! 2892      }
24118                       000060FF            .205:
24119                                           ! 2893     else
24120                                           ! 2894      {
24121 60FF           E9         00D6            br 	.207
24122                       00006102            .203:
24123                                           ! 2895       cheight=video_param_table[line_to_vpti[line]].cheight;
24124                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
24125 6102           8A46         FB            mov	al,-5[bp]
24126 6105           30E4                       xor	ah,ah
24127 6107           89C3                       mov	bx,ax
24128                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
24129 6109           8A87       028D            mov	al,_line_to_vpti[bx]
24130 610D           30E4                       xor	ah,ah
24131 610F           B1                     06  mov	cl,*6
24132 6111           D3E0                       shl	ax,cl
24133 6113           89C3                       mov	bx,ax
24134 6115           81C3                 02A1  add	bx,#_video_param_table
24135                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
24136 6119           8A47         02            mov	al,2[bx]
24137 611C           8846         FF            mov	-1[bp],al
24138                                           !BCC_EOS
24139                                           ! 2896       bpp=vga_modes[line].pixbits;
24140                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24141 611F           8A46         FB            mov	al,-5[bp]
24142 6122           30E4                       xor	ah,ah
24143 6124           B1                     03  mov	cl,*3
24144 6126           D3E0                       shl	ax,cl
24145 6128           89C3                       mov	bx,ax
24146 612A           81C3                 020D  add	bx,#_vga_modes
24147                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
24148 612E           8A47         03            mov	al,3[bx]
24149 6131           8846         FA            mov	-6[bp],al
24150                                           !BCC_EOS
24151                                           ! 2897       switch(vga_modes[line].memmodel)
24152                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24153 6134           8A46         FB            mov	al,-5[bp]
24154 6137           30E4                       xor	ah,ah
24155 6139           B1                     03  mov	cl,*3
24156 613B           D3E0                       shl	ax,cl
24157 613D           89C3                       mov	bx,ax
24158 613F           81C3                 020D  add	bx,#_vga_modes
24159 6143           8A47         02            mov	al,2[bx]
24160                                           ! 2898        {
24161 6146           EB           7A            jmp .20A
24162                                           ! 2899         case 0x04:
24163                                           ! 2900         case 0x03:
24164                       00006148            .20B:
24165                                           ! 2901           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24166                       00006148            .20C:
24167                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24168 6148           8A46         FF            mov	al,-1[bp]
24169 614B           30E4                       xor	ah,ah
24170 614D           50                         push	ax
24171                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24172 614E           FF76         F8            push	-8[bp]
24173                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24174 6151           8A46         FD            mov	al,-3[bp]
24175 6154           30E4                       xor	ah,ah
24176 6156           50                         push	ax
24177                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24178 6157           8A46         FE            mov	al,-2[bp]
24179 615A           30E4                       xor	ah,ah
24180 615C           50                         push	ax
24181                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24182 615D           8A46         08            mov	al,8[bp]
24183 6160           30E4                       xor	ah,ah
24184 6162           50                         push	ax
24185                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24186 6163           8A46         04            mov	al,4[bp]
24187 6166           30E4                       xor	ah,ah
24188 6168           50                         push	ax
24189                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24190 6169           E8         F08A            call	_write_gfx_char_pl4
24191 616C           83C4                   0C  add	sp,*$C
24192                                           !BCC_EOS
24193                                           ! 2902           break;
24194 616F           EB           67            jmp .208
24195                                           !BCC_EOS
24196                                           ! 2903         case 0x02:
24197                                           ! 2904        
24198                                           ! 2904    write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24199                       00006171            .20D:
24200                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24201 6171           8A46         FA            mov	al,-6[bp]
24202 6174           30E4                       xor	ah,ah
24203 6176           50                         push	ax
24204                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24205 6177           FF76         F8            push	-8[bp]
24206                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24207 617A           8A46         FD            mov	al,-3[bp]
24208 617D           30E4                       xor	ah,ah
24209 617F           50                         push	ax
24210                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24211 6180           8A46         FE            mov	al,-2[bp]
24212 6183           30E4                       xor	ah,ah
24213 6185           50                         push	ax
24214                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24215 6186           8A46         08            mov	al,8[bp]
24216 6189           30E4                       xor	ah,ah
24217 618B           50                         push	ax
24218                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24219 618C           8A46         04            mov	al,4[bp]
24220 618F           30E4                       xor	ah,ah
24221 6191           50                         push	ax
24222                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24223 6192           E8         F1D4            call	_write_gfx_char_cga
24224 6195           83C4                   0C  add	sp,*$C
24225                                           !BCC_EOS
24226                                           ! 2905           break;
24227 6198           EB           3E            jmp .208
24228                                           !BCC_EOS
24229                                           ! 2906         case 0x05:
24230                                           ! 2907           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24231                       0000619A            .20E:
24232                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24233 619A           FF76         F8            push	-8[bp]
24234                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24235 619D           8A46         FD            mov	al,-3[bp]
24236 61A0           30E4                       xor	ah,ah
24237 61A2           50                         push	ax
24238                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24239 61A3           8A46         FE            mov	al,-2[bp]
24240 61A6           30E4                       xor	ah,ah
24241 61A8           50                         push	ax
24242                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24243 61A9           8A46         08            mov	al,8[bp]
24244 61AC           30E4                       xor	ah,ah
24245 61AE           50                         push	ax
24246                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24247 61AF           8A46         04            mov	al,4[bp]
24248 61B2           30E4                       xor	ah,ah
24249 61B4           50                         push	ax
24250                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24251 61B5           E8         F3B4            call	_write_gfx_char_lin
24252 61B8           83C4                   0A  add	sp,*$A
24253                                           !BCC_EOS
24254                                           ! 2908           break;
24255 61BB           EB           1B            jmp .208
24256                                           !BCC_EOS
24257                                           ! 2909         default:
24258                                           ! 2910           unimplemented();
24259                       000061BD            .20F:
24260                                           ! Debug: func () void = unimplemented+0 (used reg = )
24261 61BD           E8         1BEB            call	_unimplemented
24262                                           !BCC_EOS
24263                                           ! 2911        }
24264                                           ! 2912      }
24265 61C0           EB           16            jmp .208
24266                       000061C2            .20A:
24267 61C2           2C                     02  sub	al,*2
24268 61C4           74           AB            je 	.20D
24269 61C6           2C                     01  sub	al,*1
24270 61C8         0F84         FF7C            beq 	.20C
24271 61CC           2C                     01  sub	al,*1
24272 61CE         0F84         FF76            beq 	.20B
24273 61D2           2C                     01  sub	al,*1
24274 61D4           74           C4            je 	.20E
24275 61D6           EB           E5            jmp	.20F
24276                       000061D8            .208:
24277                                           ! 2913     xcurs++;
24278                       000061D8            .207:
24279                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24280 61D8           8A46         FE            mov	al,-2[bp]
24281 61DB           40                         inc	ax
24282 61DC           8846         FE            mov	-2[bp],al
24283                                           !BCC_EOS
24284                                           ! 2914   }
24285                                           ! 2915  if(xcurs==nbcols)
24286 61DF           EB           21            jmp .1F4
24287                       000061E1            .1F6:
24288 61E1           2C                     07  sub	al,*7
24289 61E3         0F84         FE0B            beq 	.1F7
24290 61E7           2C                     01  sub	al,*1
24291 61E9         0F84         FE08            beq 	.1F8
24292 61ED           2C                     01  sub	al,*1
24293 61EF         0F84         FE25            beq 	.1FD
24294 61F3           2C                     01  sub	al,*1
24295 61F5         0F84         FE15            beq 	.1FC
24296 61F9           2C                     03  sub	al,*3
24297 61FB         0F84         FE07            beq 	.1FB
24298 61FF           E9         FE66            br 	.202
24299                       00006202            .1F4:
24300                       FFFFFFEE            ..FFF6	=	-$12
24301                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24302 6202           8A46         FE            mov	al,-2[bp]
24303 6205           30E4                       xor	ah,ah
24304 6207           3B46         F8            cmp	ax,-8[bp]
24305 620A           75           0C            jne 	.210
24306                       0000620C            .211:
24307                                           ! 2916   {xcurs=0;
24308                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24309 620C           30C0                       xor	al,al
24310 620E           8846         FE            mov	-2[bp],al
24311                                           !BCC_EOS
24312                                           ! 2917    ycurs++;
24313                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24314 6211           8A46         FD            mov	al,-3[bp]
24315 6214           40                         inc	ax
24316 6215           8846         FD            mov	-3[bp],al
24317                                           !BCC_EOS
24318                                           ! 2918   }
24319                                           ! 2919  if(ycurs==nbrows)
24320                       00006218            .210:
24321                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24322 6218           8A46         FD            mov	al,-3[bp]
24323 621B           30E4                       xor	ah,ah
24324 621D           3B46         F6            cmp	ax,-$A[bp]
24325 6220           75           70            jne 	.212
24326                       00006222            .213:
24327                                           ! 2920   {
24328                                           ! 2921    if(vga_modes[line].class==0x00)
24329                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24330 6222           8A46         FB            mov	al,-5[bp]
24331 6225           30E4                       xor	ah,ah
24332 6227           B1                     03  mov	cl,*3
24333 6229           D3E0                       shl	ax,cl
24334 622B           89C3                       mov	bx,ax
24335 622D           81C3                 020D  add	bx,#_vga_modes
24336                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24337 6231           8A47         01            mov	al,1[bx]
24338 6234           84C0                       test	al,al
24339 6236           75           2A            jne 	.214
24340                       00006238            .215:
24341                                           ! 2922     {
24342                                           ! 2923      biosfn_scroll(0x01,0x07,0,0,nbrows-1,nbcols-1,page,1);
24343                                           ! Debug: list int = const 1 (used reg = )
24344 6238           B8                   0001  mov	ax,*1
24345 623B           50                         push	ax
24346                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24347 623C           8A46         06            mov	al,6[bp]
24348 623F           30E4                       xor	ah,ah
24349 6241           50                         push	ax
24350                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24351 6242           8B46         F8            mov	ax,-8[bp]
24352                                           ! Debug: list unsigned int = ax-1 (used reg = )
24353 6245           48                         dec	ax
24354 6246           50                         push	ax
24355                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24356 6247           8B46         F6            mov	ax,-$A[bp]
24357                                           ! Debug: list unsigned int = ax-1 (used reg = )
24358 624A           48                         dec	ax
24359 624B           50                         push	ax
24360                                           ! Debug: list int = const 0 (used reg = )
24361 624C           31C0                       xor	ax,ax
24362 624E           50                         push	ax
24363                                           ! Debug: list int = const 0 (used reg = )
24364 624F           31C0                       xor	ax,ax
24365 6251           50                         push	ax
24366                                           ! Debug: list int = const 7 (used reg = )
24367 6252           B8                   0007  mov	ax,*7
24368 6255           50                         push	ax
24369                                           ! Debug: list int = const 1 (used reg = )
24370 6256           B8                   0001  mov	ax,*1
24371 6259           50                         push	ax
24372                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24373 625A           E8         E76E            call	_biosfn_scroll
24374 625D           83C4                   10  add	sp,*$10
24375                                           !BCC_EOS
24376                                           ! 2924     }
24377                                           ! 2925    else
24378                                           ! 2926     {
24379 6260           EB           27            jmp .216
24380                       00006262            .214:
24381                                           ! 2927      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24382                                           ! Debug: list int = const 1 (used reg = )
24383 6262           B8                   0001  mov	ax,*1
24384 6265           50                         push	ax
24385                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24386 6266           8A46         06            mov	al,6[bp]
24387 6269           30E4                       xor	ah,ah
24388 626B           50                         push	ax
24389                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24390 626C           8B46         F8            mov	ax,-8[bp]
24391                                           ! Debug: list unsigned int = ax-1 (used reg = )
24392 626F           48                         dec	ax
24393 6270           50                         push	ax
24394                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24395 6271           8B46         F6            mov	ax,-$A[bp]
24396                                           ! Debug: list unsigned int = ax-1 (used reg = )
24397 6274           48                         dec	ax
24398 6275           50                         push	ax
24399                                           ! Debug: list int = const 0 (used reg = )
24400 6276           31C0                       xor	ax,ax
24401 6278           50                         push	ax
24402                                           ! Debug: list int = const 0 (used reg = )
24403 6279           31C0                       xor	ax,ax
24404 627B           50                         push	ax
24405                                           ! Debug: list int = const 0 (used reg = )
24406 627C           31C0                       xor	ax,ax
24407 627E           50                         push	ax
24408                                           ! Debug: list int = const 1 (used reg = )
24409 627F           B8                   0001  mov	ax,*1
24410 6282           50                         push	ax
24411                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24412 6283           E8         E745            call	_biosfn_scroll
24413 6286           83C4                   10  add	sp,*$10
24414                                           !BCC_EOS
24415                                           ! 2928     }
24416                                           ! 2929    ycurs-=1;
24417                       00006289            .216:
24418                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24419 6289           8A46         FD            mov	al,-3[bp]
24420 628C           30E4                       xor	ah,ah
24421 628E           48                         dec	ax
24422 628F           8846         FD            mov	-3[bp],al
24423                                           !BCC_EOS
24424                                           ! 2930   }
24425                                           ! 2931  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24426                       00006292            .212:
24427                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24428 6292           8A46         FD            mov	al,-3[bp]
24429 6295           30E4                       xor	ah,ah
24430 6297           8946         F2            mov	-$E[bp],ax
24431                                           !BCC_EOS
24432                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24433 629A           8B46         F2            mov	ax,-$E[bp]
24434 629D           88C4                       mov	ah,al
24435 629F           30C0                       xor	al,al
24436 62A1           8946         F2            mov	-$E[bp],ax
24437                                           !BCC_EOS
24438                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24439 62A4           8B46         F2            mov	ax,-$E[bp]
24440 62A7           0246         FE            add	al,-2[bp]
24441 62AA           80D4                   00  adc	ah,*0
24442 62AD           8946         F2            mov	-$E[bp],ax
24443                                           !BCC_EOS
24444                                           ! 2932  biosfn_set_cursor_pos(page,cursor);
24445                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24446 62B0           FF76         F2            push	-$E[bp]
24447                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24448 62B3           8A46         06            mov	al,6[bp]
24449 62B6           30E4                       xor	ah,ah
24450 62B8           50                         push	ax
24451                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24452 62B9           E8         E104            call	_biosfn_set_cursor_pos
24453 62BC           83C4                   04  add	sp,*4
24454                                           !BCC_EOS
24455                                           ! 2933 }
24456 62BF           89EC                       mov	sp,bp
24457 62C1           5D                         pop	bp
24458 62C2           C3                         ret
24459                                           ! 2934 #asm
24460                                           !BCC_ASM
24461                       00000008            _biosfn_write_teletype.flag	set	8
24462                       00000006            _biosfn_write_teletype.attr	set	6
24463                       00000004            _biosfn_write_teletype.page	set	4
24464                       00000002            _biosfn_write_teletype.car	set	2
24465                       000062C3            biosfn_get_video_mode:
24466 62C3           1E                           push ds
24467 62C4           B8                   0040    mov ax, # 0x40
24468 62C7           8ED8                         mov ds, ax
24469 62C9           53                           push bx
24470 62CA           BB                   0062    mov bx, # 0x62
24471 62CD           8A07                         mov al, [bx]
24472 62CF           5B                           pop bx
24473 62D0           88C7                         mov bh, al
24474 62D2           53                           push bx
24475 62D3           BB                   0087    mov bx, # 0x87
24476 62D6           8A27                         mov ah, [bx]
24477 62D8           80E4                   80    and ah, #0x80
24478 62DB           BB                   0049    mov bx, # 0x49
24479 62DE           8A07                         mov al, [bx]
24480 62E0           08E0                         or al, ah
24481 62E2           BB                   004A    mov bx, # 0x4A
24482 62E5           8A27                         mov ah, [bx]
24483 62E7           5B                           pop bx
24484 62E8           1F                           pop ds
24485 62E9           C3                           ret
24486                                           ! 2956 endasm
24487                                           !BCC_ENDASM
24488                                           ! 2957 #asm
24489                                           !BCC_ASM
24490                       00000008            _biosfn_write_teletype.flag	set	8
24491                       00000006            _biosfn_write_teletype.attr	set	6
24492                       00000004            _biosfn_write_teletype.page	set	4
24493                       00000002            _biosfn_write_teletype.car	set	2
24494                       000062EA            biosfn_group_10:
24495 62EA           3C                     00    cmp al, #0x00
24496 62EC           75           02              jne int10_test_1001
24497 62EE           EB           64              jmp biosfn_set_single_palette_reg
24498                       000062F0            int10_test_1001:
24499 62F0           3C                     01    cmp al, #0x01
24500 62F2           75           02              jne int10_test_1002
24501 62F4           EB           78              jmp biosfn_set_overscan_border_color
24502                       000062F6            int10_test_1002:
24503 62F6           3C                     02    cmp al, #0x02
24504 62F8           75           02              jne int10_test_1003
24505 62FA           EB           7A              jmp biosfn_set_all_palette_reg
24506                       000062FC            int10_test_1003:
24507 62FC           3C                     03    cmp al, #0x03
24508 62FE           75           03              jne int10_test_1007
24509 6300           E9         00A0              jmp biosfn_toggle_intensity
24510                       00006303            int10_test_1007:
24511 6303           3C                     07    cmp al, #0x07
24512 6305           75           03              jne int10_test_1008
24513 6307           E9         00BF              jmp biosfn_get_single_palette_reg
24514                       0000630A            int10_test_1008:
24515 630A           3C                     08    cmp al, #0x08
24516 630C           75           03              jne int10_test_1009
24517 630E           E9         00DC              jmp biosfn_read_overscan_border_color
24518                       00006311            int10_test_1009:
24519 6311           3C                     09    cmp al, #0x09
24520 6313           75           03              jne int10_test_1010
24521 6315           E9         00E3              jmp biosfn_get_all_palette_reg
24522                       00006318            int10_test_1010:
24523 6318           3C                     10    cmp al, #0x10
24524 631A           75           03              jne int10_test_1012
24525 631C           E9         011D              jmp biosfn_set_single_dac_reg
24526                       0000631F            int10_test_1012:
24527 631F           3C                     12    cmp al, #0x12
24528 6321           75           03              jne int10_test_1013
24529 6323           E9         012F              jmp biosfn_set_all_dac_reg
24530                       00006326            int10_test_1013:
24531 6326           3C                     13    cmp al, #0x13
24532 6328           75           03              jne int10_test_1015
24533 632A           E9         0150              jmp biosfn_select_video_dac_color_page
24534                       0000632D            int10_test_1015:
24535 632D           3C                     15    cmp al, #0x15
24536 632F           75           03              jne int10_test_1017
24537 6331           E9         018C              jmp biosfn_read_single_dac_reg
24538                       00006334            int10_test_1017:
24539 6334           3C                     17    cmp al, #0x17
24540 6336           75           03              jne int10_test_1018
24541 6338           E9         01A0              jmp biosfn_read_all_dac_reg
24542                       0000633B            int10_test_1018:
24543 633B           3C                     18    cmp al, #0x18
24544 633D           75           03              jne int10_test_1019
24545 633F           E9         01C1              jmp biosfn_set_pel_mask
24546                       00006342            int10_test_1019:
24547 6342           3C                     19    cmp al, #0x19
24548 6344           75           03              jne int10_test_101A
24549 6346           E9         01C5              jmp biosfn_read_pel_mask
24550                       00006349            int10_test_101A:
24551 6349           3C                     1A    cmp al, #0x1a
24552 634B           75           03              jne int10_group_10_unknown
24553 634D           E9         01C9              jmp biosfn_read_video_dac_state
24554                       00006350            int10_group_10_unknown:
24555 6350           E8         1A66              call _unknown
24556 6353           C3                           ret
24557                       00006354            biosfn_set_single_palette_reg:
24558 6354           80FB                   14    cmp bl, #0x14
24559 6357           77           14              ja no_actl_reg1
24560 6359           50                           push ax
24561 635A           52                           push dx
24562 635B           BA                   03DA    mov dx, # 0x3da
24563 635E           EC                           in al, dx
24564 635F           BA                   03C0    mov dx, # 0x3c0
24565 6362           88D8                         mov al, bl
24566 6364           EE                           out dx, al
24567 6365           88F8                         mov al, bh
24568 6367           EE                           out dx, al
24569 6368           B0                     20    mov al, #0x20
24570 636A           EE                           out dx, al
24571 636B           5A                           pop dx
24572 636C           58                           pop ax
24573                       0000636D            no_actl_reg1:
24574 636D           C3                           ret
24575                                           ! 3039 endasm
24576                                           !BCC_ENDASM
24577                                           ! 3040 #asm
24578                                           !BCC_ASM
24579                       00000008            _biosfn_write_teletype.flag	set	8
24580                       00000006            _biosfn_write_teletype.attr	set	6
24581                       00000004            _biosfn_write_teletype.page	set	4
24582                       00000002            _biosfn_write_teletype.car	set	2
24583                       0000636E            biosfn_set_overscan_border_color:
24584 636E           53                           push bx
24585 636F           B3                     11    mov bl, #0x11
24586 6371           E8         FFE0              call biosfn_set_single_palette_reg
24587 6374           5B                           pop bx
24588 6375           C3                           ret
24589                                           ! 3047 endasm
24590                                           !BCC_ENDASM
24591                                           ! 3048 #asm
24592                                           !BCC_ASM
24593                       00000008            _biosfn_write_teletype.flag	set	8
24594                       00000006            _biosfn_write_teletype.attr	set	6
24595                       00000004            _biosfn_write_teletype.page	set	4
24596                       00000002            _biosfn_write_teletype.car	set	2
24597                       00006376            biosfn_set_all_palette_reg:
24598 6376           50                           push ax
24599 6377           53                           push bx
24600 6378           51                           push cx
24601 6379           52                           push dx
24602 637A           89D3                         mov bx, dx
24603 637C           BA                   03DA    mov dx, # 0x3da
24604 637F           EC                           in al, dx
24605 6380           B1                     00    mov cl, #0x00
24606 6382           BA                   03C0    mov dx, # 0x3c0
24607                       00006385            set_palette_loop:
24608 6385           88C8                         mov al, cl
24609 6387           EE                           out dx, al
24610 6388           26                           seg es
24611 6389           8A07                         mov al, [bx]
24612 638B           EE                           out dx, al
24613 638C           43                           inc bx
24614 638D           FEC1                         inc cl
24615 638F           80F9                   10    cmp cl, #0x10
24616 6392           75           F1              jne set_palette_loop
24617 6394           B0                     11    mov al, #0x11
24618 6396           EE                           out dx, al
24619 6397           26                           seg es
24620 6398           8A07                         mov al, [bx]
24621 639A           EE                           out dx, al
24622 639B           B0                     20    mov al, #0x20
24623 639D           EE                           out dx, al
24624 639E           5A                           pop dx
24625 639F           59                           pop cx
24626 63A0           5B                           pop bx
24627 63A1           58                           pop ax
24628 63A2           C3                           ret
24629                                           ! 3081 endasm
24630                                           !BCC_ENDASM
24631                                           ! 3082 #asm
24632                                           !BCC_ASM
24633                       00000008            _biosfn_write_teletype.flag	set	8
24634                       00000006            _biosfn_write_teletype.attr	set	6
24635                       00000004            _biosfn_write_teletype.page	set	4
24636                       00000002            _biosfn_write_teletype.car	set	2
24637                       000063A3            biosfn_toggle_intensity:
24638 63A3           50                           push ax
24639 63A4           53                           push bx
24640 63A5           52                           push dx
24641 63A6           BA                   03DA    mov dx, # 0x3da
24642 63A9           EC                           in al, dx
24643 63AA           BA                   03C0    mov dx, # 0x3c0
24644 63AD           B0                     10    mov al, #0x10
24645 63AF           EE                           out dx, al
24646 63B0           BA                   03C1    mov dx, # 0x3c1
24647 63B3           EC                           in al, dx
24648 63B4           24                     F7    and al, #0xf7
24649 63B6           80E3                   01    and bl, #0x01
24650 63B9           C0E3                   03    shl bl, 3
24651 63BC           08D8                         or al, bl
24652 63BE           BA                   03C0    mov dx, # 0x3c0
24653 63C1           EE                           out dx, al
24654 63C2           B0                     20    mov al, #0x20
24655 63C4           EE                           out dx, al
24656 63C5           5A                           pop dx
24657 63C6           5B                           pop bx
24658 63C7           58                           pop ax
24659 63C8           C3                           ret
24660                                           ! 3106 endasm
24661                                           !BCC_ENDASM
24662                                           ! 3107 #asm
24663                                           !BCC_ASM
24664                       00000008            _biosfn_write_teletype.flag	set	8
24665                       00000006            _biosfn_write_teletype.attr	set	6
24666                       00000004            _biosfn_write_teletype.page	set	4
24667                       00000002            _biosfn_write_teletype.car	set	2
24668                       000063C9            biosfn_get_single_palette_reg:
24669 63C9           80FB                   14    cmp bl, #0x14
24670 63CC           77           1E              ja no_actl_reg2
24671 63CE           50                           push ax
24672 63CF           52                           push dx
24673 63D0           BA                   03DA    mov dx, # 0x3da
24674 63D3           EC                           in al, dx
24675 63D4           BA                   03C0    mov dx, # 0x3c0
24676 63D7           88D8                         mov al, bl
24677 63D9           EE                           out dx, al
24678 63DA           BA                   03C1    mov dx, # 0x3c1
24679 63DD           EC                           in al, dx
24680 63DE           88C7                         mov bh, al
24681 63E0           BA                   03DA    mov dx, # 0x3da
24682 63E3           EC                           in al, dx
24683 63E4           BA                   03C0    mov dx, # 0x3c0
24684 63E7           B0                     20    mov al, #0x20
24685 63E9           EE                           out dx, al
24686 63EA           5A                           pop dx
24687 63EB           58                           pop ax
24688                       000063EC            no_actl_reg2:
24689 63EC           C3                           ret
24690                                           ! 3130 endasm
24691                                           !BCC_ENDASM
24692                                           ! 3131 #asm
24693                                           !BCC_ASM
24694                       00000008            _biosfn_write_teletype.flag	set	8
24695                       00000006            _biosfn_write_teletype.attr	set	6
24696                       00000004            _biosfn_write_teletype.page	set	4
24697                       00000002            _biosfn_write_teletype.car	set	2
24698                       000063ED            biosfn_read_overscan_border_color:
24699 63ED           50                           push ax
24700 63EE           53                           push bx
24701 63EF           B3                     11    mov bl, #0x11
24702 63F1           E8         FFD5              call biosfn_get_single_palette_reg
24703 63F4           88F8                         mov al, bh
24704 63F6           5B                           pop bx
24705 63F7           88C7                         mov bh, al
24706 63F9           58                           pop ax
24707 63FA           C3                           ret
24708                                           ! 3142 endasm
24709                                           !BCC_ENDASM
24710                                           ! 3143 #asm
24711                                           !BCC_ASM
24712                       00000008            _biosfn_write_teletype.flag	set	8
24713                       00000006            _biosfn_write_teletype.attr	set	6
24714                       00000004            _biosfn_write_teletype.page	set	4
24715                       00000002            _biosfn_write_teletype.car	set	2
24716                       000063FB            biosfn_get_all_palette_reg:
24717 63FB           50                           push ax
24718 63FC           53                           push bx
24719 63FD           51                           push cx
24720 63FE           52                           push dx
24721 63FF           89D3                         mov bx, dx
24722 6401           B1                     00    mov cl, #0x00
24723                       00006403            get_palette_loop:
24724 6403           BA                   03DA    mov dx, # 0x3da
24725 6406           EC                           in al, dx
24726 6407           BA                   03C0    mov dx, # 0x3c0
24727 640A           88C8                         mov al, cl
24728 640C           EE                           out dx, al
24729 640D           BA                   03C1    mov dx, # 0x3c1
24730 6410           EC                           in al, dx
24731 6411           26                           seg es
24732 6412           8807                         mov [bx], al
24733 6414           43                           inc bx
24734 6415           FEC1                         inc cl
24735 6417           80F9                   10    cmp cl, #0x10
24736 641A           75           E7              jne get_palette_loop
24737 641C           BA                   03DA    mov dx, # 0x3da
24738 641F           EC                           in al, dx
24739 6420           BA                   03C0    mov dx, # 0x3c0
24740 6423           B0                     11    mov al, #0x11
24741 6425           EE                           out dx, al
24742 6426           BA                   03C1    mov dx, # 0x3c1
24743 6429           EC                           in al, dx
24744 642A           26                           seg es
24745 642B           8807                         mov [bx], al
24746 642D           BA                   03DA    mov dx, # 0x3da
24747 6430           EC                           in al, dx
24748 6431           BA                   03C0    mov dx, # 0x3c0
24749 6434           B0                     20    mov al, #0x20
24750 6436           EE                           out dx, al
24751 6437           5A                           pop dx
24752 6438           59                           pop cx
24753 6439           5B                           pop bx
24754 643A           58                           pop ax
24755 643B           C3                           ret
24756                                           ! 3184 endasm
24757                                           !BCC_ENDASM
24758                                           ! 3185 #asm
24759                                           !BCC_ASM
24760                       00000008            _biosfn_write_teletype.flag	set	8
24761                       00000006            _biosfn_write_teletype.attr	set	6
24762                       00000004            _biosfn_write_teletype.page	set	4
24763                       00000002            _biosfn_write_teletype.car	set	2
24764                       0000643C            biosfn_set_single_dac_reg:
24765 643C           50                           push ax
24766 643D           52                           push dx
24767 643E           BA                   03C8    mov dx, # 0x3c8
24768 6441           88D8                         mov al, bl
24769 6443           EE                           out dx, al
24770 6444           BA                   03C9    mov dx, # 0x3c9
24771 6447           58                           pop ax
24772 6448           50                           push ax
24773 6449           88E0                         mov al, ah
24774 644B           EE                           out dx, al
24775 644C           88E8                         mov al, ch
24776 644E           EE                           out dx, al
24777 644F           88C8                         mov al, cl
24778 6451           EE                           out dx, al
24779 6452           5A                           pop dx
24780 6453           58                           pop ax
24781 6454           C3                           ret
24782                                           ! 3204 endasm
24783                                           !BCC_ENDASM
24784                                           ! 3205 #asm
24785                                           !BCC_ASM
24786                       00000008            _biosfn_write_teletype.flag	set	8
24787                       00000006            _biosfn_write_teletype.attr	set	6
24788                       00000004            _biosfn_write_teletype.page	set	4
24789                       00000002            _biosfn_write_teletype.car	set	2
24790                       00006455            biosfn_set_all_dac_reg:
24791 6455           50                           push ax
24792 6456           53                           push bx
24793 6457           51                           push cx
24794 6458           52                           push dx
24795 6459           BA                   03C8    mov dx, # 0x3c8
24796 645C           88D8                         mov al, bl
24797 645E           EE                           out dx, al
24798 645F           5A                           pop dx
24799 6460           52                           push dx
24800 6461           89D3                         mov bx, dx
24801 6463           BA                   03C9    mov dx, # 0x3c9
24802                       00006466            set_dac_loop:
24803 6466           26                           seg es
24804 6467           8A07                         mov al, [bx]
24805 6469           EE                           out dx, al
24806 646A           43                           inc bx
24807 646B           26                           seg es
24808 646C           8A07                         mov al, [bx]
24809 646E           EE                           out dx, al
24810 646F           43                           inc bx
24811 6470           26                           seg es
24812 6471           8A07                         mov al, [bx]
24813 6473           EE                           out dx, al
24814 6474           43                           inc bx
24815 6475           49                           dec cx
24816 6476           75           EE              jnz set_dac_loop
24817 6478           5A                           pop dx
24818 6479           59                           pop cx
24819 647A           5B                           pop bx
24820 647B           58                           pop ax
24821 647C           C3                           ret
24822                                           ! 3238 endasm
24823                                           !BCC_ENDASM
24824                                           ! 3239 #asm
24825                                           !BCC_ASM
24826                       00000008            _biosfn_write_teletype.flag	set	8
24827                       00000006            _biosfn_write_teletype.attr	set	6
24828                       00000004            _biosfn_write_teletype.page	set	4
24829                       00000002            _biosfn_write_teletype.car	set	2
24830                       0000647D            biosfn_select_video_dac_color_page:
24831 647D           50                           push ax
24832 647E           53                           push bx
24833 647F           52                           push dx
24834 6480           BA                   03DA    mov dx, # 0x3da
24835 6483           EC                           in al, dx
24836 6484           BA                   03C0    mov dx, # 0x3c0
24837 6487           B0                     10    mov al, #0x10
24838 6489           EE                           out dx, al
24839 648A           BA                   03C1    mov dx, # 0x3c1
24840 648D           EC                           in al, dx
24841 648E           80E3                   01    and bl, #0x01
24842 6491           75           0D              jnz set_dac_page
24843 6493           24                     7F    and al, #0x7f
24844 6495           C0E7                   07    shl bh, 7
24845 6498           08F8                         or al, bh
24846 649A           BA                   03C0    mov dx, # 0x3c0
24847 649D           EE                           out dx, al
24848 649E           EB           19              jmp set_actl_normal
24849                       000064A0            set_dac_page:
24850 64A0           50                           push ax
24851 64A1           BA                   03DA    mov dx, # 0x3da
24852 64A4           EC                           in al, dx
24853 64A5           BA                   03C0    mov dx, # 0x3c0
24854 64A8           B0                     14    mov al, #0x14
24855 64AA           EE                           out dx, al
24856 64AB           58                           pop ax
24857 64AC           24                     80    and al, #0x80
24858 64AE           75           03              jnz set_dac_16_page
24859 64B0           C0E7                   02    shl bh, 2
24860                       000064B3            set_dac_16_page:
24861 64B3           80E7                   0F    and bh, #0x0f
24862 64B6           88F8                         mov al, bh
24863 64B8           EE                           out dx, al
24864                       000064B9            set_actl_normal:
24865 64B9           B0                     20    mov al, #0x20
24866 64BB           EE                           out dx, al
24867 64BC           5A                           pop dx
24868 64BD           5B                           pop bx
24869 64BE           58                           pop ax
24870 64BF           C3                           ret
24871                                           ! 3281 endasm
24872                                           !BCC_ENDASM
24873                                           ! 3282 #asm
24874                                           !BCC_ASM
24875                       00000008            _biosfn_write_teletype.flag	set	8
24876                       00000006            _biosfn_write_teletype.attr	set	6
24877                       00000004            _biosfn_write_teletype.page	set	4
24878                       00000002            _biosfn_write_teletype.car	set	2
24879                       000064C0            biosfn_read_single_dac_reg:
24880 64C0           50                           push ax
24881 64C1           52                           push dx
24882 64C2           BA                   03C7    mov dx, # 0x3c7
24883 64C5           88D8                         mov al, bl
24884 64C7           EE                           out dx, al
24885 64C8           58                           pop ax
24886 64C9           88C4                         mov ah, al
24887 64CB           BA                   03C9    mov dx, # 0x3c9
24888 64CE           EC                           in al, dx
24889 64CF           86E0                         xchg al, ah
24890 64D1           50                           push ax
24891 64D2           EC                           in al, dx
24892 64D3           88C5                         mov ch, al
24893 64D5           EC                           in al, dx
24894 64D6           88C1                         mov cl, al
24895 64D8           5A                           pop dx
24896 64D9           58                           pop ax
24897 64DA           C3                           ret
24898                                           ! 3302 endasm
24899                                           !BCC_ENDASM
24900                                           ! 3303 #asm
24901                                           !BCC_ASM
24902                       00000008            _biosfn_write_teletype.flag	set	8
24903                       00000006            _biosfn_write_teletype.attr	set	6
24904                       00000004            _biosfn_write_teletype.page	set	4
24905                       00000002            _biosfn_write_teletype.car	set	2
24906                       000064DB            biosfn_read_all_dac_reg:
24907 64DB           50                           push ax
24908 64DC           53                           push bx
24909 64DD           51                           push cx
24910 64DE           52                           push dx
24911 64DF           BA                   03C7    mov dx, # 0x3c7
24912 64E2           88D8                         mov al, bl
24913 64E4           EE                           out dx, al
24914 64E5           5A                           pop dx
24915 64E6           52                           push dx
24916 64E7           89D3                         mov bx, dx
24917 64E9           BA                   03C9    mov dx, # 0x3c9
24918                       000064EC            read_dac_loop:
24919 64EC           EC                           in al, dx
24920 64ED           26                           seg es
24921 64EE           8807                         mov [bx], al
24922 64F0           43                           inc bx
24923 64F1           EC                           in al, dx
24924 64F2           26                           seg es
24925 64F3           8807                         mov [bx], al
24926 64F5           43                           inc bx
24927 64F6           EC                           in al, dx
24928 64F7           26                           seg es
24929 64F8           8807                         mov [bx], al
24930 64FA           43                           inc bx
24931 64FB           49                           dec cx
24932 64FC           75           EE              jnz read_dac_loop
24933 64FE           5A                           pop dx
24934 64FF           59                           pop cx
24935 6500           5B                           pop bx
24936 6501           58                           pop ax
24937 6502           C3                           ret
24938                                           ! 3336 endasm
24939                                           !BCC_ENDASM
24940                                           ! 3337 #asm
24941                                           !BCC_ASM
24942                       00000008            _biosfn_write_teletype.flag	set	8
24943                       00000006            _biosfn_write_teletype.attr	set	6
24944                       00000004            _biosfn_write_teletype.page	set	4
24945                       00000002            _biosfn_write_teletype.car	set	2
24946                       00006503            biosfn_set_pel_mask:
24947 6503           50                           push ax
24948 6504           52                           push dx
24949 6505           BA                   03C6    mov dx, # 0x3c6
24950 6508           88D8                         mov al, bl
24951 650A           EE                           out dx, al
24952 650B           5A                           pop dx
24953 650C           58                           pop ax
24954 650D           C3                           ret
24955                                           ! 3347 endasm
24956                                           !BCC_ENDASM
24957                                           ! 3348 #asm
24958                                           !BCC_ASM
24959                       00000008            _biosfn_write_teletype.flag	set	8
24960                       00000006            _biosfn_write_teletype.attr	set	6
24961                       00000004            _biosfn_write_teletype.page	set	4
24962                       00000002            _biosfn_write_teletype.car	set	2
24963                       0000650E            biosfn_read_pel_mask:
24964 650E           50                           push ax
24965 650F           52                           push dx
24966 6510           BA                   03C6    mov dx, # 0x3c6
24967 6513           EC                           in al, dx
24968 6514           88C3                         mov bl, al
24969 6516           5A                           pop dx
24970 6517           58                           pop ax
24971 6518           C3                           ret
24972                                           ! 3358 endasm
24973                                           !BCC_ENDASM
24974                                           ! 3359 #asm
24975                                           !BCC_ASM
24976                       00000008            _biosfn_write_teletype.flag	set	8
24977                       00000006            _biosfn_write_teletype.attr	set	6
24978                       00000004            _biosfn_write_teletype.page	set	4
24979                       00000002            _biosfn_write_teletype.car	set	2
24980                       00006519            biosfn_read_video_dac_state:
24981 6519           50                           push ax
24982 651A           52                           push dx
24983 651B           BA                   03DA    mov dx, # 0x3da
24984 651E           EC                           in al, dx
24985 651F           BA                   03C0    mov dx, # 0x3c0
24986 6522           B0                     10    mov al, #0x10
24987 6524           EE                           out dx, al
24988 6525           BA                   03C1    mov dx, # 0x3c1
24989 6528           EC                           in al, dx
24990 6529           88C3                         mov bl, al
24991 652B           C0EB                   07    shr bl, 7
24992 652E           BA                   03DA    mov dx, # 0x3da
24993 6531           EC                           in al, dx
24994 6532           BA                   03C0    mov dx, # 0x3c0
24995 6535           B0                     14    mov al, #0x14
24996 6537           EE                           out dx, al
24997 6538           BA                   03C1    mov dx, # 0x3c1
24998 653B           EC                           in al, dx
24999 653C           88C7                         mov bh, al
25000 653E           80E7                   0F    and bh, #0x0f
25001 6541           F6C3                   01    test bl, #0x01
25002 6544           75           03              jnz get_dac_16_page
25003 6546           C0EF                   02    shr bh, 2
25004                       00006549            get_dac_16_page:
25005 6549           BA                   03DA    mov dx, # 0x3da
25006 654C           EC                           in al, dx
25007 654D           BA                   03C0    mov dx, # 0x3c0
25008 6550           B0                     20    mov al, #0x20
25009 6552           EE                           out dx, al
25010 6553           5A                           pop dx
25011 6554           58                           pop ax
25012 6555           C3                           ret
25013                                           ! 3393 endasm
25014                                           !BCC_ENDASM
25015                                           ! 3394 static void biosfn_perform_gray_scale_summing (start,count)
25016                                           ! Register BX used in function biosfn_write_teletype
25017                                           ! 3395 Bit16u start;Bit16u count;
25018                       00006556            _biosfn_perform_gray_scale_summing:
25019                                           !BCC_EOS
25020                                           !BCC_EOS
25021                                           ! 3396 {Bit8u r,g,b;
25022                                           !BCC_EOS
25023                                           ! 3397  Bit16u i;
25024                                           !BCC_EOS
25025                                           ! 3398  Bit16u index;
25026                                           !BCC_EOS
25027                                           ! 3399  inb(0x3da);
25028 6556           55                         push	bp
25029 6557           89E5                       mov	bp,sp
25030 6559           83C4                   F8  add	sp,*-8
25031                                           ! Debug: list int = const $3DA (used reg = )
25032 655C           B8                   03DA  mov	ax,#$3DA
25033 655F           50                         push	ax
25034                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25035 6560           E8         180F            call	_inb
25036 6563           44                         inc	sp
25037 6564           44                         inc	sp
25038                                           !BCC_EOS
25039                                           ! 3400  outb(0x3c0,0x00);
25040                                           ! Debug: list int = const 0 (used reg = )
25041 6565           31C0                       xor	ax,ax
25042 6567           50                         push	ax
25043                                           ! Debug: list int = const $3C0 (used reg = )
25044 6568           B8                   03C0  mov	ax,#$3C0
25045 656B           50                         push	ax
25046                                           ! Debug: func () void = outb+0 (used reg = )
25047 656C           E8         1819            call	_outb
25048 656F           83C4                   04  add	sp,*4
25049                                           !BCC_EOS
25050                                           ! 3401  for( index = 0; index < count; index++ )
25051                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
25052 6572           31C0                       xor	ax,ax
25053 6574           8946         F8            mov	-8[bp],ax
25054                                           !BCC_EOS
25055                                           !BCC_EOS
25056                                           ! 3402   {
25057 6577           E9         00BE            br 	.219
25058                       0000657A            .21A:
25059                                           ! 3403    outb(0x3c7,start);
25060                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25061 657A           FF76         04            push	4[bp]
25062                                           ! Debug: list int = const $3C7 (used reg = )
25063 657D           B8                   03C7  mov	ax,#$3C7
25064 6580           50                         push	ax
25065                                           ! Debug: func () void = outb+0 (used reg = )
25066 6581           E8         1804            call	_outb
25067 6584           83C4                   04  add	sp,*4
25068                                           !BCC_EOS
25069                                           ! 3404    r=inb( 0x3c9 );
25070                                           ! Debug: list int = const $3C9 (used reg = )
25071 6587           B8                   03C9  mov	ax,#$3C9
25072 658A           50                         push	ax
25073                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25074 658B           E8         17E4            call	_inb
25075 658E           44                         inc	sp
25076 658F           44                         inc	sp
25077                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
25078 6590           8846         FF            mov	-1[bp],al
25079                                           !BCC_EOS
25080                                           ! 3405    g=inb( 0x3c9 );
25081                                           ! Debug: list int = const $3C9 (used reg = )
25082 6593           B8                   03C9  mov	ax,#$3C9
25083 6596           50                         push	ax
25084                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25085 6597           E8         17D8            call	_inb
25086 659A           44                         inc	sp
25087 659B           44                         inc	sp
25088                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
25089 659C           8846         FE            mov	-2[bp],al
25090                                           !BCC_EOS
25091                                           ! 3406    b=inb( 0x3c9 );
25092                                           ! Debug: list int = const $3C9 (used reg = )
25093 659F           B8                   03C9  mov	ax,#$3C9
25094 65A2           50                         push	ax
25095                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25096 65A3           E8         17CC            call	_inb
25097 65A6           44                         inc	sp
25098 65A7           44                         inc	sp
25099                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
25100 65A8           8846         FD            mov	-3[bp],al
25101                                           !BCC_EOS
25102                                           ! 3407    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
25103                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
25104                                           ! Debug: expression subtree swapping
25105 65AB           8A46         FD            mov	al,-3[bp]
25106 65AE           30E4                       xor	ah,ah
25107 65B0           B9                   001C  mov	cx,*$1C
25108 65B3           F7E9                       imul	cx
25109 65B5           50                         push	ax
25110                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
25111                                           ! Debug: expression subtree swapping
25112 65B6           8A46         FE            mov	al,-2[bp]
25113 65B9           30E4                       xor	ah,ah
25114 65BB           B9                   0097  mov	cx,#$97
25115 65BE           F7E9                       imul	cx
25116 65C0           50                         push	ax
25117                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25118                                           ! Debug: expression subtree swapping
25119 65C1           8A46         FF            mov	al,-1[bp]
25120 65C4           30E4                       xor	ah,ah
25121 65C6           B9                   004D  mov	cx,*$4D
25122 65C9           F7E9                       imul	cx
25123                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25124 65CB           0346         F4            add	ax,-$C[bp]
25125 65CE           44                         inc	sp
25126 65CF           44                         inc	sp
25127                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25128 65D0           0346         F6            add	ax,-$A[bp]
25129 65D3           44                         inc	sp
25130 65D4           44                         inc	sp
25131                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25132                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25133 65D5           05                   0080  add	ax,#$80
25134 65D8           88E0                       mov	al,ah
25135 65DA           30E4                       xor	ah,ah
25136                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25137 65DC           8946         FA            mov	-6[bp],ax
25138                                           !BCC_EOS
25139                                           ! 3408    if(i>0x3f)i=0x3f;
25140                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25141 65DF           8B46         FA            mov	ax,-6[bp]
25142 65E2           3D                   003F  cmp	ax,*$3F
25143 65E5           76           06            jbe 	.21B
25144                       000065E7            .21C:
25145                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25146 65E7           B8                   003F  mov	ax,*$3F
25147 65EA           8946         FA            mov	-6[bp],ax
25148                                           !BCC_EOS
25149                                           ! 3409    outb(0x3c8,start);
25150                       000065ED            .21B:
25151                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25152 65ED           FF76         04            push	4[bp]
25153                                           ! Debug: list int = const $3C8 (used reg = )
25154 65F0           B8                   03C8  mov	ax,#$3C8
25155 65F3           50                         push	ax
25156                                           ! Debug: func () void = outb+0 (used reg = )
25157 65F4           E8         1791            call	_outb
25158 65F7           83C4                   04  add	sp,*4
25159                                           !BCC_EOS
25160                                           ! 3410    outb( 0x3c9, i&0xff );
25161                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25162 65FA           8A46         FA            mov	al,-6[bp]
25163                                           ! Debug: list unsigned char = al+0 (used reg = )
25164 65FD           30E4                       xor	ah,ah
25165 65FF           50                         push	ax
25166                                           ! Debug: list int = const $3C9 (used reg = )
25167 6600           B8                   03C9  mov	ax,#$3C9
25168 6603           50                         push	ax
25169                                           ! Debug: func () void = outb+0 (used reg = )
25170 6604           E8         1781            call	_outb
25171 6607           83C4                   04  add	sp,*4
25172                                           !BCC_EOS
25173                                           ! 3411    outb( 0x3c9, i&0xff );
25174                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25175 660A           8A46         FA            mov	al,-6[bp]
25176                                           ! Debug: list unsigned char = al+0 (used reg = )
25177 660D           30E4                       xor	ah,ah
25178 660F           50                         push	ax
25179                                           ! Debug: list int = const $3C9 (used reg = )
25180 6610           B8                   03C9  mov	ax,#$3C9
25181 6613           50                         push	ax
25182                                           ! Debug: func () void = outb+0 (used reg = )
25183 6614           E8         1771            call	_outb
25184 6617           83C4                   04  add	sp,*4
25185                                           !BCC_EOS
25186                                           ! 3412    outb( 0x3c9, i&0xff );
25187                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25188 661A           8A46         FA            mov	al,-6[bp]
25189                                           ! Debug: list unsigned char = al+0 (used reg = )
25190 661D           30E4                       xor	ah,ah
25191 661F           50                         push	ax
25192                                           ! Debug: list int = const $3C9 (used reg = )
25193 6620           B8                   03C9  mov	ax,#$3C9
25194 6623           50                         push	ax
25195                                           ! Debug: func () void = outb+0 (used reg = )
25196 6624           E8         1761            call	_outb
25197 6627           83C4                   04  add	sp,*4
25198                                           !BCC_EOS
25199                                           ! 3413    start++;
25200                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25201 662A           8B46         04            mov	ax,4[bp]
25202 662D           40                         inc	ax
25203 662E           8946         04            mov	4[bp],ax
25204                                           !BCC_EOS
25205                                           ! 3414   }
25206                                           ! 3415  inb(0x3da);
25207                       00006631            .218:
25208                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25209 6631           8B46         F8            mov	ax,-8[bp]
25210 6634           40                         inc	ax
25211 6635           8946         F8            mov	-8[bp],ax
25212                       00006638            .219:
25213                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25214 6638           8B46         F8            mov	ax,-8[bp]
25215 663B           3B46         06            cmp	ax,6[bp]
25216 663E         0F82         FF38            blo 	.21A
25217                       00006642            .21D:
25218                       00006642            .217:
25219                                           ! Debug: list int = const $3DA (used reg = )
25220 6642           B8                   03DA  mov	ax,#$3DA
25221 6645           50                         push	ax
25222                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25223 6646           E8         1729            call	_inb
25224 6649           44                         inc	sp
25225 664A           44                         inc	sp
25226                                           !BCC_EOS
25227                                           ! 3416  outb(0x3c0,0x20);
25228                                           ! Debug: list int = const $20 (used reg = )
25229 664B           B8                   0020  mov	ax,*$20
25230 664E           50                         push	ax
25231                                           ! Debug: list int = const $3C0 (used reg = )
25232 664F           B8                   03C0  mov	ax,#$3C0
25233 6652           50                         push	ax
25234                                           ! Debug: func () void = outb+0 (used reg = )
25235 6653           E8         1732            call	_outb
25236 6656           83C4                   04  add	sp,*4
25237                                           !BCC_EOS
25238                                           ! 3417 }
25239 6659           89EC                       mov	sp,bp
25240 665B           5D                         pop	bp
25241 665C           C3                         ret
25242                                           ! 3418 static void get_font_access()
25243                                           ! 3419 {
25244                       0000665D            _get_font_access:
25245                                           ! 3420 #asm
25246                                           !BCC_ASM
25247 665D           BA                   03C4   mov dx, # 0x3c4
25248 6660           B8                   0100   mov ax, #0x0100
25249 6663           EF                          out dx, ax
25250 6664           B8                   0402   mov ax, #0x0402
25251 6667           EF                          out dx, ax
25252 6668           B8                   0704   mov ax, #0x0704
25253 666B           EF                          out dx, ax
25254 666C           B8                   0300   mov ax, #0x0300
25255 666F           EF                          out dx, ax
25256 6670           BA                   03CE   mov dx, # 0x3ce
25257 6673           B8                   0204   mov ax, #0x0204
25258 6676           EF                          out dx, ax
25259 6677           B8                   0005   mov ax, #0x0005
25260 667A           EF                          out dx, ax
25261 667B           B8                   0406   mov ax, #0x0406
25262 667E           EF                          out dx, ax
25263                                           ! 3437 endasm
25264                                           !BCC_ENDASM
25265                                           ! 3438 }
25266 667F           C3                         ret
25267                                           ! 3439 static void release_font_access()
25268                                           ! 3440 {
25269                       00006680            _release_font_access:
25270                                           ! 3441 #asm
25271                                           !BCC_ASM
25272 6680           BA                   03C4   mov dx, # 0x3c4
25273 6683           B8                   0100   mov ax, #0x0100
25274 6686           EF                          out dx, ax
25275 6687           B8                   0302   mov ax, #0x0302
25276 668A           EF                          out dx, ax
25277 668B           B8                   0304   mov ax, #0x0304
25278 668E           EF                          out dx, ax
25279 668F           B8                   0300   mov ax, #0x0300
25280 6692           EF                          out dx, ax
25281 6693           BA                   03CC   mov dx, # 0x3cc
25282 6696           EC                          in al, dx
25283 6697           24                     01   and al, #0x01
25284 6699           C0E0                   02   shl al, 2
25285 669C           0C                     0A   or al, #0x0a
25286 669E           88C4                        mov ah, al
25287 66A0           B0                     06   mov al, #0x06
25288 66A2           BA                   03CE   mov dx, # 0x3ce
25289 66A5           EF                          out dx, ax
25290 66A6           B8                   0004   mov ax, #0x0004
25291 66A9           EF                          out dx, ax
25292 66AA           B8                   1005   mov ax, #0x1005
25293 66AD           EF                          out dx, ax
25294                                           ! 3464 endasm
25295                                           !BCC_ENDASM
25296                                           ! 3465 }
25297 66AE           C3                         ret
25298                                           ! 3466 #asm
25299                                           !BCC_ASM
25300                       000066AF            idiv_u:
25301 66AF           31D2                         xor dx,dx
25302 66B1           F7F3                         div bx
25303 66B3           C3                           ret
25304                                           ! 3471 endasm
25305                                           !BCC_ENDASM
25306                                           ! 3472 static void set_scan_lines(lines) Bit8u lines;
25307                       000066B4            _set_scan_lines:
25308                                           !BCC_EOS
25309                                           ! 3473 {
25310                                           ! 3474  Bit16u crtc_addr,cols,page,vde;
25311                                           !BCC_EOS
25312                                           ! 3475  Bit8u crtc_r9,ovl,rows;
25313                                           !BCC_EOS
25314                                           ! 3476  crtc_addr = read_word(0x40,0x63);
25315 66B4           55                         push	bp
25316 66B5           89E5                       mov	bp,sp
25317 66B7           83C4                   F4  add	sp,*-$C
25318                                           ! Debug: list int = const $63 (used reg = )
25319 66BA           B8                   0063  mov	ax,*$63
25320 66BD           50                         push	ax
25321                                           ! Debug: list int = const $40 (used reg = )
25322 66BE           B8                   0040  mov	ax,*$40
25323 66C1           50                         push	ax
25324                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25325 66C2           E8         166A            call	_read_word
25326 66C5           83C4                   04  add	sp,*4
25327                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25328 66C8           8946         FE            mov	-2[bp],ax
25329                                           !BCC_EOS
25330                                           ! 3477  outb(crtc_addr, 0x09);
25331                                           ! Debug: list int = const 9 (used reg = )
25332 66CB           B8                   0009  mov	ax,*9
25333 66CE           50                         push	ax
25334                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25335 66CF           FF76         FE            push	-2[bp]
25336                                           ! Debug: func () void = outb+0 (used reg = )
25337 66D2           E8         16B3            call	_outb
25338 66D5           83C4                   04  add	sp,*4
25339                                           !BCC_EOS
25340                                           ! 3478  crtc_r9 = inb(crtc_addr+1);
25341                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25342 66D8           8B46         FE            mov	ax,-2[bp]
25343                                           ! Debug: list unsigned int = ax+1 (used reg = )
25344 66DB           40                         inc	ax
25345 66DC           50                         push	ax
25346                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25347 66DD           E8         1692            call	_inb
25348 66E0           44                         inc	sp
25349 66E1           44                         inc	sp
25350                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25351 66E2           8846         F7            mov	-9[bp],al
25352                                           !BCC_EOS
25353                                           ! 3479  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25354                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25355 66E5           8A46         04            mov	al,4[bp]
25356 66E8           30E4                       xor	ah,ah
25357 66EA           48                         dec	ax
25358 66EB           50                         push	ax
25359                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25360 66EC           8A46         F7            mov	al,-9[bp]
25361 66EF           24                     E0  and	al,#$E0
25362                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25363 66F1           30E4                       xor	ah,ah
25364 66F3           0B46         F2            or	ax,-$E[bp]
25365 66F6           44                         inc	sp
25366 66F7           44                         inc	sp
25367                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25368 66F8           8846         F7            mov	-9[bp],al
25369                                           !BCC_EOS
25370                                           ! 3480  outb(crtc_addr+1, crtc_r9);
25371                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25372 66FB           8A46         F7            mov	al,-9[bp]
25373 66FE           30E4                       xor	ah,ah
25374 6700           50                         push	ax
25375                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25376 6701           8B46         FE            mov	ax,-2[bp]
25377                                           ! Debug: list unsigned int = ax+1 (used reg = )
25378 6704           40                         inc	ax
25379 6705           50                         push	ax
25380                                           ! Debug: func () void = outb+0 (used reg = )
25381 6706           E8         167F            call	_outb
25382 6709           83C4                   04  add	sp,*4
25383                                           !BCC_EOS
25384                                           ! 3481  if(lines==8)
25385                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25386 670C           8A46         04            mov	al,4[bp]
25387 670F           3C                     08  cmp	al,*8
25388 6711           75           10            jne 	.21E
25389                       00006713            .21F:
25390                                           ! 3482   {
25391                                           ! 3483    biosfn_set_cursor_shape(0x06,0x07);
25392                                           ! Debug: list int = const 7 (used reg = )
25393 6713           B8                   0007  mov	ax,*7
25394 6716           50                         push	ax
25395                                           ! Debug: list int = const 6 (used reg = )
25396 6717           B8                   0006  mov	ax,*6
25397 671A           50                         push	ax
25398                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25399 671B           E8         DB87            call	_biosfn_set_cursor_shape
25400 671E           83C4                   04  add	sp,*4
25401                                           !BCC_EOS
25402                                           ! 3484   }
25403                                           ! 3485  else
25404                                           ! 3486   {
25405 6721           EB           18            jmp .220
25406                       00006723            .21E:
25407                                           ! 3487    biosfn_set_cursor_shape(lines-4,lines-3);
25408                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25409 6723           8A46         04            mov	al,4[bp]
25410 6726           30E4                       xor	ah,ah
25411                                           ! Debug: list unsigned int = ax-3 (used reg = )
25412 6728           05                   FFFD  add	ax,*-3
25413 672B           50                         push	ax
25414                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25415 672C           8A46         04            mov	al,4[bp]
25416 672F           30E4                       xor	ah,ah
25417                                           ! Debug: list unsigned int = ax-4 (used reg = )
25418 6731           05                   FFFC  add	ax,*-4
25419 6734           50                         push	ax
25420                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25421 6735           E8         DB6D            call	_biosfn_set_cursor_shape
25422 6738           83C4                   04  add	sp,*4
25423                                           !BCC_EOS
25424                                           ! 3488   }
25425                                           ! 3489  write_word(0x40,0x85, lines);
25426                       0000673B            .220:
25427                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25428 673B           8A46         04            mov	al,4[bp]
25429 673E           30E4                       xor	ah,ah
25430 6740           50                         push	ax
25431                                           ! Debug: list int = const $85 (used reg = )
25432 6741           B8                   0085  mov	ax,#$85
25433 6744           50                         push	ax
25434                                           ! Debug: list int = const $40 (used reg = )
25435 6745           B8                   0040  mov	ax,*$40
25436 6748           50                         push	ax
25437                                           ! Debug: func () void = write_word+0 (used reg = )
25438 6749           E8         160E            call	_write_word
25439 674C           83C4                   06  add	sp,*6
25440                                           !BCC_EOS
25441                                           ! 3490  outb(crtc_addr, 0x12);
25442                                           ! Debug: list int = const $12 (used reg = )
25443 674F           B8                   0012  mov	ax,*$12
25444 6752           50                         push	ax
25445                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25446 6753           FF76         FE            push	-2[bp]
25447                                           ! Debug: func () void = outb+0 (used reg = )
25448 6756           E8         162F            call	_outb
25449 6759           83C4                   04  add	sp,*4
25450                                           !BCC_EOS
25451                                           ! 3491  vde = inb(crtc_addr+1);
25452                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25453 675C           8B46         FE            mov	ax,-2[bp]
25454                                           ! Debug: list unsigned int = ax+1 (used reg = )
25455 675F           40                         inc	ax
25456 6760           50                         push	ax
25457                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25458 6761           E8         160E            call	_inb
25459 6764           44                         inc	sp
25460 6765           44                         inc	sp
25461                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25462 6766           30E4                       xor	ah,ah
25463 6768           8946         F8            mov	-8[bp],ax
25464                                           !BCC_EOS
25465                                           ! 3492  outb(crtc_addr, 0x07);
25466                                           ! Debug: list int = const 7 (used reg = )
25467 676B           B8                   0007  mov	ax,*7
25468 676E           50                         push	ax
25469                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25470 676F           FF76         FE            push	-2[bp]
25471                                           ! Debug: func () void = outb+0 (used reg = )
25472 6772           E8         1613            call	_outb
25473 6775           83C4                   04  add	sp,*4
25474                                           !BCC_EOS
25475                                           ! 3493  ovl = inb(crtc_addr+1);
25476                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25477 6778           8B46         FE            mov	ax,-2[bp]
25478                                           ! Debug: list unsigned int = ax+1 (used reg = )
25479 677B           40                         inc	ax
25480 677C           50                         push	ax
25481                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25482 677D           E8         15F2            call	_inb
25483 6780           44                         inc	sp
25484 6781           44                         inc	sp
25485                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25486 6782           8846         F6            mov	-$A[bp],al
25487                                           !BCC_EOS
25488                                           ! 3494  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25489                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25490 6785           8A46         F6            mov	al,-$A[bp]
25491 6788           24                     40  and	al,*$40
25492                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25493 678A           30E4                       xor	ah,ah
25494 678C           B1                     03  mov	cl,*3
25495 678E           D3E0                       shl	ax,cl
25496 6790           50                         push	ax
25497                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25498 6791           8A46         F6            mov	al,-$A[bp]
25499 6794           24                     02  and	al,*2
25500                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25501 6796           30E4                       xor	ah,ah
25502 6798           B1                     07  mov	cl,*7
25503 679A           D3E0                       shl	ax,cl
25504                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25505 679C           0346         F2            add	ax,-$E[bp]
25506 679F           44                         inc	sp
25507 67A0           44                         inc	sp
25508                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25509                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25510 67A1           40                         inc	ax
25511 67A2           0346         F8            add	ax,-8[bp]
25512 67A5           8946         F8            mov	-8[bp],ax
25513                                           !BCC_EOS
25514                                           ! 3495  rows = vde / lines;
25515                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25516 67A8           8A46         04            mov	al,4[bp]
25517 67AB           30E4                       xor	ah,ah
25518 67AD           89C3                       mov	bx,ax
25519 67AF           8B46         F8            mov	ax,-8[bp]
25520 67B2           E8         FEFA            call	idiv_u
25521                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25522 67B5           8846         F5            mov	-$B[bp],al
25523                                           !BCC_EOS
25524                                           ! 3496  write_byte(0x40,0x84, rows-1);
25525                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25526 67B8           8A46         F5            mov	al,-$B[bp]
25527 67BB           30E4                       xor	ah,ah
25528                                           ! Debug: list unsigned int = ax-1 (used reg = )
25529 67BD           48                         dec	ax
25530 67BE           50                         push	ax
25531                                           ! Debug: list int = const $84 (used reg = )
25532 67BF           B8                   0084  mov	ax,#$84
25533 67C2           50                         push	ax
25534                                           ! Debug: list int = const $40 (used reg = )
25535 67C3           B8                   0040  mov	ax,*$40
25536 67C6           50                         push	ax
25537                                           ! Debug: func () void = write_byte+0 (used reg = )
25538 67C7           E8         1578            call	_write_byte
25539 67CA           83C4                   06  add	sp,*6
25540                                           !BCC_EOS
25541                                           ! 3497  cols = read_word(0x40,0x4A);
25542                                           ! Debug: list int = const $4A (used reg = )
25543 67CD           B8                   004A  mov	ax,*$4A
25544 67D0           50                         push	ax
25545                                           ! Debug: list int = const $40 (used reg = )
25546 67D1           B8                   0040  mov	ax,*$40
25547 67D4           50                         push	ax
25548                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25549 67D5           E8         1557            call	_read_word
25550 67D8           83C4                   04  add	sp,*4
25551                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25552 67DB           8946         FC            mov	-4[bp],ax
25553                                           !BCC_EOS
25554                                           ! 3498  write_word(0x40,0x4C, rows * cols * 2);
25555                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25556 67DE           8A46         F5            mov	al,-$B[bp]
25557 67E1           30E4                       xor	ah,ah
25558 67E3           8B4E         FC            mov	cx,-4[bp]
25559 67E6           F7E9                       imul	cx
25560                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25561 67E8           D1E0                       shl	ax,*1
25562                                           ! Debug: list unsigned int = ax+0 (used reg = )
25563 67EA           50                         push	ax
25564                                           ! Debug: list int = const $4C (used reg = )
25565 67EB           B8                   004C  mov	ax,*$4C
25566 67EE           50                         push	ax
25567                                           ! Debug: list int = const $40 (used reg = )
25568 67EF           B8                   0040  mov	ax,*$40
25569 67F2           50                         push	ax
25570                                           ! Debug: func () void = write_word+0 (used reg = )
25571 67F3           E8         1564            call	_write_word
25572 67F6           83C4                   06  add	sp,*6
25573                                           !BCC_EOS
25574                                           ! 3499 }
25575 67F9           89EC                       mov	sp,bp
25576 67FB           5D                         pop	bp
25577 67FC           C3                         ret
25578                                           ! 3500 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25579                                           ! Register BX used in function set_scan_lines
25580                       000067FD            _biosfn_load_text_user_pat:
25581                                           !BCC_EOS
25582                                           !BCC_EOS
25583                                           !BCC_EOS
25584                                           !BCC_EOS
25585                                           !BCC_EOS
25586                                           !BCC_EOS
25587                                           !BCC_EOS
25588                                           ! 3501 {
25589                                           ! 3502  Bit16u blockaddr,dest,i,src;
25590                                           !BCC_EOS
25591                                           ! 3503  get_font_access();
25592 67FD           55                         push	bp
25593 67FE           89E5                       mov	bp,sp
25594 6800           83C4                   F8  add	sp,*-8
25595                                           ! Debug: func () void = get_font_access+0 (used reg = )
25596 6803           E8         FE57            call	_get_font_access
25597                                           !BCC_EOS
25598                                           ! 3504  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25599                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25600 6806           8A46         0E            mov	al,$E[bp]
25601 6809           24                     04  and	al,*4
25602                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25603 680B           30E4                       xor	ah,ah
25604 680D           88C4                       mov	ah,al
25605 680F           30C0                       xor	al,al
25606 6811           B1                     03  mov	cl,*3
25607 6813           D3E0                       shl	ax,cl
25608 6815           50                         push	ax
25609                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25610 6816           8A46         0E            mov	al,$E[bp]
25611 6819           24                     03  and	al,*3
25612                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25613 681B           30E4                       xor	ah,ah
25614 681D           88C4                       mov	ah,al
25615 681F           30C0                       xor	al,al
25616 6821           B1                     06  mov	cl,*6
25617 6823           D3E0                       shl	ax,cl
25618                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25619 6825           0346         F6            add	ax,-$A[bp]
25620 6828           44                         inc	sp
25621 6829           44                         inc	sp
25622                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25623 682A           8946         FE            mov	-2[bp],ax
25624                                           !BCC_EOS
25625                                           ! 3505  for(i=0;i<CX;i++)
25626                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25627 682D           31C0                       xor	ax,ax
25628 682F           8946         FA            mov	-6[bp],ax
25629                                           !BCC_EOS
25630                                           !BCC_EOS
25631                                           ! 3506   {
25632 6832           EB           44            jmp .223
25633                       00006834            .224:
25634                                           ! 3507    src = BP + i * BH;
25635                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25636 6834           8A46         10            mov	al,$10[bp]
25637 6837           30E4                       xor	ah,ah
25638 6839           89C3                       mov	bx,ax
25639 683B           8B46         FA            mov	ax,-6[bp]
25640 683E           89D9                       mov	cx,bx
25641 6840           F7E9                       imul	cx
25642                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25643                                           ! Debug: expression subtree swapping
25644 6842           0346         08            add	ax,8[bp]
25645                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25646 6845           8946         F8            mov	-8[bp],ax
25647                                           !BCC_EOS
25648                                           ! 3508    dest = blockaddr + (DX + i) * 32;
25649                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25650 6848           8B46         0C            mov	ax,$C[bp]
25651 684B           0346         FA            add	ax,-6[bp]
25652                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25653 684E           B1                     05  mov	cl,*5
25654 6850           D3E0                       shl	ax,cl
25655                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25656                                           ! Debug: expression subtree swapping
25657 6852           0346         FE            add	ax,-2[bp]
25658                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25659 6855           8946         FC            mov	-4[bp],ax
25660                                           !BCC_EOS
25661                                           ! 3509    memcpyb(0xA000, dest, ES, src, BH);
25662                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25663 6858           8A46         10            mov	al,$10[bp]
25664 685B           30E4                       xor	ah,ah
25665 685D           50                         push	ax
25666                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25667 685E           FF76         F8            push	-8[bp]
25668                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25669 6861           FF76         06            push	6[bp]
25670                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25671 6864           FF76         FC            push	-4[bp]
25672                                           ! Debug: list unsigned int = const $A000 (used reg = )
25673 6867           B8                   A000  mov	ax,#$A000
25674 686A           50                         push	ax
25675                                           ! Debug: func () void = memcpyb+0 (used reg = )
25676 686B           E8         144E            call	_memcpyb
25677 686E           83C4                   0A  add	sp,*$A
25678                                           !BCC_EOS
25679                                           ! 3510   }
25680                                           ! 3511  release_font_access();
25681                       00006871            .222:
25682                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25683 6871           8B46         FA            mov	ax,-6[bp]
25684 6874           40                         inc	ax
25685 6875           8946         FA            mov	-6[bp],ax
25686                       00006878            .223:
25687                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25688 6878           8B46         FA            mov	ax,-6[bp]
25689 687B           3B46         0A            cmp	ax,$A[bp]
25690 687E           72           B4            jb 	.224
25691                       00006880            .225:
25692                       00006880            .221:
25693                                           ! Debug: func () void = release_font_access+0 (used reg = )
25694 6880           E8         FDFD            call	_release_font_access
25695                                           !BCC_EOS
25696                                           ! 3512  if(AL>=0x10)
25697                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25698 6883           8A46         04            mov	al,4[bp]
25699 6886           3C                     10  cmp	al,*$10
25700 6888           72           0B            jb  	.226
25701                       0000688A            .227:
25702                                           ! 3513   {
25703                                           ! 3514    set_scan_lines(BH);
25704                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25705 688A           8A46         10            mov	al,$10[bp]
25706 688D           30E4                       xor	ah,ah
25707 688F           50                         push	ax
25708                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25709 6890           E8         FE21            call	_set_scan_lines
25710 6893           44                         inc	sp
25711 6894           44                         inc	sp
25712                                           !BCC_EOS
25713                                           ! 3515   }
25714                                           ! 3516 }
25715                       00006895            .226:
25716 6895           89EC                       mov	sp,bp
25717 6897           5D                         pop	bp
25718 6898           C3                         ret
25719                                           ! 3517 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25720                                           ! Register BX used in function biosfn_load_text_user_pat
25721                       00006899            _biosfn_load_text_8_14_pat:
25722                                           !BCC_EOS
25723                                           !BCC_EOS
25724                                           ! 3518 {
25725                                           ! 3519  Bit16u blockaddr,dest,i,src;
25726                                           !BCC_EOS
25727                                           ! 3520  get_font_access();
25728 6899           55                         push	bp
25729 689A           89E5                       mov	bp,sp
25730 689C           83C4                   F8  add	sp,*-8
25731                                           ! Debug: func () void = get_font_access+0 (used reg = )
25732 689F           E8         FDBB            call	_get_font_access
25733                                           !BCC_EOS
25734                                           ! 3521  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25735                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25736 68A2           8A46         06            mov	al,6[bp]
25737 68A5           24                     04  and	al,*4
25738                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25739 68A7           30E4                       xor	ah,ah
25740 68A9           88C4                       mov	ah,al
25741 68AB           30C0                       xor	al,al
25742 68AD           B1                     03  mov	cl,*3
25743 68AF           D3E0                       shl	ax,cl
25744 68B1           50                         push	ax
25745                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25746 68B2           8A46         06            mov	al,6[bp]
25747 68B5           24                     03  and	al,*3
25748                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25749 68B7           30E4                       xor	ah,ah
25750 68B9           88C4                       mov	ah,al
25751 68BB           30C0                       xor	al,al
25752 68BD           B1                     06  mov	cl,*6
25753 68BF           D3E0                       shl	ax,cl
25754                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25755 68C1           0346         F6            add	ax,-$A[bp]
25756 68C4           44                         inc	sp
25757 68C5           44                         inc	sp
25758                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25759 68C6           8946         FE            mov	-2[bp],ax
25760                                           !BCC_EOS
25761                                           ! 3522  for(i=0;i<0x100;i++)
25762                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25763 68C9           31C0                       xor	ax,ax
25764 68CB           8946         FA            mov	-6[bp],ax
25765                                           !BCC_EOS
25766                                           !BCC_EOS
25767                                           ! 3523   {
25768 68CE           EB           41            jmp .22A
25769                       000068D0            .22B:
25770                                           ! 3524    src = i * 14;
25771                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25772 68D0           8B46         FA            mov	ax,-6[bp]
25773 68D3           89C2                       mov	dx,ax
25774 68D5           B1                     03  mov	cl,*3
25775 68D7           D3E0                       shl	ax,cl
25776 68D9           29D0                       sub	ax,dx
25777 68DB           D1E0                       shl	ax,*1
25778                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25779 68DD           8946         F8            mov	-8[bp],ax
25780                                           !BCC_EOS
25781                                           ! 3525    dest = blockaddr + i * 32;
25782                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25783 68E0           8B46         FA            mov	ax,-6[bp]
25784 68E3           B1                     05  mov	cl,*5
25785 68E5           D3E0                       shl	ax,cl
25786                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25787                                           ! Debug: expression subtree swapping
25788 68E7           0346         FE            add	ax,-2[bp]
25789                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25790 68EA           8946         FC            mov	-4[bp],ax
25791                                           !BCC_EOS
25792                                           ! 3526    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25793                                           ! Debug: list int = const $E (used reg = )
25794 68ED           B8                   000E  mov	ax,*$E
25795 68F0           50                         push	ax
25796                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25797 68F1           8B5E         F8            mov	bx,-8[bp]
25798                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25799                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25800 68F4           81C3                 1771  add	bx,#_vgafont14
25801 68F8           53                         push	bx
25802                                           ! Debug: list unsigned int = const $C000 (used reg = )
25803 68F9           B8                   C000  mov	ax,#$C000
25804 68FC           50                         push	ax
25805                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25806 68FD           FF76         FC            push	-4[bp]
25807                                           ! Debug: list unsigned int = const $A000 (used reg = )
25808 6900           B8                   A000  mov	ax,#$A000
25809 6903           50                         push	ax
25810                                           ! Debug: func () void = memcpyb+0 (used reg = )
25811 6904           E8         13B5            call	_memcpyb
25812 6907           83C4                   0A  add	sp,*$A
25813                                           !BCC_EOS
25814                                           ! 3527   }
25815                                           ! 3528  release_font_access();
25816                       0000690A            .229:
25817                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25818 690A           8B46         FA            mov	ax,-6[bp]
25819 690D           40                         inc	ax
25820 690E           8946         FA            mov	-6[bp],ax
25821                       00006911            .22A:
25822                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25823 6911           8B46         FA            mov	ax,-6[bp]
25824 6914           3D                   0100  cmp	ax,#$100
25825 6917           72           B7            jb 	.22B
25826                       00006919            .22C:
25827                       00006919            .228:
25828                                           ! Debug: func () void = release_font_access+0 (used reg = )
25829 6919           E8         FD64            call	_release_font_access
25830                                           !BCC_EOS
25831                                           ! 3529  if(AL>=0x10)
25832                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25833 691C           8A46         04            mov	al,4[bp]
25834 691F           3C                     10  cmp	al,*$10
25835 6921           72           09            jb  	.22D
25836                       00006923            .22E:
25837                                           ! 3530   {
25838                                           ! 3531    set_scan_lines(14);
25839                                           ! Debug: list int = const $E (used reg = )
25840 6923           B8                   000E  mov	ax,*$E
25841 6926           50                         push	ax
25842                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25843 6927           E8         FD8A            call	_set_scan_lines
25844 692A           44                         inc	sp
25845 692B           44                         inc	sp
25846                                           !BCC_EOS
25847                                           ! 3532   }
25848                                           ! 3533 }
25849                       0000692C            .22D:
25850 692C           89EC                       mov	sp,bp
25851 692E           5D                         pop	bp
25852 692F           C3                         ret
25853                                           ! 3534 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25854                                           ! Register BX used in function biosfn_load_text_8_14_pat
25855                       00006930            _biosfn_load_text_8_8_pat:
25856                                           !BCC_EOS
25857                                           !BCC_EOS
25858                                           ! 3535 {
25859                                           ! 3536  Bit16u blockaddr,dest,i,src;
25860                                           !BCC_EOS
25861                                           ! 3537  get_font_access();
25862 6930           55                         push	bp
25863 6931           89E5                       mov	bp,sp
25864 6933           83C4                   F8  add	sp,*-8
25865                                           ! Debug: func () void = get_font_access+0 (used reg = )
25866 6936           E8         FD24            call	_get_font_access
25867                                           !BCC_EOS
25868                                           ! 3538  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25869                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25870 6939           8A46         06            mov	al,6[bp]
25871 693C           24                     04  and	al,*4
25872                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25873 693E           30E4                       xor	ah,ah
25874 6940           88C4                       mov	ah,al
25875 6942           30C0                       xor	al,al
25876 6944           B1                     03  mov	cl,*3
25877 6946           D3E0                       shl	ax,cl
25878 6948           50                         push	ax
25879                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25880 6949           8A46         06            mov	al,6[bp]
25881 694C           24                     03  and	al,*3
25882                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25883 694E           30E4                       xor	ah,ah
25884 6950           88C4                       mov	ah,al
25885 6952           30C0                       xor	al,al
25886 6954           B1                     06  mov	cl,*6
25887 6956           D3E0                       shl	ax,cl
25888                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25889 6958           0346         F6            add	ax,-$A[bp]
25890 695B           44                         inc	sp
25891 695C           44                         inc	sp
25892                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25893 695D           8946         FE            mov	-2[bp],ax
25894                                           !BCC_EOS
25895                                           ! 3539  for(i=0;i<0x100;i++)
25896                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25897 6960           31C0                       xor	ax,ax
25898 6962           8946         FA            mov	-6[bp],ax
25899                                           !BCC_EOS
25900                                           !BCC_EOS
25901                                           ! 3540   {
25902 6965           EB           3B            jmp .231
25903                       00006967            .232:
25904                                           ! 3541    src = i * 8;
25905                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25906 6967           8B46         FA            mov	ax,-6[bp]
25907 696A           B1                     03  mov	cl,*3
25908 696C           D3E0                       shl	ax,cl
25909                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25910 696E           8946         F8            mov	-8[bp],ax
25911                                           !BCC_EOS
25912                                           ! 3542    dest = blockaddr + i * 32;
25913                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25914 6971           8B46         FA            mov	ax,-6[bp]
25915 6974           B1                     05  mov	cl,*5
25916 6976           D3E0                       shl	ax,cl
25917                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25918                                           ! Debug: expression subtree swapping
25919 6978           0346         FE            add	ax,-2[bp]
25920                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25921 697B           8946         FC            mov	-4[bp],ax
25922                                           !BCC_EOS
25923                                           ! 3543    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25924                                           ! Debug: list int = const 8 (used reg = )
25925 697E           B8                   0008  mov	ax,*8
25926 6981           50                         push	ax
25927                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25928 6982           8B5E         F8            mov	bx,-8[bp]
25929                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25930                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25931 6985           81C3                 0F71  add	bx,#_vgafont8
25932 6989           53                         push	bx
25933                                           ! Debug: list unsigned int = const $C000 (used reg = )
25934 698A           B8                   C000  mov	ax,#$C000
25935 698D           50                         push	ax
25936                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25937 698E           FF76         FC            push	-4[bp]
25938                                           ! Debug: list unsigned int = const $A000 (used reg = )
25939 6991           B8                   A000  mov	ax,#$A000
25940 6994           50                         push	ax
25941                                           ! Debug: func () void = memcpyb+0 (used reg = )
25942 6995           E8         1324            call	_memcpyb
25943 6998           83C4                   0A  add	sp,*$A
25944                                           !BCC_EOS
25945                                           ! 3544   }
25946                                           ! 3545  release_font_access();
25947                       0000699B            .230:
25948                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25949 699B           8B46         FA            mov	ax,-6[bp]
25950 699E           40                         inc	ax
25951 699F           8946         FA            mov	-6[bp],ax
25952                       000069A2            .231:
25953                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25954 69A2           8B46         FA            mov	ax,-6[bp]
25955 69A5           3D                   0100  cmp	ax,#$100
25956 69A8           72           BD            jb 	.232
25957                       000069AA            .233:
25958                       000069AA            .22F:
25959                                           ! Debug: func () void = release_font_access+0 (used reg = )
25960 69AA           E8         FCD3            call	_release_font_access
25961                                           !BCC_EOS
25962                                           ! 3546  if(AL>=0x10)
25963                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25964 69AD           8A46         04            mov	al,4[bp]
25965 69B0           3C                     10  cmp	al,*$10
25966 69B2           72           09            jb  	.234
25967                       000069B4            .235:
25968                                           ! 3547   {
25969                                           ! 3548    set_scan_lines(8);
25970                                           ! Debug: list int = const 8 (used reg = )
25971 69B4           B8                   0008  mov	ax,*8
25972 69B7           50                         push	ax
25973                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25974 69B8           E8         FCF9            call	_set_scan_lines
25975 69BB           44                         inc	sp
25976 69BC           44                         inc	sp
25977                                           !BCC_EOS
25978                                           ! 3549   }
25979                                           ! 3550 }
25980                       000069BD            .234:
25981 69BD           89EC                       mov	sp,bp
25982 69BF           5D                         pop	bp
25983 69C0           C3                         ret
25984                                           ! 3551 #asm
25985                                           !BCC_ASM
25986                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25987                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25988                       000069C1            biosfn_set_text_block_specifier:
25989 69C1           50                           push ax
25990 69C2           52                           push dx
25991 69C3           BA                   03C4    mov dx, # 0x3c4
25992 69C6           88DC                         mov ah, bl
25993 69C8           B0                     03    mov al, #0x03
25994 69CA           EF                           out dx, ax
25995 69CB           5A                           pop dx
25996 69CC           58                           pop ax
25997 69CD           C3                           ret
25998                                           ! 3562 endasm
25999                                           !BCC_ENDASM
26000                                           ! 3563 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
26001                                           ! Register BX used in function biosfn_load_text_8_8_pat
26002                       000069CE            _biosfn_load_text_8_16_pat:
26003                                           !BCC_EOS
26004                                           !BCC_EOS
26005                                           ! 3564 {
26006                                           ! 3565  Bit16u blockaddr,dest,i,src;
26007                                           !BCC_EOS
26008                                           ! 3566  get_font_access();
26009 69CE           55                         push	bp
26010 69CF           89E5                       mov	bp,sp
26011 69D1           83C4                   F8  add	sp,*-8
26012                                           ! Debug: func () void = get_font_access+0 (used reg = )
26013 69D4           E8         FC86            call	_get_font_access
26014                                           !BCC_EOS
26015                                           ! 3567  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
26016                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
26017 69D7           8A46         06            mov	al,6[bp]
26018 69DA           24                     04  and	al,*4
26019                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
26020 69DC           30E4                       xor	ah,ah
26021 69DE           88C4                       mov	ah,al
26022 69E0           30C0                       xor	al,al
26023 69E2           B1                     03  mov	cl,*3
26024 69E4           D3E0                       shl	ax,cl
26025 69E6           50                         push	ax
26026                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
26027 69E7           8A46         06            mov	al,6[bp]
26028 69EA           24                     03  and	al,*3
26029                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
26030 69EC           30E4                       xor	ah,ah
26031 69EE           88C4                       mov	ah,al
26032 69F0           30C0                       xor	al,al
26033 69F2           B1                     06  mov	cl,*6
26034 69F4           D3E0                       shl	ax,cl
26035                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
26036 69F6           0346         F6            add	ax,-$A[bp]
26037 69F9           44                         inc	sp
26038 69FA           44                         inc	sp
26039                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26040 69FB           8946         FE            mov	-2[bp],ax
26041                                           !BCC_EOS
26042                                           ! 3568  for(i=0;i<0x100;i++)
26043                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
26044 69FE           31C0                       xor	ax,ax
26045 6A00           8946         FA            mov	-6[bp],ax
26046                                           !BCC_EOS
26047                                           !BCC_EOS
26048                                           ! 3569   {
26049 6A03           EB           3B            jmp .238
26050                       00006A05            .239:
26051                                           ! 3570    src = i * 16;
26052                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
26053 6A05           8B46         FA            mov	ax,-6[bp]
26054 6A08           B1                     04  mov	cl,*4
26055 6A0A           D3E0                       shl	ax,cl
26056                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
26057 6A0C           8946         F8            mov	-8[bp],ax
26058                                           !BCC_EOS
26059                                           ! 3571    dest = blockaddr + i * 32;
26060                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
26061 6A0F           8B46         FA            mov	ax,-6[bp]
26062 6A12           B1                     05  mov	cl,*5
26063 6A14           D3E0                       shl	ax,cl
26064                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26065                                           ! Debug: expression subtree swapping
26066 6A16           0346         FE            add	ax,-2[bp]
26067                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
26068 6A19           8946         FC            mov	-4[bp],ax
26069                                           !BCC_EOS
26070                                           ! 3572    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
26071                                           ! Debug: list int = const $10 (used reg = )
26072 6A1C           B8                   0010  mov	ax,*$10
26073 6A1F           50                         push	ax
26074                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
26075 6A20           8B5E         F8            mov	bx,-8[bp]
26076                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
26077                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
26078 6A23           81C3                 2571  add	bx,#_vgafont16
26079 6A27           53                         push	bx
26080                                           ! Debug: list unsigned int = const $C000 (used reg = )
26081 6A28           B8                   C000  mov	ax,#$C000
26082 6A2B           50                         push	ax
26083                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26084 6A2C           FF76         FC            push	-4[bp]
26085                                           ! Debug: list unsigned int = const $A000 (used reg = )
26086 6A2F           B8                   A000  mov	ax,#$A000
26087 6A32           50                         push	ax
26088                                           ! Debug: func () void = memcpyb+0 (used reg = )
26089 6A33           E8         1286            call	_memcpyb
26090 6A36           83C4                   0A  add	sp,*$A
26091                                           !BCC_EOS
26092                                           ! 3573   }
26093                                           ! 3574  release_font_access();
26094                       00006A39            .237:
26095                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26096 6A39           8B46         FA            mov	ax,-6[bp]
26097 6A3C           40                         inc	ax
26098 6A3D           8946         FA            mov	-6[bp],ax
26099                       00006A40            .238:
26100                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26101 6A40           8B46         FA            mov	ax,-6[bp]
26102 6A43           3D                   0100  cmp	ax,#$100
26103 6A46           72           BD            jb 	.239
26104                       00006A48            .23A:
26105                       00006A48            .236:
26106                                           ! Debug: func () void = release_font_access+0 (used reg = )
26107 6A48           E8         FC35            call	_release_font_access
26108                                           !BCC_EOS
26109                                           ! 3575  if(AL>=0x10)
26110                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26111 6A4B           8A46         04            mov	al,4[bp]
26112 6A4E           3C                     10  cmp	al,*$10
26113 6A50           72           09            jb  	.23B
26114                       00006A52            .23C:
26115                                           ! 3576   {
26116                                           ! 3577    set_scan_lines(16);
26117                                           ! Debug: list int = const $10 (used reg = )
26118 6A52           B8                   0010  mov	ax,*$10
26119 6A55           50                         push	ax
26120                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26121 6A56           E8         FC5B            call	_set_scan_lines
26122 6A59           44                         inc	sp
26123 6A5A           44                         inc	sp
26124                                           !BCC_EOS
26125                                           ! 3578   }
26126                                           ! 3579 }
26127                       00006A5B            .23B:
26128 6A5B           89EC                       mov	sp,bp
26129 6A5D           5D                         pop	bp
26130 6A5E           C3                         ret
26131                                           ! 3580 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26132                                           ! Register BX used in function biosfn_load_text_8_16_pat
26133                       00006A5F            _biosfn_load_gfx_8_8_chars:
26134                                           !BCC_EOS
26135                                           !BCC_EOS
26136                                           ! 3581 {
26137                                           ! 3582  unimplemented();
26138 6A5F           55                         push	bp
26139 6A60           89E5                       mov	bp,sp
26140                                           ! Debug: func () void = unimplemented+0 (used reg = )
26141 6A62           E8         1346            call	_unimplemented
26142                                           !BCC_EOS
26143                                           ! 3583 }
26144 6A65           5D                         pop	bp
26145 6A66           C3                         ret
26146                                           ! 3584 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26147                       00006A67            _biosfn_load_gfx_user_chars:
26148                                           !BCC_EOS
26149                                           !BCC_EOS
26150                                           !BCC_EOS
26151                                           !BCC_EOS
26152                                           !BCC_EOS
26153                                           ! 3585 {
26154                                           ! 3586  unimplemented();
26155 6A67           55                         push	bp
26156 6A68           89E5                       mov	bp,sp
26157                                           ! Debug: func () void = unimplemented+0 (used reg = )
26158 6A6A           E8         133E            call	_unimplemented
26159                                           !BCC_EOS
26160                                           ! 3587 }
26161 6A6D           5D                         pop	bp
26162 6A6E           C3                         ret
26163                                           ! 3588 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26164                       00006A6F            _biosfn_load_gfx_8_14_chars:
26165                                           !BCC_EOS
26166                                           ! 3589 {
26167                                           ! 3590  unimplemented();
26168 6A6F           55                         push	bp
26169 6A70           89E5                       mov	bp,sp
26170                                           ! Debug: func () void = unimplemented+0 (used reg = )
26171 6A72           E8         1336            call	_unimplemented
26172                                           !BCC_EOS
26173                                           ! 3591 }
26174 6A75           5D                         pop	bp
26175 6A76           C3                         ret
26176                                           ! 3592 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26177                       00006A77            _biosfn_load_gfx_8_8_dd_chars:
26178                                           !BCC_EOS
26179                                           ! 3593 {
26180                                           ! 3594  unimplemented();
26181 6A77           55                         push	bp
26182 6A78           89E5                       mov	bp,sp
26183                                           ! Debug: func () void = unimplemented+0 (used reg = )
26184 6A7A           E8         132E            call	_unimplemented
26185                                           !BCC_EOS
26186                                           ! 3595 }
26187 6A7D           5D                         pop	bp
26188 6A7E           C3                         ret
26189                                           ! 3596 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26190                       00006A7F            _biosfn_load_gfx_8_16_chars:
26191                                           !BCC_EOS
26192                                           ! 3597 {
26193                                           ! 3598  unimplemented();
26194 6A7F           55                         push	bp
26195 6A80           89E5                       mov	bp,sp
26196                                           ! Debug: func () void = unimplemented+0 (used reg = )
26197 6A82           E8         1326            call	_unimplemented
26198                                           !BCC_EOS
26199                                           ! 3599 }
26200 6A85           5D                         pop	bp
26201 6A86           C3                         ret
26202                                           ! 3600 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26203                                           ! 3601 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26204                       00006A87            _biosfn_get_font_info:
26205                                           !BCC_EOS
26206                                           !BCC_EOS
26207                                           !BCC_EOS
26208                                           !BCC_EOS
26209                                           !BCC_EOS
26210                                           ! 3602 {Bit16u ss=get_SS();
26211 6A87           55                         push	bp
26212 6A88           89E5                       mov	bp,sp
26213 6A8A           4C                         dec	sp
26214 6A8B           4C                         dec	sp
26215                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26216 6A8C           E8         1319            call	_get_SS
26217                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26218 6A8F           8946         FE            mov	-2[bp],ax
26219                                           !BCC_EOS
26220                                           ! 3603  switch(BH)
26221 6A92           8A46         04            mov	al,4[bp]
26222                                           ! 3604   {case 0x00:
26223 6A95           E9         0154            br 	.23F
26224                                           ! 3605     write_word(ss,ES,read_word(0x00,0x1f*4));
26225                       00006A98            .240:
26226                                           ! Debug: list int = const $7C (used reg = )
26227 6A98           B8                   007C  mov	ax,*$7C
26228 6A9B           50                         push	ax
26229                                           ! Debug: list int = const 0 (used reg = )
26230 6A9C           31C0                       xor	ax,ax
26231 6A9E           50                         push	ax
26232                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26233 6A9F           E8         128D            call	_read_word
26234 6AA2           83C4                   04  add	sp,*4
26235                                           ! Debug: list unsigned short = ax+0 (used reg = )
26236 6AA5           50                         push	ax
26237                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26238 6AA6           FF76         06            push	6[bp]
26239                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26240 6AA9           FF76         FE            push	-2[bp]
26241                                           ! Debug: func () void = write_word+0 (used reg = )
26242 6AAC           E8         12AB            call	_write_word
26243 6AAF           83C4                   06  add	sp,*6
26244                                           !BCC_EOS
26245                                           ! 3606     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26246                                           ! Debug: list int = const $7E (used reg = )
26247 6AB2           B8                   007E  mov	ax,*$7E
26248 6AB5           50                         push	ax
26249                                           ! Debug: list int = const 0 (used reg = )
26250 6AB6           31C0                       xor	ax,ax
26251 6AB8           50                         push	ax
26252                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26253 6AB9           E8         1273            call	_read_word
26254 6ABC           83C4                   04  add	sp,*4
26255                                           ! Debug: list unsigned short = ax+0 (used reg = )
26256 6ABF           50                         push	ax
26257                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26258 6AC0           FF76         08            push	8[bp]
26259                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26260 6AC3           FF76         FE            push	-2[bp]
26261                                           ! Debug: func () void = write_word+0 (used reg = )
26262 6AC6           E8         1291            call	_write_word
26263 6AC9           83C4                   06  add	sp,*6
26264                                           !BCC_EOS
26265                                           ! 3607     break;
26266 6ACC           E9         0142            br 	.23D
26267                                           !BCC_EOS
26268                                           ! 3608    case 0x01:
26269                                           ! 3609     write_word(ss,ES,read_word(0x00,0x43*4));
26270                       00006ACF            .241:
26271                                           ! Debug: list int = const $10C (used reg = )
26272 6ACF           B8                   010C  mov	ax,#$10C
26273 6AD2           50                         push	ax
26274                                           ! Debug: list int = const 0 (used reg = )
26275 6AD3           31C0                       xor	ax,ax
26276 6AD5           50                         push	ax
26277                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26278 6AD6           E8         1256            call	_read_word
26279 6AD9           83C4                   04  add	sp,*4
26280                                           ! Debug: list unsigned short = ax+0 (used reg = )
26281 6ADC           50                         push	ax
26282                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26283 6ADD           FF76         06            push	6[bp]
26284                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26285 6AE0           FF76         FE            push	-2[bp]
26286                                           ! Debug: func () void = write_word+0 (used reg = )
26287 6AE3           E8         1274            call	_write_word
26288 6AE6           83C4                   06  add	sp,*6
26289                                           !BCC_EOS
26290                                           ! 3610     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26291                                           ! Debug: list int = const $10E (used reg = )
26292 6AE9           B8                   010E  mov	ax,#$10E
26293 6AEC           50                         push	ax
26294                                           ! Debug: list int = const 0 (used reg = )
26295 6AED           31C0                       xor	ax,ax
26296 6AEF           50                         push	ax
26297                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26298 6AF0           E8         123C            call	_read_word
26299 6AF3           83C4                   04  add	sp,*4
26300                                           ! Debug: list unsigned short = ax+0 (used reg = )
26301 6AF6           50                         push	ax
26302                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26303 6AF7           FF76         08            push	8[bp]
26304                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26305 6AFA           FF76         FE            push	-2[bp]
26306                                           ! Debug: func () void = write_word+0 (used reg = )
26307 6AFD           E8         125A            call	_write_word
26308 6B00           83C4                   06  add	sp,*6
26309                                           !BCC_EOS
26310                                           ! 3611     break;
26311 6B03           E9         010B            br 	.23D
26312                                           !BCC_EOS
26313                                           ! 3612    case 0x02:
26314                                           ! 3613     write_word(ss,ES,0xC000);
26315                       00006B06            .242:
26316                                           ! Debug: list unsigned int = const $C000 (used reg = )
26317 6B06           B8                   C000  mov	ax,#$C000
26318 6B09           50                         push	ax
26319                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26320 6B0A           FF76         06            push	6[bp]
26321                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26322 6B0D           FF76         FE            push	-2[bp]
26323                                           ! Debug: func () void = write_word+0 (used reg = )
26324 6B10           E8         1247            call	_write_word
26325 6B13           83C4                   06  add	sp,*6
26326                                           !BCC_EOS
26327                                           ! 3614     write_word(ss,BP,vgafont14);
26328                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26329 6B16           BB                   1771  mov	bx,#_vgafont14
26330 6B19           53                         push	bx
26331                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26332 6B1A           FF76         08            push	8[bp]
26333                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26334 6B1D           FF76         FE            push	-2[bp]
26335                                           ! Debug: func () void = write_word+0 (used reg = )
26336 6B20           E8         1237            call	_write_word
26337 6B23           83C4                   06  add	sp,*6
26338                                           !BCC_EOS
26339                                           ! 3615     break;
26340 6B26           E9         00E8            br 	.23D
26341                                           !BCC_EOS
26342                                           ! 3616    case 0x03:
26343                                           ! 3617     write_word(ss,ES,0xC000);
26344                       00006B29            .243:
26345                                           ! Debug: list unsigned int = const $C000 (used reg = )
26346 6B29           B8                   C000  mov	ax,#$C000
26347 6B2C           50                         push	ax
26348                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26349 6B2D           FF76         06            push	6[bp]
26350                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26351 6B30           FF76         FE            push	-2[bp]
26352                                           ! Debug: func () void = write_word+0 (used reg = )
26353 6B33           E8         1224            call	_write_word
26354 6B36           83C4                   06  add	sp,*6
26355                                           !BCC_EOS
26356                                           ! 3618     write_word(ss,BP,vgafont8);
26357                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26358 6B39           BB                   0F71  mov	bx,#_vgafont8
26359 6B3C           53                         push	bx
26360                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26361 6B3D           FF76         08            push	8[bp]
26362                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26363 6B40           FF76         FE            push	-2[bp]
26364                                           ! Debug: func () void = write_word+0 (used reg = )
26365 6B43           E8         1214            call	_write_word
26366 6B46           83C4                   06  add	sp,*6
26367                                           !BCC_EOS
26368                                           ! 3619     break;
26369 6B49           E9         00C5            br 	.23D
26370                                           !BCC_EOS
26371                                           ! 3620    case 0x04:
26372                                           ! 3621     write_word(ss,ES,0xC000);
26373                       00006B4C            .244:
26374                                           ! Debug: list unsigned int = const $C000 (used reg = )
26375 6B4C           B8                   C000  mov	ax,#$C000
26376 6B4F           50                         push	ax
26377                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26378 6B50           FF76         06            push	6[bp]
26379                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26380 6B53           FF76         FE            push	-2[bp]
26381                                           ! Debug: func () void = write_word+0 (used reg = )
26382 6B56           E8         1201            call	_write_word
26383 6B59           83C4                   06  add	sp,*6
26384                                           !BCC_EOS
26385                                           ! 3622     write_word(ss,BP,vgafont8+128*8);
26386                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26387 6B5C           BB                   1371  mov	bx,#_vgafont8+$400
26388 6B5F           53                         push	bx
26389                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26390 6B60           FF76         08            push	8[bp]
26391                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26392 6B63           FF76         FE            push	-2[bp]
26393                                           ! Debug: func () void = write_word+0 (used reg = )
26394 6B66           E8         11F1            call	_write_word
26395 6B69           83C4                   06  add	sp,*6
26396                                           !BCC_EOS
26397                                           ! 3623     break;
26398 6B6C           E9         00A2            br 	.23D
26399                                           !BCC_EOS
26400                                           ! 3624    case 0x05:
26401                                           ! 3625     write_word(ss,ES,0xC000);
26402                       00006B6F            .245:
26403                                           ! Debug: list unsigned int = const $C000 (used reg = )
26404 6B6F           B8                   C000  mov	ax,#$C000
26405 6B72           50                         push	ax
26406                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26407 6B73           FF76         06            push	6[bp]
26408                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26409 6B76           FF76         FE            push	-2[bp]
26410                                           ! Debug: func () void = write_word+0 (used reg = )
26411 6B79           E8         11DE            call	_write_word
26412 6B7C           83C4                   06  add	sp,*6
26413                                           !BCC_EOS
26414                                           ! 3626     write_word(ss,BP,vgafont14alt);
26415                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26416 6B7F           BB                   3571  mov	bx,#_vgafont14alt
26417 6B82           53                         push	bx
26418                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26419 6B83           FF76         08            push	8[bp]
26420                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26421 6B86           FF76         FE            push	-2[bp]
26422                                           ! Debug: func () void = write_word+0 (used reg = )
26423 6B89           E8         11CE            call	_write_word
26424 6B8C           83C4                   06  add	sp,*6
26425                                           !BCC_EOS
26426                                           ! 3627     break;
26427 6B8F           E9         007F            jmp .23D
26428                                           !BCC_EOS
26429                                           ! 3628    case 0x06:
26430                                           ! 3629     write_word(ss,ES,0xC000);
26431                       00006B92            .246:
26432                                           ! Debug: list unsigned int = const $C000 (used reg = )
26433 6B92           B8                   C000  mov	ax,#$C000
26434 6B95           50                         push	ax
26435                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26436 6B96           FF76         06            push	6[bp]
26437                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26438 6B99           FF76         FE            push	-2[bp]
26439                                           ! Debug: func () void = write_word+0 (used reg = )
26440 6B9C           E8         11BB            call	_write_word
26441 6B9F           83C4                   06  add	sp,*6
26442                                           !BCC_EOS
26443                                           ! 3630     write_word(ss,BP,vgafont16);
26444                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26445 6BA2           BB                   2571  mov	bx,#_vgafont16
26446 6BA5           53                         push	bx
26447                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26448 6BA6           FF76         08            push	8[bp]
26449                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26450 6BA9           FF76         FE            push	-2[bp]
26451                                           ! Debug: func () void = write_word+0 (used reg = )
26452 6BAC           E8         11AB            call	_write_word
26453 6BAF           83C4                   06  add	sp,*6
26454                                           !BCC_EOS
26455                                           ! 3631     break;
26456 6BB2           EB           5D            jmp .23D
26457                                           !BCC_EOS
26458                                           ! 3632    case 0x07:
26459                                           ! 3633     write_word(ss,ES,0xC000);
26460                       00006BB4            .247:
26461                                           ! Debug: list unsigned int = const $C000 (used reg = )
26462 6BB4           B8                   C000  mov	ax,#$C000
26463 6BB7           50                         push	ax
26464                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26465 6BB8           FF76         06            push	6[bp]
26466                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26467 6BBB           FF76         FE            push	-2[bp]
26468                                           ! Debug: func () void = write_word+0 (used reg = )
26469 6BBE           E8         1199            call	_write_word
26470 6BC1           83C4                   06  add	sp,*6
26471                                           !BCC_EOS
26472                                           ! 3634     write_word(ss,BP,vgafont16alt);
26473                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26474 6BC4           BB                   3572  mov	bx,#_vgafont16alt
26475 6BC7           53                         push	bx
26476                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26477 6BC8           FF76         08            push	8[bp]
26478                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26479 6BCB           FF76         FE            push	-2[bp]
26480                                           ! Debug: func () void = write_word+0 (used reg = )
26481 6BCE           E8         1189            call	_write_word
26482 6BD1           83C4                   06  add	sp,*6
26483                                           !BCC_EOS
26484                                           ! 3635     break;
26485 6BD4           EB           3B            jmp .23D
26486                                           !BCC_EOS
26487                                           ! 3636    default:
26488                                           ! 3637      printf("Get font info BH(%02x) was discarded\n",BH);
26489                       00006BD6            .248:
26490                                           ! Debug: list unsigned char BH = [S+4+2] (used reg = )
26491 6BD6           8A46         04            mov	al,4[bp]
26492 6BD9           30E4                       xor	ah,ah
26493 6BDB           50                         push	ax
26494                                           ! Debug: list * char = .249+0 (used reg = )
26495 6BDC           BB                   A094  mov	bx,#.249
26496 6BDF           53                         push	bx
26497                                           ! Debug: func () void = printf+0 (used reg = )
26498 6BE0           E8         11E4            call	_printf
26499 6BE3           83C4                   04  add	sp,*4
26500                                           !BCC_EOS
26501                                           ! 3638     return;
26502 6BE6           89EC                       mov	sp,bp
26503 6BE8           5D                         pop	bp
26504 6BE9           C3                         ret
26505                                           !BCC_EOS
26506                                           ! 3639   }
26507                                           ! 3640  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26508 6BEA           EB           25            jmp .23D
26509                       00006BEC            .23F:
26510 6BEC           2C                     00  sub	al,*0
26511 6BEE           72           E6            jb 	.248
26512 6BF0           3C                     07  cmp	al,*7
26513 6BF2           77           1B            ja  	.24A
26514 6BF4           30E4                       xor	ah,ah
26515 6BF6           D1E0                       shl	ax,*1
26516 6BF8           89C3                       mov	bx,ax
26517 6BFA           2E                         seg	cs
26518 6BFB           FFA7       6BFF            br	.24B[bx]
26519                       00006BFF            .24B:
26520 6BFF                      6A98            .word	.240
26521 6C01                      6ACF            .word	.241
26522 6C03                      6B06            .word	.242
26523 6C05                      6B29            .word	.243
26524 6C07                      6B4C            .word	.244
26525 6C09                      6B6F            .word	.245
26526 6C0B                      6B92            .word	.246
26527 6C0D                      6BB4            .word	.247
26528                       00006C0F            .24A:
26529 6C0F           EB           C5            jmp	.248
26530                       00006C11            .23D:
26531                       FFFFFFFC            ..FFF5	=	-4
26532                                           ! Debug: list int = const $85 (used reg = )
26533 6C11           B8                   0085  mov	ax,#$85
26534 6C14           50                         push	ax
26535                                           ! Debug: list int = const $40 (used reg = )
26536 6C15           B8                   0040  mov	ax,*$40
26537 6C18           50                         push	ax
26538                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26539 6C19           E8         1100            call	_read_byte
26540 6C1C           83C4                   04  add	sp,*4
26541                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26542 6C1F           30E4                       xor	ah,ah
26543                                           ! Debug: list unsigned short = ax+0 (used reg = )
26544 6C21           50                         push	ax
26545                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26546 6C22           FF76         0A            push	$A[bp]
26547                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26548 6C25           FF76         FE            push	-2[bp]
26549                                           ! Debug: func () void = write_word+0 (used reg = )
26550 6C28           E8         112F            call	_write_word
26551 6C2B           83C4                   06  add	sp,*6
26552                                           !BCC_EOS
26553                                           ! 3641  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26554                                           ! Debug: list int = const $84 (used reg = )
26555 6C2E           B8                   0084  mov	ax,#$84
26556 6C31           50                         push	ax
26557                                           ! Debug: list int = const $40 (used reg = )
26558 6C32           B8                   0040  mov	ax,*$40
26559 6C35           50                         push	ax
26560                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26561 6C36           E8         10E3            call	_read_byte
26562 6C39           83C4                   04  add	sp,*4
26563                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26564 6C3C           30E4                       xor	ah,ah
26565                                           ! Debug: list unsigned short = ax+0 (used reg = )
26566 6C3E           50                         push	ax
26567                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26568 6C3F           FF76         0C            push	$C[bp]
26569                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26570 6C42           FF76         FE            push	-2[bp]
26571                                           ! Debug: func () void = write_word+0 (used reg = )
26572 6C45           E8         1112            call	_write_word
26573 6C48           83C4                   06  add	sp,*6
26574                                           !BCC_EOS
26575                                           ! 3642 }
26576 6C4B           89EC                       mov	sp,bp
26577 6C4D           5D                         pop	bp
26578 6C4E           C3                         ret
26579                                           ! 3643 #asm
26580                                           !BCC_ASM
26581                       00000006            _biosfn_get_font_info.BP	set	6
26582                       00000002            _biosfn_get_font_info.BH	set	2
26583                       00000008            _biosfn_get_font_info.CX	set	8
26584                       0000000A            _biosfn_get_font_info.DX	set	$A
26585                       00000004            _biosfn_get_font_info.ES	set	4
26586                       00006C4F            biosfn_get_ega_info:
26587 6C4F           1E                           push ds
26588 6C50           50                           push ax
26589 6C51           B8                   0040    mov ax, # 0x40
26590 6C54           8ED8                         mov ds, ax
26591 6C56           30ED                         xor ch, ch
26592 6C58           BB                   0088    mov bx, # 0x88
26593 6C5B           8A0F                         mov cl, [bx]
26594 6C5D           80E1                   0F    and cl, #0x0f
26595 6C60           BB                   0063    mov bx, # 0x63
26596 6C63           8B07                         mov ax, [bx]
26597 6C65           BB                   0003    mov bx, #0x0003
26598 6C68           3D                   03B4    cmp ax, # 0x3b4
26599 6C6B           75           02              jne mode_ega_color
26600 6C6D           B7                     01    mov bh, #0x01
26601                       00006C6F            mode_ega_color:
26602 6C6F           58                           pop ax
26603 6C70           1F                           pop ds
26604 6C71           C3                           ret
26605                                           ! 3663 endasm
26606                                           !BCC_ENDASM
26607                                           ! 3664 static void biosfn_alternate_prtsc()
26608                                           ! Register BX used in function biosfn_get_font_info
26609                                           ! 3665 {
26610                       00006C72            _biosfn_alternate_prtsc:
26611                                           ! 3666  unimplemented();
26612 6C72           55                         push	bp
26613 6C73           89E5                       mov	bp,sp
26614                                           ! Debug: func () void = unimplemented+0 (used reg = )
26615 6C75           E8         1133            call	_unimplemented
26616                                           !BCC_EOS
26617                                           ! 3667 }
26618 6C78           5D                         pop	bp
26619 6C79           C3                         ret
26620                                           ! 3668 #asm
26621                                           !BCC_ASM
26622                       00006C7A            biosfn_select_vert_res:
26623                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26624 6C7A           1E                           push ds
26625 6C7B           53                           push bx
26626 6C7C           52                           push dx
26627 6C7D           88C2                         mov dl, al
26628 6C7F           B8                   0040    mov ax, # 0x40
26629 6C82           8ED8                         mov ds, ax
26630 6C84           BB                   0089    mov bx, # 0x89
26631 6C87           8A07                         mov al, [bx]
26632 6C89           BB                   0088    mov bx, # 0x88
26633 6C8C           8A27                         mov ah, [bx]
26634 6C8E           80FA                   01    cmp dl, #0x01
26635 6C91           74           24              je vert_res_350
26636 6C93           72           2C              jb vert_res_200
26637 6C95           80FA                   02    cmp dl, #0x02
26638 6C98           74           11              je vert_res_400
26639 6C9A           88D0                         mov al, dl
26640 6C9C           30E4                         xor ah, ah
26641 6C9E           50                           push ax
26642 6C9F           BB                   6CDC    mov bx, #msg_vert_res
26643 6CA2           53                           push bx
26644 6CA3           E8         1121              call _printf
26645 6CA6           83C4                   04    add sp, #4
26646 6CA9           EB           2A              jmp set_retcode
26647                       00006CAB            vert_res_400:
26648                                             ; reset modeset ctl bit 7 and set bit 4
26649                                             ; set switches bit 3-0 to 0x09
26650 6CAB           24                     7F    and al, #0x7f
26651 6CAD           0C                     10    or al, #0x10
26652 6CAF           80E4                   F0    and ah, #0xf0
26653 6CB2           80CC                   09    or ah, #0x09
26654 6CB5           75           14              jnz set_vert_res
26655                       00006CB7            vert_res_350:
26656                                             ; reset modeset ctl bit 7 and bit 4
26657                                             ; set switches bit 3-0 to 0x09
26658 6CB7           24                     6F    and al, #0x6f
26659 6CB9           80E4                   F0    and ah, #0xf0
26660 6CBC           80CC                   09    or ah, #0x09
26661 6CBF           75           0A              jnz set_vert_res
26662                       00006CC1            vert_res_200:
26663                                             ; set modeset ctl bit 7 and reset bit 4
26664                                             ; set switches bit 3-0 to 0x08
26665 6CC1           24                     EF    and al, #0xef
26666 6CC3           0C                     80    or al, #0x80
26667 6CC5           80E4                   F0    and ah, #0xf0
26668 6CC8           80CC                   08    or ah, #0x08
26669                       00006CCB            set_vert_res:
26670 6CCB           BB                   0089    mov bx, # 0x89
26671 6CCE           8807                         mov [bx], al
26672 6CD0           BB                   0088    mov bx, # 0x88
26673 6CD3           8827                         mov [bx], ah
26674                       00006CD5            set_retcode:
26675 6CD5           B8                   1212    mov ax, #0x1212
26676 6CD8           5A                           pop dx
26677 6CD9           5B                           pop bx
26678 6CDA           1F                           pop ds
26679 6CDB           C3                           ret
26680                       00006CDC            msg_vert_res:
26681 6CDC                        53            .ascii "Select vert res (%02x) was discarded"
26682 6D00                        0D            .byte 0x0d,0x0a,0x00
26683                       00006D03            biosfn_enable_default_palette_loading:
26684 6D03           1E                           push ds
26685 6D04           53                           push bx
26686 6D05           52                           push dx
26687 6D06           88C2                         mov dl, al
26688 6D08           80E2                   01    and dl, #0x01
26689 6D0B           C0E2                   03    shl dl, 3
26690 6D0E           B8                   0040    mov ax, # 0x40
26691 6D11           8ED8                         mov ds, ax
26692 6D13           BB                   0089    mov bx, # 0x89
26693 6D16           8A07                         mov al, [bx]
26694 6D18           24                     F7    and al, #0xf7
26695 6D1A           08D0                         or al, dl
26696 6D1C           8807                         mov [bx], al
26697 6D1E           B8                   1212    mov ax, #0x1212
26698 6D21           5A                           pop dx
26699 6D22           5B                           pop bx
26700 6D23           1F                           pop ds
26701 6D24           C3                           ret
26702                       00006D25            biosfn_enable_video_addressing:
26703 6D25           53                           push bx
26704 6D26           52                           push dx
26705 6D27           88C3                         mov bl, al
26706 6D29           80E3                   01    and bl, #0x01
26707 6D2C           80F3                   01    xor bl, #0x01
26708 6D2F           D0E3                         shl bl, 1
26709 6D31           BA                   03CC    mov dx, # 0x3cc
26710 6D34           EC                           in al, dx
26711 6D35           24                     FD    and al, #0xfd
26712 6D37           08D8                         or al, bl
26713 6D39           BA                   03C2    mov dx, # 0x3c2
26714 6D3C           EE                           out dx, al
26715 6D3D           B8                   1212    mov ax, #0x1212
26716 6D40           5A                           pop dx
26717 6D41           5B                           pop bx
26718 6D42           C3                           ret
26719                       00006D43            biosfn_enable_grayscale_summing:
26720 6D43           1E                           push ds
26721 6D44           53                           push bx
26722 6D45           52                           push dx
26723 6D46           88C2                         mov dl, al
26724 6D48           80E2                   01    and dl, #0x01
26725 6D4B           80F2                   01    xor dl, #0x01
26726 6D4E           D0E2                         shl dl, 1
26727 6D50           B8                   0040    mov ax, # 0x40
26728 6D53           8ED8                         mov ds, ax
26729 6D55           BB                   0089    mov bx, # 0x89
26730 6D58           8A07                         mov al, [bx]
26731 6D5A           24                     FD    and al, #0xfd
26732 6D5C           08D0                         or al, dl
26733 6D5E           8807                         mov [bx], al
26734 6D60           B8                   1212    mov ax, #0x1212
26735 6D63           5A                           pop dx
26736 6D64           5B                           pop bx
26737 6D65           1F                           pop ds
26738 6D66           C3                           ret
26739                       00006D67            biosfn_enable_cursor_emulation:
26740 6D67           1E                           push ds
26741 6D68           53                           push bx
26742 6D69           52                           push dx
26743 6D6A           88C2                         mov dl, al
26744 6D6C           80E2                   01    and dl, #0x01
26745 6D6F           80F2                   01    xor dl, #0x01
26746 6D72           B8                   0040    mov ax, # 0x40
26747 6D75           8ED8                         mov ds, ax
26748 6D77           BB                   0089    mov bx, # 0x89
26749 6D7A           8A07                         mov al, [bx]
26750 6D7C           24                     FE    and al, #0xfe
26751 6D7E           08D0                         or al, dl
26752 6D80           8807                         mov [bx], al
26753 6D82           B8                   1212    mov ax, #0x1212
26754 6D85           5A                           pop dx
26755 6D86           5B                           pop bx
26756 6D87           1F                           pop ds
26757 6D88           C3                           ret
26758                                           ! 3805 endasm
26759                                           !BCC_ENDASM
26760                                           ! 3806 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26761                       00006D89            _biosfn_switch_video_interface:
26762                                           !BCC_EOS
26763                                           !BCC_EOS
26764                                           !BCC_EOS
26765                                           ! 3807 {
26766                                           ! 3808  unimplemented();
26767 6D89           55                         push	bp
26768 6D8A           89E5                       mov	bp,sp
26769                                           ! Debug: func () void = unimplemented+0 (used reg = )
26770 6D8C           E8         101C            call	_unimplemented
26771                                           !BCC_EOS
26772                                           ! 3809 }
26773 6D8F           5D                         pop	bp
26774 6D90           C3                         ret
26775                                           ! 3810 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26776                       00006D91            _biosfn_enable_video_refresh_control:
26777                                           !BCC_EOS
26778                                           ! 3811 {
26779                                           ! 3812  unimplemented();
26780 6D91           55                         push	bp
26781 6D92           89E5                       mov	bp,sp
26782                                           ! Debug: func () void = unimplemented+0 (used reg = )
26783 6D94           E8         1014            call	_unimplemented
26784                                           !BCC_EOS
26785                                           ! 3813 }
26786 6D97           5D                         pop	bp
26787 6D98           C3                         ret
26788                                           ! 3814 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26789                                           ! 3815 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26790                       00006D99            _biosfn_write_string:
26791                                           !BCC_EOS
26792                                           !BCC_EOS
26793                                           !BCC_EOS
26794                                           !BCC_EOS
26795                                           !BCC_EOS
26796                                           !BCC_EOS
26797                                           !BCC_EOS
26798                                           !BCC_EOS
26799                                           ! 3816 {
26800                                           ! 3817  Bit16u newcurs,oldcurs,dummy;
26801                                           !BCC_EOS
26802                                           ! 3818  Bit8u car,carattr;
26803                                           !BCC_EOS
26804                                           ! 3819  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26805 6D99           55                         push	bp
26806 6D9A           89E5                       mov	bp,sp
26807 6D9C           83C4                   F8  add	sp,*-8
26808                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26809 6D9F           8D5E         FC            lea	bx,-4[bp]
26810 6DA2           53                         push	bx
26811                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26812 6DA3           8D5E         FA            lea	bx,-6[bp]
26813 6DA6           53                         push	bx
26814                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26815 6DA7           8A46         06            mov	al,6[bp]
26816 6DAA           30E4                       xor	ah,ah
26817 6DAC           50                         push	ax
26818                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26819 6DAD           E8         D710            call	_biosfn_get_cursor_pos
26820 6DB0           83C4                   06  add	sp,*6
26821                                           !BCC_EOS
26822                                           ! 3820  if(row==0xff)
26823                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26824 6DB3           8A46         0C            mov	al,$C[bp]
26825 6DB6           3C                     FF  cmp	al,#$FF
26826 6DB8           75           12            jne 	.24C
26827                       00006DBA            .24D:
26828                                           ! 3821   {col=oldcurs&0x00ff;
26829                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26830 6DBA           8A46         FC            mov	al,-4[bp]
26831                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26832 6DBD           8846         0E            mov	$E[bp],al
26833                                           !BCC_EOS
26834                                           ! 3822    row=(oldcurs&0xff00)>>8;
26835                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26836 6DC0           8B46         FC            mov	ax,-4[bp]
26837 6DC3           30C0                       xor	al,al
26838                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26839 6DC5           88E0                       mov	al,ah
26840 6DC7           30E4                       xor	ah,ah
26841                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26842 6DC9           8846         0C            mov	$C[bp],al
26843                                           !BCC_EOS
26844                                           ! 3823   }
26845                                           ! 3824  newcurs=row; newcurs<<=8; newcurs+=col;
26846                       00006DCC            .24C:
26847                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26848 6DCC           8A46         0C            mov	al,$C[bp]
26849 6DCF           30E4                       xor	ah,ah
26850 6DD1           8946         FE            mov	-2[bp],ax
26851                                           !BCC_EOS
26852                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26853 6DD4           8B46         FE            mov	ax,-2[bp]
26854 6DD7           88C4                       mov	ah,al
26855 6DD9           30C0                       xor	al,al
26856 6DDB           8946         FE            mov	-2[bp],ax
26857                                           !BCC_EOS
26858                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26859 6DDE           8B46         FE            mov	ax,-2[bp]
26860 6DE1           0246         0E            add	al,$E[bp]
26861 6DE4           80D4                   00  adc	ah,*0
26862 6DE7           8946         FE            mov	-2[bp],ax
26863                                           !BCC_EOS
26864                                           ! 3825  biosfn_set_cursor_pos(page,newcurs);
26865                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26866 6DEA           FF76         FE            push	-2[bp]
26867                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26868 6DED           8A46         06            mov	al,6[bp]
26869 6DF0           30E4                       xor	ah,ah
26870 6DF2           50                         push	ax
26871                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26872 6DF3           E8         D5CA            call	_biosfn_set_cursor_pos
26873 6DF6           83C4                   04  add	sp,*4
26874                                           !BCC_EOS
26875                                           ! 3826  while(count--!=0)
26876                                           ! 3827   {
26877 6DF9           EB           4F            jmp .24F
26878                       00006DFB            .250:
26879                                           ! 3828    car=read_byte(seg,offset++);
26880                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26881 6DFB           8B46         12            mov	ax,$12[bp]
26882 6DFE           40                         inc	ax
26883 6DFF           8946         12            mov	$12[bp],ax
26884                                           ! Debug: list unsigned short = ax-1 (used reg = )
26885 6E02           48                         dec	ax
26886 6E03           50                         push	ax
26887                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26888 6E04           FF76         10            push	$10[bp]
26889                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26890 6E07           E8         0F12            call	_read_byte
26891 6E0A           83C4                   04  add	sp,*4
26892                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26893 6E0D           8846         F9            mov	-7[bp],al
26894                                           !BCC_EOS
26895                                           ! 3829    if((flag&0x02)!=0)
26896                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26897 6E10           8A46         04            mov	al,4[bp]
26898 6E13           24                     02  and	al,*2
26899                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26900 6E15           84C0                       test	al,al
26901 6E17           74           15            je  	.251
26902                       00006E19            .252:
26903                                           ! 3830     attr=read_byte(seg,offset++);
26904                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26905 6E19           8B46         12            mov	ax,$12[bp]
26906 6E1C           40                         inc	ax
26907 6E1D           8946         12            mov	$12[bp],ax
26908                                           ! Debug: list unsigned short = ax-1 (used reg = )
26909 6E20           48                         dec	ax
26910 6E21           50                         push	ax
26911                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26912 6E22           FF76         10            push	$10[bp]
26913                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26914 6E25           E8         0EF4            call	_read_byte
26915 6E28           83C4                   04  add	sp,*4
26916                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26917 6E2B           8846         08            mov	8[bp],al
26918                                           !BCC_EOS
26919                                           ! 3831    biosfn_write_teletype(car,page,attr,3);
26920                       00006E2E            .251:
26921                                           ! Debug: list int = const 3 (used reg = )
26922 6E2E           B8                   0003  mov	ax,*3
26923 6E31           50                         push	ax
26924                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26925 6E32           8A46         08            mov	al,8[bp]
26926 6E35           30E4                       xor	ah,ah
26927 6E37           50                         push	ax
26928                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26929 6E38           8A46         06            mov	al,6[bp]
26930 6E3B           30E4                       xor	ah,ah
26931 6E3D           50                         push	ax
26932                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26933 6E3E           8A46         F9            mov	al,-7[bp]
26934 6E41           30E4                       xor	ah,ah
26935 6E43           50                         push	ax
26936                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26937 6E44           E8         F112            call	_biosfn_write_teletype
26938 6E47           83C4                   08  add	sp,*8
26939                                           !BCC_EOS
26940                                           ! 3832   }
26941                                           ! 3833  if((flag&0x01)==0)
26942                       00006E4A            .24F:
26943                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26944 6E4A           8B46         0A            mov	ax,$A[bp]
26945 6E4D           48                         dec	ax
26946 6E4E           8946         0A            mov	$A[bp],ax
26947                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26948 6E51           3D                   FFFF  cmp	ax,*-1
26949 6E54           75           A5            jne	.250
26950                       00006E56            .253:
26951                       00006E56            .24E:
26952                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26953 6E56           8A46         04            mov	al,4[bp]
26954 6E59           24                     01  and	al,*1
26955                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26956 6E5B           84C0                       test	al,al
26957 6E5D           75           0F            jne 	.254
26958                       00006E5F            .255:
26959                                           ! 3834   biosfn_set_cursor_pos(page,oldcurs);
26960                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26961 6E5F           FF76         FC            push	-4[bp]
26962                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26963 6E62           8A46         06            mov	al,6[bp]
26964 6E65           30E4                       xor	ah,ah
26965 6E67           50                         push	ax
26966                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26967 6E68           E8         D555            call	_biosfn_set_cursor_pos
26968 6E6B           83C4                   04  add	sp,*4
26969                                           !BCC_EOS
26970                                           ! 3835 }
26971                       00006E6E            .254:
26972 6E6E           89EC                       mov	sp,bp
26973 6E70           5D                         pop	bp
26974 6E71           C3                         ret
26975                                           ! 3836 #asm
26976                                           !BCC_ASM
26977                       00000008            _biosfn_write_string.count	set	8
26978                       0000000E            _biosfn_write_string.seg	set	$E
26979                       0000000C            _biosfn_write_string.col	set	$C
26980                       00000002            _biosfn_write_string.flag	set	2
26981                       00000006            _biosfn_write_string.attr	set	6
26982                       00000004            _biosfn_write_string.page	set	4
26983                       0000000A            _biosfn_write_string.row	set	$A
26984                       00000010            _biosfn_write_string.offset	set	$10
26985                       00006E72            biosfn_group_1A:
26986 6E72           3C                     00    cmp al, #0x00
26987 6E74           74           08              je biosfn_read_display_code
26988 6E76           3C                     01    cmp al, #0x01
26989 6E78           74           19              je biosfn_set_display_code
26990 6E7A           E8         0F3C              call _unknown
26991 6E7D           C3                           ret
26992                       00006E7E            biosfn_read_display_code:
26993 6E7E           1E                           push ds
26994 6E7F           50                           push ax
26995 6E80           B8                   0040    mov ax, # 0x40
26996 6E83           8ED8                         mov ds, ax
26997 6E85           BB                   008A    mov bx, # 0x8A
26998 6E88           8A07                         mov al, [bx]
26999 6E8A           88C3                         mov bl, al
27000 6E8C           30FF                         xor bh, bh
27001 6E8E           58                           pop ax
27002 6E8F           88E0                         mov al, ah
27003 6E91           1F                           pop ds
27004 6E92           C3                           ret
27005                       00006E93            biosfn_set_display_code:
27006 6E93           1E                           push ds
27007 6E94           50                           push ax
27008 6E95           53                           push bx
27009 6E96           B8                   0040    mov ax, # 0x40
27010 6E99           8ED8                         mov ds, ax
27011 6E9B           89D8                         mov ax, bx
27012 6E9D           BB                   008A    mov bx, # 0x8A
27013 6EA0           8807                         mov [bx], al
27014 6EA2           88E0                         mov al, ah
27015 6EA4           30E4                         xor ah, ah
27016 6EA6           50                           push ax
27017 6EA7           BB                   6EB7    mov bx, #msg_alt_dcc
27018 6EAA           53                           push bx
27019 6EAB           E8         0F19              call _printf
27020 6EAE           83C4                   04    add sp, #4
27021 6EB1           5B                           pop bx
27022 6EB2           58                           pop ax
27023 6EB3           88E0                         mov al, ah
27024 6EB5           1F                           pop ds
27025 6EB6           C3                           ret
27026                       00006EB7            msg_alt_dcc:
27027 6EB7                        41            .ascii "Alternate Display code (%02x) was discarded"
27028 6EE2                        0D            .byte 0x0d,0x0a,0x00
27029                                           ! 3881 endasm
27030                                           !BCC_ENDASM
27031                                           ! 3882 static void biosfn_read_state_info (BX,ES,DI)
27032                                           ! Register BX used in function biosfn_write_string
27033                                           ! 3883 Bit16u BX;Bit16u ES;Bit16u DI;
27034                       00006EE5            _biosfn_read_state_info:
27035                                           !BCC_EOS
27036                                           !BCC_EOS
27037                                           !BCC_EOS
27038                                           ! 3884 {
27039                                           ! 3885  write_word(ES,DI+0x
27040 6EE5           55                         push	bp
27041 6EE6           89E5                       mov	bp,sp
27042                                           ! 3885 00,&static_functionality);
27043                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
27044 6EE8           BB                   0F61  mov	bx,#_static_functionality
27045 6EEB           53                         push	bx
27046                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
27047 6EEC           8B46         08            mov	ax,8[bp]
27048                                           ! Debug: list unsigned int = ax+0 (used reg = )
27049 6EEF           50                         push	ax
27050                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27051 6EF0           FF76         06            push	6[bp]
27052                                           ! Debug: func () void = write_word+0 (used reg = )
27053 6EF3           E8         0E64            call	_write_word
27054 6EF6           89EC                       mov	sp,bp
27055                                           !BCC_EOS
27056                                           ! 3886  write_word(ES,DI+0x02,0xC000);
27057                                           ! Debug: list unsigned int = const $C000 (used reg = )
27058 6EF8           B8                   C000  mov	ax,#$C000
27059 6EFB           50                         push	ax
27060                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
27061 6EFC           8B46         08            mov	ax,8[bp]
27062                                           ! Debug: list unsigned int = ax+2 (used reg = )
27063 6EFF           40                         inc	ax
27064 6F00           40                         inc	ax
27065 6F01           50                         push	ax
27066                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27067 6F02           FF76         06            push	6[bp]
27068                                           ! Debug: func () void = write_word+0 (used reg = )
27069 6F05           E8         0E52            call	_write_word
27070 6F08           89EC                       mov	sp,bp
27071                                           !BCC_EOS
27072                                           ! 3887  memcpyb(ES,DI+0x04,0x40,0x49,30);
27073                                           ! Debug: list int = const $1E (used reg = )
27074 6F0A           B8                   001E  mov	ax,*$1E
27075 6F0D           50                         push	ax
27076                                           ! Debug: list int = const $49 (used reg = )
27077 6F0E           B8                   0049  mov	ax,*$49
27078 6F11           50                         push	ax
27079                                           ! Debug: list int = const $40 (used reg = )
27080 6F12           B8                   0040  mov	ax,*$40
27081 6F15           50                         push	ax
27082                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
27083 6F16           8B46         08            mov	ax,8[bp]
27084                                           ! Debug: list unsigned int = ax+4 (used reg = )
27085 6F19           05                   0004  add	ax,*4
27086 6F1C           50                         push	ax
27087                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27088 6F1D           FF76         06            push	6[bp]
27089                                           ! Debug: func () void = memcpyb+0 (used reg = )
27090 6F20           E8         0D99            call	_memcpyb
27091 6F23           89EC                       mov	sp,bp
27092                                           !BCC_EOS
27093                                           ! 3888  memcpyb(ES,DI+0x22,0x40,0x84,3);
27094                                           ! Debug: list int = const 3 (used reg = )
27095 6F25           B8                   0003  mov	ax,*3
27096 6F28           50                         push	ax
27097                                           ! Debug: list int = const $84 (used reg = )
27098 6F29           B8                   0084  mov	ax,#$84
27099 6F2C           50                         push	ax
27100                                           ! Debug: list int = const $40 (used reg = )
27101 6F2D           B8                   0040  mov	ax,*$40
27102 6F30           50                         push	ax
27103                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
27104 6F31           8B46         08            mov	ax,8[bp]
27105                                           ! Debug: list unsigned int = ax+$22 (used reg = )
27106 6F34           05                   0022  add	ax,*$22
27107 6F37           50                         push	ax
27108                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27109 6F38           FF76         06            push	6[bp]
27110                                           ! Debug: func () void = memcpyb+0 (used reg = )
27111 6F3B           E8         0D7E            call	_memcpyb
27112 6F3E           89EC                       mov	sp,bp
27113                                           !BCC_EOS
27114                                           ! 3889  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
27115                                           ! Debug: list int = const $8A (used reg = )
27116 6F40           B8                   008A  mov	ax,#$8A
27117 6F43           50                         push	ax
27118                                           ! Debug: list int = const $40 (used reg = )
27119 6F44           B8                   0040  mov	ax,*$40
27120 6F47           50                         push	ax
27121                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27122 6F48           E8         0DD1            call	_read_byte
27123 6F4B           89EC                       mov	sp,bp
27124                                           ! Debug: list unsigned char = al+0 (used reg = )
27125 6F4D           30E4                       xor	ah,ah
27126 6F4F           50                         push	ax
27127                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
27128 6F50           8B46         08            mov	ax,8[bp]
27129                                           ! Debug: list unsigned int = ax+$25 (used reg = )
27130 6F53           05                   0025  add	ax,*$25
27131 6F56           50                         push	ax
27132                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27133 6F57           FF76         06            push	6[bp]
27134                                           ! Debug: func () void = write_byte+0 (used reg = )
27135 6F5A           E8         0DE5            call	_write_byte
27136 6F5D           89EC                       mov	sp,bp
27137                                           !BCC_EOS
27138                                           ! 3890  write_byte(ES,DI+0x26,0);
27139                                           ! Debug: list int = const 0 (used reg = )
27140 6F5F           31C0                       xor	ax,ax
27141 6F61           50                         push	ax
27142                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
27143 6F62           8B46         08            mov	ax,8[bp]
27144                                           ! Debug: list unsigned int = ax+$26 (used reg = )
27145 6F65           05                   0026  add	ax,*$26
27146 6F68           50                         push	ax
27147                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27148 6F69           FF76         06            push	6[bp]
27149                                           ! Debug: func () void = write_byte+0 (used reg = )
27150 6F6C           E8         0DD3            call	_write_byte
27151 6F6F           89EC                       mov	sp,bp
27152                                           !BCC_EOS
27153                                           ! 3891  write_byte(ES,DI+0x27,16);
27154                                           ! Debug: list int = const $10 (used reg = )
27155 6F71           B8                   0010  mov	ax,*$10
27156 6F74           50                         push	ax
27157                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
27158 6F75           8B46         08            mov	ax,8[bp]
27159                                           ! Debug: list unsigned int = ax+$27 (used reg = )
27160 6F78           05                   0027  add	ax,*$27
27161 6F7B           50                         push	ax
27162                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27163 6F7C           FF76         06            push	6[bp]
27164                                           ! Debug: func () void = write_byte+0 (used reg = )
27165 6F7F           E8         0DC0            call	_write_byte
27166 6F82           89EC                       mov	sp,bp
27167                                           !BCC_EOS
27168                                           ! 3892  write_byte(ES,DI+0x28,0);
27169                                           ! Debug: list int = const 0 (used reg = )
27170 6F84           31C0                       xor	ax,ax
27171 6F86           50                         push	ax
27172                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
27173 6F87           8B46         08            mov	ax,8[bp]
27174                                           ! Debug: list unsigned int = ax+$28 (used reg = )
27175 6F8A           05                   0028  add	ax,*$28
27176 6F8D           50                         push	ax
27177                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27178 6F8E           FF76         06            push	6[bp]
27179                                           ! Debug: func () void = write_byte+0 (used reg = )
27180 6F91           E8         0DAE            call	_write_byte
27181 6F94           89EC                       mov	sp,bp
27182                                           !BCC_EOS
27183                                           ! 3893  write_byte(ES,DI+0x29,8);
27184                                           ! Debug: list int = const 8 (used reg = )
27185 6F96           B8                   0008  mov	ax,*8
27186 6F99           50                         push	ax
27187                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
27188 6F9A           8B46         08            mov	ax,8[bp]
27189                                           ! Debug: list unsigned int = ax+$29 (used reg = )
27190 6F9D           05                   0029  add	ax,*$29
27191 6FA0           50                         push	ax
27192                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27193 6FA1           FF76         06            push	6[bp]
27194                                           ! Debug: func () void = write_byte+0 (used reg = )
27195 6FA4           E8         0D9B            call	_write_byte
27196 6FA7           89EC                       mov	sp,bp
27197                                           !BCC_EOS
27198                                           ! 3894  write_byte(ES,DI+0x2a,2);
27199                                           ! Debug: list int = const 2 (used reg = )
27200 6FA9           B8                   0002  mov	ax,*2
27201 6FAC           50                         push	ax
27202                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27203 6FAD           8B46         08            mov	ax,8[bp]
27204                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27205 6FB0           05                   002A  add	ax,*$2A
27206 6FB3           50                         push	ax
27207                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27208 6FB4           FF76         06            push	6[bp]
27209                                           ! Debug: func () void = write_byte+0 (used reg = )
27210 6FB7           E8         0D88            call	_write_byte
27211 6FBA           89EC                       mov	sp,bp
27212                                           !BCC_EOS
27213                                           ! 3895  write_byte(ES,DI+0x2b,0);
27214                                           ! Debug: list int = const 0 (used reg = )
27215 6FBC           31C0                       xor	ax,ax
27216 6FBE           50                         push	ax
27217                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27218 6FBF           8B46         08            mov	ax,8[bp]
27219                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27220 6FC2           05                   002B  add	ax,*$2B
27221 6FC5           50                         push	ax
27222                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27223 6FC6           FF76         06            push	6[bp]
27224                                           ! Debug: func () void = write_byte+0 (used reg = )
27225 6FC9           E8         0D76            call	_write_byte
27226 6FCC           89EC                       mov	sp,bp
27227                                           !BCC_EOS
27228                                           ! 3896  write_byte(ES,DI+0x2c,0);
27229                                           ! Debug: list int = const 0 (used reg = )
27230 6FCE           31C0                       xor	ax,ax
27231 6FD0           50                         push	ax
27232                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27233 6FD1           8B46         08            mov	ax,8[bp]
27234                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27235 6FD4           05                   002C  add	ax,*$2C
27236 6FD7           50                         push	ax
27237                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27238 6FD8           FF76         06            push	6[bp]
27239                                           ! Debug: func () void = write_byte+0 (used reg = )
27240 6FDB           E8         0D64            call	_write_byte
27241 6FDE           89EC                       mov	sp,bp
27242                                           !BCC_EOS
27243                                           ! 3897  write_byte(ES,DI+0x31,3);
27244                                           ! Debug: list int = const 3 (used reg = )
27245 6FE0           B8                   0003  mov	ax,*3
27246 6FE3           50                         push	ax
27247                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27248 6FE4           8B46         08            mov	ax,8[bp]
27249                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27250 6FE7           05                   0031  add	ax,*$31
27251 6FEA           50                         push	ax
27252                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27253 6FEB           FF76         06            push	6[bp]
27254                                           ! Debug: func () void = write_byte+0 (used reg = )
27255 6FEE           E8         0D51            call	_write_byte
27256 6FF1           89EC                       mov	sp,bp
27257                                           !BCC_EOS
27258                                           ! 3898  write_byte(ES,DI+0x32,0);
27259                                           ! Debug: list int = const 0 (used reg = )
27260 6FF3           31C0                       xor	ax,ax
27261 6FF5           50                         push	ax
27262                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27263 6FF6           8B46         08            mov	ax,8[bp]
27264                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27265 6FF9           05                   0032  add	ax,*$32
27266 6FFC           50                         push	ax
27267                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27268 6FFD           FF76         06            push	6[bp]
27269                                           ! Debug: func () void = write_byte+0 (used reg = )
27270 7000           E8         0D3F            call	_write_byte
27271 7003           89EC                       mov	sp,bp
27272                                           !BCC_EOS
27273                                           ! 3899  memsetb(ES,DI+0x33,0,13);
27274                                           ! Debug: list int = const $D (used reg = )
27275 7005           B8                   000D  mov	ax,*$D
27276 7008           50                         push	ax
27277                                           ! Debug: list int = const 0 (used reg = )
27278 7009           31C0                       xor	ax,ax
27279 700B           50                         push	ax
27280                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27281 700C           8B46         08            mov	ax,8[bp]
27282                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27283 700F           05                   0033  add	ax,*$33
27284 7012           50                         push	ax
27285                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27286 7013           FF76         06            push	6[bp]
27287                                           ! Debug: func () void = memsetb+0 (used reg = )
27288 7016           E8         0C59            call	_memsetb
27289 7019           89EC                       mov	sp,bp
27290                                           !BCC_EOS
27291                                           ! 3900 }
27292 701B           5D                         pop	bp
27293 701C           C3                         ret
27294                                           ! 3901 static Bit16u biosfn_read_video_state_size2 (CX)
27295                                           ! Register BX used in function biosfn_read_state_info
27296                                           ! 3902      Bit16u CX;
27297                       0000701D            _biosfn_read_video_state_size2:
27298                                           !BCC_EOS
27299                                           ! 3903 {
27300                                           ! 3904     Bit16u size;
27301                                           !BCC_EOS
27302                                           ! 3905     size = 0;
27303 701D           55                         push	bp
27304 701E           89E5                       mov	bp,sp
27305 7020           4C                         dec	sp
27306 7021           4C                         dec	sp
27307                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27308 7022           31C0                       xor	ax,ax
27309 7024           8946         FE            mov	-2[bp],ax
27310                                           !BCC_EOS
27311                                           ! 3906     if (CX & 1) {
27312                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27313 7027           8A46         04            mov	al,4[bp]
27314 702A           24                     01  and	al,*1
27315 702C           84C0                       test	al,al
27316 702E           74           09            je  	.256
27317                       00007030            .257:
27318                                           ! 3907         size += 0x46;
27319                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27320 7030           8B46         FE            mov	ax,-2[bp]
27321 7033           05                   0046  add	ax,*$46
27322 7036           8946         FE            mov	-2[bp],ax
27323                                           !BCC_EOS
27324                                           ! 3908     }
27325                                           ! 3909     if (CX & 2) {
27326                       00007039            .256:
27327                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27328 7039           8A46         04            mov	al,4[bp]
27329 703C           24                     02  and	al,*2
27330 703E           84C0                       test	al,al
27331 7040           74           09            je  	.258
27332                       00007042            .259:
27333                                           ! 3910         size += (5 + 8 + 5) * 2 + 6;
27334                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27335 7042           8B46         FE            mov	ax,-2[bp]
27336 7045           05                   002A  add	ax,*$2A
27337 7048           8946         FE            mov	-2[bp],ax
27338                                           !BCC_EOS
27339                                           ! 3911     }
27340                                           ! 3912     if (CX & 4) {
27341                       0000704B            .258:
27342                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27343 704B           8A46         04            mov	al,4[bp]
27344 704E           24                     04  and	al,*4
27345 7050           84C0                       test	al,al
27346 7052           74           09            je  	.25A
27347                       00007054            .25B:
27348                                           ! 3913         size += 3 + 256 * 3 + 1;
27349                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27350 7054           8B46         FE            mov	ax,-2[bp]
27351 7057           05                   0304  add	ax,#$304
27352 705A           8946         FE            mov	-2[bp],ax
27353                                           !BCC_EOS
27354                                           ! 3914 }
27355                                           ! 3915     return size;
27356                       0000705D            .25A:
27357 705D           8B46         FE            mov	ax,-2[bp]
27358 7060           89EC                       mov	sp,bp
27359 7062           5D                         pop	bp
27360 7063           C3                         ret
27361                                           !BCC_EOS
27362                                           ! 3916 }
27363                                           ! 3917 static void biosfn_read_video_state_size (CX, BX)
27364                                           ! 3918      Bit16u CX; Bit16u *BX;
27365                       00007064            _biosfn_read_video_state_size:
27366                                           !BCC_EOS
27367                                           !BCC_EOS
27368                                           ! 3919 {
27369                                           ! 3920     Bit16u ss=get_SS();
27370 7064           55                         push	bp
27371 7065           89E5                       mov	bp,sp
27372 7067           4C                         dec	sp
27373 7068           4C                         dec	sp
27374                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27375 7069           E8         0D3C            call	_get_SS
27376                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27377 706C           8946         FE            mov	-2[bp],ax
27378                                           !BCC_EOS
27379                                           ! 3921     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27380                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27381 706F           FF76         04            push	4[bp]
27382                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27383 7072           E8         FFA8            call	_biosfn_read_video_state_size2
27384 7075           44                         inc	sp
27385 7076           44                         inc	sp
27386                                           ! Debug: list unsigned short = ax+0 (used reg = )
27387 7077           50                         push	ax
27388                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27389 7078           FF76         06            push	6[bp]
27390                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27391 707B           FF76         FE            push	-2[bp]
27392                                           ! Debug: func () void = write_word+0 (used reg = )
27393 707E           E8         0CD9            call	_write_word
27394 7081           83C4                   06  add	sp,*6
27395                                           !BCC_EOS
27396                                           ! 3922 }
27397 7084           89EC                       mov	sp,bp
27398 7086           5D                         pop	bp
27399 7087           C3                         ret
27400                                           ! 3923 static Bit16u biosfn_save_video_state (CX,ES,BX)
27401                                           ! 3924      Bit16u CX;Bit16u ES;Bit16u BX;
27402                       00007088            _biosfn_save_video_state:
27403                                           !BCC_EOS
27404                                           !BCC_EOS
27405                                           !BCC_EOS
27406                                           ! 3925 {
27407                                           ! 3926     Bit16u i, v, crtc_addr, ar_index;
27408                                           !BCC_EOS
27409                                           ! 3927     crtc_addr = read_word(0x40, 0x63);
27410 7088           55                         push	bp
27411 7089           89E5                       mov	bp,sp
27412 708B           83C4                   F8  add	sp,*-8
27413                                           ! Debug: list int = const $63 (used reg = )
27414 708E           B8                   0063  mov	ax,*$63
27415 7091           50                         push	ax
27416                                           ! Debug: list int = const $40 (used reg = )
27417 7092           B8                   0040  mov	ax,*$40
27418 7095           50                         push	ax
27419                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27420 7096           E8         0C96            call	_read_word
27421 7099           83C4                   04  add	sp,*4
27422                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27423 709C           8946         FA            mov	-6[bp],ax
27424                                           !BCC_EOS
27425                                           ! 3928     if (CX & 1) {
27426                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27427 709F           8A46         04            mov	al,4[bp]
27428 70A2           24                     01  and	al,*1
27429 70A4           84C0                       test	al,al
27430 70A6         0F84         0266            beq 	.25C
27431                       000070AA            .25D:
27432                                           ! 3929         write_byte(ES, BX, inb(0x3c4)); BX++;
27433                                           ! Debug: list int = const $3C4 (used reg = )
27434 70AA           B8                   03C4  mov	ax,#$3C4
27435 70AD           50                         push	ax
27436                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27437 70AE           E8         0CC1            call	_inb
27438 70B1           44                         inc	sp
27439 70B2           44                         inc	sp
27440                                           ! Debug: list unsigned char = al+0 (used reg = )
27441 70B3           30E4                       xor	ah,ah
27442 70B5           50                         push	ax
27443                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27444 70B6           FF76         08            push	8[bp]
27445                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27446 70B9           FF76         06            push	6[bp]
27447                                           ! Debug: func () void = write_byte+0 (used reg = )
27448 70BC           E8         0C83            call	_write_byte
27449 70BF           83C4                   06  add	sp,*6
27450                                           !BCC_EOS
27451                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27452 70C2           8B46         08            mov	ax,8[bp]
27453 70C5           40                         inc	ax
27454 70C6           8946         08            mov	8[bp],ax
27455                                           !BCC_EOS
27456                                           ! 3930         write_byte(ES, BX, inb(crtc_addr)); BX++;
27457                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27458 70C9           FF76         FA            push	-6[bp]
27459                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27460 70CC           E8         0CA3            call	_inb
27461 70CF           44                         inc	sp
27462 70D0           44                         inc	sp
27463                                           ! Debug: list unsigned char = al+0 (used reg = )
27464 70D1           30E4                       xor	ah,ah
27465 70D3           50                         push	ax
27466                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27467 70D4           FF76         08            push	8[bp]
27468                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27469 70D7           FF76         06            push	6[bp]
27470                                           ! Debug: func () void = write_byte+0 (used reg = )
27471 70DA           E8         0C65            call	_write_byte
27472 70DD           83C4                   06  add	sp,*6
27473                                           !BCC_EOS
27474                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27475 70E0           8B46         08            mov	ax,8[bp]
27476 70E3           40                         inc	ax
27477 70E4           8946         08            mov	8[bp],ax
27478                                           !BCC_EOS
27479                                           ! 3931         write_byte(ES, BX, inb(0x3ce)); BX++;
27480                                           ! Debug: list int = const $3CE (used reg = )
27481 70E7           B8                   03CE  mov	ax,#$3CE
27482 70EA           50                         push	ax
27483                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27484 70EB           E8         0C84            call	_inb
27485 70EE           44                         inc	sp
27486 70EF           44                         inc	sp
27487                                           ! Debug: list unsigned char = al+0 (used reg = )
27488 70F0           30E4                       xor	ah,ah
27489 70F2           50                         push	ax
27490                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27491 70F3           FF76         08            push	8[bp]
27492                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27493 70F6           FF76         06            push	6[bp]
27494                                           ! Debug: func () void = write_byte+0 (used reg = )
27495 70F9           E8         0C46            call	_write_byte
27496 70FC           83C4                   06  add	sp,*6
27497                                           !BCC_EOS
27498                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27499 70FF           8B46         08            mov	ax,8[bp]
27500 7102           40                         inc	ax
27501 7103           8946         08            mov	8[bp],ax
27502                                           !BCC_EOS
27503                                           ! 3932         inb(0x3da);
27504                                           ! Debug: list int = const $3DA (used reg = )
27505 7106           B8                   03DA  mov	ax,#$3DA
27506 7109           50                         push	ax
27507                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27508 710A           E8         0C65            call	_inb
27509 710D           44                         inc	sp
27510 710E           44                         inc	sp
27511                                           !BCC_EOS
27512                                           ! 3933         ar_index = inb(0x3c0);
27513                                           ! Debug: list int = const $3C0 (used reg = )
27514 710F           B8                   03C0  mov	ax,#$3C0
27515 7112           50                         push	ax
27516                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27517 7113           E8         0C5C            call	_inb
27518 7116           44                         inc	sp
27519 7117           44                         inc	sp
27520                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27521 7118           30E4                       xor	ah,ah
27522 711A           8946         F8            mov	-8[bp],ax
27523                                           !BCC_EOS
27524                                           ! 3934         write_byte(ES, BX, ar_index); BX++;
27525                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27526 711D           FF76         F8            push	-8[bp]
27527                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27528 7120           FF76         08            push	8[bp]
27529                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27530 7123           FF76         06            push	6[bp]
27531                                           ! Debug: func () void = write_byte+0 (used reg = )
27532 7126           E8         0C19            call	_write_byte
27533 7129           83C4                   06  add	sp,*6
27534                                           !BCC_EOS
27535                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27536 712C           8B46         08            mov	ax,8[bp]
27537 712F           40                         inc	ax
27538 7130           8946         08            mov	8[bp],ax
27539                                           !BCC_EOS
27540                                           ! 3935         write_byte(ES, BX, inb(0x3ca)); BX++;
27541                                           ! Debug: list int = const $3CA (used reg = )
27542 7133           B8                   03CA  mov	ax,#$3CA
27543 7136           50                         push	ax
27544                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27545 7137           E8         0C38            call	_inb
27546 713A           44                         inc	sp
27547 713B           44                         inc	sp
27548                                           ! Debug: list unsigned char = al+0 (used reg = )
27549 713C           30E4                       xor	ah,ah
27550 713E           50                         push	ax
27551                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27552 713F           FF76         08            push	8[bp]
27553                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27554 7142           FF76         06            push	6[bp]
27555                                           ! Debug: func () void = write_byte+0 (used reg = )
27556 7145           E8         0BFA            call	_write_byte
27557 7148           83C4                   06  add	sp,*6
27558                                           !BCC_EOS
27559                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27560 714B           8B46         08            mov	ax,8[bp]
27561 714E           40                         inc	ax
27562 714F           8946         08            mov	8[bp],ax
27563                                           !BCC_EOS
27564                                           ! 3936         for(i=1;i<=4;i++){
27565                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27566 7152           B8                   0001  mov	ax,*1
27567 7155           8946         FE            mov	-2[bp],ax
27568                                           !BCC_EOS
27569                                           !BCC_EOS
27570 7158           EB           33            jmp .260
27571                       0000715A            .261:
27572                                           ! 3937             outb(0x3c4, i);
27573                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27574 715A           FF76         FE            push	-2[bp]
27575                                           ! Debug: list int = const $3C4 (used reg = )
27576 715D           B8                   03C4  mov	ax,#$3C4
27577 7160           50                         push	ax
27578                                           ! Debug: func () void = outb+0 (used reg = )
27579 7161           E8         0C24            call	_outb
27580 7164           83C4                   04  add	sp,*4
27581                                           !BCC_EOS
27582                                           ! 3938             write_byte(ES, BX, inb(0x3c5)); BX++;
27583                                           ! Debug: list int = const $3C5 (used reg = )
27584 7167           B8                   03C5  mov	ax,#$3C5
27585 716A           50                         push	ax
27586                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27587 716B           E8         0C04            call	_inb
27588 716E           44                         inc	sp
27589 716F           44                         inc	sp
27590                                           ! Debug: list unsigned char = al+0 (used reg = )
27591 7170           30E4                       xor	ah,ah
27592 7172           50                         push	ax
27593                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27594 7173           FF76         08            push	8[bp]
27595                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27596 7176           FF76         06            push	6[bp]
27597                                           ! Debug: func () void = write_byte+0 (used reg = )
27598 7179           E8         0BC6            call	_write_byte
27599 717C           83C4                   06  add	sp,*6
27600                                           !BCC_EOS
27601                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27602 717F           8B46         08            mov	ax,8[bp]
27603 7182           40                         inc	ax
27604 7183           8946         08            mov	8[bp],ax
27605                                           !BCC_EOS
27606                                           ! 3939         }
27607                                           ! 3940         outb(0x3c4, 0);
27608                       00007186            .25F:
27609                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27610 7186           8B46         FE            mov	ax,-2[bp]
27611 7189           40                         inc	ax
27612 718A           8946         FE            mov	-2[bp],ax
27613                       0000718D            .260:
27614                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27615 718D           8B46         FE            mov	ax,-2[bp]
27616 7190           3D                   0004  cmp	ax,*4
27617 7193           76           C5            jbe	.261
27618                       00007195            .262:
27619                       00007195            .25E:
27620                                           ! Debug: list int = const 0 (used reg = )
27621 7195           31C0                       xor	ax,ax
27622 7197           50                         push	ax
27623                                           ! Debug: list int = const $3C4 (used reg = )
27624 7198           B8                   03C4  mov	ax,#$3C4
27625 719B           50                         push	ax
27626                                           ! Debug: func () void = outb+0 (used reg = )
27627 719C           E8         0BE9            call	_outb
27628 719F           83C4                   04  add	sp,*4
27629                                           !BCC_EOS
27630                                           ! 3941         write_byte(ES, BX, inb(0x3c5)); BX++;
27631                                           ! Debug: list int = const $3C5 (used reg = )
27632 71A2           B8                   03C5  mov	ax,#$3C5
27633 71A5           50                         push	ax
27634                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27635 71A6           E8         0BC9            call	_inb
27636 71A9           44                         inc	sp
27637 71AA           44                         inc	sp
27638                                           ! Debug: list unsigned char = al+0 (used reg = )
27639 71AB           30E4                       xor	ah,ah
27640 71AD           50                         push	ax
27641                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27642 71AE           FF76         08            push	8[bp]
27643                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27644 71B1           FF76         06            push	6[bp]
27645                                           ! Debug: func () void = write_byte+0 (used reg = )
27646 71B4           E8         0B8B            call	_write_byte
27647 71B7           83C4                   06  add	sp,*6
27648                                           !BCC_EOS
27649                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27650 71BA           8B46         08            mov	ax,8[bp]
27651 71BD           40                         inc	ax
27652 71BE           8946         08            mov	8[bp],ax
27653                                           !BCC_EOS
27654                                           ! 3942         for(i=0;i<=0x18;i++) {
27655                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27656 71C1           31C0                       xor	ax,ax
27657 71C3           8946         FE            mov	-2[bp],ax
27658                                           !BCC_EOS
27659                                           !BCC_EOS
27660 71C6           EB           33            jmp .265
27661                       000071C8            .266:
27662                                           ! 3943             outb(crtc_addr,i);
27663                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27664 71C8           FF76         FE            push	-2[bp]
27665                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27666 71CB           FF76         FA            push	-6[bp]
27667                                           ! Debug: func () void = outb+0 (used reg = )
27668 71CE           E8         0BB7            call	_outb
27669 71D1           83C4                   04  add	sp,*4
27670                                           !BCC_EOS
27671                                           ! 3944             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27672                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27673 71D4           8B46         FA            mov	ax,-6[bp]
27674                                           ! Debug: list unsigned int = ax+1 (used reg = )
27675 71D7           40                         inc	ax
27676 71D8           50                         push	ax
27677                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27678 71D9           E8         0B96            call	_inb
27679 71DC           44                         inc	sp
27680 71DD           44                         inc	sp
27681                                           ! Debug: list unsigned char = al+0 (used reg = )
27682 71DE           30E4                       xor	ah,ah
27683 71E0           50                         push	ax
27684                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27685 71E1           FF76         08            push	8[bp]
27686                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27687 71E4           FF76         06            push	6[bp]
27688                                           ! Debug: func () void = write_byte+0 (used reg = )
27689 71E7           E8         0B58            call	_write_byte
27690 71EA           83C4                   06  add	sp,*6
27691                                           !BCC_EOS
27692                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27693 71ED           8B46         08            mov	ax,8[bp]
27694 71F0           40                         inc	ax
27695 71F1           8946         08            mov	8[bp],ax
27696                                           !BCC_EOS
27697                                           ! 3945         }
27698                                           ! 3946         for(i=0;i<=0x13;i++) {
27699                       000071F4            .264:
27700                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27701 71F4           8B46         FE            mov	ax,-2[bp]
27702 71F7           40                         inc	ax
27703 71F8           8946         FE            mov	-2[bp],ax
27704                       000071FB            .265:
27705                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27706 71FB           8B46         FE            mov	ax,-2[bp]
27707 71FE           3D                   0018  cmp	ax,*$18
27708 7201           76           C5            jbe	.266
27709                       00007203            .267:
27710                       00007203            .263:
27711                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27712 7203           31C0                       xor	ax,ax
27713 7205           8946         FE            mov	-2[bp],ax
27714                                           !BCC_EOS
27715                                           !BCC_EOS
27716 7208           EB           44            jmp .26A
27717                       0000720A            .26B:
27718                                           ! 3947             inb(0x3da);
27719                                           ! Debug: list int = const $3DA (used reg = )
27720 720A           B8                   03DA  mov	ax,#$3DA
27721 720D           50                         push	ax
27722                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27723 720E           E8         0B61            call	_inb
27724 7211           44                         inc	sp
27725 7212           44                         inc	sp
27726                                           !BCC_EOS
27727                                           ! 3948             outb(0x3c0, i | (ar_index & 0x20));
27728                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27729 7213           8A46         F8            mov	al,-8[bp]
27730 7216           24                     20  and	al,*$20
27731                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27732                                           ! Debug: expression subtree swapping
27733 7218           30E4                       xor	ah,ah
27734 721A           0B46         FE            or	ax,-2[bp]
27735                                           ! Debug: list unsigned int = ax+0 (used reg = )
27736 721D           50                         push	ax
27737                                           ! Debug: list int = const $3C0 (used reg = )
27738 721E           B8                   03C0  mov	ax,#$3C0
27739 7221           50                         push	ax
27740                                           ! Debug: func () void = outb+0 (used reg = )
27741 7222           E8         0B63            call	_outb
27742 7225           83C4                   04  add	sp,*4
27743                                           !BCC_EOS
27744                                           ! 3949             write_byte(ES, BX, inb(0x3c1)); BX++;
27745                                           ! Debug: list int = const $3C1 (used reg = )
27746 7228           B8                   03C1  mov	ax,#$3C1
27747 722B           50                         push	ax
27748                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27749 722C           E8         0B43            call	_inb
27750 722F           44                         inc	sp
27751 7230           44                         inc	sp
27752                                           ! Debug: list unsigned char = al+0 (used reg = )
27753 7231           30E4                       xor	ah,ah
27754 7233           50                         push	ax
27755                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27756 7234           FF76         08            push	8[bp]
27757                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27758 7237           FF76         06            push	6[bp]
27759                                           ! Debug: func () void = write_byte+0 (used reg = )
27760 723A           E8         0B05            call	_write_byte
27761 723D           83C4                   06  add	sp,*6
27762                                           !BCC_EOS
27763                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27764 7240           8B46         08            mov	ax,8[bp]
27765 7243           40                         inc	ax
27766 7244           8946         08            mov	8[bp],ax
27767                                           !BCC_EOS
27768                                           ! 3950         }
27769                                           ! 3951         inb(0x3da);
27770                       00007247            .269:
27771                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27772 7247           8B46         FE            mov	ax,-2[bp]
27773 724A           40                         inc	ax
27774 724B           8946         FE            mov	-2[bp],ax
27775                       0000724E            .26A:
27776                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27777 724E           8B46         FE            mov	ax,-2[bp]
27778 7251           3D                   0013  cmp	ax,*$13
27779 7254           76           B4            jbe	.26B
27780                       00007256            .26C:
27781                       00007256            .268:
27782                                           ! Debug: list int = const $3DA (used reg = )
27783 7256           B8                   03DA  mov	ax,#$3DA
27784 7259           50                         push	ax
27785                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27786 725A           E8         0B15            call	_inb
27787 725D           44                         inc	sp
27788 725E           44                         inc	sp
27789                                           !BCC_EOS
27790                                           ! 3952         for(i=0;i<=8;i++) {
27791                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27792 725F           31C0                       xor	ax,ax
27793 7261           8946         FE            mov	-2[bp],ax
27794                                           !BCC_EOS
27795                                           !BCC_EOS
27796 7264           EB           33            jmp .26F
27797                       00007266            .270:
27798                                           ! 3953             outb(0x3ce,i);
27799                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27800 7266           FF76         FE            push	-2[bp]
27801                                           ! Debug: list int = const $3CE (used reg = )
27802 7269           B8                   03CE  mov	ax,#$3CE
27803 726C           50                         push	ax
27804                                           ! Debug: func () void = outb+0 (used reg = )
27805 726D           E8         0B18            call	_outb
27806 7270           83C4                   04  add	sp,*4
27807                                           !BCC_EOS
27808                                           ! 3954             write_byte(ES, BX, inb(0x3cf)); BX++;
27809                                           ! Debug: list int = const $3CF (used reg = )
27810 7273           B8                   03CF  mov	ax,#$3CF
27811 7276           50                         push	ax
27812                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27813 7277           E8         0AF8            call	_inb
27814 727A           44                         inc	sp
27815 727B           44                         inc	sp
27816                                           ! Debug: list unsigned char = al+0 (used reg = )
27817 727C           30E4                       xor	ah,ah
27818 727E           50                         push	ax
27819                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27820 727F           FF76         08            push	8[bp]
27821                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27822 7282           FF76         06            push	6[bp]
27823                                           ! Debug: func () void = write_byte+0 (used reg = )
27824 7285           E8         0ABA            call	_write_byte
27825 7288           83C4                   06  add	sp,*6
27826                                           !BCC_EOS
27827                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27828 728B           8B46         08            mov	ax,8[bp]
27829 728E           40                         inc	ax
27830 728F           8946         08            mov	8[bp],ax
27831                                           !BCC_EOS
27832                                           ! 3955         }
27833                                           ! 3956         write_word(ES, BX, crtc_addr); BX+= 2;
27834                       00007292            .26E:
27835                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27836 7292           8B46         FE            mov	ax,-2[bp]
27837 7295           40                         inc	ax
27838 7296           8946         FE            mov	-2[bp],ax
27839                       00007299            .26F:
27840                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27841 7299           8B46         FE            mov	ax,-2[bp]
27842 729C           3D                   0008  cmp	ax,*8
27843 729F           76           C5            jbe	.270
27844                       000072A1            .271:
27845                       000072A1            .26D:
27846                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27847 72A1           FF76         FA            push	-6[bp]
27848                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27849 72A4           FF76         08            push	8[bp]
27850                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27851 72A7           FF76         06            push	6[bp]
27852                                           ! Debug: func () void = write_word+0 (used reg = )
27853 72AA           E8         0AAD            call	_write_word
27854 72AD           83C4                   06  add	sp,*6
27855                                           !BCC_EOS
27856                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27857 72B0           8B46         08            mov	ax,8[bp]
27858 72B3           40                         inc	ax
27859 72B4           40                         inc	ax
27860 72B5           8946         08            mov	8[bp],ax
27861                                           !BCC_EOS
27862                                           ! 3957         write_byte(ES, BX, 0); BX++;
27863                                           ! Debug: list int = const 0 (used reg = )
27864 72B8           31C0                       xor	ax,ax
27865 72BA           50                         push	ax
27866                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27867 72BB           FF76         08            push	8[bp]
27868                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27869 72BE           FF76         06            push	6[bp]
27870                                           ! Debug: func () void = write_byte+0 (used reg = )
27871 72C1           E8         0A7E            call	_write_byte
27872 72C4           83C4                   06  add	sp,*6
27873                                           !BCC_EOS
27874                                           ! 3957 
27875                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27876 72C7           8B46         08            mov	ax,8[bp]
27877 72CA           40                         inc	ax
27878 72CB           8946         08            mov	8[bp],ax
27879                                           !BCC_EOS
27880                                           ! 3958         write_byte(ES, BX, 0); BX++;
27881                                           ! Debug: list int = const 0 (used reg = )
27882 72CE           31C0                       xor	ax,ax
27883 72D0           50                         push	ax
27884                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27885 72D1           FF76         08            push	8[bp]
27886                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27887 72D4           FF76         06            push	6[bp]
27888                                           ! Debug: func () void = write_byte+0 (used reg = )
27889 72D7           E8         0A68            call	_write_byte
27890 72DA           83C4                   06  add	sp,*6
27891                                           !BCC_EOS
27892                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27893 72DD           8B46         08            mov	ax,8[bp]
27894 72E0           40                         inc	ax
27895 72E1           8946         08            mov	8[bp],ax
27896                                           !BCC_EOS
27897                                           ! 3959         write_byte(ES, BX, 0); BX++;
27898                                           ! Debug: list int = const 0 (used reg = )
27899 72E4           31C0                       xor	ax,ax
27900 72E6           50                         push	ax
27901                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27902 72E7           FF76         08            push	8[bp]
27903                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27904 72EA           FF76         06            push	6[bp]
27905                                           ! Debug: func () void = write_byte+0 (used reg = )
27906 72ED           E8         0A52            call	_write_byte
27907 72F0           83C4                   06  add	sp,*6
27908                                           !BCC_EOS
27909                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27910 72F3           8B46         08            mov	ax,8[bp]
27911 72F6           40                         inc	ax
27912 72F7           8946         08            mov	8[bp],ax
27913                                           !BCC_EOS
27914                                           ! 3960         write_byte(ES, BX, 0); BX++;
27915                                           ! Debug: list int = const 0 (used reg = )
27916 72FA           31C0                       xor	ax,ax
27917 72FC           50                         push	ax
27918                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27919 72FD           FF76         08            push	8[bp]
27920                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27921 7300           FF76         06            push	6[bp]
27922                                           ! Debug: func () void = write_byte+0 (used reg = )
27923 7303           E8         0A3C            call	_write_byte
27924 7306           83C4                   06  add	sp,*6
27925                                           !BCC_EOS
27926                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27927 7309           8B46         08            mov	ax,8[bp]
27928 730C           40                         inc	ax
27929 730D           8946         08            mov	8[bp],ax
27930                                           !BCC_EOS
27931                                           ! 3961     }
27932                                           ! 3962     if (CX & 2) {
27933                       00007310            .25C:
27934                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27935 7310           8A46         04            mov	al,4[bp]
27936 7313           24                     02  and	al,*2
27937 7315           84C0                       test	al,al
27938 7317         0F84         0270            beq 	.272
27939                       0000731B            .273:
27940                                           ! 3963         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27941                                           ! Debug: list int = const $49 (used reg = )
27942 731B           B8                   0049  mov	ax,*$49
27943 731E           50                         push	ax
27944                                           ! Debug: list int = const $40 (used reg = )
27945 731F           B8                   0040  mov	ax,*$40
27946 7322           50                         push	ax
27947                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27948 7323           E8         09F6            call	_read_byte
27949 7326           83C4                   04  add	sp,*4
27950                                           ! Debug: list unsigned char = al+0 (used reg = )
27951 7329           30E4                       xor	ah,ah
27952 732B           50                         push	ax
27953                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27954 732C           FF76         08            push	8[bp]
27955                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27956 732F           FF76         06            push	6[bp]
27957                                           ! Debug: func () void = write_byte+0 (used reg = )
27958 7332           E8         0A0D            call	_write_byte
27959 7335           83C4                   06  add	sp,*6
27960                                           !BCC_EOS
27961                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27962 7338           8B46         08            mov	ax,8[bp]
27963 733B           40                         inc	ax
27964 733C           8946         08            mov	8[bp],ax
27965                                           !BCC_EOS
27966                                           ! 3964         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27967                                           ! Debug: list int = const $4A (used reg = )
27968 733F           B8                   004A  mov	ax,*$4A
27969 7342           50                         push	ax
27970                                           ! Debug: list int = const $40 (used reg = )
27971 7343           B8                   0040  mov	ax,*$40
27972 7346           50                         push	ax
27973                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27974 7347           E8         09E5            call	_read_word
27975 734A           83C4                   04  add	sp,*4
27976                                           ! Debug: list unsigned short = ax+0 (used reg = )
27977 734D           50                         push	ax
27978                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27979 734E           FF76         08            push	8[bp]
27980                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27981 7351           FF76         06            push	6[bp]
27982                                           ! Debug: func () void = write_word+0 (used reg = )
27983 7354           E8         0A03            call	_write_word
27984 7357           83C4                   06  add	sp,*6
27985                                           !BCC_EOS
27986                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27987 735A           8B46         08            mov	ax,8[bp]
27988 735D           40                         inc	ax
27989 735E           40                         inc	ax
27990 735F           8946         08            mov	8[bp],ax
27991                                           !BCC_EOS
27992                                           ! 3965         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27993                                           ! Debug: list int = const $4C (used reg = )
27994 7362           B8                   004C  mov	ax,*$4C
27995 7365           50                         push	ax
27996                                           ! Debug: list int = const $40 (used reg = )
27997 7366           B8                   0040  mov	ax,*$40
27998 7369           50                         push	ax
27999                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28000 736A           E8         09C2            call	_read_word
28001 736D           83C4                   04  add	sp,*4
28002                                           ! Debug: list unsigned short = ax+0 (used reg = )
28003 7370           50                         push	ax
28004                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28005 7371           FF76         08            push	8[bp]
28006                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28007 7374           FF76         06            push	6[bp]
28008                                           ! Debug: func () void = write_word+0 (used reg = )
28009 7377           E8         09E0            call	_write_word
28010 737A           83C4                   06  add	sp,*6
28011                                           !BCC_EOS
28012                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28013 737D           8B46         08            mov	ax,8[bp]
28014 7380           40                         inc	ax
28015 7381           40                         inc	ax
28016 7382           8946         08            mov	8[bp],ax
28017                                           !BCC_EOS
28018                                           ! 3966         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
28019                                           ! Debug: list int = const $63 (used reg = )
28020 7385           B8                   0063  mov	ax,*$63
28021 7388           50                         push	ax
28022                                           ! Debug: list int = const $40 (used reg = )
28023 7389           B8                   0040  mov	ax,*$40
28024 738C           50                         push	ax
28025                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28026 738D           E8         099F            call	_read_word
28027 7390           83C4                   04  add	sp,*4
28028                                           ! Debug: list unsigned short = ax+0 (used reg = )
28029 7393           50                         push	ax
28030                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28031 7394           FF76         08            push	8[bp]
28032                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28033 7397           FF76         06            push	6[bp]
28034                                           ! Debug: func () void = write_word+0 (used reg = )
28035 739A           E8         09BD            call	_write_word
28036 739D           83C4                   06  add	sp,*6
28037                                           !BCC_EOS
28038                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28039 73A0           8B46         08            mov	ax,8[bp]
28040 73A3           40                         inc	ax
28041 73A4           40                         inc	ax
28042 73A5           8946         08            mov	8[bp],ax
28043                                           !BCC_EOS
28044                                           ! 3967         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
28045                                           ! Debug: list int = const $84 (used reg = )
28046 73A8           B8                   0084  mov	ax,#$84
28047 73AB           50                         push	ax
28048                                           ! Debug: list int = const $40 (used reg = )
28049 73AC           B8                   0040  mov	ax,*$40
28050 73AF           50                         push	ax
28051                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28052 73B0           E8         0969            call	_read_byte
28053 73B3           83C4                   04  add	sp,*4
28054                                           ! Debug: list unsigned char = al+0 (used reg = )
28055 73B6           30E4                       xor	ah,ah
28056 73B8           50                         push	ax
28057                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28058 73B9           FF76         08            push	8[bp]
28059                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28060 73BC           FF76         06            push	6[bp]
28061                                           ! Debug: func () void = write_byte+0 (used reg = )
28062 73BF           E8         0980            call	_write_byte
28063 73C2           83C4                   06  add	sp,*6
28064                                           !BCC_EOS
28065                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28066 73C5           8B46         08            mov	ax,8[bp]
28067 73C8           40                         inc	ax
28068 73C9           8946         08            mov	8[bp],ax
28069                                           !BCC_EOS
28070                                           ! 3968         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
28071                                           ! Debug: list int = const $85 (used reg = )
28072 73CC           B8                   0085  mov	ax,#$85
28073 73CF           50                         push	ax
28074                                           ! Debug: list int = const $40 (used reg = )
28075 73D0           B8                   0040  mov	ax,*$40
28076 73D3           50                         push	ax
28077                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28078 73D4           E8         0958            call	_read_word
28079 73D7           83C4                   04  add	sp,*4
28080                                           ! Debug: list unsigned short = ax+0 (used reg = )
28081 73DA           50                         push	ax
28082                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28083 73DB           FF76         08            push	8[bp]
28084                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28085 73DE           FF76         06            push	6[bp]
28086                                           ! Debug: func () void = write_word+0 (used reg = )
28087 73E1           E8         0976            call	_write_word
28088 73E4           83C4                   06  add	sp,*6
28089                                           !BCC_EOS
28090                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28091 73E7           8B46         08            mov	ax,8[bp]
28092 73EA           40                         inc	ax
28093 73EB           40                         inc	ax
28094 73EC           8946         08            mov	8[bp],ax
28095                                           !BCC_EOS
28096                                           ! 3969         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
28097                                           ! Debug: list int = const $87 (used reg = )
28098 73EF           B8                   0087  mov	ax,#$87
28099 73F2           50                         push	ax
28100                                           ! Debug: list int = const $40 (used reg = )
28101 73F3           B8                   0040  mov	ax,*$40
28102 73F6           50                         push	ax
28103                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28104 73F7           E8         0922            call	_read_byte
28105 73FA           83C4                   04  add	sp,*4
28106                                           ! Debug: list unsigned char = al+0 (used reg = )
28107 73FD           30E4                       xor	ah,ah
28108 73FF           50                         push	ax
28109                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28110 7400           FF76         08            push	8[bp]
28111                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28112 7403           FF76         06            push	6[bp]
28113                                           ! Debug: func () void = write_byte+0 (used reg = )
28114 7406           E8         0939            call	_write_byte
28115 7409           83C4                   06  add	sp,*6
28116                                           !BCC_EOS
28117                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28118 740C           8B46         08            mov	ax,8[bp]
28119 740F           40                         inc	ax
28120 7410           8946         08            mov	8[bp],ax
28121                                           !BCC_EOS
28122                                           ! 3970         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
28123                                           ! Debug: list int = const $88 (used reg = )
28124 7413           B8                   0088  mov	ax,#$88
28125 7416           50                         push	ax
28126                                           ! Debug: list int = const $40 (used reg = )
28127 7417           B8                   0040  mov	ax,*$40
28128 741A           50                         push	ax
28129                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28130 741B           E8         08FE            call	_read_byte
28131 741E           83C4                   04  add	sp,*4
28132                                           ! Debug: list unsigned char = al+0 (used reg = )
28133 7421           30E4                       xor	ah,ah
28134 7423           50                         push	ax
28135                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28136 7424           FF76         08            push	8[bp]
28137                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28138 7427           FF76         06            push	6[bp]
28139                                           ! Debug: func () void = write_byte+0 (used reg = )
28140 742A           E8         0915            call	_write_byte
28141 742D           83C4                   06  add	sp,*6
28142                                           !BCC_EOS
28143                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28144 7430           8B46         08            mov	ax,8[bp]
28145 7433           40                         inc	ax
28146 7434           8946         08            mov	8[bp],ax
28147                                           !BCC_EOS
28148                                           ! 3971         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
28149                                           ! Debug: list int = const $89 (used reg = )
28150 7437           B8                   0089  mov	ax,#$89
28151 743A           50                         push	ax
28152                                           ! Debug: list int = const $40 (used reg = )
28153 743B           B8                   0040  mov	ax,*$40
28154 743E           50                         push	ax
28155                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28156 743F           E8         08DA            call	_read_byte
28157 7442           83C4                   04  add	sp,*4
28158                                           ! Debug: list unsigned char = al+0 (used reg = )
28159 7445           30E4                       xor	ah,ah
28160 7447           50                         push	ax
28161                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28162 7448           FF76         08            push	8[bp]
28163                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28164 744B           FF76         06            push	6[bp]
28165                                           ! Debug: func () void = write_byte+0 (used reg = )
28166 744E           E8         08F1            call	_write_byte
28167 7451           83C4                   06  add	sp,*6
28168                                           !BCC_EOS
28169                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28170 7454           8B46         08            mov	ax,8[bp]
28171 7457           40                         inc	ax
28172 7458           8946         08            mov	8[bp],ax
28173                                           !BCC_EOS
28174                                           ! 3972         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
28175                                           ! Debug: list int = const $60 (used reg = )
28176 745B           B8                   0060  mov	ax,*$60
28177 745E           50                         push	ax
28178                                           ! Debug: list int = const $40 (used reg = )
28179 745F           B8                   0040  mov	ax,*$40
28180 7462           50                         push	ax
28181                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28182 7463           E8         08C9            call	_read_word
28183 7466           83C4                   04  add	sp,*4
28184                                           ! Debug: list unsigned short = ax+0 (used reg = )
28185 7469           50                         push	ax
28186                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28187 746A           FF76         08            push	8[bp]
28188                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28189 746D           FF76         06            push	6[bp]
28190                                           ! Debug: func () void = write_word+0 (used reg = )
28191 7470           E8         08E7            call	_write_word
28192 7473           83C4                   06  add	sp,*6
28193                                           !BCC_EOS
28194                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28195 7476           8B46         08            mov	ax,8[bp]
28196 7479           40                         inc	ax
28197 747A           40                         inc	ax
28198 747B           8946         08            mov	8[bp],ax
28199                                           !BCC_EOS
28200                                           ! 3973         for(i=0;i<8;i++) {
28201                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28202 747E           31C0                       xor	ax,ax
28203 7480           8946         FE            mov	-2[bp],ax
28204                                           !BCC_EOS
28205                                           !BCC_EOS
28206 7483           EB           2F            jmp .276
28207                       00007485            .277:
28208                                           ! 3974             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28209                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28210                                           ! Debug: expression subtree swapping
28211 7485           8B46         FE            mov	ax,-2[bp]
28212 7488           D1E0                       shl	ax,*1
28213                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28214                                           ! Debug: expression subtree swapping
28215                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28216 748A           05                   0050  add	ax,*$50
28217 748D           50                         push	ax
28218                                           ! Debug: list int = const $40 (used reg = )
28219 748E           B8                   0040  mov	ax,*$40
28220 7491           50                         push	ax
28221                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28222 7492           E8         089A            call	_read_word
28223 7495           83C4                   04  add	sp,*4
28224                                           ! Debug: list unsigned short = ax+0 (used reg = )
28225 7498           50                         push	ax
28226                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28227 7499           FF76         08            push	8[bp]
28228                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28229 749C           FF76         06            push	6[bp]
28230                                           ! Debug: func () void = write_word+0 (used reg = )
28231 749F           E8         08B8            call	_write_word
28232 74A2           83C4                   06  add	sp,*6
28233                                           !BCC_EOS
28234                                           ! 3975             BX += 2;
28235                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28236 74A5           8B46         08            mov	ax,8[bp]
28237 74A8           40                         inc	ax
28238 74A9           40                         inc	ax
28239 74AA           8946         08            mov	8[bp],ax
28240                                           !BCC_EOS
28241                                           ! 3976         }
28242                                           ! 3977         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28243                       000074AD            .275:
28244                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28245 74AD           8B46         FE            mov	ax,-2[bp]
28246 74B0           40                         inc	ax
28247 74B1           8946         FE            mov	-2[bp],ax
28248                       000074B4            .276:
28249                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28250 74B4           8B46         FE            mov	ax,-2[bp]
28251 74B7           3D                   0008  cmp	ax,*8
28252 74BA           72           C9            jb 	.277
28253                       000074BC            .278:
28254                       000074BC            .274:
28255                                           ! Debug: list int = const $4E (used reg = )
28256 74BC           B8                   004E  mov	ax,*$4E
28257 74BF           50                         push	ax
28258                                           ! Debug: list int = const $40 (used reg = )
28259 74C0           B8                   0040  mov	ax,*$40
28260 74C3           50                         push	ax
28261                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28262 74C4           E8         0868            call	_read_word
28263 74C7           83C4                   04  add	sp,*4
28264                                           ! Debug: list unsigned short = ax+0 (used reg = )
28265 74CA           50                         push	ax
28266                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28267 74CB           FF76         08            push	8[bp]
28268                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28269 74CE           FF76         06            push	6[bp]
28270                                           ! Debug: func () void = write_word+0 (used reg = )
28271 74D1           E8         0886            call	_write_word
28272 74D4           83C4                   06  add	sp,*6
28273                                           !BCC_EOS
28274                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28275 74D7           8B46         08            mov	ax,8[bp]
28276 74DA           40                         inc	ax
28277 74DB           40                         inc	ax
28278 74DC           8946         08            mov	8[bp],ax
28279                                           !BCC_EOS
28280                                           ! 3978         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28281                                           ! Debug: list int = const $62 (used reg = )
28282 74DF           B8                   0062  mov	ax,*$62
28283 74E2           50                         push	ax
28284                                           ! Debug: list int = const $40 (used reg = )
28285 74E3           B8                   0040  mov	ax,*$40
28286 74E6           50                         push	ax
28287                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28288 74E7           E8         0832            call	_read_byte
28289 74EA           83C4                   04  add	sp,*4
28290                                           ! Debug: list unsigned char = al+0 (used reg = )
28291 74ED           30E4                       xor	ah,ah
28292 74EF           50                         push	ax
28293                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28294 74F0           FF76         08            push	8[bp]
28295                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28296 74F3           FF76         06            push	6[bp]
28297                                           ! Debug: func () void = write_byte+0 (used reg = )
28298 74F6           E8         0849            call	_write_byte
28299 74F9           83C4                   06  add	sp,*6
28300                                           !BCC_EOS
28301                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28302 74FC           8B46         08            mov	ax,8[bp]
28303 74FF           40                         inc	ax
28304 7500           8946         08            mov	8[bp],ax
28305                                           !BCC_EOS
28306                                           ! 3979         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28307                                           ! Debug: list int = const $7C (used reg = )
28308 7503           B8                   007C  mov	ax,*$7C
28309 7506           50                         push	ax
28310                                           ! Debug: list int = const 0 (used reg = )
28311 7507           31C0                       xor	ax,ax
28312 7509           50                         push	ax
28313                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28314 750A           E8         0822            call	_read_word
28315 750D           83C4                   04  add	sp,*4
28316                                           ! Debug: list unsigned short = ax+0 (used reg = )
28317 7510           50                         push	ax
28318                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28319 7511           FF76         08            push	8[bp]
28320                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28321 7514           FF76         06            push	6[bp]
28322                                           ! Debug: func () void = write_word+0 (used reg = )
28323 7517           E8         0840            call	_write_word
28324 751A           83C4                   06  add	sp,*6
28325                                           !BCC_EOS
28326                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28327 751D           8B46         08            mov	ax,8[bp]
28328 7520           40                         inc	ax
28329 7521           40                         inc	ax
28330 7522           8946         08            mov	8[bp],ax
28331                                           !BCC_EOS
28332                                           ! 3980         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28333                                           ! Debug: list int = const $7E (used reg = )
28334 7525           B8                   007E  mov	ax,*$7E
28335 7528           50                         push	ax
28336                                           ! Debug: list int = const 0 (used reg = )
28337 7529           31C0                       xor	ax,ax
28338 752B           50                         push	ax
28339                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28340 752C           E8         0800            call	_read_word
28341 752F           83C4                   04  add	sp,*4
28342                                           ! Debug: list unsigned short = ax+0 (used reg = )
28343 7532           50                         push	ax
28344                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28345 7533           FF76         08            push	8[bp]
28346                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28347 7536           FF76         06            push	6[bp]
28348                                           ! Debug: func () void = write_word+0 (used reg = )
28349 7539           E8         081E            call	_write_word
28350 753C           83C4                   06  add	sp,*6
28351                                           !BCC_EOS
28352                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28353 753F           8B46         08            mov	ax,8[bp]
28354 7542           40                         inc	ax
28355 7543           40                         inc	ax
28356 7544           8946         08            mov	8[bp],ax
28357                                           !BCC_EOS
28358                                           ! 3981         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28359                                           ! Debug: list int = const $10C (used reg = )
28360 7547           B8                   010C  mov	ax,#$10C
28361 754A           50                         push	ax
28362                                           ! Debug: list int = const 0 (used reg = )
28363 754B           31C0                       xor	ax,ax
28364 754D           50                         push	ax
28365                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28366 754E           E8         07DE            call	_read_word
28367 7551           83C4                   04  add	sp,*4
28368                                           ! Debug: list unsigned short = ax+0 (used reg = )
28369 7554           50                         push	ax
28370                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28371 7555           FF76         08            push	8[bp]
28372                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28373 7558           FF76         06            push	6[bp]
28374                                           ! Debug: func () void = write_word+0 (used reg = )
28375 755B           E8         07FC            call	_write_word
28376 755E           83C4                   06  add	sp,*6
28377                                           !BCC_EOS
28378                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28379 7561           8B46         08            mov	ax,8[bp]
28380 7564           40                         inc	ax
28381 7565           40                         inc	ax
28382 7566           8946         08            mov	8[bp],ax
28383                                           !BCC_EOS
28384                                           ! 3982         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28385                                           ! Debug: list int = const $10E (used reg = )
28386 7569           B8                   010E  mov	ax,#$10E
28387 756C           50                         push	ax
28388                                           ! Debug: list int = const 0 (used reg = )
28389 756D           31C0                       xor	ax,ax
28390 756F           50                         push	ax
28391                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28392 7570           E8         07BC            call	_read_word
28393 7573           83C4                   04  add	sp,*4
28394                                           ! Debug: list unsigned short = ax+0 (used reg = )
28395 7576           50                         push	ax
28396                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28397 7577           FF76         08            push	8[bp]
28398                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28399 757A           FF76         06            push	6[bp]
28400                                           ! Debug: func () void = write_word+0 (used reg = )
28401 757D           E8         07DA            call	_write_word
28402 7580           83C4                   06  add	sp,*6
28403                                           !BCC_EOS
28404                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28405 7583           8B46         08            mov	ax,8[bp]
28406 7586           40                         inc	ax
28407 7587           40                         inc	ax
28408 7588           8946         08            mov	8[bp],ax
28409                                           !BCC_EOS
28410                                           ! 3983     }
28411                                           ! 3984     if (CX & 4) {
28412                       0000758B            .272:
28413                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28414 758B           8A46         04            mov	al,4[bp]
28415 758E           24                     04  and	al,*4
28416 7590           84C0                       test	al,al
28417 7592         0F84         00B5            beq 	.279
28418                       00007596            .27A:
28419                                           ! 3985         write_byte(ES, BX, inb(0x3c7)); BX++;
28420                                           ! Debug: list int = const $3C7 (used reg = )
28421 7596           B8                   03C7  mov	ax,#$3C7
28422 7599           50                         push	ax
28423                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28424 759A           E8         07D5            call	_inb
28425 759D           44                         inc	sp
28426 759E           44                         inc	sp
28427                                           ! Debug: list unsigned char = al+0 (used reg = )
28428 759F           30E4                       xor	ah,ah
28429 75A1           50                         push	ax
28430                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28431 75A2           FF76         08            push	8[bp]
28432                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28433 75A5           FF76         06            push	6[bp]
28434                                           ! Debug: func () void = write_byte+0 (used reg = )
28435 75A8           E8         0797            call	_write_byte
28436 75AB           83C4                   06  add	sp,*6
28437                                           !BCC_EOS
28438                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28439 75AE           8B46         08            mov	ax,8[bp]
28440 75B1           40                         inc	ax
28441 75B2           8946         08            mov	8[bp],ax
28442                                           !BCC_EOS
28443                                           ! 3986         write_byte(ES, BX, inb(0x3c8)); BX++;
28444                                           ! Debug: list int = const $3C8 (used reg = )
28445 75B5           B8                   03C8  mov	ax,#$3C8
28446 75B8           50                         push	ax
28447                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28448 75B9           E8         07B6            call	_inb
28449 75BC           44                         inc	sp
28450 75BD           44                         inc	sp
28451                                           ! Debug: list unsigned char = al+0 (used reg = )
28452 75BE           30E4                       xor	ah,ah
28453 75C0           50                         push	ax
28454                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28455 75C1           FF76         08            push	8[bp]
28456                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28457 75C4           FF76         06            push	6[bp]
28458                                           ! Debug: func () void = write_byte+0 (used reg = )
28459 75C7           E8         0778            call	_write_byte
28460 75CA           83C4                   06  add	sp,*6
28461                                           !BCC_EOS
28462                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28463 75CD           8B46         08            mov	ax,8[bp]
28464 75D0           40                         inc	ax
28465 75D1           8946         08            mov	8[bp],ax
28466                                           !BCC_EOS
28467                                           ! 3987         write_byte(ES, BX, inb(0x3c6)); BX++;
28468                                           ! Debug: list int = const $3C6 (used reg = )
28469 75D4           B8                   03C6  mov	ax,#$3C6
28470 75D7           50                         push	ax
28471                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28472 75D8           E8         0797            call	_inb
28473 75DB           44                         inc	sp
28474 75DC           44                         inc	sp
28475                                           ! Debug: list unsigned char = al+0 (used reg = )
28476 75DD           30E4                       xor	ah,ah
28477 75DF           50                         push	ax
28478                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28479 75E0           FF76         08            push	8[bp]
28480                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28481 75E3           FF76         06            push	6[bp]
28482                                           ! Debug: func () void = write_byte+0 (used reg = )
28483 75E6           E8         0759            call	_write_byte
28484 75E9           83C4                   06  add	sp,*6
28485                                           !BCC_EOS
28486                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28487 75EC           8B46         08            mov	ax,8[bp]
28488 75EF           40                         inc	ax
28489 75F0           8946         08            mov	8[bp],ax
28490                                           !BCC_EOS
28491                                           ! 3988         outb(0x3c8,0x00);
28492                                           ! Debug: list int = const 0 (used reg = )
28493 75F3           31C0                       xor	ax,ax
28494 75F5           50                         push	ax
28495                                           ! Debug: list int = const $3C8 (used reg = )
28496 75F6           B8                   03C8  mov	ax,#$3C8
28497 75F9           50                         push	ax
28498                                           ! Debug: func () void = outb+0 (used reg = )
28499 75FA           E8         078B            call	_outb
28500 75FD           83C4                   04  add	sp,*4
28501                                           !BCC_EOS
28502                                           ! 3989         for(i=0;i<256*3;i++) {
28503                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28504 7600           31C0                       xor	ax,ax
28505 7602           8946         FE            mov	-2[bp],ax
28506                                           !BCC_EOS
28507                                           !BCC_EOS
28508 7605           EB           26            jmp .27D
28509                       00007607            .27E:
28510                                           ! 3990             write_byte(ES, BX, inb(0x3c9)); BX++;
28511                                           ! Debug: list int = const $3C9 (used reg = )
28512 7607           B8                   03C9  mov	ax,#$3C9
28513 760A           50                         push	ax
28514                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28515 760B           E8         0764            call	_inb
28516 760E           44                         inc	sp
28517 760F           44                         inc	sp
28518                                           ! Debug: list unsigned char = al+0 (used reg = )
28519 7610           30E4                       xor	ah,ah
28520 7612           50                         push	ax
28521                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28522 7613           FF76         08            push	8[bp]
28523                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28524 7616           FF76         06            push	6[bp]
28525                                           ! Debug: func () void = write_byte+0 (used reg = )
28526 7619           E8         0726            call	_write_byte
28527 761C           83C4                   06  add	sp,*6
28528                                           !BCC_EOS
28529                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28530 761F           8B46         08            mov	ax,8[bp]
28531 7622           40                         inc	ax
28532 7623           8946         08            mov	8[bp],ax
28533                                           !BCC_EOS
28534                                           ! 3991         }
28535                                           ! 3992         write_byte(ES, BX, 0); BX++;
28536                       00007626            .27C:
28537                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28538 7626           8B46         FE            mov	ax,-2[bp]
28539 7629           40                         inc	ax
28540 762A           8946         FE            mov	-2[bp],ax
28541                       0000762D            .27D:
28542                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28543 762D           8B46         FE            mov	ax,-2[bp]
28544 7630           3D                   0300  cmp	ax,#$300
28545 7633           72           D2            jb 	.27E
28546                       00007635            .27F:
28547                       00007635            .27B:
28548                                           ! Debug: list int = const 0 (used reg = )
28549 7635           31C0                       xor	ax,ax
28550 7637           50                         push	ax
28551                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28552 7638           FF76         08            push	8[bp]
28553                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28554 763B           FF76         06            push	6[bp]
28555                                           ! Debug: func () void = write_byte+0 (used reg = )
28556 763E           E8         0701            call	_write_byte
28557 7641           83C4                   06  add	sp,*6
28558                                           !BCC_EOS
28559                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28560 7644           8B46         08            mov	ax,8[bp]
28561 7647           40                         inc	ax
28562 7648           8946         08            mov	8[bp],ax
28563                                           !BCC_EOS
28564                                           ! 3993     }
28565                                           ! 3994     return BX;
28566                       0000764B            .279:
28567 764B           8B46         08            mov	ax,8[bp]
28568 764E           89EC                       mov	sp,bp
28569 7650           5D                         pop	bp
28570 7651           C3                         ret
28571                                           !BCC_EOS
28572                                           ! 3995 }
28573                                           ! 3996 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28574                                           ! 3997      Bit16u CX;Bit16u ES;Bit16u BX;
28575                       00007652            _biosfn_restore_video_state:
28576                                           !BCC_EOS
28577                                           !BCC_EOS
28578                                           !BCC_EOS
28579                                           ! 3998 {
28580                                           ! 3999     Bit16u i, crtc_addr, v, addr1, ar_index;
28581                                           !BCC_EOS
28582                                           ! 4000     if (CX & 1) {
28583 7652           55                         push	bp
28584 7653           89E5                       mov	bp,sp
28585 7655           83C4                   F6  add	sp,*-$A
28586                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28587 7658           8A46         04            mov	al,4[bp]
28588 765B           24                     01  and	al,*1
28589 765D           84C0                       test	al,al
28590 765F         0F84         02AA            beq 	.280
28591                       00007663            .281:
28592                                           ! 4001         inb(0x3da);
28593                                           ! Debug: list int = const $3DA (used reg = )
28594 7663           B8                   03DA  mov	ax,#$3DA
28595 7666           50                         push	ax
28596                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28597 7667           E8         0708            call	_inb
28598 766A           44                         inc	sp
28599 766B           44                         inc	sp
28600                                           !BCC_EOS
28601                                           ! 4002         crtc_addr = read_word(ES, BX + 0x40);
28602                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28603 766C           8B46         08            mov	ax,8[bp]
28604                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28605 766F           05                   0040  add	ax,*$40
28606 7672           50                         push	ax
28607                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28608 7673           FF76         06            push	6[bp]
28609                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28610 7676           E8         06B6            call	_read_word
28611 7679           83C4                   04  add	sp,*4
28612                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28613 767C           8946         FC            mov	-4[bp],ax
28614                                           !BCC_EOS
28615                                           ! 4003         addr1 = BX;
28616                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28617 767F           8B46         08            mov	ax,8[bp]
28618 7682           8946         F8            mov	-8[bp],ax
28619                                           !BCC_EOS
28620                                           ! 4004         BX += 5;
28621                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28622 7685           8B46         08            mov	ax,8[bp]
28623 7688           05                   0005  add	ax,*5
28624 768B           8946         08            mov	8[bp],ax
28625                                           !BCC_EOS
28626                                           ! 4005         for(i=1;i<=4;i++){
28627                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28628 768E           B8                   0001  mov	ax,*1
28629 7691           8946         FE            mov	-2[bp],ax
28630                                           !BCC_EOS
28631                                           !BCC_EOS
28632 7694           EB           34            jmp .284
28633                       00007696            .285:
28634                                           ! 4006             outb(0x3c4, i);
28635                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28636 7696           FF76         FE            push	-2[bp]
28637                                           ! Debug: list int = const $3C4 (used reg = )
28638 7699           B8                   03C4  mov	ax,#$3C4
28639 769C           50                         push	ax
28640                                           ! Debug: func () void = outb+0 (used reg = )
28641 769D           E8         06E8            call	_outb
28642 76A0           83C4                   04  add	sp,*4
28643                                           !BCC_EOS
28644                                           ! 4007             outb(0x3c5, read_byte(ES, BX)); BX++;
28645                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28646 76A3           FF76         08            push	8[bp]
28647                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28648 76A6           FF76         06            push	6[bp]
28649                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28650 76A9           E8         0670            call	_read_byte
28651 76AC           83C4                   04  add	sp,*4
28652                                           ! Debug: list unsigned char = al+0 (used reg = )
28653 76AF           30E4                       xor	ah,ah
28654 76B1           50                         push	ax
28655                                           ! Debug: list int = const $3C5 (used reg = )
28656 76B2           B8                   03C5  mov	ax,#$3C5
28657 76B5           50                         push	ax
28658                                           ! Debug: func () void = outb+0 (used reg = )
28659 76B6           E8         06CF            call	_outb
28660 76B9           83C4                   04  add	sp,*4
28661                                           !BCC_EOS
28662                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28663 76BC           8B46         08            mov	ax,8[bp]
28664 76BF           40                         inc	ax
28665 76C0           8946         08            mov	8[bp],ax
28666                                           !BCC_EOS
28667                                           ! 4008         }
28668                                           ! 4009         outb(0x3c4, 0);
28669                       000076C3            .283:
28670                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28671 76C3           8B46         FE            mov	ax,-2[bp]
28672 76C6           40                         inc	ax
28673 76C7           8946         FE            mov	-2[bp],ax
28674                       000076CA            .284:
28675                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28676 76CA           8B46         FE            mov	ax,-2[bp]
28677 76CD           3D                   0004  cmp	ax,*4
28678 76D0           76           C4            jbe	.285
28679                       000076D2            .286:
28680                       000076D2            .282:
28681                                           ! Debug: list int = const 0 (used reg = )
28682 76D2           31C0                       xor	ax,ax
28683 76D4           50                         push	ax
28684                                           ! Debug: list int = const $3C4 (used reg = )
28685 76D5           B8                   03C4  mov	ax,#$3C4
28686 76D8           50                         push	ax
28687                                           ! Debug: func () void = outb+0 (used reg = )
28688 76D9           E8         06AC            call	_outb
28689 76DC           83C4                   04  add	sp,*4
28690                                           !BCC_EOS
28691                                           ! 4010         outb(0x3c5, read_byte(ES, BX)); BX++;
28692                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28693 76DF           FF76         08            push	8[bp]
28694                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28695 76E2           FF76         06            push	6[bp]
28696                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28697 76E5           E8         0634            call	_read_byte
28698 76E8           83C4                   04  add	sp,*4
28699                                           ! Debug: list unsigned char = al+0 (used reg = )
28700 76EB           30E4                       xor	ah,ah
28701 76ED           50                         push	ax
28702                                           ! Debug: list int = const $3C5 (used reg = )
28703 76EE           B8                   03C5  mov	ax,#$3C5
28704 76F1           50                         push	ax
28705                                           ! Debug: func () void = outb+0 (used reg = )
28706 76F2           E8         0693            call	_outb
28707 76F5           83C4                   04  add	sp,*4
28708                                           !BCC_EOS
28709                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28710 76F8           8B46         08            mov	ax,8[bp]
28711 76FB           40                         inc	ax
28712 76FC           8946         08            mov	8[bp],ax
28713                                           !BCC_EOS
28714                                           ! 4011         outw(crtc_addr,0x0011);
28715                                           ! Debug: list int = const $11 (used reg = )
28716 76FF           B8                   0011  mov	ax,*$11
28717 7702           50                         push	ax
28718                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28719 7703           FF76         FC            push	-4[bp]
28720                                           ! Debug: func () void = outw+0 (used reg = )
28721 7706           E8         068F            call	_outw
28722 7709           83C4                   04  add	sp,*4
28723                                           !BCC_EOS
28724                                           ! 4012         for(i=0;i<=0x18;i++) {
28725                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28726 770C           31C0                       xor	ax,ax
28727 770E           8946         FE            mov	-2[bp],ax
28728                                           !BCC_EOS
28729                                           !BCC_EOS
28730 7711           EB           3C            jmp .289
28731                       00007713            .28A:
28732                                           ! 4013          
28733                                           ! 4013    if (i != 0x11) {
28734                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28735 7713           8B46         FE            mov	ax,-2[bp]
28736 7716           3D                   0011  cmp	ax,*$11
28737 7719           74           26            je  	.28B
28738                       0000771B            .28C:
28739                                           ! 4014                 outb(crtc_addr,i);
28740                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28741 771B           FF76         FE            push	-2[bp]
28742                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28743 771E           FF76         FC            push	-4[bp]
28744                                           ! Debug: func () void = outb+0 (used reg = )
28745 7721           E8         0664            call	_outb
28746 7724           83C4                   04  add	sp,*4
28747                                           !BCC_EOS
28748                                           ! 4015                 outb(crtc_addr+1, read_byte(ES, BX));
28749                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28750 7727           FF76         08            push	8[bp]
28751                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28752 772A           FF76         06            push	6[bp]
28753                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28754 772D           E8         05EC            call	_read_byte
28755 7730           83C4                   04  add	sp,*4
28756                                           ! Debug: list unsigned char = al+0 (used reg = )
28757 7733           30E4                       xor	ah,ah
28758 7735           50                         push	ax
28759                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28760 7736           8B46         FC            mov	ax,-4[bp]
28761                                           ! Debug: list unsigned int = ax+1 (used reg = )
28762 7739           40                         inc	ax
28763 773A           50                         push	ax
28764                                           ! Debug: func () void = outb+0 (used reg = )
28765 773B           E8         064A            call	_outb
28766 773E           83C4                   04  add	sp,*4
28767                                           !BCC_EOS
28768                                           ! 4016             }
28769                                           ! 4017             BX++;
28770                       00007741            .28B:
28771                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28772 7741           8B46         08            mov	ax,8[bp]
28773 7744           40                         inc	ax
28774 7745           8946         08            mov	8[bp],ax
28775                                           !BCC_EOS
28776                                           ! 4018         }
28777                                           ! 4019         v = inb(0x3cc) & ~0x01;
28778                       00007748            .288:
28779                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28780 7748           8B46         FE            mov	ax,-2[bp]
28781 774B           40                         inc	ax
28782 774C           8946         FE            mov	-2[bp],ax
28783                       0000774F            .289:
28784                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28785 774F           8B46         FE            mov	ax,-2[bp]
28786 7752           3D                   0018  cmp	ax,*$18
28787 7755           76           BC            jbe	.28A
28788                       00007757            .28D:
28789                       00007757            .287:
28790                                           ! Debug: list int = const $3CC (used reg = )
28791 7757           B8                   03CC  mov	ax,#$3CC
28792 775A           50                         push	ax
28793                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28794 775B           E8         0614            call	_inb
28795 775E           44                         inc	sp
28796 775F           44                         inc	sp
28797                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28798 7760           24                     FE  and	al,#$FE
28799                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28800 7762           30E4                       xor	ah,ah
28801 7764           8946         FA            mov	-6[bp],ax
28802                                           !BCC_EOS
28803                                           ! 4020         if (crtc_addr = 0x3d4)
28804                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28805 7767           B8                   03D4  mov	ax,#$3D4
28806 776A           8946         FC            mov	-4[bp],ax
28807 776D           85C0                       test	ax,ax
28808 776F           74           08            je  	.28E
28809                       00007771            .28F:
28810                                           ! 4021             v |= 0x01;
28811                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28812 7771           8B46         FA            mov	ax,-6[bp]
28813 7774           0C                     01  or	al,*1
28814 7776           8946         FA            mov	-6[bp],ax
28815                                           !BCC_EOS
28816                                           ! 4022         outb(0x3c2, v);
28817                       00007779            .28E:
28818                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28819 7779           FF76         FA            push	-6[bp]
28820                                           ! Debug: list int = const $3C2 (used reg = )
28821 777C           B8                   03C2  mov	ax,#$3C2
28822 777F           50                         push	ax
28823                                           ! Debug: func () void = outb+0 (used reg = )
28824 7780           E8         0605            call	_outb
28825 7783           83C4                   04  add	sp,*4
28826                                           !BCC_EOS
28827                                           ! 4023         outb(crtc_addr, 0x11);
28828                                           ! Debug: list int = const $11 (used reg = )
28829 7786           B8                   0011  mov	ax,*$11
28830 7789           50                         push	ax
28831                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28832 778A           FF76         FC            push	-4[bp]
28833                                           ! Debug: func () void = outb+0 (used reg = )
28834 778D           E8         05F8            call	_outb
28835 7790           83C4                   04  add	sp,*4
28836                                           !BCC_EOS
28837                                           ! 4024         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28838                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28839 7793           8B46         08            mov	ax,8[bp]
28840                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28841                                           ! Debug: list unsigned int = ax-7 (used reg = )
28842 7796           05                   FFF9  add	ax,*-7
28843 7799           50                         push	ax
28844                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28845 779A           FF76         06            push	6[bp]
28846                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28847 779D           E8         057C            call	_read_byte
28848 77A0           83C4                   04  add	sp,*4
28849                                           ! Debug: list unsigned char = al+0 (used reg = )
28850 77A3           30E4                       xor	ah,ah
28851 77A5           50                         push	ax
28852                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28853 77A6           8B46         FC            mov	ax,-4[bp]
28854                                           ! Debug: list unsigned int = ax+1 (used reg = )
28855 77A9           40                         inc	ax
28856 77AA           50                         push	ax
28857                                           ! Debug: func () void = outb+0 (used reg = )
28858 77AB           E8         05DA            call	_outb
28859 77AE           83C4                   04  add	sp,*4
28860                                           !BCC_EOS
28861                                           ! 4025         ar_index = read_byte(ES, addr1 + 0x03);
28862                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28863 77B1           8B46         F8            mov	ax,-8[bp]
28864                                           ! Debug: list unsigned int = ax+3 (used reg = )
28865 77B4           05                   0003  add	ax,*3
28866 77B7           50                         push	ax
28867                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28868 77B8           FF76         06            push	6[bp]
28869                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28870 77BB           E8         055E            call	_read_byte
28871 77BE           83C4                   04  add	sp,*4
28872                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28873 77C1           30E4                       xor	ah,ah
28874 77C3           8946         F6            mov	-$A[bp],ax
28875                                           !BCC_EOS
28876                                           ! 4026         inb(0x3da);
28877                                           ! Debug: list int = const $3DA (used reg = )
28878 77C6           B8                   03DA  mov	ax,#$3DA
28879 77C9           50                         push	ax
28880                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28881 77CA           E8         05A5            call	_inb
28882 77CD           44                         inc	sp
28883 77CE           44                         inc	sp
28884                                           !BCC_EOS
28885                                           ! 4027         for(i=0;i<=0x13;i++) {
28886                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28887 77CF           31C0                       xor	ax,ax
28888 77D1           8946         FE            mov	-2[bp],ax
28889                                           !BCC_EOS
28890                                           !BCC_EOS
28891 77D4           EB           3C            jmp .292
28892                       000077D6            .293:
28893                                           ! 4028             outb(0x3c0, i | (ar_index & 0x20));
28894                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28895 77D6           8A46         F6            mov	al,-$A[bp]
28896 77D9           24                     20  and	al,*$20
28897                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28898                                           ! Debug: expression subtree swapping
28899 77DB           30E4                       xor	ah,ah
28900 77DD           0B46         FE            or	ax,-2[bp]
28901                                           ! Debug: list unsigned int = ax+0 (used reg = )
28902 77E0           50                         push	ax
28903                                           ! Debug: list int = const $3C0 (used reg = )
28904 77E1           B8                   03C0  mov	ax,#$3C0
28905 77E4           50                         push	ax
28906                                           ! Debug: func () void = outb+0 (used reg = )
28907 77E5           E8         05A0            call	_outb
28908 77E8           83C4                   04  add	sp,*4
28909                                           !BCC_EOS
28910                                           ! 4029             outb(0x3c0, read_byte(ES, BX)); BX++;
28911                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28912 77EB           FF76         08            push	8[bp]
28913                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28914 77EE           FF76         06            push	6[bp]
28915                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28916 77F1           E8         0528            call	_read_byte
28917 77F4           83C4                   04  add	sp,*4
28918                                           ! Debug: list unsigned char = al+0 (used reg = )
28919 77F7           30E4                       xor	ah,ah
28920 77F9           50                         push	ax
28921                                           ! Debug: list int = const $3C0 (used reg = )
28922 77FA           B8                   03C0  mov	ax,#$3C0
28923 77FD           50                         push	ax
28924                                           ! Debug: func () void = outb+0 (used reg = )
28925 77FE           E8         0587            call	_outb
28926 7801           83C4                   04  add	sp,*4
28927                                           !BCC_EOS
28928                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28929 7804           8B46         08            mov	ax,8[bp]
28930 7807           40                         inc	ax
28931 7808           8946         08            mov	8[bp],ax
28932                                           !BCC_EOS
28933                                           ! 4030         }
28934                                           ! 4031         outb(0x3c0, ar_index);
28935                       0000780B            .291:
28936                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28937 780B           8B46         FE            mov	ax,-2[bp]
28938 780E           40                         inc	ax
28939 780F           8946         FE            mov	-2[bp],ax
28940                       00007812            .292:
28941                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28942 7812           8B46         FE            mov	ax,-2[bp]
28943 7815           3D                   0013  cmp	ax,*$13
28944 7818           76           BC            jbe	.293
28945                       0000781A            .294:
28946                       0000781A            .290:
28947                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28948 781A           FF76         F6            push	-$A[bp]
28949                                           ! Debug: list int = const $3C0 (used reg = )
28950 781D           B8                   03C0  mov	ax,#$3C0
28951 7820           50                         push	ax
28952                                           ! Debug: func () void = outb+0 (used reg = )
28953 7821           E8         0564            call	_outb
28954 7824           83C4                   04  add	sp,*4
28955                                           !BCC_EOS
28956                                           ! 4032         inb(0x3da);
28957                                           ! Debug: list int = const $3DA (used reg = )
28958 7827           B8                   03DA  mov	ax,#$3DA
28959 782A           50                         push	ax
28960                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28961 782B           E8         0544            call	_inb
28962 782E           44                         inc	sp
28963 782F           44                         inc	sp
28964                                           !BCC_EOS
28965                                           ! 4033         for(i=0;i<=8;i++) {
28966                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28967 7830           31C0                       xor	ax,ax
28968 7832           8946         FE            mov	-2[bp],ax
28969                                           !BCC_EOS
28970                                           !BCC_EOS
28971 7835           EB           34            jmp .297
28972                       00007837            .298:
28973                                           ! 4034             outb(0x3ce,i);
28974                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28975 7837           FF76         FE            push	-2[bp]
28976                                           ! Debug: list int = const $3CE (used reg = )
28977 783A           B8                   03CE  mov	ax,#$3CE
28978 783D           50                         push	ax
28979                                           ! Debug: func () void = outb+0 (used reg = )
28980 783E           E8         0547            call	_outb
28981 7841           83C4                   04  add	sp,*4
28982                                           !BCC_EOS
28983                                           ! 4035             outb(0x3cf, read_byte(ES, BX)); BX++;
28984                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28985 7844           FF76         08            push	8[bp]
28986                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28987 7847           FF76         06            push	6[bp]
28988                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28989 784A           E8         04CF            call	_read_byte
28990 784D           83C4                   04  add	sp,*4
28991                                           ! Debug: list unsigned char = al+0 (used reg = )
28992 7850           30E4                       xor	ah,ah
28993 7852           50                         push	ax
28994                                           ! Debug: list int = const $3CF (used reg = )
28995 7853           B8                   03CF  mov	ax,#$3CF
28996 7856           50                         push	ax
28997                                           ! Debug: func () void = outb+0 (used reg = )
28998 7857           E8         052E            call	_outb
28999 785A           83C4                   04  add	sp,*4
29000                                           !BCC_EOS
29001                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29002 785D           8B46         08            mov	ax,8[bp]
29003 7860           40                         inc	ax
29004 7861           8946         08            mov	8[bp],ax
29005                                           !BCC_EOS
29006                                           ! 4036         }
29007                                           ! 4037         BX += 2;
29008                       00007864            .296:
29009                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29010 7864           8B46         FE            mov	ax,-2[bp]
29011 7867           40                         inc	ax
29012 7868           8946         FE            mov	-2[bp],ax
29013                       0000786B            .297:
29014                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29015 786B           8B46         FE            mov	ax,-2[bp]
29016 786E           3D                   0008  cmp	ax,*8
29017 7871           76           C4            jbe	.298
29018                       00007873            .299:
29019                       00007873            .295:
29020                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29021 7873           8B46         08            mov	ax,8[bp]
29022 7876           40                         inc	ax
29023 7877           40                         inc	ax
29024 7878           8946         08            mov	8[bp],ax
29025                                           !BCC_EOS
29026                                           ! 4038         BX += 4;
29027                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
29028 787B           8B46         08            mov	ax,8[bp]
29029 787E           05                   0004  add	ax,*4
29030 7881           8946         08            mov	8[bp],ax
29031                                           !BCC_EOS
29032                                           ! 4039         outb(0x3c4, read_byte(ES, addr1)); addr1++;
29033                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29034 7884           FF76         F8            push	-8[bp]
29035                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29036 7887           FF76         06            push	6[bp]
29037                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29038 788A           E8         048F            call	_read_byte
29039 788D           83C4                   04  add	sp,*4
29040                                           ! Debug: list unsigned char = al+0 (used reg = )
29041 7890           30E4                       xor	ah,ah
29042 7892           50                         push	ax
29043                                           ! Debug: list int = const $3C4 (used reg = )
29044 7893           B8                   03C4  mov	ax,#$3C4
29045 7896           50                         push	ax
29046                                           ! Debug: func () void = outb+0 (used reg = )
29047 7897           E8         04EE            call	_outb
29048 789A           83C4                   04  add	sp,*4
29049                                           !BCC_EOS
29050                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29051 789D           8B46         F8            mov	ax,-8[bp]
29052 78A0           40                         inc	ax
29053 78A1           8946         F8            mov	-8[bp],ax
29054                                           !BCC_EOS
29055                                           ! 4040         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
29056                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29057 78A4           FF76         F8            push	-8[bp]
29058                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29059 78A7           FF76         06            push	6[bp]
29060                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29061 78AA           E8         046F            call	_read_byte
29062 78AD           83C4                   04  add	sp,*4
29063                                           ! Debug: list unsigned char = al+0 (used reg = )
29064 78B0           30E4                       xor	ah,ah
29065 78B2           50                         push	ax
29066                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29067 78B3           FF76         FC            push	-4[bp]
29068                                           ! Debug: func () void = outb+0 (used reg = )
29069 78B6           E8         04CF            call	_outb
29070 78B9           83C4                   04  add	sp,*4
29071                                           !BCC_EOS
29072                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29073 78BC           8B46         F8            mov	ax,-8[bp]
29074 78BF           40                         inc	ax
29075 78C0           8946         F8            mov	-8[bp],ax
29076                                           !BCC_EOS
29077                                           ! 4041         outb(0x3ce, read_byte(ES, addr1)); addr1++;
29078                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29079 78C3           FF76         F8            push	-8[bp]
29080                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29081 78C6           FF76         06            push	6[bp]
29082                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29083 78C9           E8         0450            call	_read_byte
29084 78CC           83C4                   04  add	sp,*4
29085                                           ! Debug: list unsigned char = al+0 (used reg = )
29086 78CF           30E4                       xor	ah,ah
29087 78D1           50                         push	ax
29088                                           ! Debug: list int = const $3CE (used reg = )
29089 78D2           B8                   03CE  mov	ax,#$3CE
29090 78D5           50                         push	ax
29091                                           ! Debug: func () void = outb+0 (used reg = )
29092 78D6           E8         04AF            call	_outb
29093 78D9           83C4                   04  add	sp,*4
29094                                           !BCC_EOS
29095                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29096 78DC           8B46         F8            mov	ax,-8[bp]
29097 78DF           40                         inc	ax
29098 78E0           8946         F8            mov	-8[bp],ax
29099                                           !BCC_EOS
29100                                           ! 4042         addr1++;
29101                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29102 78E3           8B46         F8            mov	ax,-8[bp]
29103 78E6           40                         inc	ax
29104 78E7           8946         F8            mov	-8[bp],ax
29105                                           !BCC_EOS
29106                                           ! 4043         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
29107                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29108 78EA           FF76         F8            push	-8[bp]
29109                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29110 78ED           FF76         06            push	6[bp]
29111                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29112 78F0           E8         0429            call	_read_byte
29113 78F3           83C4                   04  add	sp,*4
29114                                           ! Debug: list unsigned char = al+0 (used reg = )
29115 78F6           30E4                       xor	ah,ah
29116 78F8           50                         push	ax
29117                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29118 78F9           8B46         FC            mov	ax,-4[bp]
29119                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
29120                                           ! Debug: list unsigned int = ax+6 (used reg = )
29121 78FC           05                   0006  add	ax,*6
29122 78FF           50                         push	ax
29123                                           ! Debug: func () void = outb+0 (used reg = )
29124 7900           E8         0485            call	_outb
29125 7903           83C4                   04  add	sp,*4
29126                                           !BCC_EOS
29127                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29128 7906           8B46         F8            mov	ax,-8[bp]
29129 7909           40                         inc	ax
29130 790A           8946         F8            mov	-8[bp],ax
29131                                           !BCC_EOS
29132                                           ! 4044     }
29133                                           ! 4045     if (CX & 2) {
29134                       0000790D            .280:
29135                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
29136 790D           8A46         04            mov	al,4[bp]
29137 7910           24                     02  and	al,*2
29138 7912           84C0                       test	al,al
29139 7914         0F84         0270            beq 	.29A
29140                       00007918            .29B:
29141                                           ! 4046         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
29142                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29143 7918           FF76         08            push	8[bp]
29144                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29145 791B           FF76         06            push	6[bp]
29146                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29147 791E           E8         03FB            call	_read_byte
29148 7921           83C4                   04  add	sp,*4
29149                                           ! Debug: list unsigned char = al+0 (used reg = )
29150 7924           30E4                       xor	ah,ah
29151 7926           50                         push	ax
29152                                           ! Debug: list int = const $49 (used reg = )
29153 7927           B8                   0049  mov	ax,*$49
29154 792A           50                         push	ax
29155                                           ! Debug: list int = const $40 (used reg = )
29156 792B           B8                   0040  mov	ax,*$40
29157 792E           50                         push	ax
29158                                           ! Debug: func () void = write_byte+0 (used reg = )
29159 792F           E8         0410            call	_write_byte
29160 7932           83C4                   06  add	sp,*6
29161                                           !BCC_EOS
29162                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29163 7935           8B46         08            mov	ax,8[bp]
29164 7938           40                         inc	ax
29165 7939           8946         08            mov	8[bp],ax
29166                                           !BCC_EOS
29167                                           ! 4047         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
29168                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29169 793C           FF76         08            push	8[bp]
29170                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29171 793F           FF76         06            push	6[bp]
29172                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29173 7942           E8         03EA            call	_read_word
29174 7945           83C4                   04  add	sp,*4
29175                                           ! Debug: list unsigned short = ax+0 (used reg = )
29176 7948           50                         push	ax
29177                                           ! Debug: list int = const $4A (used reg = )
29178 7949           B8                   004A  mov	ax,*$4A
29179 794C           50                         push	ax
29180                                           ! Debug: list int = const $40 (used reg = )
29181 794D           B8                   0040  mov	ax,*$40
29182 7950           50                         push	ax
29183                                           ! Debug: func () void = write_word+0 (used reg = )
29184 7951           E8         0406            call	_write_word
29185 7954           83C4                   06  add	sp,*6
29186                                           !BCC_EOS
29187                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29188 7957           8B46         08            mov	ax,8[bp]
29189 795A           40                         inc	ax
29190 795B           40                         inc	ax
29191 795C           8946         08            mov	8[bp],ax
29192                                           !BCC_EOS
29193                                           ! 4048         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
29194                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29195 795F           FF76         08            push	8[bp]
29196                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29197 7962           FF76         06            push	6[bp]
29198                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29199 7965           E8         03C7            call	_read_word
29200 7968           83C4                   04  add	sp,*4
29201                                           ! Debug: list unsigned short = ax+0 (used reg = )
29202 796B           50                         push	ax
29203                                           ! Debug: list int = const $4C (used reg = )
29204 796C           B8                   004C  mov	ax,*$4C
29205 796F           50                         push	ax
29206                                           ! Debug: list int = const $40 (used reg = )
29207 7970           B8                   0040  mov	ax,*$40
29208 7973           50                         push	ax
29209                                           ! Debug: func () void = write_word+0 (used reg = )
29210 7974           E8         03E3            call	_write_word
29211 7977           83C4                   06  add	sp,*6
29212                                           !BCC_EOS
29213                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29214 797A           8B46         08            mov	ax,8[bp]
29215 797D           40                         inc	ax
29216 797E           40                         inc	ax
29217 797F           8946         08            mov	8[bp],ax
29218                                           !BCC_EOS
29219                                           ! 4049         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29220                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29221 7982           FF76         08            push	8[bp]
29222                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29223 7985           FF76         06            push	6[bp]
29224                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29225 7988           E8         03A4            call	_read_word
29226 798B           83C4                   04  add	sp,*4
29227                                           ! Debug: list unsigned short = ax+0 (used reg = )
29228 798E           50                         push	ax
29229                                           ! Debug: list int = const $63 (used reg = )
29230 798F           B8                   0063  mov	ax,*$63
29231 7992           50                         push	ax
29232                                           ! Debug: list int = const $40 (used reg = )
29233 7993           B8                   0040  mov	ax,*$40
29234 7996           50                         push	ax
29235                                           ! Debug: func () void = write_word+0 (used reg = )
29236 7997           E8         03C0            call	_write_word
29237 799A           83C4                   06  add	sp,*6
29238                                           !BCC_EOS
29239                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29240 799D           8B46         08            mov	ax,8[bp]
29241 79A0           40                         inc	ax
29242 79A1           40                         inc	ax
29243 79A2           8946         08            mov	8[bp],ax
29244                                           !BCC_EOS
29245                                           ! 4050         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29246                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29247 79A5           FF76         08            push	8[bp]
29248                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29249 79A8           FF76         06            push	6[bp]
29250                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29251 79AB           E8         036E            call	_read_byte
29252 79AE           83C4                   04  add	sp,*4
29253                                           ! Debug: list unsigned char = al+0 (used reg = )
29254 79B1           30E4                       xor	ah,ah
29255 79B3           50                         push	ax
29256                                           ! Debug: list int = const $84 (used reg = )
29257 79B4           B8                   0084  mov	ax,#$84
29258 79B7           50                         push	ax
29259                                           ! Debug: list int = const $40 (used reg = )
29260 79B8           B8                   0040  mov	ax,*$40
29261 79BB           50                         push	ax
29262                                           ! Debug: func () void = write_byte+0 (used reg = )
29263 79BC           E8         0383            call	_write_byte
29264 79BF           83C4                   06  add	sp,*6
29265                                           !BCC_EOS
29266                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29267 79C2           8B46         08            mov	ax,8[bp]
29268 79C5           40                         inc	ax
29269 79C6           8946         08            mov	8[bp],ax
29270                                           !BCC_EOS
29271                                           ! 4051         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29272                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29273 79C9           FF76         08            push	8[bp]
29274                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29275 79CC           FF76         06            push	6[bp]
29276                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29277 79CF           E8         035D            call	_read_word
29278 79D2           83C4                   04  add	sp,*4
29279                                           ! Debug: list unsigned short = ax+0 (used reg = )
29280 79D5           50                         push	ax
29281                                           ! Debug: list int = const $85 (used reg = )
29282 79D6           B8                   0085  mov	ax,#$85
29283 79D9           50                         push	ax
29284                                           ! Debug: list int = const $40 (used reg = )
29285 79DA           B8                   0040  mov	ax,*$40
29286 79DD           50                         push	ax
29287                                           ! Debug: func () void = write_word+0 (used reg = )
29288 79DE           E8         0379            call	_write_word
29289 79E1           83C4                   06  add	sp,*6
29290                                           !BCC_EOS
29291                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29292 79E4           8B46         08            mov	ax,8[bp]
29293 79E7           40                         inc	ax
29294 79E8           40                         inc	ax
29295 79E9           8946         08            mov	8[bp],ax
29296                                           !BCC_EOS
29297                                           ! 4052         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29298                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29299 79EC           FF76         08            push	8[bp]
29300                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29301 79EF           FF76         06            push	6[bp]
29302                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29303 79F2           E8         0327            call	_read_byte
29304 79F5           83C4                   04  add	sp,*4
29305                                           ! Debug: list unsigned char = al+0 (used reg = )
29306 79F8           30E4                       xor	ah,ah
29307 79FA           50                         push	ax
29308                                           ! Debug: list int = const $87 (used reg = )
29309 79FB           B8                   0087  mov	ax,#$87
29310 79FE           50                         push	ax
29311                                           ! Debug: list int = const $40 (used reg = )
29312 79FF           B8                   0040  mov	ax,*$40
29313 7A02           50                         push	ax
29314                                           ! Debug: func () void = write_byte+0 (used reg = )
29315 7A03           E8         033C            call	_write_byte
29316 7A06           83C4                   06  add	sp,*6
29317                                           !BCC_EOS
29318                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29319 7A09           8B46         08            mov	ax,8[bp]
29320 7A0C           40                         inc	ax
29321 7A0D           8946         08            mov	8[bp],ax
29322                                           !BCC_EOS
29323                                           ! 4053         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29324                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29325 7A10           FF76         08            push	8[bp]
29326                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29327 7A13           FF76         06            push	6[bp]
29328                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29329 7A16           E8         0303            call	_read_byte
29330 7A19           83C4                   04  add	sp,*4
29331                                           ! Debug: list unsigned char = al+0 (used reg = )
29332 7A1C           30E4                       xor	ah,ah
29333 7A1E           50                         push	ax
29334                                           ! Debug: list int = const $88 (used reg = )
29335 7A1F           B8                   0088  mov	ax,#$88
29336 7A22           50                         push	ax
29337                                           ! Debug: list int = const $40 (used reg = )
29338 7A23           B8                   0040  mov	ax,*$40
29339 7A26           50                         push	ax
29340                                           ! Debug: func () void = write_byte+0 (used reg = )
29341 7A27           E8         0318            call	_write_byte
29342 7A2A           83C4                   06  add	sp,*6
29343                                           !BCC_EOS
29344                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29345 7A2D           8B46         08            mov	ax,8[bp]
29346 7A30           40                         inc	ax
29347 7A31           8946         08            mov	8[bp],ax
29348                                           !BCC_EOS
29349                                           ! 4054         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29350                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29351 7A34           FF76         08            push	8[bp]
29352                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29353 7A37           FF76         06            push	6[bp]
29354                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29355 7A3A           E8         02DF            call	_read_byte
29356 7A3D           83C4                   04  add	sp,*4
29357                                           ! Debug: list unsigned char = al+0 (used reg = )
29358 7A40           30E4                       xor	ah,ah
29359 7A42           50                         push	ax
29360                                           ! Debug: list int = const $89 (used reg = )
29361 7A43           B8                   0089  mov	ax,#$89
29362 7A46           50                         push	ax
29363                                           ! Debug: list int = const $40 (used reg = )
29364 7A47           B8                   0040  mov	ax,*$40
29365 7A4A           50                         push	ax
29366                                           ! Debug: func () void = write_byte+0 (used reg = )
29367 7A4B           E8         02F4            call	_write_byte
29368 7A4E           83C4                   06  add	sp,*6
29369                                           !BCC_EOS
29370                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29371 7A51           8B46         08            mov	ax,8[bp]
29372 7A54           40                         inc	ax
29373 7A55           8946         08            mov	8[bp],ax
29374                                           !BCC_EOS
29375                                           ! 4055         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29376                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29377 7A58           FF76         08            push	8[bp]
29378                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29379 7A5B           FF76         06            push	6[bp]
29380                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29381 7A5E           E8         02CE            call	_read_word
29382 7A61           83C4                   04  add	sp,*4
29383                                           ! Debug: list unsigned short = ax+0 (used reg = )
29384 7A64           50                         push	ax
29385                                           ! Debug: list int = const $60 (used reg = )
29386 7A65           B8                   0060  mov	ax,*$60
29387 7A68           50                         push	ax
29388                                           ! Debug: list int = const $40 (used reg = )
29389 7A69           B8                   0040  mov	ax,*$40
29390 7A6C           50                         push	ax
29391                                           ! Debug: func () void = write_word+0 (used reg = )
29392 7A6D           E8         02EA            call	_write_word
29393 7A70           83C4                   06  add	sp,*6
29394                                           !BCC_EOS
29395                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29396 7A73           8B46         08            mov	ax,8[bp]
29397 7A76           40                         inc	ax
29398 7A77           40                         inc	ax
29399 7A78           8946         08            mov	8[bp],ax
29400                                           !BCC_EOS
29401                                           ! 4056         for(i=0;i<8;i++) {
29402                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29403 7A7B           31C0                       xor	ax,ax
29404 7A7D           8946         FE            mov	-2[bp],ax
29405                                           !BCC_EOS
29406                                           !BCC_EOS
29407 7A80           EB           2F            jmp .29E
29408                       00007A82            .29F:
29409                                           ! 4057             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29410                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29411 7A82           FF76         08            push	8[bp]
29412                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29413 7A85           FF76         06            push	6[bp]
29414                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29415 7A88           E8         02A4            call	_read_word
29416 7A8B           83C4                   04  add	sp,*4
29417                                           ! Debug: list unsigned short = ax+0 (used reg = )
29418 7A8E           50                         push	ax
29419                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29420                                           ! Debug: expression subtree swapping
29421 7A8F           8B46         FE            mov	ax,-2[bp]
29422 7A92           D1E0                       shl	ax,*1
29423                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29424                                           ! Debug: expression subtree swapping
29425                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29426 7A94           05                   0050  add	ax,*$50
29427 7A97           50                         push	ax
29428                                           ! Debug: list int = const $40 (used reg = )
29429 7A98           B8                   0040  mov	ax,*$40
29430 7A9B           50                         push	ax
29431                                           ! Debug: func () void = write_word+0 (used reg = )
29432 7A9C           E8         02BB            call	_write_word
29433 7A9F           83C4                   06  add	sp,*6
29434                                           !BCC_EOS
29435                                           ! 4058             BX += 2;
29436                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29437 7AA2           8B46         08            mov	ax,8[bp]
29438 7AA5           40                         inc	ax
29439 7AA6           40                         inc	ax
29440 7AA7           8946         08            mov	8[bp],ax
29441                                           !BCC_EOS
29442                                           ! 4059         }
29443                                           ! 4060         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29444                       00007AAA            .29D:
29445                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29446 7AAA           8B46         FE            mov	ax,-2[bp]
29447 7AAD           40                         inc	ax
29448 7AAE           8946         FE            mov	-2[bp],ax
29449                       00007AB1            .29E:
29450                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29451 7AB1           8B46         FE            mov	ax,-2[bp]
29452 7AB4           3D                   0008  cmp	ax,*8
29453 7AB7           72           C9            jb 	.29F
29454                       00007AB9            .2A0:
29455                       00007AB9            .29C:
29456                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29457 7AB9           FF76         08            push	8[bp]
29458                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29459 7ABC           FF76         06            push	6[bp]
29460                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29461 7ABF           E8         026D            call	_read_word
29462 7AC2           83C4                   04  add	sp,*4
29463                                           ! Debug: list unsigned short = ax+0 (used reg = )
29464 7AC5           50                         push	ax
29465                                           ! Debug: list int = const $4E (used reg = )
29466 7AC6           B8                   004E  mov	ax,*$4E
29467 7AC9           50                         push	ax
29468                                           ! Debug: list int = const $40 (used reg = )
29469 7ACA           B8                   0040  mov	ax,*$40
29470 7ACD           50                         push	ax
29471                                           ! Debug: func () void = write_word+0 (used reg = )
29472 7ACE           E8         0289            call	_write_word
29473 7AD1           83C4                   06  add	sp,*6
29474                                           !BCC_EOS
29475                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29476 7AD4           8B46         08            mov	ax,8[bp]
29477 7AD7           40                         inc	ax
29478 7AD8           40                         inc	ax
29479 7AD9           8946         08            mov	8[bp],ax
29480                                           !BCC_EOS
29481                                           ! 4061         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29482                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29483 7ADC           FF76         08            push	8[bp]
29484                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29485 7ADF           FF76         06            push	6[bp]
29486                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29487 7AE2           E8         0237            call	_read_byte
29488 7AE5           83C4                   04  add	sp,*4
29489                                           ! Debug: list unsigned char = al+0 (used reg = )
29490 7AE8           30E4                       xor	ah,ah
29491 7AEA           50                         push	ax
29492                                           ! Debug: list int = const $62 (used reg = )
29493 7AEB           B8                   0062  mov	ax,*$62
29494 7AEE           50                         push	ax
29495                                           ! Debug: list int = const $40 (used reg = )
29496 7AEF           B8                   0040  mov	ax,*$40
29497 7AF2           50                         push	ax
29498                                           ! Debug: func () void = write_byte+0 (used reg = )
29499 7AF3           E8         024C            call	_write_byte
29500 7AF6           83C4                   06  add	sp,*6
29501                                           !BCC_EOS
29502                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29503 7AF9           8B46         08            mov	ax,8[bp]
29504 7AFC           40                         inc	ax
29505 7AFD           8946         08            mov	8[bp],ax
29506                                           !BCC_EOS
29507                                           ! 4062         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29508                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29509 7B00           FF76         08            push	8[bp]
29510                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29511 7B03           FF76         06            push	6[bp]
29512                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29513 7B06           E8         0226            call	_read_word
29514 7B09           83C4                   04  add	sp,*4
29515                                           ! Debug: list unsigned short = ax+0 (used reg = )
29516 7B0C           50                         push	ax
29517                                           ! Debug: list int = const $7C (used reg = )
29518 7B0D           B8                   007C  mov	ax,*$7C
29519 7B10           50                         push	ax
29520                                           ! Debug: list int = const 0 (used reg = )
29521 7B11           31C0                       xor	ax,ax
29522 7B13           50                         push	ax
29523                                           ! Debug: func () void = write_word+0 (used reg = )
29524 7B14           E8         0243            call	_write_word
29525 7B17           83C4                   06  add	sp,*6
29526                                           !BCC_EOS
29527                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29528 7B1A           8B46         08            mov	ax,8[bp]
29529 7B1D           40                         inc	ax
29530 7B1E           40                         inc	ax
29531 7B1F           8946         08            mov	8[bp],ax
29532                                           !BCC_EOS
29533                                           ! 4063         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29534                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29535 7B22           FF76         08            push	8[bp]
29536                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29537 7B25           FF76         06            push	6[bp]
29538                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29539 7B28           E8         0204            call	_read_word
29540 7B2B           83C4                   04  add	sp,*4
29541                                           ! Debug: list unsigned short = ax+0 (used reg = )
29542 7B2E           50                         push	ax
29543                                           ! Debug: list int = const $7E (used reg = )
29544 7B2F           B8                   007E  mov	ax,*$7E
29545 7B32           50                         push	ax
29546                                           ! Debug: list int = const 0 (used reg = )
29547 7B33           31C0                       xor	ax,ax
29548 7B35           50                         push	ax
29549                                           ! Debug: func () void = write_word+0 (used reg = )
29550 7B36           E8         0221            call	_write_word
29551 7B39           83C4                   06  add	sp,*6
29552                                           !BCC_EOS
29553                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29554 7B3C           8B46         08            mov	ax,8[bp]
29555 7B3F           40                         inc	ax
29556 7B40           40                         inc	ax
29557 7B41           8946         08            mov	8[bp],ax
29558                                           !BCC_EOS
29559                                           ! 4064         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29560                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29561 7B44           FF76         08            push	8[bp]
29562                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29563 7B47           FF76         06            push	6[bp]
29564                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29565 7B4A           E8         01E2            call	_read_word
29566 7B4D           83C4                   04  add	sp,*4
29567                                           ! Debug: list unsigned short = ax+0 (used reg = )
29568 7B50           50                         push	ax
29569                                           ! Debug: list int = const $10C (used reg = )
29570 7B51           B8                   010C  mov	ax,#$10C
29571 7B54           50                         push	ax
29572                                           ! Debug: list int = const 0 (used reg = )
29573 7B55           31C0                       xor	ax,ax
29574 7B57           50                         push	ax
29575                                           ! Debug: func () void = write_word+0 (used reg = )
29576 7B58           E8         01FF            call	_write_word
29577 7B5B           83C4                   06  add	sp,*6
29578                                           !BCC_EOS
29579                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29580 7B5E           8B46         08            mov	ax,8[bp]
29581 7B61           40                         inc	ax
29582 7B62           40                         inc	ax
29583 7B63           8946         08            mov	8[bp],ax
29584                                           !BCC_EOS
29585                                           ! 4065         write_word(0, 0x4
29586                                           ! 4065 3 * 4 + 2, read_word(ES, BX)); BX += 2;
29587                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29588 7B66           FF76         08            push	8[bp]
29589                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29590 7B69           FF76         06            push	6[bp]
29591                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29592 7B6C           E8         01C0            call	_read_word
29593 7B6F           83C4                   04  add	sp,*4
29594                                           ! Debug: list unsigned short = ax+0 (used reg = )
29595 7B72           50                         push	ax
29596                                           ! Debug: list int = const $10E (used reg = )
29597 7B73           B8                   010E  mov	ax,#$10E
29598 7B76           50                         push	ax
29599                                           ! Debug: list int = const 0 (used reg = )
29600 7B77           31C0                       xor	ax,ax
29601 7B79           50                         push	ax
29602                                           ! Debug: func () void = write_word+0 (used reg = )
29603 7B7A           E8         01DD            call	_write_word
29604 7B7D           83C4                   06  add	sp,*6
29605                                           !BCC_EOS
29606                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29607 7B80           8B46         08            mov	ax,8[bp]
29608 7B83           40                         inc	ax
29609 7B84           40                         inc	ax
29610 7B85           8946         08            mov	8[bp],ax
29611                                           !BCC_EOS
29612                                           ! 4066     }
29613                                           ! 4067     if (CX & 4) {
29614                       00007B88            .29A:
29615                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29616 7B88           8A46         04            mov	al,4[bp]
29617 7B8B           24                     04  and	al,*4
29618 7B8D           84C0                       test	al,al
29619 7B8F         0F84         0096            beq 	.2A1
29620                       00007B93            .2A2:
29621                                           ! 4068         BX++;
29622                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29623 7B93           8B46         08            mov	ax,8[bp]
29624 7B96           40                         inc	ax
29625 7B97           8946         08            mov	8[bp],ax
29626                                           !BCC_EOS
29627                                           ! 4069         v = read_byte(ES, BX); BX++;
29628                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29629 7B9A           FF76         08            push	8[bp]
29630                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29631 7B9D           FF76         06            push	6[bp]
29632                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29633 7BA0           E8         0179            call	_read_byte
29634 7BA3           83C4                   04  add	sp,*4
29635                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29636 7BA6           30E4                       xor	ah,ah
29637 7BA8           8946         FA            mov	-6[bp],ax
29638                                           !BCC_EOS
29639                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29640 7BAB           8B46         08            mov	ax,8[bp]
29641 7BAE           40                         inc	ax
29642 7BAF           8946         08            mov	8[bp],ax
29643                                           !BCC_EOS
29644                                           ! 4070         outb(0x3c6, read_byte(ES, BX)); BX++;
29645                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29646 7BB2           FF76         08            push	8[bp]
29647                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29648 7BB5           FF76         06            push	6[bp]
29649                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29650 7BB8           E8         0161            call	_read_byte
29651 7BBB           83C4                   04  add	sp,*4
29652                                           ! Debug: list unsigned char = al+0 (used reg = )
29653 7BBE           30E4                       xor	ah,ah
29654 7BC0           50                         push	ax
29655                                           ! Debug: list int = const $3C6 (used reg = )
29656 7BC1           B8                   03C6  mov	ax,#$3C6
29657 7BC4           50                         push	ax
29658                                           ! Debug: func () void = outb+0 (used reg = )
29659 7BC5           E8         01C0            call	_outb
29660 7BC8           83C4                   04  add	sp,*4
29661                                           !BCC_EOS
29662                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29663 7BCB           8B46         08            mov	ax,8[bp]
29664 7BCE           40                         inc	ax
29665 7BCF           8946         08            mov	8[bp],ax
29666                                           !BCC_EOS
29667                                           ! 4071         outb(0x3c8,0x00);
29668                                           ! Debug: list int = const 0 (used reg = )
29669 7BD2           31C0                       xor	ax,ax
29670 7BD4           50                         push	ax
29671                                           ! Debug: list int = const $3C8 (used reg = )
29672 7BD5           B8                   03C8  mov	ax,#$3C8
29673 7BD8           50                         push	ax
29674                                           ! Debug: func () void = outb+0 (used reg = )
29675 7BD9           E8         01AC            call	_outb
29676 7BDC           83C4                   04  add	sp,*4
29677                                           !BCC_EOS
29678                                           ! 4072         for(i=0;i<256*3;i++) {
29679                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29680 7BDF           31C0                       xor	ax,ax
29681 7BE1           8946         FE            mov	-2[bp],ax
29682                                           !BCC_EOS
29683                                           !BCC_EOS
29684 7BE4           EB           27            jmp .2A5
29685                       00007BE6            .2A6:
29686                                           ! 4073             outb(0x3c9, read_byte(ES, BX)); BX++;
29687                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29688 7BE6           FF76         08            push	8[bp]
29689                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29690 7BE9           FF76         06            push	6[bp]
29691                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29692 7BEC           E8         012D            call	_read_byte
29693 7BEF           83C4                   04  add	sp,*4
29694                                           ! Debug: list unsigned char = al+0 (used reg = )
29695 7BF2           30E4                       xor	ah,ah
29696 7BF4           50                         push	ax
29697                                           ! Debug: list int = const $3C9 (used reg = )
29698 7BF5           B8                   03C9  mov	ax,#$3C9
29699 7BF8           50                         push	ax
29700                                           ! Debug: func () void = outb+0 (used reg = )
29701 7BF9           E8         018C            call	_outb
29702 7BFC           83C4                   04  add	sp,*4
29703                                           !BCC_EOS
29704                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29705 7BFF           8B46         08            mov	ax,8[bp]
29706 7C02           40                         inc	ax
29707 7C03           8946         08            mov	8[bp],ax
29708                                           !BCC_EOS
29709                                           ! 4074         }
29710                                           ! 4075         BX++;
29711                       00007C06            .2A4:
29712                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29713 7C06           8B46         FE            mov	ax,-2[bp]
29714 7C09           40                         inc	ax
29715 7C0A           8946         FE            mov	-2[bp],ax
29716                       00007C0D            .2A5:
29717                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29718 7C0D           8B46         FE            mov	ax,-2[bp]
29719 7C10           3D                   0300  cmp	ax,#$300
29720 7C13           72           D1            jb 	.2A6
29721                       00007C15            .2A7:
29722                       00007C15            .2A3:
29723                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29724 7C15           8B46         08            mov	ax,8[bp]
29725 7C18           40                         inc	ax
29726 7C19           8946         08            mov	8[bp],ax
29727                                           !BCC_EOS
29728                                           ! 4076         outb(0x3c8, v);
29729                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29730 7C1C           FF76         FA            push	-6[bp]
29731                                           ! Debug: list int = const $3C8 (used reg = )
29732 7C1F           B8                   03C8  mov	ax,#$3C8
29733 7C22           50                         push	ax
29734                                           ! Debug: func () void = outb+0 (used reg = )
29735 7C23           E8         0162            call	_outb
29736 7C26           83C4                   04  add	sp,*4
29737                                           !BCC_EOS
29738                                           ! 4077     }
29739                                           ! 4078     return BX;
29740                       00007C29            .2A1:
29741 7C29           8B46         08            mov	ax,8[bp]
29742 7C2C           89EC                       mov	sp,bp
29743 7C2E           5D                         pop	bp
29744 7C2F           C3                         ret
29745                                           !BCC_EOS
29746                                           ! 4079 }
29747                                           ! 4080 static Bit8u find_vga_entry(mode)
29748                                           ! 4081 Bit8u mode;
29749                       00007C30            _find_vga_entry:
29750                                           !BCC_EOS
29751                                           ! 4082 {
29752                                           ! 4083  Bit8u i,line=0xFF;
29753 7C30           55                         push	bp
29754 7C31           89E5                       mov	bp,sp
29755 7C33           4C                         dec	sp
29756 7C34           4C                         dec	sp
29757                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29758 7C35           B0                     FF  mov	al,#$FF
29759 7C37           8846         FE            mov	-2[bp],al
29760                                           !BCC_EOS
29761                                           ! 4084  for(i=0;i<=15;i++)
29762                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29763 7C3A           30C0                       xor	al,al
29764 7C3C           8846         FF            mov	-1[bp],al
29765                                           !BCC_EOS
29766                                           !BCC_EOS
29767                                           ! 4085   if(vga_modes[i].svgamode==mode)
29768 7C3F           EB           23            jmp .2AA
29769                       00007C41            .2AB:
29770                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29771 7C41           8A46         FF            mov	al,-1[bp]
29772 7C44           30E4                       xor	ah,ah
29773 7C46           B1                     03  mov	cl,*3
29774 7C48           D3E0                       shl	ax,cl
29775 7C4A           89C3                       mov	bx,ax
29776                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29777 7C4C           8A87       020D            mov	al,_vga_modes[bx]
29778 7C50           3A46         04            cmp	al,4[bp]
29779 7C53           75           08            jne 	.2AC
29780                       00007C55            .2AD:
29781                                           ! 4086    {line=i;
29782                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29783 7C55           8A46         FF            mov	al,-1[bp]
29784 7C58           8846         FE            mov	-2[bp],al
29785                                           !BCC_EOS
29786                                           ! 4087     break;
29787 7C5B           EB           0E            jmp .2A8
29788                                           !BCC_EOS
29789                                           ! 4088    }
29790                                           ! 4089  return line;
29791                       00007C5D            .2AC:
29792                       00007C5D            .2A9:
29793                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29794 7C5D           8A46         FF            mov	al,-1[bp]
29795 7C60           40                         inc	ax
29796 7C61           8846         FF            mov	-1[bp],al
29797                       00007C64            .2AA:
29798                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29799 7C64           8A46         FF            mov	al,-1[bp]
29800 7C67           3C                     0F  cmp	al,*$F
29801 7C69           76           D6            jbe	.2AB
29802                       00007C6B            .2AE:
29803                       00007C6B            .2A8:
29804 7C6B           8A46         FE            mov	al,-2[bp]
29805 7C6E           89EC                       mov	sp,bp
29806 7C70           5D                         pop	bp
29807 7C71           C3                         ret
29808                                           !BCC_EOS
29809                                           ! 4090 }
29810                                           ! 4091 static void memsetb(seg,offset,value,count)
29811                                           ! Register BX used in function find_vga_entry
29812                                           ! 4092   Bit16u seg;
29813                       00007C72            _memsetb:
29814                                           !BCC_EOS
29815                                           ! 4093   Bit16u offset;
29816                                           !BCC_EOS
29817                                           ! 4094   Bit16u value;
29818                                           !BCC_EOS
29819                                           ! 4095   Bit16u count;
29820                                           !BCC_EOS
29821                                           ! 4096 {
29822                                           ! 4097 #asm
29823                                           !BCC_ASM
29824                       00000008            _memsetb.count	set	8
29825                       00000002            _memsetb.seg	set	2
29826                       00000006            _memsetb.value	set	6
29827                       00000004            _memsetb.offset	set	4
29828 7C72           55                           push bp
29829 7C73           89E5                         mov bp, sp
29830 7C75           50                             push ax
29831 7C76           51                             push cx
29832 7C77           06                             push es
29833 7C78           57                             push di
29834 7C79           8B4E         0A                mov cx, 10[bp] ; count
29835 7C7C           83F9                   00      cmp cx, #0x00
29836 7C7F           74           10                je memsetb_end
29837 7C81           8B46         04                mov ax, 4[bp] ; segment
29838 7C84           8EC0                           mov es, ax
29839 7C86           8B46         06                mov ax, 6[bp] ; offset
29840 7C89           89C7                           mov di, ax
29841 7C8B           8A46         08                mov al, 8[bp] ; value
29842 7C8E           FC                             cld
29843 7C8F           F3                             rep
29844 7C90           AA                              stosb
29845                       00007C91            memsetb_end:
29846 7C91           5F                             pop di
29847 7C92           07                             pop es
29848 7C93           59                             pop cx
29849 7C94           58                             pop ax
29850 7C95           5D                           pop bp
29851                                           ! 4121 endasm
29852                                           !BCC_ENDASM
29853                                           ! 4122 }
29854 7C96           C3                         ret
29855                                           ! 4123 static void memsetw(seg,offset,value,count)
29856                                           ! 4124   Bit16u seg;
29857                       00007C97            _memsetw:
29858                                           !BCC_EOS
29859                                           ! 4125   Bit16u offset;
29860                                           !BCC_EOS
29861                                           ! 4126   Bit16u value;
29862                                           !BCC_EOS
29863                                           ! 4127   Bit16u count;
29864                                           !BCC_EOS
29865                                           ! 4128 {
29866                                           ! 4129 #asm
29867                                           !BCC_ASM
29868                       00000008            _memsetw.count	set	8
29869                       00000002            _memsetw.seg	set	2
29870                       00000006            _memsetw.value	set	6
29871                       00000004            _memsetw.offset	set	4
29872 7C97           55                           push bp
29873 7C98           89E5                         mov bp, sp
29874 7C9A           50                             push ax
29875 7C9B           51                             push cx
29876 7C9C           06                             push es
29877 7C9D           57                             push di
29878 7C9E           8B4E         0A                mov cx, 10[bp] ; count
29879 7CA1           83F9                   00      cmp cx, #0x00
29880 7CA4           74           10                je memsetw_end
29881 7CA6           8B46         04                mov ax, 4[bp] ; segment
29882 7CA9           8EC0                           mov es, ax
29883 7CAB           8B46         06                mov ax, 6[bp] ; offset
29884 7CAE           89C7                           mov di, ax
29885 7CB0           8B46         08                mov ax, 8[bp] ; value
29886 7CB3           FC                             cld
29887 7CB4           F3                             rep
29888 7CB5           AB                              stosw
29889                       00007CB6            memsetw_end:
29890 7CB6           5F                             pop di
29891 7CB7           07                             pop es
29892 7CB8           59                             pop cx
29893 7CB9           58                             pop ax
29894 7CBA           5D                           pop bp
29895                                           ! 4153 endasm
29896                                           !BCC_ENDASM
29897                                           ! 4154 }
29898 7CBB           C3                         ret
29899                                           ! 4155 static void memcpyb(dseg,doffset,sseg,soffset,count)
29900                                           ! 4156   Bit16u dseg;
29901                       00007CBC            _memcpyb:
29902                                           !BCC_EOS
29903                                           ! 4157   Bit16u doffset;
29904                                           !BCC_EOS
29905                                           ! 4158   Bit16u sseg;
29906                                           !BCC_EOS
29907                                           ! 4159   Bit16u soffset;
29908                                           !BCC_EOS
29909                                           ! 4160   Bit16u count;
29910                                           !BCC_EOS
29911                                           ! 4161 {
29912                                           ! 4162 #asm
29913                                           !BCC_ASM
29914                       0000000A            _memcpyb.count	set	$A
29915                       00000006            _memcpyb.sseg	set	6
29916                       00000008            _memcpyb.soffset	set	8
29917                       00000002            _memcpyb.dseg	set	2
29918                       00000004            _memcpyb.doffset	set	4
29919 7CBC           55                           push bp
29920 7CBD           89E5                         mov bp, sp
29921 7CBF           50                             push ax
29922 7CC0           51                             push cx
29923 7CC1           06                             push es
29924 7CC2           57                             push di
29925 7CC3           1E                             push ds
29926 7CC4           56                             push si
29927 7CC5           8B4E         0C                mov cx, 12[bp] ; count
29928 7CC8           83F9                   00      cmp cx, #0x0000
29929 7CCB           74           17                je memcpyb_end
29930 7CCD           8B46         04                mov ax, 4[bp] ; dsegment
29931 7CD0           8EC0                           mov es, ax
29932 7CD2           8B46         06                mov ax, 6[bp] ; doffset
29933 7CD5           89C7                           mov di, ax
29934 7CD7           8B46         08                mov ax, 8[bp] ; ssegment
29935 7CDA           8ED8                           mov ds, ax
29936 7CDC           8B46         0A                mov ax, 10[bp] ; soffset
29937 7CDF           89C6                           mov si, ax
29938 7CE1           FC                             cld
29939 7CE2           F3                             rep
29940 7CE3           A4                              movsb
29941                       00007CE4            memcpyb_end:
29942 7CE4           5E                             pop si
29943 7CE5           1F                             pop ds
29944 7CE6           5F                             pop di
29945 7CE7           07                             pop es
29946 7CE8           59                             pop cx
29947 7CE9           58                             pop ax
29948 7CEA           5D                           pop bp
29949                                           ! 4193 endasm
29950                                           !BCC_ENDASM
29951                                           ! 4194 }
29952 7CEB           C3                         ret
29953                                           ! 4195 static void me
29954                                           ! 4195 mcpyw(dseg,doffset,sseg,soffset,count)
29955                                           ! 4196   Bit16u dseg;
29956                       00007CEC            _memcpyw:
29957                                           !BCC_EOS
29958                                           ! 4197   Bit16u doffset;
29959                                           !BCC_EOS
29960                                           ! 4198   Bit16u sseg;
29961                                           !BCC_EOS
29962                                           ! 4199   Bit16u soffset;
29963                                           !BCC_EOS
29964                                           ! 4200   Bit16u count;
29965                                           !BCC_EOS
29966                                           ! 4201 {
29967                                           ! 4202 #asm
29968                                           !BCC_ASM
29969                       0000000A            _memcpyw.count	set	$A
29970                       00000006            _memcpyw.sseg	set	6
29971                       00000008            _memcpyw.soffset	set	8
29972                       00000002            _memcpyw.dseg	set	2
29973                       00000004            _memcpyw.doffset	set	4
29974 7CEC           55                           push bp
29975 7CED           89E5                         mov bp, sp
29976 7CEF           50                             push ax
29977 7CF0           51                             push cx
29978 7CF1           06                             push es
29979 7CF2           57                             push di
29980 7CF3           1E                             push ds
29981 7CF4           56                             push si
29982 7CF5           8B4E         0C                mov cx, 12[bp] ; count
29983 7CF8           83F9                   00      cmp cx, #0x0000
29984 7CFB           74           17                je memcpyw_end
29985 7CFD           8B46         04                mov ax, 4[bp] ; dsegment
29986 7D00           8EC0                           mov es, ax
29987 7D02           8B46         06                mov ax, 6[bp] ; doffset
29988 7D05           89C7                           mov di, ax
29989 7D07           8B46         08                mov ax, 8[bp] ; ssegment
29990 7D0A           8ED8                           mov ds, ax
29991 7D0C           8B46         0A                mov ax, 10[bp] ; soffset
29992 7D0F           89C6                           mov si, ax
29993 7D11           FC                             cld
29994 7D12           F3                             rep
29995 7D13           A5                              movsw
29996                       00007D14            memcpyw_end:
29997 7D14           5E                             pop si
29998 7D15           1F                             pop ds
29999 7D16           5F                             pop di
30000 7D17           07                             pop es
30001 7D18           59                             pop cx
30002 7D19           58                             pop ax
30003 7D1A           5D                           pop bp
30004                                           ! 4233 endasm
30005                                           !BCC_ENDASM
30006                                           ! 4234 }
30007 7D1B           C3                         ret
30008                                           ! 4235 static Bit8u
30009                                           ! 4236 read_byte(seg, offset)
30010                                           ! 4237   Bit16u seg;
30011                       00007D1C            _read_byte:
30012                                           !BCC_EOS
30013                                           ! 4238   Bit16u offset;
30014                                           !BCC_EOS
30015                                           ! 4239 {
30016                                           ! 4240 #asm
30017                                           !BCC_ASM
30018                       00000002            _read_byte.seg	set	2
30019                       00000004            _read_byte.offset	set	4
30020 7D1C           55                           push bp
30021 7D1D           89E5                         mov bp, sp
30022 7D1F           53                             push bx
30023 7D20           1E                             push ds
30024 7D21           8B46         04                mov ax, 4[bp] ; segment
30025 7D24           8ED8                           mov ds, ax
30026 7D26           8B5E         06                mov bx, 6[bp] ; offset
30027 7D29           8A07                           mov al, [bx]
30028                                               ;; al = return value (byte)
30029 7D2B           1F                             pop ds
30030 7D2C           5B                             pop bx
30031 7D2D           5D                           pop bp
30032                                           ! 4253 endasm
30033                                           !BCC_ENDASM
30034                                           ! 4254 }
30035 7D2E           C3                         ret
30036                                           ! 4255 static Bit16u
30037                                           ! 4256 read_word(seg, offset)
30038                                           ! 4257   Bit16u seg;
30039                       00007D2F            _read_word:
30040                                           !BCC_EOS
30041                                           ! 4258   Bit16u offset;
30042                                           !BCC_EOS
30043                                           ! 4259 {
30044                                           ! 4260 #asm
30045                                           !BCC_ASM
30046                       00000002            _read_word.seg	set	2
30047                       00000004            _read_word.offset	set	4
30048 7D2F           55                           push bp
30049 7D30           89E5                         mov bp, sp
30050 7D32           53                             push bx
30051 7D33           1E                             push ds
30052 7D34           8B46         04                mov ax, 4[bp] ; segment
30053 7D37           8ED8                           mov ds, ax
30054 7D39           8B5E         06                mov bx, 6[bp] ; offset
30055 7D3C           8B07                           mov ax, [bx]
30056                                               ;; ax = return value (word)
30057 7D3E           1F                             pop ds
30058 7D3F           5B                             pop bx
30059 7D40           5D                           pop bp
30060                                           ! 4273 endasm
30061                                           !BCC_ENDASM
30062                                           ! 4274 }
30063 7D41           C3                         ret
30064                                           ! 4275 static void
30065                                           ! 4276 write_byte(seg, offset, data)
30066                                           ! 4277   Bit16u seg;
30067                       00007D42            _write_byte:
30068                                           !BCC_EOS
30069                                           ! 4278   Bit16u offset;
30070                                           !BCC_EOS
30071                                           ! 4279   Bit8u data;
30072                                           !BCC_EOS
30073                                           ! 4280 {
30074                                           ! 4281 #asm
30075                                           !BCC_ASM
30076                       00000002            _write_byte.seg	set	2
30077                       00000006            _write_byte.data	set	6
30078                       00000004            _write_byte.offset	set	4
30079 7D42           55                           push bp
30080 7D43           89E5                         mov bp, sp
30081 7D45           50                             push ax
30082 7D46           53                             push bx
30083 7D47           1E                             push ds
30084 7D48           8B46         04                mov ax, 4[bp] ; segment
30085 7D4B           8ED8                           mov ds, ax
30086 7D4D           8B5E         06                mov bx, 6[bp] ; offset
30087 7D50           8A46         08                mov al, 8[bp] ; data byte
30088 7D53           8807                           mov [bx], al ; write data byte
30089 7D55           1F                             pop ds
30090 7D56           5B                             pop bx
30091 7D57           58                             pop ax
30092 7D58           5D                           pop bp
30093                                           ! 4296 endasm
30094                                           !BCC_ENDASM
30095                                           ! 4297 }
30096 7D59           C3                         ret
30097                                           ! 4298 static void
30098                                           ! 4299 write_word(seg, offset, data)
30099                                           ! 4300   Bit16u seg;
30100                       00007D5A            _write_word:
30101                                           !BCC_EOS
30102                                           ! 4301   Bit16u offset;
30103                                           !BCC_EOS
30104                                           ! 4302   Bit16u data;
30105                                           !BCC_EOS
30106                                           ! 4303 {
30107                                           ! 4304 #asm
30108                                           !BCC_ASM
30109                       00000002            _write_word.seg	set	2
30110                       00000006            _write_word.data	set	6
30111                       00000004            _write_word.offset	set	4
30112 7D5A           55                           push bp
30113 7D5B           89E5                         mov bp, sp
30114 7D5D           50                             push ax
30115 7D5E           53                             push bx
30116 7D5F           1E                             push ds
30117 7D60           8B46         04                mov ax, 4[bp] ; segment
30118 7D63           8ED8                           mov ds, ax
30119 7D65           8B5E         06                mov bx, 6[bp] ; offset
30120 7D68           8B46         08                mov ax, 8[bp] ; data word
30121 7D6B           8907                           mov [bx], ax ; write data word
30122 7D6D           1F                             pop ds
30123 7D6E           5B                             pop bx
30124 7D6F           58                             pop ax
30125 7D70           5D                           pop bp
30126                                           ! 4319 endasm
30127                                           !BCC_ENDASM
30128                                           ! 4320 }
30129 7D71           C3                         ret
30130                                           ! 4321  Bit8u
30131                                           ! 4322 inb(port)
30132                                           ! 4323   Bit16u port;
30133                                           export	_inb
30134                       00007D72            _inb:
30135                                           !BCC_EOS
30136                                           ! 4324 {
30137                                           ! 4325 #asm
30138                                           !BCC_ASM
30139                       00000002            _inb.port	set	2
30140 7D72           55                           push bp
30141 7D73           89E5                         mov bp, sp
30142 7D75           52                             push dx
30143 7D76           8B56         04                mov dx, 4[bp]
30144 7D79           EC                             in al, dx
30145 7D7A           5A                             pop dx
30146 7D7B           5D                           pop bp
30147                                           ! 4333 endasm
30148                                           !BCC_ENDASM
30149                                           ! 4334 }
30150 7D7C           C3                         ret
30151                                           ! 4335   Bit16u
30152                                           ! 4336 inw(port)
30153                                           ! 4337   Bit16u port;
30154                                           export	_inw
30155                       00007D7D            _inw:
30156                                           !BCC_EOS
30157                                           ! 4338 {
30158                                           ! 4339 #asm
30159                                           !BCC_ASM
30160                       00000002            _inw.port	set	2
30161 7D7D           55                           push bp
30162 7D7E           89E5                         mov bp, sp
30163 7D80           52                             push dx
30164 7D81           8B56         04                mov dx, 4[bp]
30165 7D84           ED                             in ax, dx
30166 7D85           5A                             pop dx
30167 7D86           5D                           pop bp
30168                                           ! 4347 endasm
30169                                           !BCC_ENDASM
30170                                           ! 4348 }
30171 7D87           C3                         ret
30172                                           ! 4349   void
30173                                           ! 4350 outb(port, val)
30174                                           ! 4351   Bit16u port;
30175                                           export	_outb
30176                       00007D88            _outb:
30177                                           !BCC_EOS
30178                                           ! 4352   Bit8u val;
30179                                           !BCC_EOS
30180                                           ! 4353 {
30181                                           ! 4354 #asm
30182                                           !BCC_ASM
30183                       00000004            _outb.val	set	4
30184                       00000002            _outb.port	set	2
30185 7D88           55                           push bp
30186 7D89           89E5                         mov bp, sp
30187 7D8B           50                             push ax
30188 7D8C           52                             push dx
30189 7D8D           8B56         04                mov dx, 4[bp]
30190 7D90           8A46         06                mov al, 6[bp]
30191 7D93           EE                             out dx, al
30192 7D94           5A                             pop dx
30193 7D95           58                             pop ax
30194 7D96           5D                           pop bp
30195                                           ! 4365 endasm
30196                                           !BCC_ENDASM
30197                                           ! 4366 }
30198 7D97           C3                         ret
30199                                           ! 4367   void
30200                                           ! 4368 outw(port, val)
30201                                           ! 4369   Bit16u port;
30202                                           export	_outw
30203                       00007D98            _outw:
30204                                           !BCC_EOS
30205                                           ! 4370   Bit16u val;
30206                                           !BCC_EOS
30207                                           ! 4371 {
30208                                           ! 4372 #asm
30209                                           !BCC_ASM
30210                       00000004            _outw.val	set	4
30211                       00000002            _outw.port	set	2
30212 7D98           55                           push bp
30213 7D99           89E5                         mov bp, sp
30214 7D9B           50                             push ax
30215 7D9C           52                             push dx
30216 7D9D           8B56         04                mov dx, 4[bp]
30217 7DA0           8B46         06                mov ax, 6[bp]
30218 7DA3           EF                             out dx, ax
30219 7DA4           5A                             pop dx
30220 7DA5           58                             pop ax
30221 7DA6           5D                           pop bp
30222                                           ! 4383 endasm
30223                                           !BCC_ENDASM
30224                                           ! 4384 }
30225 7DA7           C3                         ret
30226                                           ! 4385 Bit16u get_SS()
30227                                           ! 4386 {
30228                                           export	_get_SS
30229                       00007DA8            _get_SS:
30230                                           ! 4387 #asm
30231                                           !BCC_ASM
30232 7DA8           8CD0                         mov ax, ss
30233                                           ! 4389 endasm
30234                                           !BCC_ENDASM
30235                                           ! 4390 }
30236 7DAA           C3                         ret
30237                                           ! 4391 void unimplemented()
30238                                           ! 4392 {
30239                                           export	_unimplemented
30240                       00007DAB            _unimplemented:
30241                                           ! 4393  printf("--> Unimplemented\n");
30242 7DAB           55                         push	bp
30243 7DAC           89E5                       mov	bp,sp
30244                                           ! Debug: list * char = .2AF+0 (used reg = )
30245 7DAE           BB                   A081  mov	bx,#.2AF
30246 7DB1           53                         push	bx
30247                                           ! Debug: func () void = printf+0 (used reg = )
30248 7DB2           E8         0012            call	_printf
30249 7DB5           89EC                       mov	sp,bp
30250                                           !BCC_EOS
30251                                           ! 4394 }
30252 7DB7           5D                         pop	bp
30253 7DB8           C3                         ret
30254                                           ! 4395 void unknown()
30255                                           ! Register BX used in function unimplemented
30256                                           ! 4396 {
30257                                           export	_unknown
30258                       00007DB9            _unknown:
30259                                           ! 4397  printf("--> Unknown int10\n");
30260 7DB9           55                         push	bp
30261 7DBA           89E5                       mov	bp,sp
30262                                           ! Debug: list * char = .2B0+0 (used reg = )
30263 7DBC           BB                   A06E  mov	bx,#.2B0
30264 7DBF           53                         push	bx
30265                                           ! Debug: func () void = printf+0 (used reg = )
30266 7DC0           E8         0004            call	_printf
30267 7DC3           89EC                       mov	sp,bp
30268                                           !BCC_EOS
30269                                           ! 4398 }
30270 7DC5           5D                         pop	bp
30271 7DC6           C3                         ret
30272                                           ! 4399 void printf(s)
30273                                           ! Register BX used in function unknown
30274                                           ! 4400   Bit8u *s;
30275                                           export	_printf
30276                       00007DC7            _printf:
30277                                           !BCC_EOS
30278                                           ! 4401 {
30279                                           ! 4402   Bit8u c, format_char;
30280                                           !BCC_EOS
30281                                           ! 4403   Boolean in_format;
30282                                           !BCC_EOS
30283                                           ! 4404   unsigned format_width, i;
30284                                           !BCC_EOS
30285                                           ! 4405   Bit16u *arg_ptr;
30286                                           !BCC_EOS
30287                                           ! 4406   Bit16u arg_seg, arg, digit, nibble, shift_count;
30288                                           !BCC_EOS
30289                                           ! 4407   arg_ptr = &s;
30290 7DC7           55                         push	bp
30291 7DC8           89E5                       mov	bp,sp
30292 7DCA           83C4                   EC  add	sp,*-$14
30293                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30294 7DCD           8D5E         04            lea	bx,4[bp]
30295 7DD0           895E         F6            mov	-$A[bp],bx
30296                                           !BCC_EOS
30297                                           ! 4408   arg_seg = get_SS();
30298                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30299 7DD3           E8         FFD2            call	_get_SS
30300                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30301 7DD6           8946         F4            mov	-$C[bp],ax
30302                                           !BCC_EOS
30303                                           ! 4409   in_format = 0;
30304                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30305 7DD9           31C0                       xor	ax,ax
30306 7DDB           8946         FC            mov	-4[bp],ax
30307                                           !BCC_EOS
30308                                           ! 4410   format_width = 0;
30309                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30310 7DDE           31C0                       xor	ax,ax
30311 7DE0           8946         FA            mov	-6[bp],ax
30312                                           !BCC_EOS
30313                                           ! 4411   while (c = read_byte(0xc000, s)) {
30314 7DE3           E9         0104            br 	.2B2
30315                       00007DE6            .2B3:
30316                                           ! 4412     if ( c == '%' ) {
30317                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30318 7DE6           8A46         FF            mov	al,-1[bp]
30319 7DE9           3C                     25  cmp	al,*$25
30320 7DEB           75           0E            jne 	.2B4
30321                       00007DED            .2B5:
30322                                           ! 4413       in_format = 1;
30323                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30324 7DED           B8                   0001  mov	ax,*1
30325 7DF0           8946         FC            mov	-4[bp],ax
30326                                           !BCC_EOS
30327                                           ! 4414       format_width = 0;
30328                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30329 7DF3           31C0                       xor	ax,ax
30330 7DF5           8946         FA            mov	-6[bp],ax
30331                                           !BCC_EOS
30332                                           ! 4415       }
30333                                           ! 4416     else if (in_format) {
30334 7DF8           E9         00E8            br 	.2B6
30335                       00007DFB            .2B4:
30336 7DFB           8B46         FC            mov	ax,-4[bp]
30337 7DFE           85C0                       test	ax,ax
30338 7E00         0F84         00CF            beq 	.2B7
30339                       00007E04            .2B8:
30340                                           ! 4417       if ( (c>='0') && (c<='9') ) {
30341                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30342 7E04           8A46         FF            mov	al,-1[bp]
30343 7E07           3C                     30  cmp	al,*$30
30344 7E09           72           28            jb  	.2B9
30345                       00007E0B            .2BB:
30346                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30347 7E0B           8A46         FF            mov	al,-1[bp]
30348 7E0E           3C                     39  cmp	al,*$39
30349 7E10           77           21            ja  	.2B9
30350                       00007E12            .2BA:
30351                                           ! 4418         format_width = (format_width * 10) + (c - '0');
30352                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30353 7E12           8A46         FF            mov	al,-1[bp]
30354 7E15           30E4                       xor	ah,ah
30355 7E17           05                   FFD0  add	ax,*-$30
30356 7E1A           50                         push	ax
30357                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30358 7E1B           8B46         FA            mov	ax,-6[bp]
30359 7E1E           89C2                       mov	dx,ax
30360 7E20           D1E0                       shl	ax,*1
30361 7E22           D1E0                       shl	ax,*1
30362 7E24           01D0                       add	ax,dx
30363 7E26           D1E0                       shl	ax,*1
30364                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30365 7E28           0346         EA            add	ax,-$16[bp]
30366 7E2B           44                         inc	sp
30367 7E2C           44                         inc	sp
30368                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30369 7E2D           8946         FA            mov	-6[bp],ax
30370                                           !BCC_EOS
30371                                           ! 4419         }
30372                                           ! 4420       else if (c == 'x') {
30373 7E30           E9         009E            br 	.2BC
30374                       00007E33            .2B9:
30375                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30376 7E33           8A46         FF            mov	al,-1[bp]
30377 7E36           3C                     78  cmp	al,*$78
30378 7E38         0F85         0095            bne 	.2BD
30379                       00007E3C            .2BE:
30380                                           ! 4421         arg_ptr++;
30381                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30382 7E3C           8B5E         F6            mov	bx,-$A[bp]
30383 7E3F           43                         inc	bx
30384 7E40           43                         inc	bx
30385 7E41           895E         F6            mov	-$A[bp],bx
30386                                           !BCC_EOS
30387                                           ! 4422         arg = read_word(arg_seg, arg_ptr);
30388                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30389 7E44           FF76         F6            push	-$A[bp]
30390                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30391 7E47           FF76         F4            push	-$C[bp]
30392                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30393 7E4A           E8         FEE2            call	_read_word
30394 7E4D           83C4                   04  add	sp,*4
30395                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30396 7E50           8946         F2            mov	-$E[bp],ax
30397                                           !BCC_EOS
30398                                           ! 4423         if (format_width == 0)
30399                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30400 7E53           8B46         FA            mov	ax,-6[bp]
30401 7E56           85C0                       test	ax,ax
30402 7E58           75           06            jne 	.2BF
30403                       00007E5A            .2C0:
30404                                           ! 4424           format_width = 4;
30405                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30406 7E5A           B8                   0004  mov	ax,*4
30407 7E5D           8946         FA            mov	-6[bp],ax
30408                                           !BCC_EOS
30409                                           ! 4425         i = 0;
30410                       00007E60            .2BF:
30411                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30412 7E60           31C0                       xor	ax,ax
30413 7E62           8946         F8            mov	-8[bp],ax
30414                                           !BCC_EOS
30415                                           ! 4426         digit = format_width - 1;
30416                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30417 7E65           8B46         FA            mov	ax,-6[bp]
30418                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30419 7E68           48                         dec	ax
30420 7E69           8946         F0            mov	-$10[bp],ax
30421                                           !BCC_EOS
30422                                           ! 4427         for (i=0; i<format_width; i++) {
30423                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30424 7E6C           31C0                       xor	ax,ax
30425 7E6E           8946         F8            mov	-8[bp],ax
30426                                           !BCC_EOS
30427                                           !BCC_EOS
30428 7E71           EB           51            jmp .2C3
30429                       00007E73            .2C4:
30430                                           ! 4428           nibble = (arg >> (4 * digit)) & 0x000f;
30431                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30432                                           ! Debug: expression subtree swapping
30433 7E73           8B46         F0            mov	ax,-$10[bp]
30434 7E76           D1E0                       shl	ax,*1
30435 7E78           D1E0                       shl	ax,*1
30436                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30437 7E7A           89C3                       mov	bx,ax
30438 7E7C           8B46         F2            mov	ax,-$E[bp]
30439 7E7F           89D9                       mov	cx,bx
30440 7E81           D3E8                       shr	ax,cl
30441                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30442 7E83           24                     0F  and	al,*$F
30443                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30444 7E85           30E4                       xor	ah,ah
30445 7E87           8946         EE            mov	-$12[bp],ax
30446                                           !BCC_EOS
30447                                           ! 4429           if (nibble <= 9)
30448                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30449 7E8A           8B46         EE            mov	ax,-$12[bp]
30450 7E8D           3D                   0009  cmp	ax,*9
30451 7E90           77           13            ja  	.2C5
30452                       00007E92            .2C6:
30453                                           ! 4430             outb(0xe9, nibble + '0');
30454                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30455 7E92           8B46         EE            mov	ax,-$12[bp]
30456                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30457 7E95           05                   0030  add	ax,*$30
30458 7E98           50                         push	ax
30459                                           ! Debug: list int = const $E9 (used reg = )
30460 7E99           B8                   00E9  mov	ax,#$E9
30461 7E9C           50                         push	ax
30462                                           ! Debug: func () void = outb+0 (used reg = )
30463 7E9D           E8         FEE8            call	_outb
30464 7EA0           83C4                   04  add	sp,*4
30465                                           !BCC_EOS
30466                                           ! 4431           else
30467                                           ! 4432             outb(0xe9, (nibble - 10) + 'A');
30468 7EA3           EB           11            jmp .2C7
30469                       00007EA5            .2C5:
30470                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30471 7EA5           8B46         EE            mov	ax,-$12[bp]
30472                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30473                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30474 7EA8           05                   0037  add	ax,*$37
30475 7EAB           50                         push	ax
30476                                           ! Debug: list int = const $E9 (used reg = )
30477 7EAC           B8                   00E9  mov	ax,#$E9
30478 7EAF           50                         push	ax
30479                                           ! Debug: func () void = outb+0 (used reg = )
30480 7EB0           E8         FED5            call	_outb
30481 7EB3           83C4                   04  add	sp,*4
30482                                           !BCC_EOS
30483                                           ! 4433           digit--;
30484                       00007EB6            .2C7:
30485                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30486 7EB6           8B46         F0            mov	ax,-$10[bp]
30487 7EB9           48                         dec	ax
30488 7EBA           8946         F0            mov	-$10[bp],ax
30489                                           !BCC_EOS
30490                                           ! 4434           }
30491                                           ! 4435         in_format = 0;
30492                       00007EBD            .2C2:
30493                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30494 7EBD           8B46         F8            mov	ax,-8[bp]
30495 7EC0           40                         inc	ax
30496 7EC1           8946         F8            mov	-8[bp],ax
30497                       00007EC4            .2C3:
30498                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30499 7EC4           8B46         F8            mov	ax,-8[bp]
30500 7EC7           3B46         FA            cmp	ax,-6[bp]
30501 7ECA           72           A7            jb 	.2C4
30502                       00007ECC            .2C8:
30503                       00007ECC            .2C1:
30504                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30505 7ECC           31C0                       xor	ax,ax
30506 7ECE           8946         FC            mov	-4[bp],ax
30507                                           !BCC_EOS
30508                                           ! 4436         }
30509                                           ! 4437       }
30510                       00007ED1            .2BD:
30511                       00007ED1            .2BC:
30512                                           ! 4438     else {
30513 7ED1           EB           10            jmp .2C9
30514                       00007ED3            .2B7:
30515                                           ! 4439       outb(0xe9, c);
30516                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30517 7ED3           8A46         FF            mov	al,-1[bp]
30518 7ED6           30E4                       xor	ah,ah
30519 7ED8           50                         push	ax
30520                                           ! Debug: list int = const $E9 (used reg = )
30521 7ED9           B8                   00E9  mov	ax,#$E9
30522 7EDC           50                         push	ax
30523                                           ! Debug: func () void = outb+0 (used reg = )
30524 7EDD           E8         FEA8            call	_outb
30525 7EE0           83C4                   04  add	sp,*4
30526                                           !BCC_EOS
30527                                           ! 4440       }
30528                                           ! 4441     s ++;
30529                       00007EE3            .2C9:
30530                       00007EE3            .2B6:
30531                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30532 7EE3           8B5E         04            mov	bx,4[bp]
30533 7EE6           43                         inc	bx
30534 7EE7           895E         04            mov	4[bp],bx
30535                                           !BCC_EOS
30536                                           ! 4442     }
30537                                           ! 4443 }
30538                       00007EEA            .2B2:
30539                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30540 7EEA           FF76         04            push	4[bp]
30541                                           ! Debug: list unsigned int = const $C000 (used reg = )
30542 7EED           B8                   C000  mov	ax,#$C000
30543 7EF0           50                         push	ax
30544                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30545 7EF1           E8         FE28            call	_read_byte
30546 7EF4           83C4                   04  add	sp,*4
30547                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30548 7EF7           8846         FF            mov	-1[bp],al
30549 7EFA           84C0                       test	al,al
30550 7EFC         0F85         FEE6            bne 	.2B3
30551                       00007F00            .2CA:
30552                       00007F00            .2B1:
30553 7F00           89EC                       mov	sp,bp
30554 7F02           5D                         pop	bp
30555 7F03           C3                         ret
30556                                           ! 4444 static ModeInfoListItem mode_info_list[]=
30557                                           ! Register BX used in function printf
30558                                           ! 4445 {
30559                                           
30560                       00007F04            _mode_info_list:
30561                                           ! 4446 { 0x0100,
30562 7F04                      0100            .word	$100
30563                                           ! 4447 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30564 7F06                      009B            .word	$9B
30565                                           ! 4448                           0x01 | 0x02 | 0x04,
30566 7F08                        07            .byte	7
30567                                           ! 4449                           0,
30568 7F09                        00            .byte	0
30569                                           ! 4450                           64,
30570 7F0A                      0040            .word	$40
30571                                           ! 4451                    64,
30572 7F0C                      0040            .word	$40
30573                                           ! 4452                        0xA000,
30574 7F0E                      A000            .word	$A000
30575                                           ! 4453                        0x0000,
30576 7F10                      0000            .word	0
30577                                           ! 4454                       0,
30578 7F12                      0000            .word	0
30579 7F14                      0000            .word	0
30580                                           ! 4455                             640,
30581 7F16                      0280            .word	$280
30582                                           ! 4456                        640,
30583 7F18                      0280            .word	$280
30584                                           ! 4457                        400,
30585 7F1A                      0190            .word	$190
30586                                           ! 4458       
30587                                           ! 4458                8,
30588 7F1C                        08            .byte	8
30589                                           ! 4459                      16,
30590 7F1D                        10            .byte	$10
30591                                           ! 4460                           1,
30592 7F1E                        01            .byte	1
30593                                           ! 4461                         8,
30594 7F1F                        08            .byte	8
30595                                           ! 4462                          4,
30596 7F20                        04            .byte	4
30597                                           ! 4463                        0x04,
30598 7F21                        04            .byte	4
30599                                           ! 4464                     0,
30600 7F22                        00            .byte	0
30601                                           ! 4465                               64,
30602 7F23                        40            .byte	$40
30603                                           ! 4466                          0,
30604 7F24                        00            .byte	0
30605                                           ! 4467                        0,
30606 7F25                        00            .byte	0
30607                                           ! 4468                             0,
30608 7F26                        00            .byte	0
30609                                           ! 4469                          0,
30610 7F27                        00            .byte	0
30611                                           ! 4470                               0,
30612 7F28                        00            .byte	0
30613                                           ! 4471                         0,
30614 7F29                        00            .byte	0
30615                                           ! 4472                              0,
30616 7F2A                        00            .byte	0
30617                                           ! 4473                         0,
30618 7F2B                        00            .byte	0
30619                                           ! 4474                              0,
30620 7F2C                        00            .byte	0
30621                                           ! 4475                                0,
30622 7F2D                        00            .byte	0
30623                                           ! 4476                        0xE0000000,
30624 7F2E                      0000            .word	0
30625 7F30                      E000            .word	$E000
30626                                           ! 4477                               0,
30627 7F32                      0000            .word	0
30628 7F34                      0000            .word	0
30629                                           ! 4478                             0,
30630 7F36                      0000            .word	0
30631                                           ! 4479                                640,
30632 7F38                      0280            .word	$280
30633                                           ! 4480                             0,
30634 7F3A                        00            .byte	0
30635                                           ! 4481                             0,
30636 7F3B                        00            .byte	0
30637                                           ! 4482                           0,
30638 7F3C                        00            .byte	0
30639                                           ! 4483                                0,
30640 7F3D                        00            .byte	0
30641                                           ! 4484                             0,
30642 7F3E                        00            .byte	0
30643                                           ! 4485                                  0,
30644 7F3F                        00            .byte	0
30645                                           ! 4486                            0,
30646 7F40                        00            .byte	0
30647                                           ! 4487                                 0,
30648 7F41                        00            .byte	0
30649                                           ! 4488                            0,
30650 7F42                        00            .byte	0
30651                                           ! 4489                                 0,
30652 7F43                        00            .byte	0
30653                                           ! 4490                          0,
30654 7F44                      0000            .word	0
30655 7F46                      0000            .word	0
30656                                           ! 4491 } },
30657                                           ! 4492 { 0x0101,
30658 7F48                      0101            .word	$101
30659                                           ! 4493 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30660 7F4A                      009B            .word	$9B
30661                                           ! 4494                           0x01 | 0x02 | 0x04,
30662 7F4C                        07            .byte	7
30663                                           ! 4495                           0,
30664 7F4D                        00            .byte	0
30665                                           ! 4496                           64,
30666 7F4E                      0040            .word	$40
30667                                           ! 4497                    64,
30668 7F50                      0040            .word	$40
30669                                           ! 4498                        0xA000,
30670 7F52                      A000            .word	$A000
30671                                           ! 4499                        0x0000,
30672 7F54                      0000            .word	0
30673                                           ! 4500                       0,
30674 7F56                      0000            .word	0
30675 7F58                      0000            .word	0
30676                                           ! 4501                             640,
30677 7F5A                      0280            .word	$280
30678                                           ! 4502                        640,
30679 7F5C                      0280            .word	$280
30680                                           ! 4503                        480,
30681 7F5E                      01E0            .word	$1E0
30682                                           ! 4504                      8,
30683 7F60                        08            .byte	8
30684                                           ! 4505                      16,
30685 7F61                        10            .byte	$10
30686                                           ! 4506                           1,
30687 7F62                        01            .byte	1
30688                                           ! 4507                         8,
30689 7F63                        08            .byte	8
30690                                           ! 4508                          5,
30691 7F64                        05            .byte	5
30692                                           ! 4509                        0x04,
30693 7F65                        04            .byte	4
30694                                           ! 4510                     0,
30695 7F66                        00            .byte	0
30696                                           ! 4511                               53,
30697 7F67                        35            .byte	$35
30698                                           ! 4512                          0,
30699 7F68                        00            .byte	0
30700                                           ! 4513                        0,
30701 7F69                        00            .byte	0
30702                                           ! 4514                             0,
30703 7F6A                        00            .byte	0
30704                                           ! 4515                          0,
30705 7F6B                        00            .byte	0
30706                                           ! 4516                               0,
30707 7F6C                        00            .byte	0
30708                                           ! 4517                         0,
30709 7F6D                        00            .byte	0
30710                                           ! 4518                              0,
30711 7F6E                        00            .byte	0
30712                                           ! 4519                         0,
30713 7F6F                        00            .byte	0
30714                                           ! 4520                              0,
30715 7F70                        00            .byte	0
30716                                           ! 4521                                0,
30717 7F71                        00            .byte	0
30718                                           ! 4522                        0xE0000000,
30719 7F72                      0000            .word	0
30720 7F74                      E000            .word	$E000
30721                                           ! 4523                               0,
30722 7F76                      0000            .word	0
30723 7F78                      0000            .word	0
30724                                           ! 4524                             0,
30725 7F7A                      0000            .word	0
30726                                           ! 4525                                640,
30727 7F7C                      0280            .word	$280
30728                                           ! 4526                             0,
30729 7F7E                        00            .byte	0
30730                                           ! 4527     
30731                                           ! 4527                         0,
30732 7F7F                        00            .byte	0
30733                                           ! 4528                           0,
30734 7F80                        00            .byte	0
30735                                           ! 4529                                0,
30736 7F81                        00            .byte	0
30737                                           ! 4530                             0,
30738 7F82                        00            .byte	0
30739                                           ! 4531                                  0,
30740 7F83                        00            .byte	0
30741                                           ! 4532                            0,
30742 7F84                        00            .byte	0
30743                                           ! 4533                                 0,
30744 7F85                        00            .byte	0
30745                                           ! 4534                            0,
30746 7F86                        00            .byte	0
30747                                           ! 4535                                 0,
30748 7F87                        00            .byte	0
30749                                           ! 4536                          0,
30750 7F88                      0000            .word	0
30751 7F8A                      0000            .word	0
30752                                           ! 4537 } },
30753                                           ! 4538 { 0x0102,
30754 7F8C                      0102            .word	$102
30755                                           ! 4539 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30756 7F8E                      001F            .word	$1F
30757                                           ! 4540                           0x01 | 0x02 | 0x04,
30758 7F90                        07            .byte	7
30759                                           ! 4541                           0,
30760 7F91                        00            .byte	0
30761                                           ! 4542                           64,
30762 7F92                      0040            .word	$40
30763                                           ! 4543                    64,
30764 7F94                      0040            .word	$40
30765                                           ! 4544                        0xA000,
30766 7F96                      A000            .word	$A000
30767                                           ! 4545                        0x0000,
30768 7F98                      0000            .word	0
30769                                           ! 4546                       0,
30770 7F9A                      0000            .word	0
30771 7F9C                      0000            .word	0
30772                                           ! 4547                             100,
30773 7F9E                      0064            .word	$64
30774                                           ! 4548                        800,
30775 7FA0                      0320            .word	$320
30776                                           ! 4549                        600,
30777 7FA2                      0258            .word	$258
30778                                           ! 4550                      8,
30779 7FA4                        08            .byte	8
30780                                           ! 4551                      16,
30781 7FA5                        10            .byte	$10
30782                                           ! 4552                           4,
30783 7FA6                        04            .byte	4
30784                                           ! 4553                         4,
30785 7FA7                        04            .byte	4
30786                                           ! 4554                          1,
30787 7FA8                        01            .byte	1
30788                                           ! 4555                        0x03,
30789 7FA9                        03            .byte	3
30790                                           ! 4556                     0,
30791 7FAA                        00            .byte	0
30792                                           ! 4557                               68,
30793 7FAB                        44            .byte	$44
30794                                           ! 4558                          0,
30795 7FAC                        00            .byte	0
30796                                           ! 4559                        0,
30797 7FAD                        00            .byte	0
30798                                           ! 4560                             0,
30799 7FAE                        00            .byte	0
30800                                           ! 4561                          0,
30801 7FAF                        00            .byte	0
30802                                           ! 4562                               0,
30803 7FB0                        00            .byte	0
30804                                           ! 4563                         0,
30805 7FB1                        00            .byte	0
30806                                           ! 4564                              0,
30807 7FB2                        00            .byte	0
30808                                           ! 4565                         0,
30809 7FB3                        00            .byte	0
30810                                           ! 4566                              0,
30811 7FB4                        00            .byte	0
30812                                           ! 4567                                0,
30813 7FB5                        00            .byte	0
30814                                           ! 4568                        0,
30815 7FB6                      0000            .word	0
30816 7FB8                      0000            .word	0
30817                                           ! 4569                               0,
30818 7FBA                      0000            .word	0
30819 7FBC                      0000            .word	0
30820                                           ! 4570                             0,
30821 7FBE                      0000            .word	0
30822                                           ! 4571                                100,
30823 7FC0                      0064            .word	$64
30824                                           ! 4572                             0,
30825 7FC2                        00            .byte	0
30826                                           ! 4573                             0,
30827 7FC3                        00            .byte	0
30828                                           ! 4574                           0,
30829 7FC4                        00            .byte	0
30830                                           ! 4575                                0,
30831 7FC5                        00            .byte	0
30832                                           ! 4576                             0,
30833 7FC6                        00            .byte	0
30834                                           ! 4577                                  0,
30835 7FC7                        00            .byte	0
30836                                           ! 4578                            0,
30837 7FC8                        00            .byte	0
30838                                           ! 4579                                 0,
30839 7FC9                        00            .byte	0
30840                                           ! 4580                            0,
30841 7FCA                        00            .byte	0
30842                                           ! 4581                                 0,
30843 7FCB                        00            .byte	0
30844                                           ! 4582                          0,
30845 7FCC                      0000            .word	0
30846 7FCE                      0000            .word	0
30847                                           ! 4583 } },
30848                                           ! 4584 { 0x0103,
30849 7FD0                      0103            .word	$103
30850                                           ! 4585 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30851 7FD2                      009B            .word	$9B
30852                                           ! 4586                           0x01 | 0x02 | 0x04,
30853 7FD4                        07            .byte	7
30854                                           ! 4587                           0,
30855 7FD5                        00            .byte	0
30856                                           ! 4588                           64,
30857 7FD6                      0040            .word	$40
30858                                           ! 4589                    64,
30859 7FD8                      0040            .word	$40
30860                                           ! 4590                        0xA000,
30861 7FDA                      A000            .word	$A000
30862                                           ! 4591                        0x0000,
30863 7FDC                      0000            .word	0
30864                                           ! 4592                       0,
30865 7FDE                      0000            .word	0
30866 7FE0                      0000            .word	0
30867                                           ! 4593                             800,
30868 7FE2                      0320            .word	$320
30869                                           ! 4594                        800,
30870 7FE4                      0320            .word	$320
30871                                           ! 4595                        600,
30872 7FE6                      0258            .word	$258
30873                                           ! 4596           
30874                                           ! 4596            8,
30875 7FE8                        08            .byte	8
30876                                           ! 4597                      16,
30877 7FE9                        10            .byte	$10
30878                                           ! 4598                           1,
30879 7FEA                        01            .byte	1
30880                                           ! 4599                         8,
30881 7FEB                        08            .byte	8
30882                                           ! 4600                          8,
30883 7FEC                        08            .byte	8
30884                                           ! 4601                        0x04,
30885 7FED                        04            .byte	4
30886                                           ! 4602                     0,
30887 7FEE                        00            .byte	0
30888                                           ! 4603                               33,
30889 7FEF                        21            .byte	$21
30890                                           ! 4604                          0,
30891 7FF0                        00            .byte	0
30892                                           ! 4605                        0,
30893 7FF1                        00            .byte	0
30894                                           ! 4606                             0,
30895 7FF2                        00            .byte	0
30896                                           ! 4607                          0,
30897 7FF3                        00            .byte	0
30898                                           ! 4608                               0,
30899 7FF4                        00            .byte	0
30900                                           ! 4609                         0,
30901 7FF5                        00            .byte	0
30902                                           ! 4610                              0,
30903 7FF6                        00            .byte	0
30904                                           ! 4611                         0,
30905 7FF7                        00            .byte	0
30906                                           ! 4612                              0,
30907 7FF8                        00            .byte	0
30908                                           ! 4613                                0,
30909 7FF9                        00            .byte	0
30910                                           ! 4614                        0xE0000000,
30911 7FFA                      0000            .word	0
30912 7FFC                      E000            .word	$E000
30913                                           ! 4615                               0,
30914 7FFE                      0000            .word	0
30915 8000                      0000            .word	0
30916                                           ! 4616                             0,
30917 8002                      0000            .word	0
30918                                           ! 4617                                800,
30919 8004                      0320            .word	$320
30920                                           ! 4618                             0,
30921 8006                        00            .byte	0
30922                                           ! 4619                             0,
30923 8007                        00            .byte	0
30924                                           ! 4620                           0,
30925 8008                        00            .byte	0
30926                                           ! 4621                                0,
30927 8009                        00            .byte	0
30928                                           ! 4622                             0,
30929 800A                        00            .byte	0
30930                                           ! 4623                                  0,
30931 800B                        00            .byte	0
30932                                           ! 4624                            0,
30933 800C                        00            .byte	0
30934                                           ! 4625                                 0,
30935 800D                        00            .byte	0
30936                                           ! 4626                            0,
30937 800E                        00            .byte	0
30938                                           ! 4627                                 0,
30939 800F                        00            .byte	0
30940                                           ! 4628                          0,
30941 8010                      0000            .word	0
30942 8012                      0000            .word	0
30943                                           ! 4629 } },
30944                                           ! 4630 { 0x0104,
30945 8014                      0104            .word	$104
30946                                           ! 4631 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30947 8016                      001F            .word	$1F
30948                                           ! 4632                           0x01 | 0x02 | 0x04,
30949 8018                        07            .byte	7
30950                                           ! 4633                           0,
30951 8019                        00            .byte	0
30952                                           ! 4634                           64,
30953 801A                      0040            .word	$40
30954                                           ! 4635                    64,
30955 801C                      0040            .word	$40
30956                                           ! 4636                        0xA000,
30957 801E                      A000            .word	$A000
30958                                           ! 4637                        0x0000,
30959 8020                      0000            .word	0
30960                                           ! 4638                       0,
30961 8022                      0000            .word	0
30962 8024                      0000            .word	0
30963                                           ! 4639                             128,
30964 8026                      0080            .word	$80
30965                                           ! 4640                        1024,
30966 8028                      0400            .word	$400
30967                                           ! 4641                        768,
30968 802A                      0300            .word	$300
30969                                           ! 4642                      8,
30970 802C                        08            .byte	8
30971                                           ! 4643                      16,
30972 802D                        10            .byte	$10
30973                                           ! 4644                           4,
30974 802E                        04            .byte	4
30975                                           ! 4645                         4,
30976 802F                        04            .byte	4
30977                                           ! 4646                          2,
30978 8030                        02            .byte	2
30979                                           ! 4647                        0x03,
30980 8031                        03            .byte	3
30981                                           ! 4648                     0,
30982 8032                        00            .byte	0
30983                                           ! 4649                               41,
30984 8033                        29            .byte	$29
30985                                           ! 4650                          0,
30986 8034                        00            .byte	0
30987                                           ! 4651                        0,
30988 8035                        00            .byte	0
30989                                           ! 4652                             0,
30990 8036                        00            .byte	0
30991                                           ! 4653                          0,
30992 8037                        00            .byte	0
30993                                           ! 4654                               0,
30994 8038                        00            .byte	0
30995                                           ! 4655                         0,
30996 8039                        00            .byte	0
30997                                           ! 4656                              0,
30998 803A                        00            .byte	0
30999                                           ! 4657                         0,
31000 803B                        00            .byte	0
31001                                           ! 4658                              0,
31002 803C                        00            .byte	0
31003                                           ! 4659                                0,
31004 803D                        00            .byte	0
31005                                           ! 4660                        0,
31006 803E                      0000            .word	0
31007 8040                      0000            .word	0
31008                                           ! 4661                               0,
31009 8042                      0000            .word	0
31010 8044                      0000            .word	0
31011                                           ! 4662                             0,
31012 8046                      0000            .word	0
31013                                           ! 4663                                128,
31014 8048                      0080            .word	$80
31015                                           ! 4664                             0,
31016 804A                        00            .byte	0
31017                                           ! 4665                 
31018                                           ! 4665             0,
31019 804B                        00            .byte	0
31020                                           ! 4666                           0,
31021 804C                        00            .byte	0
31022                                           ! 4667                                0,
31023 804D                        00            .byte	0
31024                                           ! 4668                             0,
31025 804E                        00            .byte	0
31026                                           ! 4669                                  0,
31027 804F                        00            .byte	0
31028                                           ! 4670                            0,
31029 8050                        00            .byte	0
31030                                           ! 4671                                 0,
31031 8051                        00            .byte	0
31032                                           ! 4672                            0,
31033 8052                        00            .byte	0
31034                                           ! 4673                                 0,
31035 8053                        00            .byte	0
31036                                           ! 4674                          0,
31037 8054                      0000            .word	0
31038 8056                      0000            .word	0
31039                                           ! 4675 } },
31040                                           ! 4676 { 0x0105,
31041 8058                      0105            .word	$105
31042                                           ! 4677 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31043 805A                      009B            .word	$9B
31044                                           ! 4678                           0x01 | 0x02 | 0x04,
31045 805C                        07            .byte	7
31046                                           ! 4679                           0,
31047 805D                        00            .byte	0
31048                                           ! 4680                           64,
31049 805E                      0040            .word	$40
31050                                           ! 4681                    64,
31051 8060                      0040            .word	$40
31052                                           ! 4682                        0xA000,
31053 8062                      A000            .word	$A000
31054                                           ! 4683                        0x0000,
31055 8064                      0000            .word	0
31056                                           ! 4684                       0,
31057 8066                      0000            .word	0
31058 8068                      0000            .word	0
31059                                           ! 4685                             1024,
31060 806A                      0400            .word	$400
31061                                           ! 4686                        1024,
31062 806C                      0400            .word	$400
31063                                           ! 4687                        768,
31064 806E                      0300            .word	$300
31065                                           ! 4688                      8,
31066 8070                        08            .byte	8
31067                                           ! 4689                      16,
31068 8071                        10            .byte	$10
31069                                           ! 4690                           1,
31070 8072                        01            .byte	1
31071                                           ! 4691                         8,
31072 8073                        08            .byte	8
31073                                           ! 4692                          12,
31074 8074                        0C            .byte	$C
31075                                           ! 4693                        0x04,
31076 8075                        04            .byte	4
31077                                           ! 4694                     0,
31078 8076                        00            .byte	0
31079                                           ! 4695                               20,
31080 8077                        14            .byte	$14
31081                                           ! 4696                          0,
31082 8078                        00            .byte	0
31083                                           ! 4697                        0,
31084 8079                        00            .byte	0
31085                                           ! 4698                             0,
31086 807A                        00            .byte	0
31087                                           ! 4699                          0,
31088 807B                        00            .byte	0
31089                                           ! 4700                               0,
31090 807C                        00            .byte	0
31091                                           ! 4701                         0,
31092 807D                        00            .byte	0
31093                                           ! 4702                              0,
31094 807E                        00            .byte	0
31095                                           ! 4703                         0,
31096 807F                        00            .byte	0
31097                                           ! 4704                              0,
31098 8080                        00            .byte	0
31099                                           ! 4705                                0,
31100 8081                        00            .byte	0
31101                                           ! 4706                        0xE0000000,
31102 8082                      0000            .word	0
31103 8084                      E000            .word	$E000
31104                                           ! 4707                               0,
31105 8086                      0000            .word	0
31106 8088                      0000            .word	0
31107                                           ! 4708                             0,
31108 808A                      0000            .word	0
31109                                           ! 4709                                1024,
31110 808C                      0400            .word	$400
31111                                           ! 4710                             0,
31112 808E                        00            .byte	0
31113                                           ! 4711                             0,
31114 808F                        00            .byte	0
31115                                           ! 4712                           0,
31116 8090                        00            .byte	0
31117                                           ! 4713                                0,
31118 8091                        00            .byte	0
31119                                           ! 4714                             0,
31120 8092                        00            .byte	0
31121                                           ! 4715                                  0,
31122 8093                        00            .byte	0
31123                                           ! 4716                            0,
31124 8094                        00            .byte	0
31125                                           ! 4717                                 0,
31126 8095                        00            .byte	0
31127                                           ! 4718                            0,
31128 8096                        00            .byte	0
31129                                           ! 4719                                 0,
31130 8097                        00            .byte	0
31131                                           ! 4720                          0,
31132 8098                      0000            .word	0
31133 809A                      0000            .word	0
31134                                           ! 4721 } },
31135                                           ! 4722 { 0x0106,
31136 809C                      0106            .word	$106
31137                                           ! 4723 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31138 809E                      001F            .word	$1F
31139                                           ! 4724                           0x01 | 0x02 | 0x04,
31140 80A0                        07            .byte	7
31141                                           ! 4725                           0,
31142 80A1                        00            .byte	0
31143                                           ! 4726                           64,
31144 80A2                      0040            .word	$40
31145                                           ! 4727                    64,
31146 80A4                      0040            .word	$40
31147                                           ! 4728                        0xA000,
31148 80A6                      A000            .word	$A000
31149                                           ! 4729                        0x0000,
31150 80A8                      0000            .word	0
31151                                           ! 4730                       0,
31152 80AA                      0000            .word	0
31153 80AC                      0000            .word	0
31154                                           ! 4731                             160,
31155 80AE                      00A0            .word	$A0
31156                                           ! 4732                        1280,
31157 80B0                      0500            .word	$500
31158                                           ! 4733                        1024,
31159 80B2                      0400            .word	$400
31160                                           ! 4734        
31161                                           ! 4734               8,
31162 80B4                        08            .byte	8
31163                                           ! 4735                      16,
31164 80B5                        10            .byte	$10
31165                                           ! 4736                           4,
31166 80B6                        04            .byte	4
31167                                           ! 4737                         4,
31168 80B7                        04            .byte	4
31169                                           ! 4738                          3,
31170 80B8                        03            .byte	3
31171                                           ! 4739                        0x03,
31172 80B9                        03            .byte	3
31173                                           ! 4740                     0,
31174 80BA                        00            .byte	0
31175                                           ! 4741                               24,
31176 80BB                        18            .byte	$18
31177                                           ! 4742                          0,
31178 80BC                        00            .byte	0
31179                                           ! 4743                        0,
31180 80BD                        00            .byte	0
31181                                           ! 4744                             0,
31182 80BE                        00            .byte	0
31183                                           ! 4745                          0,
31184 80BF                        00            .byte	0
31185                                           ! 4746                               0,
31186 80C0                        00            .byte	0
31187                                           ! 4747                         0,
31188 80C1                        00            .byte	0
31189                                           ! 4748                              0,
31190 80C2                        00            .byte	0
31191                                           ! 4749                         0,
31192 80C3                        00            .byte	0
31193                                           ! 4750                              0,
31194 80C4                        00            .byte	0
31195                                           ! 4751                                0,
31196 80C5                        00            .byte	0
31197                                           ! 4752                        0,
31198 80C6                      0000            .word	0
31199 80C8                      0000            .word	0
31200                                           ! 4753                               0,
31201 80CA                      0000            .word	0
31202 80CC                      0000            .word	0
31203                                           ! 4754                             0,
31204 80CE                      0000            .word	0
31205                                           ! 4755                                160,
31206 80D0                      00A0            .word	$A0
31207                                           ! 4756                             0,
31208 80D2                        00            .byte	0
31209                                           ! 4757                             0,
31210 80D3                        00            .byte	0
31211                                           ! 4758                           0,
31212 80D4                        00            .byte	0
31213                                           ! 4759                                0,
31214 80D5                        00            .byte	0
31215                                           ! 4760                             0,
31216 80D6                        00            .byte	0
31217                                           ! 4761                                  0,
31218 80D7                        00            .byte	0
31219                                           ! 4762                            0,
31220 80D8                        00            .byte	0
31221                                           ! 4763                                 0,
31222 80D9                        00            .byte	0
31223                                           ! 4764                            0,
31224 80DA                        00            .byte	0
31225                                           ! 4765                                 0,
31226 80DB                        00            .byte	0
31227                                           ! 4766                          0,
31228 80DC                      0000            .word	0
31229 80DE                      0000            .word	0
31230                                           ! 4767 } },
31231                                           ! 4768 { 0x0107,
31232 80E0                      0107            .word	$107
31233                                           ! 4769 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31234 80E2                      009B            .word	$9B
31235                                           ! 4770                           0x01 | 0x02 | 0x04,
31236 80E4                        07            .byte	7
31237                                           ! 4771                           0,
31238 80E5                        00            .byte	0
31239                                           ! 4772                           64,
31240 80E6                      0040            .word	$40
31241                                           ! 4773                    64,
31242 80E8                      0040            .word	$40
31243                                           ! 4774                        0xA000,
31244 80EA                      A000            .word	$A000
31245                                           ! 4775                        0x0000,
31246 80EC                      0000            .word	0
31247                                           ! 4776                       0,
31248 80EE                      0000            .word	0
31249 80F0                      0000            .word	0
31250                                           ! 4777                             1280,
31251 80F2                      0500            .word	$500
31252                                           ! 4778                        1280,
31253 80F4                      0500            .word	$500
31254                                           ! 4779                        1024,
31255 80F6                      0400            .word	$400
31256                                           ! 4780                      8,
31257 80F8                        08            .byte	8
31258                                           ! 4781                      16,
31259 80F9                        10            .byte	$10
31260                                           ! 4782                           1,
31261 80FA                        01            .byte	1
31262                                           ! 4783                         8,
31263 80FB                        08            .byte	8
31264                                           ! 4784                          20,
31265 80FC                        14            .byte	$14
31266                                           ! 4785                        0x04,
31267 80FD                        04            .byte	4
31268                                           ! 4786                     0,
31269 80FE                        00            .byte	0
31270                                           ! 4787                               11,
31271 80FF                        0B            .byte	$B
31272                                           ! 4788                          0,
31273 8100                        00            .byte	0
31274                                           ! 4789                        0,
31275 8101                        00            .byte	0
31276                                           ! 4790                             0,
31277 8102                        00            .byte	0
31278                                           ! 4791                          0,
31279 8103                        00            .byte	0
31280                                           ! 4792                               0,
31281 8104                        00            .byte	0
31282                                           ! 4793                         0,
31283 8105                        00            .byte	0
31284                                           ! 4794                              0,
31285 8106                        00            .byte	0
31286                                           ! 4795                         0,
31287 8107                        00            .byte	0
31288                                           ! 4796                              0,
31289 8108                        00            .byte	0
31290                                           ! 4797                                0,
31291 8109                        00            .byte	0
31292                                           ! 4798                        0xE0000000,
31293 810A                      0000            .word	0
31294 810C                      E000            .word	$E000
31295                                           ! 4799                               0,
31296 810E                      0000            .word	0
31297 8110                      0000            .word	0
31298                                           ! 4800                             0,
31299 8112                      0000            .word	0
31300                                           ! 4801                                1280,
31301 8114                      0500            .word	$500
31302                                           ! 4802                             0,
31303 8116                        00            .byte	0
31304                                           ! 4803          
31305                                           ! 4803                    0,
31306 8117                        00            .byte	0
31307                                           ! 4804                           0,
31308 8118                        00            .byte	0
31309                                           ! 4805                                0,
31310 8119                        00            .byte	0
31311                                           ! 4806                             0,
31312 811A                        00            .byte	0
31313                                           ! 4807                                  0,
31314 811B                        00            .byte	0
31315                                           ! 4808                            0,
31316 811C                        00            .byte	0
31317                                           ! 4809                                 0,
31318 811D                        00            .byte	0
31319                                           ! 4810                            0,
31320 811E                        00            .byte	0
31321                                           ! 4811                                 0,
31322 811F                        00            .byte	0
31323                                           ! 4812                          0,
31324 8120                      0000            .word	0
31325 8122                      0000            .word	0
31326                                           ! 4813 } },
31327                                           ! 4814 { 0x010d,
31328 8124                      010D            .word	$10D
31329                                           ! 4815 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31330 8126                      009B            .word	$9B
31331                                           ! 4816                           0x01 | 0x02 | 0x04,
31332 8128                        07            .byte	7
31333                                           ! 4817                           0,
31334 8129                        00            .byte	0
31335                                           ! 4818                           64,
31336 812A                      0040            .word	$40
31337                                           ! 4819                    64,
31338 812C                      0040            .word	$40
31339                                           ! 4820                        0xA000,
31340 812E                      A000            .word	$A000
31341                                           ! 4821                        0x0000,
31342 8130                      0000            .word	0
31343                                           ! 4822                       0,
31344 8132                      0000            .word	0
31345 8134                      0000            .word	0
31346                                           ! 4823                             640,
31347 8136                      0280            .word	$280
31348                                           ! 4824                        320,
31349 8138                      0140            .word	$140
31350                                           ! 4825                        200,
31351 813A                      00C8            .word	$C8
31352                                           ! 4826                      8,
31353 813C                        08            .byte	8
31354                                           ! 4827                      16,
31355 813D                        10            .byte	$10
31356                                           ! 4828                           1,
31357 813E                        01            .byte	1
31358                                           ! 4829                         15,
31359 813F                        0F            .byte	$F
31360                                           ! 4830                          2,
31361 8140                        02            .byte	2
31362                                           ! 4831                        0x06,
31363 8141                        06            .byte	6
31364                                           ! 4832                     0,
31365 8142                        00            .byte	0
31366                                           ! 4833                               130,
31367 8143                        82            .byte	$82
31368                                           ! 4834                          0,
31369 8144                        00            .byte	0
31370                                           ! 4835                        5,
31371 8145                        05            .byte	5
31372                                           ! 4836                             10,
31373 8146                        0A            .byte	$A
31374                                           ! 4837                          5,
31375 8147                        05            .byte	5
31376                                           ! 4838                               5,
31377 8148                        05            .byte	5
31378                                           ! 4839                         5,
31379 8149                        05            .byte	5
31380                                           ! 4840                              0,
31381 814A                        00            .byte	0
31382                                           ! 4841                         1,
31383 814B                        01            .byte	1
31384                                           ! 4842                              15,
31385 814C                        0F            .byte	$F
31386                                           ! 4843                                0,
31387 814D                        00            .byte	0
31388                                           ! 4844                        0xE0000000,
31389 814E                      0000            .word	0
31390 8150                      E000            .word	$E000
31391                                           ! 4845                               0,
31392 8152                      0000            .word	0
31393 8154                      0000            .word	0
31394                                           ! 4846                             0,
31395 8156                      0000            .word	0
31396                                           ! 4847                                640,
31397 8158                      0280            .word	$280
31398                                           ! 4848                             0,
31399 815A                        00            .byte	0
31400                                           ! 4849                             0,
31401 815B                        00            .byte	0
31402                                           ! 4850                           5,
31403 815C                        05            .byte	5
31404                                           ! 4851                                10,
31405 815D                        0A            .byte	$A
31406                                           ! 4852                             5,
31407 815E                        05            .byte	5
31408                                           ! 4853                                  5,
31409 815F                        05            .byte	5
31410                                           ! 4854                            5,
31411 8160                        05            .byte	5
31412                                           ! 4855                                 0,
31413 8161                        00            .byte	0
31414                                           ! 4856                            1,
31415 8162                        01            .byte	1
31416                                           ! 4857                                 15,
31417 8163                        0F            .byte	$F
31418                                           ! 4858                          0,
31419 8164                      0000            .word	0
31420 8166                      0000            .word	0
31421                                           ! 4859 } },
31422                                           ! 4860 { 0x010e,
31423 8168                      010E            .word	$10E
31424                                           ! 4861 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31425 816A                      009B            .word	$9B
31426                                           ! 4862                           0x01 | 0x02 | 0x04,
31427 816C                        07            .byte	7
31428                                           ! 4863                           0,
31429 816D                        00            .byte	0
31430                                           ! 4864                           64,
31431 816E                      0040            .word	$40
31432                                           ! 4865                    64,
31433 8170                      0040            .word	$40
31434                                           ! 4866                        0xA000,
31435 8172                      A000            .word	$A000
31436                                           ! 4867                        0x0000,
31437 8174                      0000            .word	0
31438                                           ! 4868                       0,
31439 8176                      0000            .word	0
31440 8178                      0000            .word	0
31441                                           ! 4869                             640,
31442 817A                      0280            .word	$280
31443                                           ! 4870                        320,
31444 817C                      0140            .word	$140
31445                                           ! 4871                        200,
31446 817E                      00C8            .word	$C8
31447                                           ! 4872 
31448                                           ! 4872                      8,
31449 8180                        08            .byte	8
31450                                           ! 4873                      16,
31451 8181                        10            .byte	$10
31452                                           ! 4874                           1,
31453 8182                        01            .byte	1
31454                                           ! 4875                         16,
31455 8183                        10            .byte	$10
31456                                           ! 4876                          2,
31457 8184                        02            .byte	2
31458                                           ! 4877                        0x06,
31459 8185                        06            .byte	6
31460                                           ! 4878                     0,
31461 8186                        00            .byte	0
31462                                           ! 4879                               130,
31463 8187                        82            .byte	$82
31464                                           ! 4880                          0,
31465 8188                        00            .byte	0
31466                                           ! 4881                        5,
31467 8189                        05            .byte	5
31468                                           ! 4882                             11,
31469 818A                        0B            .byte	$B
31470                                           ! 4883                          6,
31471 818B                        06            .byte	6
31472                                           ! 4884                               5,
31473 818C                        05            .byte	5
31474                                           ! 4885                         5,
31475 818D                        05            .byte	5
31476                                           ! 4886                              0,
31477 818E                        00            .byte	0
31478                                           ! 4887                         0,
31479 818F                        00            .byte	0
31480                                           ! 4888                              0,
31481 8190                        00            .byte	0
31482                                           ! 4889                                0,
31483 8191                        00            .byte	0
31484                                           ! 4890                        0xE0000000,
31485 8192                      0000            .word	0
31486 8194                      E000            .word	$E000
31487                                           ! 4891                               0,
31488 8196                      0000            .word	0
31489 8198                      0000            .word	0
31490                                           ! 4892                             0,
31491 819A                      0000            .word	0
31492                                           ! 4893                                640,
31493 819C                      0280            .word	$280
31494                                           ! 4894                             0,
31495 819E                        00            .byte	0
31496                                           ! 4895                             0,
31497 819F                        00            .byte	0
31498                                           ! 4896                           5,
31499 81A0                        05            .byte	5
31500                                           ! 4897                                11,
31501 81A1                        0B            .byte	$B
31502                                           ! 4898                             6,
31503 81A2                        06            .byte	6
31504                                           ! 4899                                  5,
31505 81A3                        05            .byte	5
31506                                           ! 4900                            5,
31507 81A4                        05            .byte	5
31508                                           ! 4901                                 0,
31509 81A5                        00            .byte	0
31510                                           ! 4902                            0,
31511 81A6                        00            .byte	0
31512                                           ! 4903                                 0,
31513 81A7                        00            .byte	0
31514                                           ! 4904                          0,
31515 81A8                      0000            .word	0
31516 81AA                      0000            .word	0
31517                                           ! 4905 } },
31518                                           ! 4906 { 0x010f,
31519 81AC                      010F            .word	$10F
31520                                           ! 4907 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31521 81AE                      009B            .word	$9B
31522                                           ! 4908                           0x01 | 0x02 | 0x04,
31523 81B0                        07            .byte	7
31524                                           ! 4909                           0,
31525 81B1                        00            .byte	0
31526                                           ! 4910                           64,
31527 81B2                      0040            .word	$40
31528                                           ! 4911                    64,
31529 81B4                      0040            .word	$40
31530                                           ! 4912                        0xA000,
31531 81B6                      A000            .word	$A000
31532                                           ! 4913                        0x0000,
31533 81B8                      0000            .word	0
31534                                           ! 4914                       0,
31535 81BA                      0000            .word	0
31536 81BC                      0000            .word	0
31537                                           ! 4915                             960,
31538 81BE                      03C0            .word	$3C0
31539                                           ! 4916                        320,
31540 81C0                      0140            .word	$140
31541                                           ! 4917                        200,
31542 81C2                      00C8            .word	$C8
31543                                           ! 4918                      8,
31544 81C4                        08            .byte	8
31545                                           ! 4919                      16,
31546 81C5                        10            .byte	$10
31547                                           ! 4920                           1,
31548 81C6                        01            .byte	1
31549                                           ! 4921                         24,
31550 81C7                        18            .byte	$18
31551                                           ! 4922                          3,
31552 81C8                        03            .byte	3
31553                                           ! 4923                        0x06,
31554 81C9                        06            .byte	6
31555                                           ! 4924                     0,
31556 81CA                        00            .byte	0
31557                                           ! 4925                               86,
31558 81CB                        56            .byte	$56
31559                                           ! 4926                          0,
31560 81CC                        00            .byte	0
31561                                           ! 4927                        8,
31562 81CD                        08            .byte	8
31563                                           ! 4928                             16,
31564 81CE                        10            .byte	$10
31565                                           ! 4929                          8,
31566 81CF                        08            .byte	8
31567                                           ! 4930                               8,
31568 81D0                        08            .byte	8
31569                                           ! 4931                         8,
31570 81D1                        08            .byte	8
31571                                           ! 4932                              0,
31572 81D2                        00            .byte	0
31573                                           ! 4933                         0,
31574 81D3                        00            .byte	0
31575                                           ! 4934                              0,
31576 81D4                        00            .byte	0
31577                                           ! 4935                                0,
31578 81D5                        00            .byte	0
31579                                           ! 4936                        0xE0000000,
31580 81D6                      0000            .word	0
31581 81D8                      E000            .word	$E000
31582                                           ! 4937                               0,
31583 81DA                      0000            .word	0
31584 81DC                      0000            .word	0
31585                                           ! 4938                             0,
31586 81DE                      0000            .word	0
31587                                           ! 4939                                960,
31588 81E0                      03C0            .word	$3C0
31589                                           ! 4940                        
31590                                           ! 4940      0,
31591 81E2                        00            .byte	0
31592                                           ! 4941                             0,
31593 81E3                        00            .byte	0
31594                                           ! 4942                           8,
31595 81E4                        08            .byte	8
31596                                           ! 4943                                16,
31597 81E5                        10            .byte	$10
31598                                           ! 4944                             8,
31599 81E6                        08            .byte	8
31600                                           ! 4945                                  8,
31601 81E7                        08            .byte	8
31602                                           ! 4946                            8,
31603 81E8                        08            .byte	8
31604                                           ! 4947                                 0,
31605 81E9                        00            .byte	0
31606                                           ! 4948                            0,
31607 81EA                        00            .byte	0
31608                                           ! 4949                                 0,
31609 81EB                        00            .byte	0
31610                                           ! 4950                          0,
31611 81EC                      0000            .word	0
31612 81EE                      0000            .word	0
31613                                           ! 4951 } },
31614                                           ! 4952 { 0x0110,
31615 81F0                      0110            .word	$110
31616                                           ! 4953 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31617 81F2                      009B            .word	$9B
31618                                           ! 4954                           0x01 | 0x02 | 0x04,
31619 81F4                        07            .byte	7
31620                                           ! 4955                           0,
31621 81F5                        00            .byte	0
31622                                           ! 4956                           64,
31623 81F6                      0040            .word	$40
31624                                           ! 4957                    64,
31625 81F8                      0040            .word	$40
31626                                           ! 4958                        0xA000,
31627 81FA                      A000            .word	$A000
31628                                           ! 4959                        0x0000,
31629 81FC                      0000            .word	0
31630                                           ! 4960                       0,
31631 81FE                      0000            .word	0
31632 8200                      0000            .word	0
31633                                           ! 4961                             1280,
31634 8202                      0500            .word	$500
31635                                           ! 4962                        640,
31636 8204                      0280            .word	$280
31637                                           ! 4963                        480,
31638 8206                      01E0            .word	$1E0
31639                                           ! 4964                      8,
31640 8208                        08            .byte	8
31641                                           ! 4965                      16,
31642 8209                        10            .byte	$10
31643                                           ! 4966                           1,
31644 820A                        01            .byte	1
31645                                           ! 4967                         15,
31646 820B                        0F            .byte	$F
31647                                           ! 4968                          10,
31648 820C                        0A            .byte	$A
31649                                           ! 4969                        0x06,
31650 820D                        06            .byte	6
31651                                           ! 4970                     0,
31652 820E                        00            .byte	0
31653                                           ! 4971                               26,
31654 820F                        1A            .byte	$1A
31655                                           ! 4972                          0,
31656 8210                        00            .byte	0
31657                                           ! 4973                        5,
31658 8211                        05            .byte	5
31659                                           ! 4974                             10,
31660 8212                        0A            .byte	$A
31661                                           ! 4975                          5,
31662 8213                        05            .byte	5
31663                                           ! 4976                               5,
31664 8214                        05            .byte	5
31665                                           ! 4977                         5,
31666 8215                        05            .byte	5
31667                                           ! 4978                              0,
31668 8216                        00            .byte	0
31669                                           ! 4979                         1,
31670 8217                        01            .byte	1
31671                                           ! 4980                              15,
31672 8218                        0F            .byte	$F
31673                                           ! 4981                                0,
31674 8219                        00            .byte	0
31675                                           ! 4982                        0xE0000000,
31676 821A                      0000            .word	0
31677 821C                      E000            .word	$E000
31678                                           ! 4983                               0,
31679 821E                      0000            .word	0
31680 8220                      0000            .word	0
31681                                           ! 4984                             0,
31682 8222                      0000            .word	0
31683                                           ! 4985                                1280,
31684 8224                      0500            .word	$500
31685                                           ! 4986                             0,
31686 8226                        00            .byte	0
31687                                           ! 4987                             0,
31688 8227                        00            .byte	0
31689                                           ! 4988                           5,
31690 8228                        05            .byte	5
31691                                           ! 4989                                10,
31692 8229                        0A            .byte	$A
31693                                           ! 4990                             5,
31694 822A                        05            .byte	5
31695                                           ! 4991                                  5,
31696 822B                        05            .byte	5
31697                                           ! 4992                            5,
31698 822C                        05            .byte	5
31699                                           ! 4993                                 0,
31700 822D                        00            .byte	0
31701                                           ! 4994                            1,
31702 822E                        01            .byte	1
31703                                           ! 4995                                 15,
31704 822F                        0F            .byte	$F
31705                                           ! 4996                          0,
31706 8230                      0000            .word	0
31707 8232                      0000            .word	0
31708                                           ! 4997 } },
31709                                           ! 4998 { 0x0111,
31710 8234                      0111            .word	$111
31711                                           ! 4999 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31712 8236                      009B            .word	$9B
31713                                           ! 5000                           0x01 | 0x02 | 0x04,
31714 8238                        07            .byte	7
31715                                           ! 5001                           0,
31716 8239                        00            .byte	0
31717                                           ! 5002                           64,
31718 823A                      0040            .word	$40
31719                                           ! 5003                    64,
31720 823C                      0040            .word	$40
31721                                           ! 5004                        0xA000,
31722 823E                      A000            .word	$A000
31723                                           ! 5005                        0x0000,
31724 8240                      0000            .word	0
31725                                           ! 5006                       0,
31726 8242                      0000            .word	0
31727 8244                      0000            .word	0
31728                                           ! 5007                             1280,
31729 8246                      0500            .word	$500
31730                                           ! 5008                        640,
31731 8248                      0280            .word	$280
31732                                           ! 5009        
31733                                           ! 5009                 480,
31734 824A                      01E0            .word	$1E0
31735                                           ! 5010                      8,
31736 824C                        08            .byte	8
31737                                           ! 5011                      16,
31738 824D                        10            .byte	$10
31739                                           ! 5012                           1,
31740 824E                        01            .byte	1
31741                                           ! 5013                         16,
31742 824F                        10            .byte	$10
31743                                           ! 5014                          10,
31744 8250                        0A            .byte	$A
31745                                           ! 5015                        0x06,
31746 8251                        06            .byte	6
31747                                           ! 5016                     0,
31748 8252                        00            .byte	0
31749                                           ! 5017                               26,
31750 8253                        1A            .byte	$1A
31751                                           ! 5018                          0,
31752 8254                        00            .byte	0
31753                                           ! 5019                        5,
31754 8255                        05            .byte	5
31755                                           ! 5020                             11,
31756 8256                        0B            .byte	$B
31757                                           ! 5021                          6,
31758 8257                        06            .byte	6
31759                                           ! 5022                               5,
31760 8258                        05            .byte	5
31761                                           ! 5023                         5,
31762 8259                        05            .byte	5
31763                                           ! 5024                              0,
31764 825A                        00            .byte	0
31765                                           ! 5025                         0,
31766 825B                        00            .byte	0
31767                                           ! 5026                              0,
31768 825C                        00            .byte	0
31769                                           ! 5027                                0,
31770 825D                        00            .byte	0
31771                                           ! 5028                        0xE0000000,
31772 825E                      0000            .word	0
31773 8260                      E000            .word	$E000
31774                                           ! 5029                               0,
31775 8262                      0000            .word	0
31776 8264                      0000            .word	0
31777                                           ! 5030                             0,
31778 8266                      0000            .word	0
31779                                           ! 5031                                1280,
31780 8268                      0500            .word	$500
31781                                           ! 5032                             0,
31782 826A                        00            .byte	0
31783                                           ! 5033                             0,
31784 826B                        00            .byte	0
31785                                           ! 5034                           5,
31786 826C                        05            .byte	5
31787                                           ! 5035                                11,
31788 826D                        0B            .byte	$B
31789                                           ! 5036                             6,
31790 826E                        06            .byte	6
31791                                           ! 5037                                  5,
31792 826F                        05            .byte	5
31793                                           ! 5038                            5,
31794 8270                        05            .byte	5
31795                                           ! 5039                                 0,
31796 8271                        00            .byte	0
31797                                           ! 5040                            0,
31798 8272                        00            .byte	0
31799                                           ! 5041                                 0,
31800 8273                        00            .byte	0
31801                                           ! 5042                          0,
31802 8274                      0000            .word	0
31803 8276                      0000            .word	0
31804                                           ! 5043 } },
31805                                           ! 5044 { 0x0112,
31806 8278                      0112            .word	$112
31807                                           ! 5045 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31808 827A                      009B            .word	$9B
31809                                           ! 5046                           0x01 | 0x02 | 0x04,
31810 827C                        07            .byte	7
31811                                           ! 5047                           0,
31812 827D                        00            .byte	0
31813                                           ! 5048                           64,
31814 827E                      0040            .word	$40
31815                                           ! 5049                    64,
31816 8280                      0040            .word	$40
31817                                           ! 5050                        0xA000,
31818 8282                      A000            .word	$A000
31819                                           ! 5051                        0x0000,
31820 8284                      0000            .word	0
31821                                           ! 5052                       0,
31822 8286                      0000            .word	0
31823 8288                      0000            .word	0
31824                                           ! 5053                             1920,
31825 828A                      0780            .word	$780
31826                                           ! 5054                        640,
31827 828C                      0280            .word	$280
31828                                           ! 5055                        480,
31829 828E                      01E0            .word	$1E0
31830                                           ! 5056                      8,
31831 8290                        08            .byte	8
31832                                           ! 5057                      16,
31833 8291                        10            .byte	$10
31834                                           ! 5058                           1,
31835 8292                        01            .byte	1
31836                                           ! 5059                         24,
31837 8293                        18            .byte	$18
31838                                           ! 5060                          15,
31839 8294                        0F            .byte	$F
31840                                           ! 5061                        0x06,
31841 8295                        06            .byte	6
31842                                           ! 5062                     0,
31843 8296                        00            .byte	0
31844                                           ! 5063                               17,
31845 8297                        11            .byte	$11
31846                                           ! 5064                          0,
31847 8298                        00            .byte	0
31848                                           ! 5065                        8,
31849 8299                        08            .byte	8
31850                                           ! 5066                             16,
31851 829A                        10            .byte	$10
31852                                           ! 5067                          8,
31853 829B                        08            .byte	8
31854                                           ! 5068                               8,
31855 829C                        08            .byte	8
31856                                           ! 5069                         8,
31857 829D                        08            .byte	8
31858                                           ! 5070                              0,
31859 829E                        00            .byte	0
31860                                           ! 5071                         0,
31861 829F                        00            .byte	0
31862                                           ! 5072                              0,
31863 82A0                        00            .byte	0
31864                                           ! 5073                                0,
31865 82A1                        00            .byte	0
31866                                           ! 5074                        0xE0000000,
31867 82A2                      0000            .word	0
31868 82A4                      E000            .word	$E000
31869                                           ! 5075                               0,
31870 82A6                      0000            .word	0
31871 82A8                      0000            .word	0
31872                                           ! 5076                             0,
31873 82AA                      0000            .word	0
31874                                           ! 5077                                1920
31875                                           ! 5077 ,
31876 82AC                      0780            .word	$780
31877                                           ! 5078                             0,
31878 82AE                        00            .byte	0
31879                                           ! 5079                             0,
31880 82AF                        00            .byte	0
31881                                           ! 5080                           8,
31882 82B0                        08            .byte	8
31883                                           ! 5081                                16,
31884 82B1                        10            .byte	$10
31885                                           ! 5082                             8,
31886 82B2                        08            .byte	8
31887                                           ! 5083                                  8,
31888 82B3                        08            .byte	8
31889                                           ! 5084                            8,
31890 82B4                        08            .byte	8
31891                                           ! 5085                                 0,
31892 82B5                        00            .byte	0
31893                                           ! 5086                            0,
31894 82B6                        00            .byte	0
31895                                           ! 5087                                 0,
31896 82B7                        00            .byte	0
31897                                           ! 5088                          0,
31898 82B8                      0000            .word	0
31899 82BA                      0000            .word	0
31900                                           ! 5089 } },
31901                                           ! 5090 { 0x0113,
31902 82BC                      0113            .word	$113
31903                                           ! 5091 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31904 82BE                      009B            .word	$9B
31905                                           ! 5092                           0x01 | 0x02 | 0x04,
31906 82C0                        07            .byte	7
31907                                           ! 5093                           0,
31908 82C1                        00            .byte	0
31909                                           ! 5094                           64,
31910 82C2                      0040            .word	$40
31911                                           ! 5095                    64,
31912 82C4                      0040            .word	$40
31913                                           ! 5096                        0xA000,
31914 82C6                      A000            .word	$A000
31915                                           ! 5097                        0x0000,
31916 82C8                      0000            .word	0
31917                                           ! 5098                       0,
31918 82CA                      0000            .word	0
31919 82CC                      0000            .word	0
31920                                           ! 5099                             1600,
31921 82CE                      0640            .word	$640
31922                                           ! 5100                        800,
31923 82D0                      0320            .word	$320
31924                                           ! 5101                        600,
31925 82D2                      0258            .word	$258
31926                                           ! 5102                      8,
31927 82D4                        08            .byte	8
31928                                           ! 5103                      16,
31929 82D5                        10            .byte	$10
31930                                           ! 5104                           1,
31931 82D6                        01            .byte	1
31932                                           ! 5105                         15,
31933 82D7                        0F            .byte	$F
31934                                           ! 5106                          15,
31935 82D8                        0F            .byte	$F
31936                                           ! 5107                        0x06,
31937 82D9                        06            .byte	6
31938                                           ! 5108                     0,
31939 82DA                        00            .byte	0
31940                                           ! 5109                               16,
31941 82DB                        10            .byte	$10
31942                                           ! 5110                          0,
31943 82DC                        00            .byte	0
31944                                           ! 5111                        5,
31945 82DD                        05            .byte	5
31946                                           ! 5112                             10,
31947 82DE                        0A            .byte	$A
31948                                           ! 5113                          5,
31949 82DF                        05            .byte	5
31950                                           ! 5114                               5,
31951 82E0                        05            .byte	5
31952                                           ! 5115                         5,
31953 82E1                        05            .byte	5
31954                                           ! 5116                              0,
31955 82E2                        00            .byte	0
31956                                           ! 5117                         1,
31957 82E3                        01            .byte	1
31958                                           ! 5118                              15,
31959 82E4                        0F            .byte	$F
31960                                           ! 5119                                0,
31961 82E5                        00            .byte	0
31962                                           ! 5120                        0xE0000000,
31963 82E6                      0000            .word	0
31964 82E8                      E000            .word	$E000
31965                                           ! 5121                               0,
31966 82EA                      0000            .word	0
31967 82EC                      0000            .word	0
31968                                           ! 5122                             0,
31969 82EE                      0000            .word	0
31970                                           ! 5123                                1600,
31971 82F0                      0640            .word	$640
31972                                           ! 5124                             0,
31973 82F2                        00            .byte	0
31974                                           ! 5125                             0,
31975 82F3                        00            .byte	0
31976                                           ! 5126                           5,
31977 82F4                        05            .byte	5
31978                                           ! 5127                                10,
31979 82F5                        0A            .byte	$A
31980                                           ! 5128                             5,
31981 82F6                        05            .byte	5
31982                                           ! 5129                                  5,
31983 82F7                        05            .byte	5
31984                                           ! 5130                            5,
31985 82F8                        05            .byte	5
31986                                           ! 5131                                 0,
31987 82F9                        00            .byte	0
31988                                           ! 5132                            1,
31989 82FA                        01            .byte	1
31990                                           ! 5133                                 15,
31991 82FB                        0F            .byte	$F
31992                                           ! 5134                          0,
31993 82FC                      0000            .word	0
31994 82FE                      0000            .word	0
31995                                           ! 5135 } },
31996                                           ! 5136 { 0x0114,
31997 8300                      0114            .word	$114
31998                                           ! 5137 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31999 8302                      009B            .word	$9B
32000                                           ! 5138                           0x01 | 0x02 | 0x04,
32001 8304                        07            .byte	7
32002                                           ! 5139                           0,
32003 8305                        00            .byte	0
32004                                           ! 5140                           64,
32005 8306                      0040            .word	$40
32006                                           ! 5141                    64,
32007 8308                      0040            .word	$40
32008                                           ! 5142                        0xA000,
32009 830A                      A000            .word	$A000
32010                                           ! 5143                        0x0000,
32011 830C                      0000            .word	0
32012                                           ! 5144                       0,
32013 830E                      0000            .word	0
32014 8310                      0000            .word	0
32015                                           ! 5145                             1600,
32016 8312                      0640            .word	$640
32017                                           ! 5146           
32018                                           ! 5146              800,
32019 8314                      0320            .word	$320
32020                                           ! 5147                        600,
32021 8316                      0258            .word	$258
32022                                           ! 5148                      8,
32023 8318                        08            .byte	8
32024                                           ! 5149                      16,
32025 8319                        10            .byte	$10
32026                                           ! 5150                           1,
32027 831A                        01            .byte	1
32028                                           ! 5151                         16,
32029 831B                        10            .byte	$10
32030                                           ! 5152                          15,
32031 831C                        0F            .byte	$F
32032                                           ! 5153                        0x06,
32033 831D                        06            .byte	6
32034                                           ! 5154                     0,
32035 831E                        00            .byte	0
32036                                           ! 5155                               16,
32037 831F                        10            .byte	$10
32038                                           ! 5156                          0,
32039 8320                        00            .byte	0
32040                                           ! 5157                        5,
32041 8321                        05            .byte	5
32042                                           ! 5158                             11,
32043 8322                        0B            .byte	$B
32044                                           ! 5159                          6,
32045 8323                        06            .byte	6
32046                                           ! 5160                               5,
32047 8324                        05            .byte	5
32048                                           ! 5161                         5,
32049 8325                        05            .byte	5
32050                                           ! 5162                              0,
32051 8326                        00            .byte	0
32052                                           ! 5163                         0,
32053 8327                        00            .byte	0
32054                                           ! 5164                              0,
32055 8328                        00            .byte	0
32056                                           ! 5165                                0,
32057 8329                        00            .byte	0
32058                                           ! 5166                        0xE0000000,
32059 832A                      0000            .word	0
32060 832C                      E000            .word	$E000
32061                                           ! 5167                               0,
32062 832E                      0000            .word	0
32063 8330                      0000            .word	0
32064                                           ! 5168                             0,
32065 8332                      0000            .word	0
32066                                           ! 5169                                1600,
32067 8334                      0640            .word	$640
32068                                           ! 5170                             0,
32069 8336                        00            .byte	0
32070                                           ! 5171                             0,
32071 8337                        00            .byte	0
32072                                           ! 5172                           5,
32073 8338                        05            .byte	5
32074                                           ! 5173                                11,
32075 8339                        0B            .byte	$B
32076                                           ! 5174                             6,
32077 833A                        06            .byte	6
32078                                           ! 5175                                  5,
32079 833B                        05            .byte	5
32080                                           ! 5176                            5,
32081 833C                        05            .byte	5
32082                                           ! 5177                                 0,
32083 833D                        00            .byte	0
32084                                           ! 5178                            0,
32085 833E                        00            .byte	0
32086                                           ! 5179                                 0,
32087 833F                        00            .byte	0
32088                                           ! 5180                          0,
32089 8340                      0000            .word	0
32090 8342                      0000            .word	0
32091                                           ! 5181 } },
32092                                           ! 5182 { 0x0115,
32093 8344                      0115            .word	$115
32094                                           ! 5183 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32095 8346                      009B            .word	$9B
32096                                           ! 5184                           0x01 | 0x02 | 0x04,
32097 8348                        07            .byte	7
32098                                           ! 5185                           0,
32099 8349                        00            .byte	0
32100                                           ! 5186                           64,
32101 834A                      0040            .word	$40
32102                                           ! 5187                    64,
32103 834C                      0040            .word	$40
32104                                           ! 5188                        0xA000,
32105 834E                      A000            .word	$A000
32106                                           ! 5189                        0x0000,
32107 8350                      0000            .word	0
32108                                           ! 5190                       0,
32109 8352                      0000            .word	0
32110 8354                      0000            .word	0
32111                                           ! 5191                             2400,
32112 8356                      0960            .word	$960
32113                                           ! 5192                        800,
32114 8358                      0320            .word	$320
32115                                           ! 5193                        600,
32116 835A                      0258            .word	$258
32117                                           ! 5194                      8,
32118 835C                        08            .byte	8
32119                                           ! 5195                      16,
32120 835D                        10            .byte	$10
32121                                           ! 5196                           1,
32122 835E                        01            .byte	1
32123                                           ! 5197                         24,
32124 835F                        18            .byte	$18
32125                                           ! 5198                          22,
32126 8360                        16            .byte	$16
32127                                           ! 5199                        0x06,
32128 8361                        06            .byte	6
32129                                           ! 5200                     0,
32130 8362                        00            .byte	0
32131                                           ! 5201                               10,
32132 8363                        0A            .byte	$A
32133                                           ! 5202                          0,
32134 8364                        00            .byte	0
32135                                           ! 5203                        8,
32136 8365                        08            .byte	8
32137                                           ! 5204                             16,
32138 8366                        10            .byte	$10
32139                                           ! 5205                          8,
32140 8367                        08            .byte	8
32141                                           ! 5206                               8,
32142 8368                        08            .byte	8
32143                                           ! 5207                         8,
32144 8369                        08            .byte	8
32145                                           ! 5208                              0,
32146 836A                        00            .byte	0
32147                                           ! 5209                         0,
32148 836B                        00            .byte	0
32149                                           ! 5210                              0,
32150 836C                        00            .byte	0
32151                                           ! 5211                                0,
32152 836D                        00            .byte	0
32153                                           ! 5212                        0xE0000000,
32154 836E                      0000            .word	0
32155 8370                      E000            .word	$E000
32156                                           ! 5213                               0,
32157 8372                      0000            .word	0
32158 8374                      0000            .word	0
32159                                           ! 5214                             0,
32160 8376                      0000            .word	0
32161                                           ! 5215           
32162                                           ! 5215                      2400,
32163 8378                      0960            .word	$960
32164                                           ! 5216                             0,
32165 837A                        00            .byte	0
32166                                           ! 5217                             0,
32167 837B                        00            .byte	0
32168                                           ! 5218                           8,
32169 837C                        08            .byte	8
32170                                           ! 5219                                16,
32171 837D                        10            .byte	$10
32172                                           ! 5220                             8,
32173 837E                        08            .byte	8
32174                                           ! 5221                                  8,
32175 837F                        08            .byte	8
32176                                           ! 5222                            8,
32177 8380                        08            .byte	8
32178                                           ! 5223                                 0,
32179 8381                        00            .byte	0
32180                                           ! 5224                            0,
32181 8382                        00            .byte	0
32182                                           ! 5225                                 0,
32183 8383                        00            .byte	0
32184                                           ! 5226                          0,
32185 8384                      0000            .word	0
32186 8386                      0000            .word	0
32187                                           ! 5227 } },
32188                                           ! 5228 { 0x0116,
32189 8388                      0116            .word	$116
32190                                           ! 5229 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32191 838A                      009B            .word	$9B
32192                                           ! 5230                           0x01 | 0x02 | 0x04,
32193 838C                        07            .byte	7
32194                                           ! 5231                           0,
32195 838D                        00            .byte	0
32196                                           ! 5232                           64,
32197 838E                      0040            .word	$40
32198                                           ! 5233                    64,
32199 8390                      0040            .word	$40
32200                                           ! 5234                        0xA000,
32201 8392                      A000            .word	$A000
32202                                           ! 5235                        0x0000,
32203 8394                      0000            .word	0
32204                                           ! 5236                       0,
32205 8396                      0000            .word	0
32206 8398                      0000            .word	0
32207                                           ! 5237                             2048,
32208 839A                      0800            .word	$800
32209                                           ! 5238                        1024,
32210 839C                      0400            .word	$400
32211                                           ! 5239                        768,
32212 839E                      0300            .word	$300
32213                                           ! 5240                      8,
32214 83A0                        08            .byte	8
32215                                           ! 5241                      16,
32216 83A1                        10            .byte	$10
32217                                           ! 5242                           1,
32218 83A2                        01            .byte	1
32219                                           ! 5243                         15,
32220 83A3                        0F            .byte	$F
32221                                           ! 5244                          24,
32222 83A4                        18            .byte	$18
32223                                           ! 5245                        0x06,
32224 83A5                        06            .byte	6
32225                                           ! 5246                     0,
32226 83A6                        00            .byte	0
32227                                           ! 5247                               9,
32228 83A7                        09            .byte	9
32229                                           ! 5248                          0,
32230 83A8                        00            .byte	0
32231                                           ! 5249                        5,
32232 83A9                        05            .byte	5
32233                                           ! 5250                             10,
32234 83AA                        0A            .byte	$A
32235                                           ! 5251                          5,
32236 83AB                        05            .byte	5
32237                                           ! 5252                               5,
32238 83AC                        05            .byte	5
32239                                           ! 5253                         5,
32240 83AD                        05            .byte	5
32241                                           ! 5254                              0,
32242 83AE                        00            .byte	0
32243                                           ! 5255                         1,
32244 83AF                        01            .byte	1
32245                                           ! 5256                              15,
32246 83B0                        0F            .byte	$F
32247                                           ! 5257                                0,
32248 83B1                        00            .byte	0
32249                                           ! 5258                        0xE0000000,
32250 83B2                      0000            .word	0
32251 83B4                      E000            .word	$E000
32252                                           ! 5259                               0,
32253 83B6                      0000            .word	0
32254 83B8                      0000            .word	0
32255                                           ! 5260                             0,
32256 83BA                      0000            .word	0
32257                                           ! 5261                                2048,
32258 83BC                      0800            .word	$800
32259                                           ! 5262                             0,
32260 83BE                        00            .byte	0
32261                                           ! 5263                             0,
32262 83BF                        00            .byte	0
32263                                           ! 5264                           5,
32264 83C0                        05            .byte	5
32265                                           ! 5265                                10,
32266 83C1                        0A            .byte	$A
32267                                           ! 5266                             5,
32268 83C2                        05            .byte	5
32269                                           ! 5267                                  5,
32270 83C3                        05            .byte	5
32271                                           ! 5268                            5,
32272 83C4                        05            .byte	5
32273                                           ! 5269                                 0,
32274 83C5                        00            .byte	0
32275                                           ! 5270                            1,
32276 83C6                        01            .byte	1
32277                                           ! 5271                                 15,
32278 83C7                        0F            .byte	$F
32279                                           ! 5272                          0,
32280 83C8                      0000            .word	0
32281 83CA                      0000            .word	0
32282                                           ! 5273 } },
32283                                           ! 5274 { 0x0117,
32284 83CC                      0117            .word	$117
32285                                           ! 5275 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32286 83CE                      009B            .word	$9B
32287                                           ! 5276                           0x01 | 0x02 | 0x04,
32288 83D0                        07            .byte	7
32289                                           ! 5277                           0,
32290 83D1                        00            .byte	0
32291                                           ! 5278                           64,
32292 83D2                      0040            .word	$40
32293                                           ! 5279                    64,
32294 83D4                      0040            .word	$40
32295                                           ! 5280                        0xA000,
32296 83D6                      A000            .word	$A000
32297                                           ! 5281                        0x0000,
32298 83D8                      0000            .word	0
32299                                           ! 5282                       0,
32300 83DA                      0000            .word	0
32301 83DC                      0000            .word	0
32302                                           ! 5283                    
32303                                           ! 5283          2048,
32304 83DE                      0800            .word	$800
32305                                           ! 5284                        1024,
32306 83E0                      0400            .word	$400
32307                                           ! 5285                        768,
32308 83E2                      0300            .word	$300
32309                                           ! 5286                      8,
32310 83E4                        08            .byte	8
32311                                           ! 5287                      16,
32312 83E5                        10            .byte	$10
32313                                           ! 5288                           1,
32314 83E6                        01            .byte	1
32315                                           ! 5289                         16,
32316 83E7                        10            .byte	$10
32317                                           ! 5290                          24,
32318 83E8                        18            .byte	$18
32319                                           ! 5291                        0x06,
32320 83E9                        06            .byte	6
32321                                           ! 5292                     0,
32322 83EA                        00            .byte	0
32323                                           ! 5293                               9,
32324 83EB                        09            .byte	9
32325                                           ! 5294                          0,
32326 83EC                        00            .byte	0
32327                                           ! 5295                        5,
32328 83ED                        05            .byte	5
32329                                           ! 5296                             11,
32330 83EE                        0B            .byte	$B
32331                                           ! 5297                          6,
32332 83EF                        06            .byte	6
32333                                           ! 5298                               5,
32334 83F0                        05            .byte	5
32335                                           ! 5299                         5,
32336 83F1                        05            .byte	5
32337                                           ! 5300                              0,
32338 83F2                        00            .byte	0
32339                                           ! 5301                         0,
32340 83F3                        00            .byte	0
32341                                           ! 5302                              0,
32342 83F4                        00            .byte	0
32343                                           ! 5303                                0,
32344 83F5                        00            .byte	0
32345                                           ! 5304                        0xE0000000,
32346 83F6                      0000            .word	0
32347 83F8                      E000            .word	$E000
32348                                           ! 5305                               0,
32349 83FA                      0000            .word	0
32350 83FC                      0000            .word	0
32351                                           ! 5306                             0,
32352 83FE                      0000            .word	0
32353                                           ! 5307                                2048,
32354 8400                      0800            .word	$800
32355                                           ! 5308                             0,
32356 8402                        00            .byte	0
32357                                           ! 5309                             0,
32358 8403                        00            .byte	0
32359                                           ! 5310                           5,
32360 8404                        05            .byte	5
32361                                           ! 5311                                11,
32362 8405                        0B            .byte	$B
32363                                           ! 5312                             6,
32364 8406                        06            .byte	6
32365                                           ! 5313                                  5,
32366 8407                        05            .byte	5
32367                                           ! 5314                            5,
32368 8408                        05            .byte	5
32369                                           ! 5315                                 0,
32370 8409                        00            .byte	0
32371                                           ! 5316                            0,
32372 840A                        00            .byte	0
32373                                           ! 5317                                 0,
32374 840B                        00            .byte	0
32375                                           ! 5318                          0,
32376 840C                      0000            .word	0
32377 840E                      0000            .word	0
32378                                           ! 5319 } },
32379                                           ! 5320 { 0x0118,
32380 8410                      0118            .word	$118
32381                                           ! 5321 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32382 8412                      009B            .word	$9B
32383                                           ! 5322                           0x01 | 0x02 | 0x04,
32384 8414                        07            .byte	7
32385                                           ! 5323                           0,
32386 8415                        00            .byte	0
32387                                           ! 5324                           64,
32388 8416                      0040            .word	$40
32389                                           ! 5325                    64,
32390 8418                      0040            .word	$40
32391                                           ! 5326                        0xA000,
32392 841A                      A000            .word	$A000
32393                                           ! 5327                        0x0000,
32394 841C                      0000            .word	0
32395                                           ! 5328                       0,
32396 841E                      0000            .word	0
32397 8420                      0000            .word	0
32398                                           ! 5329                             3072,
32399 8422                      0C00            .word	$C00
32400                                           ! 5330                        1024,
32401 8424                      0400            .word	$400
32402                                           ! 5331                        768,
32403 8426                      0300            .word	$300
32404                                           ! 5332                      8,
32405 8428                        08            .byte	8
32406                                           ! 5333                      16,
32407 8429                        10            .byte	$10
32408                                           ! 5334                           1,
32409 842A                        01            .byte	1
32410                                           ! 5335                         24,
32411 842B                        18            .byte	$18
32412                                           ! 5336                          36,
32413 842C                        24            .byte	$24
32414                                           ! 5337                        0x06,
32415 842D                        06            .byte	6
32416                                           ! 5338                     0,
32417 842E                        00            .byte	0
32418                                           ! 5339                               6,
32419 842F                        06            .byte	6
32420                                           ! 5340                          0,
32421 8430                        00            .byte	0
32422                                           ! 5341                        8,
32423 8431                        08            .byte	8
32424                                           ! 5342                             16,
32425 8432                        10            .byte	$10
32426                                           ! 5343                          8,
32427 8433                        08            .byte	8
32428                                           ! 5344                               8,
32429 8434                        08            .byte	8
32430                                           ! 5345                         8,
32431 8435                        08            .byte	8
32432                                           ! 5346                              0,
32433 8436                        00            .byte	0
32434                                           ! 5347                         0,
32435 8437                        00            .byte	0
32436                                           ! 5348                              0,
32437 8438                        00            .byte	0
32438                                           ! 5349                                0,
32439 8439                        00            .byte	0
32440                                           ! 5350                        0xE0000000,
32441 843A                      0000            .word	0
32442 843C                      E000            .word	$E000
32443                                           ! 5351                               0,
32444 843E                      0000            .word	0
32445 8440                      0000            .word	0
32446                                           ! 5352                 
32447                                           ! 5352             0,
32448 8442                      0000            .word	0
32449                                           ! 5353                                3072,
32450 8444                      0C00            .word	$C00
32451                                           ! 5354                             0,
32452 8446                        00            .byte	0
32453                                           ! 5355                             0,
32454 8447                        00            .byte	0
32455                                           ! 5356                           8,
32456 8448                        08            .byte	8
32457                                           ! 5357                                16,
32458 8449                        10            .byte	$10
32459                                           ! 5358                             8,
32460 844A                        08            .byte	8
32461                                           ! 5359                                  8,
32462 844B                        08            .byte	8
32463                                           ! 5360                            8,
32464 844C                        08            .byte	8
32465                                           ! 5361                                 0,
32466 844D                        00            .byte	0
32467                                           ! 5362                            0,
32468 844E                        00            .byte	0
32469                                           ! 5363                                 0,
32470 844F                        00            .byte	0
32471                                           ! 5364                          0,
32472 8450                      0000            .word	0
32473 8452                      0000            .word	0
32474                                           ! 5365 } },
32475                                           ! 5366 { 0x0119,
32476 8454                      0119            .word	$119
32477                                           ! 5367 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32478 8456                      009B            .word	$9B
32479                                           ! 5368                           0x01 | 0x02 | 0x04,
32480 8458                        07            .byte	7
32481                                           ! 5369                           0,
32482 8459                        00            .byte	0
32483                                           ! 5370                           64,
32484 845A                      0040            .word	$40
32485                                           ! 5371                    64,
32486 845C                      0040            .word	$40
32487                                           ! 5372                        0xA000,
32488 845E                      A000            .word	$A000
32489                                           ! 5373                        0x0000,
32490 8460                      0000            .word	0
32491                                           ! 5374                       0,
32492 8462                      0000            .word	0
32493 8464                      0000            .word	0
32494                                           ! 5375                             2560,
32495 8466                      0A00            .word	$A00
32496                                           ! 5376                        1280,
32497 8468                      0500            .word	$500
32498                                           ! 5377                        1024,
32499 846A                      0400            .word	$400
32500                                           ! 5378                      8,
32501 846C                        08            .byte	8
32502                                           ! 5379                      16,
32503 846D                        10            .byte	$10
32504                                           ! 5380                           1,
32505 846E                        01            .byte	1
32506                                           ! 5381                         15,
32507 846F                        0F            .byte	$F
32508                                           ! 5382                          40,
32509 8470                        28            .byte	$28
32510                                           ! 5383                        0x06,
32511 8471                        06            .byte	6
32512                                           ! 5384                     0,
32513 8472                        00            .byte	0
32514                                           ! 5385                               5,
32515 8473                        05            .byte	5
32516                                           ! 5386                          0,
32517 8474                        00            .byte	0
32518                                           ! 5387                        5,
32519 8475                        05            .byte	5
32520                                           ! 5388                             10,
32521 8476                        0A            .byte	$A
32522                                           ! 5389                          5,
32523 8477                        05            .byte	5
32524                                           ! 5390                               5,
32525 8478                        05            .byte	5
32526                                           ! 5391                         5,
32527 8479                        05            .byte	5
32528                                           ! 5392                              0,
32529 847A                        00            .byte	0
32530                                           ! 5393                         1,
32531 847B                        01            .byte	1
32532                                           ! 5394                              15,
32533 847C                        0F            .byte	$F
32534                                           ! 5395                                0,
32535 847D                        00            .byte	0
32536                                           ! 5396                        0xE0000000,
32537 847E                      0000            .word	0
32538 8480                      E000            .word	$E000
32539                                           ! 5397                               0,
32540 8482                      0000            .word	0
32541 8484                      0000            .word	0
32542                                           ! 5398                             0,
32543 8486                      0000            .word	0
32544                                           ! 5399                                2560,
32545 8488                      0A00            .word	$A00
32546                                           ! 5400                             0,
32547 848A                        00            .byte	0
32548                                           ! 5401                             0,
32549 848B                        00            .byte	0
32550                                           ! 5402                           5,
32551 848C                        05            .byte	5
32552                                           ! 5403                                10,
32553 848D                        0A            .byte	$A
32554                                           ! 5404                             5,
32555 848E                        05            .byte	5
32556                                           ! 5405                                  5,
32557 848F                        05            .byte	5
32558                                           ! 5406                            5,
32559 8490                        05            .byte	5
32560                                           ! 5407                                 0,
32561 8491                        00            .byte	0
32562                                           ! 5408                            1,
32563 8492                        01            .byte	1
32564                                           ! 5409                                 15,
32565 8493                        0F            .byte	$F
32566                                           ! 5410                          0,
32567 8494                      0000            .word	0
32568 8496                      0000            .word	0
32569                                           ! 5411 } },
32570                                           ! 5412 { 0x011a,
32571 8498                      011A            .word	$11A
32572                                           ! 5413 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32573 849A                      009B            .word	$9B
32574                                           ! 5414                           0x01 | 0x02 | 0x04,
32575 849C                        07            .byte	7
32576                                           ! 5415                           0,
32577 849D                        00            .byte	0
32578                                           ! 5416                           64,
32579 849E                      0040            .word	$40
32580                                           ! 5417                    64,
32581 84A0                      0040            .word	$40
32582                                           ! 5418                        0xA000,
32583 84A2                      A000            .word	$A000
32584                                           ! 5419                        0x0000,
32585 84A4                      0000            .word	0
32586                                           ! 5420                   
32587                                           ! 5420     0,
32588 84A6                      0000            .word	0
32589 84A8                      0000            .word	0
32590                                           ! 5421                             2560,
32591 84AA                      0A00            .word	$A00
32592                                           ! 5422                        1280,
32593 84AC                      0500            .word	$500
32594                                           ! 5423                        1024,
32595 84AE                      0400            .word	$400
32596                                           ! 5424                      8,
32597 84B0                        08            .byte	8
32598                                           ! 5425                      16,
32599 84B1                        10            .byte	$10
32600                                           ! 5426                           1,
32601 84B2                        01            .byte	1
32602                                           ! 5427                         16,
32603 84B3                        10            .byte	$10
32604                                           ! 5428                          40,
32605 84B4                        28            .byte	$28
32606                                           ! 5429                        0x06,
32607 84B5                        06            .byte	6
32608                                           ! 5430                     0,
32609 84B6                        00            .byte	0
32610                                           ! 5431                               5,
32611 84B7                        05            .byte	5
32612                                           ! 5432                          0,
32613 84B8                        00            .byte	0
32614                                           ! 5433                        5,
32615 84B9                        05            .byte	5
32616                                           ! 5434                             11,
32617 84BA                        0B            .byte	$B
32618                                           ! 5435                          6,
32619 84BB                        06            .byte	6
32620                                           ! 5436                               5,
32621 84BC                        05            .byte	5
32622                                           ! 5437                         5,
32623 84BD                        05            .byte	5
32624                                           ! 5438                              0,
32625 84BE                        00            .byte	0
32626                                           ! 5439                         0,
32627 84BF                        00            .byte	0
32628                                           ! 5440                              0,
32629 84C0                        00            .byte	0
32630                                           ! 5441                                0,
32631 84C1                        00            .byte	0
32632                                           ! 5442                        0xE0000000,
32633 84C2                      0000            .word	0
32634 84C4                      E000            .word	$E000
32635                                           ! 5443                               0,
32636 84C6                      0000            .word	0
32637 84C8                      0000            .word	0
32638                                           ! 5444                             0,
32639 84CA                      0000            .word	0
32640                                           ! 5445                                2560,
32641 84CC                      0A00            .word	$A00
32642                                           ! 5446                             0,
32643 84CE                        00            .byte	0
32644                                           ! 5447                             0,
32645 84CF                        00            .byte	0
32646                                           ! 5448                           5,
32647 84D0                        05            .byte	5
32648                                           ! 5449                                11,
32649 84D1                        0B            .byte	$B
32650                                           ! 5450                             6,
32651 84D2                        06            .byte	6
32652                                           ! 5451                                  5,
32653 84D3                        05            .byte	5
32654                                           ! 5452                            5,
32655 84D4                        05            .byte	5
32656                                           ! 5453                                 0,
32657 84D5                        00            .byte	0
32658                                           ! 5454                            0,
32659 84D6                        00            .byte	0
32660                                           ! 5455                                 0,
32661 84D7                        00            .byte	0
32662                                           ! 5456                          0,
32663 84D8                      0000            .word	0
32664 84DA                      0000            .word	0
32665                                           ! 5457 } },
32666                                           ! 5458 { 0x011b,
32667 84DC                      011B            .word	$11B
32668                                           ! 5459 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32669 84DE                      009B            .word	$9B
32670                                           ! 5460                           0x01 | 0x02 | 0x04,
32671 84E0                        07            .byte	7
32672                                           ! 5461                           0,
32673 84E1                        00            .byte	0
32674                                           ! 5462                           64,
32675 84E2                      0040            .word	$40
32676                                           ! 5463                    64,
32677 84E4                      0040            .word	$40
32678                                           ! 5464                        0xA000,
32679 84E6                      A000            .word	$A000
32680                                           ! 5465                        0x0000,
32681 84E8                      0000            .word	0
32682                                           ! 5466                       0,
32683 84EA                      0000            .word	0
32684 84EC                      0000            .word	0
32685                                           ! 5467                             3840,
32686 84EE                      0F00            .word	$F00
32687                                           ! 5468                        1280,
32688 84F0                      0500            .word	$500
32689                                           ! 5469                        1024,
32690 84F2                      0400            .word	$400
32691                                           ! 5470                      8,
32692 84F4                        08            .byte	8
32693                                           ! 5471                      16,
32694 84F5                        10            .byte	$10
32695                                           ! 5472                           1,
32696 84F6                        01            .byte	1
32697                                           ! 5473                         24,
32698 84F7                        18            .byte	$18
32699                                           ! 5474                          60,
32700 84F8                        3C            .byte	$3C
32701                                           ! 5475                        0x06,
32702 84F9                        06            .byte	6
32703                                           ! 5476                     0,
32704 84FA                        00            .byte	0
32705                                           ! 5477                               3,
32706 84FB                        03            .byte	3
32707                                           ! 5478                          0,
32708 84FC                        00            .byte	0
32709                                           ! 5479                        8,
32710 84FD                        08            .byte	8
32711                                           ! 5480                             16,
32712 84FE                        10            .byte	$10
32713                                           ! 5481                          8,
32714 84FF                        08            .byte	8
32715                                           ! 5482                               8,
32716 8500                        08            .byte	8
32717                                           ! 5483                         8,
32718 8501                        08            .byte	8
32719                                           ! 5484                              0,
32720 8502                        00            .byte	0
32721                                           ! 5485                         0,
32722 8503                        00            .byte	0
32723                                           ! 5486                              0,
32724 8504                        00            .byte	0
32725                                           ! 5487                                0,
32726 8505                        00            .byte	0
32727                                           ! 5488                        0xE0000000,
32728 8506                      0000            .word	0
32729 8508                      E000            .word	$E000
32730                                           ! 5489                      
32731                                           ! 5489          0,
32732 850A                      0000            .word	0
32733 850C                      0000            .word	0
32734                                           ! 5490                             0,
32735 850E                      0000            .word	0
32736                                           ! 5491                                3840,
32737 8510                      0F00            .word	$F00
32738                                           ! 5492                             0,
32739 8512                        00            .byte	0
32740                                           ! 5493                             0,
32741 8513                        00            .byte	0
32742                                           ! 5494                           8,
32743 8514                        08            .byte	8
32744                                           ! 5495                                16,
32745 8515                        10            .byte	$10
32746                                           ! 5496                             8,
32747 8516                        08            .byte	8
32748                                           ! 5497                                  8,
32749 8517                        08            .byte	8
32750                                           ! 5498                            8,
32751 8518                        08            .byte	8
32752                                           ! 5499                                 0,
32753 8519                        00            .byte	0
32754                                           ! 5500                            0,
32755 851A                        00            .byte	0
32756                                           ! 5501                                 0,
32757 851B                        00            .byte	0
32758                                           ! 5502                          0,
32759 851C                      0000            .word	0
32760 851E                      0000            .word	0
32761                                           ! 5503 } },
32762                                           ! 5504 { 0x011c,
32763 8520                      011C            .word	$11C
32764                                           ! 5505 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32765 8522                      009B            .word	$9B
32766                                           ! 5506                           0x01 | 0x02 | 0x04,
32767 8524                        07            .byte	7
32768                                           ! 5507                           0,
32769 8525                        00            .byte	0
32770                                           ! 5508                           64,
32771 8526                      0040            .word	$40
32772                                           ! 5509                    64,
32773 8528                      0040            .word	$40
32774                                           ! 5510                        0xA000,
32775 852A                      A000            .word	$A000
32776                                           ! 5511                        0x0000,
32777 852C                      0000            .word	0
32778                                           ! 5512                       0,
32779 852E                      0000            .word	0
32780 8530                      0000            .word	0
32781                                           ! 5513                             1600,
32782 8532                      0640            .word	$640
32783                                           ! 5514                        1600,
32784 8534                      0640            .word	$640
32785                                           ! 5515                        1200,
32786 8536                      04B0            .word	$4B0
32787                                           ! 5516                      8,
32788 8538                        08            .byte	8
32789                                           ! 5517                      16,
32790 8539                        10            .byte	$10
32791                                           ! 5518                           1,
32792 853A                        01            .byte	1
32793                                           ! 5519                         8,
32794 853B                        08            .byte	8
32795                                           ! 5520                          30,
32796 853C                        1E            .byte	$1E
32797                                           ! 5521                        0x04,
32798 853D                        04            .byte	4
32799                                           ! 5522                     0,
32800 853E                        00            .byte	0
32801                                           ! 5523                               7,
32802 853F                        07            .byte	7
32803                                           ! 5524                          0,
32804 8540                        00            .byte	0
32805                                           ! 5525                        0,
32806 8541                        00            .byte	0
32807                                           ! 5526                             0,
32808 8542                        00            .byte	0
32809                                           ! 5527                          0,
32810 8543                        00            .byte	0
32811                                           ! 5528                               0,
32812 8544                        00            .byte	0
32813                                           ! 5529                         0,
32814 8545                        00            .byte	0
32815                                           ! 5530                              0,
32816 8546                        00            .byte	0
32817                                           ! 5531                         0,
32818 8547                        00            .byte	0
32819                                           ! 5532                              0,
32820 8548                        00            .byte	0
32821                                           ! 5533                                0,
32822 8549                        00            .byte	0
32823                                           ! 5534                        0xE0000000,
32824 854A                      0000            .word	0
32825 854C                      E000            .word	$E000
32826                                           ! 5535                               0,
32827 854E                      0000            .word	0
32828 8550                      0000            .word	0
32829                                           ! 5536                             0,
32830 8552                      0000            .word	0
32831                                           ! 5537                                1600,
32832 8554                      0640            .word	$640
32833                                           ! 5538                             0,
32834 8556                        00            .byte	0
32835                                           ! 5539                             0,
32836 8557                        00            .byte	0
32837                                           ! 5540                           0,
32838 8558                        00            .byte	0
32839                                           ! 5541                                0,
32840 8559                        00            .byte	0
32841                                           ! 5542                             0,
32842 855A                        00            .byte	0
32843                                           ! 5543                                  0,
32844 855B                        00            .byte	0
32845                                           ! 5544                            0,
32846 855C                        00            .byte	0
32847                                           ! 5545                                 0,
32848 855D                        00            .byte	0
32849                                           ! 5546                            0,
32850 855E                        00            .byte	0
32851                                           ! 5547                                 0,
32852 855F                        00            .byte	0
32853                                           ! 5548                          0,
32854 8560                      0000            .word	0
32855 8562                      0000            .word	0
32856                                           ! 5549 } },
32857                                           ! 5550 { 0x011d,
32858 8564                      011D            .word	$11D
32859                                           ! 5551 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32860 8566                      009B            .word	$9B
32861                                           ! 5552                           0x01 | 0x02 | 0x04,
32862 8568                        07            .byte	7
32863                                           ! 5553                           0,
32864 8569                        00            .byte	0
32865                                           ! 5554                           64,
32866 856A                      0040            .word	$40
32867                                           ! 5555                    64,
32868 856C                      0040            .word	$40
32869                                           ! 5556                        0xA000,
32870 856E                      A000            .word	$A000
32871                                           ! 5557                        0x0
32872                                           ! 5557 000,
32873 8570                      0000            .word	0
32874                                           ! 5558                       0,
32875 8572                      0000            .word	0
32876 8574                      0000            .word	0
32877                                           ! 5559                             3200,
32878 8576                      0C80            .word	$C80
32879                                           ! 5560                        1600,
32880 8578                      0640            .word	$640
32881                                           ! 5561                        1200,
32882 857A                      04B0            .word	$4B0
32883                                           ! 5562                      8,
32884 857C                        08            .byte	8
32885                                           ! 5563                      16,
32886 857D                        10            .byte	$10
32887                                           ! 5564                           1,
32888 857E                        01            .byte	1
32889                                           ! 5565                         15,
32890 857F                        0F            .byte	$F
32891                                           ! 5566                          59,
32892 8580                        3B            .byte	$3B
32893                                           ! 5567                        0x06,
32894 8581                        06            .byte	6
32895                                           ! 5568                     0,
32896 8582                        00            .byte	0
32897                                           ! 5569                               3,
32898 8583                        03            .byte	3
32899                                           ! 5570                          0,
32900 8584                        00            .byte	0
32901                                           ! 5571                        5,
32902 8585                        05            .byte	5
32903                                           ! 5572                             10,
32904 8586                        0A            .byte	$A
32905                                           ! 5573                          5,
32906 8587                        05            .byte	5
32907                                           ! 5574                               5,
32908 8588                        05            .byte	5
32909                                           ! 5575                         5,
32910 8589                        05            .byte	5
32911                                           ! 5576                              0,
32912 858A                        00            .byte	0
32913                                           ! 5577                         1,
32914 858B                        01            .byte	1
32915                                           ! 5578                              15,
32916 858C                        0F            .byte	$F
32917                                           ! 5579                                0,
32918 858D                        00            .byte	0
32919                                           ! 5580                        0xE0000000,
32920 858E                      0000            .word	0
32921 8590                      E000            .word	$E000
32922                                           ! 5581                               0,
32923 8592                      0000            .word	0
32924 8594                      0000            .word	0
32925                                           ! 5582                             0,
32926 8596                      0000            .word	0
32927                                           ! 5583                                3200,
32928 8598                      0C80            .word	$C80
32929                                           ! 5584                             0,
32930 859A                        00            .byte	0
32931                                           ! 5585                             0,
32932 859B                        00            .byte	0
32933                                           ! 5586                           5,
32934 859C                        05            .byte	5
32935                                           ! 5587                                10,
32936 859D                        0A            .byte	$A
32937                                           ! 5588                             5,
32938 859E                        05            .byte	5
32939                                           ! 5589                                  5,
32940 859F                        05            .byte	5
32941                                           ! 5590                            5,
32942 85A0                        05            .byte	5
32943                                           ! 5591                                 0,
32944 85A1                        00            .byte	0
32945                                           ! 5592                            1,
32946 85A2                        01            .byte	1
32947                                           ! 5593                                 15,
32948 85A3                        0F            .byte	$F
32949                                           ! 5594                          0,
32950 85A4                      0000            .word	0
32951 85A6                      0000            .word	0
32952                                           ! 5595 } },
32953                                           ! 5596 { 0x011e,
32954 85A8                      011E            .word	$11E
32955                                           ! 5597 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32956 85AA                      009B            .word	$9B
32957                                           ! 5598                           0x01 | 0x02 | 0x04,
32958 85AC                        07            .byte	7
32959                                           ! 5599                           0,
32960 85AD                        00            .byte	0
32961                                           ! 5600                           64,
32962 85AE                      0040            .word	$40
32963                                           ! 5601                    64,
32964 85B0                      0040            .word	$40
32965                                           ! 5602                        0xA000,
32966 85B2                      A000            .word	$A000
32967                                           ! 5603                        0x0000,
32968 85B4                      0000            .word	0
32969                                           ! 5604                       0,
32970 85B6                      0000            .word	0
32971 85B8                      0000            .word	0
32972                                           ! 5605                             3200,
32973 85BA                      0C80            .word	$C80
32974                                           ! 5606                        1600,
32975 85BC                      0640            .word	$640
32976                                           ! 5607                        1200,
32977 85BE                      04B0            .word	$4B0
32978                                           ! 5608                      8,
32979 85C0                        08            .byte	8
32980                                           ! 5609                      16,
32981 85C1                        10            .byte	$10
32982                                           ! 5610                           1,
32983 85C2                        01            .byte	1
32984                                           ! 5611                         16,
32985 85C3                        10            .byte	$10
32986                                           ! 5612                          59,
32987 85C4                        3B            .byte	$3B
32988                                           ! 5613                        0x06,
32989 85C5                        06            .byte	6
32990                                           ! 5614                     0,
32991 85C6                        00            .byte	0
32992                                           ! 5615                               3,
32993 85C7                        03            .byte	3
32994                                           ! 5616                          0,
32995 85C8                        00            .byte	0
32996                                           ! 5617                        5,
32997 85C9                        05            .byte	5
32998                                           ! 5618                             11,
32999 85CA                        0B            .byte	$B
33000                                           ! 5619                          6,
33001 85CB                        06            .byte	6
33002                                           ! 5620                               5,
33003 85CC                        05            .byte	5
33004                                           ! 5621                         5,
33005 85CD                        05            .byte	5
33006                                           ! 5622                              0,
33007 85CE                        00            .byte	0
33008                                           ! 5623                         0,
33009 85CF                        00            .byte	0
33010                                           ! 5624                              0,
33011 85D0                        00            .byte	0
33012                                           ! 5625                                0,
33013 85D1                        00            .byte	0
33014                                           ! 5626                        0xE00000
33015                                           ! 5626 00,
33016 85D2                      0000            .word	0
33017 85D4                      E000            .word	$E000
33018                                           ! 5627                               0,
33019 85D6                      0000            .word	0
33020 85D8                      0000            .word	0
33021                                           ! 5628                             0,
33022 85DA                      0000            .word	0
33023                                           ! 5629                                3200,
33024 85DC                      0C80            .word	$C80
33025                                           ! 5630                             0,
33026 85DE                        00            .byte	0
33027                                           ! 5631                             0,
33028 85DF                        00            .byte	0
33029                                           ! 5632                           5,
33030 85E0                        05            .byte	5
33031                                           ! 5633                                11,
33032 85E1                        0B            .byte	$B
33033                                           ! 5634                             6,
33034 85E2                        06            .byte	6
33035                                           ! 5635                                  5,
33036 85E3                        05            .byte	5
33037                                           ! 5636                            5,
33038 85E4                        05            .byte	5
33039                                           ! 5637                                 0,
33040 85E5                        00            .byte	0
33041                                           ! 5638                            0,
33042 85E6                        00            .byte	0
33043                                           ! 5639                                 0,
33044 85E7                        00            .byte	0
33045                                           ! 5640                          0,
33046 85E8                      0000            .word	0
33047 85EA                      0000            .word	0
33048                                           ! 5641 } },
33049                                           ! 5642 { 0x011f,
33050 85EC                      011F            .word	$11F
33051                                           ! 5643 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33052 85EE                      009B            .word	$9B
33053                                           ! 5644                           0x01 | 0x02 | 0x04,
33054 85F0                        07            .byte	7
33055                                           ! 5645                           0,
33056 85F1                        00            .byte	0
33057                                           ! 5646                           64,
33058 85F2                      0040            .word	$40
33059                                           ! 5647                    64,
33060 85F4                      0040            .word	$40
33061                                           ! 5648                        0xA000,
33062 85F6                      A000            .word	$A000
33063                                           ! 5649                        0x0000,
33064 85F8                      0000            .word	0
33065                                           ! 5650                       0,
33066 85FA                      0000            .word	0
33067 85FC                      0000            .word	0
33068                                           ! 5651                             4800,
33069 85FE                      12C0            .word	$12C0
33070                                           ! 5652                        1600,
33071 8600                      0640            .word	$640
33072                                           ! 5653                        1200,
33073 8602                      04B0            .word	$4B0
33074                                           ! 5654                      8,
33075 8604                        08            .byte	8
33076                                           ! 5655                      16,
33077 8605                        10            .byte	$10
33078                                           ! 5656                           1,
33079 8606                        01            .byte	1
33080                                           ! 5657                         24,
33081 8607                        18            .byte	$18
33082                                           ! 5658                          88,
33083 8608                        58            .byte	$58
33084                                           ! 5659                        0x06,
33085 8609                        06            .byte	6
33086                                           ! 5660                     0,
33087 860A                        00            .byte	0
33088                                           ! 5661                               1,
33089 860B                        01            .byte	1
33090                                           ! 5662                          0,
33091 860C                        00            .byte	0
33092                                           ! 5663                        8,
33093 860D                        08            .byte	8
33094                                           ! 5664                             16,
33095 860E                        10            .byte	$10
33096                                           ! 5665                          8,
33097 860F                        08            .byte	8
33098                                           ! 5666                               8,
33099 8610                        08            .byte	8
33100                                           ! 5667                         8,
33101 8611                        08            .byte	8
33102                                           ! 5668                              0,
33103 8612                        00            .byte	0
33104                                           ! 5669                         0,
33105 8613                        00            .byte	0
33106                                           ! 5670                              0,
33107 8614                        00            .byte	0
33108                                           ! 5671                                0,
33109 8615                        00            .byte	0
33110                                           ! 5672                        0xE0000000,
33111 8616                      0000            .word	0
33112 8618                      E000            .word	$E000
33113                                           ! 5673                               0,
33114 861A                      0000            .word	0
33115 861C                      0000            .word	0
33116                                           ! 5674                             0,
33117 861E                      0000            .word	0
33118                                           ! 5675                                4800,
33119 8620                      12C0            .word	$12C0
33120                                           ! 5676                             0,
33121 8622                        00            .byte	0
33122                                           ! 5677                             0,
33123 8623                        00            .byte	0
33124                                           ! 5678                           8,
33125 8624                        08            .byte	8
33126                                           ! 5679                                16,
33127 8625                        10            .byte	$10
33128                                           ! 5680                             8,
33129 8626                        08            .byte	8
33130                                           ! 5681                                  8,
33131 8627                        08            .byte	8
33132                                           ! 5682                            8,
33133 8628                        08            .byte	8
33134                                           ! 5683                                 0,
33135 8629                        00            .byte	0
33136                                           ! 5684                            0,
33137 862A                        00            .byte	0
33138                                           ! 5685                                 0,
33139 862B                        00            .byte	0
33140                                           ! 5686                          0,
33141 862C                      0000            .word	0
33142 862E                      0000            .word	0
33143                                           ! 5687 } },
33144                                           ! 5688 { 0x0140,
33145 8630                      0140            .word	$140
33146                                           ! 5689 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33147 8632                      009B            .word	$9B
33148                                           ! 5690                           0x01 | 0x02 | 0x04,
33149 8634                        07            .byte	7
33150                                           ! 5691                           0,
33151 8635                        00            .byte	0
33152                                           ! 5692                           64,
33153 8636                      0040            .word	$40
33154                                           ! 5693                    64,
33155 8638                      0040            .word	$40
33156                                           ! 5694                        0xA000
33157                                           ! 5694 ,
33158 863A                      A000            .word	$A000
33159                                           ! 5695                        0x0000,
33160 863C                      0000            .word	0
33161                                           ! 5696                       0,
33162 863E                      0000            .word	0
33163 8640                      0000            .word	0
33164                                           ! 5697                             1280,
33165 8642                      0500            .word	$500
33166                                           ! 5698                        320,
33167 8644                      0140            .word	$140
33168                                           ! 5699                        200,
33169 8646                      00C8            .word	$C8
33170                                           ! 5700                      8,
33171 8648                        08            .byte	8
33172                                           ! 5701                      16,
33173 8649                        10            .byte	$10
33174                                           ! 5702                           1,
33175 864A                        01            .byte	1
33176                                           ! 5703                         32,
33177 864B                        20            .byte	$20
33178                                           ! 5704                          4,
33179 864C                        04            .byte	4
33180                                           ! 5705                        0x06,
33181 864D                        06            .byte	6
33182                                           ! 5706                     0,
33183 864E                        00            .byte	0
33184                                           ! 5707                               64,
33185 864F                        40            .byte	$40
33186                                           ! 5708                          0,
33187 8650                        00            .byte	0
33188                                           ! 5709                        8,
33189 8651                        08            .byte	8
33190                                           ! 5710                             16,
33191 8652                        10            .byte	$10
33192                                           ! 5711                          8,
33193 8653                        08            .byte	8
33194                                           ! 5712                               8,
33195 8654                        08            .byte	8
33196                                           ! 5713                         8,
33197 8655                        08            .byte	8
33198                                           ! 5714                              0,
33199 8656                        00            .byte	0
33200                                           ! 5715                         8,
33201 8657                        08            .byte	8
33202                                           ! 5716                              24,
33203 8658                        18            .byte	$18
33204                                           ! 5717                                0x02,
33205 8659                        02            .byte	2
33206                                           ! 5718                        0xE0000000,
33207 865A                      0000            .word	0
33208 865C                      E000            .word	$E000
33209                                           ! 5719                               0,
33210 865E                      0000            .word	0
33211 8660                      0000            .word	0
33212                                           ! 5720                             0,
33213 8662                      0000            .word	0
33214                                           ! 5721                                1280,
33215 8664                      0500            .word	$500
33216                                           ! 5722                             0,
33217 8666                        00            .byte	0
33218                                           ! 5723                             0,
33219 8667                        00            .byte	0
33220                                           ! 5724                           8,
33221 8668                        08            .byte	8
33222                                           ! 5725                                16,
33223 8669                        10            .byte	$10
33224                                           ! 5726                             8,
33225 866A                        08            .byte	8
33226                                           ! 5727                                  8,
33227 866B                        08            .byte	8
33228                                           ! 5728                            8,
33229 866C                        08            .byte	8
33230                                           ! 5729                                 0,
33231 866D                        00            .byte	0
33232                                           ! 5730                            8,
33233 866E                        08            .byte	8
33234                                           ! 5731                                 24,
33235 866F                        18            .byte	$18
33236                                           ! 5732                          0,
33237 8670                      0000            .word	0
33238 8672                      0000            .word	0
33239                                           ! 5733 } },
33240                                           ! 5734 { 0x0141,
33241 8674                      0141            .word	$141
33242                                           ! 5735 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33243 8676                      009B            .word	$9B
33244                                           ! 5736                           0x01 | 0x02 | 0x04,
33245 8678                        07            .byte	7
33246                                           ! 5737                           0,
33247 8679                        00            .byte	0
33248                                           ! 5738                           64,
33249 867A                      0040            .word	$40
33250                                           ! 5739                    64,
33251 867C                      0040            .word	$40
33252                                           ! 5740                        0xA000,
33253 867E                      A000            .word	$A000
33254                                           ! 5741                        0x0000,
33255 8680                      0000            .word	0
33256                                           ! 5742                       0,
33257 8682                      0000            .word	0
33258 8684                      0000            .word	0
33259                                           ! 5743                             2560,
33260 8686                      0A00            .word	$A00
33261                                           ! 5744                        640,
33262 8688                      0280            .word	$280
33263                                           ! 5745                        400,
33264 868A                      0190            .word	$190
33265                                           ! 5746                      8,
33266 868C                        08            .byte	8
33267                                           ! 5747                      16,
33268 868D                        10            .byte	$10
33269                                           ! 5748                           1,
33270 868E                        01            .byte	1
33271                                           ! 5749                         32,
33272 868F                        20            .byte	$20
33273                                           ! 5750                          16,
33274 8690                        10            .byte	$10
33275                                           ! 5751                        0x06,
33276 8691                        06            .byte	6
33277                                           ! 5752                     0,
33278 8692                        00            .byte	0
33279                                           ! 5753                               15,
33280 8693                        0F            .byte	$F
33281                                           ! 5754                          0,
33282 8694                        00            .byte	0
33283                                           ! 5755                        8,
33284 8695                        08            .byte	8
33285                                           ! 5756                             16,
33286 8696                        10            .byte	$10
33287                                           ! 5757                          8,
33288 8697                        08            .byte	8
33289                                           ! 5758                               8,
33290 8698                        08            .byte	8
33291                                           ! 5759                         8,
33292 8699                        08            .byte	8
33293                                           ! 5760                              0,
33294 869A                        00            .byte	0
33295                                           ! 5761                         8,
33296 869B                        08            .byte	8
33297                                           ! 5762                              24,
33298 869C                        18            .byte	$18
33299                                           ! 5763                                0x02,
33300                                           ! 5763 
33301 869D                        02            .byte	2
33302                                           ! 5764                        0xE0000000,
33303 869E                      0000            .word	0
33304 86A0                      E000            .word	$E000
33305                                           ! 5765                               0,
33306 86A2                      0000            .word	0
33307 86A4                      0000            .word	0
33308                                           ! 5766                             0,
33309 86A6                      0000            .word	0
33310                                           ! 5767                                2560,
33311 86A8                      0A00            .word	$A00
33312                                           ! 5768                             0,
33313 86AA                        00            .byte	0
33314                                           ! 5769                             0,
33315 86AB                        00            .byte	0
33316                                           ! 5770                           8,
33317 86AC                        08            .byte	8
33318                                           ! 5771                                16,
33319 86AD                        10            .byte	$10
33320                                           ! 5772                             8,
33321 86AE                        08            .byte	8
33322                                           ! 5773                                  8,
33323 86AF                        08            .byte	8
33324                                           ! 5774                            8,
33325 86B0                        08            .byte	8
33326                                           ! 5775                                 0,
33327 86B1                        00            .byte	0
33328                                           ! 5776                            8,
33329 86B2                        08            .byte	8
33330                                           ! 5777                                 24,
33331 86B3                        18            .byte	$18
33332                                           ! 5778                          0,
33333 86B4                      0000            .word	0
33334 86B6                      0000            .word	0
33335                                           ! 5779 } },
33336                                           ! 5780 { 0x0142,
33337 86B8                      0142            .word	$142
33338                                           ! 5781 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33339 86BA                      009B            .word	$9B
33340                                           ! 5782                           0x01 | 0x02 | 0x04,
33341 86BC                        07            .byte	7
33342                                           ! 5783                           0,
33343 86BD                        00            .byte	0
33344                                           ! 5784                           64,
33345 86BE                      0040            .word	$40
33346                                           ! 5785                    64,
33347 86C0                      0040            .word	$40
33348                                           ! 5786                        0xA000,
33349 86C2                      A000            .word	$A000
33350                                           ! 5787                        0x0000,
33351 86C4                      0000            .word	0
33352                                           ! 5788                       0,
33353 86C6                      0000            .word	0
33354 86C8                      0000            .word	0
33355                                           ! 5789                             2560,
33356 86CA                      0A00            .word	$A00
33357                                           ! 5790                        640,
33358 86CC                      0280            .word	$280
33359                                           ! 5791                        480,
33360 86CE                      01E0            .word	$1E0
33361                                           ! 5792                      8,
33362 86D0                        08            .byte	8
33363                                           ! 5793                      16,
33364 86D1                        10            .byte	$10
33365                                           ! 5794                           1,
33366 86D2                        01            .byte	1
33367                                           ! 5795                         32,
33368 86D3                        20            .byte	$20
33369                                           ! 5796                          19,
33370 86D4                        13            .byte	$13
33371                                           ! 5797                        0x06,
33372 86D5                        06            .byte	6
33373                                           ! 5798                     0,
33374 86D6                        00            .byte	0
33375                                           ! 5799                               12,
33376 86D7                        0C            .byte	$C
33377                                           ! 5800                          0,
33378 86D8                        00            .byte	0
33379                                           ! 5801                        8,
33380 86D9                        08            .byte	8
33381                                           ! 5802                             16,
33382 86DA                        10            .byte	$10
33383                                           ! 5803                          8,
33384 86DB                        08            .byte	8
33385                                           ! 5804                               8,
33386 86DC                        08            .byte	8
33387                                           ! 5805                         8,
33388 86DD                        08            .byte	8
33389                                           ! 5806                              0,
33390 86DE                        00            .byte	0
33391                                           ! 5807                         8,
33392 86DF                        08            .byte	8
33393                                           ! 5808                              24,
33394 86E0                        18            .byte	$18
33395                                           ! 5809                                0x02,
33396 86E1                        02            .byte	2
33397                                           ! 5810                        0xE0000000,
33398 86E2                      0000            .word	0
33399 86E4                      E000            .word	$E000
33400                                           ! 5811                               0,
33401 86E6                      0000            .word	0
33402 86E8                      0000            .word	0
33403                                           ! 5812                             0,
33404 86EA                      0000            .word	0
33405                                           ! 5813                                2560,
33406 86EC                      0A00            .word	$A00
33407                                           ! 5814                             0,
33408 86EE                        00            .byte	0
33409                                           ! 5815                             0,
33410 86EF                        00            .byte	0
33411                                           ! 5816                           8,
33412 86F0                        08            .byte	8
33413                                           ! 5817                                16,
33414 86F1                        10            .byte	$10
33415                                           ! 5818                             8,
33416 86F2                        08            .byte	8
33417                                           ! 5819                                  8,
33418 86F3                        08            .byte	8
33419                                           ! 5820                            8,
33420 86F4                        08            .byte	8
33421                                           ! 5821                                 0,
33422 86F5                        00            .byte	0
33423                                           ! 5822                            8,
33424 86F6                        08            .byte	8
33425                                           ! 5823                                 24,
33426 86F7                        18            .byte	$18
33427                                           ! 5824                          0,
33428 86F8                      0000            .word	0
33429 86FA                      0000            .word	0
33430                                           ! 5825 } },
33431                                           ! 5826 { 0x0143,
33432 86FC                      0143            .word	$143
33433                                           ! 5827 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33434 86FE                      009B            .word	$9B
33435                                           ! 5828                           0x01 | 0x02 | 0x04,
33436 8700                        07            .byte	7
33437                                           ! 5829                           0,
33438 8701                        00            .byte	0
33439                                           ! 5830                           64,
33440 8702                      0040            .word	$40
33441                                           ! 5831                
33442                                           ! 5831     64,
33443 8704                      0040            .word	$40
33444                                           ! 5832                        0xA000,
33445 8706                      A000            .word	$A000
33446                                           ! 5833                        0x0000,
33447 8708                      0000            .word	0
33448                                           ! 5834                       0,
33449 870A                      0000            .word	0
33450 870C                      0000            .word	0
33451                                           ! 5835                             3200,
33452 870E                      0C80            .word	$C80
33453                                           ! 5836                        800,
33454 8710                      0320            .word	$320
33455                                           ! 5837                        600,
33456 8712                      0258            .word	$258
33457                                           ! 5838                      8,
33458 8714                        08            .byte	8
33459                                           ! 5839                      16,
33460 8715                        10            .byte	$10
33461                                           ! 5840                           1,
33462 8716                        01            .byte	1
33463                                           ! 5841                         32,
33464 8717                        20            .byte	$20
33465                                           ! 5842                          30,
33466 8718                        1E            .byte	$1E
33467                                           ! 5843                        0x06,
33468 8719                        06            .byte	6
33469                                           ! 5844                     0,
33470 871A                        00            .byte	0
33471                                           ! 5845                               7,
33472 871B                        07            .byte	7
33473                                           ! 5846                          0,
33474 871C                        00            .byte	0
33475                                           ! 5847                        8,
33476 871D                        08            .byte	8
33477                                           ! 5848                             16,
33478 871E                        10            .byte	$10
33479                                           ! 5849                          8,
33480 871F                        08            .byte	8
33481                                           ! 5850                               8,
33482 8720                        08            .byte	8
33483                                           ! 5851                         8,
33484 8721                        08            .byte	8
33485                                           ! 5852                              0,
33486 8722                        00            .byte	0
33487                                           ! 5853                         8,
33488 8723                        08            .byte	8
33489                                           ! 5854                              24,
33490 8724                        18            .byte	$18
33491                                           ! 5855                                0x02,
33492 8725                        02            .byte	2
33493                                           ! 5856                        0xE0000000,
33494 8726                      0000            .word	0
33495 8728                      E000            .word	$E000
33496                                           ! 5857                               0,
33497 872A                      0000            .word	0
33498 872C                      0000            .word	0
33499                                           ! 5858                             0,
33500 872E                      0000            .word	0
33501                                           ! 5859                                3200,
33502 8730                      0C80            .word	$C80
33503                                           ! 5860                             0,
33504 8732                        00            .byte	0
33505                                           ! 5861                             0,
33506 8733                        00            .byte	0
33507                                           ! 5862                           8,
33508 8734                        08            .byte	8
33509                                           ! 5863                                16,
33510 8735                        10            .byte	$10
33511                                           ! 5864                             8,
33512 8736                        08            .byte	8
33513                                           ! 5865                                  8,
33514 8737                        08            .byte	8
33515                                           ! 5866                            8,
33516 8738                        08            .byte	8
33517                                           ! 5867                                 0,
33518 8739                        00            .byte	0
33519                                           ! 5868                            8,
33520 873A                        08            .byte	8
33521                                           ! 5869                                 24,
33522 873B                        18            .byte	$18
33523                                           ! 5870                          0,
33524 873C                      0000            .word	0
33525 873E                      0000            .word	0
33526                                           ! 5871 } },
33527                                           ! 5872 { 0x0144,
33528 8740                      0144            .word	$144
33529                                           ! 5873 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33530 8742                      009B            .word	$9B
33531                                           ! 5874                           0x01 | 0x02 | 0x04,
33532 8744                        07            .byte	7
33533                                           ! 5875                           0,
33534 8745                        00            .byte	0
33535                                           ! 5876                           64,
33536 8746                      0040            .word	$40
33537                                           ! 5877                    64,
33538 8748                      0040            .word	$40
33539                                           ! 5878                        0xA000,
33540 874A                      A000            .word	$A000
33541                                           ! 5879                        0x0000,
33542 874C                      0000            .word	0
33543                                           ! 5880                       0,
33544 874E                      0000            .word	0
33545 8750                      0000            .word	0
33546                                           ! 5881                             4096,
33547 8752                      1000            .word	$1000
33548                                           ! 5882                        1024,
33549 8754                      0400            .word	$400
33550                                           ! 5883                        768,
33551 8756                      0300            .word	$300
33552                                           ! 5884                      8,
33553 8758                        08            .byte	8
33554                                           ! 5885                      16,
33555 8759                        10            .byte	$10
33556                                           ! 5886                           1,
33557 875A                        01            .byte	1
33558                                           ! 5887                         32,
33559 875B                        20            .byte	$20
33560                                           ! 5888                          48,
33561 875C                        30            .byte	$30
33562                                           ! 5889                        0x06,
33563 875D                        06            .byte	6
33564                                           ! 5890                     0,
33565 875E                        00            .byte	0
33566                                           ! 5891                               4,
33567 875F                        04            .byte	4
33568                                           ! 5892                          0,
33569 8760                        00            .byte	0
33570                                           ! 5893                        8,
33571 8761                        08            .byte	8
33572                                           ! 5894                             16,
33573 8762                        10            .byte	$10
33574                                           ! 5895                          8,
33575 8763                        08            .byte	8
33576                                           ! 5896                               8,
33577 8764                        08            .byte	8
33578                                           ! 5897                         8,
33579 8765                        08            .byte	8
33580                                           ! 5898                              0,
33581 8766                        00            .byte	0
33582                                           ! 5899                         8,
33583 8767                        08            .byte	8
33584                                           ! 5900                              24,
33585                                           ! 5900 
33586 8768                        18            .byte	$18
33587                                           ! 5901                                0x02,
33588 8769                        02            .byte	2
33589                                           ! 5902                        0xE0000000,
33590 876A                      0000            .word	0
33591 876C                      E000            .word	$E000
33592                                           ! 5903                               0,
33593 876E                      0000            .word	0
33594 8770                      0000            .word	0
33595                                           ! 5904                             0,
33596 8772                      0000            .word	0
33597                                           ! 5905                                4096,
33598 8774                      1000            .word	$1000
33599                                           ! 5906                             0,
33600 8776                        00            .byte	0
33601                                           ! 5907                             0,
33602 8777                        00            .byte	0
33603                                           ! 5908                           8,
33604 8778                        08            .byte	8
33605                                           ! 5909                                16,
33606 8779                        10            .byte	$10
33607                                           ! 5910                             8,
33608 877A                        08            .byte	8
33609                                           ! 5911                                  8,
33610 877B                        08            .byte	8
33611                                           ! 5912                            8,
33612 877C                        08            .byte	8
33613                                           ! 5913                                 0,
33614 877D                        00            .byte	0
33615                                           ! 5914                            8,
33616 877E                        08            .byte	8
33617                                           ! 5915                                 24,
33618 877F                        18            .byte	$18
33619                                           ! 5916                          0,
33620 8780                      0000            .word	0
33621 8782                      0000            .word	0
33622                                           ! 5917 } },
33623                                           ! 5918 { 0x0145,
33624 8784                      0145            .word	$145
33625                                           ! 5919 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33626 8786                      009B            .word	$9B
33627                                           ! 5920                           0x01 | 0x02 | 0x04,
33628 8788                        07            .byte	7
33629                                           ! 5921                           0,
33630 8789                        00            .byte	0
33631                                           ! 5922                           64,
33632 878A                      0040            .word	$40
33633                                           ! 5923                    64,
33634 878C                      0040            .word	$40
33635                                           ! 5924                        0xA000,
33636 878E                      A000            .word	$A000
33637                                           ! 5925                        0x0000,
33638 8790                      0000            .word	0
33639                                           ! 5926                       0,
33640 8792                      0000            .word	0
33641 8794                      0000            .word	0
33642                                           ! 5927                             5120,
33643 8796                      1400            .word	$1400
33644                                           ! 5928                        1280,
33645 8798                      0500            .word	$500
33646                                           ! 5929                        1024,
33647 879A                      0400            .word	$400
33648                                           ! 5930                      8,
33649 879C                        08            .byte	8
33650                                           ! 5931                      16,
33651 879D                        10            .byte	$10
33652                                           ! 5932                           1,
33653 879E                        01            .byte	1
33654                                           ! 5933                         32,
33655 879F                        20            .byte	$20
33656                                           ! 5934                          80,
33657 87A0                        50            .byte	$50
33658                                           ! 5935                        0x06,
33659 87A1                        06            .byte	6
33660                                           ! 5936                     0,
33661 87A2                        00            .byte	0
33662                                           ! 5937                               2,
33663 87A3                        02            .byte	2
33664                                           ! 5938                          0,
33665 87A4                        00            .byte	0
33666                                           ! 5939                        8,
33667 87A5                        08            .byte	8
33668                                           ! 5940                             16,
33669 87A6                        10            .byte	$10
33670                                           ! 5941                          8,
33671 87A7                        08            .byte	8
33672                                           ! 5942                               8,
33673 87A8                        08            .byte	8
33674                                           ! 5943                         8,
33675 87A9                        08            .byte	8
33676                                           ! 5944                              0,
33677 87AA                        00            .byte	0
33678                                           ! 5945                         8,
33679 87AB                        08            .byte	8
33680                                           ! 5946                              24,
33681 87AC                        18            .byte	$18
33682                                           ! 5947                                0x02,
33683 87AD                        02            .byte	2
33684                                           ! 5948                        0xE0000000,
33685 87AE                      0000            .word	0
33686 87B0                      E000            .word	$E000
33687                                           ! 5949                               0,
33688 87B2                      0000            .word	0
33689 87B4                      0000            .word	0
33690                                           ! 5950                             0,
33691 87B6                      0000            .word	0
33692                                           ! 5951                                5120,
33693 87B8                      1400            .word	$1400
33694                                           ! 5952                             0,
33695 87BA                        00            .byte	0
33696                                           ! 5953                             0,
33697 87BB                        00            .byte	0
33698                                           ! 5954                           8,
33699 87BC                        08            .byte	8
33700                                           ! 5955                                16,
33701 87BD                        10            .byte	$10
33702                                           ! 5956                             8,
33703 87BE                        08            .byte	8
33704                                           ! 5957                                  8,
33705 87BF                        08            .byte	8
33706                                           ! 5958                            8,
33707 87C0                        08            .byte	8
33708                                           ! 5959                                 0,
33709 87C1                        00            .byte	0
33710                                           ! 5960                            8,
33711 87C2                        08            .byte	8
33712                                           ! 5961                                 24,
33713 87C3                        18            .byte	$18
33714                                           ! 5962                          0,
33715 87C4                      0000            .word	0
33716 87C6                      0000            .word	0
33717                                           ! 5963 } },
33718                                           ! 5964 { 0x0146,
33719 87C8                      0146            .word	$146
33720                                           ! 5965 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33721 87CA                      009B            .word	$9B
33722                                           ! 5966                           0x01 | 0x02 | 0x04,
33723 87CC                        07            .byte	7
33724                                           ! 5967                           0,
33725 87CD                        00            .byte	0
33726                                           ! 5968        
33727                                           ! 5968                    64,
33728 87CE                      0040            .word	$40
33729                                           ! 5969                    64,
33730 87D0                      0040            .word	$40
33731                                           ! 5970                        0xA000,
33732 87D2                      A000            .word	$A000
33733                                           ! 5971                        0x0000,
33734 87D4                      0000            .word	0
33735                                           ! 5972                       0,
33736 87D6                      0000            .word	0
33737 87D8                      0000            .word	0
33738                                           ! 5973                             320,
33739 87DA                      0140            .word	$140
33740                                           ! 5974                        320,
33741 87DC                      0140            .word	$140
33742                                           ! 5975                        200,
33743 87DE                      00C8            .word	$C8
33744                                           ! 5976                      8,
33745 87E0                        08            .byte	8
33746                                           ! 5977                      16,
33747 87E1                        10            .byte	$10
33748                                           ! 5978                           1,
33749 87E2                        01            .byte	1
33750                                           ! 5979                         8,
33751 87E3                        08            .byte	8
33752                                           ! 5980                          1,
33753 87E4                        01            .byte	1
33754                                           ! 5981                        0x04,
33755 87E5                        04            .byte	4
33756                                           ! 5982                     0,
33757 87E6                        00            .byte	0
33758                                           ! 5983                               261,
33759 87E7                        05            .byte	5
33760                                           ! 5984                          0,
33761 87E8                        00            .byte	0
33762                                           ! 5985                        0,
33763 87E9                        00            .byte	0
33764                                           ! 5986                             0,
33765 87EA                        00            .byte	0
33766                                           ! 5987                          0,
33767 87EB                        00            .byte	0
33768                                           ! 5988                               0,
33769 87EC                        00            .byte	0
33770                                           ! 5989                         0,
33771 87ED                        00            .byte	0
33772                                           ! 5990                              0,
33773 87EE                        00            .byte	0
33774                                           ! 5991                         0,
33775 87EF                        00            .byte	0
33776                                           ! 5992                              0,
33777 87F0                        00            .byte	0
33778                                           ! 5993                                0,
33779 87F1                        00            .byte	0
33780                                           ! 5994                        0xE0000000,
33781 87F2                      0000            .word	0
33782 87F4                      E000            .word	$E000
33783                                           ! 5995                               0,
33784 87F6                      0000            .word	0
33785 87F8                      0000            .word	0
33786                                           ! 5996                             0,
33787 87FA                      0000            .word	0
33788                                           ! 5997                                320,
33789 87FC                      0140            .word	$140
33790                                           ! 5998                             0,
33791 87FE                        00            .byte	0
33792                                           ! 5999                             0,
33793 87FF                        00            .byte	0
33794                                           ! 6000                           0,
33795 8800                        00            .byte	0
33796                                           ! 6001                                0,
33797 8801                        00            .byte	0
33798                                           ! 6002                             0,
33799 8802                        00            .byte	0
33800                                           ! 6003                                  0,
33801 8803                        00            .byte	0
33802                                           ! 6004                            0,
33803 8804                        00            .byte	0
33804                                           ! 6005                                 0,
33805 8805                        00            .byte	0
33806                                           ! 6006                            0,
33807 8806                        00            .byte	0
33808                                           ! 6007                                 0,
33809 8807                        00            .byte	0
33810                                           ! 6008                          0,
33811 8808                      0000            .word	0
33812 880A                      0000            .word	0
33813                                           ! 6009 } },
33814                                           ! 6010 { 0x0147,
33815 880C                      0147            .word	$147
33816                                           ! 6011 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33817 880E                      009B            .word	$9B
33818                                           ! 6012                           0x01 | 0x02 | 0x04,
33819 8810                        07            .byte	7
33820                                           ! 6013                           0,
33821 8811                        00            .byte	0
33822                                           ! 6014                           64,
33823 8812                      0040            .word	$40
33824                                           ! 6015                    64,
33825 8814                      0040            .word	$40
33826                                           ! 6016                        0xA000,
33827 8816                      A000            .word	$A000
33828                                           ! 6017                        0x0000,
33829 8818                      0000            .word	0
33830                                           ! 6018                       0,
33831 881A                      0000            .word	0
33832 881C                      0000            .word	0
33833                                           ! 6019                             6400,
33834 881E                      1900            .word	$1900
33835                                           ! 6020                        1600,
33836 8820                      0640            .word	$640
33837                                           ! 6021                        1200,
33838 8822                      04B0            .word	$4B0
33839                                           ! 6022                      8,
33840 8824                        08            .byte	8
33841                                           ! 6023                      16,
33842 8825                        10            .byte	$10
33843                                           ! 6024                           1,
33844 8826                        01            .byte	1
33845                                           ! 6025                         32,
33846 8827                        20            .byte	$20
33847                                           ! 6026                          118,
33848 8828                        76            .byte	$76
33849                                           ! 6027                        0x06,
33850 8829                        06            .byte	6
33851                                           ! 6028                     0,
33852 882A                        00            .byte	0
33853                                           ! 6029                               1,
33854 882B                        01            .byte	1
33855                                           ! 6030                          0,
33856 882C                        00            .byte	0
33857                                           ! 6031                        8,
33858 882D                        08            .byte	8
33859                                           ! 6032                             16,
33860 882E                        10            .byte	$10
33861                                           ! 6033                          8,
33862 882F                        08            .byte	8
33863                                           ! 6034                               8,
33864 8830                        08            .byte	8
33865                                           ! 6035                         8,
33866 8831                        08            .byte	8
33867                                           ! 6036                              0,
33868 8832                        00            .byte	0
33869                                           ! 6037                         8,
33870 8833                        08            .byte	8
33871                                           ! 6038  
33872                                           ! 6038                             24,
33873 8834                        18            .byte	$18
33874                                           ! 6039                                0x02,
33875 8835                        02            .byte	2
33876                                           ! 6040                        0xE0000000,
33877 8836                      0000            .word	0
33878 8838                      E000            .word	$E000
33879                                           ! 6041                               0,
33880 883A                      0000            .word	0
33881 883C                      0000            .word	0
33882                                           ! 6042                             0,
33883 883E                      0000            .word	0
33884                                           ! 6043                                6400,
33885 8840                      1900            .word	$1900
33886                                           ! 6044                             0,
33887 8842                        00            .byte	0
33888                                           ! 6045                             0,
33889 8843                        00            .byte	0
33890                                           ! 6046                           8,
33891 8844                        08            .byte	8
33892                                           ! 6047                                16,
33893 8845                        10            .byte	$10
33894                                           ! 6048                             8,
33895 8846                        08            .byte	8
33896                                           ! 6049                                  8,
33897 8847                        08            .byte	8
33898                                           ! 6050                            8,
33899 8848                        08            .byte	8
33900                                           ! 6051                                 0,
33901 8849                        00            .byte	0
33902                                           ! 6052                            8,
33903 884A                        08            .byte	8
33904                                           ! 6053                                 24,
33905 884B                        18            .byte	$18
33906                                           ! 6054                          0,
33907 884C                      0000            .word	0
33908 884E                      0000            .word	0
33909                                           ! 6055 } },
33910                                           ! 6056 { 0x0148,
33911 8850                      0148            .word	$148
33912                                           ! 6057 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33913 8852                      009B            .word	$9B
33914                                           ! 6058                           0x01 | 0x02 | 0x04,
33915 8854                        07            .byte	7
33916                                           ! 6059                           0,
33917 8855                        00            .byte	0
33918                                           ! 6060                           64,
33919 8856                      0040            .word	$40
33920                                           ! 6061                    64,
33921 8858                      0040            .word	$40
33922                                           ! 6062                        0xA000,
33923 885A                      A000            .word	$A000
33924                                           ! 6063                        0x0000,
33925 885C                      0000            .word	0
33926                                           ! 6064                       0,
33927 885E                      0000            .word	0
33928 8860                      0000            .word	0
33929                                           ! 6065                             1152,
33930 8862                      0480            .word	$480
33931                                           ! 6066                        1152,
33932 8864                      0480            .word	$480
33933                                           ! 6067                        864,
33934 8866                      0360            .word	$360
33935                                           ! 6068                      8,
33936 8868                        08            .byte	8
33937                                           ! 6069                      16,
33938 8869                        10            .byte	$10
33939                                           ! 6070                           1,
33940 886A                        01            .byte	1
33941                                           ! 6071                         8,
33942 886B                        08            .byte	8
33943                                           ! 6072                          16,
33944 886C                        10            .byte	$10
33945                                           ! 6073                        0x04,
33946 886D                        04            .byte	4
33947                                           ! 6074                     0,
33948 886E                        00            .byte	0
33949                                           ! 6075                               15,
33950 886F                        0F            .byte	$F
33951                                           ! 6076                          0,
33952 8870                        00            .byte	0
33953                                           ! 6077                        0,
33954 8871                        00            .byte	0
33955                                           ! 6078                             0,
33956 8872                        00            .byte	0
33957                                           ! 6079                          0,
33958 8873                        00            .byte	0
33959                                           ! 6080                               0,
33960 8874                        00            .byte	0
33961                                           ! 6081                         0,
33962 8875                        00            .byte	0
33963                                           ! 6082                              0,
33964 8876                        00            .byte	0
33965                                           ! 6083                         0,
33966 8877                        00            .byte	0
33967                                           ! 6084                              0,
33968 8878                        00            .byte	0
33969                                           ! 6085                                0,
33970 8879                        00            .byte	0
33971                                           ! 6086                        0xE0000000,
33972 887A                      0000            .word	0
33973 887C                      E000            .word	$E000
33974                                           ! 6087                               0,
33975 887E                      0000            .word	0
33976 8880                      0000            .word	0
33977                                           ! 6088                             0,
33978 8882                      0000            .word	0
33979                                           ! 6089                                1152,
33980 8884                      0480            .word	$480
33981                                           ! 6090                             0,
33982 8886                        00            .byte	0
33983                                           ! 6091                             0,
33984 8887                        00            .byte	0
33985                                           ! 6092                           0,
33986 8888                        00            .byte	0
33987                                           ! 6093                                0,
33988 8889                        00            .byte	0
33989                                           ! 6094                             0,
33990 888A                        00            .byte	0
33991                                           ! 6095                                  0,
33992 888B                        00            .byte	0
33993                                           ! 6096                            0,
33994 888C                        00            .byte	0
33995                                           ! 6097                                 0,
33996 888D                        00            .byte	0
33997                                           ! 6098                            0,
33998 888E                        00            .byte	0
33999                                           ! 6099                                 0,
34000 888F                        00            .byte	0
34001                                           ! 6100                          0,
34002 8890                      0000            .word	0
34003 8892                      0000            .word	0
34004                                           ! 6101 } },
34005                                           ! 6102 { 0x0149,
34006 8894                      0149            .word	$149
34007                                           ! 6103 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34008 8896                      009B            .word	$9B
34009                                           ! 6104                           0x01 | 0x02 | 0x04,
34010 8898                        07            .byte	7
34011                                           ! 6105              
34012                                           ! 6105              0,
34013 8899                        00            .byte	0
34014                                           ! 6106                           64,
34015 889A                      0040            .word	$40
34016                                           ! 6107                    64,
34017 889C                      0040            .word	$40
34018                                           ! 6108                        0xA000,
34019 889E                      A000            .word	$A000
34020                                           ! 6109                        0x0000,
34021 88A0                      0000            .word	0
34022                                           ! 6110                       0,
34023 88A2                      0000            .word	0
34024 88A4                      0000            .word	0
34025                                           ! 6111                             2304,
34026 88A6                      0900            .word	$900
34027                                           ! 6112                        1152,
34028 88A8                      0480            .word	$480
34029                                           ! 6113                        864,
34030 88AA                      0360            .word	$360
34031                                           ! 6114                      8,
34032 88AC                        08            .byte	8
34033                                           ! 6115                      16,
34034 88AD                        10            .byte	$10
34035                                           ! 6116                           1,
34036 88AE                        01            .byte	1
34037                                           ! 6117                         15,
34038 88AF                        0F            .byte	$F
34039                                           ! 6118                          31,
34040 88B0                        1F            .byte	$1F
34041                                           ! 6119                        0x06,
34042 88B1                        06            .byte	6
34043                                           ! 6120                     0,
34044 88B2                        00            .byte	0
34045                                           ! 6121                               7,
34046 88B3                        07            .byte	7
34047                                           ! 6122                          0,
34048 88B4                        00            .byte	0
34049                                           ! 6123                        5,
34050 88B5                        05            .byte	5
34051                                           ! 6124                             10,
34052 88B6                        0A            .byte	$A
34053                                           ! 6125                          5,
34054 88B7                        05            .byte	5
34055                                           ! 6126                               5,
34056 88B8                        05            .byte	5
34057                                           ! 6127                         5,
34058 88B9                        05            .byte	5
34059                                           ! 6128                              0,
34060 88BA                        00            .byte	0
34061                                           ! 6129                         1,
34062 88BB                        01            .byte	1
34063                                           ! 6130                              15,
34064 88BC                        0F            .byte	$F
34065                                           ! 6131                                0,
34066 88BD                        00            .byte	0
34067                                           ! 6132                        0xE0000000,
34068 88BE                      0000            .word	0
34069 88C0                      E000            .word	$E000
34070                                           ! 6133                               0,
34071 88C2                      0000            .word	0
34072 88C4                      0000            .word	0
34073                                           ! 6134                             0,
34074 88C6                      0000            .word	0
34075                                           ! 6135                                2304,
34076 88C8                      0900            .word	$900
34077                                           ! 6136                             0,
34078 88CA                        00            .byte	0
34079                                           ! 6137                             0,
34080 88CB                        00            .byte	0
34081                                           ! 6138                           5,
34082 88CC                        05            .byte	5
34083                                           ! 6139                                10,
34084 88CD                        0A            .byte	$A
34085                                           ! 6140                             5,
34086 88CE                        05            .byte	5
34087                                           ! 6141                                  5,
34088 88CF                        05            .byte	5
34089                                           ! 6142                            5,
34090 88D0                        05            .byte	5
34091                                           ! 6143                                 0,
34092 88D1                        00            .byte	0
34093                                           ! 6144                            1,
34094 88D2                        01            .byte	1
34095                                           ! 6145                                 15,
34096 88D3                        0F            .byte	$F
34097                                           ! 6146                          0,
34098 88D4                      0000            .word	0
34099 88D6                      0000            .word	0
34100                                           ! 6147 } },
34101                                           ! 6148 { 0x014a,
34102 88D8                      014A            .word	$14A
34103                                           ! 6149 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34104 88DA                      009B            .word	$9B
34105                                           ! 6150                           0x01 | 0x02 | 0x04,
34106 88DC                        07            .byte	7
34107                                           ! 6151                           0,
34108 88DD                        00            .byte	0
34109                                           ! 6152                           64,
34110 88DE                      0040            .word	$40
34111                                           ! 6153                    64,
34112 88E0                      0040            .word	$40
34113                                           ! 6154                        0xA000,
34114 88E2                      A000            .word	$A000
34115                                           ! 6155                        0x0000,
34116 88E4                      0000            .word	0
34117                                           ! 6156                       0,
34118 88E6                      0000            .word	0
34119 88E8                      0000            .word	0
34120                                           ! 6157                             2304,
34121 88EA                      0900            .word	$900
34122                                           ! 6158                        1152,
34123 88EC                      0480            .word	$480
34124                                           ! 6159                        864,
34125 88EE                      0360            .word	$360
34126                                           ! 6160                      8,
34127 88F0                        08            .byte	8
34128                                           ! 6161                      16,
34129 88F1                        10            .byte	$10
34130                                           ! 6162                           1,
34131 88F2                        01            .byte	1
34132                                           ! 6163                         16,
34133 88F3                        10            .byte	$10
34134                                           ! 6164                          31,
34135 88F4                        1F            .byte	$1F
34136                                           ! 6165                        0x06,
34137 88F5                        06            .byte	6
34138                                           ! 6166                     0,
34139 88F6                        00            .byte	0
34140                                           ! 6167                               7,
34141 88F7                        07            .byte	7
34142                                           ! 6168                          0,
34143 88F8                        00            .byte	0
34144                                           ! 6169                        5,
34145 88F9                        05            .byte	5
34146                                           ! 6170                             11,
34147 88FA                        0B            .byte	$B
34148                                           ! 6171                          6,
34149 88FB                        06            .byte	6
34150                                           ! 6172                               5,
34151 88FC                        05            .byte	5
34152                                           ! 6173                         5,
34153 88FD                        05            .byte	5
34154                                           ! 6174                              0,
34155 88FE                        00            .byte	0
34156                                           ! 6175 
34157                                           ! 6175                         0,
34158 88FF                        00            .byte	0
34159                                           ! 6176                              0,
34160 8900                        00            .byte	0
34161                                           ! 6177                                0,
34162 8901                        00            .byte	0
34163                                           ! 6178                        0xE0000000,
34164 8902                      0000            .word	0
34165 8904                      E000            .word	$E000
34166                                           ! 6179                               0,
34167 8906                      0000            .word	0
34168 8908                      0000            .word	0
34169                                           ! 6180                             0,
34170 890A                      0000            .word	0
34171                                           ! 6181                                2304,
34172 890C                      0900            .word	$900
34173                                           ! 6182                             0,
34174 890E                        00            .byte	0
34175                                           ! 6183                             0,
34176 890F                        00            .byte	0
34177                                           ! 6184                           5,
34178 8910                        05            .byte	5
34179                                           ! 6185                                11,
34180 8911                        0B            .byte	$B
34181                                           ! 6186                             6,
34182 8912                        06            .byte	6
34183                                           ! 6187                                  5,
34184 8913                        05            .byte	5
34185                                           ! 6188                            5,
34186 8914                        05            .byte	5
34187                                           ! 6189                                 0,
34188 8915                        00            .byte	0
34189                                           ! 6190                            0,
34190 8916                        00            .byte	0
34191                                           ! 6191                                 0,
34192 8917                        00            .byte	0
34193                                           ! 6192                          0,
34194 8918                      0000            .word	0
34195 891A                      0000            .word	0
34196                                           ! 6193 } },
34197                                           ! 6194 { 0x014b,
34198 891C                      014B            .word	$14B
34199                                           ! 6195 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34200 891E                      009B            .word	$9B
34201                                           ! 6196                           0x01 | 0x02 | 0x04,
34202 8920                        07            .byte	7
34203                                           ! 6197                           0,
34204 8921                        00            .byte	0
34205                                           ! 6198                           64,
34206 8922                      0040            .word	$40
34207                                           ! 6199                    64,
34208 8924                      0040            .word	$40
34209                                           ! 6200                        0xA000,
34210 8926                      A000            .word	$A000
34211                                           ! 6201                        0x0000,
34212 8928                      0000            .word	0
34213                                           ! 6202                       0,
34214 892A                      0000            .word	0
34215 892C                      0000            .word	0
34216                                           ! 6203                             3456,
34217 892E                      0D80            .word	$D80
34218                                           ! 6204                        1152,
34219 8930                      0480            .word	$480
34220                                           ! 6205                        864,
34221 8932                      0360            .word	$360
34222                                           ! 6206                      8,
34223 8934                        08            .byte	8
34224                                           ! 6207                      16,
34225 8935                        10            .byte	$10
34226                                           ! 6208                           1,
34227 8936                        01            .byte	1
34228                                           ! 6209                         24,
34229 8937                        18            .byte	$18
34230                                           ! 6210                          46,
34231 8938                        2E            .byte	$2E
34232                                           ! 6211                        0x06,
34233 8939                        06            .byte	6
34234                                           ! 6212                     0,
34235 893A                        00            .byte	0
34236                                           ! 6213                               4,
34237 893B                        04            .byte	4
34238                                           ! 6214                          0,
34239 893C                        00            .byte	0
34240                                           ! 6215                        8,
34241 893D                        08            .byte	8
34242                                           ! 6216                             16,
34243 893E                        10            .byte	$10
34244                                           ! 6217                          8,
34245 893F                        08            .byte	8
34246                                           ! 6218                               8,
34247 8940                        08            .byte	8
34248                                           ! 6219                         8,
34249 8941                        08            .byte	8
34250                                           ! 6220                              0,
34251 8942                        00            .byte	0
34252                                           ! 6221                         0,
34253 8943                        00            .byte	0
34254                                           ! 6222                              0,
34255 8944                        00            .byte	0
34256                                           ! 6223                                0,
34257 8945                        00            .byte	0
34258                                           ! 6224                        0xE0000000,
34259 8946                      0000            .word	0
34260 8948                      E000            .word	$E000
34261                                           ! 6225                               0,
34262 894A                      0000            .word	0
34263 894C                      0000            .word	0
34264                                           ! 6226                             0,
34265 894E                      0000            .word	0
34266                                           ! 6227                                3456,
34267 8950                      0D80            .word	$D80
34268                                           ! 6228                             0,
34269 8952                        00            .byte	0
34270                                           ! 6229                             0,
34271 8953                        00            .byte	0
34272                                           ! 6230                           8,
34273 8954                        08            .byte	8
34274                                           ! 6231                                16,
34275 8955                        10            .byte	$10
34276                                           ! 6232                             8,
34277 8956                        08            .byte	8
34278                                           ! 6233                                  8,
34279 8957                        08            .byte	8
34280                                           ! 6234                            8,
34281 8958                        08            .byte	8
34282                                           ! 6235                                 0,
34283 8959                        00            .byte	0
34284                                           ! 6236                            0,
34285 895A                        00            .byte	0
34286                                           ! 6237                                 0,
34287 895B                        00            .byte	0
34288                                           ! 6238                          0,
34289 895C                      0000            .word	0
34290 895E                      0000            .word	0
34291                                           ! 6239 } },
34292                                           ! 6240 { 0x014c,
34293 8960                      014C            .word	$14C
34294                                           ! 6241 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34295 8962                      009B            .word	$9B
34296                                           ! 6242                           0x01 | 0
34297                                           ! 6242 x02 | 0x04,
34298 8964                        07            .byte	7
34299                                           ! 6243                           0,
34300 8965                        00            .byte	0
34301                                           ! 6244                           64,
34302 8966                      0040            .word	$40
34303                                           ! 6245                    64,
34304 8968                      0040            .word	$40
34305                                           ! 6246                        0xA000,
34306 896A                      A000            .word	$A000
34307                                           ! 6247                        0x0000,
34308 896C                      0000            .word	0
34309                                           ! 6248                       0,
34310 896E                      0000            .word	0
34311 8970                      0000            .word	0
34312                                           ! 6249                             4608,
34313 8972                      1200            .word	$1200
34314                                           ! 6250                        1152,
34315 8974                      0480            .word	$480
34316                                           ! 6251                        864,
34317 8976                      0360            .word	$360
34318                                           ! 6252                      8,
34319 8978                        08            .byte	8
34320                                           ! 6253                      16,
34321 8979                        10            .byte	$10
34322                                           ! 6254                           1,
34323 897A                        01            .byte	1
34324                                           ! 6255                         32,
34325 897B                        20            .byte	$20
34326                                           ! 6256                          61,
34327 897C                        3D            .byte	$3D
34328                                           ! 6257                        0x06,
34329 897D                        06            .byte	6
34330                                           ! 6258                     0,
34331 897E                        00            .byte	0
34332                                           ! 6259                               3,
34333 897F                        03            .byte	3
34334                                           ! 6260                          0,
34335 8980                        00            .byte	0
34336                                           ! 6261                        8,
34337 8981                        08            .byte	8
34338                                           ! 6262                             16,
34339 8982                        10            .byte	$10
34340                                           ! 6263                          8,
34341 8983                        08            .byte	8
34342                                           ! 6264                               8,
34343 8984                        08            .byte	8
34344                                           ! 6265                         8,
34345 8985                        08            .byte	8
34346                                           ! 6266                              0,
34347 8986                        00            .byte	0
34348                                           ! 6267                         8,
34349 8987                        08            .byte	8
34350                                           ! 6268                              24,
34351 8988                        18            .byte	$18
34352                                           ! 6269                                0x02,
34353 8989                        02            .byte	2
34354                                           ! 6270                        0xE0000000,
34355 898A                      0000            .word	0
34356 898C                      E000            .word	$E000
34357                                           ! 6271                               0,
34358 898E                      0000            .word	0
34359 8990                      0000            .word	0
34360                                           ! 6272                             0,
34361 8992                      0000            .word	0
34362                                           ! 6273                                4608,
34363 8994                      1200            .word	$1200
34364                                           ! 6274                             0,
34365 8996                        00            .byte	0
34366                                           ! 6275                             0,
34367 8997                        00            .byte	0
34368                                           ! 6276                           8,
34369 8998                        08            .byte	8
34370                                           ! 6277                                16,
34371 8999                        10            .byte	$10
34372                                           ! 6278                             8,
34373 899A                        08            .byte	8
34374                                           ! 6279                                  8,
34375 899B                        08            .byte	8
34376                                           ! 6280                            8,
34377 899C                        08            .byte	8
34378                                           ! 6281                                 0,
34379 899D                        00            .byte	0
34380                                           ! 6282                            8,
34381 899E                        08            .byte	8
34382                                           ! 6283                                 24,
34383 899F                        18            .byte	$18
34384                                           ! 6284                          0,
34385 89A0                      0000            .word	0
34386 89A2                      0000            .word	0
34387                                           ! 6285 } },
34388                                           ! 6286 { 0x0178,
34389 89A4                      0178            .word	$178
34390                                           ! 6287 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34391 89A6                      009B            .word	$9B
34392                                           ! 6288                           0x01 | 0x02 | 0x04,
34393 89A8                        07            .byte	7
34394                                           ! 6289                           0,
34395 89A9                        00            .byte	0
34396                                           ! 6290                           64,
34397 89AA                      0040            .word	$40
34398                                           ! 6291                    64,
34399 89AC                      0040            .word	$40
34400                                           ! 6292                        0xA000,
34401 89AE                      A000            .word	$A000
34402                                           ! 6293                        0x0000,
34403 89B0                      0000            .word	0
34404                                           ! 6294                       0,
34405 89B2                      0000            .word	0
34406 89B4                      0000            .word	0
34407                                           ! 6295                             2560,
34408 89B6                      0A00            .word	$A00
34409                                           ! 6296                        1280,
34410 89B8                      0500            .word	$500
34411                                           ! 6297                        800,
34412 89BA                      0320            .word	$320
34413                                           ! 6298                      8,
34414 89BC                        08            .byte	8
34415                                           ! 6299                      16,
34416 89BD                        10            .byte	$10
34417                                           ! 6300                           1,
34418 89BE                        01            .byte	1
34419                                           ! 6301                         16,
34420 89BF                        10            .byte	$10
34421                                           ! 6302                          32,
34422 89C0                        20            .byte	$20
34423                                           ! 6303                        0x06,
34424 89C1                        06            .byte	6
34425                                           ! 6304                     0,
34426 89C2                        00            .byte	0
34427                                           ! 6305                               7,
34428 89C3                        07            .byte	7
34429                                           ! 6306                          0,
34430 89C4                        00            .byte	0
34431                                           ! 6307                        5,
34432 89C5                        05            .byte	5
34433                                           ! 6308                             11,
34434 89C6                        0B            .byte	$B
34435                                           ! 6309                          6,
34436 89C7                        06            .byte	6
34437                                           ! 6310                               5,
34438 89C8                        05            .byte	5
34439                                           ! 6311                         5,
34440 89C9                        05            .byte	5
34441                                           ! 6312     
34442                                           ! 6312                          0,
34443 89CA                        00            .byte	0
34444                                           ! 6313                         0,
34445 89CB                        00            .byte	0
34446                                           ! 6314                              0,
34447 89CC                        00            .byte	0
34448                                           ! 6315                                0,
34449 89CD                        00            .byte	0
34450                                           ! 6316                        0xE0000000,
34451 89CE                      0000            .word	0
34452 89D0                      E000            .word	$E000
34453                                           ! 6317                               0,
34454 89D2                      0000            .word	0
34455 89D4                      0000            .word	0
34456                                           ! 6318                             0,
34457 89D6                      0000            .word	0
34458                                           ! 6319                                2560,
34459 89D8                      0A00            .word	$A00
34460                                           ! 6320                             0,
34461 89DA                        00            .byte	0
34462                                           ! 6321                             0,
34463 89DB                        00            .byte	0
34464                                           ! 6322                           5,
34465 89DC                        05            .byte	5
34466                                           ! 6323                                11,
34467 89DD                        0B            .byte	$B
34468                                           ! 6324                             6,
34469 89DE                        06            .byte	6
34470                                           ! 6325                                  5,
34471 89DF                        05            .byte	5
34472                                           ! 6326                            5,
34473 89E0                        05            .byte	5
34474                                           ! 6327                                 0,
34475 89E1                        00            .byte	0
34476                                           ! 6328                            0,
34477 89E2                        00            .byte	0
34478                                           ! 6329                                 0,
34479 89E3                        00            .byte	0
34480                                           ! 6330                          0,
34481 89E4                      0000            .word	0
34482 89E6                      0000            .word	0
34483                                           ! 6331 } },
34484                                           ! 6332 { 0x0179,
34485 89E8                      0179            .word	$179
34486                                           ! 6333 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34487 89EA                      009B            .word	$9B
34488                                           ! 6334                           0x01 | 0x02 | 0x04,
34489 89EC                        07            .byte	7
34490                                           ! 6335                           0,
34491 89ED                        00            .byte	0
34492                                           ! 6336                           64,
34493 89EE                      0040            .word	$40
34494                                           ! 6337                    64,
34495 89F0                      0040            .word	$40
34496                                           ! 6338                        0xA000,
34497 89F2                      A000            .word	$A000
34498                                           ! 6339                        0x0000,
34499 89F4                      0000            .word	0
34500                                           ! 6340                       0,
34501 89F6                      0000            .word	0
34502 89F8                      0000            .word	0
34503                                           ! 6341                             3840,
34504 89FA                      0F00            .word	$F00
34505                                           ! 6342                        1280,
34506 89FC                      0500            .word	$500
34507                                           ! 6343                        800,
34508 89FE                      0320            .word	$320
34509                                           ! 6344                      8,
34510 8A00                        08            .byte	8
34511                                           ! 6345                      16,
34512 8A01                        10            .byte	$10
34513                                           ! 6346                           1,
34514 8A02                        01            .byte	1
34515                                           ! 6347                         24,
34516 8A03                        18            .byte	$18
34517                                           ! 6348                          47,
34518 8A04                        2F            .byte	$2F
34519                                           ! 6349                        0x06,
34520 8A05                        06            .byte	6
34521                                           ! 6350                     0,
34522 8A06                        00            .byte	0
34523                                           ! 6351                               4,
34524 8A07                        04            .byte	4
34525                                           ! 6352                          0,
34526 8A08                        00            .byte	0
34527                                           ! 6353                        8,
34528 8A09                        08            .byte	8
34529                                           ! 6354                             16,
34530 8A0A                        10            .byte	$10
34531                                           ! 6355                          8,
34532 8A0B                        08            .byte	8
34533                                           ! 6356                               8,
34534 8A0C                        08            .byte	8
34535                                           ! 6357                         8,
34536 8A0D                        08            .byte	8
34537                                           ! 6358                              0,
34538 8A0E                        00            .byte	0
34539                                           ! 6359                         0,
34540 8A0F                        00            .byte	0
34541                                           ! 6360                              0,
34542 8A10                        00            .byte	0
34543                                           ! 6361                                0,
34544 8A11                        00            .byte	0
34545                                           ! 6362                        0xE0000000,
34546 8A12                      0000            .word	0
34547 8A14                      E000            .word	$E000
34548                                           ! 6363                               0,
34549 8A16                      0000            .word	0
34550 8A18                      0000            .word	0
34551                                           ! 6364                             0,
34552 8A1A                      0000            .word	0
34553                                           ! 6365                                3840,
34554 8A1C                      0F00            .word	$F00
34555                                           ! 6366                             0,
34556 8A1E                        00            .byte	0
34557                                           ! 6367                             0,
34558 8A1F                        00            .byte	0
34559                                           ! 6368                           8,
34560 8A20                        08            .byte	8
34561                                           ! 6369                                16,
34562 8A21                        10            .byte	$10
34563                                           ! 6370                             8,
34564 8A22                        08            .byte	8
34565                                           ! 6371                                  8,
34566 8A23                        08            .byte	8
34567                                           ! 6372                            8,
34568 8A24                        08            .byte	8
34569                                           ! 6373                                 0,
34570 8A25                        00            .byte	0
34571                                           ! 6374                            0,
34572 8A26                        00            .byte	0
34573                                           ! 6375                                 0,
34574 8A27                        00            .byte	0
34575                                           ! 6376                          0,
34576 8A28                      0000            .word	0
34577 8A2A                      0000            .word	0
34578                                           ! 6377 } },
34579                                           ! 6378 { 0x017a,
34580 8A2C                      017A            .word	$17A
34581                                           ! 6379 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34582 8A2E                      009B            .word	$9B
34583                                           ! 6380       
34584                                           ! 6380                     0x01 | 0x02 | 0x04,
34585 8A30                        07            .byte	7
34586                                           ! 6381                           0,
34587 8A31                        00            .byte	0
34588                                           ! 6382                           64,
34589 8A32                      0040            .word	$40
34590                                           ! 6383                    64,
34591 8A34                      0040            .word	$40
34592                                           ! 6384                        0xA000,
34593 8A36                      A000            .word	$A000
34594                                           ! 6385                        0x0000,
34595 8A38                      0000            .word	0
34596                                           ! 6386                       0,
34597 8A3A                      0000            .word	0
34598 8A3C                      0000            .word	0
34599                                           ! 6387                             5120,
34600 8A3E                      1400            .word	$1400
34601                                           ! 6388                        1280,
34602 8A40                      0500            .word	$500
34603                                           ! 6389                        800,
34604 8A42                      0320            .word	$320
34605                                           ! 6390                      8,
34606 8A44                        08            .byte	8
34607                                           ! 6391                      16,
34608 8A45                        10            .byte	$10
34609                                           ! 6392                           1,
34610 8A46                        01            .byte	1
34611                                           ! 6393                         32,
34612 8A47                        20            .byte	$20
34613                                           ! 6394                          63,
34614 8A48                        3F            .byte	$3F
34615                                           ! 6395                        0x06,
34616 8A49                        06            .byte	6
34617                                           ! 6396                     0,
34618 8A4A                        00            .byte	0
34619                                           ! 6397                               3,
34620 8A4B                        03            .byte	3
34621                                           ! 6398                          0,
34622 8A4C                        00            .byte	0
34623                                           ! 6399                        8,
34624 8A4D                        08            .byte	8
34625                                           ! 6400                             16,
34626 8A4E                        10            .byte	$10
34627                                           ! 6401                          8,
34628 8A4F                        08            .byte	8
34629                                           ! 6402                               8,
34630 8A50                        08            .byte	8
34631                                           ! 6403                         8,
34632 8A51                        08            .byte	8
34633                                           ! 6404                              0,
34634 8A52                        00            .byte	0
34635                                           ! 6405                         8,
34636 8A53                        08            .byte	8
34637                                           ! 6406                              24,
34638 8A54                        18            .byte	$18
34639                                           ! 6407                                0x02,
34640 8A55                        02            .byte	2
34641                                           ! 6408                        0xE0000000,
34642 8A56                      0000            .word	0
34643 8A58                      E000            .word	$E000
34644                                           ! 6409                               0,
34645 8A5A                      0000            .word	0
34646 8A5C                      0000            .word	0
34647                                           ! 6410                             0,
34648 8A5E                      0000            .word	0
34649                                           ! 6411                                5120,
34650 8A60                      1400            .word	$1400
34651                                           ! 6412                             0,
34652 8A62                        00            .byte	0
34653                                           ! 6413                             0,
34654 8A63                        00            .byte	0
34655                                           ! 6414                           8,
34656 8A64                        08            .byte	8
34657                                           ! 6415                                16,
34658 8A65                        10            .byte	$10
34659                                           ! 6416                             8,
34660 8A66                        08            .byte	8
34661                                           ! 6417                                  8,
34662 8A67                        08            .byte	8
34663                                           ! 6418                            8,
34664 8A68                        08            .byte	8
34665                                           ! 6419                                 0,
34666 8A69                        00            .byte	0
34667                                           ! 6420                            8,
34668 8A6A                        08            .byte	8
34669                                           ! 6421                                 24,
34670 8A6B                        18            .byte	$18
34671                                           ! 6422                          0,
34672 8A6C                      0000            .word	0
34673 8A6E                      0000            .word	0
34674                                           ! 6423 } },
34675                                           ! 6424 { 0x017b,
34676 8A70                      017B            .word	$17B
34677                                           ! 6425 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34678 8A72                      009B            .word	$9B
34679                                           ! 6426                           0x01 | 0x02 | 0x04,
34680 8A74                        07            .byte	7
34681                                           ! 6427                           0,
34682 8A75                        00            .byte	0
34683                                           ! 6428                           64,
34684 8A76                      0040            .word	$40
34685                                           ! 6429                    64,
34686 8A78                      0040            .word	$40
34687                                           ! 6430                        0xA000,
34688 8A7A                      A000            .word	$A000
34689                                           ! 6431                        0x0000,
34690 8A7C                      0000            .word	0
34691                                           ! 6432                       0,
34692 8A7E                      0000            .word	0
34693 8A80                      0000            .word	0
34694                                           ! 6433                             2560,
34695 8A82                      0A00            .word	$A00
34696                                           ! 6434                        1280,
34697 8A84                      0500            .word	$500
34698                                           ! 6435                        960,
34699 8A86                      03C0            .word	$3C0
34700                                           ! 6436                      8,
34701 8A88                        08            .byte	8
34702                                           ! 6437                      16,
34703 8A89                        10            .byte	$10
34704                                           ! 6438                           1,
34705 8A8A                        01            .byte	1
34706                                           ! 6439                         16,
34707 8A8B                        10            .byte	$10
34708                                           ! 6440                          38,
34709 8A8C                        26            .byte	$26
34710                                           ! 6441                        0x06,
34711 8A8D                        06            .byte	6
34712                                           ! 6442                     0,
34713 8A8E                        00            .byte	0
34714                                           ! 6443                               5,
34715 8A8F                        05            .byte	5
34716                                           ! 6444                          0,
34717 8A90                        00            .byte	0
34718                                           ! 6445                        5,
34719 8A91                        05            .byte	5
34720                                           ! 6446                             11,
34721 8A92                        0B            .byte	$B
34722                                           ! 6447                          6,
34723 8A93                        06            .byte	6
34724                                           ! 6448                               5,
34725 8A94                        05            .byte	5
34726                                           ! 6449    
34727                                           ! 6449                      5,
34728 8A95                        05            .byte	5
34729                                           ! 6450                              0,
34730 8A96                        00            .byte	0
34731                                           ! 6451                         0,
34732 8A97                        00            .byte	0
34733                                           ! 6452                              0,
34734 8A98                        00            .byte	0
34735                                           ! 6453                                0,
34736 8A99                        00            .byte	0
34737                                           ! 6454                        0xE0000000,
34738 8A9A                      0000            .word	0
34739 8A9C                      E000            .word	$E000
34740                                           ! 6455                               0,
34741 8A9E                      0000            .word	0
34742 8AA0                      0000            .word	0
34743                                           ! 6456                             0,
34744 8AA2                      0000            .word	0
34745                                           ! 6457                                2560,
34746 8AA4                      0A00            .word	$A00
34747                                           ! 6458                             0,
34748 8AA6                        00            .byte	0
34749                                           ! 6459                             0,
34750 8AA7                        00            .byte	0
34751                                           ! 6460                           5,
34752 8AA8                        05            .byte	5
34753                                           ! 6461                                11,
34754 8AA9                        0B            .byte	$B
34755                                           ! 6462                             6,
34756 8AAA                        06            .byte	6
34757                                           ! 6463                                  5,
34758 8AAB                        05            .byte	5
34759                                           ! 6464                            5,
34760 8AAC                        05            .byte	5
34761                                           ! 6465                                 0,
34762 8AAD                        00            .byte	0
34763                                           ! 6466                            0,
34764 8AAE                        00            .byte	0
34765                                           ! 6467                                 0,
34766 8AAF                        00            .byte	0
34767                                           ! 6468                          0,
34768 8AB0                      0000            .word	0
34769 8AB2                      0000            .word	0
34770                                           ! 6469 } },
34771                                           ! 6470 { 0x017c,
34772 8AB4                      017C            .word	$17C
34773                                           ! 6471 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34774 8AB6                      009B            .word	$9B
34775                                           ! 6472                           0x01 | 0x02 | 0x04,
34776 8AB8                        07            .byte	7
34777                                           ! 6473                           0,
34778 8AB9                        00            .byte	0
34779                                           ! 6474                           64,
34780 8ABA                      0040            .word	$40
34781                                           ! 6475                    64,
34782 8ABC                      0040            .word	$40
34783                                           ! 6476                        0xA000,
34784 8ABE                      A000            .word	$A000
34785                                           ! 6477                        0x0000,
34786 8AC0                      0000            .word	0
34787                                           ! 6478                       0,
34788 8AC2                      0000            .word	0
34789 8AC4                      0000            .word	0
34790                                           ! 6479                             3840,
34791 8AC6                      0F00            .word	$F00
34792                                           ! 6480                        1280,
34793 8AC8                      0500            .word	$500
34794                                           ! 6481                        960,
34795 8ACA                      03C0            .word	$3C0
34796                                           ! 6482                      8,
34797 8ACC                        08            .byte	8
34798                                           ! 6483                      16,
34799 8ACD                        10            .byte	$10
34800                                           ! 6484                           1,
34801 8ACE                        01            .byte	1
34802                                           ! 6485                         24,
34803 8ACF                        18            .byte	$18
34804                                           ! 6486                          57,
34805 8AD0                        39            .byte	$39
34806                                           ! 6487                        0x06,
34807 8AD1                        06            .byte	6
34808                                           ! 6488                     0,
34809 8AD2                        00            .byte	0
34810                                           ! 6489                               3,
34811 8AD3                        03            .byte	3
34812                                           ! 6490                          0,
34813 8AD4                        00            .byte	0
34814                                           ! 6491                        8,
34815 8AD5                        08            .byte	8
34816                                           ! 6492                             16,
34817 8AD6                        10            .byte	$10
34818                                           ! 6493                          8,
34819 8AD7                        08            .byte	8
34820                                           ! 6494                               8,
34821 8AD8                        08            .byte	8
34822                                           ! 6495                         8,
34823 8AD9                        08            .byte	8
34824                                           ! 6496                              0,
34825 8ADA                        00            .byte	0
34826                                           ! 6497                         0,
34827 8ADB                        00            .byte	0
34828                                           ! 6498                              0,
34829 8ADC                        00            .byte	0
34830                                           ! 6499                                0,
34831 8ADD                        00            .byte	0
34832                                           ! 6500                        0xE0000000,
34833 8ADE                      0000            .word	0
34834 8AE0                      E000            .word	$E000
34835                                           ! 6501                               0,
34836 8AE2                      0000            .word	0
34837 8AE4                      0000            .word	0
34838                                           ! 6502                             0,
34839 8AE6                      0000            .word	0
34840                                           ! 6503                                3840,
34841 8AE8                      0F00            .word	$F00
34842                                           ! 6504                             0,
34843 8AEA                        00            .byte	0
34844                                           ! 6505                             0,
34845 8AEB                        00            .byte	0
34846                                           ! 6506                           8,
34847 8AEC                        08            .byte	8
34848                                           ! 6507                                16,
34849 8AED                        10            .byte	$10
34850                                           ! 6508                             8,
34851 8AEE                        08            .byte	8
34852                                           ! 6509                                  8,
34853 8AEF                        08            .byte	8
34854                                           ! 6510                            8,
34855 8AF0                        08            .byte	8
34856                                           ! 6511                                 0,
34857 8AF1                        00            .byte	0
34858                                           ! 6512                            0,
34859 8AF2                        00            .byte	0
34860                                           ! 6513                                 0,
34861 8AF3                        00            .byte	0
34862                                           ! 6514                          0,
34863 8AF4                      0000            .word	0
34864 8AF6                      0000            .word	0
34865                                           ! 6515 } },
34866                                           ! 6516 { 0x017d,
34867 8AF8                      017D            .word	$17D
34868                                           ! 6517 { 0x0001 | 0x0002 | 0x00
34869                                           ! 6517 08 | 0x0080 | 0x0010,
34870 8AFA                      009B            .word	$9B
34871                                           ! 6518                           0x01 | 0x02 | 0x04,
34872 8AFC                        07            .byte	7
34873                                           ! 6519                           0,
34874 8AFD                        00            .byte	0
34875                                           ! 6520                           64,
34876 8AFE                      0040            .word	$40
34877                                           ! 6521                    64,
34878 8B00                      0040            .word	$40
34879                                           ! 6522                        0xA000,
34880 8B02                      A000            .word	$A000
34881                                           ! 6523                        0x0000,
34882 8B04                      0000            .word	0
34883                                           ! 6524                       0,
34884 8B06                      0000            .word	0
34885 8B08                      0000            .word	0
34886                                           ! 6525                             5120,
34887 8B0A                      1400            .word	$1400
34888                                           ! 6526                        1280,
34889 8B0C                      0500            .word	$500
34890                                           ! 6527                        960,
34891 8B0E                      03C0            .word	$3C0
34892                                           ! 6528                      8,
34893 8B10                        08            .byte	8
34894                                           ! 6529                      16,
34895 8B11                        10            .byte	$10
34896                                           ! 6530                           1,
34897 8B12                        01            .byte	1
34898                                           ! 6531                         32,
34899 8B13                        20            .byte	$20
34900                                           ! 6532                          75,
34901 8B14                        4B            .byte	$4B
34902                                           ! 6533                        0x06,
34903 8B15                        06            .byte	6
34904                                           ! 6534                     0,
34905 8B16                        00            .byte	0
34906                                           ! 6535                               2,
34907 8B17                        02            .byte	2
34908                                           ! 6536                          0,
34909 8B18                        00            .byte	0
34910                                           ! 6537                        8,
34911 8B19                        08            .byte	8
34912                                           ! 6538                             16,
34913 8B1A                        10            .byte	$10
34914                                           ! 6539                          8,
34915 8B1B                        08            .byte	8
34916                                           ! 6540                               8,
34917 8B1C                        08            .byte	8
34918                                           ! 6541                         8,
34919 8B1D                        08            .byte	8
34920                                           ! 6542                              0,
34921 8B1E                        00            .byte	0
34922                                           ! 6543                         8,
34923 8B1F                        08            .byte	8
34924                                           ! 6544                              24,
34925 8B20                        18            .byte	$18
34926                                           ! 6545                                0x02,
34927 8B21                        02            .byte	2
34928                                           ! 6546                        0xE0000000,
34929 8B22                      0000            .word	0
34930 8B24                      E000            .word	$E000
34931                                           ! 6547                               0,
34932 8B26                      0000            .word	0
34933 8B28                      0000            .word	0
34934                                           ! 6548                             0,
34935 8B2A                      0000            .word	0
34936                                           ! 6549                                5120,
34937 8B2C                      1400            .word	$1400
34938                                           ! 6550                             0,
34939 8B2E                        00            .byte	0
34940                                           ! 6551                             0,
34941 8B2F                        00            .byte	0
34942                                           ! 6552                           8,
34943 8B30                        08            .byte	8
34944                                           ! 6553                                16,
34945 8B31                        10            .byte	$10
34946                                           ! 6554                             8,
34947 8B32                        08            .byte	8
34948                                           ! 6555                                  8,
34949 8B33                        08            .byte	8
34950                                           ! 6556                            8,
34951 8B34                        08            .byte	8
34952                                           ! 6557                                 0,
34953 8B35                        00            .byte	0
34954                                           ! 6558                            8,
34955 8B36                        08            .byte	8
34956                                           ! 6559                                 24,
34957 8B37                        18            .byte	$18
34958                                           ! 6560                          0,
34959 8B38                      0000            .word	0
34960 8B3A                      0000            .word	0
34961                                           ! 6561 } },
34962                                           ! 6562 { 0x017e,
34963 8B3C                      017E            .word	$17E
34964                                           ! 6563 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34965 8B3E                      009B            .word	$9B
34966                                           ! 6564                           0x01 | 0x02 | 0x04,
34967 8B40                        07            .byte	7
34968                                           ! 6565                           0,
34969 8B41                        00            .byte	0
34970                                           ! 6566                           64,
34971 8B42                      0040            .word	$40
34972                                           ! 6567                    64,
34973 8B44                      0040            .word	$40
34974                                           ! 6568                        0xA000,
34975 8B46                      A000            .word	$A000
34976                                           ! 6569                        0x0000,
34977 8B48                      0000            .word	0
34978                                           ! 6570                       0,
34979 8B4A                      0000            .word	0
34980 8B4C                      0000            .word	0
34981                                           ! 6571                             2880,
34982 8B4E                      0B40            .word	$B40
34983                                           ! 6572                        1440,
34984 8B50                      05A0            .word	$5A0
34985                                           ! 6573                        900,
34986 8B52                      0384            .word	$384
34987                                           ! 6574                      8,
34988 8B54                        08            .byte	8
34989                                           ! 6575                      16,
34990 8B55                        10            .byte	$10
34991                                           ! 6576                           1,
34992 8B56                        01            .byte	1
34993                                           ! 6577                         16,
34994 8B57                        10            .byte	$10
34995                                           ! 6578                          40,
34996 8B58                        28            .byte	$28
34997                                           ! 6579                        0x06,
34998 8B59                        06            .byte	6
34999                                           ! 6580                     0,
35000 8B5A                        00            .byte	0
35001                                           ! 6581                               5,
35002 8B5B                        05            .byte	5
35003                                           ! 6582                          0,
35004 8B5C                        00            .byte	0
35005                                           ! 6583                        5,
35006 8B5D                        05            .byte	5
35007                                           ! 6584                             11,
35008 8B5E                        0B            .byte	$B
35009                                           ! 6585                          6,
35010 8B5F                        06            .byte	6
35011                                           ! 6586         
35012                                           ! 6586                       5,
35013 8B60                        05            .byte	5
35014                                           ! 6587                         5,
35015 8B61                        05            .byte	5
35016                                           ! 6588                              0,
35017 8B62                        00            .byte	0
35018                                           ! 6589                         0,
35019 8B63                        00            .byte	0
35020                                           ! 6590                              0,
35021 8B64                        00            .byte	0
35022                                           ! 6591                                0,
35023 8B65                        00            .byte	0
35024                                           ! 6592                        0xE0000000,
35025 8B66                      0000            .word	0
35026 8B68                      E000            .word	$E000
35027                                           ! 6593                               0,
35028 8B6A                      0000            .word	0
35029 8B6C                      0000            .word	0
35030                                           ! 6594                             0,
35031 8B6E                      0000            .word	0
35032                                           ! 6595                                2880,
35033 8B70                      0B40            .word	$B40
35034                                           ! 6596                             0,
35035 8B72                        00            .byte	0
35036                                           ! 6597                             0,
35037 8B73                        00            .byte	0
35038                                           ! 6598                           5,
35039 8B74                        05            .byte	5
35040                                           ! 6599                                11,
35041 8B75                        0B            .byte	$B
35042                                           ! 6600                             6,
35043 8B76                        06            .byte	6
35044                                           ! 6601                                  5,
35045 8B77                        05            .byte	5
35046                                           ! 6602                            5,
35047 8B78                        05            .byte	5
35048                                           ! 6603                                 0,
35049 8B79                        00            .byte	0
35050                                           ! 6604                            0,
35051 8B7A                        00            .byte	0
35052                                           ! 6605                                 0,
35053 8B7B                        00            .byte	0
35054                                           ! 6606                          0,
35055 8B7C                      0000            .word	0
35056 8B7E                      0000            .word	0
35057                                           ! 6607 } },
35058                                           ! 6608 { 0x017f,
35059 8B80                      017F            .word	$17F
35060                                           ! 6609 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35061 8B82                      009B            .word	$9B
35062                                           ! 6610                           0x01 | 0x02 | 0x04,
35063 8B84                        07            .byte	7
35064                                           ! 6611                           0,
35065 8B85                        00            .byte	0
35066                                           ! 6612                           64,
35067 8B86                      0040            .word	$40
35068                                           ! 6613                    64,
35069 8B88                      0040            .word	$40
35070                                           ! 6614                        0xA000,
35071 8B8A                      A000            .word	$A000
35072                                           ! 6615                        0x0000,
35073 8B8C                      0000            .word	0
35074                                           ! 6616                       0,
35075 8B8E                      0000            .word	0
35076 8B90                      0000            .word	0
35077                                           ! 6617                             4320,
35078 8B92                      10E0            .word	$10E0
35079                                           ! 6618                        1440,
35080 8B94                      05A0            .word	$5A0
35081                                           ! 6619                        900,
35082 8B96                      0384            .word	$384
35083                                           ! 6620                      8,
35084 8B98                        08            .byte	8
35085                                           ! 6621                      16,
35086 8B99                        10            .byte	$10
35087                                           ! 6622                           1,
35088 8B9A                        01            .byte	1
35089                                           ! 6623                         24,
35090 8B9B                        18            .byte	$18
35091                                           ! 6624                          60,
35092 8B9C                        3C            .byte	$3C
35093                                           ! 6625                        0x06,
35094 8B9D                        06            .byte	6
35095                                           ! 6626                     0,
35096 8B9E                        00            .byte	0
35097                                           ! 6627                               3,
35098 8B9F                        03            .byte	3
35099                                           ! 6628                          0,
35100 8BA0                        00            .byte	0
35101                                           ! 6629                        8,
35102 8BA1                        08            .byte	8
35103                                           ! 6630                             16,
35104 8BA2                        10            .byte	$10
35105                                           ! 6631                          8,
35106 8BA3                        08            .byte	8
35107                                           ! 6632                               8,
35108 8BA4                        08            .byte	8
35109                                           ! 6633                         8,
35110 8BA5                        08            .byte	8
35111                                           ! 6634                              0,
35112 8BA6                        00            .byte	0
35113                                           ! 6635                         0,
35114 8BA7                        00            .byte	0
35115                                           ! 6636                              0,
35116 8BA8                        00            .byte	0
35117                                           ! 6637                                0,
35118 8BA9                        00            .byte	0
35119                                           ! 6638                        0xE0000000,
35120 8BAA                      0000            .word	0
35121 8BAC                      E000            .word	$E000
35122                                           ! 6639                               0,
35123 8BAE                      0000            .word	0
35124 8BB0                      0000            .word	0
35125                                           ! 6640                             0,
35126 8BB2                      0000            .word	0
35127                                           ! 6641                                4320,
35128 8BB4                      10E0            .word	$10E0
35129                                           ! 6642                             0,
35130 8BB6                        00            .byte	0
35131                                           ! 6643                             0,
35132 8BB7                        00            .byte	0
35133                                           ! 6644                           8,
35134 8BB8                        08            .byte	8
35135                                           ! 6645                                16,
35136 8BB9                        10            .byte	$10
35137                                           ! 6646                             8,
35138 8BBA                        08            .byte	8
35139                                           ! 6647                                  8,
35140 8BBB                        08            .byte	8
35141                                           ! 6648                            8,
35142 8BBC                        08            .byte	8
35143                                           ! 6649                                 0,
35144 8BBD                        00            .byte	0
35145                                           ! 6650                            0,
35146 8BBE                        00            .byte	0
35147                                           ! 6651                                 0,
35148 8BBF                        00            .byte	0
35149                                           ! 6652                          0,
35150 8BC0                      0000            .word	0
35151 8BC2                      0000            .word	0
35152                                           ! 6653 } },
35153                                           ! 6654 { 0x01
35154                                           ! 6654 80,
35155 8BC4                      0180            .word	$180
35156                                           ! 6655 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35157 8BC6                      009B            .word	$9B
35158                                           ! 6656                           0x01 | 0x02 | 0x04,
35159 8BC8                        07            .byte	7
35160                                           ! 6657                           0,
35161 8BC9                        00            .byte	0
35162                                           ! 6658                           64,
35163 8BCA                      0040            .word	$40
35164                                           ! 6659                    64,
35165 8BCC                      0040            .word	$40
35166                                           ! 6660                        0xA000,
35167 8BCE                      A000            .word	$A000
35168                                           ! 6661                        0x0000,
35169 8BD0                      0000            .word	0
35170                                           ! 6662                       0,
35171 8BD2                      0000            .word	0
35172 8BD4                      0000            .word	0
35173                                           ! 6663                             5760,
35174 8BD6                      1680            .word	$1680
35175                                           ! 6664                        1440,
35176 8BD8                      05A0            .word	$5A0
35177                                           ! 6665                        900,
35178 8BDA                      0384            .word	$384
35179                                           ! 6666                      8,
35180 8BDC                        08            .byte	8
35181                                           ! 6667                      16,
35182 8BDD                        10            .byte	$10
35183                                           ! 6668                           1,
35184 8BDE                        01            .byte	1
35185                                           ! 6669                         32,
35186 8BDF                        20            .byte	$20
35187                                           ! 6670                          80,
35188 8BE0                        50            .byte	$50
35189                                           ! 6671                        0x06,
35190 8BE1                        06            .byte	6
35191                                           ! 6672                     0,
35192 8BE2                        00            .byte	0
35193                                           ! 6673                               2,
35194 8BE3                        02            .byte	2
35195                                           ! 6674                          0,
35196 8BE4                        00            .byte	0
35197                                           ! 6675                        8,
35198 8BE5                        08            .byte	8
35199                                           ! 6676                             16,
35200 8BE6                        10            .byte	$10
35201                                           ! 6677                          8,
35202 8BE7                        08            .byte	8
35203                                           ! 6678                               8,
35204 8BE8                        08            .byte	8
35205                                           ! 6679                         8,
35206 8BE9                        08            .byte	8
35207                                           ! 6680                              0,
35208 8BEA                        00            .byte	0
35209                                           ! 6681                         8,
35210 8BEB                        08            .byte	8
35211                                           ! 6682                              24,
35212 8BEC                        18            .byte	$18
35213                                           ! 6683                                0x02,
35214 8BED                        02            .byte	2
35215                                           ! 6684                        0xE0000000,
35216 8BEE                      0000            .word	0
35217 8BF0                      E000            .word	$E000
35218                                           ! 6685                               0,
35219 8BF2                      0000            .word	0
35220 8BF4                      0000            .word	0
35221                                           ! 6686                             0,
35222 8BF6                      0000            .word	0
35223                                           ! 6687                                5760,
35224 8BF8                      1680            .word	$1680
35225                                           ! 6688                             0,
35226 8BFA                        00            .byte	0
35227                                           ! 6689                             0,
35228 8BFB                        00            .byte	0
35229                                           ! 6690                           8,
35230 8BFC                        08            .byte	8
35231                                           ! 6691                                16,
35232 8BFD                        10            .byte	$10
35233                                           ! 6692                             8,
35234 8BFE                        08            .byte	8
35235                                           ! 6693                                  8,
35236 8BFF                        08            .byte	8
35237                                           ! 6694                            8,
35238 8C00                        08            .byte	8
35239                                           ! 6695                                 0,
35240 8C01                        00            .byte	0
35241                                           ! 6696                            8,
35242 8C02                        08            .byte	8
35243                                           ! 6697                                 24,
35244 8C03                        18            .byte	$18
35245                                           ! 6698                          0,
35246 8C04                      0000            .word	0
35247 8C06                      0000            .word	0
35248                                           ! 6699 } },
35249                                           ! 6700 { 0x0181,
35250 8C08                      0181            .word	$181
35251                                           ! 6701 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35252 8C0A                      009B            .word	$9B
35253                                           ! 6702                           0x01 | 0x02 | 0x04,
35254 8C0C                        07            .byte	7
35255                                           ! 6703                           0,
35256 8C0D                        00            .byte	0
35257                                           ! 6704                           64,
35258 8C0E                      0040            .word	$40
35259                                           ! 6705                    64,
35260 8C10                      0040            .word	$40
35261                                           ! 6706                        0xA000,
35262 8C12                      A000            .word	$A000
35263                                           ! 6707                        0x0000,
35264 8C14                      0000            .word	0
35265                                           ! 6708                       0,
35266 8C16                      0000            .word	0
35267 8C18                      0000            .word	0
35268                                           ! 6709                             2800,
35269 8C1A                      0AF0            .word	$AF0
35270                                           ! 6710                        1400,
35271 8C1C                      0578            .word	$578
35272                                           ! 6711                        1050,
35273 8C1E                      041A            .word	$41A
35274                                           ! 6712                      8,
35275 8C20                        08            .byte	8
35276                                           ! 6713                      16,
35277 8C21                        10            .byte	$10
35278                                           ! 6714                           1,
35279 8C22                        01            .byte	1
35280                                           ! 6715                         16,
35281 8C23                        10            .byte	$10
35282                                           ! 6716                          45,
35283 8C24                        2D            .byte	$2D
35284                                           ! 6717                        0x06,
35285 8C25                        06            .byte	6
35286                                           ! 6718                     0,
35287 8C26                        00            .byte	0
35288                                           ! 6719                               4,
35289 8C27                        04            .byte	4
35290                                           ! 6720                          0,
35291 8C28                        00            .byte	0
35292                                           ! 6721                        5,
35293 8C29                        05            .byte	5
35294                                           ! 6722                             11,
35295 8C2A                        0B            .byte	$B
35296                                           ! 6723        
35297                                           ! 6723                   6,
35298 8C2B                        06            .byte	6
35299                                           ! 6724                               5,
35300 8C2C                        05            .byte	5
35301                                           ! 6725                         5,
35302 8C2D                        05            .byte	5
35303                                           ! 6726                              0,
35304 8C2E                        00            .byte	0
35305                                           ! 6727                         0,
35306 8C2F                        00            .byte	0
35307                                           ! 6728                              0,
35308 8C30                        00            .byte	0
35309                                           ! 6729                                0,
35310 8C31                        00            .byte	0
35311                                           ! 6730                        0xE0000000,
35312 8C32                      0000            .word	0
35313 8C34                      E000            .word	$E000
35314                                           ! 6731                               0,
35315 8C36                      0000            .word	0
35316 8C38                      0000            .word	0
35317                                           ! 6732                             0,
35318 8C3A                      0000            .word	0
35319                                           ! 6733                                2800,
35320 8C3C                      0AF0            .word	$AF0
35321                                           ! 6734                             0,
35322 8C3E                        00            .byte	0
35323                                           ! 6735                             0,
35324 8C3F                        00            .byte	0
35325                                           ! 6736                           5,
35326 8C40                        05            .byte	5
35327                                           ! 6737                                11,
35328 8C41                        0B            .byte	$B
35329                                           ! 6738                             6,
35330 8C42                        06            .byte	6
35331                                           ! 6739                                  5,
35332 8C43                        05            .byte	5
35333                                           ! 6740                            5,
35334 8C44                        05            .byte	5
35335                                           ! 6741                                 0,
35336 8C45                        00            .byte	0
35337                                           ! 6742                            0,
35338 8C46                        00            .byte	0
35339                                           ! 6743                                 0,
35340 8C47                        00            .byte	0
35341                                           ! 6744                          0,
35342 8C48                      0000            .word	0
35343 8C4A                      0000            .word	0
35344                                           ! 6745 } },
35345                                           ! 6746 { 0x0182,
35346 8C4C                      0182            .word	$182
35347                                           ! 6747 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35348 8C4E                      009B            .word	$9B
35349                                           ! 6748                           0x01 | 0x02 | 0x04,
35350 8C50                        07            .byte	7
35351                                           ! 6749                           0,
35352 8C51                        00            .byte	0
35353                                           ! 6750                           64,
35354 8C52                      0040            .word	$40
35355                                           ! 6751                    64,
35356 8C54                      0040            .word	$40
35357                                           ! 6752                        0xA000,
35358 8C56                      A000            .word	$A000
35359                                           ! 6753                        0x0000,
35360 8C58                      0000            .word	0
35361                                           ! 6754                       0,
35362 8C5A                      0000            .word	0
35363 8C5C                      0000            .word	0
35364                                           ! 6755                             4200,
35365 8C5E                      1068            .word	$1068
35366                                           ! 6756                        1400,
35367 8C60                      0578            .word	$578
35368                                           ! 6757                        1050,
35369 8C62                      041A            .word	$41A
35370                                           ! 6758                      8,
35371 8C64                        08            .byte	8
35372                                           ! 6759                      16,
35373 8C65                        10            .byte	$10
35374                                           ! 6760                           1,
35375 8C66                        01            .byte	1
35376                                           ! 6761                         24,
35377 8C67                        18            .byte	$18
35378                                           ! 6762                          68,
35379 8C68                        44            .byte	$44
35380                                           ! 6763                        0x06,
35381 8C69                        06            .byte	6
35382                                           ! 6764                     0,
35383 8C6A                        00            .byte	0
35384                                           ! 6765                               2,
35385 8C6B                        02            .byte	2
35386                                           ! 6766                          0,
35387 8C6C                        00            .byte	0
35388                                           ! 6767                        8,
35389 8C6D                        08            .byte	8
35390                                           ! 6768                             16,
35391 8C6E                        10            .byte	$10
35392                                           ! 6769                          8,
35393 8C6F                        08            .byte	8
35394                                           ! 6770                               8,
35395 8C70                        08            .byte	8
35396                                           ! 6771                         8,
35397 8C71                        08            .byte	8
35398                                           ! 6772                              0,
35399 8C72                        00            .byte	0
35400                                           ! 6773                         0,
35401 8C73                        00            .byte	0
35402                                           ! 6774                              0,
35403 8C74                        00            .byte	0
35404                                           ! 6775                                0,
35405 8C75                        00            .byte	0
35406                                           ! 6776                        0xE0000000,
35407 8C76                      0000            .word	0
35408 8C78                      E000            .word	$E000
35409                                           ! 6777                               0,
35410 8C7A                      0000            .word	0
35411 8C7C                      0000            .word	0
35412                                           ! 6778                             0,
35413 8C7E                      0000            .word	0
35414                                           ! 6779                                4200,
35415 8C80                      1068            .word	$1068
35416                                           ! 6780                             0,
35417 8C82                        00            .byte	0
35418                                           ! 6781                             0,
35419 8C83                        00            .byte	0
35420                                           ! 6782                           8,
35421 8C84                        08            .byte	8
35422                                           ! 6783                                16,
35423 8C85                        10            .byte	$10
35424                                           ! 6784                             8,
35425 8C86                        08            .byte	8
35426                                           ! 6785                                  8,
35427 8C87                        08            .byte	8
35428                                           ! 6786                            8,
35429 8C88                        08            .byte	8
35430                                           ! 6787                                 0,
35431 8C89                        00            .byte	0
35432                                           ! 6788                            0,
35433 8C8A                        00            .byte	0
35434                                           ! 6789                                 0,
35435 8C8B                        00            .byte	0
35436                                           ! 6790          
35437                                           ! 6790                 0,
35438 8C8C                      0000            .word	0
35439 8C8E                      0000            .word	0
35440                                           ! 6791 } },
35441                                           ! 6792 { 0x0183,
35442 8C90                      0183            .word	$183
35443                                           ! 6793 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35444 8C92                      009B            .word	$9B
35445                                           ! 6794                           0x01 | 0x02 | 0x04,
35446 8C94                        07            .byte	7
35447                                           ! 6795                           0,
35448 8C95                        00            .byte	0
35449                                           ! 6796                           64,
35450 8C96                      0040            .word	$40
35451                                           ! 6797                    64,
35452 8C98                      0040            .word	$40
35453                                           ! 6798                        0xA000,
35454 8C9A                      A000            .word	$A000
35455                                           ! 6799                        0x0000,
35456 8C9C                      0000            .word	0
35457                                           ! 6800                       0,
35458 8C9E                      0000            .word	0
35459 8CA0                      0000            .word	0
35460                                           ! 6801                             5600,
35461 8CA2                      15E0            .word	$15E0
35462                                           ! 6802                        1400,
35463 8CA4                      0578            .word	$578
35464                                           ! 6803                        1050,
35465 8CA6                      041A            .word	$41A
35466                                           ! 6804                      8,
35467 8CA8                        08            .byte	8
35468                                           ! 6805                      16,
35469 8CA9                        10            .byte	$10
35470                                           ! 6806                           1,
35471 8CAA                        01            .byte	1
35472                                           ! 6807                         32,
35473 8CAB                        20            .byte	$20
35474                                           ! 6808                          90,
35475 8CAC                        5A            .byte	$5A
35476                                           ! 6809                        0x06,
35477 8CAD                        06            .byte	6
35478                                           ! 6810                     0,
35479 8CAE                        00            .byte	0
35480                                           ! 6811                               1,
35481 8CAF                        01            .byte	1
35482                                           ! 6812                          0,
35483 8CB0                        00            .byte	0
35484                                           ! 6813                        8,
35485 8CB1                        08            .byte	8
35486                                           ! 6814                             16,
35487 8CB2                        10            .byte	$10
35488                                           ! 6815                          8,
35489 8CB3                        08            .byte	8
35490                                           ! 6816                               8,
35491 8CB4                        08            .byte	8
35492                                           ! 6817                         8,
35493 8CB5                        08            .byte	8
35494                                           ! 6818                              0,
35495 8CB6                        00            .byte	0
35496                                           ! 6819                         8,
35497 8CB7                        08            .byte	8
35498                                           ! 6820                              24,
35499 8CB8                        18            .byte	$18
35500                                           ! 6821                                0x02,
35501 8CB9                        02            .byte	2
35502                                           ! 6822                        0xE0000000,
35503 8CBA                      0000            .word	0
35504 8CBC                      E000            .word	$E000
35505                                           ! 6823                               0,
35506 8CBE                      0000            .word	0
35507 8CC0                      0000            .word	0
35508                                           ! 6824                             0,
35509 8CC2                      0000            .word	0
35510                                           ! 6825                                5600,
35511 8CC4                      15E0            .word	$15E0
35512                                           ! 6826                             0,
35513 8CC6                        00            .byte	0
35514                                           ! 6827                             0,
35515 8CC7                        00            .byte	0
35516                                           ! 6828                           8,
35517 8CC8                        08            .byte	8
35518                                           ! 6829                                16,
35519 8CC9                        10            .byte	$10
35520                                           ! 6830                             8,
35521 8CCA                        08            .byte	8
35522                                           ! 6831                                  8,
35523 8CCB                        08            .byte	8
35524                                           ! 6832                            8,
35525 8CCC                        08            .byte	8
35526                                           ! 6833                                 0,
35527 8CCD                        00            .byte	0
35528                                           ! 6834                            8,
35529 8CCE                        08            .byte	8
35530                                           ! 6835                                 24,
35531 8CCF                        18            .byte	$18
35532                                           ! 6836                          0,
35533 8CD0                      0000            .word	0
35534 8CD2                      0000            .word	0
35535                                           ! 6837 } },
35536                                           ! 6838 { 0x0184,
35537 8CD4                      0184            .word	$184
35538                                           ! 6839 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35539 8CD6                      009B            .word	$9B
35540                                           ! 6840                           0x01 | 0x02 | 0x04,
35541 8CD8                        07            .byte	7
35542                                           ! 6841                           0,
35543 8CD9                        00            .byte	0
35544                                           ! 6842                           64,
35545 8CDA                      0040            .word	$40
35546                                           ! 6843                    64,
35547 8CDC                      0040            .word	$40
35548                                           ! 6844                        0xA000,
35549 8CDE                      A000            .word	$A000
35550                                           ! 6845                        0x0000,
35551 8CE0                      0000            .word	0
35552                                           ! 6846                       0,
35553 8CE2                      0000            .word	0
35554 8CE4                      0000            .word	0
35555                                           ! 6847                             3360,
35556 8CE6                      0D20            .word	$D20
35557                                           ! 6848                        1680,
35558 8CE8                      0690            .word	$690
35559                                           ! 6849                        1050,
35560 8CEA                      041A            .word	$41A
35561                                           ! 6850                      8,
35562 8CEC                        08            .byte	8
35563                                           ! 6851                      16,
35564 8CED                        10            .byte	$10
35565                                           ! 6852                           1,
35566 8CEE                        01            .byte	1
35567                                           ! 6853                         16,
35568 8CEF                        10            .byte	$10
35569                                           ! 6854                          54,
35570 8CF0                        36            .byte	$36
35571                                           ! 6855                        0x06,
35572 8CF1                        06            .byte	6
35573                                           ! 6856                     0,
35574 8CF2                        00            .byte	0
35575                                           ! 6857                               3,
35576 8CF3                        03            .byte	3
35577                                           ! 6858                          0,
35578 8CF4                        00            .byte	0
35579                                           ! 6859                        5,
35580 8CF5                        05            .byte	5
35581                                           ! 6860         
35582                                           ! 6860                     11,
35583 8CF6                        0B            .byte	$B
35584                                           ! 6861                          6,
35585 8CF7                        06            .byte	6
35586                                           ! 6862                               5,
35587 8CF8                        05            .byte	5
35588                                           ! 6863                         5,
35589 8CF9                        05            .byte	5
35590                                           ! 6864                              0,
35591 8CFA                        00            .byte	0
35592                                           ! 6865                         0,
35593 8CFB                        00            .byte	0
35594                                           ! 6866                              0,
35595 8CFC                        00            .byte	0
35596                                           ! 6867                                0,
35597 8CFD                        00            .byte	0
35598                                           ! 6868                        0xE0000000,
35599 8CFE                      0000            .word	0
35600 8D00                      E000            .word	$E000
35601                                           ! 6869                               0,
35602 8D02                      0000            .word	0
35603 8D04                      0000            .word	0
35604                                           ! 6870                             0,
35605 8D06                      0000            .word	0
35606                                           ! 6871                                3360,
35607 8D08                      0D20            .word	$D20
35608                                           ! 6872                             0,
35609 8D0A                        00            .byte	0
35610                                           ! 6873                             0,
35611 8D0B                        00            .byte	0
35612                                           ! 6874                           5,
35613 8D0C                        05            .byte	5
35614                                           ! 6875                                11,
35615 8D0D                        0B            .byte	$B
35616                                           ! 6876                             6,
35617 8D0E                        06            .byte	6
35618                                           ! 6877                                  5,
35619 8D0F                        05            .byte	5
35620                                           ! 6878                            5,
35621 8D10                        05            .byte	5
35622                                           ! 6879                                 0,
35623 8D11                        00            .byte	0
35624                                           ! 6880                            0,
35625 8D12                        00            .byte	0
35626                                           ! 6881                                 0,
35627 8D13                        00            .byte	0
35628                                           ! 6882                          0,
35629 8D14                      0000            .word	0
35630 8D16                      0000            .word	0
35631                                           ! 6883 } },
35632                                           ! 6884 { 0x0185,
35633 8D18                      0185            .word	$185
35634                                           ! 6885 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35635 8D1A                      009B            .word	$9B
35636                                           ! 6886                           0x01 | 0x02 | 0x04,
35637 8D1C                        07            .byte	7
35638                                           ! 6887                           0,
35639 8D1D                        00            .byte	0
35640                                           ! 6888                           64,
35641 8D1E                      0040            .word	$40
35642                                           ! 6889                    64,
35643 8D20                      0040            .word	$40
35644                                           ! 6890                        0xA000,
35645 8D22                      A000            .word	$A000
35646                                           ! 6891                        0x0000,
35647 8D24                      0000            .word	0
35648                                           ! 6892                       0,
35649 8D26                      0000            .word	0
35650 8D28                      0000            .word	0
35651                                           ! 6893                             5040,
35652 8D2A                      13B0            .word	$13B0
35653                                           ! 6894                        1680,
35654 8D2C                      0690            .word	$690
35655                                           ! 6895                        1050,
35656 8D2E                      041A            .word	$41A
35657                                           ! 6896                      8,
35658 8D30                        08            .byte	8
35659                                           ! 6897                      16,
35660 8D31                        10            .byte	$10
35661                                           ! 6898                           1,
35662 8D32                        01            .byte	1
35663                                           ! 6899                         24,
35664 8D33                        18            .byte	$18
35665                                           ! 6900                          81,
35666 8D34                        51            .byte	$51
35667                                           ! 6901                        0x06,
35668 8D35                        06            .byte	6
35669                                           ! 6902                     0,
35670 8D36                        00            .byte	0
35671                                           ! 6903                               2,
35672 8D37                        02            .byte	2
35673                                           ! 6904                          0,
35674 8D38                        00            .byte	0
35675                                           ! 6905                        8,
35676 8D39                        08            .byte	8
35677                                           ! 6906                             16,
35678 8D3A                        10            .byte	$10
35679                                           ! 6907                          8,
35680 8D3B                        08            .byte	8
35681                                           ! 6908                               8,
35682 8D3C                        08            .byte	8
35683                                           ! 6909                         8,
35684 8D3D                        08            .byte	8
35685                                           ! 6910                              0,
35686 8D3E                        00            .byte	0
35687                                           ! 6911                         0,
35688 8D3F                        00            .byte	0
35689                                           ! 6912                              0,
35690 8D40                        00            .byte	0
35691                                           ! 6913                                0,
35692 8D41                        00            .byte	0
35693                                           ! 6914                        0xE0000000,
35694 8D42                      0000            .word	0
35695 8D44                      E000            .word	$E000
35696                                           ! 6915                               0,
35697 8D46                      0000            .word	0
35698 8D48                      0000            .word	0
35699                                           ! 6916                             0,
35700 8D4A                      0000            .word	0
35701                                           ! 6917                                5040,
35702 8D4C                      13B0            .word	$13B0
35703                                           ! 6918                             0,
35704 8D4E                        00            .byte	0
35705                                           ! 6919                             0,
35706 8D4F                        00            .byte	0
35707                                           ! 6920                           8,
35708 8D50                        08            .byte	8
35709                                           ! 6921                                16,
35710 8D51                        10            .byte	$10
35711                                           ! 6922                             8,
35712 8D52                        08            .byte	8
35713                                           ! 6923                                  8,
35714 8D53                        08            .byte	8
35715                                           ! 6924                            8,
35716 8D54                        08            .byte	8
35717                                           ! 6925                                 0,
35718 8D55                        00            .byte	0
35719                                           ! 6926                            0,
35720 8D56                        00            .byte	0
35721                                           ! 6927              
35722                                           ! 6927                    0,
35723 8D57                        00            .byte	0
35724                                           ! 6928                          0,
35725 8D58                      0000            .word	0
35726 8D5A                      0000            .word	0
35727                                           ! 6929 } },
35728                                           ! 6930 { 0x0186,
35729 8D5C                      0186            .word	$186
35730                                           ! 6931 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35731 8D5E                      009B            .word	$9B
35732                                           ! 6932                           0x01 | 0x02 | 0x04,
35733 8D60                        07            .byte	7
35734                                           ! 6933                           0,
35735 8D61                        00            .byte	0
35736                                           ! 6934                           64,
35737 8D62                      0040            .word	$40
35738                                           ! 6935                    64,
35739 8D64                      0040            .word	$40
35740                                           ! 6936                        0xA000,
35741 8D66                      A000            .word	$A000
35742                                           ! 6937                        0x0000,
35743 8D68                      0000            .word	0
35744                                           ! 6938                       0,
35745 8D6A                      0000            .word	0
35746 8D6C                      0000            .word	0
35747                                           ! 6939                             6720,
35748 8D6E                      1A40            .word	$1A40
35749                                           ! 6940                        1680,
35750 8D70                      0690            .word	$690
35751                                           ! 6941                        1050,
35752 8D72                      041A            .word	$41A
35753                                           ! 6942                      8,
35754 8D74                        08            .byte	8
35755                                           ! 6943                      16,
35756 8D75                        10            .byte	$10
35757                                           ! 6944                           1,
35758 8D76                        01            .byte	1
35759                                           ! 6945                         32,
35760 8D77                        20            .byte	$20
35761                                           ! 6946                          108,
35762 8D78                        6C            .byte	$6C
35763                                           ! 6947                        0x06,
35764 8D79                        06            .byte	6
35765                                           ! 6948                     0,
35766 8D7A                        00            .byte	0
35767                                           ! 6949                               1,
35768 8D7B                        01            .byte	1
35769                                           ! 6950                          0,
35770 8D7C                        00            .byte	0
35771                                           ! 6951                        8,
35772 8D7D                        08            .byte	8
35773                                           ! 6952                             16,
35774 8D7E                        10            .byte	$10
35775                                           ! 6953                          8,
35776 8D7F                        08            .byte	8
35777                                           ! 6954                               8,
35778 8D80                        08            .byte	8
35779                                           ! 6955                         8,
35780 8D81                        08            .byte	8
35781                                           ! 6956                              0,
35782 8D82                        00            .byte	0
35783                                           ! 6957                         8,
35784 8D83                        08            .byte	8
35785                                           ! 6958                              24,
35786 8D84                        18            .byte	$18
35787                                           ! 6959                                0x02,
35788 8D85                        02            .byte	2
35789                                           ! 6960                        0xE0000000,
35790 8D86                      0000            .word	0
35791 8D88                      E000            .word	$E000
35792                                           ! 6961                               0,
35793 8D8A                      0000            .word	0
35794 8D8C                      0000            .word	0
35795                                           ! 6962                             0,
35796 8D8E                      0000            .word	0
35797                                           ! 6963                                6720,
35798 8D90                      1A40            .word	$1A40
35799                                           ! 6964                             0,
35800 8D92                        00            .byte	0
35801                                           ! 6965                             0,
35802 8D93                        00            .byte	0
35803                                           ! 6966                           8,
35804 8D94                        08            .byte	8
35805                                           ! 6967                                16,
35806 8D95                        10            .byte	$10
35807                                           ! 6968                             8,
35808 8D96                        08            .byte	8
35809                                           ! 6969                                  8,
35810 8D97                        08            .byte	8
35811                                           ! 6970                            8,
35812 8D98                        08            .byte	8
35813                                           ! 6971                                 0,
35814 8D99                        00            .byte	0
35815                                           ! 6972                            8,
35816 8D9A                        08            .byte	8
35817                                           ! 6973                                 24,
35818 8D9B                        18            .byte	$18
35819                                           ! 6974                          0,
35820 8D9C                      0000            .word	0
35821 8D9E                      0000            .word	0
35822                                           ! 6975 } },
35823                                           ! 6976 { 0x0187,
35824 8DA0                      0187            .word	$187
35825                                           ! 6977 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35826 8DA2                      009B            .word	$9B
35827                                           ! 6978                           0x01 | 0x02 | 0x04,
35828 8DA4                        07            .byte	7
35829                                           ! 6979                           0,
35830 8DA5                        00            .byte	0
35831                                           ! 6980                           64,
35832 8DA6                      0040            .word	$40
35833                                           ! 6981                    64,
35834 8DA8                      0040            .word	$40
35835                                           ! 6982                        0xA000,
35836 8DAA                      A000            .word	$A000
35837                                           ! 6983                        0x0000,
35838 8DAC                      0000            .word	0
35839                                           ! 6984                       0,
35840 8DAE                      0000            .word	0
35841 8DB0                      0000            .word	0
35842                                           ! 6985                             3840,
35843 8DB2                      0F00            .word	$F00
35844                                           ! 6986                        1920,
35845 8DB4                      0780            .word	$780
35846                                           ! 6987                        1200,
35847 8DB6                      04B0            .word	$4B0
35848                                           ! 6988                      8,
35849 8DB8                        08            .byte	8
35850                                           ! 6989                      16,
35851 8DB9                        10            .byte	$10
35852                                           ! 6990                           1,
35853 8DBA                        01            .byte	1
35854                                           ! 6991                         16,
35855 8DBB                        10            .byte	$10
35856                                           ! 6992                          71,
35857 8DBC                        47            .byte	$47
35858                                           ! 6993                        0x06,
35859 8DBD                        06            .byte	6
35860                                           ! 6994                     0,
35861 8DBE                        00            .byte	0
35862                                           ! 6995                               2,
35863 8DBF                        02            .byte	2
35864                                           ! 6996                          0,
35865 8DC0                        00            .byte	0
35866                                           ! 6997   
35867                                           ! 6997                      5,
35868 8DC1                        05            .byte	5
35869                                           ! 6998                             11,
35870 8DC2                        0B            .byte	$B
35871                                           ! 6999                          6,
35872 8DC3                        06            .byte	6
35873                                           ! 7000                               5,
35874 8DC4                        05            .byte	5
35875                                           ! 7001                         5,
35876 8DC5                        05            .byte	5
35877                                           ! 7002                              0,
35878 8DC6                        00            .byte	0
35879                                           ! 7003                         0,
35880 8DC7                        00            .byte	0
35881                                           ! 7004                              0,
35882 8DC8                        00            .byte	0
35883                                           ! 7005                                0,
35884 8DC9                        00            .byte	0
35885                                           ! 7006                        0xE0000000,
35886 8DCA                      0000            .word	0
35887 8DCC                      E000            .word	$E000
35888                                           ! 7007                               0,
35889 8DCE                      0000            .word	0
35890 8DD0                      0000            .word	0
35891                                           ! 7008                             0,
35892 8DD2                      0000            .word	0
35893                                           ! 7009                                3840,
35894 8DD4                      0F00            .word	$F00
35895                                           ! 7010                             0,
35896 8DD6                        00            .byte	0
35897                                           ! 7011                             0,
35898 8DD7                        00            .byte	0
35899                                           ! 7012                           5,
35900 8DD8                        05            .byte	5
35901                                           ! 7013                                11,
35902 8DD9                        0B            .byte	$B
35903                                           ! 7014                             6,
35904 8DDA                        06            .byte	6
35905                                           ! 7015                                  5,
35906 8DDB                        05            .byte	5
35907                                           ! 7016                            5,
35908 8DDC                        05            .byte	5
35909                                           ! 7017                                 0,
35910 8DDD                        00            .byte	0
35911                                           ! 7018                            0,
35912 8DDE                        00            .byte	0
35913                                           ! 7019                                 0,
35914 8DDF                        00            .byte	0
35915                                           ! 7020                          0,
35916 8DE0                      0000            .word	0
35917 8DE2                      0000            .word	0
35918                                           ! 7021 } },
35919                                           ! 7022 { 0x0188,
35920 8DE4                      0188            .word	$188
35921                                           ! 7023 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35922 8DE6                      009B            .word	$9B
35923                                           ! 7024                           0x01 | 0x02 | 0x04,
35924 8DE8                        07            .byte	7
35925                                           ! 7025                           0,
35926 8DE9                        00            .byte	0
35927                                           ! 7026                           64,
35928 8DEA                      0040            .word	$40
35929                                           ! 7027                    64,
35930 8DEC                      0040            .word	$40
35931                                           ! 7028                        0xA000,
35932 8DEE                      A000            .word	$A000
35933                                           ! 7029                        0x0000,
35934 8DF0                      0000            .word	0
35935                                           ! 7030                       0,
35936 8DF2                      0000            .word	0
35937 8DF4                      0000            .word	0
35938                                           ! 7031                             5760,
35939 8DF6                      1680            .word	$1680
35940                                           ! 7032                        1920,
35941 8DF8                      0780            .word	$780
35942                                           ! 7033                        1200,
35943 8DFA                      04B0            .word	$4B0
35944                                           ! 7034                      8,
35945 8DFC                        08            .byte	8
35946                                           ! 7035                      16,
35947 8DFD                        10            .byte	$10
35948                                           ! 7036                           1,
35949 8DFE                        01            .byte	1
35950                                           ! 7037                         24,
35951 8DFF                        18            .byte	$18
35952                                           ! 7038                          106,
35953 8E00                        6A            .byte	$6A
35954                                           ! 7039                        0x06,
35955 8E01                        06            .byte	6
35956                                           ! 7040                     0,
35957 8E02                        00            .byte	0
35958                                           ! 7041                               1,
35959 8E03                        01            .byte	1
35960                                           ! 7042                          0,
35961 8E04                        00            .byte	0
35962                                           ! 7043                        8,
35963 8E05                        08            .byte	8
35964                                           ! 7044                             16,
35965 8E06                        10            .byte	$10
35966                                           ! 7045                          8,
35967 8E07                        08            .byte	8
35968                                           ! 7046                               8,
35969 8E08                        08            .byte	8
35970                                           ! 7047                         8,
35971 8E09                        08            .byte	8
35972                                           ! 7048                              0,
35973 8E0A                        00            .byte	0
35974                                           ! 7049                         0,
35975 8E0B                        00            .byte	0
35976                                           ! 7050                              0,
35977 8E0C                        00            .byte	0
35978                                           ! 7051                                0,
35979 8E0D                        00            .byte	0
35980                                           ! 7052                        0xE0000000,
35981 8E0E                      0000            .word	0
35982 8E10                      E000            .word	$E000
35983                                           ! 7053                               0,
35984 8E12                      0000            .word	0
35985 8E14                      0000            .word	0
35986                                           ! 7054                             0,
35987 8E16                      0000            .word	0
35988                                           ! 7055                                5760,
35989 8E18                      1680            .word	$1680
35990                                           ! 7056                             0,
35991 8E1A                        00            .byte	0
35992                                           ! 7057                             0,
35993 8E1B                        00            .byte	0
35994                                           ! 7058                           8,
35995 8E1C                        08            .byte	8
35996                                           ! 7059                                16,
35997 8E1D                        10            .byte	$10
35998                                           ! 7060                             8,
35999 8E1E                        08            .byte	8
36000                                           ! 7061                                  8,
36001 8E1F                        08            .byte	8
36002                                           ! 7062                            8,
36003 8E20                        08            .byte	8
36004                                           ! 7063                                 0,
36005 8E21                        00            .byte	0
36006                                           ! 7064           
36007                                           ! 7064                  0,
36008 8E22                        00            .byte	0
36009                                           ! 7065                                 0,
36010 8E23                        00            .byte	0
36011                                           ! 7066                          0,
36012 8E24                      0000            .word	0
36013 8E26                      0000            .word	0
36014                                           ! 7067 } },
36015                                           ! 7068 { 0x0189,
36016 8E28                      0189            .word	$189
36017                                           ! 7069 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36018 8E2A                      009B            .word	$9B
36019                                           ! 7070                           0x01 | 0x02 | 0x04,
36020 8E2C                        07            .byte	7
36021                                           ! 7071                           0,
36022 8E2D                        00            .byte	0
36023                                           ! 7072                           64,
36024 8E2E                      0040            .word	$40
36025                                           ! 7073                    64,
36026 8E30                      0040            .word	$40
36027                                           ! 7074                        0xA000,
36028 8E32                      A000            .word	$A000
36029                                           ! 7075                        0x0000,
36030 8E34                      0000            .word	0
36031                                           ! 7076                       0,
36032 8E36                      0000            .word	0
36033 8E38                      0000            .word	0
36034                                           ! 7077                             7680,
36035 8E3A                      1E00            .word	$1E00
36036                                           ! 7078                        1920,
36037 8E3C                      0780            .word	$780
36038                                           ! 7079                        1200,
36039 8E3E                      04B0            .word	$4B0
36040                                           ! 7080                      8,
36041 8E40                        08            .byte	8
36042                                           ! 7081                      16,
36043 8E41                        10            .byte	$10
36044                                           ! 7082                           1,
36045 8E42                        01            .byte	1
36046                                           ! 7083                         32,
36047 8E43                        20            .byte	$20
36048                                           ! 7084                          141,
36049 8E44                        8D            .byte	$8D
36050                                           ! 7085                        0x06,
36051 8E45                        06            .byte	6
36052                                           ! 7086                     0,
36053 8E46                        00            .byte	0
36054                                           ! 7087                               0,
36055 8E47                        00            .byte	0
36056                                           ! 7088                          0,
36057 8E48                        00            .byte	0
36058                                           ! 7089                        8,
36059 8E49                        08            .byte	8
36060                                           ! 7090                             16,
36061 8E4A                        10            .byte	$10
36062                                           ! 7091                          8,
36063 8E4B                        08            .byte	8
36064                                           ! 7092                               8,
36065 8E4C                        08            .byte	8
36066                                           ! 7093                         8,
36067 8E4D                        08            .byte	8
36068                                           ! 7094                              0,
36069 8E4E                        00            .byte	0
36070                                           ! 7095                         8,
36071 8E4F                        08            .byte	8
36072                                           ! 7096                              24,
36073 8E50                        18            .byte	$18
36074                                           ! 7097                                0x02,
36075 8E51                        02            .byte	2
36076                                           ! 7098                        0xE0000000,
36077 8E52                      0000            .word	0
36078 8E54                      E000            .word	$E000
36079                                           ! 7099                               0,
36080 8E56                      0000            .word	0
36081 8E58                      0000            .word	0
36082                                           ! 7100                             0,
36083 8E5A                      0000            .word	0
36084                                           ! 7101                                7680,
36085 8E5C                      1E00            .word	$1E00
36086                                           ! 7102                             0,
36087 8E5E                        00            .byte	0
36088                                           ! 7103                             0,
36089 8E5F                        00            .byte	0
36090                                           ! 7104                           8,
36091 8E60                        08            .byte	8
36092                                           ! 7105                                16,
36093 8E61                        10            .byte	$10
36094                                           ! 7106                             8,
36095 8E62                        08            .byte	8
36096                                           ! 7107                                  8,
36097 8E63                        08            .byte	8
36098                                           ! 7108                            8,
36099 8E64                        08            .byte	8
36100                                           ! 7109                                 0,
36101 8E65                        00            .byte	0
36102                                           ! 7110                            8,
36103 8E66                        08            .byte	8
36104                                           ! 7111                                 24,
36105 8E67                        18            .byte	$18
36106                                           ! 7112                          0,
36107 8E68                      0000            .word	0
36108 8E6A                      0000            .word	0
36109                                           ! 7113 } },
36110                                           ! 7114 { 0x018a,
36111 8E6C                      018A            .word	$18A
36112                                           ! 7115 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36113 8E6E                      009B            .word	$9B
36114                                           ! 7116                           0x01 | 0x02 | 0x04,
36115 8E70                        07            .byte	7
36116                                           ! 7117                           0,
36117 8E71                        00            .byte	0
36118                                           ! 7118                           64,
36119 8E72                      0040            .word	$40
36120                                           ! 7119                    64,
36121 8E74                      0040            .word	$40
36122                                           ! 7120                        0xA000,
36123 8E76                      A000            .word	$A000
36124                                           ! 7121                        0x0000,
36125 8E78                      0000            .word	0
36126                                           ! 7122                       0,
36127 8E7A                      0000            .word	0
36128 8E7C                      0000            .word	0
36129                                           ! 7123                             5120,
36130 8E7E                      1400            .word	$1400
36131                                           ! 7124                        2560,
36132 8E80                      0A00            .word	$A00
36133                                           ! 7125                        1600,
36134 8E82                      0640            .word	$640
36135                                           ! 7126                      8,
36136 8E84                        08            .byte	8
36137                                           ! 7127                      16,
36138 8E85                        10            .byte	$10
36139                                           ! 7128                           1,
36140 8E86                        01            .byte	1
36141                                           ! 7129                         16,
36142 8E87                        10            .byte	$10
36143                                           ! 7130                          125,
36144 8E88                        7D            .byte	$7D
36145                                           ! 7131                        0x06,
36146 8E89                        06            .byte	6
36147                                           ! 7132                     0,
36148 8E8A                        00            .byte	0
36149                                           ! 7133                              
36150                                           ! 7133  1,
36151 8E8B                        01            .byte	1
36152                                           ! 7134                          0,
36153 8E8C                        00            .byte	0
36154                                           ! 7135                        5,
36155 8E8D                        05            .byte	5
36156                                           ! 7136                             11,
36157 8E8E                        0B            .byte	$B
36158                                           ! 7137                          6,
36159 8E8F                        06            .byte	6
36160                                           ! 7138                               5,
36161 8E90                        05            .byte	5
36162                                           ! 7139                         5,
36163 8E91                        05            .byte	5
36164                                           ! 7140                              0,
36165 8E92                        00            .byte	0
36166                                           ! 7141                         0,
36167 8E93                        00            .byte	0
36168                                           ! 7142                              0,
36169 8E94                        00            .byte	0
36170                                           ! 7143                                0,
36171 8E95                        00            .byte	0
36172                                           ! 7144                        0xE0000000,
36173 8E96                      0000            .word	0
36174 8E98                      E000            .word	$E000
36175                                           ! 7145                               0,
36176 8E9A                      0000            .word	0
36177 8E9C                      0000            .word	0
36178                                           ! 7146                             0,
36179 8E9E                      0000            .word	0
36180                                           ! 7147                                5120,
36181 8EA0                      1400            .word	$1400
36182                                           ! 7148                             0,
36183 8EA2                        00            .byte	0
36184                                           ! 7149                             0,
36185 8EA3                        00            .byte	0
36186                                           ! 7150                           5,
36187 8EA4                        05            .byte	5
36188                                           ! 7151                                11,
36189 8EA5                        0B            .byte	$B
36190                                           ! 7152                             6,
36191 8EA6                        06            .byte	6
36192                                           ! 7153                                  5,
36193 8EA7                        05            .byte	5
36194                                           ! 7154                            5,
36195 8EA8                        05            .byte	5
36196                                           ! 7155                                 0,
36197 8EA9                        00            .byte	0
36198                                           ! 7156                            0,
36199 8EAA                        00            .byte	0
36200                                           ! 7157                                 0,
36201 8EAB                        00            .byte	0
36202                                           ! 7158                          0,
36203 8EAC                      0000            .word	0
36204 8EAE                      0000            .word	0
36205                                           ! 7159 } },
36206                                           ! 7160 { 0x018b,
36207 8EB0                      018B            .word	$18B
36208                                           ! 7161 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36209 8EB2                      009B            .word	$9B
36210                                           ! 7162                           0x01 | 0x02 | 0x04,
36211 8EB4                        07            .byte	7
36212                                           ! 7163                           0,
36213 8EB5                        00            .byte	0
36214                                           ! 7164                           64,
36215 8EB6                      0040            .word	$40
36216                                           ! 7165                    64,
36217 8EB8                      0040            .word	$40
36218                                           ! 7166                        0xA000,
36219 8EBA                      A000            .word	$A000
36220                                           ! 7167                        0x0000,
36221 8EBC                      0000            .word	0
36222                                           ! 7168                       0,
36223 8EBE                      0000            .word	0
36224 8EC0                      0000            .word	0
36225                                           ! 7169                             7680,
36226 8EC2                      1E00            .word	$1E00
36227                                           ! 7170                        2560,
36228 8EC4                      0A00            .word	$A00
36229                                           ! 7171                        1600,
36230 8EC6                      0640            .word	$640
36231                                           ! 7172                      8,
36232 8EC8                        08            .byte	8
36233                                           ! 7173                      16,
36234 8EC9                        10            .byte	$10
36235                                           ! 7174                           1,
36236 8ECA                        01            .byte	1
36237                                           ! 7175                         24,
36238 8ECB                        18            .byte	$18
36239                                           ! 7176                          188,
36240 8ECC                        BC            .byte	$BC
36241                                           ! 7177                        0x06,
36242 8ECD                        06            .byte	6
36243                                           ! 7178                     0,
36244 8ECE                        00            .byte	0
36245                                           ! 7179                               0,
36246 8ECF                        00            .byte	0
36247                                           ! 7180                          0,
36248 8ED0                        00            .byte	0
36249                                           ! 7181                        8,
36250 8ED1                        08            .byte	8
36251                                           ! 7182                             16,
36252 8ED2                        10            .byte	$10
36253                                           ! 7183                          8,
36254 8ED3                        08            .byte	8
36255                                           ! 7184                               8,
36256 8ED4                        08            .byte	8
36257                                           ! 7185                         8,
36258 8ED5                        08            .byte	8
36259                                           ! 7186                              0,
36260 8ED6                        00            .byte	0
36261                                           ! 7187                         0,
36262 8ED7                        00            .byte	0
36263                                           ! 7188                              0,
36264 8ED8                        00            .byte	0
36265                                           ! 7189                                0,
36266 8ED9                        00            .byte	0
36267                                           ! 7190                        0xE0000000,
36268 8EDA                      0000            .word	0
36269 8EDC                      E000            .word	$E000
36270                                           ! 7191                               0,
36271 8EDE                      0000            .word	0
36272 8EE0                      0000            .word	0
36273                                           ! 7192                             0,
36274 8EE2                      0000            .word	0
36275                                           ! 7193                                7680,
36276 8EE4                      1E00            .word	$1E00
36277                                           ! 7194                             0,
36278 8EE6                        00            .byte	0
36279                                           ! 7195                             0,
36280 8EE7                        00            .byte	0
36281                                           ! 7196                           8,
36282 8EE8                        08            .byte	8
36283                                           ! 7197                                16,
36284 8EE9                        10            .byte	$10
36285                                           ! 7198                             8,
36286 8EEA                        08            .byte	8
36287                                           ! 7199                                  8,
36288 8EEB                        08            .byte	8
36289                                           ! 7200                            8,
36290 8EEC                        08            .byte	8
36291                                           ! 7201            
36292                                           ! 7201                      0,
36293 8EED                        00            .byte	0
36294                                           ! 7202                            0,
36295 8EEE                        00            .byte	0
36296                                           ! 7203                                 0,
36297 8EEF                        00            .byte	0
36298                                           ! 7204                          0,
36299 8EF0                      0000            .word	0
36300 8EF2                      0000            .word	0
36301                                           ! 7205 } },
36302                                           ! 7206 { 0x018c,
36303 8EF4                      018C            .word	$18C
36304                                           ! 7207 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36305 8EF6                      009B            .word	$9B
36306                                           ! 7208                           0x01 | 0x02 | 0x04,
36307 8EF8                        07            .byte	7
36308                                           ! 7209                           0,
36309 8EF9                        00            .byte	0
36310                                           ! 7210                           64,
36311 8EFA                      0040            .word	$40
36312                                           ! 7211                    64,
36313 8EFC                      0040            .word	$40
36314                                           ! 7212                        0xA000,
36315 8EFE                      A000            .word	$A000
36316                                           ! 7213                        0x0000,
36317 8F00                      0000            .word	0
36318                                           ! 7214                       0,
36319 8F02                      0000            .word	0
36320 8F04                      0000            .word	0
36321                                           ! 7215                             10240,
36322 8F06                      2800            .word	$2800
36323                                           ! 7216                        2560,
36324 8F08                      0A00            .word	$A00
36325                                           ! 7217                        1600,
36326 8F0A                      0640            .word	$640
36327                                           ! 7218                      8,
36328 8F0C                        08            .byte	8
36329                                           ! 7219                      16,
36330 8F0D                        10            .byte	$10
36331                                           ! 7220                           1,
36332 8F0E                        01            .byte	1
36333                                           ! 7221                         32,
36334 8F0F                        20            .byte	$20
36335                                           ! 7222                          250,
36336 8F10                        FA            .byte	$FA
36337                                           ! 7223                        0x06,
36338 8F11                        06            .byte	6
36339                                           ! 7224                     0,
36340 8F12                        00            .byte	0
36341                                           ! 7225                               0,
36342 8F13                        00            .byte	0
36343                                           ! 7226                          0,
36344 8F14                        00            .byte	0
36345                                           ! 7227                        8,
36346 8F15                        08            .byte	8
36347                                           ! 7228                             16,
36348 8F16                        10            .byte	$10
36349                                           ! 7229                          8,
36350 8F17                        08            .byte	8
36351                                           ! 7230                               8,
36352 8F18                        08            .byte	8
36353                                           ! 7231                         8,
36354 8F19                        08            .byte	8
36355                                           ! 7232                              0,
36356 8F1A                        00            .byte	0
36357                                           ! 7233                         8,
36358 8F1B                        08            .byte	8
36359                                           ! 7234                              24,
36360 8F1C                        18            .byte	$18
36361                                           ! 7235                                0x02,
36362 8F1D                        02            .byte	2
36363                                           ! 7236                        0xE0000000,
36364 8F1E                      0000            .word	0
36365 8F20                      E000            .word	$E000
36366                                           ! 7237                               0,
36367 8F22                      0000            .word	0
36368 8F24                      0000            .word	0
36369                                           ! 7238                             0,
36370 8F26                      0000            .word	0
36371                                           ! 7239                                10240,
36372 8F28                      2800            .word	$2800
36373                                           ! 7240                             0,
36374 8F2A                        00            .byte	0
36375                                           ! 7241                             0,
36376 8F2B                        00            .byte	0
36377                                           ! 7242                           8,
36378 8F2C                        08            .byte	8
36379                                           ! 7243                                16,
36380 8F2D                        10            .byte	$10
36381                                           ! 7244                             8,
36382 8F2E                        08            .byte	8
36383                                           ! 7245                                  8,
36384 8F2F                        08            .byte	8
36385                                           ! 7246                            8,
36386 8F30                        08            .byte	8
36387                                           ! 7247                                 0,
36388 8F31                        00            .byte	0
36389                                           ! 7248                            8,
36390 8F32                        08            .byte	8
36391                                           ! 7249                                 24,
36392 8F33                        18            .byte	$18
36393                                           ! 7250                          0,
36394 8F34                      0000            .word	0
36395 8F36                      0000            .word	0
36396                                           ! 7251 } },
36397                                           ! 7252 { 0xFFFF,
36398 8F38                      FFFF            .word	$FFFF
36399                                           ! 7253 { 0,
36400 8F3A                      0000            .word	0
36401                                           ! 7254 } },
36402 8F3C                  00000040            .blkb	$40
36403                                           ! 7255 };
36404                                           !BCC_EOS
36405                                           ! 7256 extern char vbebios_copyright;
36406                                           !BCC_EOS
36407                                           ! 7257 extern char vbebios_vendor_name;
36408                                           !BCC_EOS
36409                                           ! 7258 extern char vbebios_product_name;
36410                                           !BCC_EOS
36411                                           ! 7259 extern char vbebios_product_revision;
36412                                           !BCC_EOS
36413                                           ! 7260 #asm
36414                                           !BCC_ASM
36415                       00008F7C            _vbebios_copyright:
36416 8F7C                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
36417 8FC1                        00            .byte 0x00
36418                       00008FC2            _vbebios_vendor_name:
36419 8FC2                        42            .ascii "Bochs/Plex86 Developers"
36420 8FD9                        00            .byte 0x00
36421                       00008FDA            _vbebios_product_name:
36422 8FDA                        42            .ascii "Bochs/Plex86 VBE Adapter"
36423 8FF2                        00            .byte 0x00
36424                       00008FF3            _vbebios_product_revision:
36425 8FF3                        24            .ascii "$Id: vbe.c,v 1.60 2008/03/02 07:47:21 vruppert Exp $"
36426 9027                        00            .byte 0x00
36427                       00009028            _vbebios_info_string:
36428 9028                        42            .ascii "Bochs VBE Display Adapter enabled"
36429 9049                        0A            .byte 0x0a,0x0d
36430 904B                        0A            .byte 0x0a,0x0d
36431 904D                        00            .byte 0x00
36432                       0000904E            _no_vbebios_info_string:
36433 904E                        4E            .ascii "NO Bochs VBE Support available!"
36434 906D                        0A            .byte 0x0a,0x0d
36435 906F                        0A            .byte 0x0a,0x0d
36436 9071                        00            .byte 0x00
36437                       00009072            msg_vbe_init:
36438 9072                        56            .ascii "VBE Bios $Id: vbe.c,v 1.60 2008/03/02 07:47:21 vruppert Exp $"
36439 90AF                        0A            .byte 0x0a,0x0d, 0x00
36440 90B2                  00000002              .align 2
36441                       000090B2            vesa_pm_start:
36442 90B2                      0014              dw vesa_pm_set_window - vesa_pm_start
36443 90B4                      004B              dw vesa_pm_set_display_start - vesa_pm_start
36444 90B6                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
36445 90B8                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
36446                       000090BA            vesa_pm_io_ports_table:
36447 90BA                      01CE              dw 0x01CE
36448 90BC                      01CF              dw 0x01CE + 1
36449 90BE                      01CF              dw 0x01CF
36450 90C0                      01D0              dw 0x01CF + 1
36451 90C2                      FFFF              dw 0xffff
36452 90C4                      FFFF              dw 0xffff
36453                                             USE32
36454                       000090C6            vesa_pm_set_window:
36455 90C6     66    83FB                   00    cmp bx, #0x00
36456 90CA           74           05              je vesa_pm_set_display_window1
36457 90CC     66    B8                   0100    mov ax, #0x0100
36458 90D0           C3                           ret
36459                       000090D1            vesa_pm_set_display_window1:
36460 90D1     66    89D0                         mov ax, dx
36461 90D4     66    52                           push dx
36462 90D6     66    50                           push ax
36463 90D8     66    BA                   01CE    mov dx, # 0x01CE
36464 90DC     66    B8                   0005    mov ax, # 0x5
36465 90E0     66    EF                           out dx, ax
36466 90E2     66    58                           pop ax
36467 90E4     66    BA                   01CF    mov dx, # 0x01CF
36468 90E8     66    EF                           out dx, ax
36469 90EA     66    ED                           in ax, dx
36470 90EC     66    5A                           pop dx
36471 90EE     66    39C2                         cmp dx, ax
36472 90F1           75           05              jne illegal_window
36473 90F3     66    B8                   004F    mov ax, #0x004f
36474 90F7           C3                           ret
36475                       000090F8            illegal_window:
36476 90F8     66    B8                   014F    mov ax, #0x014f
36477 90FC           C3                           ret
36478                       000090FD            vesa_pm_set_display_start:
36479 90FD           80FB                   80    cmp bl, #0x80
36480 9100           74           0A              je vesa_pm_set_display_start1
36481 9102           80FB                   00    cmp bl, #0x00
36482 9105           74           05              je vesa_pm_set_display_start1
36483 9107     66    B8                   0100    mov ax, #0x0100
36484 910B           C3                           ret
36485                       0000910C            vesa_pm_set_display_start1:
36486                                           ; convert offset to (X, Y) coordinate
36487                                           ; (would be simpler to change Bochs 1 API...)
36488 910C           50                           push eax
36489 910D           51                           push ecx
36490 910E           52                           push edx
36491 910F           56                           push esi
36492 9110           57                           push edi
36493 9111           C1E2                   10    shl edx, #16
36494 9114           81E1             0000FFFF    and ecx, #0xffff
36495 911A           09D1                         or ecx, edx
36496 911C           C1E1                   02    shl ecx, #2
36497 911F           89C8                         mov eax, ecx
36498 9121           50                           push eax
36499 9122     66    BA                   01CE    mov dx, # 0x01CE
36500 9126     66    B8                   0006    mov ax, # 0x6
36501 912A     66    EF                           out dx, ax
36502 912C     66    BA                   01CF    mov dx, # 0x01CF
36503 9130     66    ED                           in ax, dx
36504 9132         0FB7C8                         movzx ecx, ax
36505 9135     66    BA                   01CE    mov dx, # 0x01CE
36506 9139     66    B8                   0003    mov ax, # 0x3
36507 913D     66    EF                           out dx, ax
36508 913F     66    BA                   01CF    mov dx, # 0x01CF
36509 9143     66    ED                           in ax, dx
36510 9145         0FB7F0                         movzx esi, ax
36511 9148           58                           pop eax
36512 9149           83FE                   04    cmp esi, #4
36513 914C           74           17              jz bpp4_mode
36514 914E           83C6                   07    add esi, #7
36515 9151           C1EE                   03    shr esi, #3
36516 9154         0FAFCE                         imul ecx, esi
36517 9157           31D2                         xor edx, edx
36518 9159           F7F1                         div ecx
36519 915B           89C7                         mov edi, eax
36520 915D           89D0                         mov eax, edx
36521 915F           31D2                         xor edx, edx
36522 9161           F7F6                         div esi
36523 9163           EB           0C              jmp set_xy_regs
36524                       00009165            bpp4_mode:
36525 9165           D1E9                         shr ecx, #1
36526 9167           31D2                         xor edx, edx
36527 9169           F7F1                         div ecx
36528 916B           89C7                         mov edi, eax
36529 916D           89D0                         mov eax, edx
36530 916F           D1E0                         shl eax, #1
36531                       00009171            set_xy_regs:
36532 9171     66    52                           push dx
36533 9173     66    50                           push ax
36534 9175     66    BA                   01CE    mov dx, # 0x01CE
36535 9179     66    B8                   0008    mov ax, # 0x8
36536 917D     66    EF                           out dx, ax
36537 917F     66    58                           pop ax
36538 9181     66    BA                   01CF    mov dx, # 0x01CF
36539 9185     66    EF                           out dx, ax
36540 9187     66    5A                           pop dx
36541 9189     66    89F8                         mov ax, di
36542 918C     66    52                           push dx
36543 918E     66    50                           push ax
36544 9190     66    BA                   01CE    mov dx, # 0x01CE
36545 9194     66    B8                   0009    mov ax, # 0x9
36546 9198     66    EF                           out dx, ax
36547 919A     66    58                           pop ax
36548 919C     66    BA                   01CF    mov dx, # 0x01CF
36549 91A0     66    EF                           out dx, ax
36550 91A2     66    5A                           pop dx
36551 91A4           5F                           pop edi
36552 91A5           5E                           pop esi
36553 91A6           5A                           pop edx
36554 91A7           59                           pop ecx
36555 91A8           58                           pop eax
36556 91A9     66    B8                   004F    mov ax, #0x004f
36557 91AD           C3                           ret
36558                       000091AE            vesa_pm_unimplemented:
36559 91AE     66    B8                   014F    mov ax, #0x014f
36560 91B2           C3                           ret
36561                                             USE16
36562                       000091B3            vesa_pm_end:
36563                                           ; DISPI ioport functions
36564                       000091B3            dispi_get_id:
36565 91B3           52                           push dx
36566 91B4           BA                   01CE    mov dx, # 0x01CE
36567 91B7           B8                   0000    mov ax, # 0x0
36568 91BA           EF                           out dx, ax
36569 91BB           BA                   01CF    mov dx, # 0x01CF
36570 91BE           ED                           in ax, dx
36571 91BF           5A                           pop dx
36572 91C0           C3                           ret
36573                       000091C1            dispi_set_id:
36574 91C1           52                           push dx
36575 91C2           50                           push ax
36576 91C3           BA                   01CE    mov dx, # 0x01CE
36577 91C6           B8                   0000    mov ax, # 0x0
36578 91C9           EF                           out dx, ax
36579 91CA           58                           pop ax
36580 91CB           BA                   01CF    mov dx, # 0x01CF
36581 91CE           EF                           out dx, ax
36582 91CF           5A                           pop dx
36583 91D0           C3                           ret
36584                                           ! 7430 endasm
36585                                           !BCC_ENDASM
36586                                           ! 7431 static void dispi_set_xres(xres)
36587                                           ! 7432   Bit16u xres;
36588                                           
36589                       000091D1            _dispi_set_xres:
36590                                           !BCC_EOS
36591                                           ! 7433 {
36592                                           ! 7434 #asm
36593                                           !BCC_ASM
36594                       00000002            _dispi_set_xres.xres	set	2
36595 91D1           55                           push bp
36596 91D2           89E5                         mov bp, sp
36597 91D4           50                           push ax
36598 91D5           52                           push dx
36599 91D6           BA                   01CE    mov dx, # 0x01CE
36600 91D9           B8                   0001    mov ax, # 0x1
36601 91DC           EF                           out dx, ax
36602 91DD           BA                   01CF    mov dx, # 0x01CF
36603 91E0           8B46         04              mov ax, 4[bp] ; xres
36604 91E3           EF                           out dx, ax
36605 91E4           5A                           pop dx
36606 91E5           58                           pop ax
36607 91E6           5D                           pop bp
36608                                           ! 7448 endasm
36609                                           !BCC_ENDASM
36610                                           ! 7449 }
36611 91E7           C3                         ret
36612                                           ! 7450 static void dispi_set_yres(yres)
36613                                           ! 7451   Bit16u yres;
36614                       000091E8            _dispi_set_yres:
36615                                           !BCC_EOS
36616                                           ! 7452 {
36617                                           ! 7453   outw(0x01CE,0x2);
36618 91E8           55                         push	bp
36619 91E9           89E5                       mov	bp,sp
36620                                           ! Debug: list int = const 2 (used reg = )
36621 91EB           B8                   0002  mov	ax,*2
36622 91EE           50                         push	ax
36623                                           ! Debug: list int = const $1CE (used reg = )
36624 91EF           B8                   01CE  mov	ax,#$1CE
36625 91F2           50                         push	ax
36626                                           ! Debug: func () void = outw+0 (used reg = )
36627 91F3           E8         EBA2            call	_outw
36628 91F6           89EC                       mov	sp,bp
36629                                           !BCC_EOS
36630                                           ! 7454   outw(0x01CF,yres);
36631                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
36632 91F8           FF76         04            push	4[bp]
36633                                           ! Debug: list int = const $1CF (used reg = )
36634 91FB           B8                   01CF  mov	ax,#$1CF
36635 91FE           50                         push	ax
36636                                           ! Debug: func () void = outw+0 (used reg = )
36637 91FF           E8         EB96            call	_outw
36638 9202           89EC                       mov	sp,bp
36639                                           !BCC_EOS
36640                                           ! 7455 }
36641 9204           5D                         pop	bp
36642 9205           C3                         ret
36643                                           ! 7456 static void dispi_set_bpp(bpp)
36644                                           ! 7457   Bit16u bpp;
36645                       00009206            _dispi_set_bpp:
36646                                           !BCC_EOS
36647                                           ! 7458 {
36648                                           ! 7459   outw(0x01CE,0x3);
36649 9206           55                         push	bp
36650 9207           89E5                       mov	bp,sp
36651                                           ! Debug: list int = const 3 (used reg = )
36652 9209           B8                   0003  mov	ax,*3
36653 920C           50                         push	ax
36654                                           ! Debug: list int = const $1CE (used reg = )
36655 920D           B8                   01CE  mov	ax,#$1CE
36656 9210           50                         push	ax
36657                                           ! Debug: func () void = outw+0 (used reg = )
36658 9211           E8         EB84            call	_outw
36659 9214           89EC                       mov	sp,bp
36660                                           !BCC_EOS
36661                                           ! 7460   outw(0x01CF,bpp);
36662                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
36663 9216           FF76         04            push	4[bp]
36664                                           ! Debug: list int = const $1CF (used reg = )
36665 9219           B8                   01CF  mov	ax,#$1CF
36666 921C           50                         push	ax
36667                                           ! Debug: func () void = outw+0 (used reg = )
36668 921D           E8         EB78            call	_outw
36669 9220           89EC                       mov	sp,bp
36670                                           !BCC_EOS
36671                                           ! 7461 }
36672 9222           5D                         pop	bp
36673 9223           C3                         ret
36674                                           ! 7462 #asm
36675                                           !BCC_ASM
36676                       00000002            _dispi_set_bpp.bpp	set	2
36677                                           ; AL = bits per pixel / AH = bytes per pixel
36678                       00009224            dispi_get_bpp:
36679 9224           52                           push dx
36680 9225           BA                   01CE    mov dx, # 0x01CE
36681 9228           B8                   0003    mov ax, # 0x3
36682 922B           EF                           out dx, ax
36683 922C           BA                   01CF    mov dx, # 0x01CF
36684 922F           ED                           in ax, dx
36685 9230           88C4                         mov ah, al
36686 9232           C0EC                   03    shr ah, 3
36687 9235           A8                     07    test al, #0x07
36688 9237           74           02              jz get_bpp_noinc
36689 9239           FEC4                         inc ah
36690                       0000923B            get_bpp_noinc:
36691 923B           5A                           pop dx
36692 923C           C3                           ret
36693                                           ; get display capabilities
36694                       0000923D            _dispi_get_max_xres:
36695 923D           52                           push dx
36696 923E           53                           push bx
36697 923F           E8         004F              call dispi_get_enable
36698 9242           89C3                         mov bx, ax
36699 9244           0D                   0002    or ax, # 0x02
36700 9247           E8         0037              call _dispi_set_enable
36701 924A           BA                   01CE    mov dx, # 0x01CE
36702 924D           B8                   0001    mov ax, # 0x1
36703 9250           EF                           out dx, ax
36704 9251           BA                   01CF    mov dx, # 0x01CF
36705 9254           ED                           in ax, dx
36706 9255           50                           push ax
36707 9256           89D8                         mov ax, bx
36708 9258           E8         0026              call _dispi_set_enable
36709 925B           58                           pop ax
36710 925C           5B                           pop bx
36711 925D           5A                           pop dx
36712 925E           C3                           ret
36713                       0000925F            _dispi_get_max_bpp:
36714 925F           52                           push dx
36715 9260           53                           push bx
36716 9261           E8         002D              call dispi_get_enable
36717 9264           89C3                         mov bx, ax
36718 9266           0D                   0002    or ax, # 0x02
36719 9269           E8         0015              call _dispi_set_enable
36720 926C           BA                   01CE    mov dx, # 0x01CE
36721 926F           B8                   0003    mov ax, # 0x3
36722 9272           EF                           out dx, ax
36723 9273           BA                   01CF    mov dx, # 0x01CF
36724 9276           ED                           in ax, dx
36725 9277           50                           push ax
36726 9278           89D8                         mov ax, bx
36727 927A           E8         0004              call _dispi_set_enable
36728 927D           58                           pop ax
36729 927E           5B                           pop bx
36730 927F           5A                           pop dx
36731 9280           C3                           ret
36732                       00009281            _dispi_set_enable:
36733 9281           52                           push dx
36734 9282           50                           push ax
36735 9283           BA                   01CE    mov dx, # 0x01CE
36736 9286           B8                   0004    mov ax, # 0x4
36737 9289           EF                           out dx, ax
36738 928A           58                           pop ax
36739 928B           BA                   01CF    mov dx, # 0x01CF
36740 928E           EF                           out dx, ax
36741 928F           5A                           pop dx
36742 9290           C3                           ret
36743                       00009291            dispi_get_enable:
36744 9291           52                           push dx
36745 9292           BA                   01CE    mov dx, # 0x01CE
36746 9295           B8                   0004    mov ax, # 0x4
36747 9298           EF                           out dx, ax
36748 9299           BA                   01CF    mov dx, # 0x01CF
36749 929C           ED                           in ax, dx
36750 929D           5A                           pop dx
36751 929E           C3                           ret
36752                       0000929F            _dispi_set_bank:
36753 929F           52                           push dx
36754 92A0           50                           push ax
36755 92A1           BA                   01CE    mov dx, # 0x01CE
36756 92A4           B8                   0005    mov ax, # 0x5
36757 92A7           EF                           out dx, ax
36758 92A8           58                           pop ax
36759 92A9           BA                   01CF    mov dx, # 0x01CF
36760 92AC           EF                           out dx, ax
36761 92AD           5A                           pop dx
36762 92AE           C3                           ret
36763                       000092AF            dispi_get_bank:
36764 92AF           52                           push dx
36765 92B0           BA                   01CE    mov dx, # 0x01CE
36766 92B3           B8                   0005    mov ax, # 0x5
36767 92B6           EF                           out dx, ax
36768 92B7           BA                   01CF    mov dx, # 0x01CF
36769 92BA           ED                           in ax, dx
36770 92BB           5A                           pop dx
36771 92BC           C3                           ret
36772                                           ! 7558 endasm
36773                                           !BCC_ENDASM
36774                                           ! 7559 static void dispi_set_bank_farcall()
36775                                           ! 7560 {
36776                       000092BD            _dispi_set_bank_farcall:
36777                                           ! 7561 #asm
36778                                           !BCC_ASM
36779 92BD           81FB                 0100    cmp bx,#0x0100
36780 92C1           74           1E              je dispi_set_bank_farcall_get
36781 92C3           09DB                         or bx,bx
36782 92C5           75           28              jnz dispi_set_bank_farcall_error
36783 92C7           89D0                         mov ax,dx
36784 92C9           52                           push dx
36785 92CA           50                           push ax
36786 92CB           B8                   0005    mov ax,# 0x5
36787 92CE           BA                   01CE    mov dx,# 0x01CE
36788 92D1           EF                           out dx,ax
36789 92D2           58                           pop ax
36790 92D3           BA                   01CF    mov dx,# 0x01CF
36791 92D6           EF                           out dx,ax
36792 92D7           ED                           in ax,dx
36793 92D8           5A                           pop dx
36794 92D9           39C2                         cmp dx,ax
36795 92DB           75           12              jne dispi_set_bank_farcall_error
36796 92DD           B8                   004F    mov ax, #0x004f
36797 92E0           CB                           retf
36798                       000092E1            dispi_set_bank_farcall_get:
36799 92E1           B8                   0005    mov ax,# 0x5
36800 92E4           BA                   01CE    mov dx,# 0x01CE
36801 92E7           EF                           out dx,ax
36802 92E8           BA                   01CF    mov dx,# 0x01CF
36803 92EB           ED                           in ax,dx
36804 92EC           89C2                         mov dx,ax
36805 92EE           CB                           retf
36806                       000092EF            dispi_set_bank_farcall_error:
36807 92EF           B8                   014F    mov ax,#0x014F
36808 92F2           CB                           retf
36809                                           ! 7592 endasm
36810                                           !BCC_ENDASM
36811                                           ! 7593 }
36812 92F3           C3                         ret
36813                                           ! 7594 #asm
36814                                           !BCC_ASM
36815                       000092F4            dispi_set_x_offset:
36816 92F4           52                           push dx
36817 92F5           50                           push ax
36818 92F6           BA                   01CE    mov dx, # 0x01CE
36819 92F9           B8                   0008    mov ax, # 0x8
36820 92FC           EF                           out dx, ax
36821 92FD           58                           pop ax
36822 92FE           BA                   01CF    mov dx, # 0x01CF
36823 9301           EF                           out dx, ax
36824 9302           5A                           pop dx
36825 9303           C3                           ret
36826                       00009304            dispi_get_x_offset:
36827 9304           52                           push dx
36828 9305           BA                   01CE    mov dx, # 0x01CE
36829 9308           B8                   0008    mov ax, # 0x8
36830 930B           EF                           out dx, ax
36831 930C           BA                   01CF    mov dx, # 0x01CF
36832 930F           ED                           in ax, dx
36833 9310           5A                           pop dx
36834 9311           C3                           ret
36835                       00009312            dispi_set_y_offset:
36836 9312           52                           push dx
36837 9313           50                           push ax
36838 9314           BA                   01CE    mov dx, # 0x01CE
36839 9317           B8                   0009    mov ax, # 0x9
36840 931A           EF                           out dx, ax
36841 931B           58                           pop ax
36842 931C           BA                   01CF    mov dx, # 0x01CF
36843 931F           EF                           out dx, ax
36844 9320           5A                           pop dx
36845 9321           C3                           ret
36846                       00009322            dispi_get_y_offset:
36847 9322           52                           push dx
36848 9323           BA                   01CE    mov dx, # 0x01CE
36849 9326           B8                   0009    mov ax, # 0x9
36850 9329           EF                           out dx, ax
36851 932A           BA                   01CF    mov dx, # 0x01CF
36852 932D           ED                           in ax, dx
36853 932E           5A                           pop dx
36854 932F           C3                           ret
36855                       00009330            vga_set_virt_width:
36856 9330           50                           push ax
36857 9331           53                           push bx
36858 9332           52                           push dx
36859 9333           89C3                         mov bx, ax
36860 9335           E8         FEEC              call dispi_get_bpp
36861 9338           3C                     04    cmp al, #0x04
36862 933A           77           02              ja set_width_svga
36863 933C           D1EB                         shr bx, #1
36864                       0000933E            set_width_svga:
36865 933E           C1EB                   03    shr bx, #3
36866 9341           BA                   03D4    mov dx, # 0x3d4
36867 9344           88DC                         mov ah, bl
36868 9346           B0                     13    mov al, #0x13
36869 9348           EF                           out dx, ax
36870 9349           5A                           pop dx
36871 934A           5B                           pop bx
36872 934B           58                           pop ax
36873 934C           C3                           ret
36874                       0000934D            dispi_set_virt_width:
36875 934D           E8         FFE0              call vga_set_virt_width
36876 9350           52                           push dx
36877 9351           50                           push ax
36878 9352           BA                   01CE    mov dx, # 0x01CE
36879 9355           B8                   0006    mov ax, # 0x6
36880 9358           EF                           out dx, ax
36881 9359           58                           pop ax
36882 935A           BA                   01CF    mov dx, # 0x01CF
36883 935D           EF                           out dx, ax
36884 935E           5A                           pop dx
36885 935F           C3                           ret
36886                       00009360            dispi_get_virt_width:
36887 9360           52                           push dx
36888 9361           BA                   01CE    mov dx, # 0x01CE
36889 9364           B8                   0006    mov ax, # 0x6
36890 9367           EF                           out dx, ax
36891 9368           BA                   01CF    mov dx, # 0x01CF
36892 936B           ED                           in ax, dx
36893 936C           5A                           pop dx
36894 936D           C3                           ret
36895                       0000936E            dispi_get_virt_height:
36896 936E           52                           push dx
36897 936F           BA                   01CE    mov dx, # 0x01CE
36898 9372           B8                   0007    mov ax, # 0x7
36899 9375           EF                           out dx, ax
36900 9376           BA                   01CF    mov dx, # 0x01CF
36901 9379           ED                           in ax, dx
36902 937A           5A                           pop dx
36903 937B           C3                           ret
36904                       0000937C            _vga_compat_setup:
36905 937C           50                           push ax
36906 937D           52                           push dx
36907                                             ; set CRT X resolution
36908 937E           BA                   01CE    mov dx, # 0x01CE
36909 9381           B8                   0001    mov ax, # 0x1
36910 9384           EF                           out dx, ax
36911 9385           BA                   01CF    mov dx, # 0x01CF
36912 9388           ED                           in ax, dx
36913 9389           50                           push ax
36914 938A           BA                   03D4    mov dx, # 0x3d4
36915 938D           B8                   0011    mov ax, #0x0011
36916 9390           EF                           out dx, ax
36917 9391           58                           pop ax
36918 9392           50                           push ax
36919 9393           C1E8                   03    shr ax, #3
36920 9396           48                           dec ax
36921 9397           88C4                         mov ah, al
36922 9399           B0                     01    mov al, #0x01
36923 939B           EF                           out dx, ax
36924 939C           58                           pop ax
36925 939D           E8         FF90              call vga_set_virt_width
36926                                             ; set CRT Y resolution
36927 93A0           BA                   01CE    mov dx, # 0x01CE
36928 93A3           B8                   0002    mov ax, # 0x2
36929 93A6           EF                           out dx, ax
36930 93A7           BA                   01CF    mov dx, # 0x01CF
36931 93AA           ED                           in ax, dx
36932 93AB           48                           dec ax
36933 93AC           50                           push ax
36934 93AD           BA                   03D4    mov dx, # 0x3d4
36935 93B0           88C4                         mov ah, al
36936 93B2           B0                     12    mov al, #0x12
36937 93B4           EF                           out dx, ax
36938 93B5           58                           pop ax
36939 93B6           B0                     07    mov al, #0x07
36940 93B8           EE                           out dx, al
36941 93B9           42                           inc dx
36942 93BA           EC                           in al, dx
36943 93BB           24                     BD    and al, #0xbd
36944 93BD           F6C4                   01    test ah, #0x01
36945 93C0           74           02              jz bit8_clear
36946 93C2           0C                     02    or al, #0x02
36947                       000093C4            bit8_clear:
36948 93C4           F6C4                   02    test ah, #0x02
36949 93C7           74           02              jz bit9_clear
36950 93C9           0C                     40    or al, #0x40
36951                       000093CB            bit9_clear:
36952 93CB           EE                           out dx, al
36953                                             ; other settings
36954 93CC           BA                   03D4    mov dx, # 0x3d4
36955 93CF           B8                   0009    mov ax, #0x0009
36956 93D2           EF                           out dx, ax
36957 93D3           B0                     17    mov al, #0x17
36958 93D5           EE                           out dx, al
36959 93D6           BA                   03D5    mov dx, # 0x3d5
36960 93D9           EC                           in al, dx
36961 93DA           0C                     03    or al, #0x03
36962 93DC           EE                           out dx, al
36963 93DD           BA                   03DA    mov dx, # 0x3da
36964 93E0           EC                           in al, dx
36965 93E1           BA                   03C0    mov dx, # 0x3c0
36966 93E4           B0                     10    mov al, #0x10
36967 93E6           EE                           out dx, al
36968 93E7           BA                   03C1    mov dx, # 0x3c1
36969 93EA           EC                           in al, dx
36970 93EB           0C                     01    or al, #0x01
36971 93ED           BA                   03C0    mov dx, # 0x3c0
36972 93F0           EE                           out dx, al
36973 93F1           B0                     20    mov al, #0x20
36974 93F3           EE                           out dx, al
36975 93F4           BA                   03CE    mov dx, # 0x3ce
36976 93F7           B8                   0506    mov ax, #0x0506
36977 93FA           EF                           out dx, ax
36978 93FB           BA                   03C4    mov dx, # 0x3c4
36979 93FE           B8                   0F02    mov ax, #0x0f02
36980 9401           EF                           out dx, ax
36981                                             ; settings for >= 8bpp
36982 9402           BA                   01CE    mov dx, # 0x01CE
36983 9405           B8                   0003    mov ax, # 0x3
36984 9408           EF                           out dx, ax
36985 9409           BA                   01CF    mov dx, # 0x01CF
36986 940C           ED                           in ax, dx
36987 940D           3C                     08    cmp al, #0x08
36988 940F           72           40              jb vga_compat_end
36989 9411           BA                   03D4    mov dx, # 0x3d4
36990 9414           B0                     14    mov al, #0x14
36991 9416           EE                           out dx, al
36992 9417           BA                   03D5    mov dx, # 0x3d5
36993 941A           EC                           in al, dx
36994 941B           0C                     40    or al, #0x40
36995 941D           EE                           out dx, al
36996 941E           BA                   03DA    mov dx, # 0x3da
36997 9421           EC                           in al, dx
36998 9422           BA                   03C0    mov dx, # 0x3c0
36999 9425           B0                     10    mov al, #0x10
37000 9427           EE                           out dx, al
37001 9428           BA                   03C1    mov dx, # 0x3c1
37002 942B           EC                           in al, dx
37003 942C           0C                     40    or al, #0x40
37004 942E           BA                   03C0    mov dx, # 0x3c0
37005 9431           EE                           out dx, al
37006 9432           B0                     20    mov al, #0x20
37007 9434           EE                           out dx, al
37008 9435           BA                   03C4    mov dx, # 0x3c4
37009 9438           B0                     04    mov al, #0x04
37010 943A           EE                           out dx, al
37011 943B           BA                   03C5    mov dx, # 0x3c5
37012 943E           EC                           in al, dx
37013 943F           0C                     08    or al, #0x08
37014 9441           EE                           out dx, al
37015 9442           BA                   03CE    mov dx, # 0x3ce
37016 9445           B0                     05    mov al, #0x05
37017 9447           EE                           out dx, al
37018 9448           BA                   03CF    mov dx, # 0x3cf
37019 944B           EC                           in al, dx
37020 944C           24                     9F    and al, #0x9f
37021 944E           0C                     40    or al, #0x40
37022 9450           EE                           out dx, al
37023                       00009451            vga_compat_end:
37024 9451           5A                           pop dx
37025 9452           58                           pop ax
37026                                           ! 7806 endasm
37027                                           !BCC_ENDASM
37028                                           ! 7807 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
37029                                           ! 7808   Bit16u mode; Boolean using_lfb;
37030                       00009453            _mode_info_find_mode:
37031                                           !BCC_EOS
37032                                           !BCC_EOS
37033                                           ! 7809 {
37034                                           ! 7810   ModeInfoListItem *cur_info=&mode_info_list;
37035 9453           55                         push	bp
37036 9454           89E5                       mov	bp,sp
37037 9456           4C                         dec	sp
37038 9457           4C                         dec	sp
37039                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37040 9458           BB                   7F04  mov	bx,#_mode_info_list
37041 945B           895E         FE            mov	-2[bp],bx
37042                                           !BCC_EOS
37043                                           ! 7811   while (cur_info->mode != 0xFFFF)
37044                                           ! 7812   {
37045 945E           EB           43            jmp .2CC
37046                       00009460            .2CD:
37047                                           ! 7813     if (cur_info->mode == mode)
37048 9460           8B5E         FE            mov	bx,-2[bp]
37049                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
37050 9463           8B1F                       mov	bx,[bx]
37051 9465           3B5E         04            cmp	bx,4[bp]
37052 9468           75           30            jne 	.2CE
37053                       0000946A            .2CF:
37054                                           ! 7814     {
37055                                           ! 7815       if (!using_lfb)
37056 946A           8B46         06            mov	ax,6[bp]
37057 946D           85C0                       test	ax,ax
37058 946F           75           09            jne 	.2D0
37059                       00009471            .2D1:
37060                                           ! 7816       {
37061                                           ! 7817         return cur_info;
37062 9471           8B46         FE            mov	ax,-2[bp]
37063 9474           89EC                       mov	sp,bp
37064 9476           5D                         pop	bp
37065 9477           C3                         ret
37066                                           !BCC_EOS
37067                                           ! 7818       }
37068                                           ! 7818 
37069                                           ! 7819       else if (cur_info->info.ModeAttributes & 0x0080)
37070 9478           EB           1E            jmp .2D2
37071                       0000947A            .2D0:
37072 947A           8B5E         FE            mov	bx,-2[bp]
37073                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
37074 947D           8A47         02            mov	al,2[bx]
37075 9480           24                     80  and	al,#$80
37076 9482           84C0                       test	al,al
37077 9484           74           09            je  	.2D3
37078                       00009486            .2D4:
37079                                           ! 7820       {
37080                                           ! 7821         return cur_info;
37081 9486           8B46         FE            mov	ax,-2[bp]
37082 9489           89EC                       mov	sp,bp
37083 948B           5D                         pop	bp
37084 948C           C3                         ret
37085                                           !BCC_EOS
37086                                           ! 7822       }
37087                                           ! 7823       else
37088                                           ! 7824       {
37089 948D           EB           09            jmp .2D5
37090                       0000948F            .2D3:
37091                                           ! 7825         cur_info++;
37092                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37093 948F           8B5E         FE            mov	bx,-2[bp]
37094 9492           83C3                   44  add	bx,*$44
37095 9495           895E         FE            mov	-2[bp],bx
37096                                           !BCC_EOS
37097                                           ! 7826       }
37098                                           ! 7827     }
37099                       00009498            .2D5:
37100                       00009498            .2D2:
37101                                           ! 7828     else
37102                                           ! 7829     {
37103 9498           EB           09            jmp .2D6
37104                       0000949A            .2CE:
37105                                           ! 7830       cur_info++;
37106                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37107 949A           8B5E         FE            mov	bx,-2[bp]
37108 949D           83C3                   44  add	bx,*$44
37109 94A0           895E         FE            mov	-2[bp],bx
37110                                           !BCC_EOS
37111                                           ! 7831     }
37112                                           ! 7832   }
37113                       000094A3            .2D6:
37114                                           ! 7833   return 0;
37115                       000094A3            .2CC:
37116 94A3           8B5E         FE            mov	bx,-2[bp]
37117                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37118 94A6           8B1F                       mov	bx,[bx]
37119 94A8           81FB                 FFFF  cmp	bx,#$FFFF
37120 94AC           75           B2            jne	.2CD
37121                       000094AE            .2D7:
37122                       000094AE            .2CB:
37123 94AE           31C0                       xor	ax,ax
37124 94B0           89EC                       mov	sp,bp
37125 94B2           5D                         pop	bp
37126 94B3           C3                         ret
37127                                           !BCC_EOS
37128                                           ! 7834 }
37129                                           ! 7835 #asm
37130                                           !BCC_ASM
37131                       00000004            _mode_info_find_mode.using_lfb	set	4
37132                       00000002            _mode_info_find_mode.mode	set	2
37133                                           ; Has 1 display - Returns true if 1 display detected
37134                       000094B4            _vbe_has_vbe_display:
37135 94B4           1E                           push ds
37136 94B5           53                           push bx
37137 94B6           B8                   0040    mov ax, # 0x40
37138 94B9           8ED8                         mov ds, ax
37139 94BB           BB                   00B9    mov bx, # 0xB9
37140 94BE           8A07                         mov al, [bx]
37141 94C0           24                     01    and al, #0x01
37142 94C2           30E4                         xor ah, ah
37143 94C4           5B                           pop bx
37144 94C5           1F                           pop ds
37145 94C6           C3                           ret
37146                                           ; 1 Init - Initialise the Vesa Bios Extension Code
37147                                           ; This function does a sanity check on the host side display code interface.
37148                       000094C7            vbe_init:
37149 94C7           B8                   B0C0    mov ax, # 0xB0C0
37150 94CA           E8         FCF4              call dispi_set_id
37151 94CD           E8         FCE3              call dispi_get_id
37152 94D0           3D                   B0C0    cmp ax, # 0xB0C0
37153 94D3           75           16              jne no_vbe_interface
37154 94D5           1E                           push ds
37155 94D6           53                           push bx
37156 94D7           B8                   0040    mov ax, # 0x40
37157 94DA           8ED8                         mov ds, ax
37158 94DC           BB                   00B9    mov bx, # 0xB9
37159 94DF           B0                     01    mov al, #0x01
37160 94E1           8807                         mov [bx], al
37161 94E3           5B                           pop bx
37162 94E4           1F                           pop ds
37163 94E5           B8                   B0C4    mov ax, # 0xB0C4
37164 94E8           E8         FCD6              call dispi_set_id
37165                       000094EB            no_vbe_interface:
37166 94EB           BB                   9072    mov bx, #msg_vbe_init
37167 94EE           53                           push bx
37168 94EF           E8         E8D5              call _printf
37169 94F2           44                           inc sp
37170 94F3           44                           inc sp
37171 94F4           C3                           ret
37172                                           ; 1 Display Info - Display information on screen about the 1
37173                       000094F5            vbe_display_info:
37174 94F5           E8         FFBC              call _vbe_has_vbe_display
37175 94F8           85C0                         test ax, ax
37176 94FA           74           0B              jz no_vbe_flag
37177 94FC           B8                   C000    mov ax, #0xc000
37178 94FF           8ED8                         mov ds, ax
37179 9501           BE                   9028    mov si, #_vbebios_info_string
37180 9504           E9         A13E              jmp _display_string
37181                       00009507            no_vbe_flag:
37182 9507           B8                   C000    mov ax, #0xc000
37183 950A           8ED8                         mov ds, ax
37184 950C           BE                   904E    mov si, #_no_vbebios_info_string
37185 950F           E9         A133              jmp _display_string
37186                                           ! 7889 endasm
37187                                           !BCC_ENDASM
37188                                           ! 7890 #asm
37189                                           !BCC_ASM
37190                       00000004            _mode_info_find_mode.using_lfb	set	4
37191                       00000002            _mode_info_find_mode.mode	set	2
37192                       00009512            _size64:
37193 9512           55                           push bp
37194 9513           89E5                         mov bp, sp
37195 9515           52                           push dx
37196                                           ; multiply bbp by yres first as results fit in 16bits
37197                                           ; then multiply by xres
37198 9516           8B46         08              mov ax, 8[bp]
37199 9519           F766         06              mul word 6[bp]
37200 951C           F766         04              mul word 4[bp]
37201                                           ; divide by 2
37202                                           19 ceiling result
37203 951F           05                   FFFF    add ax, #0xffff
37204 9522           83D2                   07    adc dx, #7
37205 9525           89D0                         mov ax, dx
37206 9527           C1E8                   03    shr ax, #3
37207 952A           5A                           pop dx
37208 952B           5D                           pop bp
37209 952C           C3                           ret
37210                                           ! 7908 endasm
37211                                           !BCC_ENDASM
37212                                           ! 7909 void vbe_biosfn_return_controller_information(AX, ES, DI)
37213                                           ! Register BX used in function mode_info_find_mode
37214                                           ! 7910 Bit16u *AX;Bit16u ES;Bit16u DI;
37215                                           export	_vbe_biosfn_return_controller_information
37216                       0000952D            _vbe_biosfn_return_controller_information:
37217                                           !BCC_EOS
37218                                           !BCC_EOS
37219                                           !BCC_EOS
37220                                           ! 7911 {
37221                                           ! 7912         Bit16u ss=get_SS();
37222 952D           55                         push	bp
37223 952E           89E5                       mov	bp,sp
37224 9530           4C                         dec	sp
37225 9531           4C                         dec	sp
37226                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37227 9532           E8         E873            call	_get_SS
37228                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
37229 9535           8946         FE            mov	-2[bp],ax
37230                                           !BCC_EOS
37231                                           ! 7913         VbeInfoBlock vbe_info_block;
37232                                           !BCC_EOS
37233                                           ! 7914         Bit16u status;
37234                                           !BCC_EOS
37235                                           ! 7915         Bit16u result;
37236                                           !BCC_EOS
37237                                           ! 7916         Bit16u vbe2_info;
37238                                           !BCC_EOS
37239                                           ! 7917         Bit16u cur_mode=0;
37240 9538           81C4                 FDF8  add	sp,#-$208
37241                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
37242 953C           31C0                       xor	ax,ax
37243 953E           8986       FDF6            mov	-$20A[bp],ax
37244                                           !BCC_EOS
37245                                           ! 7918         Bit16u cur_ptr=34;
37246 9542           4C                         dec	sp
37247 9543           4C                         dec	sp
37248                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
37249 9544           B8                   0022  mov	ax,*$22
37250 9547           8986       FDF4            mov	-$20C[bp],ax
37251                                           !BCC_EOS
37252                                           ! 7919         ModeInfoListItem *cur_info=&mode_info_list;
37253 954B           4C                         dec	sp
37254 954C           4C                         dec	sp
37255                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$210-$210] (used reg = )
37256 954D           BB                   7F04  mov	bx,#_mode_info_list
37257 9550           899E       FDF2            mov	-$20E[bp],bx
37258                                           !BCC_EOS
37259                                           ! 7920         status = read_word(ss, AX);
37260                                           ! Debug: list * unsigned short AX = [S+$210+2] (used reg = )
37261 9554           FF76         04            push	4[bp]
37262                                           ! Debug: list unsigned short ss = [S+$212-4] (used reg = )
37263 9557           FF76         FE            push	-2[bp]
37264                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
37265 955A           E8         E7D2            call	_read_word
37266 955D           83C4                   04  add	sp,*4
37267                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$210-$206] (used reg = )
37268 9560           8986       FDFC            mov	-$204[bp],ax
37269                                           !BCC_EOS
37270                                           ! 7921         printf("VBE vbe_biosfn_return_vbe_info ES%x DI%x AX%x\n",ES,DI,status);
37271                                           ! Debug: list unsigned short status = [S+$210-$206] (used reg = )
37272 9564           FFB6       FDFC            push	-$204[bp]
37273                                           ! Debug: list unsigned short DI = [S+$212+6] (used reg = )
37274 9568           FF76         08            push	8[bp]
37275                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
37276 956B           FF76         06            push	6[bp]
37277                                           ! Debug: list * char = .2D8+0 (used reg = )
37278 956E           BB                   A03F  mov	bx,#.2D8
37279 9571           53                         push	bx
37280                                           ! Debug: func () void = printf+0 (used reg = )
37281 9572           E8         E852            call	_printf
37282 9575           83C4                   08  add	sp,*8
37283                                           !BCC_EOS
37284                                           ! 7922         vbe2_info = 0;
37285                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$210-$20A] (used reg = )
37286 9578           31C0                       xor	ax,ax
37287 957A           8986       FDF8            mov	-$208[bp],ax
37288                                           !BCC_EOS
37289                                           ! 7923         memcpyb(ss, &vbe_info_block, ES
37290                                           ! 7923 , DI, sizeof(vbe_info_block));
37291                                           ! Debug: list int = const $200 (used reg = )
37292 957E           B8                   0200  mov	ax,#$200
37293 9581           50                         push	ax
37294                                           ! Debug: list unsigned short DI = [S+$212+6] (used reg = )
37295 9582           FF76         08            push	8[bp]
37296                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
37297 9585           FF76         06            push	6[bp]
37298                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$216-$204 (used reg = )
37299 9588           8D9E       FDFE            lea	bx,-$202[bp]
37300 958C           53                         push	bx
37301                                           ! Debug: list unsigned short ss = [S+$218-4] (used reg = )
37302 958D           FF76         FE            push	-2[bp]
37303                                           ! Debug: func () void = memcpyb+0 (used reg = )
37304 9590           E8         E729            call	_memcpyb
37305 9593           83C4                   0A  add	sp,*$A
37306                                           !BCC_EOS
37307                                           ! 7924         if (((vbe_info_block.VbeSignature[0] == 'V') &&
37308                                           ! 7925              (vbe_info_block.VbeSignature[1] == 'B') &&
37309                                           ! 7926              (vbe_info_block.VbeSignature[2] == 'E') &&
37310                                           ! 7927              (vbe_info_block.VbeSignature[3] == '2')) ||
37311                                           ! 7928             ((vbe_info_block.VbeSignature[0] == 'V') &&
37312                                           ! 7929              (vbe_info_block.VbeSignature[1] == 'E') &&
37313                                           ! 7930              (vbe_info_block.VbeSignature[2] == 'S') &&
37314                                           ! 7931              (vbe_info_block.VbeSignature[3] == 'A')) )
37315                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
37316 9596           8A86       FDFE            mov	al,-$202[bp]
37317 959A           3C                     56  cmp	al,*$56
37318 959C           75           18            jne 	.2DB
37319                       0000959E            .2DE:
37320                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37321 959E           8A86       FDFF            mov	al,-$201[bp]
37322 95A2           3C                     42  cmp	al,*$42
37323 95A4           75           10            jne 	.2DB
37324                       000095A6            .2DD:
37325                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37326 95A6           8A86       FE00            mov	al,-$200[bp]
37327 95AA           3C                     45  cmp	al,*$45
37328 95AC           75           08            jne 	.2DB
37329                       000095AE            .2DC:
37330                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37331 95AE           8A86       FE01            mov	al,-$1FF[bp]
37332 95B2           3C                     32  cmp	al,*$32
37333 95B4           74           20            je  	.2DA
37334                       000095B6            .2DB:
37335                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
37336 95B6           8A86       FDFE            mov	al,-$202[bp]
37337 95BA           3C                     56  cmp	al,*$56
37338 95BC           75           28            jne 	.2D9
37339                       000095BE            .2E1:
37340                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37341 95BE           8A86       FDFF            mov	al,-$201[bp]
37342 95C2           3C                     45  cmp	al,*$45
37343 95C4           75           20            jne 	.2D9
37344                       000095C6            .2E0:
37345                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37346 95C6           8A86       FE00            mov	al,-$200[bp]
37347 95CA           3C                     53  cmp	al,*$53
37348 95CC           75           18            jne 	.2D9
37349                       000095CE            .2DF:
37350                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37351 95CE           8A86       FE01            mov	al,-$1FF[bp]
37352 95D2           3C                     41  cmp	al,*$41
37353 95D4           75           10            jne 	.2D9
37354                       000095D6            .2DA:
37355                                           ! 7932         {
37356                                           ! 7933                 vbe2_info = 1;
37357                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$210-$20A] (used reg = )
37358 95D6           B8                   0001  mov	ax,*1
37359 95D9           8986       FDF8            mov	-$208[bp],ax
37360                                           !BCC_EOS
37361                                           ! 7934                 printf("VBE correct VESA/VBE2 signature found\n");
37362                                           ! Debug: list * char = .2E2+0 (used reg = )
37363 95DD           BB                   A018  mov	bx,#.2E2
37364 95E0           53                         push	bx
37365                                           ! Debug: func () void = printf+0 (used reg = )
37366 95E1           E8         E7E3            call	_printf
37367 95E4           44                         inc	sp
37368 95E5           44                         inc	sp
37369                                           !BCC_EOS
37370                                           ! 7935         }
37371                                           ! 7936         vbe_info_block.VbeSignature[0] = 'V';
37372                       000095E6            .2D9:
37373                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
37374 95E6           B0                     56  mov	al,*$56
37375 95E8           8886       FDFE            mov	-$202[bp],al
37376                                           !BCC_EOS
37377                                           ! 7937         vbe_info_block.VbeSignature[1] = 'E';
37378                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37379 95EC           B0                     45  mov	al,*$45
37380 95EE           8886       FDFF            mov	-$201[bp],al
37381                                           !BCC_EOS
37382                                           ! 7938         vbe_info_block.VbeSignature[2] = 'S';
37383                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37384 95F2           B0                     53  mov	al,*$53
37385 95F4           8886       FE00            mov	-$200[bp],al
37386                                           !BCC_EOS
37387                                           ! 7939         vbe_info_block.VbeSignature[3] = 'A';
37388                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37389 95F8           B0                     41  mov	al,*$41
37390 95FA           8886       FE01            mov	-$1FF[bp],al
37391                                           !BCC_EOS
37392                                           ! 7940         vbe_info_block.VbeVersion = 0x0200;
37393                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$210-$200] (used reg = )
37394 95FE           B8                   0200  mov	ax,#$200
37395 9601           8986       FE02            mov	-$1FE[bp],ax
37396                                           !BCC_EOS
37397                                           ! 7941         vbe_info_block.OemStringPtr_Seg = 0xc000;
37398                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1FC] (used reg = )
37399 9605           B8                   C000  mov	ax,#$C000
37400 9608           8986       FE06            mov	-$1FA[bp],ax
37401                                           !BCC_EOS
37402                                           ! 7942         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
37403                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$210-$1FE] (used reg = )
37404 960C           BB                   8F7C  mov	bx,#_vbebios_copyright
37405 960F           899E       FE04            mov	-$1FC[bp],bx
37406                                           !BCC_EOS
37407                                           ! 7943         vbe_info_block.Capabilities[0] = 0x0001;
37408                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$210-$1FA] (used reg = )
37409 9613           B0                     01  mov	al,*1
37410 9615           8886       FE08            mov	-$1F8[bp],al
37411                                           !BCC_EOS
37412                                           ! 7944         vbe_info_block.Capabilities[1] = 0;
37413                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F9] (used reg = )
37414 9619           30C0                       xor	al,al
37415 961B           8886       FE09            mov	-$1F7[bp],al
37416                                           !BCC_EOS
37417                                           ! 7945         vbe_info_block.Capabilities[2] = 0;
37418                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F8] (used reg = )
37419 961F           30C0                       xor	al,al
37420 9621           8886       FE0A            mov	-$1F6[bp],al
37421                                           !BCC_EOS
37422                                           ! 7946         vbe_info_block.Capabilities[3] = 0;
37423                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F7] (used reg = )
37424 9625           30C0                       xor	al,al
37425 9627           8886       FE0B            mov	-$1F5[bp],al
37426                                           !BCC_EOS
37427                                           ! 7947         vbe_info_block.VideoModePtr_Seg= ES ;
37428                                           ! Debug: eq unsigned short ES = [S+$210+4] to unsigned short vbe_info_block = [S+$210-$1F4] (used reg = )
37429 962B           8B46         06            mov	ax,6[bp]
37430 962E           8986       FE0E            mov	-$1F2[bp],ax
37431                                           !BCC_EOS
37432                                           ! 7948         vbe_info_block.VideoModePtr_Off= DI + 34;
37433                                           ! Debug: add int = const $22 to unsigned short DI = [S+$210+6] (used reg = )
37434 9632           8B46         08            mov	ax,8[bp]
37435                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$210-$1F6] (used reg = )
37436 9635           05                   0022  add	ax,*$22
37437 9638           8986       FE0C            mov	-$1F4[bp],ax
37438                                           !BCC_EOS
37439                                           ! 7949         outw(0x01CE, 0xa);
37440                                           ! Debug: list int = const $A (used reg = )
37441 963C           B8                   000A  mov	ax,*$A
37442 963F           50                         push	ax
37443                                           ! Debug: list int = const $1CE (used reg = )
37444 9640           B8                   01CE  mov	ax,#$1CE
37445 9643           50                         push	ax
37446                                           ! Debug: func () void = outw+0 (used reg = )
37447 9644           E8         E751            call	_outw
37448 9647           83C4                   04  add	sp,*4
37449                                           !BCC_EOS
37450                                           ! 7950         vbe_info_block.TotalMemory = inw(0x01CF);
37451                                           ! Debug: list int = const $1CF (used reg = )
37452 964A           B8                   01CF  mov	ax,#$1CF
37453 964D           50                         push	ax
37454                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37455 964E           E8         E72C            call	_inw
37456 9651           44                         inc	sp
37457 9652           44                         inc	sp
37458                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$210-$1F2] (used reg = )
37459 9653           8986       FE10            mov	-$1F0[bp],ax
37460                                           !BCC_EOS
37461                                           ! 7951         if (vbe2_info)
37462 9657           8B86       FDF8            mov	ax,-$208[bp]
37463 965B           85C0                       test	ax,ax
37464 965D           74           4B            je  	.2E3
37465                       0000965F            .2E4:
37466                                           ! 7952  {
37467                                           ! 7953                 vbe_info_block.OemSoftwareRev = 0x0002;;
37468                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$210-$1F0] (used reg = )
37469 965F           B8                   0002  mov	ax,*2
37470 9662           8986       FE12            mov	-$1EE[bp],ax
37471                                           !BCC_EOS
37472                                           !BCC_EOS
37473                                           ! 7954                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
37474                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1EC] (used reg = )
37475 9666           B8                   C000  mov	ax,#$C000
37476 9669           8986       FE16            mov	-$1EA[bp],ax
37477                                           !BCC_EOS
37478                                           ! 7955                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
37479                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$210-$1EE] (used reg = )
37480 966D           BB                   8FC2  mov	bx,#_vbebios_vendor_name
37481 9670           899E       FE14            mov	-$1EC[bp],bx
37482                                           !BCC_EOS
37483                                           ! 7956                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
37484                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1E8] (used reg = )
37485 9674           B8                   C000  mov	ax,#$C000
37486 9677           8986       FE1A            mov	-$1E6[bp],ax
37487                                           !BCC_EOS
37488                                           ! 7957                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
37489                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$210-$1EA] (used reg = )
37490 967B           BB                   8FDA  mov	bx,#_vbebios_product_name
37491 967E           899E       FE18            mov	-$1E8[bp],bx
37492                                           !BCC_EOS
37493                                           ! 7958                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
37494                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1E4] (used reg = )
37495 9682           B8                   C000  mov	ax,#$C000
37496 9685           8986       FE1E            mov	-$1E2[bp],ax
37497                                           !BCC_EOS
37498                                           ! 7959                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
37499                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$210-$1E6] (used reg = )
37500 9689           BB                   8FF3  mov	bx,#_vbebios_product_revision
37501 968C           899E       FE1C            mov	-$1E4[bp],bx
37502                                           !BCC_EOS
37503                                           ! 7960                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
37504                                           ! Debug: list int = const $200 (used reg = )
37505 9690           B8                   0200  mov	ax,#$200
37506 9693           50                         push	ax
37507                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$212-$204 (used reg = )
37508 9694           8D9E       FDFE            lea	bx,-$202[bp]
37509 9698           53                         push	bx
37510                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37511 9699           FF76         FE            push	-2[bp]
37512                                           ! Debug: list unsigned short DI = [S+$216+6] (used reg = )
37513 969C           FF76         08            push	8[bp]
37514                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37515 969F           FF76         06            push	6[bp]
37516                                           ! Debug: func () void = memcpyb+0 (used reg = )
37517 96A2           E8         E617            call	_memcpyb
37518 96A5           83C4                   0A  add	sp,*$A
37519                                           !BCC_EOS
37520                                           ! 7961         }
37521                                           ! 7962  else
37522                                           ! 7963  {
37523 96A8           EB           18            jmp .2E5
37524                       000096AA            .2E3:
37525                                           ! 7964                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
37526                                           ! Debug: list int = const $100 (used reg = )
37527 96AA           B8                   0100  mov	ax,#$100
37528 96AD           50                         push	ax
37529                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$212-$204 (used reg = )
37530 96AE           8D9E       FDFE            lea	bx,-$202[bp]
37531 96B2           53                         push	bx
37532                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37533 96B3           FF76         FE            push	-2[bp]
37534                                           ! Debug: list unsigned short DI = [S+$216+6] (used reg = )
37535 96B6           FF76         08            push	8[bp]
37536                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37537 96B9           FF76         06            push	6[bp]
37538                                           ! Debug: func () void = memcpyb+0 (used reg = )
37539 96BC           E8         E5FD            call	_memcpyb
37540 96BF           83C4                   0A  add	sp,*$A
37541                                           !BCC_EOS
37542                                           ! 7965  }
37543                                           ! 7966         do
37544                       000096C2            .2E5:
37545                                           ! 7967         {
37546                       000096C2            .2E8:
37547                                           ! 7968                 Bit16u size_64k = size64(cur_info->info.XResolution, cu
37548 96C2           4C                         dec	sp
37549 96C3           4C                         dec	sp
37550                                           ! 7968 r_info->info.YResolution, cur_info->info.BitsPerPixel);
37551 96C4           8B9E       FDF2            mov	bx,-$20E[bp]
37552                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37553 96C8           8A47         1B            mov	al,$1B[bx]
37554 96CB           30E4                       xor	ah,ah
37555 96CD           50                         push	ax
37556 96CE           8B9E       FDF2            mov	bx,-$20E[bp]
37557                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
37558 96D2           FF77         16            push	$16[bx]
37559 96D5           8B9E       FDF2            mov	bx,-$20E[bp]
37560                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37561 96D9           FF77         14            push	$14[bx]
37562                                           ! Debug: func () int = size64+0 (used reg = )
37563 96DC           E8         FE33            call	_size64
37564 96DF           83C4                   06  add	sp,*6
37565                                           ! Debug: eq int = ax+0 to unsigned short size_64k = [S+$212-$212] (used reg = )
37566 96E2           8986       FDF0            mov	-$210[bp],ax
37567                                           !BCC_EOS
37568                                           ! 7969                 Bit16u max_bpp = dispi_get_max_bpp();
37569 96E6           4C                         dec	sp
37570 96E7           4C                         dec	sp
37571                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37572 96E8           E8         FB74            call	_dispi_get_max_bpp
37573                                           ! Debug: eq int = ax+0 to unsigned short max_bpp = [S+$214-$214] (used reg = )
37574 96EB           8986       FDEE            mov	-$212[bp],ax
37575                                           !BCC_EOS
37576                                           ! 7970                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
37577                                           ! 7971                     (cur_info->info.BitsPerPixel <= max_bpp) &&
37578                                           ! 7972                     (size_64k <= vbe_info_block.TotalMemory)) {
37579                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37580 96EF           E8         FB4B            call	_dispi_get_max_xres
37581 96F2           8B9E       FDF2            mov	bx,-$20E[bp]
37582                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
37583 96F6           3B47         14            cmp	ax,$14[bx]
37584 96F9           72           59            jb  	.2E9
37585                       000096FB            .2EC:
37586 96FB           8B9E       FDF2            mov	bx,-$20E[bp]
37587                                           ! Debug: le unsigned short max_bpp = [S+$214-$214] to unsigned char = [bx+$1B] (used reg = )
37588 96FF           8A47         1B            mov	al,$1B[bx]
37589 9702           30E4                       xor	ah,ah
37590 9704           3B86       FDEE            cmp	ax,-$212[bp]
37591 9708           77           4A            ja  	.2E9
37592                       0000970A            .2EB:
37593                                           ! Debug: le unsigned short vbe_info_block = [S+$214-$1F2] to unsigned short size_64k = [S+$214-$212] (used reg = )
37594 970A           8B86       FDF0            mov	ax,-$210[bp]
37595 970E           3B86       FE10            cmp	ax,-$1F0[bp]
37596 9712           77           40            ja  	.2E9
37597                       00009714            .2EA:
37598                                           ! 7973                   printf("VBE found mode %x => %x\n", cur_info->mode,cur_mode);
37599                                           ! Debug: list unsigned short cur_mode = [S+$214-$20C] (used reg = )
37600 9714           FFB6       FDF6            push	-$20A[bp]
37601 9718           8B9E       FDF2            mov	bx,-$20E[bp]
37602                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37603 971C           FF37                       push	[bx]
37604                                           ! Debug: list * char = .2ED+0 (used reg = )
37605 971E           BB                   9FFF  mov	bx,#.2ED
37606 9721           53                         push	bx
37607                                           ! Debug: func () void = printf+0 (used reg = )
37608 9722           E8         E6A2            call	_printf
37609 9725           83C4                   06  add	sp,*6
37610                                           !BCC_EOS
37611                                           ! 7974                   write_word(ES, DI + cur_ptr, cur_info->mode);
37612 9728           8B9E       FDF2            mov	bx,-$20E[bp]
37613                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37614 972C           FF37                       push	[bx]
37615                                           ! Debug: add unsigned short cur_ptr = [S+$216-$20E] to unsigned short DI = [S+$216+6] (used reg = )
37616 972E           8B46         08            mov	ax,8[bp]
37617 9731           0386       FDF4            add	ax,-$20C[bp]
37618                                           ! Debug: list unsigned int = ax+0 (used reg = )
37619 9735           50                         push	ax
37620                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37621 9736           FF76         06            push	6[bp]
37622                                           ! Debug: func () void = write_word+0 (used reg = )
37623 9739           E8         E61E            call	_write_word
37624 973C           83C4                   06  add	sp,*6
37625                                           !BCC_EOS
37626                                           ! 7975                   cur_mode++;
37627                                           ! Debug: postinc unsigned short cur_mode = [S+$214-$20C] (used reg = )
37628 973F           8B86       FDF6            mov	ax,-$20A[bp]
37629 9743           40                         inc	ax
37630 9744           8986       FDF6            mov	-$20A[bp],ax
37631                                           !BCC_EOS
37632                                           ! 7976                   cur_ptr+=2;
37633                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$214-$20E] (used reg = )
37634 9748           8B86       FDF4            mov	ax,-$20C[bp]
37635 974C           40                         inc	ax
37636 974D           40                         inc	ax
37637 974E           8986       FDF4            mov	-$20C[bp],ax
37638                                           !BCC_EOS
37639                                           ! 7977                 } else {
37640 9752           EB           21            jmp .2EE
37641                       00009754            .2E9:
37642                                           ! 7978                   printf("VBE mode %x (xres=%x / bpp=%02x) not supported \n", cur_info->mode,cur_info->info.XResolution,cur_info->info.BitsPerPixel);
37643 9754           8B9E       FDF2            mov	bx,-$20E[bp]
37644                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37645 9758           8A47         1B            mov	al,$1B[bx]
37646 975B           30E4                       xor	ah,ah
37647 975D           50                         push	ax
37648 975E           8B9E       FDF2            mov	bx,-$20E[bp]
37649                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37650 9762           FF77         14            push	$14[bx]
37651 9765           8B9E       FDF2            mov	bx,-$20E[bp]
37652                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37653 9769           FF37                       push	[bx]
37654                                           ! Debug: list * char = .2EF+0 (used reg = )
37655 976B           BB                   9FCE  mov	bx,#.2EF
37656 976E           53                         push	bx
37657                                           ! Debug: func () void = printf+0 (used reg = )
37658 976F           E8         E655            call	_printf
37659 9772           83C4                   08  add	sp,*8
37660                                           !BCC_EOS
37661                                           ! 7979                 }
37662                                           ! 7980                 cur_info++;
37663                       00009775            .2EE:
37664                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$214-$210] (used reg = )
37665 9775           8B9E       FDF2            mov	bx,-$20E[bp]
37666 9779           83C3                   44  add	bx,*$44
37667 977C           899E       FDF2            mov	-$20E[bp],bx
37668                                           !BCC_EOS
37669                                           ! 7981         } while (cur_info->mode != 0xFFFF);
37670 9780           83C4                   04  add	sp,*4
37671                       00009783            .2E7:
37672 9783           8B9E       FDF2            mov	bx,-$20E[bp]
37673                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37674 9787           8B1F                       mov	bx,[bx]
37675 9789           81FB                 FFFF  cmp	bx,#$FFFF
37676 978D         0F85         FF31            bne 	.2E8
37677                       00009791            .2F0:
37678                                           !BCC_EOS
37679                                           ! 7982         write_word(ES, DI + cur_ptr, cur_info->mode);
37680                       00009791            .2E6:
37681 9791           8B9E       FDF2            mov	bx,-$20E[bp]
37682                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37683 9795           FF37                       push	[bx]
37684                                           ! Debug: add unsigned short cur_ptr = [S+$212-$20E] to unsigned short DI = [S+$212+6] (used reg = )
37685 9797           8B46         08            mov	ax,8[bp]
37686 979A           0386       FDF4            add	ax,-$20C[bp]
37687                                           ! Debug: list unsigned int = ax+0 (used reg = )
37688 979E           50                         push	ax
37689                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
37690 979F           FF76         06            push	6[bp]
37691                                           ! Debug: func () void = write_word+0 (used reg = )
37692 97A2           E8         E5B5            call	_write_word
37693 97A5           83C4                   06  add	sp,*6
37694                                           !BCC_EOS
37695                                           ! 7983         result = 0x4f;
37696                                           ! Debug: eq int = const $4F to unsigned short result = [S+$210-$208] (used reg = )
37697 97A8           B8                   004F  mov	ax,*$4F
37698 97AB           8986       FDFA            mov	-$206[bp],ax
37699                                           !BCC_EOS
37700                                           ! 7984         write_word(ss, AX, result);
37701                                           ! Debug: list unsigned short result = [S+$210-$208] (used reg = )
37702 97AF           FFB6       FDFA            push	-$206[bp]
37703                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
37704 97B3           FF76         04            push	4[bp]
37705                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37706 97B6           FF76         FE            push	-2[bp]
37707                                           ! Debug: func () void = write_word+0 (used reg = )
37708 97B9           E8         E59E            call	_write_word
37709 97BC           83C4                   06  add	sp,*6
37710                                           !BCC_EOS
37711                                           ! 7985 }
37712 97BF           89EC                       mov	sp,bp
37713 97C1           5D                         pop	bp
37714 97C2           C3                         ret
37715                                           ! 7986 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
37716                                           ! Register BX used in function vbe_biosfn_return_controller_information
37717                                           ! 7987 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
37718                                           export	_vbe_biosfn_return_mode_information
37719                       000097C3            _vbe_biosfn_return_mode_information:
37720                                           !BCC_EOS
37721                                           !BCC_EOS
37722                                           !BCC_EOS
37723                                           !BCC_EOS
37724                                           ! 7988 {
37725                                           ! 7989         Bit16u result=0x014f;
37726 97C3           55                         push	bp
37727 97C4           89E5                       mov	bp,sp
37728 97C6           4C                         dec	sp
37729 97C7           4C                         dec	sp
37730                                           ! Debug: eq int = const $14F to unsigned short result = [S+4-4] (used reg = )
37731 97C8           B8                   014F  mov	ax,#$14F
37732 97CB           8946         FE            mov	-2[bp],ax
37733                                           !BCC_EOS
37734                                           ! 7990         Bit16u ss=get_SS();
37735 97CE           4C                         dec	sp
37736 97CF           4C                         dec	sp
37737                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37738 97D0           E8         E5D5            call	_get_SS
37739                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
37740 97D3           8946         FC            mov	-4[bp],ax
37741                                           !BCC_EOS
37742                                           ! 7991         ModeInfoListItem *cur_info;
37743                                           !BCC_EOS
37744                                           ! 7992         Boolean using_lfb;
37745                                           !BCC_EOS
37746                                           ! 7993         ModeInfoBlockCompact info;
37747                                           !BCC_EOS
37748                                           ! 7994         printf("VBE vbe_biosfn_return_mode_information ES%x DI%x CX%x\n",ES,DI,CX);
37749 97D6           83C4                   BA  add	sp,*-$46
37750                                           ! Debug: list unsigned short CX = [S+$4C+4] (used reg = )
37751 97D9           FF76         06            push	6[bp]
37752                                           ! Debug: list unsigned short DI = [S+$4E+8] (used reg = )
37753 97DC           FF76         0A            push	$A[bp]
37754                                           ! Debug: list unsigned short ES = [S+$50+6] (used reg = )
37755 97DF           FF76         08            push	8[bp]
37756                                           ! Debug: list * char = .2F1+0 (used reg = )
37757 97E2           BB                   9F97  mov	bx,#.2F1
37758 97E5           53                         push	bx
37759                                           ! Debug: func () void = printf+0 (used reg = )
37760 97E6           E8         E5DE            call	_printf
37761 97E9           83C4                   08  add	sp,*8
37762                                           !BCC_EOS
37763                                           ! 7995         using_lfb=((CX & 0x4000) == 0x4000);
37764                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$4C+4] (used reg = )
37765 97EC           8B46         06            mov	ax,6[bp]
37766 97EF           25                   4000  and	ax,#$4000
37767                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37768 97F2           3D                   4000  cmp	ax,#$4000
37769 97F5           75           04            jne	.2F2
37770 97F7           B0                     01  mov	al,*1
37771 97F9           EB           02            jmp	.2F3
37772                       000097FB            .2F2:
37773 97FB           30C0                       xor	al,al
37774                       000097FD            .2F3:
37775                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$4C-$A] (used reg = )
37776 97FD           30E4                       xor	ah,ah
37777 97FF           8946         F8            mov	-8[bp],ax
37778                                           !BCC_EOS
37779                                           ! 7996         CX = (CX & 0x1ff);
37780                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$4C+4] (used reg = )
37781 9802           8B46         06            mov	ax,6[bp]
37782 9805           25                   01FF  and	ax,#$1FF
37783                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$4C+4] (used reg = )
37784 9808           8946         06            mov	6[bp],ax
37785                                           !BCC_EOS
37786                                           ! 7997         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
37787                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$4C-8 (used reg = )
37788 980B           8D5E         FA            lea	bx,-6[bp]
37789 980E           53                         push	bx
37790                                           ! Debug: list unsigned short using_lfb = [S+$4E-$A] (used reg = )
37791 980F           FF76         F8            push	-8[bp]
37792                                           ! Debug: list unsigned short CX = [S+$50+4] (used reg = )
37793 9812           FF76         06            push	6[bp]
37794                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37795 9815           E8         FC3B            call	_mode_info_find_mode
37796 9818           83C4                   06  add	sp,*6
37797                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$4C-8] (used reg = )
37798 981B           8946         FA            mov	-6[bp],ax
37799                                           !BCC_EOS
37800                                           ! 7998         if (cur_info != 0)
37801                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$4C-8] (used reg = )
37802 981E           8B46         FA            mov	ax,-6[bp]
37803 9821           85C0                       test	ax,ax
37804 9823         0F84         0106            beq 	.2F4
37805                       00009827            .2F5:
37806                                           ! 7999         {
37807                                           ! 8000                 Bit16u max_bpp = dispi_get_max_bpp();
37808 9827           4C                         dec	sp
37809 9828           4C                         dec	sp
37810                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37811 9829           E8         FA33            call	_dispi_get_max_bpp
37812                                           ! Debug: eq int = ax+0 to unsigned short max_bpp = [S+$4E-$4E] (used reg = )
37813 982C           8946         B4            mov	-$4C[bp],ax
37814                                           !BCC_EOS
37815                                           ! 8001                 Bit16u size_64k;
37816                                           !BCC_EOS
37817                                           ! 8002                 Bit16u totalMemory;
37818                                           !BCC_EOS
37819                                           ! 8003                 outw(0x01CE, 0xa);
37820 982F           83C4                   FC  add	sp,*-4
37821                                           ! Debug: list int = const $A (used reg = )
37822 9832           B8                   000A  mov	ax,*$A
37823 9835           50                         push	ax
37824                                           ! Debug: list int = const $1CE (used reg = )
37825 9836           B8                   01CE  mov	ax,#$1CE
37826 9839           50                         push	ax
37827                                           ! Debug: func () void = outw+0 (used reg = )
37828 983A           E8         E55B            call	_outw
37829 983D           83C4                   04  add	sp,*4
37830                                           !BCC_EOS
37831                                           ! 8004                 totalMemory = inw(0x01CF);
37832                                           ! Debug: list int = const $1CF (used reg = )
37833 9840           B8                   01CF  mov	ax,#$1CF
37834 9843           50                         push	ax
37835                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37836 9844           E8         E536            call	_inw
37837 9847           44                         inc	sp
37838 9848           44                         inc	sp
37839                                           ! Debug: eq unsigned short = ax+0 to unsigned short totalMemory = [S+$52-$52] (used reg = )
37840 9849           8946         B0            mov	-$50[bp],ax
37841                                           !BCC_EOS
37842                                           ! 8005                 printf("VBE found mode %x\n",CX);
37843                                           ! Debug: list unsigned short CX = [S+$52+4] (used reg = )
37844 984C           FF76         06            push	6[bp]
37845                                           ! Debug: list * char = .2F6+0 (used reg = )
37846 984F           BB                   9F84  mov	bx,#.2F6
37847 9852           53                         push	bx
37848                                           ! Debug: func () void = printf+0 (used reg = )
37849 9853           E8         E571            call	_printf
37850 9856           83C4                   04  add	sp,*4
37851                                           !BCC_EOS
37852                                           ! 8006                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
37853                                           ! Debug: list int = const $42 (used reg = )
37854 9859           B8                   0042  mov	ax,*$42
37855 985C           50                         push	ax
37856 985D           8B5E         FA            mov	bx,-6[bp]
37857                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
37858                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
37859 9860           43                         inc	bx
37860 9861           43                         inc	bx
37861 9862           53                         push	bx
37862                                           ! Debug: list unsigned int = const $C000 (used reg = )
37863 9863           B8                   C000  mov	ax,#$C000
37864 9866           50                         push	ax
37865                                           ! Debug: list * struct ModeInfoBlockCompact info = S+$58-$4C (used reg = )
37866 9867           8D5E         B6            lea	bx,-$4A[bp]
37867 986A           53                         push	bx
37868                                           ! Debug: list unsigned short ss = [S+$5A-6] (used reg = )
37869 986B           FF76         FC            push	-4[bp]
37870                                           ! Debug: func () void = memcpyb+0 (used reg = )
37871 986E           E8         E44B            call	_memcpyb
37872 9871           83C4                   0A  add	sp,*$A
37873                                           !BCC_EOS
37874                                           ! 8007                 size_64k = size64(info.XResolution, info.YResolution, info.BitsPerPixel);
37875                                           ! Debug: list unsigned char info = [S+$52-$33] (used reg = )
37876 9874           8A46         CF            mov	al,-$31[bp]
37877 9877           30E4                       xor	ah,ah
37878 9879           50                         push	ax
37879                                           ! Debug: list unsigned short info = [S+$54-$38] (used reg = )
37880 987A           FF76         CA            push	-$36[bp]
37881                                           ! Debug: list unsigned short info = [S+$56-$3A] (used reg = )
37882 987D           FF76         C8            push	-$38[bp]
37883                                           ! Debug: func () int = size64+0 (used reg = )
37884 9880           E8         FC8F            call	_size64
37885 9883           83C4                   06  add	sp,*6
37886                                           ! Debug: eq int = ax+0 to unsigned short size_64k = [S+$52-$50] (used reg = )
37887 9886           8946         B2            mov	-$4E[bp],ax
37888                                           !BCC_EOS
37889                                           ! 8008                 if ((info.XResolution > dispi_get_max_xres()) ||
37890                                           ! 8009                     (info.BitsPerPixel > max_bpp) ||
37891                                           ! 8010                     (size_64k > totalMemory))
37892                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37893 9889           E8         F9B1            call	_dispi_get_max_xres
37894                                           ! Debug: gt int = ax+0 to unsigned short info = [S+$52-$3A] (used reg = )
37895 988C           3B46         C8            cmp	ax,-$38[bp]
37896 988F           72           12            jb  	.2F8
37897                       00009891            .2FA:
37898                                           ! Debug: gt unsigned short max_bpp = [S+$52-$4E] to unsigned char info = [S+$52-$33] (used reg = )
37899 9891           8A46         CF            mov	al,-$31[bp]
37900 9894           30E4                       xor	ah,ah
37901 9896           3B46         B4            cmp	ax,-$4C[bp]
37902 9899           77           08            ja  	.2F8
37903                       0000989B            .2F9:
37904                                           ! Debug: gt unsigned short totalMemory = [S+$52-$52] to unsigned short size_64k = [S+$52-$50] (used reg = )
37905 989B           8B46         B2            mov	ax,-$4E[bp]
37906 989E           3B46         B0            cmp	ax,-$50[bp]
37907 98A1           76           08            jbe 	.2F7
37908                       000098A3            .2F8:
37909                                           ! 8011                   info.ModeAttribute
37910                                           ! 8011 s &= ~0x0001;
37911                                           ! Debug: andab int = const -2 to unsigned short info = [S+$52-$4C] (used reg = )
37912 98A3           8B46         B6            mov	ax,-$4A[bp]
37913 98A6           24                     FE  and	al,#$FE
37914 98A8           8946         B6            mov	-$4A[bp],ax
37915                                           !BCC_EOS
37916                                           ! 8012                 info.NumberOfBanks = 1;
37917                       000098AB            .2F7:
37918                                           ! Debug: eq int = const 1 to unsigned char info = [S+$52-$32] (used reg = )
37919 98AB           B0                     01  mov	al,*1
37920 98AD           8846         D0            mov	-$30[bp],al
37921                                           !BCC_EOS
37922                                           ! 8013                 if (info.WinAAttributes & 0x01) {
37923                                           ! Debug: and int = const 1 to unsigned char info = [S+$52-$4A] (used reg = )
37924 98B0           8A46         B8            mov	al,-$48[bp]
37925 98B3           24                     01  and	al,*1
37926 98B5           84C0                       test	al,al
37927 98B7           74           11            je  	.2FB
37928                       000098B9            .2FC:
37929                                           ! 8014                   info.WinFuncPtr = 0xC0000000UL;
37930                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$52-$40] (used reg = )
37931 98B9           31C0                       xor	ax,ax
37932 98BB           BB                   C000  mov	bx,#$C000
37933 98BE           8946         C2            mov	-$3E[bp],ax
37934 98C1           895E         C4            mov	-$3C[bp],bx
37935                                           !BCC_EOS
37936                                           ! 8015                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
37937                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
37938                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$52-$40] (used reg = )
37939 98C4           BB                   92BD  mov	bx,#_dispi_set_bank_farcall
37940 98C7           895E         C2            mov	-$3E[bp],bx
37941                                           !BCC_EOS
37942                                           ! 8016                 }
37943                                           ! 8017                 outw(0x01CE,0xb);
37944                       000098CA            .2FB:
37945                                           ! Debug: list int = const $B (used reg = )
37946 98CA           B8                   000B  mov	ax,*$B
37947 98CD           50                         push	ax
37948                                           ! Debug: list int = const $1CE (used reg = )
37949 98CE           B8                   01CE  mov	ax,#$1CE
37950 98D1           50                         push	ax
37951                                           ! Debug: func () void = outw+0 (used reg = )
37952 98D2           E8         E4C3            call	_outw
37953 98D5           83C4                   04  add	sp,*4
37954                                           !BCC_EOS
37955                                           ! 8018                 info.PhysBasePtr = inw(0x01CF);
37956                                           ! Debug: list int = const $1CF (used reg = )
37957 98D8           B8                   01CF  mov	ax,#$1CF
37958 98DB           50                         push	ax
37959                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37960 98DC           E8         E49E            call	_inw
37961 98DF           44                         inc	sp
37962 98E0           44                         inc	sp
37963                                           ! Debug: eq unsigned short = ax+0 to unsigned long info = [S+$52-$24] (used reg = )
37964 98E1           31DB                       xor	bx,bx
37965 98E3           8946         DE            mov	-$22[bp],ax
37966 98E6           895E         E0            mov	-$20[bp],bx
37967                                           !BCC_EOS
37968                                           ! 8019                 info.PhysBasePtr = info.PhysBasePtr << 16;
37969                                           ! Debug: sl int = const $10 to unsigned long info = [S+$52-$24] (used reg = )
37970 98E9           8B46         DE            mov	ax,-$22[bp]
37971 98EC           8B5E         E0            mov	bx,-$20[bp]
37972 98EF           93                         xchg	bx,ax
37973 98F0           31C0                       xor	ax,ax
37974                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$52-$24] (used reg = )
37975 98F2           8946         DE            mov	-$22[bp],ax
37976 98F5           895E         E0            mov	-$20[bp],bx
37977                                           !BCC_EOS
37978                                           ! 8020                 result = 0x4f;
37979                                           ! Debug: eq int = const $4F to unsigned short result = [S+$52-4] (used reg = )
37980 98F8           B8                   004F  mov	ax,*$4F
37981 98FB           8946         FE            mov	-2[bp],ax
37982                                           !BCC_EOS
37983                                           ! 8021                 memsetb(ES, DI, 0, sizeof(ModeInfoBlock));
37984                                           ! Debug: list int = const $100 (used reg = )
37985 98FE           B8                   0100  mov	ax,#$100
37986 9901           50                         push	ax
37987                                           ! Debug: list int = const 0 (used reg = )
37988 9902           31C0                       xor	ax,ax
37989 9904           50                         push	ax
37990                                           ! Debug: list unsigned short DI = [S+$56+8] (used reg = )
37991 9905           FF76         0A            push	$A[bp]
37992                                           ! Debug: list unsigned short ES = [S+$58+6] (used reg = )
37993 9908           FF76         08            push	8[bp]
37994                                           ! Debug: func () void = memsetb+0 (used reg = )
37995 990B           E8         E364            call	_memsetb
37996 990E           83C4                   08  add	sp,*8
37997                                           !BCC_EOS
37998                                           ! 8022                 memcpyb(ES, DI, ss, &info, sizeof(info));
37999                                           ! Debug: list int = const $42 (used reg = )
38000 9911           B8                   0042  mov	ax,*$42
38001 9914           50                         push	ax
38002                                           ! Debug: list * struct ModeInfoBlockCompact info = S+$54-$4C (used reg = )
38003 9915           8D5E         B6            lea	bx,-$4A[bp]
38004 9918           53                         push	bx
38005                                           ! Debug: list unsigned short ss = [S+$56-6] (used reg = )
38006 9919           FF76         FC            push	-4[bp]
38007                                           ! Debug: list unsigned short DI = [S+$58+8] (used reg = )
38008 991C           FF76         0A            push	$A[bp]
38009                                           ! Debug: list unsigned short ES = [S+$5A+6] (used reg = )
38010 991F           FF76         08            push	8[bp]
38011                                           ! Debug: func () void = memcpyb+0 (used reg = )
38012 9922           E8         E397            call	_memcpyb
38013 9925           83C4                   0A  add	sp,*$A
38014                                           !BCC_EOS
38015                                           ! 8023         }
38016 9928           83C4                   06  add	sp,*6
38017                                           ! 8024         else
38018                                           ! 8025         {
38019 992B           EB           0D            jmp .2FD
38020                       0000992D            .2F4:
38021                                           ! 8026                 printf("VBE *NOT* found mode %x\n",CX);
38022                                           ! Debug: list unsigned short CX = [S+$4C+4] (used reg = )
38023 992D           FF76         06            push	6[bp]
38024                                           ! Debug: list * char = .2FE+0 (used reg = )
38025 9930           BB                   9F6B  mov	bx,#.2FE
38026 9933           53                         push	bx
38027                                           ! Debug: func () void = printf+0 (used reg = )
38028 9934           E8         E490            call	_printf
38029 9937           83C4                   04  add	sp,*4
38030                                           !BCC_EOS
38031                                           ! 8027         }
38032                                           ! 8028         write_word(ss, AX, result);
38033                       0000993A            .2FD:
38034                                           ! Debug: list unsigned short result = [S+$4C-4] (used reg = )
38035 993A           FF76         FE            push	-2[bp]
38036                                           ! Debug: list * unsigned short AX = [S+$4E+2] (used reg = )
38037 993D           FF76         04            push	4[bp]
38038                                           ! Debug: list unsigned short ss = [S+$50-6] (used reg = )
38039 9940           FF76         FC            push	-4[bp]
38040                                           ! Debug: func () void = write_word+0 (used reg = )
38041 9943           E8         E414            call	_write_word
38042 9946           83C4                   06  add	sp,*6
38043                                           !BCC_EOS
38044                                           ! 8029 }
38045 9949           89EC                       mov	sp,bp
38046 994B           5D                         pop	bp
38047 994C           C3                         ret
38048                                           ! 8030 void vbe_biosfn_set_mode(AX, BX, ES, DI)
38049                                           ! Register BX used in function vbe_biosfn_return_mode_information
38050                                           ! 8031 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
38051                                           export	_vbe_biosfn_set_mode
38052                       0000994D            _vbe_biosfn_set_mode:
38053                                           !BCC_EOS
38054                                           !BCC_EOS
38055                                           !BCC_EOS
38056                                           !BCC_EOS
38057                                           ! 8032 {
38058                                           ! 8033         Bit16u ss = get_SS();
38059 994D           55                         push	bp
38060 994E           89E5                       mov	bp,sp
38061 9950           4C                         dec	sp
38062 9951           4C                         dec	sp
38063                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38064 9952           E8         E453            call	_get_SS
38065                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38066 9955           8946         FE            mov	-2[bp],ax
38067                                           !BCC_EOS
38068                                           ! 8034         Bit16u result;
38069                                           !BCC_EOS
38070                                           ! 8035         ModeInfoListItem *cur_info;
38071                                           !BCC_EOS
38072                                           ! 8036         Boolean using_lfb;
38073                                           !BCC_EOS
38074                                           ! 8037         Bit8u no_clear;
38075                                           !BCC_EOS
38076                                           ! 8038         Bit8u lfb_flag;
38077                                           !BCC_EOS
38078                                           ! 8039         using_lfb=((BX & 0x4000) == 0x4000);
38079 9958           83C4                   F8  add	sp,*-8
38080                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
38081 995B           8B46         06            mov	ax,6[bp]
38082 995E           25                   4000  and	ax,#$4000
38083                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
38084 9961           3D                   4000  cmp	ax,#$4000
38085 9964           75           04            jne	.2FF
38086 9966           B0                     01  mov	al,*1
38087 9968           EB           02            jmp	.300
38088                       0000996A            .2FF:
38089 996A           30C0                       xor	al,al
38090                       0000996C            .300:
38091                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
38092 996C           30E4                       xor	ah,ah
38093 996E           8946         F8            mov	-8[bp],ax
38094                                           !BCC_EOS
38095                                           ! 8040         lfb_flag=using_lfb?0x40:0;
38096 9971           8B46         F8            mov	ax,-8[bp]
38097 9974           85C0                       test	ax,ax
38098 9976           74           04            je  	.301
38099                       00009978            .302:
38100 9978           B0                     40  mov	al,*$40
38101 997A           EB           02            jmp .303
38102                       0000997C            .301:
38103 997C           30C0                       xor	al,al
38104                       0000997E            .303:
38105                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
38106 997E           8846         F6            mov	-$A[bp],al
38107                                           !BCC_EOS
38108                                           ! 8041         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
38109                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
38110 9981           8B46         06            mov	ax,6[bp]
38111 9984           25                   8000  and	ax,#$8000
38112                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
38113 9987           3D                   8000  cmp	ax,#$8000
38114 998A           75           04            jne 	.304
38115                       0000998C            .305:
38116 998C           B0                     80  mov	al,#$80
38117 998E           EB           02            jmp .306
38118                       00009990            .304:
38119 9990           30C0                       xor	al,al
38120                       00009992            .306:
38121                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
38122 9992           8846         F7            mov	-9[bp],al
38123                                           !BCC_EOS
38124                                           ! 8042         BX = (BX & 0x1ff);
38125                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
38126 9995           8B46         06            mov	ax,6[bp]
38127 9998           25                   01FF  and	ax,#$1FF
38128                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
38129 999B           8946         06            mov	6[bp],ax
38130                                           !BCC_EOS
38131                                           ! 8043         if (BX<0x0100)
38132                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
38133 999E           8B46         06            mov	ax,6[bp]
38134 99A1           3D                   0100  cmp	ax,#$100
38135 99A4           73           23            jae 	.307
38136                       000099A6            .308:
38137                                           ! 8044         {
38138                                           ! 8045                 Bit8u mode;
38139                                           !BCC_EOS
38140                                           ! 8046                 dispi_set_enable(0x00);
38141 99A6           4C                         dec	sp
38142 99A7           4C                         dec	sp
38143                                           ! Debug: list int = const 0 (used reg = )
38144 99A8           31C0                       xor	ax,ax
38145 99AA           50                         push	ax
38146                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38147 99AB           E8         F8D3            call	_dispi_set_enable
38148 99AE           44                         inc	sp
38149 99AF           44                         inc	sp
38150                                           !BCC_EOS
38151                                           ! 8047                 mode=(BX & 0xff);
38152                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
38153 99B0           8A46         06            mov	al,6[bp]
38154                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
38155 99B3           8846         F5            mov	-$B[bp],al
38156                                           !BCC_EOS
38157                                           ! 8048                 biosfn_set_video_mode(mode);
38158                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
38159 99B6           8A46         F5            mov	al,-$B[bp]
38160 99B9           30E4                       xor	ah,ah
38161 99BB           50                         push	ax
38162                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
38163 99BC           E8         A239            call	_biosfn_set_video_mode
38164 99BF           44                         inc	sp
38165 99C0           44                         inc	sp
38166                                           !BCC_EOS
38167                                           ! 8049                 result = 0x4f;
38168                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
38169 99C1           B8                   004F  mov	ax,*$4F
38170 99C4           8946         FC            mov	-4[bp],ax
38171                                           !BCC_EOS
38172                                           ! 8050         }
38173 99C7           44                         inc	sp
38174 99C8           44                         inc	sp
38175                                           ! 8051         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
38176                       000099C9            .307:
38177                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
38178 99C9           8D5E         FA            lea	bx,-6[bp]
38179 99CC           53                         push	bx
38180                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
38181 99CD           FF76         F8            push	-8[bp]
38182                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
38183 99D0           FF76         06            push	6[bp]
38184                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
38185 99D3           E8         FA7D            call	_mode_info_find_mode
38186 99D6           83C4                   06  add	sp,*6
38187                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
38188 99D9           8946         FA            mov	-6[bp],ax
38189                                           !BCC_EOS
38190                                           ! 8052         if (cur_info != 0)
38191                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
38192 99DC           8B46         FA            mov	ax,-6[bp]
38193 99DF           85C0                       test	ax,ax
38194 99E1         0F84         00B5            beq 	.309
38195                       000099E5            .30A:
38196                                           ! 8053         {
38197                                           ! 8054                 printf("VBE found mode %x, setting:\n", BX);
38198                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38199 99E5           FF76         06            push	6[bp]
38200                                           ! Debug: list * char = .30B+0 (used reg = )
38201 99E8           BB                   9F4E  mov	bx,#.30B
38202 99EB           53                         push	bx
38203                                           ! Debug: func () void = printf+0 (used reg = )
38204 99EC           E8         E3D8            call	_printf
38205 99EF           83C4                   04  add	sp,*4
38206                                           !BCC_EOS
38207                                           ! 8055                 printf("\txres%x yres%x bpp%x\n",
38208                                           ! 8056                         cur_info->info.XResolution,
38209                                           ! 8057                         cur_info->info.YResolution,
38210                                           ! 8058                         cur_info->info.BitsPerPixel);
38211 99F2           8B5E         FA            mov	bx,-6[bp]
38212                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
38213 99F5           8A47         1B            mov	al,$1B[bx]
38214 99F8           30E4                       xor	ah,ah
38215 99FA           50                         push	ax
38216 99FB           8B5E         FA            mov	bx,-6[bp]
38217                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
38218 99FE           FF77         16            push	$16[bx]
38219 9A01           8B5E         FA            mov	bx,-6[bp]
38220                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
38221 9A04           FF77         14            push	$14[bx]
38222                                           ! Debug: list * char = .30C+0 (used reg = )
38223 9A07           BB                   9F38  mov	bx,#.30C
38224 9A0A           53                         push	bx
38225                                           ! Debug: func () void = printf+0 (used reg = )
38226 9A0B           E8         E3B9            call	_printf
38227 9A0E           83C4                   08  add	sp,*8
38228                                           !BCC_EOS
38229                                           ! 8059                 dispi_set_enable(0x00);
38230                                           ! Debug: list int = const 0 (used reg = )
38231 9A11           31C0                       xor	ax,ax
38232 9A13           50                         push	ax
38233                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38234 9A14           E8         F86A            call	_dispi_set_enable
38235 9A17           44                         inc	sp
38236 9A18           44                         inc	sp
38237                                           !BCC_EOS
38238                                           ! 8060                 if (cur_info->info.BitsPerPixel == 4)
38239 9A19           8B5E         FA            mov	bx,-6[bp]
38240                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
38241 9A1C           8A47         1B            mov	al,$1B[bx]
38242 9A1F           3C                     04  cmp	al,*4
38243 9A21           75           09            jne 	.30D
38244                       00009A23            .30E:
38245                                           ! 8061                 {
38246                                           ! 8062                   biosfn_set_video_mode(0x6a);
38247                                           ! Debug: list int = const $6A (used reg = )
38248 9A23           B8                   006A  mov	ax,*$6A
38249 9A26           50                         push	ax
38250                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
38251 9A27           E8         A1CE            call	_biosfn_set_video_mode
38252 9A2A           44                         inc	sp
38253 9A2B           44                         inc	sp
38254                                           !BCC_EOS
38255                                           ! 8063                 }
38256                                           ! 8064                 dispi_set_bpp(cur_info->info.BitsPerPixel);
38257                       00009A2C            .30D:
38258 9A2C           8B5E         FA            mov	bx,-6[bp]
38259                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
38260 9A2F           8A47         1B            mov	al,$1B[bx]
38261 9A32           30E4                       xor	ah,ah
38262 9A34           50                         push	ax
38263                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
38264 9A35           E8         F7CE            call	_dispi_set_bpp
38265 9A38           44                         inc	sp
38266 9A39           44                         inc	sp
38267                                           !BCC_EOS
38268                                           ! 8065                 dispi_set_xres(cur_info->info.XResolution);
38269 9A3A           8B5E         FA            mov	bx,-6[bp]
38270                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
38271 9A3D           FF77         14            push	$14[bx]
38272                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
38273 9A40           E8         F78E            call	_dispi_set_xres
38274 9A43           44                         inc	sp
38275 9A44           44                         inc	sp
38276                                           !BCC_EOS
38277                                           ! 8066                 dispi_set_yres(cur_info->info.YResolution);
38278 9A45           8B5E         FA            mov	bx,-6[bp]
38279                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
38280 9A48           FF77         16            push	$16[bx]
38281                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
38282 9A4B           E8         F79A            call	_dispi_set_yres
38283 9A4E           44                         inc	sp
38284 9A4F           44                         inc	sp
38285                                           !BCC_EOS
38286                                           ! 8067         
38287                                           ! 8067         dispi_set_bank(0);
38288                                           ! Debug: list int = const 0 (used reg = )
38289 9A50           31C0                       xor	ax,ax
38290 9A52           50                         push	ax
38291                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
38292 9A53           E8         F849            call	_dispi_set_bank
38293 9A56           44                         inc	sp
38294 9A57           44                         inc	sp
38295                                           !BCC_EOS
38296                                           ! 8068                 dispi_set_enable(0x01 | no_clear | lfb_flag);
38297                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
38298                                           ! Debug: expression subtree swapping
38299 9A58           8A46         F7            mov	al,-9[bp]
38300 9A5B           0C                     01  or	al,*1
38301                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
38302 9A5D           0A46         F6            or	al,-$A[bp]
38303                                           ! Debug: list unsigned char = al+0 (used reg = )
38304 9A60           30E4                       xor	ah,ah
38305 9A62           50                         push	ax
38306                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38307 9A63           E8         F81B            call	_dispi_set_enable
38308 9A66           44                         inc	sp
38309 9A67           44                         inc	sp
38310                                           !BCC_EOS
38311                                           ! 8069                 vga_compat_setup();
38312                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
38313 9A68           E8         F911            call	_vga_compat_setup
38314                                           !BCC_EOS
38315                                           ! 8070                 write_word(0x40,0xBA,BX);
38316                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38317 9A6B           FF76         06            push	6[bp]
38318                                           ! Debug: list int = const $BA (used reg = )
38319 9A6E           B8                   00BA  mov	ax,#$BA
38320 9A71           50                         push	ax
38321                                           ! Debug: list int = const $40 (used reg = )
38322 9A72           B8                   0040  mov	ax,*$40
38323 9A75           50                         push	ax
38324                                           ! Debug: func () void = write_word+0 (used reg = )
38325 9A76           E8         E2E1            call	_write_word
38326 9A79           83C4                   06  add	sp,*6
38327                                           !BCC_EOS
38328                                           ! 8071                 write_byte(0x40,0x87,(0x60 | no_clear));
38329                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
38330                                           ! Debug: expression subtree swapping
38331 9A7C           8A46         F7            mov	al,-9[bp]
38332 9A7F           0C                     60  or	al,*$60
38333                                           ! Debug: list unsigned char = al+0 (used reg = )
38334 9A81           30E4                       xor	ah,ah
38335 9A83           50                         push	ax
38336                                           ! Debug: list int = const $87 (used reg = )
38337 9A84           B8                   0087  mov	ax,#$87
38338 9A87           50                         push	ax
38339                                           ! Debug: list int = const $40 (used reg = )
38340 9A88           B8                   0040  mov	ax,*$40
38341 9A8B           50                         push	ax
38342                                           ! Debug: func () void = write_byte+0 (used reg = )
38343 9A8C           E8         E2B3            call	_write_byte
38344 9A8F           83C4                   06  add	sp,*6
38345                                           !BCC_EOS
38346                                           ! 8072                 result = 0x4f;
38347                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
38348 9A92           B8                   004F  mov	ax,*$4F
38349 9A95           8946         FC            mov	-4[bp],ax
38350                                           !BCC_EOS
38351                                           ! 8073         }
38352                                           ! 8074         else
38353                                           ! 8075         {
38354 9A98           EB           21            jmp .30F
38355                       00009A9A            .309:
38356                                           ! 8076                 printf("VBE *NOT* found mode %x\n" , BX);
38357                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38358 9A9A           FF76         06            push	6[bp]
38359                                           ! Debug: list * char = .310+0 (used reg = )
38360 9A9D           BB                   9F1F  mov	bx,#.310
38361 9AA0           53                         push	bx
38362                                           ! Debug: func () void = printf+0 (used reg = )
38363 9AA1           E8         E323            call	_printf
38364 9AA4           83C4                   04  add	sp,*4
38365                                           !BCC_EOS
38366                                           ! 8077                 result = 0x100;
38367                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
38368 9AA7           B8                   0100  mov	ax,#$100
38369 9AAA           8946         FC            mov	-4[bp],ax
38370                                           !BCC_EOS
38371                                           ! 8078                 if (BX == 3)
38372                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
38373 9AAD           8B46         06            mov	ax,6[bp]
38374 9AB0           3D                   0003  cmp	ax,*3
38375 9AB3           75           06            jne 	.311
38376                       00009AB5            .312:
38377                                           ! 8079                         result = 0x4f;
38378                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
38379 9AB5           B8                   004F  mov	ax,*$4F
38380 9AB8           8946         FC            mov	-4[bp],ax
38381                                           !BCC_EOS
38382                                           ! 8080         }
38383                       00009ABB            .311:
38384                                           ! 8081         write_word(ss, AX, result);
38385                       00009ABB            .30F:
38386                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
38387 9ABB           FF76         FC            push	-4[bp]
38388                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
38389 9ABE           FF76         04            push	4[bp]
38390                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
38391 9AC1           FF76         FE            push	-2[bp]
38392                                           ! Debug: func () void = write_word+0 (used reg = )
38393 9AC4           E8         E293            call	_write_word
38394 9AC7           83C4                   06  add	sp,*6
38395                                           !BCC_EOS
38396                                           ! 8082 }
38397 9ACA           89EC                       mov	sp,bp
38398 9ACC           5D                         pop	bp
38399 9ACD           C3                         ret
38400                                           ! 8083 #asm
38401                                           !BCC_ASM
38402                       00000008            _vbe_biosfn_set_mode.DI	set	8
38403                       00000006            _vbe_biosfn_set_mode.ES	set	6
38404                       00000002            _vbe_biosfn_set_mode.AX	set	2
38405                       00000004            _vbe_biosfn_set_mode.BX	set	4
38406                       00009ACE            vbe_biosfn_return_current_mode:
38407 9ACE           1E                           push ds
38408 9ACF           B8                   0040    mov ax, # 0x40
38409 9AD2           8ED8                         mov ds, ax
38410 9AD4           E8         F7BA              call dispi_get_enable
38411 9AD7           25                   0001    and ax, # 0x01
38412 9ADA           74           09              jz no_vbe_mode
38413 9ADC           BB                   00BA    mov bx, # 0xBA
38414 9ADF           8B07                         mov ax, [bx]
38415 9AE1           89C3                         mov bx, ax
38416 9AE3           75           09              jnz vbe_03_ok
38417                       00009AE5            no_vbe_mode:
38418 9AE5           BB                   0049    mov bx, # 0x49
38419 9AE8           8A07                         mov al, [bx]
38420 9AEA           88C3                         mov bl, al
38421 9AEC           30FF                         xor bh, bh
38422                       00009AEE            vbe_03_ok:
38423 9AEE           B8                   004F    mov ax, #0x004f
38424 9AF1           1F                           pop ds
38425 9AF2           C3                           ret
38426                                           ! 8104 endasm
38427                                           !BCC_ENDASM
38428                                           ! 8105 Bit16u vbe_biosfn_read_video_state_size()
38429                                           ! Register BX used in function vbe_biosfn_set_mode
38430                                           ! 8106 {
38431                                           export	_vbe_biosfn_read_video_state_size
38432                       00009AF3            _vbe_biosfn_read_video_state_size:
38433                                           ! 8107     return 9 * 2;
38434 9AF3           55                         push	bp
38435 9AF4           89E5                       mov	bp,sp
38436 9AF6           B8                   0012  mov	ax,*$12
38437 9AF9           5D                         pop	bp
38438 9AFA           C3                         ret
38439                                           !BCC_EOS
38440                                           ! 8108 }
38441                                           ! 8109 void vbe_biosfn_save_video_state(ES, BX)
38442                                           ! 8110      Bit16u ES; Bit16u BX;
38443                                           export	_vbe_biosfn_save_video_state
38444                       00009AFB            _vbe_biosfn_save_video_state:
38445                                           !BCC_EOS
38446                                           !BCC_EOS
38447                                           ! 8111 {
38448                                           ! 8112     Bit16u enable, i;
38449                                           !BCC_EOS
38450                                           ! 8113     outw(0x01CE,0x4);
38451 9AFB           55                         push	bp
38452 9AFC           89E5                       mov	bp,sp
38453 9AFE           83C4                   FC  add	sp,*-4
38454                                           ! Debug: list int = const 4 (used reg = )
38455 9B01           B8                   0004  mov	ax,*4
38456 9B04           50                         push	ax
38457                                           ! Debug: list int = const $1CE (used reg = )
38458 9B05           B8                   01CE  mov	ax,#$1CE
38459 9B08           50                         push	ax
38460                                           ! Debug: func () void = outw+0 (used reg = )
38461 9B09           E8         E28C            call	_outw
38462 9B0C           83C4                   04  add	sp,*4
38463                                           !BCC_EOS
38464                                           ! 8114     enable = inw(0x01CF);
38465                                           ! Debug: list int = const $1CF (used reg = )
38466 9B0F           B8                   01CF  mov	ax,#$1CF
38467 9B12           50                         push	ax
38468                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38469 9B13           E8         E267            call	_inw
38470 9B16           44                         inc	sp
38471 9B17           44                         inc	sp
38472                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38473 9B18           8946         FE            mov	-2[bp],ax
38474                                           !BCC_EOS
38475                                           ! 8115     write_word(ES, BX, enable);
38476                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38477 9B1B           FF76         FE            push	-2[bp]
38478                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38479 9B1E           FF76         06            push	6[bp]
38480                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38481 9B21           FF76         04            push	4[bp]
38482                                           ! Debug: func () void = write_word+0 (used reg = )
38483 9B24           E8         E233            call	_write_word
38484 9B27           83C4                   06  add	sp,*6
38485                                           !BCC_EOS
38486                                           ! 8116     BX += 2;
38487                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38488 9B2A           8B46         06            mov	ax,6[bp]
38489 9B2D           40                         inc	ax
38490 9B2E           40                         inc	ax
38491 9B2F           8946         06            mov	6[bp],ax
38492                                           !BCC_EOS
38493                                           ! 8117     if (!(enable & 0x01))
38494                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38495 9B32           8A46         FE            mov	al,-2[bp]
38496 9B35           24                     01  and	al,*1
38497 9B37           84C0                       test	al,al
38498 9B39           75           04            jne 	.313
38499                       00009B3B            .314:
38500                                           ! 8118         return;
38501 9B3B           89EC                       mov	sp,bp
38502 9B3D           5D                         pop	bp
38503 9B3E           C3                         ret
38504                                           !BCC_EOS
38505                                           ! 8119     for(i = 0x1; i <= 0x9; i++) {
38506                       00009B3F            .313:
38507                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
38508 9B3F           B8                   0001  mov	ax,*1
38509 9B42           8946         FC            mov	-4[bp],ax
38510                                           !BCC_EOS
38511                                           !BCC_EOS
38512 9B45           EB           3A            jmp .317
38513                       00009B47            .318:
38514                                           ! 8120         if (i != 0x4) {
38515                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
38516 9B47           8B46         FC            mov	ax,-4[bp]
38517 9B4A           3D                   0004  cmp	ax,*4
38518 9B4D           74           2B            je  	.319
38519                       00009B4F            .31A:
38520                                           ! 8121             outw(0x01CE, i);
38521                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38522 9B4F           FF76         FC            push	-4[bp]
38523                                           ! Debug: list int = const $1CE (used reg = )
38524 9B52           B8                   01CE  mov	ax,#$1CE
38525 9B55           50                         push	ax
38526                                           ! Debug: func () void = outw+0 (used reg = )
38527 9B56           E8         E23F            call	_outw
38528 9B59           83C4                   04  add	sp,*4
38529                                           !BCC_EOS
38530                                           ! 8122             write_word(ES, BX, inw(0x01CF));
38531                                           ! Debug: list int = const $1CF (used reg = )
38532 9B5C           B8                   01CF  mov	ax,#$1CF
38533 9B5F           50                         push	ax
38534                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38535 9B60           E8         E21A            call	_inw
38536 9B63           44                         inc	sp
38537 9B64           44                         inc	sp
38538                                           ! Debug: list unsigned short = ax+0 (used reg = )
38539 9B65           50                         push	ax
38540                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38541 9B66           FF76         06            push	6[bp]
38542                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38543 9B69           FF76         04            push	4[bp]
38544                                           ! Debug: func () void = write_word+0 (used reg = )
38545 9B6C           E8         E1EB            call	_write_word
38546 9B6F           83C4                   06  add	sp,*6
38547                                           !BCC_EOS
38548                                           ! 8123             BX += 2;
38549                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38550 9B72           8B46         06            mov	ax,6[bp]
38551 9B75           40                         inc	ax
38552 9B76           40                         inc	ax
38553 9B77           8946         06            mov	6[bp],ax
38554                                           !BCC_EOS
38555                                           ! 8124         }
38556                                           ! 8125     }
38557                       00009B7A            .319:
38558                                           ! 8126 }
38559                       00009B7A            .316:
38560                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38561 9B7A           8B46         FC            mov	ax,-4[bp]
38562 9B7D           40                         inc	ax
38563 9B7E           8946         FC            mov	-4[bp],ax
38564                       00009B81            .317:
38565                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38566 9B81           8B46         FC            mov	ax,-4[bp]
38567 9B84           3D                   0009  cmp	ax,*9
38568 9B87           76           BE            jbe	.318
38569                       00009B89            .31B:
38570                       00009B89            .315:
38571 9B89           89EC                       mov	sp,bp
38572 9B8B           5D                         pop	bp
38573 9B8C           C3                         ret
38574                                           ! 8127 void vbe_biosfn_restore_video_state(ES, BX)
38575                                           ! 8128      Bit16u ES; Bit16u BX;
38576                                           export	_vbe_biosfn_restore_video_state
38577                       00009B8D            _vbe_biosfn_restore_video_state:
38578                                           !BCC_EOS
38579                                           !BCC_EOS
38580                                           ! 8129 {
38581                                           ! 8130     Bit16u enable, i;
38582                                           !BCC_EOS
38583                                           ! 8131     enable = read_word(ES, BX);
38584 9B8D           55                         push	bp
38585 9B8E           89E5                       mov	bp,sp
38586 9B90           83C4                   FC  add	sp,*-4
38587                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38588 9B93           FF76         06            push	6[bp]
38589                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38590 9B96           FF76         04            push	4[bp]
38591                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38592 9B99           E8         E193            call	_read_word
38593 9B9C           83C4                   04  add	sp,*4
38594                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38595 9B9F           8946         FE            mov	-2[bp],ax
38596                                           !BCC_EOS
38597                                           ! 8132     BX += 2;
38598                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38599 9BA2           8B46         06            mov	ax,6[bp]
38600 9BA5           40                         inc	ax
38601 9BA6           40                         inc	ax
38602 9BA7           8946         06            mov	6[bp],ax
38603                                           !BCC_EOS
38604                                           ! 8133     if (!(enable & 0x01)) {
38605                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38606 9BAA           8A46         FE            mov	al,-2[bp]
38607 9BAD           24                     01  and	al,*1
38608 9BAF           84C0                       test	al,al
38609 9BB1           75           1E            jne 	.31C
38610                       00009BB3            .31D:
38611                                           ! 8134         outw(0x01CE,0x4);
38612                                           ! Debug: list int = const 4 (used reg = )
38613 9BB3           B8                   0004  mov	ax,*4
38614 9BB6           50                         push	ax
38615                                           ! Debug: list int = const $1CE (used reg = )
38616 9BB7           B8                   01CE  mov	ax,#$1CE
38617 9BBA           50                         push	ax
38618                                           ! Debug: func () void = outw+0 (used reg = )
38619 9BBB           E8         E1DA            call	_outw
38620 9BBE           83C4                   04  add	sp,*4
38621                                           !BCC_EOS
38622                                           ! 8135         outw(0x01CF, enable);
38623                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38624 9BC1           FF76         FE            push	-2[bp]
38625                                           ! Debug: list int = const $1CF (used reg = )
38626 9BC4           B8                   01CF  mov	ax,#$1CF
38627 9BC7           50                         push	ax
38628                                           ! Debug: func () void = outw+0 (used reg = )
38629 9BC8           E8         E1CD            call	_outw
38630 9BCB           83C4                   04  add	sp,*4
38631                                           !BCC_EOS
38632                                           ! 8136     } else {
38633 9BCE           E9         00E5            br 	.31E
38634                       00009BD1            .31C:
38635                                           ! 8137         outw(0x01CE, 0x1);
38636                                           ! Debug: list int = const 1 (used reg = )
38637 9BD1           B8                   0001  mov	ax,*1
38638 9BD4           50                         push	ax
38639                                           ! Debug: list int = const $1CE (used reg = )
38640 9BD5           B8                   01CE  mov	ax,#$1CE
38641 9BD8           50                         push	ax
38642                                           ! Debug: func () void = outw+0 (used reg = )
38643 9BD9           E8         E1BC            call	_outw
38644 9BDC           83C4                   04  add	sp,*4
38645                                           !BCC_EOS
38646                                           ! 8138         outw(0x01CF, read_word(ES, BX));
38647                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38648 9BDF           FF76         06            push	6[bp]
38649                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38650 9BE2           FF76         04            push	4[bp]
38651                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38652 9BE5           E8         E147            call	_read_word
38653 9BE8           83C4                   04  add	sp,*4
38654                                           ! Debug: list unsigned short = ax+0 (used reg = )
38655 9BEB           50                         push	ax
38656                                           ! Debug: list int = const $1CF (used reg = )
38657 9BEC           B8                   01CF  mov	ax,#$1CF
38658 9BEF           50                         push	ax
38659                                           ! Debug: func () void = outw+0 (used reg = )
38660 9BF0           E8         E1A5            call	_outw
38661 9BF3           83C4                   04  add	sp,*4
38662                                           !BCC_EOS
38663                                           ! 8139         BX += 2;
38664                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38665 9BF6           8B46         06            mov	ax,6[bp]
38666 9BF9           40                         inc	ax
38667 9BFA           40                         inc	ax
38668 9BFB           8946         06            mov	6[bp],ax
38669                                           !BCC_EOS
38670                                           ! 8140         outw(0x01CE, 0x2);
38671                                           ! Debug: list int = const 2 (used reg = )
38672 9BFE           B8                   0002  mov	ax,*2
38673 9C01           50                         push	ax
38674                                           ! Debug: list int = const $1CE (used reg = )
38675 9C02           B8                   01CE  mov	ax,#$1CE
38676 9C05           50                         push	ax
38677                                           ! Debug: func () void = outw+0 (used reg = )
38678 9C06           E8         E18F            call	_outw
38679 9C09           83C4                   04  add	sp,*4
38680                                           !BCC_EOS
38681                                           ! 8141         outw(0x01CF, read_word(ES, BX));
38682                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38683 9C0C           FF76         06            push	6[bp]
38684                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38685 9C0F           FF76         04            push	4[bp]
38686                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38687 9C12           E8         E11A            call	_read_word
38688 9C15           83C4                   04  add	sp,*4
38689                                           ! Debug: list unsigned short = ax+0 (used reg = )
38690 9C18           50                         push	ax
38691                                           ! Debug: list int = const $1CF (used reg = )
38692 9C19           B8                   01CF  mov	ax,#$1CF
38693 9C1C           50                         push	ax
38694                                           ! Debug: func () void = outw+0 (used reg = )
38695 9C1D           E8         E178            call	_outw
38696 9C20           83C4                   04  add	sp,*4
38697                                           !BCC_EOS
38698                                           ! 8142         BX += 2;
38699                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38700 9C23           8B46         06            mov	ax,6[bp]
38701 9C26           40                         inc	ax
38702 9C27           40                         inc	ax
38703 9C28           8946         06            mov	6[bp],ax
38704                                           !BCC_EOS
38705                                           ! 8143         outw(0x01CE, 0x3);
38706                                           ! Debug: list int = const 3 (used reg = )
38707 9C2B           B8                   0003  mov	ax,*3
38708 9C2E           50                         push	ax
38709                                           ! Debug: list int = const $1CE (used reg = )
38710 9C2F           B8                   01CE  mov	ax,#$1CE
38711 9C32           50                         push	ax
38712                                           ! Debug: func () void = outw+0 (used reg = )
38713 9C33           E8         E162            call	_outw
38714 9C36           83C4                   04  add	sp,*4
38715                                           !BCC_EOS
38716                                           ! 8144         outw(0x01CF, read_word(ES, BX));
38717                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38718 9C39           FF76         06            push	6[bp]
38719                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38720 9C3C           FF76         04            push	4[bp]
38721                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38722 9C3F           E8         E0ED            call	_read_word
38723 9C42           83C4                   04  add	sp,*4
38724                                           ! Debug: list unsigned short = ax+0 (used reg = )
38725 9C45           50                         push	ax
38726                                           ! Debug: list int = const $1CF (used reg = )
38727 9C46           B8                   01CF  mov	ax,#$1CF
38728 9C49           50                         push	ax
38729                                           ! Debug: func () void = outw+0 (used reg = )
38730 9C4A           E8         E14B            call	_outw
38731 9C4D           83C4                   04  add	sp,*4
38732                                           !BCC_EOS
38733                                           ! 8145         BX += 2;
38734                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38735 9C50           8B46         06            mov	ax,6[bp]
38736 9C53           40                         inc	ax
38737 9C54           40                         inc	ax
38738 9C55           8946         06            mov	6[bp],ax
38739                                           !BCC_EOS
38740                                           ! 8146         outw(0x01CE,0x4);
38741                                           ! Debug: list int = const 4 (used reg = )
38742 9C58           B8                   0004  mov	ax,*4
38743 9C5B           50                         push	ax
38744                                           ! Debug: list int = const $1CE (used reg = )
38745 9C5C           B8                   01CE  mov	ax,#$1CE
38746 9C5F           50                         push	ax
38747                                           ! Debug: func () void = outw+0 (used reg = )
38748 9C60           E8         E135            call	_outw
38749 9C63           83C4                   04  add	sp,*4
38750                                           !BCC_EOS
38751                                           ! 8147         outw(0x01CF, enable);
38752                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38753 9C66           FF76         FE            push	-2[bp]
38754                                           ! Debug: list int = const $1CF (used reg = )
38755 9C69           B8                   01CF  mov	ax,#$1CF
38756 9C6C           50                         push	ax
38757                                           ! Debug: func () void = outw+0 (used reg = )
38758 9C6D           E8         E128            call	_outw
38759 9C70           83C4                   04  add	sp,*4
38760                                           !BCC_EOS
38761                                           ! 8148         for(i = 0x5; i <= 0x9; i++) {
38762                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
38763 9C73           B8                   0005  mov	ax,*5
38764 9C76           8946         FC            mov	-4[bp],ax
38765                                           !BCC_EOS
38766                                           !BCC_EOS
38767 9C79           EB           33            jmp .321
38768                       00009C7B            .322:
38769                                           ! 8149             outw(0x01CE, i);
38770                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38771 9C7B           FF76         FC            push	-4[bp]
38772                                           ! Debug: list int = const $1CE (used reg = )
38773 9C7E           B8                   01CE  mov	ax,#$1CE
38774 9C81           50                         push	ax
38775                                           ! Debug: func () void = outw+0 (used reg = )
38776 9C82           E8         E113            call	_outw
38777 9C85           83C4                   04  add	sp,*4
38778                                           !BCC_EOS
38779                                           ! 8150             outw(0x01CF, read_word(ES, BX));
38780                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38781 9C88           FF76         06            push	6[bp]
38782                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38783 9C8B           FF76         04            push	4[bp]
38784                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38785 9C8E           E8         E09E            call	_read_word
38786 9C91           83C4                   04  add	sp,*4
38787                                           ! Debug: list unsigned short = ax+0 (used reg = )
38788 9C94           50                         push	ax
38789                                           ! Debug: list int = const $1CF (used reg = )
38790 9C95           B8                   01CF  mov	ax,#$1CF
38791 9C98           50                         push	ax
38792                                           ! Debug: func () void = outw+0 (used reg = )
38793 9C99           E8         E0FC            call	_outw
38794 9C9C           83C4                   04  add	sp,*4
38795                                           !BCC_EOS
38796                                           ! 8151             BX += 2;
38797                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38798 9C9F           8B46         06            mov	ax,6[bp]
38799 9CA2           40                         inc	ax
38800 9CA3           40                         inc	ax
38801 9CA4           8946         06            mov	6[bp],ax
38802                                           !BCC_EOS
38803                                           ! 8152         }
38804                                           ! 8153     }
38805                       00009CA7            .320:
38806                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38807 9CA7           8B46         FC            mov	ax,-4[bp]
38808 9CAA           40                         inc	ax
38809 9CAB           8946         FC            mov	-4[bp],ax
38810                       00009CAE            .321:
38811                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38812 9CAE           8B46         FC            mov	ax,-4[bp]
38813 9CB1           3D                   0009  cmp	ax,*9
38814 9CB4           76           C5            jbe	.322
38815                       00009CB6            .323:
38816                       00009CB6            .31F:
38817                                           ! 8154 }
38818                       00009CB6            .31E:
38819 9CB6           89EC                       mov	sp,bp
38820 9CB8           5D                         pop	bp
38821 9CB9           C3                         ret
38822                                           ! 8155 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
38823                                           ! 8156 Bit16u *AX; Bit16u 
38824                                           export	_vbe_biosfn_save_restore_state
38825                       00009CBA            _vbe_biosfn_save_restore_state:
38826                                           !BCC_EOS
38827                                           ! 8156 CX; Bit16u DX; Bit16u ES; Bit16u *BX;
38828                                           !BCC_EOS
38829                                           !BCC_EOS
38830                                           !BCC_EOS
38831                                           !BCC_EOS
38832                                           ! 8157 {
38833                                           ! 8158     Bit16u ss=get_SS();
38834 9CBA           55                         push	bp
38835 9CBB           89E5                       mov	bp,sp
38836 9CBD           4C                         dec	sp
38837 9CBE           4C                         dec	sp
38838                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38839 9CBF           E8         E0E6            call	_get_SS
38840                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38841 9CC2           8946         FE            mov	-2[bp],ax
38842                                           !BCC_EOS
38843                                           ! 8159     Bit16u result, val;
38844                                           !BCC_EOS
38845                                           ! 8160     result = 0x4f;
38846 9CC5           83C4                   FC  add	sp,*-4
38847                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
38848 9CC8           B8                   004F  mov	ax,*$4F
38849 9CCB           8946         FC            mov	-4[bp],ax
38850                                           !BCC_EOS
38851                                           ! 8161     switch(( DX & 0x00ff )) {
38852                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
38853 9CCE           8A46         08            mov	al,8[bp]
38854 9CD1           E9         00D0            br 	.326
38855                                           ! 8162     case 0x00:
38856                                           ! 8163         val = biosfn_read_video_state_size2(CX);
38857                       00009CD4            .327:
38858                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
38859 9CD4           FF76         06            push	6[bp]
38860                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
38861 9CD7           E8         D343            call	_biosfn_read_video_state_size2
38862 9CDA           44                         inc	sp
38863 9CDB           44                         inc	sp
38864                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38865 9CDC           8946         FA            mov	-6[bp],ax
38866                                           !BCC_EOS
38867                                           ! 8164         printf("VGA state size=%x\n", val);
38868                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38869 9CDF           FF76         FA            push	-6[bp]
38870                                           ! Debug: list * char = .328+0 (used reg = )
38871 9CE2           BB                   9F0C  mov	bx,#.328
38872 9CE5           53                         push	bx
38873                                           ! Debug: func () void = printf+0 (used reg = )
38874 9CE6           E8         E0DE            call	_printf
38875 9CE9           83C4                   04  add	sp,*4
38876                                           !BCC_EOS
38877                                           ! 8165         if (CX & 8)
38878                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38879 9CEC           8A46         06            mov	al,6[bp]
38880 9CEF           24                     08  and	al,*8
38881 9CF1           84C0                       test	al,al
38882 9CF3           74           09            je  	.329
38883                       00009CF5            .32A:
38884                                           ! 8166             val += vbe_biosfn_read_video_state_size();
38885                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
38886 9CF5           E8         FDFB            call	_vbe_biosfn_read_video_state_size
38887                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38888 9CF8           0346         FA            add	ax,-6[bp]
38889 9CFB           8946         FA            mov	-6[bp],ax
38890                                           !BCC_EOS
38891                                           ! 8167         write_word(ss, BX, val);
38892                       00009CFE            .329:
38893                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38894 9CFE           FF76         FA            push	-6[bp]
38895                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
38896 9D01           FF76         0C            push	$C[bp]
38897                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38898 9D04           FF76         FE            push	-2[bp]
38899                                           ! Debug: func () void = write_word+0 (used reg = )
38900 9D07           E8         E050            call	_write_word
38901 9D0A           83C4                   06  add	sp,*6
38902                                           !BCC_EOS
38903                                           ! 8168         break;
38904 9D0D           E9         00A6            br 	.324
38905                                           !BCC_EOS
38906                                           ! 8169     case 0x01:
38907                                           ! 8170         val = read_word(ss, BX);
38908                       00009D10            .32B:
38909                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38910 9D10           FF76         0C            push	$C[bp]
38911                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38912 9D13           FF76         FE            push	-2[bp]
38913                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38914 9D16           E8         E016            call	_read_word
38915 9D19           83C4                   04  add	sp,*4
38916                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38917 9D1C           8946         FA            mov	-6[bp],ax
38918                                           !BCC_EOS
38919                                           ! 8171         val = biosfn_save_video_state(CX, ES, val);
38920                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38921 9D1F           FF76         FA            push	-6[bp]
38922                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38923 9D22           FF76         0A            push	$A[bp]
38924                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38925 9D25           FF76         06            push	6[bp]
38926                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
38927 9D28           E8         D35D            call	_biosfn_save_video_state
38928 9D2B           83C4                   06  add	sp,*6
38929                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38930 9D2E           8946         FA            mov	-6[bp],ax
38931                                           !BCC_EOS
38932                                           ! 8172         printf("VGA save_state offset=%x\n", val);
38933                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38934 9D31           FF76         FA            push	-6[bp]
38935                                           ! Debug: list * char = .32C+0 (used reg = )
38936 9D34           BB                   9EF2  mov	bx,#.32C
38937 9D37           53                         push	bx
38938                                           ! Debug: func () void = printf+0 (used reg = )
38939 9D38           E8         E08C            call	_printf
38940 9D3B           83C4                   04  add	sp,*4
38941                                           !BCC_EOS
38942                                           ! 8173         if (CX & 8)
38943                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38944 9D3E           8A46         06            mov	al,6[bp]
38945 9D41           24                     08  and	al,*8
38946 9D43           84C0                       test	al,al
38947 9D45           74           0C            je  	.32D
38948                       00009D47            .32E:
38949                                           ! 8174             vbe_biosfn_save_video_state(ES, val);
38950                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38951 9D47           FF76         FA            push	-6[bp]
38952                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38953 9D4A           FF76         0A            push	$A[bp]
38954                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
38955 9D4D           E8         FDAB            call	_vbe_biosfn_save_video_state
38956 9D50           83C4                   04  add	sp,*4
38957                                           !BCC_EOS
38958                                           ! 8175         break;
38959                       00009D53            .32D:
38960 9D53           EB           61            jmp .324
38961                                           !BCC_EOS
38962                                           ! 8176     case 0x02:
38963                                           ! 8177         val = read_word(ss, BX);
38964                       00009D55            .32F:
38965                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38966 9D55           FF76         0C            push	$C[bp]
38967                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38968 9D58           FF76         FE            push	-2[bp]
38969                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38970 9D5B           E8         DFD1            call	_read_word
38971 9D5E           83C4                   04  add	sp,*4
38972                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38973 9D61           8946         FA            mov	-6[bp],ax
38974                                           !BCC_EOS
38975                                           ! 8178         val = biosfn_restore_video_state(CX, ES, val);
38976                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38977 9D64           FF76         FA            push	-6[bp]
38978                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38979 9D67           FF76         0A            push	$A[bp]
38980                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38981 9D6A           FF76         06            push	6[bp]
38982                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
38983 9D6D           E8         D8E2            call	_biosfn_restore_video_state
38984 9D70           83C4                   06  add	sp,*6
38985                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38986 9D73           8946         FA            mov	-6[bp],ax
38987                                           !BCC_EOS
38988                                           ! 8179         printf("VGA restore_state offset=%x\n", val);
38989                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38990 9D76           FF76         FA            push	-6[bp]
38991                                           ! Debug: list * char = .330+0 (used reg = )
38992 9D79           BB                   9ED5  mov	bx,#.330
38993 9D7C           53                         push	bx
38994                                           ! Debug: func () void = printf+0 (used reg = )
38995 9D7D           E8         E047            call	_printf
38996 9D80           83C4                   04  add	sp,*4
38997                                           !BCC_EOS
38998                                           ! 8180         if (CX & 8)
38999                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
39000 9D83           8A46         06            mov	al,6[bp]
39001 9D86           24                     08  and	al,*8
39002 9D88           84C0                       test	al,al
39003 9D8A           74           0C            je  	.331
39004                       00009D8C            .332:
39005                                           ! 8181             vbe_biosfn_restore_video_state(ES, val);
39006                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39007 9D8C           FF76         FA            push	-6[bp]
39008                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
39009 9D8F           FF76         0A            push	$A[bp]
39010                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
39011 9D92           E8         FDF8            call	_vbe_biosfn_restore_video_state
39012 9D95           83C4                   04  add	sp,*4
39013                                           !BCC_EOS
39014                                           ! 8182         break;
39015                       00009D98            .331:
39016 9D98           EB           1C            jmp .324
39017                                           !BCC_EOS
39018                                           ! 8183     default:
39019                                           ! 8184         result = 0x100;
39020                       00009D9A            .333:
39021                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
39022 9D9A           B8                   0100  mov	ax,#$100
39023 9D9D           8946         FC            mov	-4[bp],ax
39024                                           !BCC_EOS
39025                                           ! 8185         break;
39026 9DA0           EB           14            jmp .324
39027                                           !BCC_EOS
39028                                           ! 8186     }
39029                                           ! 8187     write_word(ss, AX, result);
39030 9DA2           EB           12            jmp .324
39031                       00009DA4            .326:
39032 9DA4           2C                     00  sub	al,*0
39033 9DA6         0F84         FF2A            beq 	.327
39034 9DAA           2C                     01  sub	al,*1
39035 9DAC         0F84         FF60            beq 	.32B
39036 9DB0           2C                     01  sub	al,*1
39037 9DB2           74           A1            je 	.32F
39038 9DB4           EB           E4            jmp	.333
39039                       00009DB6            .324:
39040                       FFFFFFF8            ..FFF4	=	-8
39041                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
39042 9DB6           FF76         FC            push	-4[bp]
39043                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
39044 9DB9           FF76         04            push	4[bp]
39045                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
39046 9DBC           FF76         FE            push	-2[bp]
39047                                           ! Debug: func () void = write_word+0 (used reg = )
39048 9DBF           E8         DF98            call	_write_word
39049 9DC2           83C4                   06  add	sp,*6
39050                                           !BCC_EOS
39051                                           ! 8188 }
39052 9DC5           89EC                       mov	sp,bp
39053 9DC7           5D                         pop	bp
39054 9DC8           C3                         ret
39055                                           ! 8189 #asm
39056                                           !BCC_ASM
39057                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39058                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39059                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39060                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39061                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39062                       00009DC9            vbe_biosfn_display_window_control:
39063 9DC9           80FB                   00    cmp bl, #0x00
39064 9DCC           75           24              jne vbe_05_failed
39065 9DCE           80FF                   01    cmp bh, #0x01
39066 9DD1           74           16              je get_display_window
39067 9DD3           72           04              jb set_display_window
39068 9DD5           B8                   0100    mov ax, #0x0100
39069 9DD8           C3                           ret
39070                       00009DD9            set_display_window:
39071 9DD9           89D0                         mov ax, dx
39072 9DDB           E8         F4C1              call _dispi_set_bank
39073 9DDE           E8         F4CE              call dispi_get_bank
39074 9DE1           39D0                         cmp ax, dx
39075 9DE3           75           0D              jne vbe_05_failed
39076 9DE5           B8                   004F    mov ax, #0x004f
39077 9DE8           C3                           ret
39078                       00009DE9            get_display_window:
39079 9DE9           E8         F4C3              call dispi_get_bank
39080 9DEC           89C2                         mov dx, ax
39081 9DEE           B8                   004F    mov ax, #0x004f
39082 9DF1           C3                           ret
39083                       00009DF2            vbe_05_failed:
39084 9DF2           B8                   014F    mov ax, #0x014f
39085 9DF5           C3                           ret
39086                                           ! 8214 endasm
39087                                           !BCC_ENDASM
39088                                           ! 8215 #asm
39089                                           !BCC_ASM
39090                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39091                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39092                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39093                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39094                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39095                       00009DF6            vbe_biosfn_set_get_logical_scan_line_length:
39096 9DF6           89C8                         mov ax, cx
39097 9DF8           80FB                   01    cmp bl, #0x01
39098 9DFB           74           24              je get_logical_scan_line_length
39099 9DFD           80FB                   02    cmp bl, #0x02
39100 9E00           74           06              je set_logical_scan_line_bytes
39101 9E02           72           1A              jb set_logical_scan_line_pixels
39102 9E04           B8                   0100    mov ax, #0x0100
39103 9E07           C3                           ret
39104                       00009E08            set_logical_scan_line_bytes:
39105 9E08           50                           push ax
39106 9E09           E8         F418              call dispi_get_bpp
39107 9E0C           30FF                         xor bh, bh
39108 9E0E           88E3                         mov bl, ah
39109 9E10           08DB                         or bl, bl
39110 9E12           75           05              jnz no_4bpp_1
39111 9E14           C1E0                   03    shl ax, #3
39112 9E17           B3                     01    mov bl, #1
39113                       00009E19            no_4bpp_1:
39114 9E19           31D2                         xor dx, dx
39115 9E1B           58                           pop ax
39116 9E1C           F7F3                         div bx
39117                       00009E1E            set_logical_scan_line_pixels:
39118 9E1E           E8         F52C              call dispi_set_virt_width
39119                       00009E21            get_logical_scan_line_length:
39120 9E21           E8         F400              call dispi_get_bpp
39121 9E24           30FF                         xor bh, bh
39122 9E26           88E3                         mov bl, ah
39123 9E28           E8         F535              call dispi_get_virt_width
39124 9E2B           89C1                         mov cx, ax
39125 9E2D           08DB                         or bl, bl
39126 9E2F           75           05              jnz no_4bpp_2
39127 9E31           C1E8                   03    shr ax, #3
39128 9E34           B3                     01    mov bl, #1
39129                       00009E36            no_4bpp_2:
39130 9E36           F7E3                         mul bx
39131 9E38           89C3                         mov bx, ax
39132 9E3A           E8         F531              call dispi_get_virt_height
39133 9E3D           89C2                         mov dx, ax
39134 9E3F           B8                   004F    mov ax, #0x004f
39135 9E42           C3                           ret
39136                                           ! 8257 endasm
39137                                           !BCC_ENDASM
39138                                           ! 8258 #asm
39139                                           !BCC_ASM
39140                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39141                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39142                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39143                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39144                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39145                       00009E43            vbe_biosfn_set_get_display_start:
39146 9E43           80FB                   80    cmp bl, #0x80
39147 9E46           74           0B              je set_display_start
39148 9E48           80FB                   01    cmp bl, #0x01
39149 9E4B           74           14              je get_display_start
39150 9E4D           72           04              jb set_display_start
39151 9E4F           B8                   0100    mov ax, #0x0100
39152 9E52           C3                           ret
39153                       00009E53            set_display_start:
39154 9E53           89C8                         mov ax, cx
39155 9E55           E8         F49C              call dispi_set_x_offset
39156 9E58           89D0                         mov ax, dx
39157 9E5A           E8         F4B5              call dispi_set_y_offset
39158 9E5D           B8                   004F    mov ax, #0x004f
39159 9E60           C3                           ret
39160                       00009E61            get_display_start:
39161 9E61           E8         F4A0              call dispi_get_x_offset
39162 9E64           89C1                         mov cx, ax
39163 9E66           E8         F4B9              call dispi_get_y_offset
39164 9E69           89C2                         mov dx, ax
39165 9E6B           30FF                         xor bh, bh
39166 9E6D           B8                   004F    mov ax, #0x004f
39167 9E70           C3                           ret
39168                                           ! 8282 endasm
39169                                           !BCC_ENDASM
39170                                           ! 8283 #asm
39171                                           !BCC_ASM
39172                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39173                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39174                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39175                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39176                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39177                       00009E71            vbe_biosfn_set_get_dac_palette_format:
39178 9E71           80FB                   01    cmp bl, #0x01
39179 9E74           74           1E              je get_dac_palette_format
39180 9E76           72           04              jb set_dac_palette_format
39181 9E78           B8                   0100    mov ax, #0x0100
39182 9E7B           C3                           ret
39183                       00009E7C            set_dac_palette_format:
39184 9E7C           E8         F412              call dispi_get_enable
39185 9E7F           80FF                   06    cmp bh, #0x06
39186 9E82           74           0A              je set_normal_dac
39187 9E84           80FF                   08    cmp bh, #0x08
39188 9E87           75           1B              jne vbe_08_unsupported
39189 9E89           0D                   0020    or ax, # 0x20
39190 9E8C           75           03              jnz set_dac_mode
39191                       00009E8E            set_normal_dac:
39192 9E8E           25                   FFDF    and ax, #~ 0x20
39193                       00009E91            set_dac_mode:
39194 9E91           E8         F3ED              call _dispi_set_enable
39195                       00009E94            get_dac_palette_format:
39196 9E94           B7                     06    mov bh, #0x06
39197 9E96           E8         F3F8              call dispi_get_enable
39198 9E99           25                   0020    and ax, # 0x20
39199 9E9C           74           02              jz vbe_08_ok
39200 9E9E           B7                     08    mov bh, #0x08
39201                       00009EA0            vbe_08_ok:
39202 9EA0           B8                   004F    mov ax, #0x004f
39203 9EA3           C3                           ret
39204                       00009EA4            vbe_08_unsupported:
39205 9EA4           B8                   014F    mov ax, #0x014f
39206 9EA7           C3                           ret
39207                                           ! 8314 endasm
39208                                           !BCC_ENDASM
39209                                           ! 8315 void vbe_biosfn_set_get_palette_data(AX)
39210                                           ! Register BX used in function vbe_biosfn_save_restore_state
39211                                           ! 8316 {
39212                                           export	_vbe_biosfn_set_get_palette_data
39213                       00009EA8            _vbe_biosfn_set_get_palette_data:
39214                                           ! 8317 }
39215 9EA8           C3                         ret
39216                                           ! 8318 #asm
39217                                           !BCC_ASM
39218                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39219                       00009EA9            vbe_biosfn_return_protected_mode_interface:
39220 9EA9           84DB                         test bl, bl
39221 9EAB           75           11              jnz _fail
39222 9EAD           BF                   C000    mov di, #0xc000
39223 9EB0           8EC7                         mov es, di
39224 9EB2           BF                   90B2    mov di, # vesa_pm_start
39225 9EB5           B9                   91B3    mov cx, # vesa_pm_end
39226 9EB8           29F9                         sub cx, di
39227 9EBA           B8                   004F    mov ax, #0x004f
39228 9EBD           C3                           ret
39229                       00009EBE            _fail:
39230 9EBE           B8                   014F    mov ax, #0x014f
39231 9EC1           C3                           ret
39232                                           ! 8332 endasm
39233                                           !BCC_ENDASM
39234                                           ! 8333 #asm
39235                                           !BCC_ASM
39236                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39237                                           ;; DATA_SEG_DEFS_HERE
39238                                           ! 8335 endasm
39239                                           !BCC_ENDASM
39240                                           ! 8336 #asm
39241                                           !BCC_ASM
39242                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39243 9EC2                        76            .ascii "vgabios ends here"
39244 9ED3                        00            .byte 0x00
39245                       00009ED4            vgabios_end:
39246 9ED4                        CB            .byte 0xCB
39247                                           ;; BLOCK_STRINGS_BEGIN
39248                                           ! 8342 endasm
39249                                           !BCC_ENDASM
39250                                           ! 8343 
39251                                           
39252                       00009ED5            .330:
39253                       00009ED5            .334:
39254 9ED5                        56            .ascii	"VGA restore_state offset=%x"
39255 9EF0                        0A            .byte	$A
39256 9EF1                        00            .byte	0
39257                       00009EF2            .32C:
39258                       00009EF2            .335:
39259 9EF2                        56            .ascii	"VGA save_state offset=%x"
39260 9F0A                        0A            .byte	$A
39261 9F0B                        00            .byte	0
39262                       00009F0C            .328:
39263                       00009F0C            .336:
39264 9F0C                        56            .ascii	"VGA state size=%x"
39265 9F1D                        0A            .byte	$A
39266 9F1E                        00            .byte	0
39267                       00009F1F            .310:
39268                       00009F1F            .337:
39269 9F1F                        56            .ascii	"VBE *NOT* found mode %x"
39270 9F36                        0A            .byte	$A
39271 9F37                        00            .byte	0
39272                       00009F38            .30C:
39273                       00009F38            .338:
39274 9F38                        09            .byte	9
39275 9F39                        78            .ascii	"xres%x yres%x bpp%x"
39276 9F4C                        0A            .byte	$A
39277 9F4D                        00            .byte	0
39278                       00009F4E            .30B:
39279                       00009F4E            .339:
39280 9F4E                        56            .ascii	"VBE found mode %x, setting:"
39281 9F69                        0A            .byte	$A
39282 9F6A                        00            .byte	0
39283                       00009F6B            .2FE:
39284                       00009F6B            .33A:
39285 9F6B                        56            .ascii	"VBE *NOT* found mode %x"
39286 9F82                        0A            .byte	$A
39287 9F83                        00            .byte	0
39288                       00009F84            .2F6:
39289                       00009F84            .33B:
39290 9F84                        56            .ascii	"VBE found mode %x"
39291 9F95                        0A            .byte	$A
39292 9F96                        00            .byte	0
39293                       00009F97            .2F1:
39294                       00009F97            .33C:
39295 9F97                        56            .ascii	"VBE vbe_biosfn_return_mode_information E"
39296 9FBF                        53            .ascii	"S%x DI%x CX%x"
39297 9FCC                        0A            .byte	$A
39298 9FCD                        00            .byte	0
39299                       00009FCE            .2EF:
39300                       00009FCE            .33D:
39301 9FCE                        56            .ascii	"VBE mode %x (xres=%x / bpp=%02x) not sup"
39302 9FF6                        70            .ascii	"ported "
39303 9FFD                        0A            .byte	$A
39304 9FFE                        00            .byte	0
39305                       00009FFF            .2ED:
39306                       00009FFF            .33E:
39307 9FFF                        56            .ascii	"VBE found mode %x => %x"
39308 A016                        0A            .byte	$A
39309 A017                        00            .byte	0
39310                       0000A018            .2E2:
39311                       0000A018            .33F:
39312 A018                        56            .ascii	"VBE correct VESA/VBE2 signature found"
39313 A03D                        0A            .byte	$A
39314 A03E                        00            .byte	0
39315                       0000A03F            .2D8:
39316                       0000A03F            .340:
39317 A03F                        56            .ascii	"VBE vbe_biosfn_return_vbe_info ES%x DI%x"
39318 A067                        20            .ascii	" AX%x"
39319 A06C                        0A            .byte	$A
39320 A06D                        00            .byte	0
39321                       0000A06E            .2B0:
39322                       0000A06E            .341:
39323 A06E                        2D            .ascii	"--> Unknown int10"
39324 A07F                        0A            .byte	$A
39325 A080                        00            .byte	0
39326                       0000A081            .2AF:
39327                       0000A081            .342:
39328 A081                        2D            .ascii	"--> Unimplemented"
39329 A092                        0A            .byte	$A
39330 A093                        00            .byte	0
39331                       0000A094            .249:
39332                       0000A094            .343:
39333 A094                        47            .ascii	"Get font info BH(%02x) was discarded"
39334 A0B8                        0A            .byte	$A
39335 A0B9                        00            .byte	0
39336                       0000A0BA            .147:
39337                       0000A0BA            .344:
39338 A0BA                        53            .ascii	"Scroll in graphics mode "
39339 A0D2                        00            .byte	0
39340                       0000A0D3            .E2:
39341                       0000A0D3            .345:
39342 A0D3                        53            .ascii	"Scroll, address %04x (%04x %04x %02x)"
39343 A0F8                        0A            .byte	$A
39344 A0F9                        00            .byte	0
39345                       0000A0FA            .B7:
39346                       0000A0FA            .346:
39347 A0FA                        53            .ascii	"Set active page %02x address %04x"
39348 A11B                        0A            .byte	$A
39349 A11C                        00            .byte	0
39350                       0000A11D            .5E:
39351                       0000A11D            .347:
39352 A11D                        6D            .ascii	"mode search %02x found line %02x"
39353 A13D                        0A            .byte	$A
39354 A13E                        00            .byte	0
39355                       0000A13F            .3:
39356                       0000A13F            .348:
39357 A13F                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
39358 A167                        20            .ascii	" dx%04x"
39359 A16E                        0A            .byte	$A
39360 A16F                        00            .byte	0
39361 A170                                      .bss
39362                                           
39363                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 369B A   .10                         0 36C8 A   
.100                        0 4D0E A   .101                        0 50F4 A   
.102                        0 50F4 A   .104                        0 50E0 A   
.105                        0 4D43 A   .106                        0 4D43 A   
.107                        0 4DD5 A   .108                        0 4D80 A   
.109                        0 4D6E A   .10A                        0 4D5C A   
.10B                        0 4D55 A   .10C                        0 4D4C A   
.10D                        0 4EF6 A   .10E                        0 4E68 A   
.10F                        0 4DDE A   .11                         0 36C8 A   
.110                        0 4E65 A   .111                        0 4E54 A   
.112                        0 4E5B A   .113                        0 4DE8 A   
.114                        0 4E2C A   .115                        0 4E06 A   
.116                        0 4DFF A   .117                        0 4E54 A   
.118                        0 4E65 A   .119                        0 4EF6 A   
.11A                        0 4EF6 A   .11B                        0 4EE3 A   
.11C                        0 4EEA A   .11D                        0 4E72 A   
.11E                        0 4EAF A   .11F                        0 4E89 A   
.12                         0 36C8 A   .120                        0 4E82 A   
.121                        0 4ED7 A   .122                        0 4EE3 A   
.123                        0 4EE1 A   .124                        0 4EF6 A   
.125                        0 4EF9 A   .126                        0 4F8C A   
.127                        0 4F47 A   .128                        0 4F35 A   
.129                        0 4F23 A   .12A                        0 4F1C A   
.12B                        0 4F15 A   .12C                        0 50D0 A   
.12D                        0 4FAF A   .12E                        0 4F93 A   
.12F                        0 5042 A   .13                         0 36D4 A   
.130                        0 4FB8 A   .131                        0 503F A   
.132                        0 502E A   .133                        0 5035 A   
.134                        0 4FC2 A   .135                        0 5006 A   
.136                        0 4FE0 A   .137                        0 4FD9 A   
.138                        0 502E A   .139                        0 503F A   
.13A                        0 50D0 A   .13B                        0 50D0 A   
.13C                        0 50BD A   .13D                        0 50C4 A   
.13E                        0 504C A   .13F                        0 5089 A   
.14                         0 3703 A   .140                        0 5063 A   
.141                        0 505C A   .142                        0 50B1 A   
.143                        0 50BD A   .144                        0 50BB A   
.145                        0 50D0 A   .146                        0 50D2 A   
.147                        0 A0BA A   .148                        0 5130 A   
.149                        0 512C A   .14A                        0 51EF A   
.14B                        0 5191 A   .14C                        0 51F2 A   
.14D                        0 5223 A   .14F                        0 5219 A   
.15                         0 36F3 A   .150                        0 5201 A   
.151                        0 5209 A   .152                        0 5211 A   
.153                        0 5290 A   .154                        0 5280 A   
.155                        0 529E A   .156                        0 5356 A   
.157                        0 5345 A   .158                        0 534C A   
.159                        0 52A6 A   .15A                        0 5345 A   
.15B                        0 5335 A   .15C                        0 533C A   
.15D                        0 52C3 A   .15E                        0 5325 A   
.15F                        0 530E A   .16                         0 3708 A   
.160                        0 5335 A   .161                        0 5345 A   
.162                        0 5356 A   .163                        0 5568 A   
.164                        0 5558 A   .165                        0 555F A   
.166                        0 53AC A   .167                        0 53D0 A   
.168                        0 53C7 A   .169                        0 5491 A   
.16A                        0 53DE A   .16B                        0 53F9 A   
.16C                        0 53E7 A   .16D                        0 53FE A   
.16E                        0 547B A   .16F                        0 546D A   
.17                         0 371F A   .170                        0 5474 A   
.171                        0 5405 A   .172                        0 5463 A   
.173                        0 541C A   .174                        0 5445 A   
.175                        0 5425 A   .176                        0 5463 A   
.177                        0 547B A   .178                        0 5558 A   
.179                        0 5558 A   .17A                        0 554F A   
.17B                        0 5494 A   .17C                        0 54AF A   
.17D                        0 549D A   .17E                        0 54B4 A   
.17F                        0 5535 A   .18                         0 3733 A   
.180                        0 5527 A   .181                        0 552E A   
.182                        0 54BB A   .183                        0 551D A   
.184                        0 54D2 A   .185                        0 54FD A   
.186                        0 54DB A   .187                        0 551D A   
.188                        0 5535 A   .189                        0 5558 A   
.18A                        0 5568 A   .18B                        0 563C A   
.18C                        0 562C A   .18D                        0 5633 A   
.18E                        0 55B2 A   .18F                        0 562C A   
.19                         0 374C A   .190                        0 561E A   
.191                        0 5625 A   .192                        0 55D8 A   
.193                        0 55FA A   .194                        0 55F4 A   
.195                        0 562C A   .196                        0 563C A   
.197                        0 5670 A   .198                        0 566C A   
.199                        0 573D A   .19A                        0 56D3 A   
.19B                        0 5835 A   .19C                        0 5835 A   
.19D                        0 581D A   .19E                        0 5772 A   
.19F                        0 5816 A   .1A                         0 3766 A   
.1A1                        0 5800 A   .1A2                        0 5786 A   
.1A3                        0 5786 A   .1A4                        0 57AF A   
.1A5                        0 57D8 A   .1A6                        0 57FB A   
.1A7                        0 5835 A   .1A8                        0 5829 A   
.1A9                        0 5869 A   .1AA                        0 5865 A   
.1AB                        0 5938 A   .1AC                        0 58CA A   
.1AD                        0 5935 A   .1AE                        0 5929 A   
.1AF                        0 5900 A   .1B                         0 3774 A   
.1B0                        0 5935 A   .1B1                        0 5A30 A   
.1B2                        0 5A30 A   .1B3                        0 5A18 A   
.1B4                        0 596D A   .1B5                        0 5A11 A   
.1B7                        0 59FB A   .1B8                        0 5981 A   
.1B9                        0 5981 A   .1BA                        0 59AA A   
.1BB                        0 59D3 A   .1BC                        0 59F6 A   
.1BD                        0 5A30 A   .1BE                        0 5A24 A   
.1BF                        0 5ADF A   .1C                         0 37AF A   
.1C0                        0 5ADB A   .1C1                        0 5AF9 A   
.1C2                        0 5AF5 A   .1C3                        0 5D4C A   
.1C5                        0 5D34 A   .1C6                        0 5B0E A   
.1C7                        0 5B0E A   .1C8                        0 5B8F A   
.1C9                        0 5B81 A   .1CA                        0 5BB4 A   
.1CB                        0 5BE6 A   .1CC                        0 5BCA A   
.1CD                        0 5C00 A   .1CE                        0 5C12 A   
.1CF                        0 5C09 A   .1D                         0 37E9 A   
.1D0                        0 5C7E A   .1D1                        0 5C38 A   
.1D2                        0 5CBE A   .1D3                        0 5CD2 A   
.1D4                        0 5CC7 A   .1D5                        0 5CE8 A   
.1D6                        0 5CFD A   .1D7                        0 5D2F A   
.1D8                        0 5D86 A   .1D9                        0 5D82 A   
.1DA                        0 5DA0 A   .1DB                        0 5D9C A   
.1DC                        0 5F37 A   .1DE                        0 5F1F A   
.1DF                        0 5DB5 A   .1E                         0 37FE A   
.1E0                        0 5DB5 A   .1E1                        0 5E49 A   
.1E2                        0 5E3B A   .1E3                        0 5E42 A   
.1E4                        0 5DF7 A   .1E5                        0 5E3B A   
.1E6                        0 5E27 A   .1E7                        0 5E49 A   
.1E8                        0 5E4C A   .1E9                        0 5E78 A   
.1EA                        0 5E6F A   .1EB                        0 5EC3 A   
.1EC                        0 5E9E A   .1ED                        0 5EE4 A   
.1EE                        0 5EE6 A   .1EF                        0 5F15 A   
.1F                         0 381E A   .1F0                        0 5F77 A   
.1F1                        0 5F66 A   .1F2                        0 5FA1 A   
.1F3                        0 5F9D A   .1F4                        0 6202 A   
.1F6                        0 61E1 A   .1F7                        0 5FF2 A   
.1F8                        0 5FF5 A   .1F9                        0 6003 A   
.1FA                        0 5FFC A   .1FB                        0 6006 A   
.1FC                        0 600E A   .1FD                        0 6018 A   
.1FE                        0 6065 A   .1FF                        0 605A A   
.2                          0 367B A   .20                         0 383E A   
.200                        0 6018 A   .201                        0 6065 A   
.202                        0 6068 A   .203                        0 6102 A   
.204                        0 6080 A   .205                        0 60FF A   
.206                        0 60DC A   .207                        0 61D8 A   
.208                        0 61D8 A   .20A                        0 61C2 A   
.20B                        0 6148 A   .20C                        0 6148 A   
.20D                        0 6171 A   .20E                        0 619A A   
.20F                        0 61BD A   .21                         0 385B A   
.210                        0 6218 A   .211                        0 620C A   
.212                        0 6292 A   .213                        0 6222 A   
.214                        0 6262 A   .215                        0 6238 A   
.216                        0 6289 A   .217                        0 6642 A   
.218                        0 6631 A   .219                        0 6638 A   
.21A                        0 657A A   .21B                        0 65ED A   
.21C                        0 65E7 A   .21D                        0 6642 A   
.21E                        0 6723 A   .21F                        0 6713 A   
.22                         0 3876 A   .220                        0 673B A   
.221                        0 6880 A   .222                        0 6871 A   
.223                        0 6878 A   .224                        0 6834 A   
.225                        0 6880 A   .226                        0 6895 A   
.227                        0 688A A   .228                        0 6919 A   
.229                        0 690A A   .22A                        0 6911 A   
.22B                        0 68D0 A   .22C                        0 6919 A   
.22D                        0 692C A   .22E                        0 6923 A   
.22F                        0 69AA A   .23                         0 3893 A   
.230                        0 699B A   .231                        0 69A2 A   
.232                        0 6967 A   .233                        0 69AA A   
.234                        0 69BD A   .235                        0 69B4 A   
.236                        0 6A48 A   .237                        0 6A39 A   
.238                        0 6A40 A   .239                        0 6A05 A   
.23A                        0 6A48 A   .23B                        0 6A5B A   
.23C                        0 6A52 A   .23D                        0 6C11 A   
.23F                        0 6BEC A   .24                         0 38A2 A   
.240                        0 6A98 A   .241                        0 6ACF A   
.242                        0 6B06 A   .243                        0 6B29 A   
.244                        0 6B4C A   .245                        0 6B6F A   
.246                        0 6B92 A   .247                        0 6BB4 A   
.248                        0 6BD6 A   .249                        0 A094 A   
.24A                        0 6C0F A   .24B                        0 6BFF A   
.24C                        0 6DCC A   .24D                        0 6DBA A   
.24E                        0 6E56 A   .24F                        0 6E4A A   
.25                         0 39E2 A   .250                        0 6DFB A   
.251                        0 6E2E A   .252                        0 6E19 A   
.253                        0 6E56 A   .254                        0 6E6E A   
.255                        0 6E5F A   .256                        0 7039 A   
.257                        0 7030 A   .258                        0 704B A   
.259                        0 7042 A   .25A                        0 705D A   
.25B                        0 7054 A   .25C                        0 7310 A   
.25D                        0 70AA A   .25E                        0 7195 A   
.25F                        0 7186 A   .260                        0 718D A   
.261                        0 715A A   .262                        0 7195 A   
.263                        0 7203 A   .264                        0 71F4 A   
.265                        0 71FB A   .266                        0 71C8 A   
.267                        0 7203 A   .268                        0 7256 A   
.269                        0 7247 A   .26A                        0 724E A   
.26B                        0 720A A   .26C                        0 7256 A   
.26D                        0 72A1 A   .26E                        0 7292 A   
.26F                        0 7299 A   .27                         0 398C A   
.270                        0 7266 A   .271                        0 72A1 A   
.272                        0 758B A   .273                        0 731B A   
.274                        0 74BC A   .275                        0 74AD A   
.276                        0 74B4 A   .277                        0 7485 A   
.278                        0 74BC A   .279                        0 764B A   
.27A                        0 7596 A   .27B                        0 7635 A   
.27C                        0 7626 A   .27D                        0 762D A   
.27E                        0 7607 A   .27F                        0 7635 A   
.28                         0 38A8 A   .280                        0 790D A   
.281                        0 7663 A   .282                        0 76D2 A   
.283                        0 76C3 A   .284                        0 76CA A   
.285                        0 7696 A   .286                        0 76D2 A   
.287                        0 7757 A   .288                        0 7748 A   
.289                        0 774F A   .28A                        0 7713 A   
.28B                        0 7741 A   .28C                        0 771B A   
.28D                        0 7757 A   .28E                        0 7779 A   
.28F                        0 7771 A   .29                         0 38A8 A   
.290                        0 781A A   .291                        0 780B A   
.292                        0 7812 A   .293                        0 77D6 A   
.294                        0 781A A   .295                        0 7873 A   
.296                        0 7864 A   .297                        0 786B A   
.298                        0 7837 A   .299                        0 7873 A   
.29A                        0 7B88 A   .29B                        0 7918 A   
.29C                        0 7AB9 A   .29D                        0 7AAA A   
.29E                        0 7AB1 A   .29F                        0 7A82 A   
.2A                         0 38D1 A   .2A0                        0 7AB9 A   
.2A1                        0 7C29 A   .2A2                        0 7B93 A   
.2A3                        0 7C15 A   .2A4                        0 7C06 A   
.2A5                        0 7C0D A   .2A6                        0 7BE6 A   
.2A7                        0 7C15 A   .2A8                        0 7C6B A   
.2A9                        0 7C5D A   .2AA                        0 7C64 A   
.2AB                        0 7C41 A   .2AC                        0 7C5D A   
.2AD                        0 7C55 A   .2AE                        0 7C6B A   
.2AF                        0 A081 A   .2B                         0 38D1 A   
.2B0                        0 A06E A   .2B1                        0 7F00 A   
.2B2                        0 7EEA A   .2B3                        0 7DE6 A   
.2B4                        0 7DFB A   .2B5                        0 7DED A   
.2B6                        0 7EE3 A   .2B7                        0 7ED3 A   
.2B8                        0 7E04 A   .2B9                        0 7E33 A   
.2BA                        0 7E12 A   .2BB                        0 7E0B A   
.2BC                        0 7ED1 A   .2BD                        0 7ED1 A   
.2BE                        0 7E3C A   .2BF                        0 7E60 A   
.2C                         0 38E6 A   .2C0                        0 7E5A A   
.2C1                        0 7ECC A   .2C2                        0 7EBD A   
.2C3                        0 7EC4 A   .2C4                        0 7E73 A   
.2C5                        0 7EA5 A   .2C6                        0 7E92 A   
.2C7                        0 7EB6 A   .2C8                        0 7ECC A   
.2C9                        0 7EE3 A   .2CA                        0 7F00 A   
.2CB                        0 94AE A   .2CC                        0 94A3 A   
.2CD                        0 9460 A   .2CE                        0 949A A   
.2CF                        0 946A A   .2D                         0 38E6 A   
.2D0                        0 947A A   .2D1                        0 9471 A   
.2D2                        0 9498 A   .2D3                        0 948F A   
.2D4                        0 9486 A   .2D5                        0 9498 A   
.2D6                        0 94A3 A   .2D7                        0 94AE A   
.2D8                        0 A03F A   .2D9                        0 95E6 A   
.2DA                        0 95D6 A   .2DB                        0 95B6 A   
.2DC                        0 95AE A   .2DD                        0 95A6 A   
.2DE                        0 959E A   .2DF                        0 95CE A   
.2E                         0 38FB A   .2E0                        0 95C6 A   
.2E1                        0 95BE A   .2E2                        0 A018 A   
.2E3                        0 96AA A   .2E4                        0 965F A   
.2E5                        0 96C2 A   .2E6                        0 9791 A   
.2E7                        0 9783 A   .2E8                        0 96C2 A   
.2E9                        0 9754 A   .2EA                        0 9714 A   
.2EB                        0 970A A   .2EC                        0 96FB A   
.2ED                        0 9FFF A   .2EE                        0 9775 A   
.2EF                        0 9FCE A   .2F                         0 38FB A   
.2F0                        0 9791 A   .2F1                        0 9F97 A   
.2F2                        0 97FB A   .2F3                        0 97FD A   
.2F4                        0 992D A   .2F5                        0 9827 A   
.2F6                        0 9F84 A   .2F7                        0 98AB A   
.2F8                        0 98A3 A   .2F9                        0 989B A   
.2FA                        0 9891 A   .2FB                        0 98CA A   
.2FC                        0 98B9 A   .2FD                        0 993A A   
.2FE                        0 9F6B A   .2FF                        0 996A A   
.3                          0 A13F A   .30                         0 3910 A   
.300                        0 996C A   .301                        0 997C A   
.302                        0 9978 A   .303                        0 997E A   
.304                        0 9990 A   .305                        0 998C A   
.306                        0 9992 A   .307                        0 99C9 A   
.308                        0 99A6 A   .309                        0 9A9A A   
.30A                        0 99E5 A   .30B                        0 9F4E A   
.30C                        0 9F38 A   .30D                        0 9A2C A   
.30E                        0 9A23 A   .30F                        0 9ABB A   
.31                         0 391F A   .310                        0 9F1F A   
.311                        0 9ABB A   .312                        0 9AB5 A   
.313                        0 9B3F A   .314                        0 9B3B A   
.315                        0 9B89 A   .316                        0 9B7A A   
.317                        0 9B81 A   .318                        0 9B47 A   
.319                        0 9B7A A   .31A                        0 9B4F A   
.31B                        0 9B89 A   .31C                        0 9BD1 A   
.31D                        0 9BB3 A   .31E                        0 9CB6 A   
.31F                        0 9CB6 A   .32                         0 393D A   
.320                        0 9CA7 A   .321                        0 9CAE A   
.322                        0 9C7B A   .323                        0 9CB6 A   
.324                        0 9DB6 A   .326                        0 9DA4 A   
.327                        0 9CD4 A   .328                        0 9F0C A   
.329                        0 9CFE A   .32A                        0 9CF5 A   
.32B                        0 9D10 A   .32C                        0 9EF2 A   
.32D                        0 9D53 A   .32E                        0 9D47 A   
.32F                        0 9D55 A   .33                         0 394B A   
.330                        0 9ED5 A   .331                        0 9D98 A   
.332                        0 9D8C A   .333                        0 9D9A A   
.334                        0 9ED5 A   .335                        0 9EF2 A   
.336                        0 9F0C A   .337                        0 9F1F A   
.338                        0 9F38 A   .339                        0 9F4E A   
.33A                        0 9F6B A   .33B                        0 9F84 A   
.33C                        0 9F97 A   .33D                        0 9FCE A   
.33E                        0 9FFF A   .33F                        0 A018 A   
.34                         0 3959 A   .340                        0 A03F A   
.341                        0 A06E A   .342                        0 A081 A   
.343                        0 A094 A   .344                        0 A0BA A   
.345                        0 A0D3 A   .346                        0 A0FA A   
.347                        0 A11D A   .348                        0 A13F A   
.35                         0 3967 A   .36                         0 3987 A   
.37                         0 39E5 A   .38                         0 3A37 A   
.3A                         0 3A29 A   .3B                         0 39EA A   
.3C                         0 39EF A   .3D                         0 3A0D A   
.3E                         0 3A24 A   .3F                         0 3A3A A   
.4                          0 3BF6 A   .40                         0 3A6E A   
.41                         0 3A8A A   .42                         0 3AD3 A   
.44                         0 3AC5 A   .45                         0 3A8F A   
.46                         0 3A9E A   .47                         0 3AAF A   
.48                         0 3AC0 A   .49                         0 3AE0 A   
.4A                         0 3B93 A   .4B                         0 3AE9 A   
.4C                         0 3B91 A   .4E                         0 3B66 A   
.4F                         0 3AEF A   .50                         0 3B02 A   
.51                         0 3B17 A   .52                         0 3B2C A   
.53                         0 3B45 A   .54                         0 3B50 A   
.55                         0 3B5B A   .56                         0 3B8F A   
.57                         0 3B79 A   .58                         0 3B99 A   
.59                         0 3B9B A   .5A                         0 3BED A   
.5B                         0 3BB3 A   .5C                         0 3C16 A   
.5D                         0 3C0E A   .5E                         0 A11D A   
.5F                         0 3C4D A   .6                          0 3BA0 A   
.60                         0 3C49 A   .61                         0 3E20 A   
.62                         0 3CDB A   .63                         0 3D4D A   
.65                         0 3D3D A   .66                         0 3D1B A   
.67                         0 3D23 A   .68                         0 3D2B A   
.69                         0 3D33 A   .6A                         0 3E0A A   
.6B                         0 3DF9 A   .6C                         0 3E00 A   
.6D                         0 3D55 A   .6E                         0 3DD2 A   
.6F                         0 3D76 A   .7                          0 36AA A   
.70                         0 3DF9 A   .71                         0 3E0A A   
.72                         0 3E20 A   .73                         0 3E13 A   
.74                         0 3E70 A   .75                         0 3E61 A   
.76                         0 3E68 A   .77                         0 3E30 A   
.78                         0 3E70 A   .79                         0 3EF5 A   
.7A                         0 3EE6 A   .7B                         0 3EED A   
.7C                         0 3EAE A   .7D                         0 3EF5 A   
.7E                         0 3F3C A   .7F                         0 3F2D A   
.8                          0 3705 A   .80                         0 3F34 A   
.81                         0 3EFC A   .82                         0 3F3C A   
.83                         0 3F57 A   .84                         0 3F52 A   
.85                         0 3F5A A   .86                         0 3FB1 A   
.87                         0 3FA2 A   .88                         0 3FA9 A   
.89                         0 3F71 A   .8A                         0 3FB1 A   
.8B                         0 40B1 A   .8C                         0 3FF0 A   
.8D                         0 402C A   .8E                         0 4006 A   
.8F                         0 40B1 A   .90                         0 4057 A   
.91                         0 4033 A   .92                         0 40B1 A   
.93                         0 41EE A   .94                         0 41E0 A   
.95                         0 4210 A   .96                         0 4201 A   
.97                         0 4208 A   .98                         0 41F5 A   
.99                         0 4210 A   .9A                         0 423C A   
.9B                         0 422E A   .9C                         0 42A1 A   
.9E                         0 4292 A   .9F                         0 4254 A   
.A                          0 36E0 A   .A0                         0 4268 A   
.A1                         0 427C A   .A2                         0 436F A   
.A3                         0 431F A   .A4                         0 4318 A   
.A5                         0 4311 A   .A6                         0 4309 A   
.A7                         0 4348 A   .A8                         0 4333 A   
.A9                         0 435C A   .AA                         0 43D1 A   
.AB                         0 43CD A   .AC                         0 44BC A   
.AD                         0 4404 A   .AE                         0 44F4 A   
.AF                         0 44F0 A   .B                          0 36BC A   
.B0                         0 4546 A   .B1                         0 4542 A   
.B2                         0 4570 A   .B3                         0 456C A   
.B4                         0 4608 A   .B5                         0 459A A   
.B6                         0 462C A   .B7                         0 A0FA A   
.B8                         0 4767 A   .B9                         0 4758 A   
.BA                         0 475F A   .BB                         0 471C A   
.BC                         0 4767 A   .BD                         0 47F2 A   
.BE                         0 47E3 A   .BF                         0 47EA A   
.C                          0 36C8 A   .C0                         0 47B9 A   
.C1                         0 47F2 A   .C2                         0 4912 A   
.C3                         0 4901 A   .C4                         0 4908 A   
.C5                         0 4860 A   .C6                         0 48BF A   
.C7                         0 4869 A   .C8                         0 4901 A   
.C9                         0 4912 A   .CA                         0 49C7 A   
.CB                         0 49B8 A   .CC                         0 49BF A   
.CD                         0 494A A   .CE                         0 498B A   
.CF                         0 4953 A   .D                          0 36C8 A   
.D0                         0 49B8 A   .D1                         0 49C7 A   
.D2                         0 49DD A   .D3                         0 49D9 A   
.D4                         0 49E9 A   .D5                         0 49E5 A   
.D6                         0 4A13 A   .D7                         0 4A0F A   
.D8                         0 4A50 A   .D9                         0 4A3F A   
.DA                         0 4A61 A   .DB                         0 4A5A A   
.DC                         0 4A72 A   .DD                         0 4A6B A   
.DE                         0 4A81 A   .DF                         0 4A7C A   
.E                          0 36C8 A   .E0                         0 4D11 A   
.E1                         0 4AA8 A   .E2                         0 A0D3 A   
.E3                         0 4B4B A   .E4                         0 4B16 A   
.E5                         0 4B04 A   .E6                         0 4AF2 A   
.E7                         0 4AEB A   .E8                         0 4AE4 A   
.E9                         0 4D0E A   .EA                         0 4C30 A   
.EB                         0 4B54 A   .EC                         0 4C2D A   
.ED                         0 4C1A A   .EE                         0 4C21 A   
.EF                         0 4B5F A   .F                          0 36C8 A   
.F0                         0 4BBF A   .F1                         0 4B7D A   
.F2                         0 4B76 A   .F3                         0 4C1A A   
.F4                         0 4C2D A   .F5                         0 4D0E A   
.F6                         0 4D0E A   .F7                         0 4CFB A   
.F8                         0 4D02 A   .F9                         0 4C3B A   
.FA                         0 4C94 A   .FB                         0 4C52 A   
.FC                         0 4C4B A   .FD                         0 4CEF A   
.FE                         0 4CFB A   .FF                         0 4CF9 A   
_biosfn_alternate_prtsc     0 6C72 A   _biosfn_enable_video_refre+ 0 6D91 A   
_biosfn_get_cursor_pos      0 44C0 A   _biosfn_get_font_info       0 6A87 A   
_biosfn_load_gfx_8_14_char+ 0 6A6F A   _biosfn_load_gfx_8_16_char+ 0 6A7F A   
_biosfn_load_gfx_8_8_chars  0 6A5F A   _biosfn_load_gfx_8_8_dd_ch+ 0 6A77 A   
_biosfn_load_gfx_user_char+ 0 6A67 A   _biosfn_load_text_8_14_pat  0 6899 A   
_biosfn_load_text_8_16_pat  0 69CE A   _biosfn_load_text_8_8_pat   0 6930 A   
_biosfn_load_text_user_pat  0 67FD A   _biosfn_perform_gray_scale+ 0 6556 A   
_biosfn_read_char_attr      0 50F8 A   _biosfn_read_pixel          0 5D50 A   
_biosfn_read_state_info     0 6EE5 A   _biosfn_read_video_state_s+ 0 7064 A   
_biosfn_read_video_state_s+ 0 701D A   _biosfn_restore_video_stat+ 0 7652 A   
_biosfn_save_video_state    0 7088 A   _biosfn_scroll              0 49CB A   
_biosfn_set_active_page     0 4535 A   _biosfn_set_cursor_pos      0 43C0 A   
_biosfn_set_cursor_shape    0 42A5 A   _biosfn_set_video_mode      0 3BF8 A   
_biosfn_switch_video_inter+ 0 6D89 A   _biosfn_write_char_attr     0 5640 A   
_biosfn_write_char_only     0 5839 A   _biosfn_write_pixel         0 5AAF A   
_biosfn_write_string        0 6D99 A   _biosfn_write_teletype      0 5F59 A   
_dac_regs                   0 029D A   _dispi_get_max_bpp          0 925F A   
_dispi_get_max_xres         0 923D A   _dispi_set_bank             0 929F A   
_dispi_set_bank_farcall     0 92BD A   _dispi_set_bpp              0 9206 A   
_dispi_set_enable           0 9281 A   _dispi_set_xres             0 91D1 A   
_dispi_set_yres             0 91E8 A   _display_info               0 3627 A   
_display_splash_screen      0 3626 A   _display_string             0 3645 A   
_fail                       0 9EBE A   _find_vga_entry             0 7C30 A   
_get_SS                     0 7DA8 A E _get_font_access            0 665D A   
_inb                        0 7D72 A E _int10_debugmsg             0 366C A   
_int10_func                 0 369D A   _inw                        0 7D7D A E 
_line_to_vpti               0 028D A   _memcpyb                    0 7CBC A   
_memcpyw                    0 7CEC A   _memsetb                    0 7C72 A   
_memsetw                    0 7C97 A   _mode_info_find_mode        0 9453 A   
_mode_info_list             0 7F04 A   _no_vbebios_info_string     0 904E A   
_outb                       0 7D88 A E _outw                       0 7D98 A E 
_palette0                   0 0A21 A   _palette1                   0 0AE1 A   
_palette2                   0 0BA1 A   _palette3                   0 0C61 A   
_printf                     0 7DC7 A E _read_byte                  0 7D1C A   
_read_word                  0 7D2F A   _release_font_access        0 6680 A   
_set_scan_lines             0 66B4 A   _size64                     0 9512 A   
_static_functionality       0 0F61 A   _unimplemented              0 7DAB A E 
_unknown                    0 7DB9 A E _vbe_biosfn_read_video_sta+ 0 9AF3 A E 
_vbe_biosfn_restore_video_+ 0 9B8D A E _vbe_biosfn_return_control+ 0 952D A E 
_vbe_biosfn_return_mode_in+ 0 97C3 A E _vbe_biosfn_save_restore_s+ 0 9CBA A E 
_vbe_biosfn_save_video_sta+ 0 9AFB A E _vbe_biosfn_set_get_palett+ 0 9EA8 A E 
_vbe_biosfn_set_mode        0 994D A E _vbe_has_vbe_display        0 94B4 A   
_vbebios_copyright          0 8F7C A   _vbebios_info_string        0 9028 A   
_vbebios_product_name       0 8FDA A   _vbebios_product_revision   0 8FF3 A   
_vbebios_vendor_name        0 8FC2 A   _vga_compat_setup           0 937C A   
_vga_modes                  0 020D A   _vgafont14                  0 1771 A   
_vgafont14alt               0 3571 A   _vgafont16                  0 2571 A   
_vgafont16alt               0 3572 A   _vgafont8                   0 0F71 A   
_vgamem_copy_cga            0 4804 A   _vgamem_copy_pl4            0 46B7 A   
_vgamem_fill_cga            0 4916 A   _vgamem_fill_pl4            0 4779 A   
_video_param_table          0 02A1 A   _video_save_pointer_table   0 360A A   
_write_byte                 0 7D42 A   _write_gfx_char_cga         0 5369 A   
_write_gfx_char_lin         0 556C A   _write_gfx_char_pl4         0 51F6 A   
_write_word                 0 7D5A A   biosfn_enable_cursor_emula+ 0 6D67 A   
biosfn_enable_default_pale+ 0 6D03 A   biosfn_enable_grayscale_su+ 0 6D43 A   
biosfn_enable_video_addres+ 0 6D25 A   biosfn_get_all_palette_reg  0 63FB A   
biosfn_get_ega_info         0 6C4F A   biosfn_get_single_palette_+ 0 63C9 A   
biosfn_get_video_mode       0 62C3 A   biosfn_group_0B             0 5A34 A   
biosfn_group_10             0 62EA A   biosfn_group_1A             0 6E72 A   
biosfn_read_all_dac_reg     0 64DB A   biosfn_read_display_code    0 6E7E A   
biosfn_read_overscan_borde+ 0 63ED A   biosfn_read_pel_mask        0 650E A   
biosfn_read_single_dac_reg  0 64C0 A   biosfn_read_video_dac_stat+ 0 6519 A   
biosfn_select_vert_res      0 6C7A A   biosfn_select_video_dac_co+ 0 647D A   
biosfn_set_all_dac_reg      0 6455 A   biosfn_set_all_palette_reg  0 6376 A   
biosfn_set_border_color     0 5A42 A   biosfn_set_display_code     0 6E93 A   
biosfn_set_overscan_border+ 0 636E A   biosfn_set_palette          0 5A81 A   
biosfn_set_pel_mask         0 6503 A   biosfn_set_single_dac_reg   0 643C A   
biosfn_set_single_palette_+ 0 6354 A   biosfn_set_text_block_spec+ 0 69C1 A   
biosfn_toggle_intensity     0 63A3 A   bit8_clear                  0 93C4 A   
bit9_clear                  0 93CB A   bpp4_mode                   0 9165 A   
dispi_get_bank              0 92AF A   dispi_get_bpp               0 9224 A   
dispi_get_enable            0 9291 A   dispi_get_id                0 91B3 A   
dispi_get_virt_height       0 936E A   dispi_get_virt_width        0 9360 A   
dispi_get_x_offset          0 9304 A   dispi_get_y_offset          0 9322 A   
dispi_set_bank_farcall_err+ 0 92EF A   dispi_set_bank_farcall_get  0 92E1 A   
dispi_set_id                0 91C1 A   dispi_set_virt_width        0 934D A   
dispi_set_x_offset          0 92F4 A   dispi_set_y_offset          0 9312 A   
get_bpp_noinc               0 923B A   get_dac_16_page             0 6549 A   
get_dac_palette_format      0 9E94 A   get_display_start           0 9E61 A   
get_display_window          0 9DE9 A   get_logical_scan_line_leng+ 0 9E21 A   
get_palette_loop            0 6403 A   idiv_u                      0 66AF A   
illegal_window              0 90F8 A   init_bios_area              0 35D2 A   
init_vga_card               0 3573 A   int10_end                   0 020B A   
int10_group_10_unknown      0 6350 A   int10_normal                0 01FD A   
int10_test_0B               0 015A A   int10_test_1001             0 62F0 A   
int10_test_1002             0 62F6 A   int10_test_1003             0 62FC A   
int10_test_1007             0 6303 A   int10_test_1008             0 630A A   
int10_test_1009             0 6311 A   int10_test_1010             0 6318 A   
int10_test_1012             0 631F A   int10_test_1013             0 6326 A   
int10_test_1015             0 632D A   int10_test_1017             0 6334 A   
int10_test_1018             0 633B A   int10_test_1019             0 6342 A   
int10_test_101A             0 6349 A   int10_test_101B             0 01B3 A   
int10_test_1103             0 0165 A   int10_test_12               0 0170 A   
int10_test_1A               0 014F A   int10_test_4F               0 01C2 A   
int10_test_BL30             0 0180 A   int10_test_BL31             0 018B A   
int10_test_BL32             0 0195 A   int10_test_BL33             0 019F A   
int10_test_BL34             0 01A9 A   int10_test_vbe_05           0 01D0 A   
int10_test_vbe_06           0 01D9 A   int10_test_vbe_07           0 01E2 A   
int10_test_vbe_08           0 01EB A   int10_test_vbe_0A           0 01F4 A   
memcpyb_end                 0 7CE4 A   memcpyw_end                 0 7D14 A   
memsetb_end                 0 7C91 A   memsetw_end                 0 7CB6 A   
mode_ega_color              0 6C6F A   msg_alt_dcc                 0 6EB7 A   
msg_vbe_init                0 9072 A   msg_vert_res                0 6CDC A   
msg_vga_init                0 358F A   no_4bpp_1                   0 9E19 A   
no_4bpp_2                   0 9E36 A   no_actl_reg1                0 636D A   
no_actl_reg2                0 63EC A   no_vbe_flag                 0 9507 A   
no_vbe_interface            0 94EB A   no_vbe_mode                 0 9AE5 A   
read_dac_loop               0 64EC A   set_actl_normal             0 64B9 A   
set_cga_palette_loop        0 5A8E A   set_dac_16_page             0 64B3 A   
set_dac_loop                0 6466 A   set_dac_mode                0 9E91 A   
set_dac_page                0 64A0 A   set_dac_palette_format      0 9E7C A   
set_display_start           0 9E53 A   set_display_window          0 9DD9 A   
set_intensity_loop          0 5A60 A   set_logical_scan_line_byte+ 0 9E08 A   
set_logical_scan_line_pixe+ 0 9E1E A   set_low_border              0 5A5A A   
set_normal_dac              0 9E8E A   set_palette_loop            0 6385 A   
set_retcode                 0 6CD5 A   set_vert_res                0 6CCB A   
set_width_svga              0 933E A   set_xy_regs                 0 9171 A   
vbe_03_ok                   0 9AEE A   vbe_05_failed               0 9DF2 A   
vbe_08_ok                   0 9EA0 A   vbe_08_unsupported          0 9EA4 A   
vbe_biosfn_display_window_+ 0 9DC9 A   vbe_biosfn_return_current_+ 0 9ACE A   
vbe_biosfn_return_protecte+ 0 9EA9 A   vbe_biosfn_set_get_dac_pal+ 0 9E71 A   
vbe_biosfn_set_get_display+ 0 9E43 A   vbe_biosfn_set_get_logical+ 0 9DF6 A   
vbe_display_info            0 94F5 A   vbe_init                    0 94C7 A   
vert_res_200                0 6CC1 A   vert_res_350                0 6CB7 A   
vert_res_400                0 6CAB A   vesa_pm_end                 0 91B3 A   
vesa_pm_io_ports_table      0 90BA A   vesa_pm_set_display_start   0 90FD A   
vesa_pm_set_display_start1  0 910C A   vesa_pm_set_display_window+ 0 90D1 A   
vesa_pm_set_window          0 90C6 A   vesa_pm_start               0 90B2 A   
vesa_pm_unimplemented       0 91AE A   vga_compat_end              0 9451 A   
vga_set_virt_width          0 9330 A   vgabios_copyright           0 0054 A   
vgabios_date                0 0044 A   vgabios_end                 0 9ED4 A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 010B A   
vgabios_int10_handler       0 0135 A   vgabios_license             0 0080 A   
vgabios_name                0 0022 A   vgabios_start               0 0000 A   
vgabios_version             0 0038 A   vgabios_website             0 00B5 A   

00000 errors
00000 warnings
