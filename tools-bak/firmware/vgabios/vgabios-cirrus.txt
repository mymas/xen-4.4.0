00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios-cirrus_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 static Bit8u read_byte();
00012                                           !BCC_EOS
00013                                           ! 6 static Bit16u read_word();
00014                                           !BCC_EOS
00015                                           ! 7 static void write_byte();
00016                                           !BCC_EOS
00017                                           ! 8 static void write_word();
00018                                           !BCC_EOS
00019                                           ! 9 static Bit8u inb();
00020                                           !BCC_EOS
00021                                           ! 10 static Bit16u inw();
00022                                           !BCC_EOS
00023                                           ! 11 static void outb();
00024                                           !BCC_EOS
00025                                           ! 12 static void outw();
00026                                           !BCC_EOS
00027                                           ! 13 static Bit16u get_SS();
00028                                           !BCC_EOS
00029                                           ! 14 static void printf();
00030                                           !BCC_EOS
00031                                           ! 15 static void unimplemented();
00032                                           !BCC_EOS
00033                                           ! 16 static void unknown();
00034                                           !BCC_EOS
00035                                           ! 17 static Bit8u find_vga_entry();
00036                                           !BCC_EOS
00037                                           ! 18 static void memsetb();
00038                                           !BCC_EOS
00039                                           ! 19 static void memsetw();
00040                                           !BCC_EOS
00041                                           ! 20 static void memcpyb();
00042                                           !BCC_EOS
00043                                           ! 21 static void memcpyw();
00044                                           !BCC_EOS
00045                                           ! 22 static void biosfn_set_video_mode();
00046                                           !BCC_EOS
00047                                           ! 23 static void biosfn_set_cursor_shape();
00048                                           !BCC_EOS
00049                                           ! 24 static void biosfn_set_cursor_pos();
00050                                           !BCC_EOS
00051                                           ! 25 static void biosfn_get_cursor_pos();
00052                                           !BCC_EOS
00053                                           ! 26 static void biosfn_set_active_page();
00054                                           !BCC_EOS
00055                                           ! 27 static void biosfn_scroll();
00056                                           !BCC_EOS
00057                                           ! 28 static void biosfn_read_char_attr();
00058                                           !BCC_EOS
00059                                           ! 29 static void biosfn_write_char_attr();
00060                                           !BCC_EOS
00061                                           ! 30 static void biosfn_write_char_only();
00062                                           !BCC_EOS
00063                                           ! 31 static void biosfn_write_pixel();
00064                                           !BCC_EOS
00065                                           ! 32 static void biosfn_read_pixel();
00066                                           !BCC_EOS
00067                                           ! 33 static void biosfn_write_teletype();
00068                                           !BCC_EOS
00069                                           ! 34 static void biosfn_perform_gray_scale_summing();
00070                                           !BCC_EOS
00071                                           ! 35 static void biosfn_load_text_user_pat();
00072                                           !BCC_EOS
00073                                           ! 36 static void biosfn_load_text_8_14_pat();
00074                                           !BCC_EOS
00075                                           ! 37 static void biosfn_load_text_8_8_pat();
00076                                           !BCC_EOS
00077                                           ! 38 static void biosfn_load_text_8_16_pat();
00078                                           !BCC_EOS
00079                                           ! 39 static void biosfn_load_gfx_8_8_chars();
00080                                           !BCC_EOS
00081                                           ! 40 static void biosfn_load_gfx_user_chars();
00082                                           !BCC_EOS
00083                                           ! 41 static void biosfn_load_gfx_8_14_chars();
00084                                           !BCC_EOS
00085                                           ! 42 static void biosfn_load_gfx_8_8_dd_chars();
00086                                           !BCC_EOS
00087                                           ! 43 static void biosfn_load_gfx_8_16_chars();
00088                                           !BCC_EOS
00089                                           ! 44 static void biosfn_get_font_info();
00090                                           !BCC_EOS
00091                                           ! 45 static void biosfn_alternate_prtsc();
00092                                           !BCC_EOS
00093                                           ! 46 static void biosfn_switch_video_interface();
00094                                           !BCC_EOS
00095                                           ! 47 static void biosfn_enable_video_refresh_control();
00096                                           !BCC_EOS
00097                                           ! 48 static void biosfn_write_string();
00098                                           !BCC_EOS
00099                                           ! 49 static void biosfn_read_state_info();
00100                                           !BCC_EOS
00101                                           ! 50 static void biosfn_read_video_state_size();
00102                                           !BCC_EOS
00103                                           ! 51 static Bit16u biosfn_save_video_state();
00104                                           !BCC_EOS
00105                                           ! 52 static Bit16u biosfn_restore_video_state();
00106                                           !BCC_EOS
00107                                           ! 53 extern Bit8u video_save_pointer_table[];
00108                                           !BCC_EOS
00109                                           ! 54 #asm
00110                                           !BCC_ASM
00111                                           MACRO SET_INT_VECTOR
00112                                             push ds
00113                                             xor ax, ax
00114                                             mov ds, ax
00115                                             mov ax, ?3
00116                                             mov ?1*4, ax
00117                                             mov ax, ?2
00118                                             mov ?1*4+2, ax
00119                                             pop ds
00120                                           MEND
00121                                           ! 65 endasm
00122                                           !BCC_ENDASM
00123                                           ! 66 #asm
00124                                           !BCC_ASM
00125                                           
00126 0000                                      .rom
00127 0000                                      .org 0
00128                                           use16 386
00129                       00000000            vgabios_start:
00130 0000                        55            .byte 0x55, 0xaa
00131 0002                        40            .byte 0x40
00132                       00000003            vgabios_entry_point:
00133 0003           E9         0123              jmp vgabios_init_func
00134 0018                                      .org 0x18
00135 0018                      0111            .word vgabios_pci_data
00136 001E                                      .org 0x1e
00137 001E                        49            .ascii "IBM"
00138 0021                        00            .byte 0x00
00139                       00000022            vgabios_name:
00140 0022                        50            .ascii "Plex86/Bochs VGABios"
00141 0036                        20            .ascii " (PCI)"
00142 003C                        20            .ascii " "
00143 003D                        00            .byte 0x00
00144                       0000003E            vgabios_version:
00145 003E                        63            .ascii "current-cvs"
00146 0049                        20            .ascii " "
00147                       0000004A            vgabios_date:
00148 004A                        31            .ascii "18 12月 2015"
00149 0057                        0A            .byte 0x0a,0x0d
00150 0059                        00            .byte 0x00
00151                       0000005A            vgabios_copyright:
00152 005A                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00153 0083                        0A            .byte 0x0a,0x0d
00154 0085                        00            .byte 0x00
00155                       00000086            vgabios_license:
00156 0086                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00157 00B6                        0A            .byte 0x0a,0x0d
00158 00B8                        0A            .byte 0x0a,0x0d
00159 00BA                        00            .byte 0x00
00160                       000000BB            vgabios_website:
00161 00BB                        50            .ascii "Please visit :"
00162 00C9                        0A            .byte 0x0a,0x0d
00163                                           ;;.ascii " . http://www.plex86.org"
00164                                           ;;.byte 0x0a,0x0d
00165 00CB                        20            .ascii " . http://bochs.sourceforge.net"
00166 00EA                        0A            .byte 0x0a,0x0d
00167 00EC                        20            .ascii " . http://www.nongnu.org/vgabios"
00168 010C                        0A            .byte 0x0a,0x0d
00169 010E                        0A            .byte 0x0a,0x0d
00170 0110                        00            .byte 0x00
00171                       00000111            vgabios_pci_data:
00172 0111                        50            .ascii "PCIR"
00173 0115                      1013            .word 0x1013
00174 0117                      00B8            .word 0x00b8
00175 0119                      0000            .word 0
00176 011B                      0018            .word 0x18
00177 011D                        00            .byte 0
00178 011E                        00            .byte 0x0
00179 011F                      0300            .word 0x300
00180 0121                      0040            .word 0x40
00181 0123                      0001            .word 1
00182 0125                        00            .byte 0
00183 0126                        80            .byte 0x80
00184 0127                      0000            .word 0
00185                                           ;; ============================================================================================
00186                                           ;;
00187                                           ;; Init Entry point
00188                                           ;;
00189                                           ;; ============================================================================================
00190                       00000129            vgabios_init_func:
00191                                           ;; init vga card
00192 0129           E8         3416              call init_vga_card
00193                                           ;; init basic bios vars
00194 012C           E8         3472              call init_bios_area
00195                                           ;; set int10 vect
00196                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   012F           1E                           push ds
 +a   0130           31C0                         xor ax, ax
 +a   0132           8ED8                         mov ds, ax
 +a   0134           B8                   0153    mov ax,  #vgabios_int10_handler
 +a   0137           A3         0040              mov 0x10*4, ax
 +a   013A           B8                   C000    mov ax,  #0xC000
 +a   013D           A3         0042              mov 0x10*4+2, ax
 +a   0140           1F                           pop ds
00197 0141           E8         81D2              call cirrus_init
00198                                           ;; display splash screen
00199 0144           E8         34AE              call _display_splash_screen
00200                                           ;; init video mode and clear the screen
00201 0147           B8                   0003    mov ax,#0x0003
00202 014A           CD                     10    int #0x10
00203                                           ;; show info
00204 014C           E8         34A7              call _display_info
00205                                           ;; show cirrus info
00206 014F           E8         81FB              call cirrus_display_info
00207 0152           CB                           retf
00208                                           ! 150 endasm
00209                                           !BCC_ENDASM
00210                                           ! 151 #asm
00211                                           !BCC_ASM
00212                       00000153            vgabios_int10_handler:
00213 0153           9C                           pushf
00214 0154           80FC                   0F    cmp ah, #0x0f
00215 0157           75           05              jne int10_test_1A
00216 0159           E8         5FB1              call biosfn_get_video_mode
00217 015C           EB           7C              jmp int10_end
00218                       0000015E            int10_test_1A:
00219 015E           80FC                   1A    cmp ah, #0x1a
00220 0161           75           05              jne int10_test_0B
00221 0163           E8         6AD5              call biosfn_group_1A
00222 0166           EB           72              jmp int10_end
00223                       00000168            int10_test_0B:
00224 0168           80FC                   0B    cmp ah, #0x0b
00225 016B           75           05              jne int10_test_1103
00226 016D           E8         571D              call biosfn_group_0B
00227 0170           EB           68              jmp int10_end
00228                       00000172            int10_test_1103:
00229 0172           3D                   1103    cmp ax, #0x1103
00230 0175           75           05              jne int10_test_12
00231 0177           E8         668F              call biosfn_set_text_block_specifier
00232 017A           EB           5E              jmp int10_end
00233                       0000017C            int10_test_12:
00234 017C           80FC                   12    cmp ah, #0x12
00235 017F           75           3C              jne int10_test_101B
00236 0181           80FB                   10    cmp bl, #0x10
00237 0184           75           05              jne int10_test_BL30
00238 0186           E8         68DA              call biosfn_get_ega_info
00239 0189           EB           4F              jmp int10_end
00240                       0000018B            int10_test_BL30:
00241 018B           80FB                   30    cmp bl, #0x30
00242 018E           75           05              jne int10_test_BL31
00243 0190           E8         68F4              call biosfn_select_vert_res
00244 0193           EB           45              jmp int10_end
00245                       00000195            int10_test_BL31:
00246 0195           80FB                   31    cmp bl, #0x31
00247 0198           75           05              jne int10_test_BL32
00248 019A           E8         693D              call biosfn_enable_default_palette_loading
00249 019D           EB           3B              jmp int10_end
00250                       0000019F            int10_test_BL32:
00251 019F           80FB                   32    cmp bl, #0x32
00252 01A2           75           05              jne int10_test_BL33
00253 01A4           E8         6955              call biosfn_enable_video_addressing
00254 01A7           EB           31              jmp int10_end
00255                       000001A9            int10_test_BL33:
00256 01A9           80FB                   33    cmp bl, #0x33
00257 01AC           75           05              jne int10_test_BL34
00258 01AE           E8         6969              call biosfn_enable_grayscale_summing
00259 01B1           EB           27              jmp int10_end
00260                       000001B3            int10_test_BL34:
00261 01B3           80FB                   34    cmp bl, #0x34
00262 01B6           75           14              jne int10_normal
00263 01B8           E8         6983              call biosfn_enable_cursor_emulation
00264 01BB           EB           1D              jmp int10_end
00265                       000001BD            int10_test_101B:
00266 01BD           3D                   101B    cmp ax, #0x101b
00267 01C0           74           0A              je int10_normal
00268 01C2           80FC                   10    cmp ah, #0x10
00269 01C5           75           05              jne int10_normal
00270 01C7           E8         5F6A              call biosfn_group_10
00271 01CA           EB           0E              jmp int10_end
00272                       000001CC            int10_normal:
00273 01CC           06                           push es
00274 01CD           1E                           push ds
00275 01CE           60                           pusha
00276                                           ;; We have to set ds to access the right data segment
00277 01CF           BB                   C000    mov bx, #0xc000
00278 01D2           8EDB                         mov ds, bx
00279 01D4           E8         3464              call _int10_func
00280 01D7           61                           popa
00281 01D8           1F                           pop ds
00282 01D9           07                           pop es
00283                       000001DA            int10_end:
00284 01DA           9D                           popf
00285 01DB           CF                           iret
00286                                           ! 226 endasm
00287                                           !BCC_ENDASM
00288                                           ! 227 typedef struct
00289                                           ! 228 {Bit8u svgamode;
00290                                           !BCC_EOS
00291                                           ! 229  Bit8u class;
00292                                           !BCC_EOS
00293                                           ! 230  Bit8u memmodel;
00294                                           !BCC_EOS
00295                                           ! 231  Bit8u pixbits;
00296                                           !BCC_EOS
00297                                           ! 232  Bit16u sstart;
00298                                           !BCC_EOS
00299                                           ! 233  Bit8u pelmask;
00300                                           !BCC_EOS
00301                                           ! 234  Bit8u dacmodel;
00302                                           !BCC_EOS
00303                                           ! 235 } VGAMODES;
00304                                           !BCC_EOS
00305                                           ! 236 static VGAMODES vga_modes[15 +1]=
00306                                           ! 237 {
00307                                           
00308                       000001DC            _vga_modes:
00309                                           ! 238  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00310 01DC                        00            .byte	0
00311 01DD                        00            .byte	0
00312 01DE                        00            .byte	0
00313 01DF                        04            .byte	4
00314 01E0                      B800            .word	$B800
00315 01E2                        FF            .byte	$FF
00316 01E3                        02            .byte	2
00317                                           ! 239  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00318 01E4                        01            .byte	1
00319 01E5                        00            .byte	0
00320 01E6                        00            .byte	0
00321 01E7                        04            .byte	4
00322 01E8                      B800            .word	$B800
00323 01EA                        FF            .byte	$FF
00324 01EB                        02            .byte	2
00325                                           ! 240  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00326 01EC                        02            .byte	2
00327 01ED                        00            .byte	0
00328 01EE                        00            .byte	0
00329 01EF                        04            .byte	4
00330 01F0                      B800            .word	$B800
00331 01F2                        FF            .byte	$FF
00332 01F3                        02            .byte	2
00333                                           ! 241  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00334 01F4                        03            .byte	3
00335 01F5                        00            .byte	0
00336 01F6                        00            .byte	0
00337 01F7                        04            .byte	4
00338 01F8                      B800            .word	$B800
00339 01FA                        FF            .byte	$FF
00340 01FB                        02            .byte	2
00341                                           ! 242  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00342 01FC                        04            .byte	4
00343 01FD                        01            .byte	1
00344 01FE                        02            .byte	2
00345 01FF                        02            .byte	2
00346 0200                      B800            .word	$B800
00347 0202                        FF            .byte	$FF
00348 0203                        01            .byte	1
00349                                           ! 243  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00350 0204                        05            .byte	5
00351 0205                        01            .byte	1
00352 0206                        02            .byte	2
00353 0207                        02            .byte	2
00354 0208                      B800            .word	$B800
00355 020A                        FF            .byte	$FF
00356 020B                        01            .byte	1
00357                                           ! 244  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00358 020C                        06            .byte	6
00359 020D                        01            .byte	1
00360 020E                        02            .byte	2
00361 020F                        01            .byte	1
00362 0210                      B800            .word	$B800
00363 0212                        FF            .byte	$FF
00364 0213                        01            .byte	1
00365                                           ! 245  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00366 0214                        07            .byte	7
00367 0215                        00            .byte	0
00368 0216                        01            .byte	1
00369 0217                        04            .byte	4
00370 0218                      B000            .word	$B000
00371 021A                        FF            .byte	$FF
00372 021B                        00            .byte	0
00373                                           ! 246  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00374 021C                        0D            .byte	$D
00375 021D                        01            .byte	1
00376 021E                        04            .byte	4
00377 021F                        04            .byte	4
00378 0220                      A000            .word	$A000
00379 0222                        FF            .byte	$FF
00380 0223                        01            .byte	1
00381                                           ! 247  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00382 0224                        0E            .byte	$E
00383 0225                        01            .byte	1
00384 0226                        04            .byte	4
00385 0227                        04            .byte	4
00386 0228                      A000            .word	$A000
00387 022A                        FF            .byte	$FF
00388 022B                        01            .byte	1
00389                                           ! 248  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00390 022C                        0F            .byte	$F
00391 022D                        01            .byte	1
00392 022E                        03            .byte	3
00393 022F                        01            .byte	1
00394 0230                      A000            .word	$A000
00395 0232                        FF            .byte	$FF
00396 0233                        00            .byte	0
00397                                           ! 249  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00398 0234                        10            .byte	$10
00399 0235                        01            .byte	1
00400 0236                        04            .byte	4
00401 0237                        04            .byte	4
00402 0238                      A000            .word	$A000
00403 023A                        FF            .byte	$FF
00404 023B                        02            .byte	2
00405                                           ! 250  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00406 023C                        11            .byte	$11
00407 023D                        01            .byte	1
00408 023E                        03            .byte	3
00409 023F                        01            .byte	1
00410 0240                      A000            .word	$A000
00411 0242                        FF            .byte	$FF
00412 0243                        02            .byte	2
00413                                           ! 251  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00414 0244                        12            .byte	$12
00415 0245                        01            .byte	1
00416 0246                        04            .byte	4
00417 0247                        04            .byte	4
00418 0248                      A000            .word	$A000
00419 024A                        FF            .byte	$FF
00420 024B                        02            .byte	2
00421                                           ! 252  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00422 024C                        13            .byte	$13
00423 024D                        01            .byte	1
00424 024E                        05            .byte	5
00425 024F                        08            .byte	8
00426 0250                      A000            .word	$A000
00427 0252                        FF            .byte	$FF
00428 0253                        03            .byte	3
00429                                           ! 253  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00430 0254                        6A            .byte	$6A
00431 0255                        01            .byte	1
00432 0256                        04            .byte	4
00433 0257                        04            .byte	4
00434 0258                      A000            .word	$A000
00435 025A                        FF            .byte	$FF
00436 025B                        02            .byte	2
00437                                           ! 254 };
00438                                           !BCC_EOS
00439                                           ! 255 static Bit8u line_to_vpti[15 +1]={
00440                       0000025C            _line_to_vpti:
00441                                           ! 256     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00442 025C                        17            .byte	$17
00443 025D                        17            .byte	$17
00444 025E                        18            .byte	$18
00445 025F                        18            .byte	$18
00446 0260                        04            .byte	4
00447 0261                        05            .byte	5
00448 0262                        06            .byte	6
00449 0263                        07            .byte	7
00450                                           ! 257     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00451 0264                        0D            .byte	$D
00452 0265                        0E            .byte	$E
00453 0266                        11            .byte	$11
00454 0267                        12            .byte	$12
00455 0268                        1A            .byte	$1A
00456 0269                        1B            .byte	$1B
00457 026A                        1C            .byte	$1C
00458 026B                        1D            .byte	$1D
00459                                           ! 258 };
00460                                           !BCC_EOS
00461                                           ! 259 static Bit8u dac_regs[3 +1]=
00462                                           ! 260 {0x3f,0x3f,0x3f,0xff};
00463                       0000026C            _dac_regs:
00464 026C                        3F            .byte	$3F
00465 026D                        3F            .byte	$3F
00466 026E                        3F            .byte	$3F
00467 026F                        FF            .byte	$FF
00468                                           !BCC_EOS
00469                                           ! 261 typedef struct {
00470                                           ! 262     Bit8u twidth;
00471                                           !BCC_EOS
00472                                           ! 263     Bit8u the
00473                                           ! 263 ightm1;
00474                                           !BCC_EOS
00475                                           ! 264     Bit8u cheight;
00476                                           !BCC_EOS
00477                                           ! 265     Bit8u slength_l;
00478                                           !BCC_EOS
00479                                           ! 266     Bit8u slength_h;
00480                                           !BCC_EOS
00481                                           ! 267     Bit8u sequ_regs[4];
00482                                           !BCC_EOS
00483                                           ! 268     Bit8u miscreg;
00484                                           !BCC_EOS
00485                                           ! 269     Bit8u crtc_regs[25];
00486                                           !BCC_EOS
00487                                           ! 270     Bit8u actl_regs[20];
00488                                           !BCC_EOS
00489                                           ! 271     Bit8u grdc_regs[9];
00490                                           !BCC_EOS
00491                                           ! 272 } VideoParamTableEntry;
00492                                           !BCC_EOS
00493                                           ! 273 static VideoParamTableEntry video_param_table[30] = {
00494                       00000270            _video_param_table:
00495                                           ! 274 {
00496                                           ! 275  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00497 0270                        00            .byte	0
00498 0271                        00            .byte	0
00499 0272                        00            .byte	0
00500 0273                        00            .byte	0
00501 0274                        00            .byte	0
00502 0275                        00            .byte	0
00503 0276                        00            .byte	0
00504 0277                        00            .byte	0
00505                                           ! 276  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00506 0278                        00            .byte	0
00507 0279                        00            .byte	0
00508 027A                        00            .byte	0
00509 027B                        00            .byte	0
00510 027C                        00            .byte	0
00511 027D                        00            .byte	0
00512 027E                        00            .byte	0
00513 027F                        00            .byte	0
00514                                           ! 277  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00515 0280                        00            .byte	0
00516 0281                        00            .byte	0
00517 0282                        00            .byte	0
00518 0283                        00            .byte	0
00519 0284                        00            .byte	0
00520 0285                        00            .byte	0
00521 0286                        00            .byte	0
00522 0287                        00            .byte	0
00523                                           ! 278  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00524 0288                        00            .byte	0
00525 0289                        00            .byte	0
00526 028A                        00            .byte	0
00527 028B                        00            .byte	0
00528 028C                        00            .byte	0
00529 028D                        00            .byte	0
00530 028E                        00            .byte	0
00531 028F                        00            .byte	0
00532                                           ! 279  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00533 0290                        00            .byte	0
00534 0291                        00            .byte	0
00535 0292                        00            .byte	0
00536 0293                        00            .byte	0
00537 0294                        00            .byte	0
00538 0295                        00            .byte	0
00539 0296                        00            .byte	0
00540 0297                        00            .byte	0
00541                                           ! 280  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00542 0298                        00            .byte	0
00543 0299                        00            .byte	0
00544 029A                        00            .byte	0
00545 029B                        00            .byte	0
00546 029C                        00            .byte	0
00547 029D                        00            .byte	0
00548 029E                        00            .byte	0
00549 029F                        00            .byte	0
00550                                           ! 281  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00551 02A0                        00            .byte	0
00552 02A1                        00            .byte	0
00553 02A2                        00            .byte	0
00554 02A3                        00            .byte	0
00555 02A4                        00            .byte	0
00556 02A5                        00            .byte	0
00557 02A6                        00            .byte	0
00558 02A7                        00            .byte	0
00559                                           ! 282  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00560 02A8                        00            .byte	0
00561 02A9                        00            .byte	0
00562 02AA                        00            .byte	0
00563 02AB                        00            .byte	0
00564 02AC                        00            .byte	0
00565 02AD                        00            .byte	0
00566 02AE                        00            .byte	0
00567 02AF                        00            .byte	0
00568                                           ! 283 },
00569                                           ! 284 {
00570                                           ! 285  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00571 02B0                        00            .byte	0
00572 02B1                        00            .byte	0
00573 02B2                        00            .byte	0
00574 02B3                        00            .byte	0
00575 02B4                        00            .byte	0
00576 02B5                        00            .byte	0
00577 02B6                        00            .byte	0
00578 02B7                        00            .byte	0
00579                                           ! 286  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00580 02B8                        00            .byte	0
00581 02B9                        00            .byte	0
00582 02BA                        00            .byte	0
00583 02BB                        00            .byte	0
00584 02BC                        00            .byte	0
00585 02BD                        00            .byte	0
00586 02BE                        00            .byte	0
00587 02BF                        00            .byte	0
00588                                           ! 287  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00589 02C0                        00            .byte	0
00590 02C1                        00            .byte	0
00591 02C2                        00            .byte	0
00592 02C3                        00            .byte	0
00593 02C4                        00            .byte	0
00594 02C5                        00            .byte	0
00595 02C6                        00            .byte	0
00596 02C7                        00            .byte	0
00597                                           ! 288  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00598 02C8                        00            .byte	0
00599 02C9                        00            .byte	0
00600 02CA                        00            .byte	0
00601 02CB                        00            .byte	0
00602 02CC                        00            .byte	0
00603 02CD                        00            .byte	0
00604 02CE                        00            .byte	0
00605 02CF                        00            .byte	0
00606                                           ! 289  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00607 02D0                        00            .byte	0
00608 02D1                        00            .byte	0
00609 02D2                        00            .byte	0
00610 02D3                        00            .byte	0
00611 02D4                        00            .byte	0
00612 02D5                        00            .byte	0
00613 02D6                        00            .byte	0
00614 02D7                        00            .byte	0
00615                                           ! 290  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00616 02D8                        00            .byte	0
00617 02D9                        00            .byte	0
00618 02DA                        00            .byte	0
00619 02DB                        00            .byte	0
00620 02DC                        00            .byte	0
00621 02DD                        00            .byte	0
00622 02DE                        00            .byte	0
00623 02DF                        00            .byte	0
00624                                           ! 291  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00625 02E0                        00            .byte	0
00626 02E1                        00            .byte	0
00627 02E2                        00            .byte	0
00628 02E3                        00            .byte	0
00629 02E4                        00            .byte	0
00630 02E5                        00            .byte	0
00631 02E6                        00            .byte	0
00632 02E7                        00            .byte	0
00633                                           ! 292  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00634 02E8                        00            .byte	0
00635 02E9                        00            .byte	0
00636 02EA                        00            .byte	0
00637 02EB                        00            .byte	0
00638 02EC                        00            .byte	0
00639 02ED                        00            .byte	0
00640 02EE                        00            .byte	0
00641 02EF                        00            .byte	0
00642                                           ! 293 },
00643                                           ! 294 {
00644                                           ! 295  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00645 02F0                        00            .byte	0
00646 02F1                        00            .byte	0
00647 02F2                        00            .byte	0
00648 02F3                        00            .byte	0
00649 02F4                        00            .byte	0
00650 02F5                        00            .byte	0
00651 02F6                        00            .byte	0
00652 02F7                        00            .byte	0
00653                                           ! 296  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00654 02F8                        00            .byte	0
00655 02F9                        00            .byte	0
00656 02FA                        00            .byte	0
00657 02FB                        00            .byte	0
00658 02FC                        00            .byte	0
00659 02FD                        00            .byte	0
00660 02FE                        00            .byte	0
00661 02FF                        00            .byte	0
00662                                           ! 297  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00663 0300                        00            .byte	0
00664 0301                        00            .byte	0
00665 0302                        00            .byte	0
00666 0303                        00            .byte	0
00667 0304                        00            .byte	0
00668 0305                        00            .byte	0
00669 0306                        00            .byte	0
00670 0307                        00            .byte	0
00671                                           ! 298  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00672 0308                        00            .byte	0
00673 0309                        00            .byte	0
00674 030A                        00            .byte	0
00675 030B                        00            .byte	0
00676 030C                        00            .byte	0
00677 030D                        00            .byte	0
00678 030E                        00            .byte	0
00679 030F                        00            .byte	0
00680                                           ! 299  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00681 0310                        00            .byte	0
00682 0311                        00            .byte	0
00683 0312                        00            .byte	0
00684 0313                        00            .byte	0
00685 0314                        00            .byte	0
00686 0315                        00            .byte	0
00687 0316                        00            .byte	0
00688 0317                        00            .byte	0
00689                                           ! 300  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00690 0318                        00            .byte	0
00691 0319                        00            .byte	0
00692 031A                        00            .byte	0
00693 031B                        00            .byte	0
00694 031C                        00            .byte	0
00695 031D                        00            .byte	0
00696 031E                        00            .byte	0
00697 031F                        00            .byte	0
00698                                           ! 301  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00699 0320                        00            .byte	0
00700 0321                        00            .byte	0
00701 0322                        00            .byte	0
00702 0323                        00            .byte	0
00703 0324                        00            .byte	0
00704 0325                        00            .byte	0
00705 0326                        00            .byte	0
00706 0327                        00            .byte	0
00707                                           ! 302  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00708 0328                        00            .byte	0
00709 0329                        00            .byte	0
00710 032A                        00            .byte	0
00711 032B                        00            .byte	0
00712 032C                        00            .byte	0
00713 032D                        00            .byte	0
00714 032E                        00            .byte	0
00715 032F                        00            .byte	0
00716                                           ! 303 },
00717                                           ! 304 {
00718                                           ! 305  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00719 0330                        00            .byte	0
00720 0331                        00            .byte	0
00721 0332                        00            .byte	0
00722 0333                        00            .byte	0
00723 0334                        00            .byte	0
00724 0335                        00            .byte	0
00725 0336                        00            .byte	0
00726 0337                        00            .byte	0
00727                                           ! 306  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00728 0338                        00            .byte	0
00729 0339                        00            .byte	0
00730 033A                        00            .byte	0
00731 033B                        00            .byte	0
00732 033C                        00            .byte	0
00733 033D                        00            .byte	0
00734 033E                        00            .byte	0
00735 033F                        00            .byte	0
00736                                           ! 307  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00737 0340                        00            .byte	0
00738 0341                        00            .byte	0
00739 0342                        00            .byte	0
00740 0343                        00            .byte	0
00741 0344                        00            .byte	0
00742 0345                        00            .byte	0
00743 0346                        00            .byte	0
00744 0347                        00            .byte	0
00745                                           ! 308  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00746 0348                        00            .byte	0
00747 0349                        00            .byte	0
00748 034A                        00            .byte	0
00749 034B                        00            .byte	0
00750 034C                        00            .byte	0
00751 034D                        00            .byte	0
00752 034E                        00            .byte	0
00753 034F                        00            .byte	0
00754                                           ! 309  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00755 0350                        00            .byte	0
00756 0351                        00            .byte	0
00757 0352                        00            .byte	0
00758 0353                        00            .byte	0
00759 0354                        00            .byte	0
00760 0355                        00            .byte	0
00761 0356                        00            .byte	0
00762 0357                        00            .byte	0
00763                                           ! 310  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00764 0358                        00            .byte	0
00765 0359                        00            .byte	0
00766 035A                        00            .byte	0
00767 035B                        00            .byte	0
00768 035C                        00            .byte	0
00769 035D                        00            .byte	0
00770 035E                        00            .byte	0
00771 035F                        00            .byte	0
00772                                           ! 311  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00773 0360                        00            .byte	0
00774 0361                        00            .byte	0
00775 0362                        00            .byte	0
00776 0363                        00            .byte	0
00777 0364                        00            .byte	0
00778 0365                        00            .byte	0
00779 0366                        00            .byte	0
00780 0367                        00            .byte	0
00781                                           ! 312  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00782 0368                        00            .byte	0
00783 0369                        00            .byte	0
00784 036A                        00            .byte	0
00785 036B                        00            .byte	0
00786 036C                        00            .byte	0
00787 036D                        00            .byte	0
00788 036E                        00            .byte	0
00789 036F                        00            .byte	0
00790                                           ! 313 },
00791                                           ! 314 {
00792                                           ! 315  40, 24, 8, 0x00, 0x08,
00793 0370                        28            .byte	$28
00794 0371                        18            .byte	$18
00795 0372                        08            .byte	8
00796 0373                        00            .byte	0
00797 0374                        08            .byte	8
00798                                           ! 316  0x09, 0x03, 0x00, 0x02,
00799 0375                        09            .byte	9
00800 0376                        03            .byte	3
00801 0377                        00            .byte	0
00802 0378                        02            .byte	2
00803                                           ! 317  0x63,
00804 0379                        63            .byte	$63
00805                                           ! 318  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00806 037A                        2D            .byte	$2D
00807 037B                        27            .byte	$27
00808 037C                        28            .byte	$28
00809 037D                        90            .byte	$90
00810 037E                        2B            .byte	$2B
00811 037F                        80            .byte	$80
00812 0380                        BF            .byte	$BF
00813 0381                        1F            .byte	$1F
00814                                           ! 319  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00815 0382                        00            .byte	0
00816 0383                        C1            .byte	$C1
00817 0384                        00            .byte	0
00818 0385                        00            .byte	0
00819 0386                        00            .byte	0
00820 0387                        00            .byte	0
00821 0388                        00            .byte	0
00822 0389                        00            .byte	0
00823                                           ! 320  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb
00824 038A                        9C            .byte	$9C
00825 038B                        8E            .byte	$8E
00826 038C                        8F            .byte	$8F
00827 038D                        14            .byte	$14
00828 038E                        00            .byte	0
00829 038F                        96            .byte	$96
00830                                           ! 320 9, 0xa2,
00831 0390                        B9            .byte	$B9
00832 0391                        A2            .byte	$A2
00833                                           ! 321  0xff,
00834 0392                        FF            .byte	$FF
00835                                           ! 322  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00836 0393                        00            .byte	0
00837 0394                        13            .byte	$13
00838 0395                        15            .byte	$15
00839 0396                        17            .byte	$17
00840 0397                        02            .byte	2
00841 0398                        04            .byte	4
00842 0399                        06            .byte	6
00843 039A                        07            .byte	7
00844                                           ! 323  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00845 039B                        10            .byte	$10
00846 039C                        11            .byte	$11
00847 039D                        12            .byte	$12
00848 039E                        13            .byte	$13
00849 039F                        14            .byte	$14
00850 03A0                        15            .byte	$15
00851 03A1                        16            .byte	$16
00852 03A2                        17            .byte	$17
00853                                           ! 324  0x01, 0x00, 0x03, 0x00,
00854 03A3                        01            .byte	1
00855 03A4                        00            .byte	0
00856 03A5                        03            .byte	3
00857 03A6                        00            .byte	0
00858                                           ! 325  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00859 03A7                        00            .byte	0
00860 03A8                        00            .byte	0
00861 03A9                        00            .byte	0
00862 03AA                        00            .byte	0
00863 03AB                        00            .byte	0
00864 03AC                        30            .byte	$30
00865 03AD                        0F            .byte	$F
00866 03AE                        0F            .byte	$F
00867 03AF                        FF            .byte	$FF
00868                                           ! 326 },
00869                                           ! 327 {
00870                                           ! 328  40, 24, 8, 0x00, 0x08,
00871 03B0                        28            .byte	$28
00872 03B1                        18            .byte	$18
00873 03B2                        08            .byte	8
00874 03B3                        00            .byte	0
00875 03B4                        08            .byte	8
00876                                           ! 329  0x09, 0x03, 0x00, 0x02,
00877 03B5                        09            .byte	9
00878 03B6                        03            .byte	3
00879 03B7                        00            .byte	0
00880 03B8                        02            .byte	2
00881                                           ! 330  0x63,
00882 03B9                        63            .byte	$63
00883                                           ! 331  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00884 03BA                        2D            .byte	$2D
00885 03BB                        27            .byte	$27
00886 03BC                        28            .byte	$28
00887 03BD                        90            .byte	$90
00888 03BE                        2B            .byte	$2B
00889 03BF                        80            .byte	$80
00890 03C0                        BF            .byte	$BF
00891 03C1                        1F            .byte	$1F
00892                                           ! 332  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00893 03C2                        00            .byte	0
00894 03C3                        C1            .byte	$C1
00895 03C4                        00            .byte	0
00896 03C5                        00            .byte	0
00897 03C6                        00            .byte	0
00898 03C7                        00            .byte	0
00899 03C8                        00            .byte	0
00900 03C9                        00            .byte	0
00901                                           ! 333  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00902 03CA                        9C            .byte	$9C
00903 03CB                        8E            .byte	$8E
00904 03CC                        8F            .byte	$8F
00905 03CD                        14            .byte	$14
00906 03CE                        00            .byte	0
00907 03CF                        96            .byte	$96
00908 03D0                        B9            .byte	$B9
00909 03D1                        A2            .byte	$A2
00910                                           ! 334  0xff,
00911 03D2                        FF            .byte	$FF
00912                                           ! 335  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00913 03D3                        00            .byte	0
00914 03D4                        13            .byte	$13
00915 03D5                        15            .byte	$15
00916 03D6                        17            .byte	$17
00917 03D7                        02            .byte	2
00918 03D8                        04            .byte	4
00919 03D9                        06            .byte	6
00920 03DA                        07            .byte	7
00921                                           ! 336  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00922 03DB                        10            .byte	$10
00923 03DC                        11            .byte	$11
00924 03DD                        12            .byte	$12
00925 03DE                        13            .byte	$13
00926 03DF                        14            .byte	$14
00927 03E0                        15            .byte	$15
00928 03E1                        16            .byte	$16
00929 03E2                        17            .byte	$17
00930                                           ! 337  0x01, 0x00, 0x03, 0x00,
00931 03E3                        01            .byte	1
00932 03E4                        00            .byte	0
00933 03E5                        03            .byte	3
00934 03E6                        00            .byte	0
00935                                           ! 338  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00936 03E7                        00            .byte	0
00937 03E8                        00            .byte	0
00938 03E9                        00            .byte	0
00939 03EA                        00            .byte	0
00940 03EB                        00            .byte	0
00941 03EC                        30            .byte	$30
00942 03ED                        0F            .byte	$F
00943 03EE                        0F            .byte	$F
00944 03EF                        FF            .byte	$FF
00945                                           ! 339 },
00946                                           ! 340 {
00947                                           ! 341  80, 24, 8, 0x00, 0x10,
00948 03F0                        50            .byte	$50
00949 03F1                        18            .byte	$18
00950 03F2                        08            .byte	8
00951 03F3                        00            .byte	0
00952 03F4                        10            .byte	$10
00953                                           ! 342  0x01, 0x01, 0x00, 0x06,
00954 03F5                        01            .byte	1
00955 03F6                        01            .byte	1
00956 03F7                        00            .byte	0
00957 03F8                        06            .byte	6
00958                                           ! 343  0x63,
00959 03F9                        63            .byte	$63
00960                                           ! 344  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
00961 03FA                        5F            .byte	$5F
00962 03FB                        4F            .byte	$4F
00963 03FC                        50            .byte	$50
00964 03FD                        82            .byte	$82
00965 03FE                        54            .byte	$54
00966 03FF                        80            .byte	$80
00967 0400                        BF            .byte	$BF
00968 0401                        1F            .byte	$1F
00969                                           ! 345  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00970 0402                        00            .byte	0
00971 0403                        C1            .byte	$C1
00972 0404                        00            .byte	0
00973 0405                        00            .byte	0
00974 0406                        00            .byte	0
00975 0407                        00            .byte	0
00976 0408                        00            .byte	0
00977 0409                        00            .byte	0
00978                                           ! 346  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
00979 040A                        9C            .byte	$9C
00980 040B                        8E            .byte	$8E
00981 040C                        8F            .byte	$8F
00982 040D                        28            .byte	$28
00983 040E                        00            .byte	0
00984 040F                        96            .byte	$96
00985 0410                        B9            .byte	$B9
00986 0411                        C2            .byte	$C2
00987                                           ! 347  0xff,
00988 0412                        FF            .byte	$FF
00989                                           ! 348  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00990 0413                        00            .byte	0
00991 0414                        17            .byte	$17
00992 0415                        17            .byte	$17
00993 0416                        17            .byte	$17
00994 0417                        17            .byte	$17
00995 0418                        17            .byte	$17
00996 0419                        17            .byte	$17
00997 041A                        17            .byte	$17
00998                                           ! 349  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00999 041B                        17            .byte	$17
01000 041C                        17            .byte	$17
01001 041D                        17            .byte	$17
01002 041E                        17            .byte	$17
01003 041F                        17            .byte	$17
01004 0420                        17            .byte	$17
01005 0421                        17            .byte	$17
01006 0422                        17            .byte	$17
01007                                           ! 350  0x01, 0x00, 0x01, 0x00,
01008 0423                        01            .byte	1
01009 0424                        00            .byte	0
01010 0425                        01            .byte	1
01011 0426                        00            .byte	0
01012                                           ! 351  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01013 0427                        00            .byte	0
01014 0428                        00            .byte	0
01015 0429                        00            .byte	0
01016 042A                        00            .byte	0
01017 042B                        00            .byte	0
01018 042C                        00            .byte	0
01019 042D                        0D            .byte	$D
01020 042E                        0F            .byte	$F
01021 042F                        FF            .byte	$FF
01022                                           ! 352 },
01023                                           ! 353 {
01024                                           ! 354  80, 24, 16, 0x00, 0x10,
01025 0430                        50            .byte	$50
01026 0431                        18            .byte	$18
01027 0432                        10            .byte	$10
01028 0433                        00            .byte	0
01029 0434                        10            .byte	$10
01030                                           ! 355  0x00, 0x03, 0x00, 0x02,
01031 0435                        00            .byte	0
01032 0436                        03            .byte	3
01033 0437                        00            .byte	0
01034 0438                        02            .byte	2
01035                                           ! 356  0x66,
01036 0439                        66            .byte	$66
01037                                           ! 357  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01038 043A                        5F            .byte	$5F
01039 043B                        4F            .byte	$4F
01040 043C                        50            .byte	$50
01041 043D                        82            .byte	$82
01042 043E                        55            .byte	$55
01043 043F                        81            .byte	$81
01044 0440                        BF            .byte	$BF
01045 0441                        1F            .byte	$1F
01046                                           ! 358  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01047 0442                        00            .byte	0
01048 0443                        4F            .byte	$4F
01049 0444                        0D            .byte	$D
01050 0445                        0E            .byte	$E
01051 0446                        00            .byte	0
01052 0447                        00            .byte	0
01053 0448                        00            .byte	0
01054 0449                        00            .byte	0
01055                                           ! 359  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01056 044A                        9C            .byte	$9C
01057 044B                        8E            .byte	$8E
01058 044C                        8F            .byte	$8F
01059 044D                        28            .byte	$28
01060 044E                        0F            .byte	$F
01061 044F                        96            .byte	$96
01062 0450                        B9            .byte	$B9
01063 0451                        A3            .byte	$A3
01064                                           ! 360  0xff,
01065 0452                        FF            .byte	$FF
01066                                           ! 361  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01067 0453                        00            .byte	0
01068 0454                        08            .byte	8
01069 0455                        08            .byte	8
01070 0456                        08            .byte	8
01071 0457                        08            .byte	8
01072 0458                        08            .byte	8
01073 0459                        08            .byte	8
01074 045A                        08            .byte	8
01075                                           ! 362  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01076 045B                        10            .byte	$10
01077 045C                        18            .byte	$18
01078 045D                        18            .byte	$18
01079 045E                        18            .byte	$18
01080 045F                        18            .byte	$18
01081 0460                        18            .byte	$18
01082 0461                        18            .byte	$18
01083 0462                        18            .byte	$18
01084                                           ! 363  0x0e, 0x00, 0x0f, 0x08,
01085 0463                        0E            .byte	$E
01086 0464                        00            .byte	0
01087 0465                        0F            .byte	$F
01088 0466                        08            .byte	8
01089                                           ! 364  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01090 0467                        00            .byte	0
01091 0468                        00            .byte	0
01092 0469                        00            .byte	0
01093 046A                        00            .byte	0
01094 046B                        00            .byte	0
01095 046C                        10            .byte	$10
01096 046D                        0A            .byte	$A
01097 046E                        0F            .byte	$F
01098 046F                        FF            .byte	$FF
01099                                           ! 365 },
01100                                           ! 366 {
01101                                           ! 367  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01102 0470                        00            .byte	0
01103 0471                        00            .byte	0
01104 0472                        00            .byte	0
01105 0473                        00            .byte	0
01106 0474                        00            .byte	0
01107 0475                        00            .byte	0
01108 0476                        00            .byte	0
01109 0477                        00            .byte	0
01110                                           ! 368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01111 0478                        00            .byte	0
01112 0479                        00            .byte	0
01113 047A                        00            .byte	0
01114 047B                        00            .byte	0
01115 047C                        00            .byte	0
01116 047D                        00            .byte	0
01117 047E                        00            .byte	0
01118 047F                        00            .byte	0
01119                                           ! 369  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01120 0480                        00            .byte	0
01121 0481                        00            .byte	0
01122 0482                        00            .byte	0
01123 0483                        00            .byte	0
01124 0484                        00            .byte	0
01125 0485                        00            .byte	0
01126 0486                        00            .byte	0
01127 0487                        00            .byte	0
01128                                           ! 370  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01129 0488                        00            .byte	0
01130 0489                        00            .byte	0
01131 048A                        00            .byte	0
01132 048B                        00            .byte	0
01133 048C                        00            .byte	0
01134 048D                        00            .byte	0
01135 048E                        00            .byte	0
01136 048F                        00            .byte	0
01137                                           ! 371  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01138 0490                        00            .byte	0
01139 0491                        00            .byte	0
01140 0492                        00            .byte	0
01141 0493                        00            .byte	0
01142 0494                        00            .byte	0
01143 0495                        00            .byte	0
01144 0496                        00            .byte	0
01145 0497                        00            .byte	0
01146                                           ! 372  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01147 0498                        00            .byte	0
01148 0499                        00            .byte	0
01149 049A                        00            .byte	0
01150 049B                        00            .byte	0
01151 049C                        00            .byte	0
01152 049D                        00            .byte	0
01153 049E                        00            .byte	0
01154 049F                        00            .byte	0
01155                                           ! 373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01156 04A0                        00            .byte	0
01157 04A1                        00            .byte	0
01158 04A2                        00            .byte	0
01159 04A3                        00            .byte	0
01160 04A4                        00            .byte	0
01161 04A5                        00            .byte	0
01162 04A6                        00            .byte	0
01163 04A7                        00            .byte	0
01164                                           ! 374  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01165 04A8                        00            .byte	0
01166 04A9                        00            .byte	0
01167 04AA                        00            .byte	0
01168 04AB                        00            .byte	0
01169 04AC                        00            .byte	0
01170 04AD                        00            .byte	0
01171 04AE                        00            .byte	0
01172 04AF                        00            .byte	0
01173                                           ! 375 },
01174                                           ! 376 {
01175                                           ! 377  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01176 04B0                        00            .byte	0
01177 04B1                        00            .byte	0
01178 04B2                        00            .byte	0
01179 04B3                        00            .byte	0
01180 04B4                        00            .byte	0
01181 04B5                        00            .byte	0
01182 04B6                        00            .byte	0
01183 04B7                        00            .byte	0
01184                                           ! 378  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01185 04B8                        00            .byte	0
01186 04B9                        00            .byte	0
01187 04BA                        00            .byte	0
01188 04BB                        00            .byte	0
01189 04BC                        00            .byte	0
01190 04BD                        00            .byte	0
01191 04BE                        00            .byte	0
01192 04BF                        00            .byte	0
01193                                           ! 379  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01194 04C0                        00            .byte	0
01195 04C1                        00            .byte	0
01196 04C2                        00            .byte	0
01197 04C3                        00            .byte	0
01198 04C4                        00            .byte	0
01199 04C5                        00            .byte	0
01200 04C6                        00            .byte	0
01201 04C7                        00            .byte	0
01202                                           ! 380  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01203 04C8                        00            .byte	0
01204 04C9                        00            .byte	0
01205 04CA                        00            .byte	0
01206 04CB                        00            .byte	0
01207 04CC                        00            .byte	0
01208 04CD                        00            .byte	0
01209 04CE                        00            .byte	0
01210 04CF                        00            .byte	0
01211                                           ! 381  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01212 04D0                        00            .byte	0
01213 04D1                        00            .byte	0
01214 04D2                        00            .byte	0
01215 04D3                        00            .byte	0
01216 04D4                        00            .byte	0
01217 04D5                        00            .byte	0
01218 04D6                        00            .byte	0
01219 04D7                        00            .byte	0
01220                                           ! 382  0x00, 0x00, 0x00, 0x00, 0x
01221 04D8                        00            .byte	0
01222 04D9                        00            .byte	0
01223 04DA                        00            .byte	0
01224 04DB                        00            .byte	0
01225                                           ! 382 00, 0x00, 0x00, 0x00,
01226 04DC                        00            .byte	0
01227 04DD                        00            .byte	0
01228 04DE                        00            .byte	0
01229 04DF                        00            .byte	0
01230                                           ! 383  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01231 04E0                        00            .byte	0
01232 04E1                        00            .byte	0
01233 04E2                        00            .byte	0
01234 04E3                        00            .byte	0
01235 04E4                        00            .byte	0
01236 04E5                        00            .byte	0
01237 04E6                        00            .byte	0
01238 04E7                        00            .byte	0
01239                                           ! 384  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01240 04E8                        00            .byte	0
01241 04E9                        00            .byte	0
01242 04EA                        00            .byte	0
01243 04EB                        00            .byte	0
01244 04EC                        00            .byte	0
01245 04ED                        00            .byte	0
01246 04EE                        00            .byte	0
01247 04EF                        00            .byte	0
01248                                           ! 385 },
01249                                           ! 386 {
01250                                           ! 387  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01251 04F0                        00            .byte	0
01252 04F1                        00            .byte	0
01253 04F2                        00            .byte	0
01254 04F3                        00            .byte	0
01255 04F4                        00            .byte	0
01256 04F5                        00            .byte	0
01257 04F6                        00            .byte	0
01258 04F7                        00            .byte	0
01259                                           ! 388  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01260 04F8                        00            .byte	0
01261 04F9                        00            .byte	0
01262 04FA                        00            .byte	0
01263 04FB                        00            .byte	0
01264 04FC                        00            .byte	0
01265 04FD                        00            .byte	0
01266 04FE                        00            .byte	0
01267 04FF                        00            .byte	0
01268                                           ! 389  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01269 0500                        00            .byte	0
01270 0501                        00            .byte	0
01271 0502                        00            .byte	0
01272 0503                        00            .byte	0
01273 0504                        00            .byte	0
01274 0505                        00            .byte	0
01275 0506                        00            .byte	0
01276 0507                        00            .byte	0
01277                                           ! 390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01278 0508                        00            .byte	0
01279 0509                        00            .byte	0
01280 050A                        00            .byte	0
01281 050B                        00            .byte	0
01282 050C                        00            .byte	0
01283 050D                        00            .byte	0
01284 050E                        00            .byte	0
01285 050F                        00            .byte	0
01286                                           ! 391  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01287 0510                        00            .byte	0
01288 0511                        00            .byte	0
01289 0512                        00            .byte	0
01290 0513                        00            .byte	0
01291 0514                        00            .byte	0
01292 0515                        00            .byte	0
01293 0516                        00            .byte	0
01294 0517                        00            .byte	0
01295                                           ! 392  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01296 0518                        00            .byte	0
01297 0519                        00            .byte	0
01298 051A                        00            .byte	0
01299 051B                        00            .byte	0
01300 051C                        00            .byte	0
01301 051D                        00            .byte	0
01302 051E                        00            .byte	0
01303 051F                        00            .byte	0
01304                                           ! 393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01305 0520                        00            .byte	0
01306 0521                        00            .byte	0
01307 0522                        00            .byte	0
01308 0523                        00            .byte	0
01309 0524                        00            .byte	0
01310 0525                        00            .byte	0
01311 0526                        00            .byte	0
01312 0527                        00            .byte	0
01313                                           ! 394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01314 0528                        00            .byte	0
01315 0529                        00            .byte	0
01316 052A                        00            .byte	0
01317 052B                        00            .byte	0
01318 052C                        00            .byte	0
01319 052D                        00            .byte	0
01320 052E                        00            .byte	0
01321 052F                        00            .byte	0
01322                                           ! 395 },
01323                                           ! 396 {
01324                                           ! 397  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01325 0530                        00            .byte	0
01326 0531                        00            .byte	0
01327 0532                        00            .byte	0
01328 0533                        00            .byte	0
01329 0534                        00            .byte	0
01330 0535                        00            .byte	0
01331 0536                        00            .byte	0
01332 0537                        00            .byte	0
01333                                           ! 398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01334 0538                        00            .byte	0
01335 0539                        00            .byte	0
01336 053A                        00            .byte	0
01337 053B                        00            .byte	0
01338 053C                        00            .byte	0
01339 053D                        00            .byte	0
01340 053E                        00            .byte	0
01341 053F                        00            .byte	0
01342                                           ! 399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01343 0540                        00            .byte	0
01344 0541                        00            .byte	0
01345 0542                        00            .byte	0
01346 0543                        00            .byte	0
01347 0544                        00            .byte	0
01348 0545                        00            .byte	0
01349 0546                        00            .byte	0
01350 0547                        00            .byte	0
01351                                           ! 400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01352 0548                        00            .byte	0
01353 0549                        00            .byte	0
01354 054A                        00            .byte	0
01355 054B                        00            .byte	0
01356 054C                        00            .byte	0
01357 054D                        00            .byte	0
01358 054E                        00            .byte	0
01359 054F                        00            .byte	0
01360                                           ! 401  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01361 0550                        00            .byte	0
01362 0551                        00            .byte	0
01363 0552                        00            .byte	0
01364 0553                        00            .byte	0
01365 0554                        00            .byte	0
01366 0555                        00            .byte	0
01367 0556                        00            .byte	0
01368 0557                        00            .byte	0
01369                                           ! 402  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01370 0558                        00            .byte	0
01371 0559                        00            .byte	0
01372 055A                        00            .byte	0
01373 055B                        00            .byte	0
01374 055C                        00            .byte	0
01375 055D                        00            .byte	0
01376 055E                        00            .byte	0
01377 055F                        00            .byte	0
01378                                           ! 403  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01379 0560                        00            .byte	0
01380 0561                        00            .byte	0
01381 0562                        00            .byte	0
01382 0563                        00            .byte	0
01383 0564                        00            .byte	0
01384 0565                        00            .byte	0
01385 0566                        00            .byte	0
01386 0567                        00            .byte	0
01387                                           ! 404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01388 0568                        00            .byte	0
01389 0569                        00            .byte	0
01390 056A                        00            .byte	0
01391 056B                        00            .byte	0
01392 056C                        00            .byte	0
01393 056D                        00            .byte	0
01394 056E                        00            .byte	0
01395 056F                        00            .byte	0
01396                                           ! 405 },
01397                                           ! 406 {
01398                                           ! 407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01399 0570                        00            .byte	0
01400 0571                        00            .byte	0
01401 0572                        00            .byte	0
01402 0573                        00            .byte	0
01403 0574                        00            .byte	0
01404 0575                        00            .byte	0
01405 0576                        00            .byte	0
01406 0577                        00            .byte	0
01407                                           ! 408  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01408 0578                        00            .byte	0
01409 0579                        00            .byte	0
01410 057A                        00            .byte	0
01411 057B                        00            .byte	0
01412 057C                        00            .byte	0
01413 057D                        00            .byte	0
01414 057E                        00            .byte	0
01415 057F                        00            .byte	0
01416                                           ! 409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01417 0580                        00            .byte	0
01418 0581                        00            .byte	0
01419 0582                        00            .byte	0
01420 0583                        00            .byte	0
01421 0584                        00            .byte	0
01422 0585                        00            .byte	0
01423 0586                        00            .byte	0
01424 0587                        00            .byte	0
01425                                           ! 410  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01426 0588                        00            .byte	0
01427 0589                        00            .byte	0
01428 058A                        00            .byte	0
01429 058B                        00            .byte	0
01430 058C                        00            .byte	0
01431 058D                        00            .byte	0
01432 058E                        00            .byte	0
01433 058F                        00            .byte	0
01434                                           ! 411  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01435 0590                        00            .byte	0
01436 0591                        00            .byte	0
01437 0592                        00            .byte	0
01438 0593                        00            .byte	0
01439 0594                        00            .byte	0
01440 0595                        00            .byte	0
01441 0596                        00            .byte	0
01442 0597                        00            .byte	0
01443                                           ! 412  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01444 0598                        00            .byte	0
01445 0599                        00            .byte	0
01446 059A                        00            .byte	0
01447 059B                        00            .byte	0
01448 059C                        00            .byte	0
01449 059D                        00            .byte	0
01450 059E                        00            .byte	0
01451 059F                        00            .byte	0
01452                                           ! 413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01453 05A0                        00            .byte	0
01454 05A1                        00            .byte	0
01455 05A2                        00            .byte	0
01456 05A3                        00            .byte	0
01457 05A4                        00            .byte	0
01458 05A5                        00            .byte	0
01459 05A6                        00            .byte	0
01460 05A7                        00            .byte	0
01461                                           ! 414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01462 05A8                        00            .byte	0
01463 05A9                        00            .byte	0
01464 05AA                        00            .byte	0
01465 05AB                        00            .byte	0
01466 05AC                        00            .byte	0
01467 05AD                        00            .byte	0
01468 05AE                        00            .byte	0
01469 05AF                        00            .byte	0
01470                                           ! 415 },
01471                                           ! 416 {
01472                                           ! 417  40, 24, 8, 0x00, 0x20,
01473 05B0                        28            .byte	$28
01474 05B1                        18            .byte	$18
01475 05B2                        08            .byte	8
01476 05B3                        00            .byte	0
01477 05B4                        20            .byte	$20
01478                                           ! 418  0x09, 0x0f, 0x00, 0x06,
01479 05B5                        09            .byte	9
01480 05B6                        0F            .byte	$F
01481 05B7                        00            .byte	0
01482 05B8                        06            .byte	6
01483                                           ! 419  0x63,
01484 05B9                        63            .byte	$63
01485                                           ! 420  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01486 05BA                        2D            .byte	$2D
01487 05BB                        27            .byte	$27
01488 05BC                        28            .byte	$28
01489 05BD                        90            .byte	$90
01490 05BE                        2B            .byte	$2B
01491 05BF                        80            .byte	$80
01492 05C0                        BF            .byte	$BF
01493 05C1                        1F            .byte	$1F
01494                                           ! 421  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01495 05C2                        00            .byte	0
01496 05C3                        C0            .byte	$C0
01497 05C4                        00            .byte	0
01498 05C5                        00            .byte	0
01499 05C6                        00            .byte	0
01500 05C7                        00            .byte	0
01501 05C8                        00            .byte	0
01502 05C9                        00            .byte	0
01503                                           ! 422  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01504 05CA                        9C            .byte	$9C
01505 05CB                        8E            .byte	$8E
01506 05CC                        8F            .byte	$8F
01507 05CD                        14            .byte	$14
01508 05CE                        00            .byte	0
01509 05CF                        96            .byte	$96
01510 05D0                        B9            .byte	$B9
01511 05D1                        E3            .byte	$E3
01512                                           ! 423  0xff,
01513 05D2                        FF            .byte	$FF
01514                                           ! 424  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01515 05D3                        00            .byte	0
01516 05D4                        01            .byte	1
01517 05D5                        02            .byte	2
01518 05D6                        03            .byte	3
01519 05D7                        04            .byte	4
01520 05D8                        05            .byte	5
01521 05D9                        06            .byte	6
01522 05DA                        07            .byte	7
01523                                           ! 425  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01524 05DB                        10            .byte	$10
01525 05DC                        11            .byte	$11
01526 05DD                        12            .byte	$12
01527 05DE                        13            .byte	$13
01528 05DF                        14            .byte	$14
01529 05E0                        15            .byte	$15
01530 05E1                        16            .byte	$16
01531 05E2                        17            .byte	$17
01532                                           ! 426  0x01, 0x00, 0x0f, 0x00,
01533 05E3                        01            .byte	1
01534 05E4                        00            .byte	0
01535 05E5                        0F            .byte	$F
01536 05E6                        00            .byte	0
01537                                           ! 427  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01538 05E7                        00            .byte	0
01539 05E8                        00            .byte	0
01540 05E9                        00            .byte	0
01541 05EA                        00            .byte	0
01542 05EB                        00            .byte	0
01543 05EC                        00            .byte	0
01544 05ED                        05            .byte	5
01545 05EE                        0F            .byte	$F
01546 05EF                        FF            .byte	$FF
01547                                           ! 428 },
01548                                           ! 429 {
01549                                           ! 430  80, 24, 8, 0x00, 0x40,
01550 05F0                        50            .byte	$50
01551 05F1                        18            .byte	$18
01552 05F2                        08            .byte	8
01553 05F3                        00            .byte	0
01554 05F4                        40            .byte	$40
01555                                           ! 431  0x01, 0x0f, 0x00, 0x06,
01556 05F5                        01            .byte	1
01557 05F6                        0F            .byte	$F
01558 05F7                        00            .byte	0
01559 05F8                        06            .byte	6
01560                                           ! 432  0x63,
01561 05F9                        63            .byte	$63
01562                                           ! 433  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01563 05FA                        5F            .byte	$5F
01564 05FB                        4F            .byte	$4F
01565 05FC                        50            .byte	$50
01566 05FD                        82            .byte	$82
01567 05FE                        54            .byte	$54
01568 05FF                        80            .byte	$80
01569 0600                        BF            .byte	$BF
01570 0601                        1F            .byte	$1F
01571                                           ! 434  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01572 0602                        00            .byte	0
01573 0603                        C0            .byte	$C0
01574 0604                        00            .byte	0
01575 0605                        00            .byte	0
01576 0606                        00            .byte	0
01577 0607                        00            .byte	0
01578 0608                        00            .byte	0
01579 0609                        00            .byte	0
01580                                           ! 435  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01581 060A                        9C            .byte	$9C
01582 060B                        8E            .byte	$8E
01583 060C                        8F            .byte	$8F
01584 060D                        28            .byte	$28
01585 060E                        00            .byte	0
01586 060F                        96            .byte	$96
01587 0610                        B9            .byte	$B9
01588 0611                        E3            .byte	$E3
01589                                           ! 436  0xff,
01590 0612                        FF            .byte	$FF
01591                                           ! 437  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01592 0613                        00            .byte	0
01593 0614                        01            .byte	1
01594 0615                        02            .byte	2
01595 0616                        03            .byte	3
01596 0617                        04            .byte	4
01597 0618                        05            .byte	5
01598 0619                        06            .byte	6
01599 061A                        07            .byte	7
01600                                           ! 438  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01601 061B                        10            .byte	$10
01602 061C                        11            .byte	$11
01603 061D                        12            .byte	$12
01604 061E                        13            .byte	$13
01605 061F                        14            .byte	$14
01606 0620                        15            .byte	$15
01607 0621                        16            .byte	$16
01608 0622                        17            .byte	$17
01609                                           ! 439  0x01, 0x00, 0x0f, 0x00,
01610 0623                        01            .byte	1
01611 0624                        00            .byte	0
01612 0625                        0F            .byte	$F
01613 0626                        00            .byte	0
01614                                           ! 440  0x00,
01615                                           ! 440  0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01616 0627                        00            .byte	0
01617 0628                        00            .byte	0
01618 0629                        00            .byte	0
01619 062A                        00            .byte	0
01620 062B                        00            .byte	0
01621 062C                        00            .byte	0
01622 062D                        05            .byte	5
01623 062E                        0F            .byte	$F
01624 062F                        FF            .byte	$FF
01625                                           ! 441 },
01626                                           ! 442 {
01627                                           ! 443  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01628 0630                        00            .byte	0
01629 0631                        00            .byte	0
01630 0632                        00            .byte	0
01631 0633                        00            .byte	0
01632 0634                        00            .byte	0
01633 0635                        00            .byte	0
01634 0636                        00            .byte	0
01635 0637                        00            .byte	0
01636                                           ! 444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01637 0638                        00            .byte	0
01638 0639                        00            .byte	0
01639 063A                        00            .byte	0
01640 063B                        00            .byte	0
01641 063C                        00            .byte	0
01642 063D                        00            .byte	0
01643 063E                        00            .byte	0
01644 063F                        00            .byte	0
01645                                           ! 445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01646 0640                        00            .byte	0
01647 0641                        00            .byte	0
01648 0642                        00            .byte	0
01649 0643                        00            .byte	0
01650 0644                        00            .byte	0
01651 0645                        00            .byte	0
01652 0646                        00            .byte	0
01653 0647                        00            .byte	0
01654                                           ! 446  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01655 0648                        00            .byte	0
01656 0649                        00            .byte	0
01657 064A                        00            .byte	0
01658 064B                        00            .byte	0
01659 064C                        00            .byte	0
01660 064D                        00            .byte	0
01661 064E                        00            .byte	0
01662 064F                        00            .byte	0
01663                                           ! 447  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01664 0650                        00            .byte	0
01665 0651                        00            .byte	0
01666 0652                        00            .byte	0
01667 0653                        00            .byte	0
01668 0654                        00            .byte	0
01669 0655                        00            .byte	0
01670 0656                        00            .byte	0
01671 0657                        00            .byte	0
01672                                           ! 448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01673 0658                        00            .byte	0
01674 0659                        00            .byte	0
01675 065A                        00            .byte	0
01676 065B                        00            .byte	0
01677 065C                        00            .byte	0
01678 065D                        00            .byte	0
01679 065E                        00            .byte	0
01680 065F                        00            .byte	0
01681                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01682 0660                        00            .byte	0
01683 0661                        00            .byte	0
01684 0662                        00            .byte	0
01685 0663                        00            .byte	0
01686 0664                        00            .byte	0
01687 0665                        00            .byte	0
01688 0666                        00            .byte	0
01689 0667                        00            .byte	0
01690                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01691 0668                        00            .byte	0
01692 0669                        00            .byte	0
01693 066A                        00            .byte	0
01694 066B                        00            .byte	0
01695 066C                        00            .byte	0
01696 066D                        00            .byte	0
01697 066E                        00            .byte	0
01698 066F                        00            .byte	0
01699                                           ! 451 },
01700                                           ! 452 {
01701                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01702 0670                        00            .byte	0
01703 0671                        00            .byte	0
01704 0672                        00            .byte	0
01705 0673                        00            .byte	0
01706 0674                        00            .byte	0
01707 0675                        00            .byte	0
01708 0676                        00            .byte	0
01709 0677                        00            .byte	0
01710                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01711 0678                        00            .byte	0
01712 0679                        00            .byte	0
01713 067A                        00            .byte	0
01714 067B                        00            .byte	0
01715 067C                        00            .byte	0
01716 067D                        00            .byte	0
01717 067E                        00            .byte	0
01718 067F                        00            .byte	0
01719                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01720 0680                        00            .byte	0
01721 0681                        00            .byte	0
01722 0682                        00            .byte	0
01723 0683                        00            .byte	0
01724 0684                        00            .byte	0
01725 0685                        00            .byte	0
01726 0686                        00            .byte	0
01727 0687                        00            .byte	0
01728                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01729 0688                        00            .byte	0
01730 0689                        00            .byte	0
01731 068A                        00            .byte	0
01732 068B                        00            .byte	0
01733 068C                        00            .byte	0
01734 068D                        00            .byte	0
01735 068E                        00            .byte	0
01736 068F                        00            .byte	0
01737                                           ! 457  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01738 0690                        00            .byte	0
01739 0691                        00            .byte	0
01740 0692                        00            .byte	0
01741 0693                        00            .byte	0
01742 0694                        00            .byte	0
01743 0695                        00            .byte	0
01744 0696                        00            .byte	0
01745 0697                        00            .byte	0
01746                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01747 0698                        00            .byte	0
01748 0699                        00            .byte	0
01749 069A                        00            .byte	0
01750 069B                        00            .byte	0
01751 069C                        00            .byte	0
01752 069D                        00            .byte	0
01753 069E                        00            .byte	0
01754 069F                        00            .byte	0
01755                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01756 06A0                        00            .byte	0
01757 06A1                        00            .byte	0
01758 06A2                        00            .byte	0
01759 06A3                        00            .byte	0
01760 06A4                        00            .byte	0
01761 06A5                        00            .byte	0
01762 06A6                        00            .byte	0
01763 06A7                        00            .byte	0
01764                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01765 06A8                        00            .byte	0
01766 06A9                        00            .byte	0
01767 06AA                        00            .byte	0
01768 06AB                        00            .byte	0
01769 06AC                        00            .byte	0
01770 06AD                        00            .byte	0
01771 06AE                        00            .byte	0
01772 06AF                        00            .byte	0
01773                                           ! 461 },
01774                                           ! 462 {
01775                                           ! 463  80, 24, 14, 0x00, 0x80,
01776 06B0                        50            .byte	$50
01777 06B1                        18            .byte	$18
01778 06B2                        0E            .byte	$E
01779 06B3                        00            .byte	0
01780 06B4                        80            .byte	$80
01781                                           ! 464  0x01, 0x0f, 0x00, 0x06,
01782 06B5                        01            .byte	1
01783 06B6                        0F            .byte	$F
01784 06B7                        00            .byte	0
01785 06B8                        06            .byte	6
01786                                           ! 465  0xa3,
01787 06B9                        A3            .byte	$A3
01788                                           ! 466  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01789 06BA                        5F            .byte	$5F
01790 06BB                        4F            .byte	$4F
01791 06BC                        50            .byte	$50
01792 06BD                        82            .byte	$82
01793 06BE                        54            .byte	$54
01794 06BF                        80            .byte	$80
01795 06C0                        BF            .byte	$BF
01796 06C1                        1F            .byte	$1F
01797                                           ! 467  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01798 06C2                        00            .byte	0
01799 06C3                        40            .byte	$40
01800 06C4                        00            .byte	0
01801 06C5                        00            .byte	0
01802 06C6                        00            .byte	0
01803 06C7                        00            .byte	0
01804 06C8                        00            .byte	0
01805 06C9                        00            .byte	0
01806                                           ! 468  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01807 06CA                        83            .byte	$83
01808 06CB                        85            .byte	$85
01809 06CC                        5D            .byte	$5D
01810 06CD                        28            .byte	$28
01811 06CE                        0F            .byte	$F
01812 06CF                        63            .byte	$63
01813 06D0                        BA            .byte	$BA
01814 06D1                        E3            .byte	$E3
01815                                           ! 469  0xff,
01816 06D2                        FF            .byte	$FF
01817                                           ! 470  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
01818 06D3                        00            .byte	0
01819 06D4                        08            .byte	8
01820 06D5                        00            .byte	0
01821 06D6                        00            .byte	0
01822 06D7                        18            .byte	$18
01823 06D8                        18            .byte	$18
01824 06D9                        00            .byte	0
01825 06DA                        00            .byte	0
01826                                           ! 471  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
01827 06DB                        00            .byte	0
01828 06DC                        08            .byte	8
01829 06DD                        00            .byte	0
01830 06DE                        00            .byte	0
01831 06DF                        00            .byte	0
01832 06E0                        18            .byte	$18
01833 06E1                        00            .byte	0
01834 06E2                        00            .byte	0
01835                                           ! 472  0x01, 0x00, 0x01, 0x00,
01836 06E3                        01            .byte	1
01837 06E4                        00            .byte	0
01838 06E5                        01            .byte	1
01839 06E6                        00            .byte	0
01840                                           ! 473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01841 06E7                        00            .byte	0
01842 06E8                        00            .byte	0
01843 06E9                        00            .byte	0
01844 06EA                        00            .byte	0
01845 06EB                        00            .byte	0
01846 06EC                        00            .byte	0
01847 06ED                        05            .byte	5
01848 06EE                        0F            .byte	$F
01849 06EF                        FF            .byte	$FF
01850                                           ! 474 },
01851                                           ! 475 {
01852                                           ! 476  80, 24, 14, 0x00, 0x80,
01853 06F0                        50            .byte	$50
01854 06F1                        18            .byte	$18
01855 06F2                        0E            .byte	$E
01856 06F3                        00            .byte	0
01857 06F4                        80            .byte	$80
01858                                           ! 477  0x01, 0x0f, 0x00, 0x06,
01859 06F5                        01            .byte	1
01860 06F6                        0F            .byte	$F
01861 06F7                        00            .byte	0
01862 06F8                        06            .byte	6
01863                                           ! 478  0xa3,
01864 06F9                        A3            .byte	$A3
01865                                           ! 479  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01866 06FA                        5F            .byte	$5F
01867 06FB                        4F            .byte	$4F
01868 06FC                        50            .byte	$50
01869 06FD                        82            .byte	$82
01870 06FE                        54            .byte	$54
01871 06FF                        80            .byte	$80
01872 0700                        BF            .byte	$BF
01873 0701                        1F            .byte	$1F
01874                                           ! 480  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01875 0702                        00            .byte	0
01876 0703                        40            .byte	$40
01877 0704                        00            .byte	0
01878 0705                        00            .byte	0
01879 0706                        00            .byte	0
01880 0707                        00            .byte	0
01881 0708                        00            .byte	0
01882 0709                        00            .byte	0
01883                                           ! 481  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01884 070A                        83            .byte	$83
01885 070B                        85            .byte	$85
01886 070C                        5D            .byte	$5D
01887 070D                        28            .byte	$28
01888 070E                        0F            .byte	$F
01889 070F                        63            .byte	$63
01890 0710                        BA            .byte	$BA
01891 0711                        E3            .byte	$E3
01892                                           ! 482  0xff,
01893 0712                        FF            .byte	$FF
01894                                           ! 483  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
01895 0713                        00            .byte	0
01896 0714                        01            .byte	1
01897 0715                        02            .byte	2
01898 0716                        03            .byte	3
01899 0717                        04            .byte	4
01900 0718                        05            .byte	5
01901 0719                        14            .byte	$14
01902 071A                        07            .byte	7
01903                                           ! 484  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
01904 071B                        38            .byte	$38
01905 071C                        39            .byte	$39
01906 071D                        3A            .byte	$3A
01907 071E                        3B            .byte	$3B
01908 071F                        3C            .byte	$3C
01909 0720                        3D            .byte	$3D
01910 0721                        3E            .byte	$3E
01911 0722                        3F            .byte	$3F
01912                                           ! 485  0x01, 0x00, 0x0f, 0x00,
01913 0723                        01            .byte	1
01914 0724                        00            .byte	0
01915 0725                        0F            .byte	$F
01916 0726                        00            .byte	0
01917                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01918 0727                        00            .byte	0
01919 0728                        00            .byte	0
01920 0729                        00            .byte	0
01921 072A                        00            .byte	0
01922 072B                        00            .byte	0
01923 072C                        00            .byte	0
01924 072D                        05            .byte	5
01925 072E                        0F            .byte	$F
01926 072F                        FF            .byte	$FF
01927                                           ! 487 },
01928                                           ! 488 {
01929                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01930 0730                        00            .byte	0
01931 0731                        00            .byte	0
01932 0732                        00            .byte	0
01933 0733                        00            .byte	0
01934 0734                        00            .byte	0
01935 0735                        00            .byte	0
01936 0736                        00            .byte	0
01937 0737                        00            .byte	0
01938                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01939 0738                        00            .byte	0
01940 0739                        00            .byte	0
01941 073A                        00            .byte	0
01942 073B                        00            .byte	0
01943 073C                        00            .byte	0
01944 073D                        00            .byte	0
01945 073E                        00            .byte	0
01946 073F                        00            .byte	0
01947                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01948 0740                        00            .byte	0
01949 0741                        00            .byte	0
01950 0742                        00            .byte	0
01951 0743                        00            .byte	0
01952 0744                        00            .byte	0
01953 0745                        00            .byte	0
01954 0746                        00            .byte	0
01955 0747                        00            .byte	0
01956                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01957 0748                        00            .byte	0
01958 0749                        00            .byte	0
01959 074A                        00            .byte	0
01960 074B                        00            .byte	0
01961 074C                        00            .byte	0
01962 074D                        00            .byte	0
01963 074E                        00            .byte	0
01964 074F                        00            .byte	0
01965                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01966 0750                        00            .byte	0
01967 0751                        00            .byte	0
01968 0752                        00            .byte	0
01969 0753                        00            .byte	0
01970 0754                        00            .byte	0
01971 0755                        00            .byte	0
01972 0756                        00            .byte	0
01973 0757                        00            .byte	0
01974                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01975 0758                        00            .byte	0
01976 0759                        00            .byte	0
01977 075A                        00            .byte	0
01978 075B                        00            .byte	0
01979 075C                        00            .byte	0
01980 075D                        00            .byte	0
01981 075E                        00            .byte	0
01982 075F                        00            .byte	0
01983                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01984 0760                        00            .byte	0
01985 0761                        00            .byte	0
01986 0762                        00            .byte	0
01987 0763                        00            .byte	0
01988 0764                        00            .byte	0
01989 0765                        00            .byte	0
01990 0766                        00            .byte	0
01991 0767                        00            .byte	0
01992                                           ! 496  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01993 0768                        00            .byte	0
01994 0769                        00            .byte	0
01995 076A                        00            .byte	0
01996 076B                        00            .byte	0
01997 076C                        00            .byte	0
01998 076D                        00            .byte	0
01999 076E                        00            .byte	0
02000 076F                        00            .byte	0
02001                                           ! 497 },
02002                                           ! 498 {
02003                                           ! 499  0x00, 0x00, 0x
02004 0770                        00            .byte	0
02005 0771                        00            .byte	0
02006                                           ! 499 00, 0x00, 0x00, 0x00, 0x00, 0x00,
02007 0772                        00            .byte	0
02008 0773                        00            .byte	0
02009 0774                        00            .byte	0
02010 0775                        00            .byte	0
02011 0776                        00            .byte	0
02012 0777                        00            .byte	0
02013                                           ! 500  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02014 0778                        00            .byte	0
02015 0779                        00            .byte	0
02016 077A                        00            .byte	0
02017 077B                        00            .byte	0
02018 077C                        00            .byte	0
02019 077D                        00            .byte	0
02020 077E                        00            .byte	0
02021 077F                        00            .byte	0
02022                                           ! 501  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02023 0780                        00            .byte	0
02024 0781                        00            .byte	0
02025 0782                        00            .byte	0
02026 0783                        00            .byte	0
02027 0784                        00            .byte	0
02028 0785                        00            .byte	0
02029 0786                        00            .byte	0
02030 0787                        00            .byte	0
02031                                           ! 502  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02032 0788                        00            .byte	0
02033 0789                        00            .byte	0
02034 078A                        00            .byte	0
02035 078B                        00            .byte	0
02036 078C                        00            .byte	0
02037 078D                        00            .byte	0
02038 078E                        00            .byte	0
02039 078F                        00            .byte	0
02040                                           ! 503  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02041 0790                        00            .byte	0
02042 0791                        00            .byte	0
02043 0792                        00            .byte	0
02044 0793                        00            .byte	0
02045 0794                        00            .byte	0
02046 0795                        00            .byte	0
02047 0796                        00            .byte	0
02048 0797                        00            .byte	0
02049                                           ! 504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02050 0798                        00            .byte	0
02051 0799                        00            .byte	0
02052 079A                        00            .byte	0
02053 079B                        00            .byte	0
02054 079C                        00            .byte	0
02055 079D                        00            .byte	0
02056 079E                        00            .byte	0
02057 079F                        00            .byte	0
02058                                           ! 505  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02059 07A0                        00            .byte	0
02060 07A1                        00            .byte	0
02061 07A2                        00            .byte	0
02062 07A3                        00            .byte	0
02063 07A4                        00            .byte	0
02064 07A5                        00            .byte	0
02065 07A6                        00            .byte	0
02066 07A7                        00            .byte	0
02067                                           ! 506  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02068 07A8                        00            .byte	0
02069 07A9                        00            .byte	0
02070 07AA                        00            .byte	0
02071 07AB                        00            .byte	0
02072 07AC                        00            .byte	0
02073 07AD                        00            .byte	0
02074 07AE                        00            .byte	0
02075 07AF                        00            .byte	0
02076                                           ! 507 },
02077                                           ! 508 {
02078                                           ! 509  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02079 07B0                        00            .byte	0
02080 07B1                        00            .byte	0
02081 07B2                        00            .byte	0
02082 07B3                        00            .byte	0
02083 07B4                        00            .byte	0
02084 07B5                        00            .byte	0
02085 07B6                        00            .byte	0
02086 07B7                        00            .byte	0
02087                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02088 07B8                        00            .byte	0
02089 07B9                        00            .byte	0
02090 07BA                        00            .byte	0
02091 07BB                        00            .byte	0
02092 07BC                        00            .byte	0
02093 07BD                        00            .byte	0
02094 07BE                        00            .byte	0
02095 07BF                        00            .byte	0
02096                                           ! 511  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02097 07C0                        00            .byte	0
02098 07C1                        00            .byte	0
02099 07C2                        00            .byte	0
02100 07C3                        00            .byte	0
02101 07C4                        00            .byte	0
02102 07C5                        00            .byte	0
02103 07C6                        00            .byte	0
02104 07C7                        00            .byte	0
02105                                           ! 512  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02106 07C8                        00            .byte	0
02107 07C9                        00            .byte	0
02108 07CA                        00            .byte	0
02109 07CB                        00            .byte	0
02110 07CC                        00            .byte	0
02111 07CD                        00            .byte	0
02112 07CE                        00            .byte	0
02113 07CF                        00            .byte	0
02114                                           ! 513  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02115 07D0                        00            .byte	0
02116 07D1                        00            .byte	0
02117 07D2                        00            .byte	0
02118 07D3                        00            .byte	0
02119 07D4                        00            .byte	0
02120 07D5                        00            .byte	0
02121 07D6                        00            .byte	0
02122 07D7                        00            .byte	0
02123                                           ! 514  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02124 07D8                        00            .byte	0
02125 07D9                        00            .byte	0
02126 07DA                        00            .byte	0
02127 07DB                        00            .byte	0
02128 07DC                        00            .byte	0
02129 07DD                        00            .byte	0
02130 07DE                        00            .byte	0
02131 07DF                        00            .byte	0
02132                                           ! 515  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02133 07E0                        00            .byte	0
02134 07E1                        00            .byte	0
02135 07E2                        00            .byte	0
02136 07E3                        00            .byte	0
02137 07E4                        00            .byte	0
02138 07E5                        00            .byte	0
02139 07E6                        00            .byte	0
02140 07E7                        00            .byte	0
02141                                           ! 516  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02142 07E8                        00            .byte	0
02143 07E9                        00            .byte	0
02144 07EA                        00            .byte	0
02145 07EB                        00            .byte	0
02146 07EC                        00            .byte	0
02147 07ED                        00            .byte	0
02148 07EE                        00            .byte	0
02149 07EF                        00            .byte	0
02150                                           ! 517 },
02151                                           ! 518 {
02152                                           ! 519  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02153 07F0                        00            .byte	0
02154 07F1                        00            .byte	0
02155 07F2                        00            .byte	0
02156 07F3                        00            .byte	0
02157 07F4                        00            .byte	0
02158 07F5                        00            .byte	0
02159 07F6                        00            .byte	0
02160 07F7                        00            .byte	0
02161                                           ! 520  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02162 07F8                        00            .byte	0
02163 07F9                        00            .byte	0
02164 07FA                        00            .byte	0
02165 07FB                        00            .byte	0
02166 07FC                        00            .byte	0
02167 07FD                        00            .byte	0
02168 07FE                        00            .byte	0
02169 07FF                        00            .byte	0
02170                                           ! 521  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02171 0800                        00            .byte	0
02172 0801                        00            .byte	0
02173 0802                        00            .byte	0
02174 0803                        00            .byte	0
02175 0804                        00            .byte	0
02176 0805                        00            .byte	0
02177 0806                        00            .byte	0
02178 0807                        00            .byte	0
02179                                           ! 522  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02180 0808                        00            .byte	0
02181 0809                        00            .byte	0
02182 080A                        00            .byte	0
02183 080B                        00            .byte	0
02184 080C                        00            .byte	0
02185 080D                        00            .byte	0
02186 080E                        00            .byte	0
02187 080F                        00            .byte	0
02188                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02189 0810                        00            .byte	0
02190 0811                        00            .byte	0
02191 0812                        00            .byte	0
02192 0813                        00            .byte	0
02193 0814                        00            .byte	0
02194 0815                        00            .byte	0
02195 0816                        00            .byte	0
02196 0817                        00            .byte	0
02197                                           ! 524  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02198 0818                        00            .byte	0
02199 0819                        00            .byte	0
02200 081A                        00            .byte	0
02201 081B                        00            .byte	0
02202 081C                        00            .byte	0
02203 081D                        00            .byte	0
02204 081E                        00            .byte	0
02205 081F                        00            .byte	0
02206                                           ! 525  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02207 0820                        00            .byte	0
02208 0821                        00            .byte	0
02209 0822                        00            .byte	0
02210 0823                        00            .byte	0
02211 0824                        00            .byte	0
02212 0825                        00            .byte	0
02213 0826                        00            .byte	0
02214 0827                        00            .byte	0
02215                                           ! 526  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02216 0828                        00            .byte	0
02217 0829                        00            .byte	0
02218 082A                        00            .byte	0
02219 082B                        00            .byte	0
02220 082C                        00            .byte	0
02221 082D                        00            .byte	0
02222 082E                        00            .byte	0
02223 082F                        00            .byte	0
02224                                           ! 527 },
02225                                           ! 528 {
02226                                           ! 529  40, 24, 16, 0x00, 0x08,
02227 0830                        28            .byte	$28
02228 0831                        18            .byte	$18
02229 0832                        10            .byte	$10
02230 0833                        00            .byte	0
02231 0834                        08            .byte	8
02232                                           ! 530  0x08, 0x03, 0x00, 0x02,
02233 0835                        08            .byte	8
02234 0836                        03            .byte	3
02235 0837                        00            .byte	0
02236 0838                        02            .byte	2
02237                                           ! 531  0x67,
02238 0839                        67            .byte	$67
02239                                           ! 532  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02240 083A                        2D            .byte	$2D
02241 083B                        27            .byte	$27
02242 083C                        28            .byte	$28
02243 083D                        90            .byte	$90
02244 083E                        2B            .byte	$2B
02245 083F                        A0            .byte	$A0
02246 0840                        BF            .byte	$BF
02247 0841                        1F            .byte	$1F
02248                                           ! 533  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02249 0842                        00            .byte	0
02250 0843                        4F            .byte	$4F
02251 0844                        0D            .byte	$D
02252 0845                        0E            .byte	$E
02253 0846                        00            .byte	0
02254 0847                        00            .byte	0
02255 0848                        00            .byte	0
02256 0849                        00            .byte	0
02257                                           ! 534  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02258 084A                        9C            .byte	$9C
02259 084B                        8E            .byte	$8E
02260 084C                        8F            .byte	$8F
02261 084D                        14            .byte	$14
02262 084E                        1F            .byte	$1F
02263 084F                        96            .byte	$96
02264 0850                        B9            .byte	$B9
02265 0851                        A3            .byte	$A3
02266                                           ! 535  0xff,
02267 0852                        FF            .byte	$FF
02268                                           ! 536  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02269 0853                        00            .byte	0
02270 0854                        01            .byte	1
02271 0855                        02            .byte	2
02272 0856                        03            .byte	3
02273 0857                        04            .byte	4
02274 0858                        05            .byte	5
02275 0859                        14            .byte	$14
02276 085A                        07            .byte	7
02277                                           ! 537  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02278 085B                        38            .byte	$38
02279 085C                        39            .byte	$39
02280 085D                        3A            .byte	$3A
02281 085E                        3B            .byte	$3B
02282 085F                        3C            .byte	$3C
02283 0860                        3D            .byte	$3D
02284 0861                        3E            .byte	$3E
02285 0862                        3F            .byte	$3F
02286                                           ! 538  0x0c, 0x00, 0x0f, 0x08,
02287 0863                        0C            .byte	$C
02288 0864                        00            .byte	0
02289 0865                        0F            .byte	$F
02290 0866                        08            .byte	8
02291                                           ! 539  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02292 0867                        00            .byte	0
02293 0868                        00            .byte	0
02294 0869                        00            .byte	0
02295 086A                        00            .byte	0
02296 086B                        00            .byte	0
02297 086C                        10            .byte	$10
02298 086D                        0E            .byte	$E
02299 086E                        0F            .byte	$F
02300 086F                        FF            .byte	$FF
02301                                           ! 540 },
02302                                           ! 541 {
02303                                           ! 542  80, 24, 16, 0x00, 0x10,
02304 0870                        50            .byte	$50
02305 0871                        18            .byte	$18
02306 0872                        10            .byte	$10
02307 0873                        00            .byte	0
02308 0874                        10            .byte	$10
02309                                           ! 543  0x00, 0x03, 0x00, 0x02,
02310 0875                        00            .byte	0
02311 0876                        03            .byte	3
02312 0877                        00            .byte	0
02313 0878                        02            .byte	2
02314                                           ! 544  0x67,
02315 0879                        67            .byte	$67
02316                                           ! 545  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02317 087A                        5F            .byte	$5F
02318 087B                        4F            .byte	$4F
02319 087C                        50            .byte	$50
02320 087D                        82            .byte	$82
02321 087E                        55            .byte	$55
02322 087F                        81            .byte	$81
02323 0880                        BF            .byte	$BF
02324 0881                        1F            .byte	$1F
02325                                           ! 546  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02326 0882                        00            .byte	0
02327 0883                        4F            .byte	$4F
02328 0884                        0D            .byte	$D
02329 0885                        0E            .byte	$E
02330 0886                        00            .byte	0
02331 0887                        00            .byte	0
02332 0888                        00            .byte	0
02333 0889                        00            .byte	0
02334                                           ! 547  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02335 088A                        9C            .byte	$9C
02336 088B                        8E            .byte	$8E
02337 088C                        8F            .byte	$8F
02338 088D                        28            .byte	$28
02339 088E                        1F            .byte	$1F
02340 088F                        96            .byte	$96
02341 0890                        B9            .byte	$B9
02342 0891                        A3            .byte	$A3
02343                                           ! 548  0xff,
02344 0892                        FF            .byte	$FF
02345                                           ! 549  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02346 0893                        00            .byte	0
02347 0894                        01            .byte	1
02348 0895                        02            .byte	2
02349 0896                        03            .byte	3
02350 0897                        04            .byte	4
02351 0898                        05            .byte	5
02352 0899                        14            .byte	$14
02353 089A                        07            .byte	7
02354                                           ! 550  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02355 089B                        38            .byte	$38
02356 089C                        39            .byte	$39
02357 089D                        3A            .byte	$3A
02358 089E                        3B            .byte	$3B
02359 089F                        3C            .byte	$3C
02360 08A0                        3D            .byte	$3D
02361 08A1                        3E            .byte	$3E
02362 08A2                        3F            .byte	$3F
02363                                           ! 551  0x0c, 0x00, 0x0f, 0x08,
02364 08A3                        0C            .byte	$C
02365 08A4                        00            .byte	0
02366 08A5                        0F            .byte	$F
02367 08A6                        08            .byte	8
02368                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02369 08A7                        00            .byte	0
02370 08A8                        00            .byte	0
02371 08A9                        00            .byte	0
02372 08AA                        00            .byte	0
02373 08AB                        00            .byte	0
02374 08AC                        10            .byte	$10
02375 08AD                        0E            .byte	$E
02376 08AE                        0F            .byte	$F
02377 08AF                        FF            .byte	$FF
02378                                           ! 553 },
02379                                           ! 554 {
02380                                           ! 555  80, 24, 16, 0x00, 0x10,
02381 08B0                        50            .byte	$50
02382 08B1                        18            .byte	$18
02383 08B2                        10            .byte	$10
02384 08B3                        00            .byte	0
02385 08B4                        10            .byte	$10
02386                                           ! 556  0x00, 0x03, 0x00, 0x02,
02387 08B5                        00            .byte	0
02388 08B6                        03            .byte	3
02389 08B7                        00            .byte	0
02390 08B8                        02            .byte	2
02391                                           ! 557  0x66,
02392 08B9                        66            .byte	$66
02393                                           ! 558  0x5f, 0x4f, 0x50, 0x82, 0x
02394 08BA                        5F            .byte	$5F
02395 08BB                        4F            .byte	$4F
02396 08BC                        50            .byte	$50
02397 08BD                        82            .byte	$82
02398                                           ! 558 55, 0x81, 0xbf, 0x1f,
02399 08BE                        55            .byte	$55
02400 08BF                        81            .byte	$81
02401 08C0                        BF            .byte	$BF
02402 08C1                        1F            .byte	$1F
02403                                           ! 559  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02404 08C2                        00            .byte	0
02405 08C3                        4F            .byte	$4F
02406 08C4                        0D            .byte	$D
02407 08C5                        0E            .byte	$E
02408 08C6                        00            .byte	0
02409 08C7                        00            .byte	0
02410 08C8                        00            .byte	0
02411 08C9                        00            .byte	0
02412                                           ! 560  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02413 08CA                        9C            .byte	$9C
02414 08CB                        8E            .byte	$8E
02415 08CC                        8F            .byte	$8F
02416 08CD                        28            .byte	$28
02417 08CE                        0F            .byte	$F
02418 08CF                        96            .byte	$96
02419 08D0                        B9            .byte	$B9
02420 08D1                        A3            .byte	$A3
02421                                           ! 561  0xff,
02422 08D2                        FF            .byte	$FF
02423                                           ! 562  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02424 08D3                        00            .byte	0
02425 08D4                        08            .byte	8
02426 08D5                        08            .byte	8
02427 08D6                        08            .byte	8
02428 08D7                        08            .byte	8
02429 08D8                        08            .byte	8
02430 08D9                        08            .byte	8
02431 08DA                        08            .byte	8
02432                                           ! 563  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02433 08DB                        10            .byte	$10
02434 08DC                        18            .byte	$18
02435 08DD                        18            .byte	$18
02436 08DE                        18            .byte	$18
02437 08DF                        18            .byte	$18
02438 08E0                        18            .byte	$18
02439 08E1                        18            .byte	$18
02440 08E2                        18            .byte	$18
02441                                           ! 564  0x0e, 0x00, 0x0f, 0x08,
02442 08E3                        0E            .byte	$E
02443 08E4                        00            .byte	0
02444 08E5                        0F            .byte	$F
02445 08E6                        08            .byte	8
02446                                           ! 565  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02447 08E7                        00            .byte	0
02448 08E8                        00            .byte	0
02449 08E9                        00            .byte	0
02450 08EA                        00            .byte	0
02451 08EB                        00            .byte	0
02452 08EC                        10            .byte	$10
02453 08ED                        0A            .byte	$A
02454 08EE                        0F            .byte	$F
02455 08EF                        FF            .byte	$FF
02456                                           ! 566 },
02457                                           ! 567 {
02458                                           ! 568  80, 29, 16, 0x00, 0x00,
02459 08F0                        50            .byte	$50
02460 08F1                        1D            .byte	$1D
02461 08F2                        10            .byte	$10
02462 08F3                        00            .byte	0
02463 08F4                        00            .byte	0
02464                                           ! 569  0x01, 0x0f, 0x00, 0x06,
02465 08F5                        01            .byte	1
02466 08F6                        0F            .byte	$F
02467 08F7                        00            .byte	0
02468 08F8                        06            .byte	6
02469                                           ! 570  0xe3,
02470 08F9                        E3            .byte	$E3
02471                                           ! 571  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02472 08FA                        5F            .byte	$5F
02473 08FB                        4F            .byte	$4F
02474 08FC                        50            .byte	$50
02475 08FD                        82            .byte	$82
02476 08FE                        54            .byte	$54
02477 08FF                        80            .byte	$80
02478 0900                        0B            .byte	$B
02479 0901                        3E            .byte	$3E
02480                                           ! 572  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02481 0902                        00            .byte	0
02482 0903                        40            .byte	$40
02483 0904                        00            .byte	0
02484 0905                        00            .byte	0
02485 0906                        00            .byte	0
02486 0907                        00            .byte	0
02487 0908                        00            .byte	0
02488 0909                        00            .byte	0
02489                                           ! 573  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02490 090A                        EA            .byte	$EA
02491 090B                        8C            .byte	$8C
02492 090C                        DF            .byte	$DF
02493 090D                        28            .byte	$28
02494 090E                        00            .byte	0
02495 090F                        E7            .byte	$E7
02496 0910                        04            .byte	4
02497 0911                        E3            .byte	$E3
02498                                           ! 574  0xff,
02499 0912                        FF            .byte	$FF
02500                                           ! 575  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02501 0913                        00            .byte	0
02502 0914                        3F            .byte	$3F
02503 0915                        00            .byte	0
02504 0916                        3F            .byte	$3F
02505 0917                        00            .byte	0
02506 0918                        3F            .byte	$3F
02507 0919                        00            .byte	0
02508 091A                        3F            .byte	$3F
02509                                           ! 576  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02510 091B                        00            .byte	0
02511 091C                        3F            .byte	$3F
02512 091D                        00            .byte	0
02513 091E                        3F            .byte	$3F
02514 091F                        00            .byte	0
02515 0920                        3F            .byte	$3F
02516 0921                        00            .byte	0
02517 0922                        3F            .byte	$3F
02518                                           ! 577  0x01, 0x00, 0x0f, 0x00,
02519 0923                        01            .byte	1
02520 0924                        00            .byte	0
02521 0925                        0F            .byte	$F
02522 0926                        00            .byte	0
02523                                           ! 578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02524 0927                        00            .byte	0
02525 0928                        00            .byte	0
02526 0929                        00            .byte	0
02527 092A                        00            .byte	0
02528 092B                        00            .byte	0
02529 092C                        00            .byte	0
02530 092D                        05            .byte	5
02531 092E                        0F            .byte	$F
02532 092F                        FF            .byte	$FF
02533                                           ! 579 },
02534                                           ! 580 {
02535                                           ! 581  80, 29, 16, 0x00, 0x00,
02536 0930                        50            .byte	$50
02537 0931                        1D            .byte	$1D
02538 0932                        10            .byte	$10
02539 0933                        00            .byte	0
02540 0934                        00            .byte	0
02541                                           ! 582  0x01, 0x0f, 0x00, 0x06,
02542 0935                        01            .byte	1
02543 0936                        0F            .byte	$F
02544 0937                        00            .byte	0
02545 0938                        06            .byte	6
02546                                           ! 583  0xe3,
02547 0939                        E3            .byte	$E3
02548                                           ! 584  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02549 093A                        5F            .byte	$5F
02550 093B                        4F            .byte	$4F
02551 093C                        50            .byte	$50
02552 093D                        82            .byte	$82
02553 093E                        54            .byte	$54
02554 093F                        80            .byte	$80
02555 0940                        0B            .byte	$B
02556 0941                        3E            .byte	$3E
02557                                           ! 585  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02558 0942                        00            .byte	0
02559 0943                        40            .byte	$40
02560 0944                        00            .byte	0
02561 0945                        00            .byte	0
02562 0946                        00            .byte	0
02563 0947                        00            .byte	0
02564 0948                        00            .byte	0
02565 0949                        00            .byte	0
02566                                           ! 586  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02567 094A                        EA            .byte	$EA
02568 094B                        8C            .byte	$8C
02569 094C                        DF            .byte	$DF
02570 094D                        28            .byte	$28
02571 094E                        00            .byte	0
02572 094F                        E7            .byte	$E7
02573 0950                        04            .byte	4
02574 0951                        E3            .byte	$E3
02575                                           ! 587  0xff,
02576 0952                        FF            .byte	$FF
02577                                           ! 588  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02578 0953                        00            .byte	0
02579 0954                        01            .byte	1
02580 0955                        02            .byte	2
02581 0956                        03            .byte	3
02582 0957                        04            .byte	4
02583 0958                        05            .byte	5
02584 0959                        14            .byte	$14
02585 095A                        07            .byte	7
02586                                           ! 589  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02587 095B                        38            .byte	$38
02588 095C                        39            .byte	$39
02589 095D                        3A            .byte	$3A
02590 095E                        3B            .byte	$3B
02591 095F                        3C            .byte	$3C
02592 0960                        3D            .byte	$3D
02593 0961                        3E            .byte	$3E
02594 0962                        3F            .byte	$3F
02595                                           ! 590  0x01, 0x00, 0x0f, 0x00,
02596 0963                        01            .byte	1
02597 0964                        00            .byte	0
02598 0965                        0F            .byte	$F
02599 0966                        00            .byte	0
02600                                           ! 591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02601 0967                        00            .byte	0
02602 0968                        00            .byte	0
02603 0969                        00            .byte	0
02604 096A                        00            .byte	0
02605 096B                        00            .byte	0
02606 096C                        00            .byte	0
02607 096D                        05            .byte	5
02608 096E                        0F            .byte	$F
02609 096F                        FF            .byte	$FF
02610                                           ! 592 },
02611                                           ! 593 {
02612                                           ! 594  40, 24, 8, 0x00, 0x00,
02613 0970                        28            .byte	$28
02614 0971                        18            .byte	$18
02615 0972                        08            .byte	8
02616 0973                        00            .byte	0
02617 0974                        00            .byte	0
02618                                           ! 595  0x01, 0x0f, 0x00, 0x0e,
02619 0975                        01            .byte	1
02620 0976                        0F            .byte	$F
02621 0977                        00            .byte	0
02622 0978                        0E            .byte	$E
02623                                           ! 596  0x63,
02624 0979                        63            .byte	$63
02625                                           ! 597  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02626 097A                        5F            .byte	$5F
02627 097B                        4F            .byte	$4F
02628 097C                        50            .byte	$50
02629 097D                        82            .byte	$82
02630 097E                        54            .byte	$54
02631 097F                        80            .byte	$80
02632 0980                        BF            .byte	$BF
02633 0981                        1F            .byte	$1F
02634                                           ! 598  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02635 0982                        00            .byte	0
02636 0983                        41            .byte	$41
02637 0984                        00            .byte	0
02638 0985                        00            .byte	0
02639 0986                        00            .byte	0
02640 0987                        00            .byte	0
02641 0988                        00            .byte	0
02642 0989                        00            .byte	0
02643                                           ! 599  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02644 098A                        9C            .byte	$9C
02645 098B                        8E            .byte	$8E
02646 098C                        8F            .byte	$8F
02647 098D                        28            .byte	$28
02648 098E                        40            .byte	$40
02649 098F                        96            .byte	$96
02650 0990                        B9            .byte	$B9
02651 0991                        A3            .byte	$A3
02652                                           ! 600  0xff,
02653 0992                        FF            .byte	$FF
02654                                           ! 601  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02655 0993                        00            .byte	0
02656 0994                        01            .byte	1
02657 0995                        02            .byte	2
02658 0996                        03            .byte	3
02659 0997                        04            .byte	4
02660 0998                        05            .byte	5
02661 0999                        06            .byte	6
02662 099A                        07            .byte	7
02663                                           ! 602  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02664 099B                        08            .byte	8
02665 099C                        09            .byte	9
02666 099D                        0A            .byte	$A
02667 099E                        0B            .byte	$B
02668 099F                        0C            .byte	$C
02669 09A0                        0D            .byte	$D
02670 09A1                        0E            .byte	$E
02671 09A2                        0F            .byte	$F
02672                                           ! 603  0x41, 0x00, 0x0f, 0x00,
02673 09A3                        41            .byte	$41
02674 09A4                        00            .byte	0
02675 09A5                        0F            .byte	$F
02676 09A6                        00            .byte	0
02677                                           ! 604  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02678 09A7                        00            .byte	0
02679 09A8                        00            .byte	0
02680 09A9                        00            .byte	0
02681 09AA                        00            .byte	0
02682 09AB                        00            .byte	0
02683 09AC                        40            .byte	$40
02684 09AD                        05            .byte	5
02685 09AE                        0F            .byte	$F
02686 09AF                        FF            .byte	$FF
02687                                           ! 605 },
02688                                           ! 606 {
02689                                           ! 607  100, 36, 16, 0x00, 0x00,
02690 09B0                        64            .byte	$64
02691 09B1                        24            .byte	$24
02692 09B2                        10            .byte	$10
02693 09B3                        00            .byte	0
02694 09B4                        00            .byte	0
02695                                           ! 608  0x01, 0x0f, 0x00, 0x06,
02696 09B5                        01            .byte	1
02697 09B6                        0F            .byte	$F
02698 09B7                        00            .byte	0
02699 09B8                        06            .byte	6
02700                                           ! 609  0xe3,
02701 09B9                        E3            .byte	$E3
02702                                           ! 610  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02703 09BA                        7F            .byte	$7F
02704 09BB                        63            .byte	$63
02705 09BC                        63            .byte	$63
02706 09BD                        83            .byte	$83
02707 09BE                        6B            .byte	$6B
02708 09BF                        1B            .byte	$1B
02709 09C0                        72            .byte	$72
02710 09C1                        F0            .byte	$F0
02711                                           ! 611  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02712 09C2                        00            .byte	0
02713 09C3                        60            .byte	$60
02714 09C4                        00            .byte	0
02715 09C5                        00            .byte	0
02716 09C6                        00            .byte	0
02717 09C7                        00            .byte	0
02718 09C8                        00            .byte	0
02719 09C9                        00            .byte	0
02720                                           ! 612  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02721 09CA                        59            .byte	$59
02722 09CB                        8D            .byte	$8D
02723 09CC                        57            .byte	$57
02724 09CD                        32            .byte	$32
02725 09CE                        00            .byte	0
02726 09CF                        57            .byte	$57
02727 09D0                        73            .byte	$73
02728 09D1                        E3            .byte	$E3
02729                                           ! 613  0xff,
02730 09D2                        FF            .byte	$FF
02731                                           ! 614  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02732 09D3                        00            .byte	0
02733 09D4                        01            .byte	1
02734 09D5                        02            .byte	2
02735 09D6                        03            .byte	3
02736 09D7                        04            .byte	4
02737 09D8                        05            .byte	5
02738 09D9                        14            .byte	$14
02739 09DA                        07            .byte	7
02740                                           ! 615  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02741 09DB                        38            .byte	$38
02742 09DC                        39            .byte	$39
02743 09DD                        3A            .byte	$3A
02744 09DE                        3B            .byte	$3B
02745 09DF                        3C            .byte	$3C
02746 09E0                        3D            .byte	$3D
02747 09E1                        3E            .byte	$3E
02748 09E2                        3F            .byte	$3F
02749                                           ! 616  0x01, 0x00, 0x0f, 0x00,
02750 09E3                        01            .byte	1
02751 09E4                        00            .byte	0
02752 09E5                        0F            .byte	$F
02753 09E6                        00            .byte	0
02754                                           ! 617  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02755 09E7                        00            .byte	0
02756 09E8                        00            .byte	0
02757 09E9                        00            .byte	0
02758 09EA                        00            .byte	0
02759 09EB                        00            .byte	0
02760 09EC                        00            .byte	0
02761 09ED                        05            .byte	5
02762 09EE                        0F            .byte	$F
02763 09EF                        FF            .byte	$FF
02764                                           ! 618 },
02765                                           ! 619 };
02766                                           !BCC_EOS
02767                                           ! 620 static Bit8u palette0[63+1][3]=
02768                                           ! 621 {
02769                       000009F0            _palette0:
02770                                           ! 622   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x0
02771 09F0                        00            .byte	0
02772 09F1                        00            .byte	0
02773 09F2                        00            .byte	0
02774 09F3                        00            .byte	0
02775 09F4                        00            .byte	0
02776 09F5                        00            .byte	0
02777 09F6                        00            .byte	0
02778 09F7                        00            .byte	0
02779 09F8                        00            .byte	0
02780 09F9                        00            .byte	0
02781 09FA                        00            .byte	0
02782 09FB                        00            .byte	0
02783 09FC                        00            .byte	0
02784 09FD                        00            .byte	0
02785 09FE                        00            .byte	0
02786 09FF                        00            .byte	0
02787 0A00                        00            .byte	0
02788 0A01                        00            .byte	0
02789 0A02                        00            .byte	0
02790 0A03                        00            .byte	0
02791 0A04                        00            .byte	0
02792 0A05                        00            .byte	0
02793 0A06                        00            .byte	0
02794                                           ! 622 0,
02795 0A07                        00            .byte	0
02796                                           ! 623   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02797 0A08                        2A            .byte	$2A
02798 0A09                        2A            .byte	$2A
02799 0A0A                        2A            .byte	$2A
02800 0A0B                        2A            .byte	$2A
02801 0A0C                        2A            .byte	$2A
02802 0A0D                        2A            .byte	$2A
02803 0A0E                        2A            .byte	$2A
02804 0A0F                        2A            .byte	$2A
02805 0A10                        2A            .byte	$2A
02806 0A11                        2A            .byte	$2A
02807 0A12                        2A            .byte	$2A
02808 0A13                        2A            .byte	$2A
02809 0A14                        2A            .byte	$2A
02810 0A15                        2A            .byte	$2A
02811 0A16                        2A            .byte	$2A
02812 0A17                        2A            .byte	$2A
02813 0A18                        2A            .byte	$2A
02814 0A19                        2A            .byte	$2A
02815 0A1A                        2A            .byte	$2A
02816 0A1B                        2A            .byte	$2A
02817 0A1C                        2A            .byte	$2A
02818 0A1D                        2A            .byte	$2A
02819 0A1E                        2A            .byte	$2A
02820 0A1F                        2A            .byte	$2A
02821                                           ! 624   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02822 0A20                        2A            .byte	$2A
02823 0A21                        2A            .byte	$2A
02824 0A22                        2A            .byte	$2A
02825 0A23                        2A            .byte	$2A
02826 0A24                        2A            .byte	$2A
02827 0A25                        2A            .byte	$2A
02828 0A26                        2A            .byte	$2A
02829 0A27                        2A            .byte	$2A
02830 0A28                        2A            .byte	$2A
02831 0A29                        2A            .byte	$2A
02832 0A2A                        2A            .byte	$2A
02833 0A2B                        2A            .byte	$2A
02834 0A2C                        2A            .byte	$2A
02835 0A2D                        2A            .byte	$2A
02836 0A2E                        2A            .byte	$2A
02837 0A2F                        2A            .byte	$2A
02838 0A30                        2A            .byte	$2A
02839 0A31                        2A            .byte	$2A
02840 0A32                        2A            .byte	$2A
02841 0A33                        2A            .byte	$2A
02842 0A34                        2A            .byte	$2A
02843 0A35                        2A            .byte	$2A
02844 0A36                        2A            .byte	$2A
02845 0A37                        2A            .byte	$2A
02846                                           ! 625   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
02847 0A38                        3F            .byte	$3F
02848 0A39                        3F            .byte	$3F
02849 0A3A                        3F            .byte	$3F
02850 0A3B                        3F            .byte	$3F
02851 0A3C                        3F            .byte	$3F
02852 0A3D                        3F            .byte	$3F
02853 0A3E                        3F            .byte	$3F
02854 0A3F                        3F            .byte	$3F
02855 0A40                        3F            .byte	$3F
02856 0A41                        3F            .byte	$3F
02857 0A42                        3F            .byte	$3F
02858 0A43                        3F            .byte	$3F
02859 0A44                        3F            .byte	$3F
02860 0A45                        3F            .byte	$3F
02861 0A46                        3F            .byte	$3F
02862 0A47                        3F            .byte	$3F
02863 0A48                        3F            .byte	$3F
02864 0A49                        3F            .byte	$3F
02865 0A4A                        3F            .byte	$3F
02866 0A4B                        3F            .byte	$3F
02867 0A4C                        3F            .byte	$3F
02868 0A4D                        3F            .byte	$3F
02869 0A4E                        3F            .byte	$3F
02870 0A4F                        3F            .byte	$3F
02871                                           ! 626   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02872 0A50                        00            .byte	0
02873 0A51                        00            .byte	0
02874 0A52                        00            .byte	0
02875 0A53                        00            .byte	0
02876 0A54                        00            .byte	0
02877 0A55                        00            .byte	0
02878 0A56                        00            .byte	0
02879 0A57                        00            .byte	0
02880 0A58                        00            .byte	0
02881 0A59                        00            .byte	0
02882 0A5A                        00            .byte	0
02883 0A5B                        00            .byte	0
02884 0A5C                        00            .byte	0
02885 0A5D                        00            .byte	0
02886 0A5E                        00            .byte	0
02887 0A5F                        00            .byte	0
02888 0A60                        00            .byte	0
02889 0A61                        00            .byte	0
02890 0A62                        00            .byte	0
02891 0A63                        00            .byte	0
02892 0A64                        00            .byte	0
02893 0A65                        00            .byte	0
02894 0A66                        00            .byte	0
02895 0A67                        00            .byte	0
02896                                           ! 627   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02897 0A68                        2A            .byte	$2A
02898 0A69                        2A            .byte	$2A
02899 0A6A                        2A            .byte	$2A
02900 0A6B                        2A            .byte	$2A
02901 0A6C                        2A            .byte	$2A
02902 0A6D                        2A            .byte	$2A
02903 0A6E                        2A            .byte	$2A
02904 0A6F                        2A            .byte	$2A
02905 0A70                        2A            .byte	$2A
02906 0A71                        2A            .byte	$2A
02907 0A72                        2A            .byte	$2A
02908 0A73                        2A            .byte	$2A
02909 0A74                        2A            .byte	$2A
02910 0A75                        2A            .byte	$2A
02911 0A76                        2A            .byte	$2A
02912 0A77                        2A            .byte	$2A
02913 0A78                        2A            .byte	$2A
02914 0A79                        2A            .byte	$2A
02915 0A7A                        2A            .byte	$2A
02916 0A7B                        2A            .byte	$2A
02917 0A7C                        2A            .byte	$2A
02918 0A7D                        2A            .byte	$2A
02919 0A7E                        2A            .byte	$2A
02920 0A7F                        2A            .byte	$2A
02921                                           ! 628   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02922 0A80                        2A            .byte	$2A
02923 0A81                        2A            .byte	$2A
02924 0A82                        2A            .byte	$2A
02925 0A83                        2A            .byte	$2A
02926 0A84                        2A            .byte	$2A
02927 0A85                        2A            .byte	$2A
02928 0A86                        2A            .byte	$2A
02929 0A87                        2A            .byte	$2A
02930 0A88                        2A            .byte	$2A
02931 0A89                        2A            .byte	$2A
02932 0A8A                        2A            .byte	$2A
02933 0A8B                        2A            .byte	$2A
02934 0A8C                        2A            .byte	$2A
02935 0A8D                        2A            .byte	$2A
02936 0A8E                        2A            .byte	$2A
02937 0A8F                        2A            .byte	$2A
02938 0A90                        2A            .byte	$2A
02939 0A91                        2A            .byte	$2A
02940 0A92                        2A            .byte	$2A
02941 0A93                        2A            .byte	$2A
02942 0A94                        2A            .byte	$2A
02943 0A95                        2A            .byte	$2A
02944 0A96                        2A            .byte	$2A
02945 0A97                        2A            .byte	$2A
02946                                           ! 629   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
02947 0A98                        3F            .byte	$3F
02948 0A99                        3F            .byte	$3F
02949 0A9A                        3F            .byte	$3F
02950 0A9B                        3F            .byte	$3F
02951 0A9C                        3F            .byte	$3F
02952 0A9D                        3F            .byte	$3F
02953 0A9E                        3F            .byte	$3F
02954 0A9F                        3F            .byte	$3F
02955 0AA0                        3F            .byte	$3F
02956 0AA1                        3F            .byte	$3F
02957 0AA2                        3F            .byte	$3F
02958 0AA3                        3F            .byte	$3F
02959 0AA4                        3F            .byte	$3F
02960 0AA5                        3F            .byte	$3F
02961 0AA6                        3F            .byte	$3F
02962 0AA7                        3F            .byte	$3F
02963 0AA8                        3F            .byte	$3F
02964 0AA9                        3F            .byte	$3F
02965 0AAA                        3F            .byte	$3F
02966 0AAB                        3F            .byte	$3F
02967 0AAC                        3F            .byte	$3F
02968 0AAD                        3F            .byte	$3F
02969 0AAE                        3F            .byte	$3F
02970                                           ! 630 };
02971 0AAF                        3F            .byte	$3F
02972                                           !BCC_EOS
02973                                           ! 631 static Bit8u palette1[63+1][3]=
02974                                           ! 632 {
02975                       00000AB0            _palette1:
02976                                           ! 633   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02977 0AB0                        00            .byte	0
02978 0AB1                        00            .byte	0
02979 0AB2                        00            .byte	0
02980 0AB3                        00            .byte	0
02981 0AB4                        00            .byte	0
02982 0AB5                        2A            .byte	$2A
02983 0AB6                        00            .byte	0
02984 0AB7                        2A            .byte	$2A
02985 0AB8                        00            .byte	0
02986 0AB9                        00            .byte	0
02987 0ABA                        2A            .byte	$2A
02988 0ABB                        2A            .byte	$2A
02989 0ABC                        2A            .byte	$2A
02990 0ABD                        00            .byte	0
02991 0ABE                        00            .byte	0
02992 0ABF                        2A            .byte	$2A
02993 0AC0                        00            .byte	0
02994 0AC1                        2A            .byte	$2A
02995 0AC2                        2A            .byte	$2A
02996 0AC3                        15            .byte	$15
02997 0AC4                        00            .byte	0
02998 0AC5                        2A            .byte	$2A
02999 0AC6                        2A            .byte	$2A
03000 0AC7                        2A            .byte	$2A
03001                                           ! 634   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03002 0AC8                        00            .byte	0
03003 0AC9                        00            .byte	0
03004 0ACA                        00            .byte	0
03005 0ACB                        00            .byte	0
03006 0ACC                        00            .byte	0
03007 0ACD                        2A            .byte	$2A
03008 0ACE                        00            .byte	0
03009 0ACF                        2A            .byte	$2A
03010 0AD0                        00            .byte	0
03011 0AD1                        00            .byte	0
03012 0AD2                        2A            .byte	$2A
03013 0AD3                        2A            .byte	$2A
03014 0AD4                        2A            .byte	$2A
03015 0AD5                        00            .byte	0
03016 0AD6                        00            .byte	0
03017 0AD7                        2A            .byte	$2A
03018 0AD8                        00            .byte	0
03019 0AD9                        2A            .byte	$2A
03020 0ADA                        2A            .byte	$2A
03021 0ADB                        15            .byte	$15
03022 0ADC                        00            .byte	0
03023 0ADD                        2A            .byte	$2A
03024 0ADE                        2A            .byte	$2A
03025 0ADF                        2A            .byte	$2A
03026                                           ! 635   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03027 0AE0                        15            .byte	$15
03028 0AE1                        15            .byte	$15
03029 0AE2                        15            .byte	$15
03030 0AE3                        15            .byte	$15
03031 0AE4                        15            .byte	$15
03032 0AE5                        3F            .byte	$3F
03033 0AE6                        15            .byte	$15
03034 0AE7                        3F            .byte	$3F
03035 0AE8                        15            .byte	$15
03036 0AE9                        15            .byte	$15
03037 0AEA                        3F            .byte	$3F
03038 0AEB                        3F            .byte	$3F
03039 0AEC                        3F            .byte	$3F
03040 0AED                        15            .byte	$15
03041 0AEE                        15            .byte	$15
03042 0AEF                        3F            .byte	$3F
03043 0AF0                        15            .byte	$15
03044 0AF1                        3F            .byte	$3F
03045 0AF2                        3F            .byte	$3F
03046 0AF3                        3F            .byte	$3F
03047 0AF4                        15            .byte	$15
03048 0AF5                        3F            .byte	$3F
03049 0AF6                        3F            .byte	$3F
03050 0AF7                        3F            .byte	$3F
03051                                           ! 636   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03052 0AF8                        15            .byte	$15
03053 0AF9                        15            .byte	$15
03054 0AFA                        15            .byte	$15
03055 0AFB                        15            .byte	$15
03056 0AFC                        15            .byte	$15
03057 0AFD                        3F            .byte	$3F
03058 0AFE                        15            .byte	$15
03059 0AFF                        3F            .byte	$3F
03060 0B00                        15            .byte	$15
03061 0B01                        15            .byte	$15
03062 0B02                        3F            .byte	$3F
03063 0B03                        3F            .byte	$3F
03064 0B04                        3F            .byte	$3F
03065 0B05                        15            .byte	$15
03066 0B06                        15            .byte	$15
03067 0B07                        3F            .byte	$3F
03068 0B08                        15            .byte	$15
03069 0B09                        3F            .byte	$3F
03070 0B0A                        3F            .byte	$3F
03071 0B0B                        3F            .byte	$3F
03072 0B0C                        15            .byte	$15
03073 0B0D                        3F            .byte	$3F
03074 0B0E                        3F            .byte	$3F
03075 0B0F                        3F            .byte	$3F
03076                                           ! 637   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03077 0B10                        00            .byte	0
03078 0B11                        00            .byte	0
03079 0B12                        00            .byte	0
03080 0B13                        00            .byte	0
03081 0B14                        00            .byte	0
03082 0B15                        2A            .byte	$2A
03083 0B16                        00            .byte	0
03084 0B17                        2A            .byte	$2A
03085 0B18                        00            .byte	0
03086 0B19                        00            .byte	0
03087 0B1A                        2A            .byte	$2A
03088 0B1B                        2A            .byte	$2A
03089 0B1C                        2A            .byte	$2A
03090 0B1D                        00            .byte	0
03091 0B1E                        00            .byte	0
03092 0B1F                        2A            .byte	$2A
03093 0B20                        00            .byte	0
03094 0B21                        2A            .byte	$2A
03095 0B22                        2A            .byte	$2A
03096 0B23                        15            .byte	$15
03097 0B24                        00            .byte	0
03098 0B25                        2A            .byte	$2A
03099 0B26                        2A            .byte	$2A
03100 0B27                        2A            .byte	$2A
03101                                           ! 638   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03102 0B28                        00            .byte	0
03103 0B29                        00            .byte	0
03104 0B2A                        00            .byte	0
03105 0B2B                        00            .byte	0
03106 0B2C                        00            .byte	0
03107 0B2D                        2A            .byte	$2A
03108 0B2E                        00            .byte	0
03109 0B2F                        2A            .byte	$2A
03110 0B30                        00            .byte	0
03111 0B31                        00            .byte	0
03112 0B32                        2A            .byte	$2A
03113 0B33                        2A            .byte	$2A
03114 0B34                        2A            .byte	$2A
03115 0B35                        00            .byte	0
03116 0B36                        00            .byte	0
03117 0B37                        2A            .byte	$2A
03118 0B38                        00            .byte	0
03119 0B39                        2A            .byte	$2A
03120 0B3A                        2A            .byte	$2A
03121 0B3B                        15            .byte	$15
03122 0B3C                        00            .byte	0
03123 0B3D                        2A            .byte	$2A
03124 0B3E                        2A            .byte	$2A
03125 0B3F                        2A            .byte	$2A
03126                                           ! 639   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03127 0B40                        15            .byte	$15
03128 0B41                        15            .byte	$15
03129 0B42                        15            .byte	$15
03130 0B43                        15            .byte	$15
03131 0B44                        15            .byte	$15
03132 0B45                        3F            .byte	$3F
03133 0B46                        15            .byte	$15
03134 0B47                        3F            .byte	$3F
03135 0B48                        15            .byte	$15
03136 0B49                        15            .byte	$15
03137 0B4A                        3F            .byte	$3F
03138 0B4B                        3F            .byte	$3F
03139 0B4C                        3F            .byte	$3F
03140 0B4D                        15            .byte	$15
03141 0B4E                        15            .byte	$15
03142 0B4F                        3F            .byte	$3F
03143 0B50                        15            .byte	$15
03144 0B51                        3F            .byte	$3F
03145 0B52                        3F            .byte	$3F
03146 0B53                        3F            .byte	$3F
03147 0B54                        15            .byte	$15
03148 0B55                        3F            .byte	$3F
03149 0B56                        3F            .byte	$3F
03150 0B57                        3F            .byte	$3F
03151                                           ! 640   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03152 0B58                        15            .byte	$15
03153 0B59                        15            .byte	$15
03154 0B5A                        15            .byte	$15
03155 0B5B                        15            .byte	$15
03156 0B5C                        15            .byte	$15
03157 0B5D                        3F            .byte	$3F
03158 0B5E                        15            .byte	$15
03159 0B5F                        3F            .byte	$3F
03160 0B60                        15            .byte	$15
03161 0B61                        15            .byte	$15
03162 0B62                        3F            .byte	$3F
03163 0B63                        3F            .byte	$3F
03164 0B64                        3F            .byte	$3F
03165 0B65                        15            .byte	$15
03166 0B66                        15            .byte	$15
03167 0B67                        3F            .byte	$3F
03168 0B68                        15            .byte	$15
03169 0B69                        3F            .byte	$3F
03170 0B6A                        3F            .byte	$3F
03171 0B6B                        3F            .byte	$3F
03172 0B6C                        15            .byte	$15
03173 0B6D                        3F            .byte	$3F
03174 0B6E                        3F            .byte	$3F
03175                                           ! 641 };
03176 0B6F                        3F            .byte	$3F
03177                                           !BCC_EOS
03178                                           ! 642 static Bit8u palette2[63+1][3]=
03179                                           ! 643 {
03180                       00000B70            _palette2:
03181                                           ! 644   0x00,0x00,0x00, 0x00,
03182 0B70                        00            .byte	0
03183 0B71                        00            .byte	0
03184 0B72                        00            .byte	0
03185                                           ! 644 0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03186 0B73                        00            .byte	0
03187 0B74                        00            .byte	0
03188 0B75                        2A            .byte	$2A
03189 0B76                        00            .byte	0
03190 0B77                        2A            .byte	$2A
03191 0B78                        00            .byte	0
03192 0B79                        00            .byte	0
03193 0B7A                        2A            .byte	$2A
03194 0B7B                        2A            .byte	$2A
03195 0B7C                        2A            .byte	$2A
03196 0B7D                        00            .byte	0
03197 0B7E                        00            .byte	0
03198 0B7F                        2A            .byte	$2A
03199 0B80                        00            .byte	0
03200 0B81                        2A            .byte	$2A
03201 0B82                        2A            .byte	$2A
03202 0B83                        2A            .byte	$2A
03203 0B84                        00            .byte	0
03204 0B85                        2A            .byte	$2A
03205 0B86                        2A            .byte	$2A
03206 0B87                        2A            .byte	$2A
03207                                           ! 645   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03208 0B88                        00            .byte	0
03209 0B89                        00            .byte	0
03210 0B8A                        15            .byte	$15
03211 0B8B                        00            .byte	0
03212 0B8C                        00            .byte	0
03213 0B8D                        3F            .byte	$3F
03214 0B8E                        00            .byte	0
03215 0B8F                        2A            .byte	$2A
03216 0B90                        15            .byte	$15
03217 0B91                        00            .byte	0
03218 0B92                        2A            .byte	$2A
03219 0B93                        3F            .byte	$3F
03220 0B94                        2A            .byte	$2A
03221 0B95                        00            .byte	0
03222 0B96                        15            .byte	$15
03223 0B97                        2A            .byte	$2A
03224 0B98                        00            .byte	0
03225 0B99                        3F            .byte	$3F
03226 0B9A                        2A            .byte	$2A
03227 0B9B                        2A            .byte	$2A
03228 0B9C                        15            .byte	$15
03229 0B9D                        2A            .byte	$2A
03230 0B9E                        2A            .byte	$2A
03231 0B9F                        3F            .byte	$3F
03232                                           ! 646   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03233 0BA0                        00            .byte	0
03234 0BA1                        15            .byte	$15
03235 0BA2                        00            .byte	0
03236 0BA3                        00            .byte	0
03237 0BA4                        15            .byte	$15
03238 0BA5                        2A            .byte	$2A
03239 0BA6                        00            .byte	0
03240 0BA7                        3F            .byte	$3F
03241 0BA8                        00            .byte	0
03242 0BA9                        00            .byte	0
03243 0BAA                        3F            .byte	$3F
03244 0BAB                        2A            .byte	$2A
03245 0BAC                        2A            .byte	$2A
03246 0BAD                        15            .byte	$15
03247 0BAE                        00            .byte	0
03248 0BAF                        2A            .byte	$2A
03249 0BB0                        15            .byte	$15
03250 0BB1                        2A            .byte	$2A
03251 0BB2                        2A            .byte	$2A
03252 0BB3                        3F            .byte	$3F
03253 0BB4                        00            .byte	0
03254 0BB5                        2A            .byte	$2A
03255 0BB6                        3F            .byte	$3F
03256 0BB7                        2A            .byte	$2A
03257                                           ! 647   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03258 0BB8                        00            .byte	0
03259 0BB9                        15            .byte	$15
03260 0BBA                        15            .byte	$15
03261 0BBB                        00            .byte	0
03262 0BBC                        15            .byte	$15
03263 0BBD                        3F            .byte	$3F
03264 0BBE                        00            .byte	0
03265 0BBF                        3F            .byte	$3F
03266 0BC0                        15            .byte	$15
03267 0BC1                        00            .byte	0
03268 0BC2                        3F            .byte	$3F
03269 0BC3                        3F            .byte	$3F
03270 0BC4                        2A            .byte	$2A
03271 0BC5                        15            .byte	$15
03272 0BC6                        15            .byte	$15
03273 0BC7                        2A            .byte	$2A
03274 0BC8                        15            .byte	$15
03275 0BC9                        3F            .byte	$3F
03276 0BCA                        2A            .byte	$2A
03277 0BCB                        3F            .byte	$3F
03278 0BCC                        15            .byte	$15
03279 0BCD                        2A            .byte	$2A
03280 0BCE                        3F            .byte	$3F
03281 0BCF                        3F            .byte	$3F
03282                                           ! 648   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03283 0BD0                        15            .byte	$15
03284 0BD1                        00            .byte	0
03285 0BD2                        00            .byte	0
03286 0BD3                        15            .byte	$15
03287 0BD4                        00            .byte	0
03288 0BD5                        2A            .byte	$2A
03289 0BD6                        15            .byte	$15
03290 0BD7                        2A            .byte	$2A
03291 0BD8                        00            .byte	0
03292 0BD9                        15            .byte	$15
03293 0BDA                        2A            .byte	$2A
03294 0BDB                        2A            .byte	$2A
03295 0BDC                        3F            .byte	$3F
03296 0BDD                        00            .byte	0
03297 0BDE                        00            .byte	0
03298 0BDF                        3F            .byte	$3F
03299 0BE0                        00            .byte	0
03300 0BE1                        2A            .byte	$2A
03301 0BE2                        3F            .byte	$3F
03302 0BE3                        2A            .byte	$2A
03303 0BE4                        00            .byte	0
03304 0BE5                        3F            .byte	$3F
03305 0BE6                        2A            .byte	$2A
03306 0BE7                        2A            .byte	$2A
03307                                           ! 649   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03308 0BE8                        15            .byte	$15
03309 0BE9                        00            .byte	0
03310 0BEA                        15            .byte	$15
03311 0BEB                        15            .byte	$15
03312 0BEC                        00            .byte	0
03313 0BED                        3F            .byte	$3F
03314 0BEE                        15            .byte	$15
03315 0BEF                        2A            .byte	$2A
03316 0BF0                        15            .byte	$15
03317 0BF1                        15            .byte	$15
03318 0BF2                        2A            .byte	$2A
03319 0BF3                        3F            .byte	$3F
03320 0BF4                        3F            .byte	$3F
03321 0BF5                        00            .byte	0
03322 0BF6                        15            .byte	$15
03323 0BF7                        3F            .byte	$3F
03324 0BF8                        00            .byte	0
03325 0BF9                        3F            .byte	$3F
03326 0BFA                        3F            .byte	$3F
03327 0BFB                        2A            .byte	$2A
03328 0BFC                        15            .byte	$15
03329 0BFD                        3F            .byte	$3F
03330 0BFE                        2A            .byte	$2A
03331 0BFF                        3F            .byte	$3F
03332                                           ! 650   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03333 0C00                        15            .byte	$15
03334 0C01                        15            .byte	$15
03335 0C02                        00            .byte	0
03336 0C03                        15            .byte	$15
03337 0C04                        15            .byte	$15
03338 0C05                        2A            .byte	$2A
03339 0C06                        15            .byte	$15
03340 0C07                        3F            .byte	$3F
03341 0C08                        00            .byte	0
03342 0C09                        15            .byte	$15
03343 0C0A                        3F            .byte	$3F
03344 0C0B                        2A            .byte	$2A
03345 0C0C                        3F            .byte	$3F
03346 0C0D                        15            .byte	$15
03347 0C0E                        00            .byte	0
03348 0C0F                        3F            .byte	$3F
03349 0C10                        15            .byte	$15
03350 0C11                        2A            .byte	$2A
03351 0C12                        3F            .byte	$3F
03352 0C13                        3F            .byte	$3F
03353 0C14                        00            .byte	0
03354 0C15                        3F            .byte	$3F
03355 0C16                        3F            .byte	$3F
03356 0C17                        2A            .byte	$2A
03357                                           ! 651   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03358 0C18                        15            .byte	$15
03359 0C19                        15            .byte	$15
03360 0C1A                        15            .byte	$15
03361 0C1B                        15            .byte	$15
03362 0C1C                        15            .byte	$15
03363 0C1D                        3F            .byte	$3F
03364 0C1E                        15            .byte	$15
03365 0C1F                        3F            .byte	$3F
03366 0C20                        15            .byte	$15
03367 0C21                        15            .byte	$15
03368 0C22                        3F            .byte	$3F
03369 0C23                        3F            .byte	$3F
03370 0C24                        3F            .byte	$3F
03371 0C25                        15            .byte	$15
03372 0C26                        15            .byte	$15
03373 0C27                        3F            .byte	$3F
03374 0C28                        15            .byte	$15
03375 0C29                        3F            .byte	$3F
03376 0C2A                        3F            .byte	$3F
03377 0C2B                        3F            .byte	$3F
03378 0C2C                        15            .byte	$15
03379 0C2D                        3F            .byte	$3F
03380 0C2E                        3F            .byte	$3F
03381                                           ! 652 };
03382 0C2F                        3F            .byte	$3F
03383                                           !BCC_EOS
03384                                           ! 653 static Bit8u palette3[256][3]=
03385                                           ! 654 {
03386                       00000C30            _palette3:
03387                                           ! 655   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03388 0C30                        00            .byte	0
03389 0C31                        00            .byte	0
03390 0C32                        00            .byte	0
03391 0C33                        00            .byte	0
03392 0C34                        00            .byte	0
03393 0C35                        2A            .byte	$2A
03394 0C36                        00            .byte	0
03395 0C37                        2A            .byte	$2A
03396 0C38                        00            .byte	0
03397 0C39                        00            .byte	0
03398 0C3A                        2A            .byte	$2A
03399 0C3B                        2A            .byte	$2A
03400 0C3C                        2A            .byte	$2A
03401 0C3D                        00            .byte	0
03402 0C3E                        00            .byte	0
03403 0C3F                        2A            .byte	$2A
03404 0C40                        00            .byte	0
03405 0C41                        2A            .byte	$2A
03406 0C42                        2A            .byte	$2A
03407 0C43                        15            .byte	$15
03408 0C44                        00            .byte	0
03409 0C45                        2A            .byte	$2A
03410 0C46                        2A            .byte	$2A
03411 0C47                        2A            .byte	$2A
03412                                           ! 656   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03413 0C48                        15            .byte	$15
03414 0C49                        15            .byte	$15
03415 0C4A                        15            .byte	$15
03416 0C4B                        15            .byte	$15
03417 0C4C                        15            .byte	$15
03418 0C4D                        3F            .byte	$3F
03419 0C4E                        15            .byte	$15
03420 0C4F                        3F            .byte	$3F
03421 0C50                        15            .byte	$15
03422 0C51                        15            .byte	$15
03423 0C52                        3F            .byte	$3F
03424 0C53                        3F            .byte	$3F
03425 0C54                        3F            .byte	$3F
03426 0C55                        15            .byte	$15
03427 0C56                        15            .byte	$15
03428 0C57                        3F            .byte	$3F
03429 0C58                        15            .byte	$15
03430 0C59                        3F            .byte	$3F
03431 0C5A                        3F            .byte	$3F
03432 0C5B                        3F            .byte	$3F
03433 0C5C                        15            .byte	$15
03434 0C5D                        3F            .byte	$3F
03435 0C5E                        3F            .byte	$3F
03436 0C5F                        3F            .byte	$3F
03437                                           ! 657   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03438 0C60                        00            .byte	0
03439 0C61                        00            .byte	0
03440 0C62                        00            .byte	0
03441 0C63                        05            .byte	5
03442 0C64                        05            .byte	5
03443 0C65                        05            .byte	5
03444 0C66                        08            .byte	8
03445 0C67                        08            .byte	8
03446 0C68                        08            .byte	8
03447 0C69                        0B            .byte	$B
03448 0C6A                        0B            .byte	$B
03449 0C6B                        0B            .byte	$B
03450 0C6C                        0E            .byte	$E
03451 0C6D                        0E            .byte	$E
03452 0C6E                        0E            .byte	$E
03453 0C6F                        11            .byte	$11
03454 0C70                        11            .byte	$11
03455 0C71                        11            .byte	$11
03456 0C72                        14            .byte	$14
03457 0C73                        14            .byte	$14
03458 0C74                        14            .byte	$14
03459 0C75                        18            .byte	$18
03460 0C76                        18            .byte	$18
03461 0C77                        18            .byte	$18
03462                                           ! 658   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03463 0C78                        1C            .byte	$1C
03464 0C79                        1C            .byte	$1C
03465 0C7A                        1C            .byte	$1C
03466 0C7B                        20            .byte	$20
03467 0C7C                        20            .byte	$20
03468 0C7D                        20            .byte	$20
03469 0C7E                        24            .byte	$24
03470 0C7F                        24            .byte	$24
03471 0C80                        24            .byte	$24
03472 0C81                        28            .byte	$28
03473 0C82                        28            .byte	$28
03474 0C83                        28            .byte	$28
03475 0C84                        2D            .byte	$2D
03476 0C85                        2D            .byte	$2D
03477 0C86                        2D            .byte	$2D
03478 0C87                        32            .byte	$32
03479 0C88                        32            .byte	$32
03480 0C89                        32            .byte	$32
03481 0C8A                        38            .byte	$38
03482 0C8B                        38            .byte	$38
03483 0C8C                        38            .byte	$38
03484 0C8D                        3F            .byte	$3F
03485 0C8E                        3F            .byte	$3F
03486 0C8F                        3F            .byte	$3F
03487                                           ! 659   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03488 0C90                        00            .byte	0
03489 0C91                        00            .byte	0
03490 0C92                        3F            .byte	$3F
03491 0C93                        10            .byte	$10
03492 0C94                        00            .byte	0
03493 0C95                        3F            .byte	$3F
03494 0C96                        1F            .byte	$1F
03495 0C97                        00            .byte	0
03496 0C98                        3F            .byte	$3F
03497 0C99                        2F            .byte	$2F
03498 0C9A                        00            .byte	0
03499 0C9B                        3F            .byte	$3F
03500 0C9C                        3F            .byte	$3F
03501 0C9D                        00            .byte	0
03502 0C9E                        3F            .byte	$3F
03503 0C9F                        3F            .byte	$3F
03504 0CA0                        00            .byte	0
03505 0CA1                        2F            .byte	$2F
03506 0CA2                        3F            .byte	$3F
03507 0CA3                        00            .byte	0
03508 0CA4                        1F            .byte	$1F
03509 0CA5                        3F            .byte	$3F
03510 0CA6                        00            .byte	0
03511 0CA7                        10            .byte	$10
03512                                           ! 660   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03513 0CA8                        3F            .byte	$3F
03514 0CA9                        00            .byte	0
03515 0CAA                        00            .byte	0
03516 0CAB                        3F            .byte	$3F
03517 0CAC                        10            .byte	$10
03518 0CAD                        00            .byte	0
03519 0CAE                        3F            .byte	$3F
03520 0CAF                        1F            .byte	$1F
03521 0CB0                        00            .byte	0
03522 0CB1                        3F            .byte	$3F
03523 0CB2                        2F            .byte	$2F
03524 0CB3                        00            .byte	0
03525 0CB4                        3F            .byte	$3F
03526 0CB5                        3F            .byte	$3F
03527 0CB6                        00            .byte	0
03528 0CB7                        2F            .byte	$2F
03529 0CB8                        3F            .byte	$3F
03530 0CB9                        00            .byte	0
03531 0CBA                        1F            .byte	$1F
03532 0CBB                        3F            .byte	$3F
03533 0CBC                        00            .byte	0
03534 0CBD                        10            .byte	$10
03535 0CBE                        3F            .byte	$3F
03536 0CBF                        00            .byte	0
03537                                           ! 661   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03538 0CC0                        00            .byte	0
03539 0CC1                        3F            .byte	$3F
03540 0CC2                        00            .byte	0
03541 0CC3                        00            .byte	0
03542 0CC4                        3F            .byte	$3F
03543 0CC5                        10            .byte	$10
03544 0CC6                        00            .byte	0
03545 0CC7                        3F            .byte	$3F
03546 0CC8                        1F            .byte	$1F
03547 0CC9                        00            .byte	0
03548 0CCA                        3F            .byte	$3F
03549 0CCB                        2F            .byte	$2F
03550 0CCC                        00            .byte	0
03551 0CCD                        3F            .byte	$3F
03552 0CCE                        3F            .byte	$3F
03553 0CCF                        00            .byte	0
03554 0CD0                        2F            .byte	$2F
03555 0CD1                        3F            .byte	$3F
03556 0CD2                        00            .byte	0
03557 0CD3                        1F            .byte	$1F
03558 0CD4                        3F            .byte	$3F
03559 0CD5                        00            .byte	0
03560 0CD6                        10            .byte	$10
03561 0CD7                        3F            .byte	$3F
03562                                           ! 662   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f
03563 0CD8                        1F            .byte	$1F
03564 0CD9                        1F            .byte	$1F
03565 0CDA                        3F            .byte	$3F
03566 0CDB                        27            .byte	$27
03567 0CDC                        1F            .byte	$1F
03568 0CDD                        3F            .byte	$3F
03569 0CDE                        2F            .byte	$2F
03570 0CDF                        1F            .byte	$1F
03571 0CE0                        3F            .byte	$3F
03572 0CE1                        37            .byte	$37
03573 0CE2                        1F            .byte	$1F
03574 0CE3                        3F            .byte	$3F
03575 0CE4                        3F            .byte	$3F
03576 0CE5                        1F            .byte	$1F
03577 0CE6                        3F            .byte	$3F
03578                                           ! 662 ,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03579 0CE7                        3F            .byte	$3F
03580 0CE8                        1F            .byte	$1F
03581 0CE9                        37            .byte	$37
03582 0CEA                        3F            .byte	$3F
03583 0CEB                        1F            .byte	$1F
03584 0CEC                        2F            .byte	$2F
03585 0CED                        3F            .byte	$3F
03586 0CEE                        1F            .byte	$1F
03587 0CEF                        27            .byte	$27
03588                                           ! 663   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03589 0CF0                        3F            .byte	$3F
03590 0CF1                        1F            .byte	$1F
03591 0CF2                        1F            .byte	$1F
03592 0CF3                        3F            .byte	$3F
03593 0CF4                        27            .byte	$27
03594 0CF5                        1F            .byte	$1F
03595 0CF6                        3F            .byte	$3F
03596 0CF7                        2F            .byte	$2F
03597 0CF8                        1F            .byte	$1F
03598 0CF9                        3F            .byte	$3F
03599 0CFA                        37            .byte	$37
03600 0CFB                        1F            .byte	$1F
03601 0CFC                        3F            .byte	$3F
03602 0CFD                        3F            .byte	$3F
03603 0CFE                        1F            .byte	$1F
03604 0CFF                        37            .byte	$37
03605 0D00                        3F            .byte	$3F
03606 0D01                        1F            .byte	$1F
03607 0D02                        2F            .byte	$2F
03608 0D03                        3F            .byte	$3F
03609 0D04                        1F            .byte	$1F
03610 0D05                        27            .byte	$27
03611 0D06                        3F            .byte	$3F
03612 0D07                        1F            .byte	$1F
03613                                           ! 664   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03614 0D08                        1F            .byte	$1F
03615 0D09                        3F            .byte	$3F
03616 0D0A                        1F            .byte	$1F
03617 0D0B                        1F            .byte	$1F
03618 0D0C                        3F            .byte	$3F
03619 0D0D                        27            .byte	$27
03620 0D0E                        1F            .byte	$1F
03621 0D0F                        3F            .byte	$3F
03622 0D10                        2F            .byte	$2F
03623 0D11                        1F            .byte	$1F
03624 0D12                        3F            .byte	$3F
03625 0D13                        37            .byte	$37
03626 0D14                        1F            .byte	$1F
03627 0D15                        3F            .byte	$3F
03628 0D16                        3F            .byte	$3F
03629 0D17                        1F            .byte	$1F
03630 0D18                        37            .byte	$37
03631 0D19                        3F            .byte	$3F
03632 0D1A                        1F            .byte	$1F
03633 0D1B                        2F            .byte	$2F
03634 0D1C                        3F            .byte	$3F
03635 0D1D                        1F            .byte	$1F
03636 0D1E                        27            .byte	$27
03637 0D1F                        3F            .byte	$3F
03638                                           ! 665   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03639 0D20                        2D            .byte	$2D
03640 0D21                        2D            .byte	$2D
03641 0D22                        3F            .byte	$3F
03642 0D23                        31            .byte	$31
03643 0D24                        2D            .byte	$2D
03644 0D25                        3F            .byte	$3F
03645 0D26                        36            .byte	$36
03646 0D27                        2D            .byte	$2D
03647 0D28                        3F            .byte	$3F
03648 0D29                        3A            .byte	$3A
03649 0D2A                        2D            .byte	$2D
03650 0D2B                        3F            .byte	$3F
03651 0D2C                        3F            .byte	$3F
03652 0D2D                        2D            .byte	$2D
03653 0D2E                        3F            .byte	$3F
03654 0D2F                        3F            .byte	$3F
03655 0D30                        2D            .byte	$2D
03656 0D31                        3A            .byte	$3A
03657 0D32                        3F            .byte	$3F
03658 0D33                        2D            .byte	$2D
03659 0D34                        36            .byte	$36
03660 0D35                        3F            .byte	$3F
03661 0D36                        2D            .byte	$2D
03662 0D37                        31            .byte	$31
03663                                           ! 666   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03664 0D38                        3F            .byte	$3F
03665 0D39                        2D            .byte	$2D
03666 0D3A                        2D            .byte	$2D
03667 0D3B                        3F            .byte	$3F
03668 0D3C                        31            .byte	$31
03669 0D3D                        2D            .byte	$2D
03670 0D3E                        3F            .byte	$3F
03671 0D3F                        36            .byte	$36
03672 0D40                        2D            .byte	$2D
03673 0D41                        3F            .byte	$3F
03674 0D42                        3A            .byte	$3A
03675 0D43                        2D            .byte	$2D
03676 0D44                        3F            .byte	$3F
03677 0D45                        3F            .byte	$3F
03678 0D46                        2D            .byte	$2D
03679 0D47                        3A            .byte	$3A
03680 0D48                        3F            .byte	$3F
03681 0D49                        2D            .byte	$2D
03682 0D4A                        36            .byte	$36
03683 0D4B                        3F            .byte	$3F
03684 0D4C                        2D            .byte	$2D
03685 0D4D                        31            .byte	$31
03686 0D4E                        3F            .byte	$3F
03687 0D4F                        2D            .byte	$2D
03688                                           ! 667   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03689 0D50                        2D            .byte	$2D
03690 0D51                        3F            .byte	$3F
03691 0D52                        2D            .byte	$2D
03692 0D53                        2D            .byte	$2D
03693 0D54                        3F            .byte	$3F
03694 0D55                        31            .byte	$31
03695 0D56                        2D            .byte	$2D
03696 0D57                        3F            .byte	$3F
03697 0D58                        36            .byte	$36
03698 0D59                        2D            .byte	$2D
03699 0D5A                        3F            .byte	$3F
03700 0D5B                        3A            .byte	$3A
03701 0D5C                        2D            .byte	$2D
03702 0D5D                        3F            .byte	$3F
03703 0D5E                        3F            .byte	$3F
03704 0D5F                        2D            .byte	$2D
03705 0D60                        3A            .byte	$3A
03706 0D61                        3F            .byte	$3F
03707 0D62                        2D            .byte	$2D
03708 0D63                        36            .byte	$36
03709 0D64                        3F            .byte	$3F
03710 0D65                        2D            .byte	$2D
03711 0D66                        31            .byte	$31
03712 0D67                        3F            .byte	$3F
03713                                           ! 668   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03714 0D68                        00            .byte	0
03715 0D69                        00            .byte	0
03716 0D6A                        1C            .byte	$1C
03717 0D6B                        07            .byte	7
03718 0D6C                        00            .byte	0
03719 0D6D                        1C            .byte	$1C
03720 0D6E                        0E            .byte	$E
03721 0D6F                        00            .byte	0
03722 0D70                        1C            .byte	$1C
03723 0D71                        15            .byte	$15
03724 0D72                        00            .byte	0
03725 0D73                        1C            .byte	$1C
03726 0D74                        1C            .byte	$1C
03727 0D75                        00            .byte	0
03728 0D76                        1C            .byte	$1C
03729 0D77                        1C            .byte	$1C
03730 0D78                        00            .byte	0
03731 0D79                        15            .byte	$15
03732 0D7A                        1C            .byte	$1C
03733 0D7B                        00            .byte	0
03734 0D7C                        0E            .byte	$E
03735 0D7D                        1C            .byte	$1C
03736 0D7E                        00            .byte	0
03737 0D7F                        07            .byte	7
03738                                           ! 669   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
03739 0D80                        1C            .byte	$1C
03740 0D81                        00            .byte	0
03741 0D82                        00            .byte	0
03742 0D83                        1C            .byte	$1C
03743 0D84                        07            .byte	7
03744 0D85                        00            .byte	0
03745 0D86                        1C            .byte	$1C
03746 0D87                        0E            .byte	$E
03747 0D88                        00            .byte	0
03748 0D89                        1C            .byte	$1C
03749 0D8A                        15            .byte	$15
03750 0D8B                        00            .byte	0
03751 0D8C                        1C            .byte	$1C
03752 0D8D                        1C            .byte	$1C
03753 0D8E                        00            .byte	0
03754 0D8F                        15            .byte	$15
03755 0D90                        1C            .byte	$1C
03756 0D91                        00            .byte	0
03757 0D92                        0E            .byte	$E
03758 0D93                        1C            .byte	$1C
03759 0D94                        00            .byte	0
03760 0D95                        07            .byte	7
03761 0D96                        1C            .byte	$1C
03762 0D97                        00            .byte	0
03763                                           ! 670   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
03764 0D98                        00            .byte	0
03765 0D99                        1C            .byte	$1C
03766 0D9A                        00            .byte	0
03767 0D9B                        00            .byte	0
03768 0D9C                        1C            .byte	$1C
03769 0D9D                        07            .byte	7
03770 0D9E                        00            .byte	0
03771 0D9F                        1C            .byte	$1C
03772 0DA0                        0E            .byte	$E
03773 0DA1                        00            .byte	0
03774 0DA2                        1C            .byte	$1C
03775 0DA3                        15            .byte	$15
03776 0DA4                        00            .byte	0
03777 0DA5                        1C            .byte	$1C
03778 0DA6                        1C            .byte	$1C
03779 0DA7                        00            .byte	0
03780 0DA8                        15            .byte	$15
03781 0DA9                        1C            .byte	$1C
03782 0DAA                        00            .byte	0
03783 0DAB                        0E            .byte	$E
03784 0DAC                        1C            .byte	$1C
03785 0DAD                        00            .byte	0
03786 0DAE                        07            .byte	7
03787 0DAF                        1C            .byte	$1C
03788                                           ! 671   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
03789 0DB0                        0E            .byte	$E
03790 0DB1                        0E            .byte	$E
03791 0DB2                        1C            .byte	$1C
03792 0DB3                        11            .byte	$11
03793 0DB4                        0E            .byte	$E
03794 0DB5                        1C            .byte	$1C
03795 0DB6                        15            .byte	$15
03796 0DB7                        0E            .byte	$E
03797 0DB8                        1C            .byte	$1C
03798 0DB9                        18            .byte	$18
03799 0DBA                        0E            .byte	$E
03800 0DBB                        1C            .byte	$1C
03801 0DBC                        1C            .byte	$1C
03802 0DBD                        0E            .byte	$E
03803 0DBE                        1C            .byte	$1C
03804 0DBF                        1C            .byte	$1C
03805 0DC0                        0E            .byte	$E
03806 0DC1                        18            .byte	$18
03807 0DC2                        1C            .byte	$1C
03808 0DC3                        0E            .byte	$E
03809 0DC4                        15            .byte	$15
03810 0DC5                        1C            .byte	$1C
03811 0DC6                        0E            .byte	$E
03812 0DC7                        11            .byte	$11
03813                                           ! 672   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
03814 0DC8                        1C            .byte	$1C
03815 0DC9                        0E            .byte	$E
03816 0DCA                        0E            .byte	$E
03817 0DCB                        1C            .byte	$1C
03818 0DCC                        11            .byte	$11
03819 0DCD                        0E            .byte	$E
03820 0DCE                        1C            .byte	$1C
03821 0DCF                        15            .byte	$15
03822 0DD0                        0E            .byte	$E
03823 0DD1                        1C            .byte	$1C
03824 0DD2                        18            .byte	$18
03825 0DD3                        0E            .byte	$E
03826 0DD4                        1C            .byte	$1C
03827 0DD5                        1C            .byte	$1C
03828 0DD6                        0E            .byte	$E
03829 0DD7                        18            .byte	$18
03830 0DD8                        1C            .byte	$1C
03831 0DD9                        0E            .byte	$E
03832 0DDA                        15            .byte	$15
03833 0DDB                        1C            .byte	$1C
03834 0DDC                        0E            .byte	$E
03835 0DDD                        11            .byte	$11
03836 0DDE                        1C            .byte	$1C
03837 0DDF                        0E            .byte	$E
03838                                           ! 673   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
03839 0DE0                        0E            .byte	$E
03840 0DE1                        1C            .byte	$1C
03841 0DE2                        0E            .byte	$E
03842 0DE3                        0E            .byte	$E
03843 0DE4                        1C            .byte	$1C
03844 0DE5                        11            .byte	$11
03845 0DE6                        0E            .byte	$E
03846 0DE7                        1C            .byte	$1C
03847 0DE8                        15            .byte	$15
03848 0DE9                        0E            .byte	$E
03849 0DEA                        1C            .byte	$1C
03850 0DEB                        18            .byte	$18
03851 0DEC                        0E            .byte	$E
03852 0DED                        1C            .byte	$1C
03853 0DEE                        1C            .byte	$1C
03854 0DEF                        0E            .byte	$E
03855 0DF0                        18            .byte	$18
03856 0DF1                        1C            .byte	$1C
03857 0DF2                        0E            .byte	$E
03858 0DF3                        15            .byte	$15
03859 0DF4                        1C            .byte	$1C
03860 0DF5                        0E            .byte	$E
03861 0DF6                        11            .byte	$11
03862 0DF7                        1C            .byte	$1C
03863                                           ! 674   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
03864 0DF8                        14            .byte	$14
03865 0DF9                        14            .byte	$14
03866 0DFA                        1C            .byte	$1C
03867 0DFB                        16            .byte	$16
03868 0DFC                        14            .byte	$14
03869 0DFD                        1C            .byte	$1C
03870 0DFE                        18            .byte	$18
03871 0DFF                        14            .byte	$14
03872 0E00                        1C            .byte	$1C
03873 0E01                        1A            .byte	$1A
03874 0E02                        14            .byte	$14
03875 0E03                        1C            .byte	$1C
03876 0E04                        1C            .byte	$1C
03877 0E05                        14            .byte	$14
03878 0E06                        1C            .byte	$1C
03879 0E07                        1C            .byte	$1C
03880 0E08                        14            .byte	$14
03881 0E09                        1A            .byte	$1A
03882 0E0A                        1C            .byte	$1C
03883 0E0B                        14            .byte	$14
03884 0E0C                        18            .byte	$18
03885 0E0D                        1C            .byte	$1C
03886 0E0E                        14            .byte	$14
03887 0E0F                        16            .byte	$16
03888                                           ! 675   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
03889 0E10                        1C            .byte	$1C
03890 0E11                        14            .byte	$14
03891 0E12                        14            .byte	$14
03892 0E13                        1C            .byte	$1C
03893 0E14                        16            .byte	$16
03894 0E15                        14            .byte	$14
03895 0E16                        1C            .byte	$1C
03896 0E17                        18            .byte	$18
03897 0E18                        14            .byte	$14
03898 0E19                        1C            .byte	$1C
03899 0E1A                        1A            .byte	$1A
03900 0E1B                        14            .byte	$14
03901 0E1C                        1C            .byte	$1C
03902 0E1D                        1C            .byte	$1C
03903 0E1E                        14            .byte	$14
03904 0E1F                        1A            .byte	$1A
03905 0E20                        1C            .byte	$1C
03906 0E21                        14            .byte	$14
03907 0E22                        18            .byte	$18
03908 0E23                        1C            .byte	$1C
03909 0E24                        14            .byte	$14
03910 0E25                        16            .byte	$16
03911 0E26                        1C            .byte	$1C
03912 0E27                        14            .byte	$14
03913                                           ! 676   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
03914 0E28                        14            .byte	$14
03915 0E29                        1C            .byte	$1C
03916 0E2A                        14            .byte	$14
03917 0E2B                        14            .byte	$14
03918 0E2C                        1C            .byte	$1C
03919 0E2D                        16            .byte	$16
03920 0E2E                        14            .byte	$14
03921 0E2F                        1C            .byte	$1C
03922 0E30                        18            .byte	$18
03923 0E31                        14            .byte	$14
03924 0E32                        1C            .byte	$1C
03925 0E33                        1A            .byte	$1A
03926 0E34                        14            .byte	$14
03927 0E35                        1C            .byte	$1C
03928 0E36                        1C            .byte	$1C
03929 0E37                        14            .byte	$14
03930 0E38                        1A            .byte	$1A
03931 0E39                        1C            .byte	$1C
03932 0E3A                        14            .byte	$14
03933 0E3B                        18            .byte	$18
03934 0E3C                        1C            .byte	$1C
03935 0E3D                        14            .byte	$14
03936 0E3E                        16            .byte	$16
03937 0E3F                        1C            .byte	$1C
03938                                           ! 677   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
03939 0E40                        00            .byte	0
03940 0E41                        00            .byte	0
03941 0E42                        10            .byte	$10
03942 0E43                        04            .byte	4
03943 0E44                        00            .byte	0
03944 0E45                        10            .byte	$10
03945 0E46                        08            .byte	8
03946 0E47                        00            .byte	0
03947 0E48                        10            .byte	$10
03948 0E49                        0C            .byte	$C
03949 0E4A                        00            .byte	0
03950 0E4B                        10            .byte	$10
03951 0E4C                        10            .byte	$10
03952 0E4D                        00            .byte	0
03953 0E4E                        10            .byte	$10
03954 0E4F                        10            .byte	$10
03955 0E50                        00            .byte	0
03956 0E51                        0C            .byte	$C
03957 0E52                        10            .byte	$10
03958 0E53                        00            .byte	0
03959 0E54                        08            .byte	8
03960 0E55                        10            .byte	$10
03961 0E56                        00            .byte	0
03962 0E57                        04            .byte	4
03963                                           ! 678   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10
03964 0E58                        10            .byte	$10
03965 0E59                        00            .byte	0
03966 0E5A                        00            .byte	0
03967 0E5B                        10            .byte	$10
03968 0E5C                        04            .byte	4
03969 0E5D                        00            .byte	0
03970 0E5E                        10            .byte	$10
03971 0E5F                        08            .byte	8
03972 0E60                        00            .byte	0
03973                                           ! 678 ,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
03974 0E61                        10            .byte	$10
03975 0E62                        0C            .byte	$C
03976 0E63                        00            .byte	0
03977 0E64                        10            .byte	$10
03978 0E65                        10            .byte	$10
03979 0E66                        00            .byte	0
03980 0E67                        0C            .byte	$C
03981 0E68                        10            .byte	$10
03982 0E69                        00            .byte	0
03983 0E6A                        08            .byte	8
03984 0E6B                        10            .byte	$10
03985 0E6C                        00            .byte	0
03986 0E6D                        04            .byte	4
03987 0E6E                        10            .byte	$10
03988 0E6F                        00            .byte	0
03989                                           ! 679   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
03990 0E70                        00            .byte	0
03991 0E71                        10            .byte	$10
03992 0E72                        00            .byte	0
03993 0E73                        00            .byte	0
03994 0E74                        10            .byte	$10
03995 0E75                        04            .byte	4
03996 0E76                        00            .byte	0
03997 0E77                        10            .byte	$10
03998 0E78                        08            .byte	8
03999 0E79                        00            .byte	0
04000 0E7A                        10            .byte	$10
04001 0E7B                        0C            .byte	$C
04002 0E7C                        00            .byte	0
04003 0E7D                        10            .byte	$10
04004 0E7E                        10            .byte	$10
04005 0E7F                        00            .byte	0
04006 0E80                        0C            .byte	$C
04007 0E81                        10            .byte	$10
04008 0E82                        00            .byte	0
04009 0E83                        08            .byte	8
04010 0E84                        10            .byte	$10
04011 0E85                        00            .byte	0
04012 0E86                        04            .byte	4
04013 0E87                        10            .byte	$10
04014                                           ! 680   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04015 0E88                        08            .byte	8
04016 0E89                        08            .byte	8
04017 0E8A                        10            .byte	$10
04018 0E8B                        0A            .byte	$A
04019 0E8C                        08            .byte	8
04020 0E8D                        10            .byte	$10
04021 0E8E                        0C            .byte	$C
04022 0E8F                        08            .byte	8
04023 0E90                        10            .byte	$10
04024 0E91                        0E            .byte	$E
04025 0E92                        08            .byte	8
04026 0E93                        10            .byte	$10
04027 0E94                        10            .byte	$10
04028 0E95                        08            .byte	8
04029 0E96                        10            .byte	$10
04030 0E97                        10            .byte	$10
04031 0E98                        08            .byte	8
04032 0E99                        0E            .byte	$E
04033 0E9A                        10            .byte	$10
04034 0E9B                        08            .byte	8
04035 0E9C                        0C            .byte	$C
04036 0E9D                        10            .byte	$10
04037 0E9E                        08            .byte	8
04038 0E9F                        0A            .byte	$A
04039                                           ! 681   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04040 0EA0                        10            .byte	$10
04041 0EA1                        08            .byte	8
04042 0EA2                        08            .byte	8
04043 0EA3                        10            .byte	$10
04044 0EA4                        0A            .byte	$A
04045 0EA5                        08            .byte	8
04046 0EA6                        10            .byte	$10
04047 0EA7                        0C            .byte	$C
04048 0EA8                        08            .byte	8
04049 0EA9                        10            .byte	$10
04050 0EAA                        0E            .byte	$E
04051 0EAB                        08            .byte	8
04052 0EAC                        10            .byte	$10
04053 0EAD                        10            .byte	$10
04054 0EAE                        08            .byte	8
04055 0EAF                        0E            .byte	$E
04056 0EB0                        10            .byte	$10
04057 0EB1                        08            .byte	8
04058 0EB2                        0C            .byte	$C
04059 0EB3                        10            .byte	$10
04060 0EB4                        08            .byte	8
04061 0EB5                        0A            .byte	$A
04062 0EB6                        10            .byte	$10
04063 0EB7                        08            .byte	8
04064                                           ! 682   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04065 0EB8                        08            .byte	8
04066 0EB9                        10            .byte	$10
04067 0EBA                        08            .byte	8
04068 0EBB                        08            .byte	8
04069 0EBC                        10            .byte	$10
04070 0EBD                        0A            .byte	$A
04071 0EBE                        08            .byte	8
04072 0EBF                        10            .byte	$10
04073 0EC0                        0C            .byte	$C
04074 0EC1                        08            .byte	8
04075 0EC2                        10            .byte	$10
04076 0EC3                        0E            .byte	$E
04077 0EC4                        08            .byte	8
04078 0EC5                        10            .byte	$10
04079 0EC6                        10            .byte	$10
04080 0EC7                        08            .byte	8
04081 0EC8                        0E            .byte	$E
04082 0EC9                        10            .byte	$10
04083 0ECA                        08            .byte	8
04084 0ECB                        0C            .byte	$C
04085 0ECC                        10            .byte	$10
04086 0ECD                        08            .byte	8
04087 0ECE                        0A            .byte	$A
04088 0ECF                        10            .byte	$10
04089                                           ! 683   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04090 0ED0                        0B            .byte	$B
04091 0ED1                        0B            .byte	$B
04092 0ED2                        10            .byte	$10
04093 0ED3                        0C            .byte	$C
04094 0ED4                        0B            .byte	$B
04095 0ED5                        10            .byte	$10
04096 0ED6                        0D            .byte	$D
04097 0ED7                        0B            .byte	$B
04098 0ED8                        10            .byte	$10
04099 0ED9                        0F            .byte	$F
04100 0EDA                        0B            .byte	$B
04101 0EDB                        10            .byte	$10
04102 0EDC                        10            .byte	$10
04103 0EDD                        0B            .byte	$B
04104 0EDE                        10            .byte	$10
04105 0EDF                        10            .byte	$10
04106 0EE0                        0B            .byte	$B
04107 0EE1                        0F            .byte	$F
04108 0EE2                        10            .byte	$10
04109 0EE3                        0B            .byte	$B
04110 0EE4                        0D            .byte	$D
04111 0EE5                        10            .byte	$10
04112 0EE6                        0B            .byte	$B
04113 0EE7                        0C            .byte	$C
04114                                           ! 684   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04115 0EE8                        10            .byte	$10
04116 0EE9                        0B            .byte	$B
04117 0EEA                        0B            .byte	$B
04118 0EEB                        10            .byte	$10
04119 0EEC                        0C            .byte	$C
04120 0EED                        0B            .byte	$B
04121 0EEE                        10            .byte	$10
04122 0EEF                        0D            .byte	$D
04123 0EF0                        0B            .byte	$B
04124 0EF1                        10            .byte	$10
04125 0EF2                        0F            .byte	$F
04126 0EF3                        0B            .byte	$B
04127 0EF4                        10            .byte	$10
04128 0EF5                        10            .byte	$10
04129 0EF6                        0B            .byte	$B
04130 0EF7                        0F            .byte	$F
04131 0EF8                        10            .byte	$10
04132 0EF9                        0B            .byte	$B
04133 0EFA                        0D            .byte	$D
04134 0EFB                        10            .byte	$10
04135 0EFC                        0B            .byte	$B
04136 0EFD                        0C            .byte	$C
04137 0EFE                        10            .byte	$10
04138 0EFF                        0B            .byte	$B
04139                                           ! 685   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04140 0F00                        0B            .byte	$B
04141 0F01                        10            .byte	$10
04142 0F02                        0B            .byte	$B
04143 0F03                        0B            .byte	$B
04144 0F04                        10            .byte	$10
04145 0F05                        0C            .byte	$C
04146 0F06                        0B            .byte	$B
04147 0F07                        10            .byte	$10
04148 0F08                        0D            .byte	$D
04149 0F09                        0B            .byte	$B
04150 0F0A                        10            .byte	$10
04151 0F0B                        0F            .byte	$F
04152 0F0C                        0B            .byte	$B
04153 0F0D                        10            .byte	$10
04154 0F0E                        10            .byte	$10
04155 0F0F                        0B            .byte	$B
04156 0F10                        0F            .byte	$F
04157 0F11                        10            .byte	$10
04158 0F12                        0B            .byte	$B
04159 0F13                        0D            .byte	$D
04160 0F14                        10            .byte	$10
04161 0F15                        0B            .byte	$B
04162 0F16                        0C            .byte	$C
04163 0F17                        10            .byte	$10
04164                                           ! 686   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04165 0F18                        00            .byte	0
04166 0F19                        00            .byte	0
04167 0F1A                        00            .byte	0
04168 0F1B                        00            .byte	0
04169 0F1C                        00            .byte	0
04170 0F1D                        00            .byte	0
04171 0F1E                        00            .byte	0
04172 0F1F                        00            .byte	0
04173 0F20                        00            .byte	0
04174 0F21                        00            .byte	0
04175 0F22                        00            .byte	0
04176 0F23                        00            .byte	0
04177 0F24                        00            .byte	0
04178 0F25                        00            .byte	0
04179 0F26                        00            .byte	0
04180 0F27                        00            .byte	0
04181 0F28                        00            .byte	0
04182 0F29                        00            .byte	0
04183 0F2A                        00            .byte	0
04184 0F2B                        00            .byte	0
04185 0F2C                        00            .byte	0
04186 0F2D                        00            .byte	0
04187 0F2E                        00            .byte	0
04188                                           ! 687 };
04189 0F2F                        00            .byte	0
04190                                           !BCC_EOS
04191                                           ! 688 static Bit8u static_functionality[0x10]=
04192                                           ! 689 {
04193                       00000F30            _static_functionality:
04194                                           ! 690          0xff,
04195 0F30                        FF            .byte	$FF
04196                                           ! 691          0xe0,
04197 0F31                        E0            .byte	$E0
04198                                           ! 692          0x0f,
04199 0F32                        0F            .byte	$F
04200                                           ! 693          0x00, 0x00, 0x00, 0x00,
04201 0F33                        00            .byte	0
04202 0F34                        00            .byte	0
04203 0F35                        00            .byte	0
04204 0F36                        00            .byte	0
04205                                           ! 694          0x07,
04206 0F37                        07            .byte	7
04207                                           ! 695          0x02,
04208 0F38                        02            .byte	2
04209                                           ! 696          0x08,
04210 0F39                        08            .byte	8
04211                                           ! 697          0xe7,
04212 0F3A                        E7            .byte	$E7
04213                                           ! 698          0x0c,
04214 0F3B                        0C            .byte	$C
04215                                           ! 699          0x00,
04216 0F3C                        00            .byte	0
04217                                           ! 700          0x00,
04218 0F3D                        00            .byte	0
04219                                           ! 701          0x00,
04220 0F3E                        00            .byte	0
04221                                           ! 702          0x00
04222                                           ! 703 };
04223 0F3F                        00            .byte	0
04224                                           !BCC_EOS
04225                                           ! 704 static Bit8u vgafont8[256*8]=
04226                                           ! 705 {
04227                       00000F40            _vgafont8:
04228                                           ! 706  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04229 0F40                        00            .byte	0
04230 0F41                        00            .byte	0
04231 0F42                        00            .byte	0
04232 0F43                        00            .byte	0
04233 0F44                        00            .byte	0
04234 0F45                        00            .byte	0
04235 0F46                        00            .byte	0
04236 0F47                        00            .byte	0
04237                                           ! 707  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04238 0F48                        7E            .byte	$7E
04239 0F49                        81            .byte	$81
04240 0F4A                        A5            .byte	$A5
04241 0F4B                        81            .byte	$81
04242 0F4C                        BD            .byte	$BD
04243 0F4D                        99            .byte	$99
04244 0F4E                        81            .byte	$81
04245 0F4F                        7E            .byte	$7E
04246                                           ! 708  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04247 0F50                        7E            .byte	$7E
04248 0F51                        FF            .byte	$FF
04249 0F52                        DB            .byte	$DB
04250 0F53                        FF            .byte	$FF
04251 0F54                        C3            .byte	$C3
04252 0F55                        E7            .byte	$E7
04253 0F56                        FF            .byte	$FF
04254 0F57                        7E            .byte	$7E
04255                                           ! 709  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04256 0F58                        6C            .byte	$6C
04257 0F59                        FE            .byte	$FE
04258 0F5A                        FE            .byte	$FE
04259 0F5B                        FE            .byte	$FE
04260 0F5C                        7C            .byte	$7C
04261 0F5D                        38            .byte	$38
04262 0F5E                        10            .byte	$10
04263 0F5F                        00            .byte	0
04264                                           ! 710  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04265 0F60                        10            .byte	$10
04266 0F61                        38            .byte	$38
04267 0F62                        7C            .byte	$7C
04268 0F63                        FE            .byte	$FE
04269 0F64                        7C            .byte	$7C
04270 0F65                        38            .byte	$38
04271 0F66                        10            .byte	$10
04272 0F67                        00            .byte	0
04273                                           ! 711  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04274 0F68                        38            .byte	$38
04275 0F69                        7C            .byte	$7C
04276 0F6A                        38            .byte	$38
04277 0F6B                        FE            .byte	$FE
04278 0F6C                        FE            .byte	$FE
04279 0F6D                        7C            .byte	$7C
04280 0F6E                        38            .byte	$38
04281 0F6F                        7C            .byte	$7C
04282                                           ! 712  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04283 0F70                        10            .byte	$10
04284 0F71                        10            .byte	$10
04285 0F72                        38            .byte	$38
04286 0F73                        7C            .byte	$7C
04287 0F74                        FE            .byte	$FE
04288 0F75                        7C            .byte	$7C
04289 0F76                        38            .byte	$38
04290 0F77                        7C            .byte	$7C
04291                                           ! 713  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04292 0F78                        00            .byte	0
04293 0F79                        00            .byte	0
04294 0F7A                        18            .byte	$18
04295 0F7B                        3C            .byte	$3C
04296 0F7C                        3C            .byte	$3C
04297 0F7D                        18            .byte	$18
04298 0F7E                        00            .byte	0
04299 0F7F                        00            .byte	0
04300                                           ! 714  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04301 0F80                        FF            .byte	$FF
04302 0F81                        FF            .byte	$FF
04303 0F82                        E7            .byte	$E7
04304 0F83                        C3            .byte	$C3
04305 0F84                        C3            .byte	$C3
04306 0F85                        E7            .byte	$E7
04307 0F86                        FF            .byte	$FF
04308 0F87                        FF            .byte	$FF
04309                                           ! 715  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04310 0F88                        00            .byte	0
04311 0F89                        3C            .byte	$3C
04312 0F8A                        66            .byte	$66
04313 0F8B                        42            .byte	$42
04314 0F8C                        42            .byte	$42
04315 0F8D                        66            .byte	$66
04316 0F8E                        3C            .byte	$3C
04317 0F8F                        00            .byte	0
04318                                           ! 716  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04319 0F90                        FF            .byte	$FF
04320 0F91                        C3            .byte	$C3
04321 0F92                        99            .byte	$99
04322 0F93                        BD            .byte	$BD
04323 0F94                        BD            .byte	$BD
04324 0F95                        99            .byte	$99
04325 0F96                        C3            .byte	$C3
04326 0F97                        FF            .byte	$FF
04327                                           ! 717  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04328 0F98                        0F            .byte	$F
04329 0F99                        07            .byte	7
04330 0F9A                        0F            .byte	$F
04331 0F9B                        7D            .byte	$7D
04332 0F9C                        CC            .byte	$CC
04333 0F9D                        CC            .byte	$CC
04334 0F9E                        CC            .byte	$CC
04335 0F9F                        78            .byte	$78
04336                                           ! 718  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04337 0FA0                        3C            .byte	$3C
04338 0FA1                        66            .byte	$66
04339 0FA2                        66            .byte	$66
04340 0FA3                        66            .byte	$66
04341 0FA4                        3C            .byte	$3C
04342 0FA5                        18            .byte	$18
04343 0FA6                        7E            .byte	$7E
04344 0FA7                        18            .byte	$18
04345                                           ! 719  0x
04346                                           ! 719 3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04347 0FA8                        3F            .byte	$3F
04348 0FA9                        33            .byte	$33
04349 0FAA                        3F            .byte	$3F
04350 0FAB                        30            .byte	$30
04351 0FAC                        30            .byte	$30
04352 0FAD                        70            .byte	$70
04353 0FAE                        F0            .byte	$F0
04354 0FAF                        E0            .byte	$E0
04355                                           ! 720  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04356 0FB0                        7F            .byte	$7F
04357 0FB1                        63            .byte	$63
04358 0FB2                        7F            .byte	$7F
04359 0FB3                        63            .byte	$63
04360 0FB4                        63            .byte	$63
04361 0FB5                        67            .byte	$67
04362 0FB6                        E6            .byte	$E6
04363 0FB7                        C0            .byte	$C0
04364                                           ! 721  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04365 0FB8                        99            .byte	$99
04366 0FB9                        5A            .byte	$5A
04367 0FBA                        3C            .byte	$3C
04368 0FBB                        E7            .byte	$E7
04369 0FBC                        E7            .byte	$E7
04370 0FBD                        3C            .byte	$3C
04371 0FBE                        5A            .byte	$5A
04372 0FBF                        99            .byte	$99
04373                                           ! 722  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04374 0FC0                        80            .byte	$80
04375 0FC1                        E0            .byte	$E0
04376 0FC2                        F8            .byte	$F8
04377 0FC3                        FE            .byte	$FE
04378 0FC4                        F8            .byte	$F8
04379 0FC5                        E0            .byte	$E0
04380 0FC6                        80            .byte	$80
04381 0FC7                        00            .byte	0
04382                                           ! 723  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04383 0FC8                        02            .byte	2
04384 0FC9                        0E            .byte	$E
04385 0FCA                        3E            .byte	$3E
04386 0FCB                        FE            .byte	$FE
04387 0FCC                        3E            .byte	$3E
04388 0FCD                        0E            .byte	$E
04389 0FCE                        02            .byte	2
04390 0FCF                        00            .byte	0
04391                                           ! 724  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04392 0FD0                        18            .byte	$18
04393 0FD1                        3C            .byte	$3C
04394 0FD2                        7E            .byte	$7E
04395 0FD3                        18            .byte	$18
04396 0FD4                        18            .byte	$18
04397 0FD5                        7E            .byte	$7E
04398 0FD6                        3C            .byte	$3C
04399 0FD7                        18            .byte	$18
04400                                           ! 725  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04401 0FD8                        66            .byte	$66
04402 0FD9                        66            .byte	$66
04403 0FDA                        66            .byte	$66
04404 0FDB                        66            .byte	$66
04405 0FDC                        66            .byte	$66
04406 0FDD                        00            .byte	0
04407 0FDE                        66            .byte	$66
04408 0FDF                        00            .byte	0
04409                                           ! 726  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04410 0FE0                        7F            .byte	$7F
04411 0FE1                        DB            .byte	$DB
04412 0FE2                        DB            .byte	$DB
04413 0FE3                        7B            .byte	$7B
04414 0FE4                        1B            .byte	$1B
04415 0FE5                        1B            .byte	$1B
04416 0FE6                        1B            .byte	$1B
04417 0FE7                        00            .byte	0
04418                                           ! 727  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04419 0FE8                        3E            .byte	$3E
04420 0FE9                        63            .byte	$63
04421 0FEA                        38            .byte	$38
04422 0FEB                        6C            .byte	$6C
04423 0FEC                        6C            .byte	$6C
04424 0FED                        38            .byte	$38
04425 0FEE                        CC            .byte	$CC
04426 0FEF                        78            .byte	$78
04427                                           ! 728  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04428 0FF0                        00            .byte	0
04429 0FF1                        00            .byte	0
04430 0FF2                        00            .byte	0
04431 0FF3                        00            .byte	0
04432 0FF4                        7E            .byte	$7E
04433 0FF5                        7E            .byte	$7E
04434 0FF6                        7E            .byte	$7E
04435 0FF7                        00            .byte	0
04436                                           ! 729  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04437 0FF8                        18            .byte	$18
04438 0FF9                        3C            .byte	$3C
04439 0FFA                        7E            .byte	$7E
04440 0FFB                        18            .byte	$18
04441 0FFC                        7E            .byte	$7E
04442 0FFD                        3C            .byte	$3C
04443 0FFE                        18            .byte	$18
04444 0FFF                        FF            .byte	$FF
04445                                           ! 730  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04446 1000                        18            .byte	$18
04447 1001                        3C            .byte	$3C
04448 1002                        7E            .byte	$7E
04449 1003                        18            .byte	$18
04450 1004                        18            .byte	$18
04451 1005                        18            .byte	$18
04452 1006                        18            .byte	$18
04453 1007                        00            .byte	0
04454                                           ! 731  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04455 1008                        18            .byte	$18
04456 1009                        18            .byte	$18
04457 100A                        18            .byte	$18
04458 100B                        18            .byte	$18
04459 100C                        7E            .byte	$7E
04460 100D                        3C            .byte	$3C
04461 100E                        18            .byte	$18
04462 100F                        00            .byte	0
04463                                           ! 732  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04464 1010                        00            .byte	0
04465 1011                        18            .byte	$18
04466 1012                        0C            .byte	$C
04467 1013                        FE            .byte	$FE
04468 1014                        0C            .byte	$C
04469 1015                        18            .byte	$18
04470 1016                        00            .byte	0
04471 1017                        00            .byte	0
04472                                           ! 733  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04473 1018                        00            .byte	0
04474 1019                        30            .byte	$30
04475 101A                        60            .byte	$60
04476 101B                        FE            .byte	$FE
04477 101C                        60            .byte	$60
04478 101D                        30            .byte	$30
04479 101E                        00            .byte	0
04480 101F                        00            .byte	0
04481                                           ! 734  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04482 1020                        00            .byte	0
04483 1021                        00            .byte	0
04484 1022                        C0            .byte	$C0
04485 1023                        C0            .byte	$C0
04486 1024                        C0            .byte	$C0
04487 1025                        FE            .byte	$FE
04488 1026                        00            .byte	0
04489 1027                        00            .byte	0
04490                                           ! 735  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04491 1028                        00            .byte	0
04492 1029                        24            .byte	$24
04493 102A                        66            .byte	$66
04494 102B                        FF            .byte	$FF
04495 102C                        66            .byte	$66
04496 102D                        24            .byte	$24
04497 102E                        00            .byte	0
04498 102F                        00            .byte	0
04499                                           ! 736  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04500 1030                        00            .byte	0
04501 1031                        18            .byte	$18
04502 1032                        3C            .byte	$3C
04503 1033                        7E            .byte	$7E
04504 1034                        FF            .byte	$FF
04505 1035                        FF            .byte	$FF
04506 1036                        00            .byte	0
04507 1037                        00            .byte	0
04508                                           ! 737  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04509 1038                        00            .byte	0
04510 1039                        FF            .byte	$FF
04511 103A                        FF            .byte	$FF
04512 103B                        7E            .byte	$7E
04513 103C                        3C            .byte	$3C
04514 103D                        18            .byte	$18
04515 103E                        00            .byte	0
04516 103F                        00            .byte	0
04517                                           ! 738  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04518 1040                        00            .byte	0
04519 1041                        00            .byte	0
04520 1042                        00            .byte	0
04521 1043                        00            .byte	0
04522 1044                        00            .byte	0
04523 1045                        00            .byte	0
04524 1046                        00            .byte	0
04525 1047                        00            .byte	0
04526                                           ! 739  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04527 1048                        30            .byte	$30
04528 1049                        78            .byte	$78
04529 104A                        78            .byte	$78
04530 104B                        30            .byte	$30
04531 104C                        30            .byte	$30
04532 104D                        00            .byte	0
04533 104E                        30            .byte	$30
04534 104F                        00            .byte	0
04535                                           ! 740  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04536 1050                        6C            .byte	$6C
04537 1051                        6C            .byte	$6C
04538 1052                        6C            .byte	$6C
04539 1053                        00            .byte	0
04540 1054                        00            .byte	0
04541 1055                        00            .byte	0
04542 1056                        00            .byte	0
04543 1057                        00            .byte	0
04544                                           ! 741  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04545 1058                        6C            .byte	$6C
04546 1059                        6C            .byte	$6C
04547 105A                        FE            .byte	$FE
04548 105B                        6C            .byte	$6C
04549 105C                        FE            .byte	$FE
04550 105D                        6C            .byte	$6C
04551 105E                        6C            .byte	$6C
04552 105F                        00            .byte	0
04553                                           ! 742  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04554 1060                        30            .byte	$30
04555 1061                        7C            .byte	$7C
04556 1062                        C0            .byte	$C0
04557 1063                        78            .byte	$78
04558 1064                        0C            .byte	$C
04559 1065                        F8            .byte	$F8
04560 1066                        30            .byte	$30
04561 1067                        00            .byte	0
04562                                           ! 743  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04563 1068                        00            .byte	0
04564 1069                        C6            .byte	$C6
04565 106A                        CC            .byte	$CC
04566 106B                        18            .byte	$18
04567 106C                        30            .byte	$30
04568 106D                        66            .byte	$66
04569 106E                        C6            .byte	$C6
04570 106F                        00            .byte	0
04571                                           ! 744  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04572 1070                        38            .byte	$38
04573 1071                        6C            .byte	$6C
04574 1072                        38            .byte	$38
04575 1073                        76            .byte	$76
04576 1074                        DC            .byte	$DC
04577 1075                        CC            .byte	$CC
04578 1076                        76            .byte	$76
04579 1077                        00            .byte	0
04580                                           ! 745  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04581 1078                        60            .byte	$60
04582 1079                        60            .byte	$60
04583 107A                        C0            .byte	$C0
04584 107B                        00            .byte	0
04585 107C                        00            .byte	0
04586 107D                        00            .byte	0
04587 107E                        00            .byte	0
04588 107F                        00            .byte	0
04589                                           ! 746  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04590 1080                        18            .byte	$18
04591 1081                        30            .byte	$30
04592 1082                        60            .byte	$60
04593 1083                        60            .byte	$60
04594 1084                        60            .byte	$60
04595 1085                        30            .byte	$30
04596 1086                        18            .byte	$18
04597 1087                        00            .byte	0
04598                                           ! 747  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04599 1088                        60            .byte	$60
04600 1089                        30            .byte	$30
04601 108A                        18            .byte	$18
04602 108B                        18            .byte	$18
04603 108C                        18            .byte	$18
04604 108D                        30            .byte	$30
04605 108E                        60            .byte	$60
04606 108F                        00            .byte	0
04607                                           ! 748  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04608 1090                        00            .byte	0
04609 1091                        66            .byte	$66
04610 1092                        3C            .byte	$3C
04611 1093                        FF            .byte	$FF
04612 1094                        3C            .byte	$3C
04613 1095                        66            .byte	$66
04614 1096                        00            .byte	0
04615 1097                        00            .byte	0
04616                                           ! 749  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04617 1098                        00            .byte	0
04618 1099                        30            .byte	$30
04619 109A                        30            .byte	$30
04620 109B                        FC            .byte	$FC
04621 109C                        30            .byte	$30
04622 109D                        30            .byte	$30
04623 109E                        00            .byte	0
04624 109F                        00            .byte	0
04625                                           ! 750  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04626 10A0                        00            .byte	0
04627 10A1                        00            .byte	0
04628 10A2                        00            .byte	0
04629 10A3                        00            .byte	0
04630 10A4                        00            .byte	0
04631 10A5                        30            .byte	$30
04632 10A6                        30            .byte	$30
04633 10A7                        60            .byte	$60
04634                                           ! 751  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04635 10A8                        00            .byte	0
04636 10A9                        00            .byte	0
04637 10AA                        00            .byte	0
04638 10AB                        FC            .byte	$FC
04639 10AC                        00            .byte	0
04640 10AD                        00            .byte	0
04641 10AE                        00            .byte	0
04642 10AF                        00            .byte	0
04643                                           ! 752  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04644 10B0                        00            .byte	0
04645 10B1                        00            .byte	0
04646 10B2                        00            .byte	0
04647 10B3                        00            .byte	0
04648 10B4                        00            .byte	0
04649 10B5                        30            .byte	$30
04650 10B6                        30            .byte	$30
04651 10B7                        00            .byte	0
04652                                           ! 753  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04653 10B8                        06            .byte	6
04654 10B9                        0C            .byte	$C
04655 10BA                        18            .byte	$18
04656 10BB                        30            .byte	$30
04657 10BC                        60            .byte	$60
04658 10BD                        C0            .byte	$C0
04659 10BE                        80            .byte	$80
04660 10BF                        00            .byte	0
04661                                           ! 754  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04662 10C0                        7C            .byte	$7C
04663 10C1                        C6            .byte	$C6
04664 10C2                        CE            .byte	$CE
04665 10C3                        DE            .byte	$DE
04666 10C4                        F6            .byte	$F6
04667 10C5                        E6            .byte	$E6
04668 10C6                        7C            .byte	$7C
04669 10C7                        00            .byte	0
04670                                           ! 755  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04671 10C8                        30            .byte	$30
04672 10C9                        70            .byte	$70
04673 10CA                        30            .byte	$30
04674 10CB                        30            .byte	$30
04675 10CC                        30            .byte	$30
04676 10CD                        30            .byte	$30
04677 10CE                        FC            .byte	$FC
04678 10CF                        00            .byte	0
04679                                           ! 756  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04680 10D0                        78            .byte	$78
04681 10D1                        CC            .byte	$CC
04682 10D2                        0C            .byte	$C
04683 10D3                        38            .byte	$38
04684 10D4                        60            .byte	$60
04685 10D5                        CC            .byte	$CC
04686 10D6                        FC            .byte	$FC
04687 10D7                        00            .byte	0
04688                                           ! 757  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04689 10D8                        78            .byte	$78
04690 10D9                        CC            .byte	$CC
04691 10DA                        0C            .byte	$C
04692 10DB                        38            .byte	$38
04693 10DC                        0C            .byte	$C
04694 10DD                        CC            .byte	$CC
04695 10DE                        78            .byte	$78
04696 10DF                        00            .byte	0
04697                                           ! 758  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04698 10E0                        1C            .byte	$1C
04699 10E1                        3C            .byte	$3C
04700 10E2                        6C            .byte	$6C
04701 10E3                        CC            .byte	$CC
04702 10E4                        FE            .byte	$FE
04703 10E5                        0C            .byte	$C
04704 10E6                        1E            .byte	$1E
04705 10E7                        00            .byte	0
04706                                           ! 759  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04707 10E8                        FC            .byte	$FC
04708 10E9                        C0            .byte	$C0
04709 10EA                        F8            .byte	$F8
04710 10EB                        0C            .byte	$C
04711 10EC                        0C            .byte	$C
04712 10ED                        CC            .byte	$CC
04713 10EE                        78            .byte	$78
04714 10EF                        00            .byte	0
04715                                           ! 760  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78,
04716 10F0                        38            .byte	$38
04717 10F1                        60            .byte	$60
04718 10F2                        C0            .byte	$C0
04719 10F3                        F8            .byte	$F8
04720 10F4                        CC            .byte	$CC
04721 10F5                        CC            .byte	$CC
04722                                           ! 760  0x00,
04723 10F6                        78            .byte	$78
04724 10F7                        00            .byte	0
04725                                           ! 761  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
04726 10F8                        FC            .byte	$FC
04727 10F9                        CC            .byte	$CC
04728 10FA                        0C            .byte	$C
04729 10FB                        18            .byte	$18
04730 10FC                        30            .byte	$30
04731 10FD                        30            .byte	$30
04732 10FE                        30            .byte	$30
04733 10FF                        00            .byte	0
04734                                           ! 762  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
04735 1100                        78            .byte	$78
04736 1101                        CC            .byte	$CC
04737 1102                        CC            .byte	$CC
04738 1103                        78            .byte	$78
04739 1104                        CC            .byte	$CC
04740 1105                        CC            .byte	$CC
04741 1106                        78            .byte	$78
04742 1107                        00            .byte	0
04743                                           ! 763  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
04744 1108                        78            .byte	$78
04745 1109                        CC            .byte	$CC
04746 110A                        CC            .byte	$CC
04747 110B                        7C            .byte	$7C
04748 110C                        0C            .byte	$C
04749 110D                        18            .byte	$18
04750 110E                        70            .byte	$70
04751 110F                        00            .byte	0
04752                                           ! 764  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
04753 1110                        00            .byte	0
04754 1111                        30            .byte	$30
04755 1112                        30            .byte	$30
04756 1113                        00            .byte	0
04757 1114                        00            .byte	0
04758 1115                        30            .byte	$30
04759 1116                        30            .byte	$30
04760 1117                        00            .byte	0
04761                                           ! 765  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
04762 1118                        00            .byte	0
04763 1119                        30            .byte	$30
04764 111A                        30            .byte	$30
04765 111B                        00            .byte	0
04766 111C                        00            .byte	0
04767 111D                        30            .byte	$30
04768 111E                        30            .byte	$30
04769 111F                        60            .byte	$60
04770                                           ! 766  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
04771 1120                        18            .byte	$18
04772 1121                        30            .byte	$30
04773 1122                        60            .byte	$60
04774 1123                        C0            .byte	$C0
04775 1124                        60            .byte	$60
04776 1125                        30            .byte	$30
04777 1126                        18            .byte	$18
04778 1127                        00            .byte	0
04779                                           ! 767  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
04780 1128                        00            .byte	0
04781 1129                        00            .byte	0
04782 112A                        FC            .byte	$FC
04783 112B                        00            .byte	0
04784 112C                        00            .byte	0
04785 112D                        FC            .byte	$FC
04786 112E                        00            .byte	0
04787 112F                        00            .byte	0
04788                                           ! 768  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
04789 1130                        60            .byte	$60
04790 1131                        30            .byte	$30
04791 1132                        18            .byte	$18
04792 1133                        0C            .byte	$C
04793 1134                        18            .byte	$18
04794 1135                        30            .byte	$30
04795 1136                        60            .byte	$60
04796 1137                        00            .byte	0
04797                                           ! 769  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
04798 1138                        78            .byte	$78
04799 1139                        CC            .byte	$CC
04800 113A                        0C            .byte	$C
04801 113B                        18            .byte	$18
04802 113C                        30            .byte	$30
04803 113D                        00            .byte	0
04804 113E                        30            .byte	$30
04805 113F                        00            .byte	0
04806                                           ! 770  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
04807 1140                        7C            .byte	$7C
04808 1141                        C6            .byte	$C6
04809 1142                        DE            .byte	$DE
04810 1143                        DE            .byte	$DE
04811 1144                        DE            .byte	$DE
04812 1145                        C0            .byte	$C0
04813 1146                        78            .byte	$78
04814 1147                        00            .byte	0
04815                                           ! 771  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
04816 1148                        30            .byte	$30
04817 1149                        78            .byte	$78
04818 114A                        CC            .byte	$CC
04819 114B                        CC            .byte	$CC
04820 114C                        FC            .byte	$FC
04821 114D                        CC            .byte	$CC
04822 114E                        CC            .byte	$CC
04823 114F                        00            .byte	0
04824                                           ! 772  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
04825 1150                        FC            .byte	$FC
04826 1151                        66            .byte	$66
04827 1152                        66            .byte	$66
04828 1153                        7C            .byte	$7C
04829 1154                        66            .byte	$66
04830 1155                        66            .byte	$66
04831 1156                        FC            .byte	$FC
04832 1157                        00            .byte	0
04833                                           ! 773  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
04834 1158                        3C            .byte	$3C
04835 1159                        66            .byte	$66
04836 115A                        C0            .byte	$C0
04837 115B                        C0            .byte	$C0
04838 115C                        C0            .byte	$C0
04839 115D                        66            .byte	$66
04840 115E                        3C            .byte	$3C
04841 115F                        00            .byte	0
04842                                           ! 774  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
04843 1160                        F8            .byte	$F8
04844 1161                        6C            .byte	$6C
04845 1162                        66            .byte	$66
04846 1163                        66            .byte	$66
04847 1164                        66            .byte	$66
04848 1165                        6C            .byte	$6C
04849 1166                        F8            .byte	$F8
04850 1167                        00            .byte	0
04851                                           ! 775  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
04852 1168                        FE            .byte	$FE
04853 1169                        62            .byte	$62
04854 116A                        68            .byte	$68
04855 116B                        78            .byte	$78
04856 116C                        68            .byte	$68
04857 116D                        62            .byte	$62
04858 116E                        FE            .byte	$FE
04859 116F                        00            .byte	0
04860                                           ! 776  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
04861 1170                        FE            .byte	$FE
04862 1171                        62            .byte	$62
04863 1172                        68            .byte	$68
04864 1173                        78            .byte	$78
04865 1174                        68            .byte	$68
04866 1175                        60            .byte	$60
04867 1176                        F0            .byte	$F0
04868 1177                        00            .byte	0
04869                                           ! 777  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
04870 1178                        3C            .byte	$3C
04871 1179                        66            .byte	$66
04872 117A                        C0            .byte	$C0
04873 117B                        C0            .byte	$C0
04874 117C                        CE            .byte	$CE
04875 117D                        66            .byte	$66
04876 117E                        3E            .byte	$3E
04877 117F                        00            .byte	0
04878                                           ! 778  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
04879 1180                        CC            .byte	$CC
04880 1181                        CC            .byte	$CC
04881 1182                        CC            .byte	$CC
04882 1183                        FC            .byte	$FC
04883 1184                        CC            .byte	$CC
04884 1185                        CC            .byte	$CC
04885 1186                        CC            .byte	$CC
04886 1187                        00            .byte	0
04887                                           ! 779  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04888 1188                        78            .byte	$78
04889 1189                        30            .byte	$30
04890 118A                        30            .byte	$30
04891 118B                        30            .byte	$30
04892 118C                        30            .byte	$30
04893 118D                        30            .byte	$30
04894 118E                        78            .byte	$78
04895 118F                        00            .byte	0
04896                                           ! 780  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
04897 1190                        1E            .byte	$1E
04898 1191                        0C            .byte	$C
04899 1192                        0C            .byte	$C
04900 1193                        0C            .byte	$C
04901 1194                        CC            .byte	$CC
04902 1195                        CC            .byte	$CC
04903 1196                        78            .byte	$78
04904 1197                        00            .byte	0
04905                                           ! 781  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
04906 1198                        E6            .byte	$E6
04907 1199                        66            .byte	$66
04908 119A                        6C            .byte	$6C
04909 119B                        78            .byte	$78
04910 119C                        6C            .byte	$6C
04911 119D                        66            .byte	$66
04912 119E                        E6            .byte	$E6
04913 119F                        00            .byte	0
04914                                           ! 782  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
04915 11A0                        F0            .byte	$F0
04916 11A1                        60            .byte	$60
04917 11A2                        60            .byte	$60
04918 11A3                        60            .byte	$60
04919 11A4                        62            .byte	$62
04920 11A5                        66            .byte	$66
04921 11A6                        FE            .byte	$FE
04922 11A7                        00            .byte	0
04923                                           ! 783  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
04924 11A8                        C6            .byte	$C6
04925 11A9                        EE            .byte	$EE
04926 11AA                        FE            .byte	$FE
04927 11AB                        FE            .byte	$FE
04928 11AC                        D6            .byte	$D6
04929 11AD                        C6            .byte	$C6
04930 11AE                        C6            .byte	$C6
04931 11AF                        00            .byte	0
04932                                           ! 784  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
04933 11B0                        C6            .byte	$C6
04934 11B1                        E6            .byte	$E6
04935 11B2                        F6            .byte	$F6
04936 11B3                        DE            .byte	$DE
04937 11B4                        CE            .byte	$CE
04938 11B5                        C6            .byte	$C6
04939 11B6                        C6            .byte	$C6
04940 11B7                        00            .byte	0
04941                                           ! 785  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
04942 11B8                        38            .byte	$38
04943 11B9                        6C            .byte	$6C
04944 11BA                        C6            .byte	$C6
04945 11BB                        C6            .byte	$C6
04946 11BC                        C6            .byte	$C6
04947 11BD                        6C            .byte	$6C
04948 11BE                        38            .byte	$38
04949 11BF                        00            .byte	0
04950                                           ! 786  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
04951 11C0                        FC            .byte	$FC
04952 11C1                        66            .byte	$66
04953 11C2                        66            .byte	$66
04954 11C3                        7C            .byte	$7C
04955 11C4                        60            .byte	$60
04956 11C5                        60            .byte	$60
04957 11C6                        F0            .byte	$F0
04958 11C7                        00            .byte	0
04959                                           ! 787  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
04960 11C8                        78            .byte	$78
04961 11C9                        CC            .byte	$CC
04962 11CA                        CC            .byte	$CC
04963 11CB                        CC            .byte	$CC
04964 11CC                        DC            .byte	$DC
04965 11CD                        78            .byte	$78
04966 11CE                        1C            .byte	$1C
04967 11CF                        00            .byte	0
04968                                           ! 788  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
04969 11D0                        FC            .byte	$FC
04970 11D1                        66            .byte	$66
04971 11D2                        66            .byte	$66
04972 11D3                        7C            .byte	$7C
04973 11D4                        6C            .byte	$6C
04974 11D5                        66            .byte	$66
04975 11D6                        E6            .byte	$E6
04976 11D7                        00            .byte	0
04977                                           ! 789  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
04978 11D8                        78            .byte	$78
04979 11D9                        CC            .byte	$CC
04980 11DA                        E0            .byte	$E0
04981 11DB                        70            .byte	$70
04982 11DC                        1C            .byte	$1C
04983 11DD                        CC            .byte	$CC
04984 11DE                        78            .byte	$78
04985 11DF                        00            .byte	0
04986                                           ! 790  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04987 11E0                        FC            .byte	$FC
04988 11E1                        B4            .byte	$B4
04989 11E2                        30            .byte	$30
04990 11E3                        30            .byte	$30
04991 11E4                        30            .byte	$30
04992 11E5                        30            .byte	$30
04993 11E6                        78            .byte	$78
04994 11E7                        00            .byte	0
04995                                           ! 791  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
04996 11E8                        CC            .byte	$CC
04997 11E9                        CC            .byte	$CC
04998 11EA                        CC            .byte	$CC
04999 11EB                        CC            .byte	$CC
05000 11EC                        CC            .byte	$CC
05001 11ED                        CC            .byte	$CC
05002 11EE                        FC            .byte	$FC
05003 11EF                        00            .byte	0
05004                                           ! 792  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05005 11F0                        CC            .byte	$CC
05006 11F1                        CC            .byte	$CC
05007 11F2                        CC            .byte	$CC
05008 11F3                        CC            .byte	$CC
05009 11F4                        CC            .byte	$CC
05010 11F5                        78            .byte	$78
05011 11F6                        30            .byte	$30
05012 11F7                        00            .byte	0
05013                                           ! 793  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05014 11F8                        C6            .byte	$C6
05015 11F9                        C6            .byte	$C6
05016 11FA                        C6            .byte	$C6
05017 11FB                        D6            .byte	$D6
05018 11FC                        FE            .byte	$FE
05019 11FD                        EE            .byte	$EE
05020 11FE                        C6            .byte	$C6
05021 11FF                        00            .byte	0
05022                                           ! 794  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05023 1200                        C6            .byte	$C6
05024 1201                        C6            .byte	$C6
05025 1202                        6C            .byte	$6C
05026 1203                        38            .byte	$38
05027 1204                        38            .byte	$38
05028 1205                        6C            .byte	$6C
05029 1206                        C6            .byte	$C6
05030 1207                        00            .byte	0
05031                                           ! 795  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05032 1208                        CC            .byte	$CC
05033 1209                        CC            .byte	$CC
05034 120A                        CC            .byte	$CC
05035 120B                        78            .byte	$78
05036 120C                        30            .byte	$30
05037 120D                        30            .byte	$30
05038 120E                        78            .byte	$78
05039 120F                        00            .byte	0
05040                                           ! 796  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05041 1210                        FE            .byte	$FE
05042 1211                        C6            .byte	$C6
05043 1212                        8C            .byte	$8C
05044 1213                        18            .byte	$18
05045 1214                        32            .byte	$32
05046 1215                        66            .byte	$66
05047 1216                        FE            .byte	$FE
05048 1217                        00            .byte	0
05049                                           ! 797  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05050 1218                        78            .byte	$78
05051 1219                        60            .byte	$60
05052 121A                        60            .byte	$60
05053 121B                        60            .byte	$60
05054 121C                        60            .byte	$60
05055 121D                        60            .byte	$60
05056 121E                        78            .byte	$78
05057 121F                        00            .byte	0
05058                                           ! 798  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05059 1220                        C0            .byte	$C0
05060 1221                        60            .byte	$60
05061 1222                        30            .byte	$30
05062 1223                        18            .byte	$18
05063 1224                        0C            .byte	$C
05064 1225                        06            .byte	6
05065 1226                        02            .byte	2
05066 1227                        00            .byte	0
05067                                           ! 799  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05068 1228                        78            .byte	$78
05069 1229                        18            .byte	$18
05070 122A                        18            .byte	$18
05071 122B                        18            .byte	$18
05072 122C                        18            .byte	$18
05073 122D                        18            .byte	$18
05074 122E                        78            .byte	$78
05075 122F                        00            .byte	0
05076                                           ! 800  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05077 1230                        10            .byte	$10
05078 1231                        38            .byte	$38
05079 1232                        6C            .byte	$6C
05080 1233                        C6            .byte	$C6
05081 1234                        00            .byte	0
05082 1235                        00            .byte	0
05083 1236                        00            .byte	0
05084 1237                        00            .byte	0
05085                                           ! 801  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05086 1238                        00            .byte	0
05087 1239                        00            .byte	0
05088 123A                        00            .byte	0
05089 123B                        00            .byte	0
05090 123C                        00            .byte	0
05091 123D                        00            .byte	0
05092 123E                        00            .byte	0
05093 123F                        FF            .byte	$FF
05094                                           ! 802  0x30, 0x30, 0x18, 0x00, 0x00, 0
05095 1240                        30            .byte	$30
05096 1241                        30            .byte	$30
05097 1242                        18            .byte	$18
05098 1243                        00            .byte	0
05099 1244                        00            .byte	0
05100                                           ! 802 x00, 0x00, 0x00,
05101 1245                        00            .byte	0
05102 1246                        00            .byte	0
05103 1247                        00            .byte	0
05104                                           ! 803  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05105 1248                        00            .byte	0
05106 1249                        00            .byte	0
05107 124A                        78            .byte	$78
05108 124B                        0C            .byte	$C
05109 124C                        7C            .byte	$7C
05110 124D                        CC            .byte	$CC
05111 124E                        76            .byte	$76
05112 124F                        00            .byte	0
05113                                           ! 804  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05114 1250                        E0            .byte	$E0
05115 1251                        60            .byte	$60
05116 1252                        60            .byte	$60
05117 1253                        7C            .byte	$7C
05118 1254                        66            .byte	$66
05119 1255                        66            .byte	$66
05120 1256                        DC            .byte	$DC
05121 1257                        00            .byte	0
05122                                           ! 805  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05123 1258                        00            .byte	0
05124 1259                        00            .byte	0
05125 125A                        78            .byte	$78
05126 125B                        CC            .byte	$CC
05127 125C                        C0            .byte	$C0
05128 125D                        CC            .byte	$CC
05129 125E                        78            .byte	$78
05130 125F                        00            .byte	0
05131                                           ! 806  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05132 1260                        1C            .byte	$1C
05133 1261                        0C            .byte	$C
05134 1262                        0C            .byte	$C
05135 1263                        7C            .byte	$7C
05136 1264                        CC            .byte	$CC
05137 1265                        CC            .byte	$CC
05138 1266                        76            .byte	$76
05139 1267                        00            .byte	0
05140                                           ! 807  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05141 1268                        00            .byte	0
05142 1269                        00            .byte	0
05143 126A                        78            .byte	$78
05144 126B                        CC            .byte	$CC
05145 126C                        FC            .byte	$FC
05146 126D                        C0            .byte	$C0
05147 126E                        78            .byte	$78
05148 126F                        00            .byte	0
05149                                           ! 808  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05150 1270                        38            .byte	$38
05151 1271                        6C            .byte	$6C
05152 1272                        60            .byte	$60
05153 1273                        F0            .byte	$F0
05154 1274                        60            .byte	$60
05155 1275                        60            .byte	$60
05156 1276                        F0            .byte	$F0
05157 1277                        00            .byte	0
05158                                           ! 809  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05159 1278                        00            .byte	0
05160 1279                        00            .byte	0
05161 127A                        76            .byte	$76
05162 127B                        CC            .byte	$CC
05163 127C                        CC            .byte	$CC
05164 127D                        7C            .byte	$7C
05165 127E                        0C            .byte	$C
05166 127F                        F8            .byte	$F8
05167                                           ! 810  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05168 1280                        E0            .byte	$E0
05169 1281                        60            .byte	$60
05170 1282                        6C            .byte	$6C
05171 1283                        76            .byte	$76
05172 1284                        66            .byte	$66
05173 1285                        66            .byte	$66
05174 1286                        E6            .byte	$E6
05175 1287                        00            .byte	0
05176                                           ! 811  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05177 1288                        30            .byte	$30
05178 1289                        00            .byte	0
05179 128A                        70            .byte	$70
05180 128B                        30            .byte	$30
05181 128C                        30            .byte	$30
05182 128D                        30            .byte	$30
05183 128E                        78            .byte	$78
05184 128F                        00            .byte	0
05185                                           ! 812  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05186 1290                        0C            .byte	$C
05187 1291                        00            .byte	0
05188 1292                        0C            .byte	$C
05189 1293                        0C            .byte	$C
05190 1294                        0C            .byte	$C
05191 1295                        CC            .byte	$CC
05192 1296                        CC            .byte	$CC
05193 1297                        78            .byte	$78
05194                                           ! 813  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05195 1298                        E0            .byte	$E0
05196 1299                        60            .byte	$60
05197 129A                        66            .byte	$66
05198 129B                        6C            .byte	$6C
05199 129C                        78            .byte	$78
05200 129D                        6C            .byte	$6C
05201 129E                        E6            .byte	$E6
05202 129F                        00            .byte	0
05203                                           ! 814  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05204 12A0                        70            .byte	$70
05205 12A1                        30            .byte	$30
05206 12A2                        30            .byte	$30
05207 12A3                        30            .byte	$30
05208 12A4                        30            .byte	$30
05209 12A5                        30            .byte	$30
05210 12A6                        78            .byte	$78
05211 12A7                        00            .byte	0
05212                                           ! 815  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05213 12A8                        00            .byte	0
05214 12A9                        00            .byte	0
05215 12AA                        CC            .byte	$CC
05216 12AB                        FE            .byte	$FE
05217 12AC                        FE            .byte	$FE
05218 12AD                        D6            .byte	$D6
05219 12AE                        C6            .byte	$C6
05220 12AF                        00            .byte	0
05221                                           ! 816  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05222 12B0                        00            .byte	0
05223 12B1                        00            .byte	0
05224 12B2                        F8            .byte	$F8
05225 12B3                        CC            .byte	$CC
05226 12B4                        CC            .byte	$CC
05227 12B5                        CC            .byte	$CC
05228 12B6                        CC            .byte	$CC
05229 12B7                        00            .byte	0
05230                                           ! 817  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05231 12B8                        00            .byte	0
05232 12B9                        00            .byte	0
05233 12BA                        78            .byte	$78
05234 12BB                        CC            .byte	$CC
05235 12BC                        CC            .byte	$CC
05236 12BD                        CC            .byte	$CC
05237 12BE                        78            .byte	$78
05238 12BF                        00            .byte	0
05239                                           ! 818  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05240 12C0                        00            .byte	0
05241 12C1                        00            .byte	0
05242 12C2                        DC            .byte	$DC
05243 12C3                        66            .byte	$66
05244 12C4                        66            .byte	$66
05245 12C5                        7C            .byte	$7C
05246 12C6                        60            .byte	$60
05247 12C7                        F0            .byte	$F0
05248                                           ! 819  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05249 12C8                        00            .byte	0
05250 12C9                        00            .byte	0
05251 12CA                        76            .byte	$76
05252 12CB                        CC            .byte	$CC
05253 12CC                        CC            .byte	$CC
05254 12CD                        7C            .byte	$7C
05255 12CE                        0C            .byte	$C
05256 12CF                        1E            .byte	$1E
05257                                           ! 820  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05258 12D0                        00            .byte	0
05259 12D1                        00            .byte	0
05260 12D2                        DC            .byte	$DC
05261 12D3                        76            .byte	$76
05262 12D4                        66            .byte	$66
05263 12D5                        60            .byte	$60
05264 12D6                        F0            .byte	$F0
05265 12D7                        00            .byte	0
05266                                           ! 821  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05267 12D8                        00            .byte	0
05268 12D9                        00            .byte	0
05269 12DA                        7C            .byte	$7C
05270 12DB                        C0            .byte	$C0
05271 12DC                        78            .byte	$78
05272 12DD                        0C            .byte	$C
05273 12DE                        F8            .byte	$F8
05274 12DF                        00            .byte	0
05275                                           ! 822  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05276 12E0                        10            .byte	$10
05277 12E1                        30            .byte	$30
05278 12E2                        7C            .byte	$7C
05279 12E3                        30            .byte	$30
05280 12E4                        30            .byte	$30
05281 12E5                        34            .byte	$34
05282 12E6                        18            .byte	$18
05283 12E7                        00            .byte	0
05284                                           ! 823  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05285 12E8                        00            .byte	0
05286 12E9                        00            .byte	0
05287 12EA                        CC            .byte	$CC
05288 12EB                        CC            .byte	$CC
05289 12EC                        CC            .byte	$CC
05290 12ED                        CC            .byte	$CC
05291 12EE                        76            .byte	$76
05292 12EF                        00            .byte	0
05293                                           ! 824  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05294 12F0                        00            .byte	0
05295 12F1                        00            .byte	0
05296 12F2                        CC            .byte	$CC
05297 12F3                        CC            .byte	$CC
05298 12F4                        CC            .byte	$CC
05299 12F5                        78            .byte	$78
05300 12F6                        30            .byte	$30
05301 12F7                        00            .byte	0
05302                                           ! 825  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05303 12F8                        00            .byte	0
05304 12F9                        00            .byte	0
05305 12FA                        C6            .byte	$C6
05306 12FB                        D6            .byte	$D6
05307 12FC                        FE            .byte	$FE
05308 12FD                        FE            .byte	$FE
05309 12FE                        6C            .byte	$6C
05310 12FF                        00            .byte	0
05311                                           ! 826  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05312 1300                        00            .byte	0
05313 1301                        00            .byte	0
05314 1302                        C6            .byte	$C6
05315 1303                        6C            .byte	$6C
05316 1304                        38            .byte	$38
05317 1305                        6C            .byte	$6C
05318 1306                        C6            .byte	$C6
05319 1307                        00            .byte	0
05320                                           ! 827  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05321 1308                        00            .byte	0
05322 1309                        00            .byte	0
05323 130A                        CC            .byte	$CC
05324 130B                        CC            .byte	$CC
05325 130C                        CC            .byte	$CC
05326 130D                        7C            .byte	$7C
05327 130E                        0C            .byte	$C
05328 130F                        F8            .byte	$F8
05329                                           ! 828  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05330 1310                        00            .byte	0
05331 1311                        00            .byte	0
05332 1312                        FC            .byte	$FC
05333 1313                        98            .byte	$98
05334 1314                        30            .byte	$30
05335 1315                        64            .byte	$64
05336 1316                        FC            .byte	$FC
05337 1317                        00            .byte	0
05338                                           ! 829  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05339 1318                        1C            .byte	$1C
05340 1319                        30            .byte	$30
05341 131A                        30            .byte	$30
05342 131B                        E0            .byte	$E0
05343 131C                        30            .byte	$30
05344 131D                        30            .byte	$30
05345 131E                        1C            .byte	$1C
05346 131F                        00            .byte	0
05347                                           ! 830  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05348 1320                        18            .byte	$18
05349 1321                        18            .byte	$18
05350 1322                        18            .byte	$18
05351 1323                        00            .byte	0
05352 1324                        18            .byte	$18
05353 1325                        18            .byte	$18
05354 1326                        18            .byte	$18
05355 1327                        00            .byte	0
05356                                           ! 831  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05357 1328                        E0            .byte	$E0
05358 1329                        30            .byte	$30
05359 132A                        30            .byte	$30
05360 132B                        1C            .byte	$1C
05361 132C                        30            .byte	$30
05362 132D                        30            .byte	$30
05363 132E                        E0            .byte	$E0
05364 132F                        00            .byte	0
05365                                           ! 832  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05366 1330                        76            .byte	$76
05367 1331                        DC            .byte	$DC
05368 1332                        00            .byte	0
05369 1333                        00            .byte	0
05370 1334                        00            .byte	0
05371 1335                        00            .byte	0
05372 1336                        00            .byte	0
05373 1337                        00            .byte	0
05374                                           ! 833  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05375 1338                        00            .byte	0
05376 1339                        10            .byte	$10
05377 133A                        38            .byte	$38
05378 133B                        6C            .byte	$6C
05379 133C                        C6            .byte	$C6
05380 133D                        C6            .byte	$C6
05381 133E                        FE            .byte	$FE
05382 133F                        00            .byte	0
05383                                           ! 834  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05384 1340                        78            .byte	$78
05385 1341                        CC            .byte	$CC
05386 1342                        C0            .byte	$C0
05387 1343                        CC            .byte	$CC
05388 1344                        78            .byte	$78
05389 1345                        18            .byte	$18
05390 1346                        0C            .byte	$C
05391 1347                        78            .byte	$78
05392                                           ! 835  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05393 1348                        00            .byte	0
05394 1349                        CC            .byte	$CC
05395 134A                        00            .byte	0
05396 134B                        CC            .byte	$CC
05397 134C                        CC            .byte	$CC
05398 134D                        CC            .byte	$CC
05399 134E                        7E            .byte	$7E
05400 134F                        00            .byte	0
05401                                           ! 836  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05402 1350                        1C            .byte	$1C
05403 1351                        00            .byte	0
05404 1352                        78            .byte	$78
05405 1353                        CC            .byte	$CC
05406 1354                        FC            .byte	$FC
05407 1355                        C0            .byte	$C0
05408 1356                        78            .byte	$78
05409 1357                        00            .byte	0
05410                                           ! 837  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05411 1358                        7E            .byte	$7E
05412 1359                        C3            .byte	$C3
05413 135A                        3C            .byte	$3C
05414 135B                        06            .byte	6
05415 135C                        3E            .byte	$3E
05416 135D                        66            .byte	$66
05417 135E                        3F            .byte	$3F
05418 135F                        00            .byte	0
05419                                           ! 838  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05420 1360                        CC            .byte	$CC
05421 1361                        00            .byte	0
05422 1362                        78            .byte	$78
05423 1363                        0C            .byte	$C
05424 1364                        7C            .byte	$7C
05425 1365                        CC            .byte	$CC
05426 1366                        7E            .byte	$7E
05427 1367                        00            .byte	0
05428                                           ! 839  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05429 1368                        E0            .byte	$E0
05430 1369                        00            .byte	0
05431 136A                        78            .byte	$78
05432 136B                        0C            .byte	$C
05433 136C                        7C            .byte	$7C
05434 136D                        CC            .byte	$CC
05435 136E                        7E            .byte	$7E
05436 136F                        00            .byte	0
05437                                           ! 840  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05438 1370                        30            .byte	$30
05439 1371                        30            .byte	$30
05440 1372                        78            .byte	$78
05441 1373                        0C            .byte	$C
05442 1374                        7C            .byte	$7C
05443 1375                        CC            .byte	$CC
05444 1376                        7E            .byte	$7E
05445 1377                        00            .byte	0
05446                                           ! 841  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05447 1378                        00            .byte	0
05448 1379                        00            .byte	0
05449 137A                        78            .byte	$78
05450 137B                        C0            .byte	$C0
05451 137C                        C0            .byte	$C0
05452 137D                        78            .byte	$78
05453 137E                        0C            .byte	$C
05454 137F                        38            .byte	$38
05455                                           ! 842  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05456 1380                        7E            .byte	$7E
05457 1381                        C3            .byte	$C3
05458 1382                        3C            .byte	$3C
05459 1383                        66            .byte	$66
05460 1384                        7E            .byte	$7E
05461 1385                        60            .byte	$60
05462 1386                        3C            .byte	$3C
05463 1387                        00            .byte	0
05464                                           ! 843  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05465 1388                        CC            .byte	$CC
05466 1389                        00            .byte	0
05467 138A                        78            .byte	$78
05468 138B                        CC            .byte	$CC
05469 138C                        FC            .byte	$FC
05470 138D                        C0            .byte	$C0
05471 138E                        78            .byte	$78
05472 138F                        00            .byte	0
05473                                           ! 844  0xe0, 0x00, 0x78, 0xc
05474 1390                        E0            .byte	$E0
05475 1391                        00            .byte	0
05476 1392                        78            .byte	$78
05477                                           ! 844 c, 0xfc, 0xc0, 0x78, 0x00,
05478 1393                        CC            .byte	$CC
05479 1394                        FC            .byte	$FC
05480 1395                        C0            .byte	$C0
05481 1396                        78            .byte	$78
05482 1397                        00            .byte	0
05483                                           ! 845  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05484 1398                        CC            .byte	$CC
05485 1399                        00            .byte	0
05486 139A                        70            .byte	$70
05487 139B                        30            .byte	$30
05488 139C                        30            .byte	$30
05489 139D                        30            .byte	$30
05490 139E                        78            .byte	$78
05491 139F                        00            .byte	0
05492                                           ! 846  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05493 13A0                        7C            .byte	$7C
05494 13A1                        C6            .byte	$C6
05495 13A2                        38            .byte	$38
05496 13A3                        18            .byte	$18
05497 13A4                        18            .byte	$18
05498 13A5                        18            .byte	$18
05499 13A6                        3C            .byte	$3C
05500 13A7                        00            .byte	0
05501                                           ! 847  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05502 13A8                        E0            .byte	$E0
05503 13A9                        00            .byte	0
05504 13AA                        70            .byte	$70
05505 13AB                        30            .byte	$30
05506 13AC                        30            .byte	$30
05507 13AD                        30            .byte	$30
05508 13AE                        78            .byte	$78
05509 13AF                        00            .byte	0
05510                                           ! 848  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05511 13B0                        C6            .byte	$C6
05512 13B1                        38            .byte	$38
05513 13B2                        6C            .byte	$6C
05514 13B3                        C6            .byte	$C6
05515 13B4                        FE            .byte	$FE
05516 13B5                        C6            .byte	$C6
05517 13B6                        C6            .byte	$C6
05518 13B7                        00            .byte	0
05519                                           ! 849  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05520 13B8                        30            .byte	$30
05521 13B9                        30            .byte	$30
05522 13BA                        00            .byte	0
05523 13BB                        78            .byte	$78
05524 13BC                        CC            .byte	$CC
05525 13BD                        FC            .byte	$FC
05526 13BE                        CC            .byte	$CC
05527 13BF                        00            .byte	0
05528                                           ! 850  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05529 13C0                        1C            .byte	$1C
05530 13C1                        00            .byte	0
05531 13C2                        FC            .byte	$FC
05532 13C3                        60            .byte	$60
05533 13C4                        78            .byte	$78
05534 13C5                        60            .byte	$60
05535 13C6                        FC            .byte	$FC
05536 13C7                        00            .byte	0
05537                                           ! 851  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05538 13C8                        00            .byte	0
05539 13C9                        00            .byte	0
05540 13CA                        7F            .byte	$7F
05541 13CB                        0C            .byte	$C
05542 13CC                        7F            .byte	$7F
05543 13CD                        CC            .byte	$CC
05544 13CE                        7F            .byte	$7F
05545 13CF                        00            .byte	0
05546                                           ! 852  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05547 13D0                        3E            .byte	$3E
05548 13D1                        6C            .byte	$6C
05549 13D2                        CC            .byte	$CC
05550 13D3                        FE            .byte	$FE
05551 13D4                        CC            .byte	$CC
05552 13D5                        CC            .byte	$CC
05553 13D6                        CE            .byte	$CE
05554 13D7                        00            .byte	0
05555                                           ! 853  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05556 13D8                        78            .byte	$78
05557 13D9                        CC            .byte	$CC
05558 13DA                        00            .byte	0
05559 13DB                        78            .byte	$78
05560 13DC                        CC            .byte	$CC
05561 13DD                        CC            .byte	$CC
05562 13DE                        78            .byte	$78
05563 13DF                        00            .byte	0
05564                                           ! 854  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05565 13E0                        00            .byte	0
05566 13E1                        CC            .byte	$CC
05567 13E2                        00            .byte	0
05568 13E3                        78            .byte	$78
05569 13E4                        CC            .byte	$CC
05570 13E5                        CC            .byte	$CC
05571 13E6                        78            .byte	$78
05572 13E7                        00            .byte	0
05573                                           ! 855  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05574 13E8                        00            .byte	0
05575 13E9                        E0            .byte	$E0
05576 13EA                        00            .byte	0
05577 13EB                        78            .byte	$78
05578 13EC                        CC            .byte	$CC
05579 13ED                        CC            .byte	$CC
05580 13EE                        78            .byte	$78
05581 13EF                        00            .byte	0
05582                                           ! 856  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05583 13F0                        78            .byte	$78
05584 13F1                        CC            .byte	$CC
05585 13F2                        00            .byte	0
05586 13F3                        CC            .byte	$CC
05587 13F4                        CC            .byte	$CC
05588 13F5                        CC            .byte	$CC
05589 13F6                        7E            .byte	$7E
05590 13F7                        00            .byte	0
05591                                           ! 857  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05592 13F8                        00            .byte	0
05593 13F9                        E0            .byte	$E0
05594 13FA                        00            .byte	0
05595 13FB                        CC            .byte	$CC
05596 13FC                        CC            .byte	$CC
05597 13FD                        CC            .byte	$CC
05598 13FE                        7E            .byte	$7E
05599 13FF                        00            .byte	0
05600                                           ! 858  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05601 1400                        00            .byte	0
05602 1401                        CC            .byte	$CC
05603 1402                        00            .byte	0
05604 1403                        CC            .byte	$CC
05605 1404                        CC            .byte	$CC
05606 1405                        7C            .byte	$7C
05607 1406                        0C            .byte	$C
05608 1407                        F8            .byte	$F8
05609                                           ! 859  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05610 1408                        C3            .byte	$C3
05611 1409                        18            .byte	$18
05612 140A                        3C            .byte	$3C
05613 140B                        66            .byte	$66
05614 140C                        66            .byte	$66
05615 140D                        3C            .byte	$3C
05616 140E                        18            .byte	$18
05617 140F                        00            .byte	0
05618                                           ! 860  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05619 1410                        CC            .byte	$CC
05620 1411                        00            .byte	0
05621 1412                        CC            .byte	$CC
05622 1413                        CC            .byte	$CC
05623 1414                        CC            .byte	$CC
05624 1415                        CC            .byte	$CC
05625 1416                        78            .byte	$78
05626 1417                        00            .byte	0
05627                                           ! 861  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05628 1418                        18            .byte	$18
05629 1419                        18            .byte	$18
05630 141A                        7E            .byte	$7E
05631 141B                        C0            .byte	$C0
05632 141C                        C0            .byte	$C0
05633 141D                        7E            .byte	$7E
05634 141E                        18            .byte	$18
05635 141F                        18            .byte	$18
05636                                           ! 862  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05637 1420                        38            .byte	$38
05638 1421                        6C            .byte	$6C
05639 1422                        64            .byte	$64
05640 1423                        F0            .byte	$F0
05641 1424                        60            .byte	$60
05642 1425                        E6            .byte	$E6
05643 1426                        FC            .byte	$FC
05644 1427                        00            .byte	0
05645                                           ! 863  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05646 1428                        CC            .byte	$CC
05647 1429                        CC            .byte	$CC
05648 142A                        78            .byte	$78
05649 142B                        FC            .byte	$FC
05650 142C                        30            .byte	$30
05651 142D                        FC            .byte	$FC
05652 142E                        30            .byte	$30
05653 142F                        30            .byte	$30
05654                                           ! 864  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05655 1430                        F8            .byte	$F8
05656 1431                        CC            .byte	$CC
05657 1432                        CC            .byte	$CC
05658 1433                        FA            .byte	$FA
05659 1434                        C6            .byte	$C6
05660 1435                        CF            .byte	$CF
05661 1436                        C6            .byte	$C6
05662 1437                        C7            .byte	$C7
05663                                           ! 865  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05664 1438                        0E            .byte	$E
05665 1439                        1B            .byte	$1B
05666 143A                        18            .byte	$18
05667 143B                        3C            .byte	$3C
05668 143C                        18            .byte	$18
05669 143D                        18            .byte	$18
05670 143E                        D8            .byte	$D8
05671 143F                        70            .byte	$70
05672                                           ! 866  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05673 1440                        1C            .byte	$1C
05674 1441                        00            .byte	0
05675 1442                        78            .byte	$78
05676 1443                        0C            .byte	$C
05677 1444                        7C            .byte	$7C
05678 1445                        CC            .byte	$CC
05679 1446                        7E            .byte	$7E
05680 1447                        00            .byte	0
05681                                           ! 867  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05682 1448                        38            .byte	$38
05683 1449                        00            .byte	0
05684 144A                        70            .byte	$70
05685 144B                        30            .byte	$30
05686 144C                        30            .byte	$30
05687 144D                        30            .byte	$30
05688 144E                        78            .byte	$78
05689 144F                        00            .byte	0
05690                                           ! 868  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05691 1450                        00            .byte	0
05692 1451                        1C            .byte	$1C
05693 1452                        00            .byte	0
05694 1453                        78            .byte	$78
05695 1454                        CC            .byte	$CC
05696 1455                        CC            .byte	$CC
05697 1456                        78            .byte	$78
05698 1457                        00            .byte	0
05699                                           ! 869  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05700 1458                        00            .byte	0
05701 1459                        1C            .byte	$1C
05702 145A                        00            .byte	0
05703 145B                        CC            .byte	$CC
05704 145C                        CC            .byte	$CC
05705 145D                        CC            .byte	$CC
05706 145E                        7E            .byte	$7E
05707 145F                        00            .byte	0
05708                                           ! 870  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05709 1460                        00            .byte	0
05710 1461                        F8            .byte	$F8
05711 1462                        00            .byte	0
05712 1463                        F8            .byte	$F8
05713 1464                        CC            .byte	$CC
05714 1465                        CC            .byte	$CC
05715 1466                        CC            .byte	$CC
05716 1467                        00            .byte	0
05717                                           ! 871  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05718 1468                        FC            .byte	$FC
05719 1469                        00            .byte	0
05720 146A                        CC            .byte	$CC
05721 146B                        EC            .byte	$EC
05722 146C                        FC            .byte	$FC
05723 146D                        DC            .byte	$DC
05724 146E                        CC            .byte	$CC
05725 146F                        00            .byte	0
05726                                           ! 872  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05727 1470                        3C            .byte	$3C
05728 1471                        6C            .byte	$6C
05729 1472                        6C            .byte	$6C
05730 1473                        3E            .byte	$3E
05731 1474                        00            .byte	0
05732 1475                        7E            .byte	$7E
05733 1476                        00            .byte	0
05734 1477                        00            .byte	0
05735                                           ! 873  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
05736 1478                        38            .byte	$38
05737 1479                        6C            .byte	$6C
05738 147A                        6C            .byte	$6C
05739 147B                        38            .byte	$38
05740 147C                        00            .byte	0
05741 147D                        7C            .byte	$7C
05742 147E                        00            .byte	0
05743 147F                        00            .byte	0
05744                                           ! 874  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
05745 1480                        30            .byte	$30
05746 1481                        00            .byte	0
05747 1482                        30            .byte	$30
05748 1483                        60            .byte	$60
05749 1484                        C0            .byte	$C0
05750 1485                        CC            .byte	$CC
05751 1486                        78            .byte	$78
05752 1487                        00            .byte	0
05753                                           ! 875  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
05754 1488                        00            .byte	0
05755 1489                        00            .byte	0
05756 148A                        00            .byte	0
05757 148B                        FC            .byte	$FC
05758 148C                        C0            .byte	$C0
05759 148D                        C0            .byte	$C0
05760 148E                        00            .byte	0
05761 148F                        00            .byte	0
05762                                           ! 876  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
05763 1490                        00            .byte	0
05764 1491                        00            .byte	0
05765 1492                        00            .byte	0
05766 1493                        FC            .byte	$FC
05767 1494                        0C            .byte	$C
05768 1495                        0C            .byte	$C
05769 1496                        00            .byte	0
05770 1497                        00            .byte	0
05771                                           ! 877  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
05772 1498                        C3            .byte	$C3
05773 1499                        C6            .byte	$C6
05774 149A                        CC            .byte	$CC
05775 149B                        DE            .byte	$DE
05776 149C                        33            .byte	$33
05777 149D                        66            .byte	$66
05778 149E                        CC            .byte	$CC
05779 149F                        0F            .byte	$F
05780                                           ! 878  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
05781 14A0                        C3            .byte	$C3
05782 14A1                        C6            .byte	$C6
05783 14A2                        CC            .byte	$CC
05784 14A3                        DB            .byte	$DB
05785 14A4                        37            .byte	$37
05786 14A5                        6F            .byte	$6F
05787 14A6                        CF            .byte	$CF
05788 14A7                        03            .byte	3
05789                                           ! 879  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
05790 14A8                        18            .byte	$18
05791 14A9                        18            .byte	$18
05792 14AA                        00            .byte	0
05793 14AB                        18            .byte	$18
05794 14AC                        18            .byte	$18
05795 14AD                        18            .byte	$18
05796 14AE                        18            .byte	$18
05797 14AF                        00            .byte	0
05798                                           ! 880  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
05799 14B0                        00            .byte	0
05800 14B1                        33            .byte	$33
05801 14B2                        66            .byte	$66
05802 14B3                        CC            .byte	$CC
05803 14B4                        66            .byte	$66
05804 14B5                        33            .byte	$33
05805 14B6                        00            .byte	0
05806 14B7                        00            .byte	0
05807                                           ! 881  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
05808 14B8                        00            .byte	0
05809 14B9                        CC            .byte	$CC
05810 14BA                        66            .byte	$66
05811 14BB                        33            .byte	$33
05812 14BC                        66            .byte	$66
05813 14BD                        CC            .byte	$CC
05814 14BE                        00            .byte	0
05815 14BF                        00            .byte	0
05816                                           ! 882  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
05817 14C0                        22            .byte	$22
05818 14C1                        88            .byte	$88
05819 14C2                        22            .byte	$22
05820 14C3                        88            .byte	$88
05821 14C4                        22            .byte	$22
05822 14C5                        88            .byte	$88
05823 14C6                        22            .byte	$22
05824 14C7                        88            .byte	$88
05825                                           ! 883  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
05826 14C8                        55            .byte	$55
05827 14C9                        AA            .byte	$AA
05828 14CA                        55            .byte	$55
05829 14CB                        AA            .byte	$AA
05830 14CC                        55            .byte	$55
05831 14CD                        AA            .byte	$AA
05832 14CE                        55            .byte	$55
05833 14CF                        AA            .byte	$AA
05834                                           ! 884  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
05835 14D0                        DB            .byte	$DB
05836 14D1                        77            .byte	$77
05837 14D2                        DB            .byte	$DB
05838 14D3                        EE            .byte	$EE
05839 14D4                        DB            .byte	$DB
05840 14D5                        77            .byte	$77
05841 14D6                        DB            .byte	$DB
05842 14D7                        EE            .byte	$EE
05843                                           ! 885  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
05844 14D8                        18            .byte	$18
05845 14D9                        18            .byte	$18
05846 14DA                        18            .byte	$18
05847 14DB                        18            .byte	$18
05848 14DC                        18            .byte	$18
05849 14DD                        18            .byte	$18
05850 14DE                        18            .byte	$18
05851 14DF                        18            .byte	$18
05852                                           ! 886  0x18, 0x18,
05853 14E0                        18            .byte	$18
05854                                           ! 886  0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
05855 14E1                        18            .byte	$18
05856 14E2                        18            .byte	$18
05857 14E3                        18            .byte	$18
05858 14E4                        F8            .byte	$F8
05859 14E5                        18            .byte	$18
05860 14E6                        18            .byte	$18
05861 14E7                        18            .byte	$18
05862                                           ! 887  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05863 14E8                        18            .byte	$18
05864 14E9                        18            .byte	$18
05865 14EA                        F8            .byte	$F8
05866 14EB                        18            .byte	$18
05867 14EC                        F8            .byte	$F8
05868 14ED                        18            .byte	$18
05869 14EE                        18            .byte	$18
05870 14EF                        18            .byte	$18
05871                                           ! 888  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
05872 14F0                        36            .byte	$36
05873 14F1                        36            .byte	$36
05874 14F2                        36            .byte	$36
05875 14F3                        36            .byte	$36
05876 14F4                        F6            .byte	$F6
05877 14F5                        36            .byte	$36
05878 14F6                        36            .byte	$36
05879 14F7                        36            .byte	$36
05880                                           ! 889  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
05881 14F8                        00            .byte	0
05882 14F9                        00            .byte	0
05883 14FA                        00            .byte	0
05884 14FB                        00            .byte	0
05885 14FC                        FE            .byte	$FE
05886 14FD                        36            .byte	$36
05887 14FE                        36            .byte	$36
05888 14FF                        36            .byte	$36
05889                                           ! 890  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05890 1500                        00            .byte	0
05891 1501                        00            .byte	0
05892 1502                        F8            .byte	$F8
05893 1503                        18            .byte	$18
05894 1504                        F8            .byte	$F8
05895 1505                        18            .byte	$18
05896 1506                        18            .byte	$18
05897 1507                        18            .byte	$18
05898                                           ! 891  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
05899 1508                        36            .byte	$36
05900 1509                        36            .byte	$36
05901 150A                        F6            .byte	$F6
05902 150B                        06            .byte	6
05903 150C                        F6            .byte	$F6
05904 150D                        36            .byte	$36
05905 150E                        36            .byte	$36
05906 150F                        36            .byte	$36
05907                                           ! 892  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
05908 1510                        36            .byte	$36
05909 1511                        36            .byte	$36
05910 1512                        36            .byte	$36
05911 1513                        36            .byte	$36
05912 1514                        36            .byte	$36
05913 1515                        36            .byte	$36
05914 1516                        36            .byte	$36
05915 1517                        36            .byte	$36
05916                                           ! 893  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
05917 1518                        00            .byte	0
05918 1519                        00            .byte	0
05919 151A                        FE            .byte	$FE
05920 151B                        06            .byte	6
05921 151C                        F6            .byte	$F6
05922 151D                        36            .byte	$36
05923 151E                        36            .byte	$36
05924 151F                        36            .byte	$36
05925                                           ! 894  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
05926 1520                        36            .byte	$36
05927 1521                        36            .byte	$36
05928 1522                        F6            .byte	$F6
05929 1523                        06            .byte	6
05930 1524                        FE            .byte	$FE
05931 1525                        00            .byte	0
05932 1526                        00            .byte	0
05933 1527                        00            .byte	0
05934                                           ! 895  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
05935 1528                        36            .byte	$36
05936 1529                        36            .byte	$36
05937 152A                        36            .byte	$36
05938 152B                        36            .byte	$36
05939 152C                        FE            .byte	$FE
05940 152D                        00            .byte	0
05941 152E                        00            .byte	0
05942 152F                        00            .byte	0
05943                                           ! 896  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
05944 1530                        18            .byte	$18
05945 1531                        18            .byte	$18
05946 1532                        F8            .byte	$F8
05947 1533                        18            .byte	$18
05948 1534                        F8            .byte	$F8
05949 1535                        00            .byte	0
05950 1536                        00            .byte	0
05951 1537                        00            .byte	0
05952                                           ! 897  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
05953 1538                        00            .byte	0
05954 1539                        00            .byte	0
05955 153A                        00            .byte	0
05956 153B                        00            .byte	0
05957 153C                        F8            .byte	$F8
05958 153D                        18            .byte	$18
05959 153E                        18            .byte	$18
05960 153F                        18            .byte	$18
05961                                           ! 898  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
05962 1540                        18            .byte	$18
05963 1541                        18            .byte	$18
05964 1542                        18            .byte	$18
05965 1543                        18            .byte	$18
05966 1544                        1F            .byte	$1F
05967 1545                        00            .byte	0
05968 1546                        00            .byte	0
05969 1547                        00            .byte	0
05970                                           ! 899  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
05971 1548                        18            .byte	$18
05972 1549                        18            .byte	$18
05973 154A                        18            .byte	$18
05974 154B                        18            .byte	$18
05975 154C                        FF            .byte	$FF
05976 154D                        00            .byte	0
05977 154E                        00            .byte	0
05978 154F                        00            .byte	0
05979                                           ! 900  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
05980 1550                        00            .byte	0
05981 1551                        00            .byte	0
05982 1552                        00            .byte	0
05983 1553                        00            .byte	0
05984 1554                        FF            .byte	$FF
05985 1555                        18            .byte	$18
05986 1556                        18            .byte	$18
05987 1557                        18            .byte	$18
05988                                           ! 901  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
05989 1558                        18            .byte	$18
05990 1559                        18            .byte	$18
05991 155A                        18            .byte	$18
05992 155B                        18            .byte	$18
05993 155C                        1F            .byte	$1F
05994 155D                        18            .byte	$18
05995 155E                        18            .byte	$18
05996 155F                        18            .byte	$18
05997                                           ! 902  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
05998 1560                        00            .byte	0
05999 1561                        00            .byte	0
06000 1562                        00            .byte	0
06001 1563                        00            .byte	0
06002 1564                        FF            .byte	$FF
06003 1565                        00            .byte	0
06004 1566                        00            .byte	0
06005 1567                        00            .byte	0
06006                                           ! 903  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06007 1568                        18            .byte	$18
06008 1569                        18            .byte	$18
06009 156A                        18            .byte	$18
06010 156B                        18            .byte	$18
06011 156C                        FF            .byte	$FF
06012 156D                        18            .byte	$18
06013 156E                        18            .byte	$18
06014 156F                        18            .byte	$18
06015                                           ! 904  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06016 1570                        18            .byte	$18
06017 1571                        18            .byte	$18
06018 1572                        1F            .byte	$1F
06019 1573                        18            .byte	$18
06020 1574                        1F            .byte	$1F
06021 1575                        18            .byte	$18
06022 1576                        18            .byte	$18
06023 1577                        18            .byte	$18
06024                                           ! 905  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06025 1578                        36            .byte	$36
06026 1579                        36            .byte	$36
06027 157A                        36            .byte	$36
06028 157B                        36            .byte	$36
06029 157C                        37            .byte	$37
06030 157D                        36            .byte	$36
06031 157E                        36            .byte	$36
06032 157F                        36            .byte	$36
06033                                           ! 906  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06034 1580                        36            .byte	$36
06035 1581                        36            .byte	$36
06036 1582                        37            .byte	$37
06037 1583                        30            .byte	$30
06038 1584                        3F            .byte	$3F
06039 1585                        00            .byte	0
06040 1586                        00            .byte	0
06041 1587                        00            .byte	0
06042                                           ! 907  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06043 1588                        00            .byte	0
06044 1589                        00            .byte	0
06045 158A                        3F            .byte	$3F
06046 158B                        30            .byte	$30
06047 158C                        37            .byte	$37
06048 158D                        36            .byte	$36
06049 158E                        36            .byte	$36
06050 158F                        36            .byte	$36
06051                                           ! 908  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06052 1590                        36            .byte	$36
06053 1591                        36            .byte	$36
06054 1592                        F7            .byte	$F7
06055 1593                        00            .byte	0
06056 1594                        FF            .byte	$FF
06057 1595                        00            .byte	0
06058 1596                        00            .byte	0
06059 1597                        00            .byte	0
06060                                           ! 909  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06061 1598                        00            .byte	0
06062 1599                        00            .byte	0
06063 159A                        FF            .byte	$FF
06064 159B                        00            .byte	0
06065 159C                        F7            .byte	$F7
06066 159D                        36            .byte	$36
06067 159E                        36            .byte	$36
06068 159F                        36            .byte	$36
06069                                           ! 910  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06070 15A0                        36            .byte	$36
06071 15A1                        36            .byte	$36
06072 15A2                        37            .byte	$37
06073 15A3                        30            .byte	$30
06074 15A4                        37            .byte	$37
06075 15A5                        36            .byte	$36
06076 15A6                        36            .byte	$36
06077 15A7                        36            .byte	$36
06078                                           ! 911  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06079 15A8                        00            .byte	0
06080 15A9                        00            .byte	0
06081 15AA                        FF            .byte	$FF
06082 15AB                        00            .byte	0
06083 15AC                        FF            .byte	$FF
06084 15AD                        00            .byte	0
06085 15AE                        00            .byte	0
06086 15AF                        00            .byte	0
06087                                           ! 912  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06088 15B0                        36            .byte	$36
06089 15B1                        36            .byte	$36
06090 15B2                        F7            .byte	$F7
06091 15B3                        00            .byte	0
06092 15B4                        F7            .byte	$F7
06093 15B5                        36            .byte	$36
06094 15B6                        36            .byte	$36
06095 15B7                        36            .byte	$36
06096                                           ! 913  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06097 15B8                        18            .byte	$18
06098 15B9                        18            .byte	$18
06099 15BA                        FF            .byte	$FF
06100 15BB                        00            .byte	0
06101 15BC                        FF            .byte	$FF
06102 15BD                        00            .byte	0
06103 15BE                        00            .byte	0
06104 15BF                        00            .byte	0
06105                                           ! 914  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06106 15C0                        36            .byte	$36
06107 15C1                        36            .byte	$36
06108 15C2                        36            .byte	$36
06109 15C3                        36            .byte	$36
06110 15C4                        FF            .byte	$FF
06111 15C5                        00            .byte	0
06112 15C6                        00            .byte	0
06113 15C7                        00            .byte	0
06114                                           ! 915  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06115 15C8                        00            .byte	0
06116 15C9                        00            .byte	0
06117 15CA                        FF            .byte	$FF
06118 15CB                        00            .byte	0
06119 15CC                        FF            .byte	$FF
06120 15CD                        18            .byte	$18
06121 15CE                        18            .byte	$18
06122 15CF                        18            .byte	$18
06123                                           ! 916  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06124 15D0                        00            .byte	0
06125 15D1                        00            .byte	0
06126 15D2                        00            .byte	0
06127 15D3                        00            .byte	0
06128 15D4                        FF            .byte	$FF
06129 15D5                        36            .byte	$36
06130 15D6                        36            .byte	$36
06131 15D7                        36            .byte	$36
06132                                           ! 917  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06133 15D8                        36            .byte	$36
06134 15D9                        36            .byte	$36
06135 15DA                        36            .byte	$36
06136 15DB                        36            .byte	$36
06137 15DC                        3F            .byte	$3F
06138 15DD                        00            .byte	0
06139 15DE                        00            .byte	0
06140 15DF                        00            .byte	0
06141                                           ! 918  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06142 15E0                        18            .byte	$18
06143 15E1                        18            .byte	$18
06144 15E2                        1F            .byte	$1F
06145 15E3                        18            .byte	$18
06146 15E4                        1F            .byte	$1F
06147 15E5                        00            .byte	0
06148 15E6                        00            .byte	0
06149 15E7                        00            .byte	0
06150                                           ! 919  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06151 15E8                        00            .byte	0
06152 15E9                        00            .byte	0
06153 15EA                        1F            .byte	$1F
06154 15EB                        18            .byte	$18
06155 15EC                        1F            .byte	$1F
06156 15ED                        18            .byte	$18
06157 15EE                        18            .byte	$18
06158 15EF                        18            .byte	$18
06159                                           ! 920  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06160 15F0                        00            .byte	0
06161 15F1                        00            .byte	0
06162 15F2                        00            .byte	0
06163 15F3                        00            .byte	0
06164 15F4                        3F            .byte	$3F
06165 15F5                        36            .byte	$36
06166 15F6                        36            .byte	$36
06167 15F7                        36            .byte	$36
06168                                           ! 921  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06169 15F8                        36            .byte	$36
06170 15F9                        36            .byte	$36
06171 15FA                        36            .byte	$36
06172 15FB                        36            .byte	$36
06173 15FC                        FF            .byte	$FF
06174 15FD                        36            .byte	$36
06175 15FE                        36            .byte	$36
06176 15FF                        36            .byte	$36
06177                                           ! 922  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06178 1600                        18            .byte	$18
06179 1601                        18            .byte	$18
06180 1602                        FF            .byte	$FF
06181 1603                        18            .byte	$18
06182 1604                        FF            .byte	$FF
06183 1605                        18            .byte	$18
06184 1606                        18            .byte	$18
06185 1607                        18            .byte	$18
06186                                           ! 923  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06187 1608                        18            .byte	$18
06188 1609                        18            .byte	$18
06189 160A                        18            .byte	$18
06190 160B                        18            .byte	$18
06191 160C                        F8            .byte	$F8
06192 160D                        00            .byte	0
06193 160E                        00            .byte	0
06194 160F                        00            .byte	0
06195                                           ! 924  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06196 1610                        00            .byte	0
06197 1611                        00            .byte	0
06198 1612                        00            .byte	0
06199 1613                        00            .byte	0
06200 1614                        1F            .byte	$1F
06201 1615                        18            .byte	$18
06202 1616                        18            .byte	$18
06203 1617                        18            .byte	$18
06204                                           ! 925  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06205 1618                        FF            .byte	$FF
06206 1619                        FF            .byte	$FF
06207 161A                        FF            .byte	$FF
06208 161B                        FF            .byte	$FF
06209 161C                        FF            .byte	$FF
06210 161D                        FF            .byte	$FF
06211 161E                        FF            .byte	$FF
06212 161F                        FF            .byte	$FF
06213                                           ! 926  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06214 1620                        00            .byte	0
06215 1621                        00            .byte	0
06216 1622                        00            .byte	0
06217 1623                        00            .byte	0
06218 1624                        FF            .byte	$FF
06219 1625                        FF            .byte	$FF
06220 1626                        FF            .byte	$FF
06221 1627                        FF            .byte	$FF
06222                                           ! 927  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06223 1628                        F0            .byte	$F0
06224 1629                        F0            .byte	$F0
06225 162A                        F0            .byte	$F0
06226 162B                        F0            .byte	$F0
06227 162C                        F0            .byte	$F0
06228 162D                        F0            .byte	$F0
06229 162E                        F0            .byte	$F0
06230 162F                        F0            .byte	$F0
06231                                           ! 928  0
06232                                           ! 928 x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06233 1630                        0F            .byte	$F
06234 1631                        0F            .byte	$F
06235 1632                        0F            .byte	$F
06236 1633                        0F            .byte	$F
06237 1634                        0F            .byte	$F
06238 1635                        0F            .byte	$F
06239 1636                        0F            .byte	$F
06240 1637                        0F            .byte	$F
06241                                           ! 929  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06242 1638                        FF            .byte	$FF
06243 1639                        FF            .byte	$FF
06244 163A                        FF            .byte	$FF
06245 163B                        FF            .byte	$FF
06246 163C                        00            .byte	0
06247 163D                        00            .byte	0
06248 163E                        00            .byte	0
06249 163F                        00            .byte	0
06250                                           ! 930  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06251 1640                        00            .byte	0
06252 1641                        00            .byte	0
06253 1642                        76            .byte	$76
06254 1643                        DC            .byte	$DC
06255 1644                        C8            .byte	$C8
06256 1645                        DC            .byte	$DC
06257 1646                        76            .byte	$76
06258 1647                        00            .byte	0
06259                                           ! 931  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06260 1648                        00            .byte	0
06261 1649                        78            .byte	$78
06262 164A                        CC            .byte	$CC
06263 164B                        F8            .byte	$F8
06264 164C                        CC            .byte	$CC
06265 164D                        F8            .byte	$F8
06266 164E                        C0            .byte	$C0
06267 164F                        C0            .byte	$C0
06268                                           ! 932  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06269 1650                        00            .byte	0
06270 1651                        FC            .byte	$FC
06271 1652                        CC            .byte	$CC
06272 1653                        C0            .byte	$C0
06273 1654                        C0            .byte	$C0
06274 1655                        C0            .byte	$C0
06275 1656                        C0            .byte	$C0
06276 1657                        00            .byte	0
06277                                           ! 933  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06278 1658                        00            .byte	0
06279 1659                        FE            .byte	$FE
06280 165A                        6C            .byte	$6C
06281 165B                        6C            .byte	$6C
06282 165C                        6C            .byte	$6C
06283 165D                        6C            .byte	$6C
06284 165E                        6C            .byte	$6C
06285 165F                        00            .byte	0
06286                                           ! 934  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06287 1660                        FC            .byte	$FC
06288 1661                        CC            .byte	$CC
06289 1662                        60            .byte	$60
06290 1663                        30            .byte	$30
06291 1664                        60            .byte	$60
06292 1665                        CC            .byte	$CC
06293 1666                        FC            .byte	$FC
06294 1667                        00            .byte	0
06295                                           ! 935  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06296 1668                        00            .byte	0
06297 1669                        00            .byte	0
06298 166A                        7E            .byte	$7E
06299 166B                        D8            .byte	$D8
06300 166C                        D8            .byte	$D8
06301 166D                        D8            .byte	$D8
06302 166E                        70            .byte	$70
06303 166F                        00            .byte	0
06304                                           ! 936  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06305 1670                        00            .byte	0
06306 1671                        66            .byte	$66
06307 1672                        66            .byte	$66
06308 1673                        66            .byte	$66
06309 1674                        66            .byte	$66
06310 1675                        7C            .byte	$7C
06311 1676                        60            .byte	$60
06312 1677                        C0            .byte	$C0
06313                                           ! 937  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06314 1678                        00            .byte	0
06315 1679                        76            .byte	$76
06316 167A                        DC            .byte	$DC
06317 167B                        18            .byte	$18
06318 167C                        18            .byte	$18
06319 167D                        18            .byte	$18
06320 167E                        18            .byte	$18
06321 167F                        00            .byte	0
06322                                           ! 938  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06323 1680                        FC            .byte	$FC
06324 1681                        30            .byte	$30
06325 1682                        78            .byte	$78
06326 1683                        CC            .byte	$CC
06327 1684                        CC            .byte	$CC
06328 1685                        78            .byte	$78
06329 1686                        30            .byte	$30
06330 1687                        FC            .byte	$FC
06331                                           ! 939  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06332 1688                        38            .byte	$38
06333 1689                        6C            .byte	$6C
06334 168A                        C6            .byte	$C6
06335 168B                        FE            .byte	$FE
06336 168C                        C6            .byte	$C6
06337 168D                        6C            .byte	$6C
06338 168E                        38            .byte	$38
06339 168F                        00            .byte	0
06340                                           ! 940  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06341 1690                        38            .byte	$38
06342 1691                        6C            .byte	$6C
06343 1692                        C6            .byte	$C6
06344 1693                        C6            .byte	$C6
06345 1694                        6C            .byte	$6C
06346 1695                        6C            .byte	$6C
06347 1696                        EE            .byte	$EE
06348 1697                        00            .byte	0
06349                                           ! 941  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06350 1698                        1C            .byte	$1C
06351 1699                        30            .byte	$30
06352 169A                        18            .byte	$18
06353 169B                        7C            .byte	$7C
06354 169C                        CC            .byte	$CC
06355 169D                        CC            .byte	$CC
06356 169E                        78            .byte	$78
06357 169F                        00            .byte	0
06358                                           ! 942  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06359 16A0                        00            .byte	0
06360 16A1                        00            .byte	0
06361 16A2                        7E            .byte	$7E
06362 16A3                        DB            .byte	$DB
06363 16A4                        DB            .byte	$DB
06364 16A5                        7E            .byte	$7E
06365 16A6                        00            .byte	0
06366 16A7                        00            .byte	0
06367                                           ! 943  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06368 16A8                        06            .byte	6
06369 16A9                        0C            .byte	$C
06370 16AA                        7E            .byte	$7E
06371 16AB                        DB            .byte	$DB
06372 16AC                        DB            .byte	$DB
06373 16AD                        7E            .byte	$7E
06374 16AE                        60            .byte	$60
06375 16AF                        C0            .byte	$C0
06376                                           ! 944  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06377 16B0                        38            .byte	$38
06378 16B1                        60            .byte	$60
06379 16B2                        C0            .byte	$C0
06380 16B3                        F8            .byte	$F8
06381 16B4                        C0            .byte	$C0
06382 16B5                        60            .byte	$60
06383 16B6                        38            .byte	$38
06384 16B7                        00            .byte	0
06385                                           ! 945  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06386 16B8                        78            .byte	$78
06387 16B9                        CC            .byte	$CC
06388 16BA                        CC            .byte	$CC
06389 16BB                        CC            .byte	$CC
06390 16BC                        CC            .byte	$CC
06391 16BD                        CC            .byte	$CC
06392 16BE                        CC            .byte	$CC
06393 16BF                        00            .byte	0
06394                                           ! 946  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06395 16C0                        00            .byte	0
06396 16C1                        FC            .byte	$FC
06397 16C2                        00            .byte	0
06398 16C3                        FC            .byte	$FC
06399 16C4                        00            .byte	0
06400 16C5                        FC            .byte	$FC
06401 16C6                        00            .byte	0
06402 16C7                        00            .byte	0
06403                                           ! 947  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06404 16C8                        30            .byte	$30
06405 16C9                        30            .byte	$30
06406 16CA                        FC            .byte	$FC
06407 16CB                        30            .byte	$30
06408 16CC                        30            .byte	$30
06409 16CD                        00            .byte	0
06410 16CE                        FC            .byte	$FC
06411 16CF                        00            .byte	0
06412                                           ! 948  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06413 16D0                        60            .byte	$60
06414 16D1                        30            .byte	$30
06415 16D2                        18            .byte	$18
06416 16D3                        30            .byte	$30
06417 16D4                        60            .byte	$60
06418 16D5                        00            .byte	0
06419 16D6                        FC            .byte	$FC
06420 16D7                        00            .byte	0
06421                                           ! 949  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06422 16D8                        18            .byte	$18
06423 16D9                        30            .byte	$30
06424 16DA                        60            .byte	$60
06425 16DB                        30            .byte	$30
06426 16DC                        18            .byte	$18
06427 16DD                        00            .byte	0
06428 16DE                        FC            .byte	$FC
06429 16DF                        00            .byte	0
06430                                           ! 950  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06431 16E0                        0E            .byte	$E
06432 16E1                        1B            .byte	$1B
06433 16E2                        1B            .byte	$1B
06434 16E3                        18            .byte	$18
06435 16E4                        18            .byte	$18
06436 16E5                        18            .byte	$18
06437 16E6                        18            .byte	$18
06438 16E7                        18            .byte	$18
06439                                           ! 951  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06440 16E8                        18            .byte	$18
06441 16E9                        18            .byte	$18
06442 16EA                        18            .byte	$18
06443 16EB                        18            .byte	$18
06444 16EC                        18            .byte	$18
06445 16ED                        D8            .byte	$D8
06446 16EE                        D8            .byte	$D8
06447 16EF                        70            .byte	$70
06448                                           ! 952  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06449 16F0                        30            .byte	$30
06450 16F1                        30            .byte	$30
06451 16F2                        00            .byte	0
06452 16F3                        FC            .byte	$FC
06453 16F4                        00            .byte	0
06454 16F5                        30            .byte	$30
06455 16F6                        30            .byte	$30
06456 16F7                        00            .byte	0
06457                                           ! 953  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06458 16F8                        00            .byte	0
06459 16F9                        76            .byte	$76
06460 16FA                        DC            .byte	$DC
06461 16FB                        00            .byte	0
06462 16FC                        76            .byte	$76
06463 16FD                        DC            .byte	$DC
06464 16FE                        00            .byte	0
06465 16FF                        00            .byte	0
06466                                           ! 954  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06467 1700                        38            .byte	$38
06468 1701                        6C            .byte	$6C
06469 1702                        6C            .byte	$6C
06470 1703                        38            .byte	$38
06471 1704                        00            .byte	0
06472 1705                        00            .byte	0
06473 1706                        00            .byte	0
06474 1707                        00            .byte	0
06475                                           ! 955  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06476 1708                        00            .byte	0
06477 1709                        00            .byte	0
06478 170A                        00            .byte	0
06479 170B                        18            .byte	$18
06480 170C                        18            .byte	$18
06481 170D                        00            .byte	0
06482 170E                        00            .byte	0
06483 170F                        00            .byte	0
06484                                           ! 956  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06485 1710                        00            .byte	0
06486 1711                        00            .byte	0
06487 1712                        00            .byte	0
06488 1713                        00            .byte	0
06489 1714                        18            .byte	$18
06490 1715                        00            .byte	0
06491 1716                        00            .byte	0
06492 1717                        00            .byte	0
06493                                           ! 957  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06494 1718                        0F            .byte	$F
06495 1719                        0C            .byte	$C
06496 171A                        0C            .byte	$C
06497 171B                        0C            .byte	$C
06498 171C                        EC            .byte	$EC
06499 171D                        6C            .byte	$6C
06500 171E                        3C            .byte	$3C
06501 171F                        1C            .byte	$1C
06502                                           ! 958  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06503 1720                        78            .byte	$78
06504 1721                        6C            .byte	$6C
06505 1722                        6C            .byte	$6C
06506 1723                        6C            .byte	$6C
06507 1724                        6C            .byte	$6C
06508 1725                        00            .byte	0
06509 1726                        00            .byte	0
06510 1727                        00            .byte	0
06511                                           ! 959  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06512 1728                        70            .byte	$70
06513 1729                        18            .byte	$18
06514 172A                        30            .byte	$30
06515 172B                        60            .byte	$60
06516 172C                        78            .byte	$78
06517 172D                        00            .byte	0
06518 172E                        00            .byte	0
06519 172F                        00            .byte	0
06520                                           ! 960  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06521 1730                        00            .byte	0
06522 1731                        00            .byte	0
06523 1732                        3C            .byte	$3C
06524 1733                        3C            .byte	$3C
06525 1734                        3C            .byte	$3C
06526 1735                        3C            .byte	$3C
06527 1736                        00            .byte	0
06528 1737                        00            .byte	0
06529                                           ! 961  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06530 1738                        00            .byte	0
06531 1739                        00            .byte	0
06532 173A                        00            .byte	0
06533 173B                        00            .byte	0
06534 173C                        00            .byte	0
06535 173D                        00            .byte	0
06536 173E                        00            .byte	0
06537                                           ! 962 };
06538 173F                        00            .byte	0
06539                                           !BCC_EOS
06540                                           ! 963 static Bit8u vgafont14[256*14]=
06541                                           ! 964 {
06542                       00001740            _vgafont14:
06543                                           ! 965  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06544 1740                        00            .byte	0
06545 1741                        00            .byte	0
06546 1742                        00            .byte	0
06547 1743                        00            .byte	0
06548 1744                        00            .byte	0
06549 1745                        00            .byte	0
06550 1746                        00            .byte	0
06551 1747                        00            .byte	0
06552 1748                        00            .byte	0
06553 1749                        00            .byte	0
06554 174A                        00            .byte	0
06555 174B                        00            .byte	0
06556 174C                        00            .byte	0
06557 174D                        00            .byte	0
06558                                           ! 966  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06559 174E                        00            .byte	0
06560 174F                        00            .byte	0
06561 1750                        7E            .byte	$7E
06562 1751                        81            .byte	$81
06563 1752                        A5            .byte	$A5
06564 1753                        81            .byte	$81
06565 1754                        81            .byte	$81
06566 1755                        BD            .byte	$BD
06567 1756                        99            .byte	$99
06568 1757                        81            .byte	$81
06569 1758                        7E            .byte	$7E
06570 1759                        00            .byte	0
06571 175A                        00            .byte	0
06572 175B                        00            .byte	0
06573                                           ! 967  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06574 175C                        00            .byte	0
06575 175D                        00            .byte	0
06576 175E                        7E            .byte	$7E
06577 175F                        FF            .byte	$FF
06578 1760                        DB            .byte	$DB
06579 1761                        FF            .byte	$FF
06580 1762                        FF            .byte	$FF
06581 1763                        C3            .byte	$C3
06582 1764                        E7            .byte	$E7
06583 1765                        FF            .byte	$FF
06584 1766                        7E            .byte	$7E
06585 1767                        00            .byte	0
06586 1768                        00            .byte	0
06587 1769                        00            .byte	0
06588                                           ! 968  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06589 176A                        00            .byte	0
06590 176B                        00            .byte	0
06591 176C                        00            .byte	0
06592 176D                        6C            .byte	$6C
06593 176E                        FE            .byte	$FE
06594 176F                        FE            .byte	$FE
06595 1770                        FE            .byte	$FE
06596 1771                        FE            .byte	$FE
06597 1772                        7C            .byte	$7C
06598 1773                        38            .byte	$38
06599 1774                        10            .byte	$10
06600 1775                        00            .byte	0
06601 1776                        00            .byte	0
06602 1777                        00            .byte	0
06603                                           ! 969  0x00, 0
06604 1778                        00            .byte	0
06605                                           ! 969 x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06606 1779                        00            .byte	0
06607 177A                        00            .byte	0
06608 177B                        10            .byte	$10
06609 177C                        38            .byte	$38
06610 177D                        7C            .byte	$7C
06611 177E                        FE            .byte	$FE
06612 177F                        7C            .byte	$7C
06613 1780                        38            .byte	$38
06614 1781                        10            .byte	$10
06615 1782                        00            .byte	0
06616 1783                        00            .byte	0
06617 1784                        00            .byte	0
06618 1785                        00            .byte	0
06619                                           ! 970  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06620 1786                        00            .byte	0
06621 1787                        00            .byte	0
06622 1788                        18            .byte	$18
06623 1789                        3C            .byte	$3C
06624 178A                        3C            .byte	$3C
06625 178B                        E7            .byte	$E7
06626 178C                        E7            .byte	$E7
06627 178D                        E7            .byte	$E7
06628 178E                        18            .byte	$18
06629 178F                        18            .byte	$18
06630 1790                        3C            .byte	$3C
06631 1791                        00            .byte	0
06632 1792                        00            .byte	0
06633 1793                        00            .byte	0
06634                                           ! 971  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06635 1794                        00            .byte	0
06636 1795                        00            .byte	0
06637 1796                        18            .byte	$18
06638 1797                        3C            .byte	$3C
06639 1798                        7E            .byte	$7E
06640 1799                        FF            .byte	$FF
06641 179A                        FF            .byte	$FF
06642 179B                        7E            .byte	$7E
06643 179C                        18            .byte	$18
06644 179D                        18            .byte	$18
06645 179E                        3C            .byte	$3C
06646 179F                        00            .byte	0
06647 17A0                        00            .byte	0
06648 17A1                        00            .byte	0
06649                                           ! 972  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06650 17A2                        00            .byte	0
06651 17A3                        00            .byte	0
06652 17A4                        00            .byte	0
06653 17A5                        00            .byte	0
06654 17A6                        00            .byte	0
06655 17A7                        18            .byte	$18
06656 17A8                        3C            .byte	$3C
06657 17A9                        3C            .byte	$3C
06658 17AA                        18            .byte	$18
06659 17AB                        00            .byte	0
06660 17AC                        00            .byte	0
06661 17AD                        00            .byte	0
06662 17AE                        00            .byte	0
06663 17AF                        00            .byte	0
06664                                           ! 973  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06665 17B0                        FF            .byte	$FF
06666 17B1                        FF            .byte	$FF
06667 17B2                        FF            .byte	$FF
06668 17B3                        FF            .byte	$FF
06669 17B4                        FF            .byte	$FF
06670 17B5                        E7            .byte	$E7
06671 17B6                        C3            .byte	$C3
06672 17B7                        C3            .byte	$C3
06673 17B8                        E7            .byte	$E7
06674 17B9                        FF            .byte	$FF
06675 17BA                        FF            .byte	$FF
06676 17BB                        FF            .byte	$FF
06677 17BC                        FF            .byte	$FF
06678 17BD                        FF            .byte	$FF
06679                                           ! 974  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06680 17BE                        00            .byte	0
06681 17BF                        00            .byte	0
06682 17C0                        00            .byte	0
06683 17C1                        00            .byte	0
06684 17C2                        3C            .byte	$3C
06685 17C3                        66            .byte	$66
06686 17C4                        42            .byte	$42
06687 17C5                        42            .byte	$42
06688 17C6                        66            .byte	$66
06689 17C7                        3C            .byte	$3C
06690 17C8                        00            .byte	0
06691 17C9                        00            .byte	0
06692 17CA                        00            .byte	0
06693 17CB                        00            .byte	0
06694                                           ! 975  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06695 17CC                        FF            .byte	$FF
06696 17CD                        FF            .byte	$FF
06697 17CE                        FF            .byte	$FF
06698 17CF                        FF            .byte	$FF
06699 17D0                        C3            .byte	$C3
06700 17D1                        99            .byte	$99
06701 17D2                        BD            .byte	$BD
06702 17D3                        BD            .byte	$BD
06703 17D4                        99            .byte	$99
06704 17D5                        C3            .byte	$C3
06705 17D6                        FF            .byte	$FF
06706 17D7                        FF            .byte	$FF
06707 17D8                        FF            .byte	$FF
06708 17D9                        FF            .byte	$FF
06709                                           ! 976  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06710 17DA                        00            .byte	0
06711 17DB                        00            .byte	0
06712 17DC                        1E            .byte	$1E
06713 17DD                        0E            .byte	$E
06714 17DE                        1A            .byte	$1A
06715 17DF                        32            .byte	$32
06716 17E0                        78            .byte	$78
06717 17E1                        CC            .byte	$CC
06718 17E2                        CC            .byte	$CC
06719 17E3                        CC            .byte	$CC
06720 17E4                        78            .byte	$78
06721 17E5                        00            .byte	0
06722 17E6                        00            .byte	0
06723 17E7                        00            .byte	0
06724                                           ! 977  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06725 17E8                        00            .byte	0
06726 17E9                        00            .byte	0
06727 17EA                        3C            .byte	$3C
06728 17EB                        66            .byte	$66
06729 17EC                        66            .byte	$66
06730 17ED                        66            .byte	$66
06731 17EE                        3C            .byte	$3C
06732 17EF                        18            .byte	$18
06733 17F0                        7E            .byte	$7E
06734 17F1                        18            .byte	$18
06735 17F2                        18            .byte	$18
06736 17F3                        00            .byte	0
06737 17F4                        00            .byte	0
06738 17F5                        00            .byte	0
06739                                           ! 978  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
06740 17F6                        00            .byte	0
06741 17F7                        00            .byte	0
06742 17F8                        3F            .byte	$3F
06743 17F9                        33            .byte	$33
06744 17FA                        3F            .byte	$3F
06745 17FB                        30            .byte	$30
06746 17FC                        30            .byte	$30
06747 17FD                        30            .byte	$30
06748 17FE                        70            .byte	$70
06749 17FF                        F0            .byte	$F0
06750 1800                        E0            .byte	$E0
06751 1801                        00            .byte	0
06752 1802                        00            .byte	0
06753 1803                        00            .byte	0
06754                                           ! 979  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
06755 1804                        00            .byte	0
06756 1805                        00            .byte	0
06757 1806                        7F            .byte	$7F
06758 1807                        63            .byte	$63
06759 1808                        7F            .byte	$7F
06760 1809                        63            .byte	$63
06761 180A                        63            .byte	$63
06762 180B                        63            .byte	$63
06763 180C                        67            .byte	$67
06764 180D                        E7            .byte	$E7
06765 180E                        E6            .byte	$E6
06766 180F                        C0            .byte	$C0
06767 1810                        00            .byte	0
06768 1811                        00            .byte	0
06769                                           ! 980  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
06770 1812                        00            .byte	0
06771 1813                        00            .byte	0
06772 1814                        18            .byte	$18
06773 1815                        18            .byte	$18
06774 1816                        DB            .byte	$DB
06775 1817                        3C            .byte	$3C
06776 1818                        E7            .byte	$E7
06777 1819                        3C            .byte	$3C
06778 181A                        DB            .byte	$DB
06779 181B                        18            .byte	$18
06780 181C                        18            .byte	$18
06781 181D                        00            .byte	0
06782 181E                        00            .byte	0
06783 181F                        00            .byte	0
06784                                           ! 981  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
06785 1820                        00            .byte	0
06786 1821                        00            .byte	0
06787 1822                        80            .byte	$80
06788 1823                        C0            .byte	$C0
06789 1824                        E0            .byte	$E0
06790 1825                        F8            .byte	$F8
06791 1826                        FE            .byte	$FE
06792 1827                        F8            .byte	$F8
06793 1828                        E0            .byte	$E0
06794 1829                        C0            .byte	$C0
06795 182A                        80            .byte	$80
06796 182B                        00            .byte	0
06797 182C                        00            .byte	0
06798 182D                        00            .byte	0
06799                                           ! 982  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
06800 182E                        00            .byte	0
06801 182F                        00            .byte	0
06802 1830                        02            .byte	2
06803 1831                        06            .byte	6
06804 1832                        0E            .byte	$E
06805 1833                        3E            .byte	$3E
06806 1834                        FE            .byte	$FE
06807 1835                        3E            .byte	$3E
06808 1836                        0E            .byte	$E
06809 1837                        06            .byte	6
06810 1838                        02            .byte	2
06811 1839                        00            .byte	0
06812 183A                        00            .byte	0
06813 183B                        00            .byte	0
06814                                           ! 983  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06815 183C                        00            .byte	0
06816 183D                        00            .byte	0
06817 183E                        18            .byte	$18
06818 183F                        3C            .byte	$3C
06819 1840                        7E            .byte	$7E
06820 1841                        18            .byte	$18
06821 1842                        18            .byte	$18
06822 1843                        18            .byte	$18
06823 1844                        7E            .byte	$7E
06824 1845                        3C            .byte	$3C
06825 1846                        18            .byte	$18
06826 1847                        00            .byte	0
06827 1848                        00            .byte	0
06828 1849                        00            .byte	0
06829                                           ! 984  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
06830 184A                        00            .byte	0
06831 184B                        00            .byte	0
06832 184C                        66            .byte	$66
06833 184D                        66            .byte	$66
06834 184E                        66            .byte	$66
06835 184F                        66            .byte	$66
06836 1850                        66            .byte	$66
06837 1851                        66            .byte	$66
06838 1852                        00            .byte	0
06839 1853                        66            .byte	$66
06840 1854                        66            .byte	$66
06841 1855                        00            .byte	0
06842 1856                        00            .byte	0
06843 1857                        00            .byte	0
06844                                           ! 985  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
06845 1858                        00            .byte	0
06846 1859                        00            .byte	0
06847 185A                        7F            .byte	$7F
06848 185B                        DB            .byte	$DB
06849 185C                        DB            .byte	$DB
06850 185D                        DB            .byte	$DB
06851 185E                        7B            .byte	$7B
06852 185F                        1B            .byte	$1B
06853 1860                        1B            .byte	$1B
06854 1861                        1B            .byte	$1B
06855 1862                        1B            .byte	$1B
06856 1863                        00            .byte	0
06857 1864                        00            .byte	0
06858 1865                        00            .byte	0
06859                                           ! 986  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
06860 1866                        00            .byte	0
06861 1867                        7C            .byte	$7C
06862 1868                        C6            .byte	$C6
06863 1869                        60            .byte	$60
06864 186A                        38            .byte	$38
06865 186B                        6C            .byte	$6C
06866 186C                        C6            .byte	$C6
06867 186D                        C6            .byte	$C6
06868 186E                        6C            .byte	$6C
06869 186F                        38            .byte	$38
06870 1870                        0C            .byte	$C
06871 1871                        C6            .byte	$C6
06872 1872                        7C            .byte	$7C
06873 1873                        00            .byte	0
06874                                           ! 987  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
06875 1874                        00            .byte	0
06876 1875                        00            .byte	0
06877 1876                        00            .byte	0
06878 1877                        00            .byte	0
06879 1878                        00            .byte	0
06880 1879                        00            .byte	0
06881 187A                        00            .byte	0
06882 187B                        00            .byte	0
06883 187C                        FE            .byte	$FE
06884 187D                        FE            .byte	$FE
06885 187E                        FE            .byte	$FE
06886 187F                        00            .byte	0
06887 1880                        00            .byte	0
06888 1881                        00            .byte	0
06889                                           ! 988  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
06890 1882                        00            .byte	0
06891 1883                        00            .byte	0
06892 1884                        18            .byte	$18
06893 1885                        3C            .byte	$3C
06894 1886                        7E            .byte	$7E
06895 1887                        18            .byte	$18
06896 1888                        18            .byte	$18
06897 1889                        18            .byte	$18
06898 188A                        7E            .byte	$7E
06899 188B                        3C            .byte	$3C
06900 188C                        18            .byte	$18
06901 188D                        7E            .byte	$7E
06902 188E                        00            .byte	0
06903 188F                        00            .byte	0
06904                                           ! 989  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
06905 1890                        00            .byte	0
06906 1891                        00            .byte	0
06907 1892                        18            .byte	$18
06908 1893                        3C            .byte	$3C
06909 1894                        7E            .byte	$7E
06910 1895                        18            .byte	$18
06911 1896                        18            .byte	$18
06912 1897                        18            .byte	$18
06913 1898                        18            .byte	$18
06914 1899                        18            .byte	$18
06915 189A                        18            .byte	$18
06916 189B                        00            .byte	0
06917 189C                        00            .byte	0
06918 189D                        00            .byte	0
06919                                           ! 990  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06920 189E                        00            .byte	0
06921 189F                        00            .byte	0
06922 18A0                        18            .byte	$18
06923 18A1                        18            .byte	$18
06924 18A2                        18            .byte	$18
06925 18A3                        18            .byte	$18
06926 18A4                        18            .byte	$18
06927 18A5                        18            .byte	$18
06928 18A6                        7E            .byte	$7E
06929 18A7                        3C            .byte	$3C
06930 18A8                        18            .byte	$18
06931 18A9                        00            .byte	0
06932 18AA                        00            .byte	0
06933 18AB                        00            .byte	0
06934                                           ! 991  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06935 18AC                        00            .byte	0
06936 18AD                        00            .byte	0
06937 18AE                        00            .byte	0
06938 18AF                        00            .byte	0
06939 18B0                        18            .byte	$18
06940 18B1                        0C            .byte	$C
06941 18B2                        FE            .byte	$FE
06942 18B3                        0C            .byte	$C
06943 18B4                        18            .byte	$18
06944 18B5                        00            .byte	0
06945 18B6                        00            .byte	0
06946 18B7                        00            .byte	0
06947 18B8                        00            .byte	0
06948 18B9                        00            .byte	0
06949                                           ! 992  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
06950 18BA                        00            .byte	0
06951 18BB                        00            .byte	0
06952 18BC                        00            .byte	0
06953 18BD                        00            .byte	0
06954 18BE                        30            .byte	$30
06955 18BF                        60            .byte	$60
06956 18C0                        FE            .byte	$FE
06957 18C1                        60            .byte	$60
06958 18C2                        30            .byte	$30
06959 18C3                        00            .byte	0
06960 18C4                        00            .byte	0
06961 18C5                        00            .byte	0
06962 18C6                        00            .byte	0
06963 18C7                        00            .byte	0
06964                                           ! 993  0x00, 0x00, 0x0
06965 18C8                        00            .byte	0
06966 18C9                        00            .byte	0
06967                                           ! 993 0, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
06968 18CA                        00            .byte	0
06969 18CB                        00            .byte	0
06970 18CC                        00            .byte	0
06971 18CD                        C0            .byte	$C0
06972 18CE                        C0            .byte	$C0
06973 18CF                        C0            .byte	$C0
06974 18D0                        FE            .byte	$FE
06975 18D1                        00            .byte	0
06976 18D2                        00            .byte	0
06977 18D3                        00            .byte	0
06978 18D4                        00            .byte	0
06979 18D5                        00            .byte	0
06980                                           ! 994  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
06981 18D6                        00            .byte	0
06982 18D7                        00            .byte	0
06983 18D8                        00            .byte	0
06984 18D9                        00            .byte	0
06985 18DA                        28            .byte	$28
06986 18DB                        6C            .byte	$6C
06987 18DC                        FE            .byte	$FE
06988 18DD                        6C            .byte	$6C
06989 18DE                        28            .byte	$28
06990 18DF                        00            .byte	0
06991 18E0                        00            .byte	0
06992 18E1                        00            .byte	0
06993 18E2                        00            .byte	0
06994 18E3                        00            .byte	0
06995                                           ! 995  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
06996 18E4                        00            .byte	0
06997 18E5                        00            .byte	0
06998 18E6                        00            .byte	0
06999 18E7                        10            .byte	$10
07000 18E8                        38            .byte	$38
07001 18E9                        38            .byte	$38
07002 18EA                        7C            .byte	$7C
07003 18EB                        7C            .byte	$7C
07004 18EC                        FE            .byte	$FE
07005 18ED                        FE            .byte	$FE
07006 18EE                        00            .byte	0
07007 18EF                        00            .byte	0
07008 18F0                        00            .byte	0
07009 18F1                        00            .byte	0
07010                                           ! 996  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07011 18F2                        00            .byte	0
07012 18F3                        00            .byte	0
07013 18F4                        00            .byte	0
07014 18F5                        FE            .byte	$FE
07015 18F6                        FE            .byte	$FE
07016 18F7                        7C            .byte	$7C
07017 18F8                        7C            .byte	$7C
07018 18F9                        38            .byte	$38
07019 18FA                        38            .byte	$38
07020 18FB                        10            .byte	$10
07021 18FC                        00            .byte	0
07022 18FD                        00            .byte	0
07023 18FE                        00            .byte	0
07024 18FF                        00            .byte	0
07025                                           ! 997  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07026 1900                        00            .byte	0
07027 1901                        00            .byte	0
07028 1902                        00            .byte	0
07029 1903                        00            .byte	0
07030 1904                        00            .byte	0
07031 1905                        00            .byte	0
07032 1906                        00            .byte	0
07033 1907                        00            .byte	0
07034 1908                        00            .byte	0
07035 1909                        00            .byte	0
07036 190A                        00            .byte	0
07037 190B                        00            .byte	0
07038 190C                        00            .byte	0
07039 190D                        00            .byte	0
07040                                           ! 998  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07041 190E                        00            .byte	0
07042 190F                        00            .byte	0
07043 1910                        18            .byte	$18
07044 1911                        3C            .byte	$3C
07045 1912                        3C            .byte	$3C
07046 1913                        3C            .byte	$3C
07047 1914                        18            .byte	$18
07048 1915                        18            .byte	$18
07049 1916                        00            .byte	0
07050 1917                        18            .byte	$18
07051 1918                        18            .byte	$18
07052 1919                        00            .byte	0
07053 191A                        00            .byte	0
07054 191B                        00            .byte	0
07055                                           ! 999  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07056 191C                        00            .byte	0
07057 191D                        66            .byte	$66
07058 191E                        66            .byte	$66
07059 191F                        66            .byte	$66
07060 1920                        24            .byte	$24
07061 1921                        00            .byte	0
07062 1922                        00            .byte	0
07063 1923                        00            .byte	0
07064 1924                        00            .byte	0
07065 1925                        00            .byte	0
07066 1926                        00            .byte	0
07067 1927                        00            .byte	0
07068 1928                        00            .byte	0
07069 1929                        00            .byte	0
07070                                           ! 1000  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07071 192A                        00            .byte	0
07072 192B                        00            .byte	0
07073 192C                        6C            .byte	$6C
07074 192D                        6C            .byte	$6C
07075 192E                        FE            .byte	$FE
07076 192F                        6C            .byte	$6C
07077 1930                        6C            .byte	$6C
07078 1931                        6C            .byte	$6C
07079 1932                        FE            .byte	$FE
07080 1933                        6C            .byte	$6C
07081 1934                        6C            .byte	$6C
07082 1935                        00            .byte	0
07083 1936                        00            .byte	0
07084 1937                        00            .byte	0
07085                                           ! 1001  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07086 1938                        18            .byte	$18
07087 1939                        18            .byte	$18
07088 193A                        7C            .byte	$7C
07089 193B                        C6            .byte	$C6
07090 193C                        C2            .byte	$C2
07091 193D                        C0            .byte	$C0
07092 193E                        7C            .byte	$7C
07093 193F                        06            .byte	6
07094 1940                        86            .byte	$86
07095 1941                        C6            .byte	$C6
07096 1942                        7C            .byte	$7C
07097 1943                        18            .byte	$18
07098 1944                        18            .byte	$18
07099 1945                        00            .byte	0
07100                                           ! 1002  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07101 1946                        00            .byte	0
07102 1947                        00            .byte	0
07103 1948                        00            .byte	0
07104 1949                        00            .byte	0
07105 194A                        C2            .byte	$C2
07106 194B                        C6            .byte	$C6
07107 194C                        0C            .byte	$C
07108 194D                        18            .byte	$18
07109 194E                        30            .byte	$30
07110 194F                        66            .byte	$66
07111 1950                        C6            .byte	$C6
07112 1951                        00            .byte	0
07113 1952                        00            .byte	0
07114 1953                        00            .byte	0
07115                                           ! 1003  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07116 1954                        00            .byte	0
07117 1955                        00            .byte	0
07118 1956                        38            .byte	$38
07119 1957                        6C            .byte	$6C
07120 1958                        6C            .byte	$6C
07121 1959                        38            .byte	$38
07122 195A                        76            .byte	$76
07123 195B                        DC            .byte	$DC
07124 195C                        CC            .byte	$CC
07125 195D                        CC            .byte	$CC
07126 195E                        76            .byte	$76
07127 195F                        00            .byte	0
07128 1960                        00            .byte	0
07129 1961                        00            .byte	0
07130                                           ! 1004  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07131 1962                        00            .byte	0
07132 1963                        30            .byte	$30
07133 1964                        30            .byte	$30
07134 1965                        30            .byte	$30
07135 1966                        60            .byte	$60
07136 1967                        00            .byte	0
07137 1968                        00            .byte	0
07138 1969                        00            .byte	0
07139 196A                        00            .byte	0
07140 196B                        00            .byte	0
07141 196C                        00            .byte	0
07142 196D                        00            .byte	0
07143 196E                        00            .byte	0
07144 196F                        00            .byte	0
07145                                           ! 1005  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07146 1970                        00            .byte	0
07147 1971                        00            .byte	0
07148 1972                        0C            .byte	$C
07149 1973                        18            .byte	$18
07150 1974                        30            .byte	$30
07151 1975                        30            .byte	$30
07152 1976                        30            .byte	$30
07153 1977                        30            .byte	$30
07154 1978                        30            .byte	$30
07155 1979                        18            .byte	$18
07156 197A                        0C            .byte	$C
07157 197B                        00            .byte	0
07158 197C                        00            .byte	0
07159 197D                        00            .byte	0
07160                                           ! 1006  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07161 197E                        00            .byte	0
07162 197F                        00            .byte	0
07163 1980                        30            .byte	$30
07164 1981                        18            .byte	$18
07165 1982                        0C            .byte	$C
07166 1983                        0C            .byte	$C
07167 1984                        0C            .byte	$C
07168 1985                        0C            .byte	$C
07169 1986                        0C            .byte	$C
07170 1987                        18            .byte	$18
07171 1988                        30            .byte	$30
07172 1989                        00            .byte	0
07173 198A                        00            .byte	0
07174 198B                        00            .byte	0
07175                                           ! 1007  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07176 198C                        00            .byte	0
07177 198D                        00            .byte	0
07178 198E                        00            .byte	0
07179 198F                        00            .byte	0
07180 1990                        66            .byte	$66
07181 1991                        3C            .byte	$3C
07182 1992                        FF            .byte	$FF
07183 1993                        3C            .byte	$3C
07184 1994                        66            .byte	$66
07185 1995                        00            .byte	0
07186 1996                        00            .byte	0
07187 1997                        00            .byte	0
07188 1998                        00            .byte	0
07189 1999                        00            .byte	0
07190                                           ! 1008  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07191 199A                        00            .byte	0
07192 199B                        00            .byte	0
07193 199C                        00            .byte	0
07194 199D                        00            .byte	0
07195 199E                        18            .byte	$18
07196 199F                        18            .byte	$18
07197 19A0                        7E            .byte	$7E
07198 19A1                        18            .byte	$18
07199 19A2                        18            .byte	$18
07200 19A3                        00            .byte	0
07201 19A4                        00            .byte	0
07202 19A5                        00            .byte	0
07203 19A6                        00            .byte	0
07204 19A7                        00            .byte	0
07205                                           ! 1009  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07206 19A8                        00            .byte	0
07207 19A9                        00            .byte	0
07208 19AA                        00            .byte	0
07209 19AB                        00            .byte	0
07210 19AC                        00            .byte	0
07211 19AD                        00            .byte	0
07212 19AE                        00            .byte	0
07213 19AF                        00            .byte	0
07214 19B0                        18            .byte	$18
07215 19B1                        18            .byte	$18
07216 19B2                        18            .byte	$18
07217 19B3                        30            .byte	$30
07218 19B4                        00            .byte	0
07219 19B5                        00            .byte	0
07220                                           ! 1010  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07221 19B6                        00            .byte	0
07222 19B7                        00            .byte	0
07223 19B8                        00            .byte	0
07224 19B9                        00            .byte	0
07225 19BA                        00            .byte	0
07226 19BB                        00            .byte	0
07227 19BC                        FE            .byte	$FE
07228 19BD                        00            .byte	0
07229 19BE                        00            .byte	0
07230 19BF                        00            .byte	0
07231 19C0                        00            .byte	0
07232 19C1                        00            .byte	0
07233 19C2                        00            .byte	0
07234 19C3                        00            .byte	0
07235                                           ! 1011  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07236 19C4                        00            .byte	0
07237 19C5                        00            .byte	0
07238 19C6                        00            .byte	0
07239 19C7                        00            .byte	0
07240 19C8                        00            .byte	0
07241 19C9                        00            .byte	0
07242 19CA                        00            .byte	0
07243 19CB                        00            .byte	0
07244 19CC                        00            .byte	0
07245 19CD                        18            .byte	$18
07246 19CE                        18            .byte	$18
07247 19CF                        00            .byte	0
07248 19D0                        00            .byte	0
07249 19D1                        00            .byte	0
07250                                           ! 1012  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07251 19D2                        00            .byte	0
07252 19D3                        00            .byte	0
07253 19D4                        02            .byte	2
07254 19D5                        06            .byte	6
07255 19D6                        0C            .byte	$C
07256 19D7                        18            .byte	$18
07257 19D8                        30            .byte	$30
07258 19D9                        60            .byte	$60
07259 19DA                        C0            .byte	$C0
07260 19DB                        80            .byte	$80
07261 19DC                        00            .byte	0
07262 19DD                        00            .byte	0
07263 19DE                        00            .byte	0
07264 19DF                        00            .byte	0
07265                                           ! 1013  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07266 19E0                        00            .byte	0
07267 19E1                        00            .byte	0
07268 19E2                        7C            .byte	$7C
07269 19E3                        C6            .byte	$C6
07270 19E4                        CE            .byte	$CE
07271 19E5                        DE            .byte	$DE
07272 19E6                        F6            .byte	$F6
07273 19E7                        E6            .byte	$E6
07274 19E8                        C6            .byte	$C6
07275 19E9                        C6            .byte	$C6
07276 19EA                        7C            .byte	$7C
07277 19EB                        00            .byte	0
07278 19EC                        00            .byte	0
07279 19ED                        00            .byte	0
07280                                           ! 1014  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07281 19EE                        00            .byte	0
07282 19EF                        00            .byte	0
07283 19F0                        18            .byte	$18
07284 19F1                        38            .byte	$38
07285 19F2                        78            .byte	$78
07286 19F3                        18            .byte	$18
07287 19F4                        18            .byte	$18
07288 19F5                        18            .byte	$18
07289 19F6                        18            .byte	$18
07290 19F7                        18            .byte	$18
07291 19F8                        7E            .byte	$7E
07292 19F9                        00            .byte	0
07293 19FA                        00            .byte	0
07294 19FB                        00            .byte	0
07295                                           ! 1015  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07296 19FC                        00            .byte	0
07297 19FD                        00            .byte	0
07298 19FE                        7C            .byte	$7C
07299 19FF                        C6            .byte	$C6
07300 1A00                        06            .byte	6
07301 1A01                        0C            .byte	$C
07302 1A02                        18            .byte	$18
07303 1A03                        30            .byte	$30
07304 1A04                        60            .byte	$60
07305 1A05                        C6            .byte	$C6
07306 1A06                        FE            .byte	$FE
07307 1A07                        00            .byte	0
07308 1A08                        00            .byte	0
07309 1A09                        00            .byte	0
07310                                           ! 1016  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07311 1A0A                        00            .byte	0
07312 1A0B                        00            .byte	0
07313 1A0C                        7C            .byte	$7C
07314 1A0D                        C6            .byte	$C6
07315 1A0E                        06            .byte	6
07316 1A0F                        06            .byte	6
07317 1A10                        3C            .byte	$3C
07318 1A11                        06            .byte	6
07319 1A12                        06            .byte	6
07320 1A13                        C6            .byte	$C6
07321 1A14                        7C            .byte	$7C
07322 1A15                        00            .byte	0
07323 1A16                        00            .byte	0
07324 1A17                        00            .byte	0
07325                                           ! 1017  0x00, 0x00, 0x0c, 0x1c,
07326 1A18                        00            .byte	0
07327 1A19                        00            .byte	0
07328 1A1A                        0C            .byte	$C
07329                                           ! 1017  0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07330 1A1B                        1C            .byte	$1C
07331 1A1C                        3C            .byte	$3C
07332 1A1D                        6C            .byte	$6C
07333 1A1E                        CC            .byte	$CC
07334 1A1F                        FE            .byte	$FE
07335 1A20                        0C            .byte	$C
07336 1A21                        0C            .byte	$C
07337 1A22                        1E            .byte	$1E
07338 1A23                        00            .byte	0
07339 1A24                        00            .byte	0
07340 1A25                        00            .byte	0
07341                                           ! 1018  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07342 1A26                        00            .byte	0
07343 1A27                        00            .byte	0
07344 1A28                        FE            .byte	$FE
07345 1A29                        C0            .byte	$C0
07346 1A2A                        C0            .byte	$C0
07347 1A2B                        C0            .byte	$C0
07348 1A2C                        FC            .byte	$FC
07349 1A2D                        06            .byte	6
07350 1A2E                        06            .byte	6
07351 1A2F                        C6            .byte	$C6
07352 1A30                        7C            .byte	$7C
07353 1A31                        00            .byte	0
07354 1A32                        00            .byte	0
07355 1A33                        00            .byte	0
07356                                           ! 1019  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07357 1A34                        00            .byte	0
07358 1A35                        00            .byte	0
07359 1A36                        38            .byte	$38
07360 1A37                        60            .byte	$60
07361 1A38                        C0            .byte	$C0
07362 1A39                        C0            .byte	$C0
07363 1A3A                        FC            .byte	$FC
07364 1A3B                        C6            .byte	$C6
07365 1A3C                        C6            .byte	$C6
07366 1A3D                        C6            .byte	$C6
07367 1A3E                        7C            .byte	$7C
07368 1A3F                        00            .byte	0
07369 1A40                        00            .byte	0
07370 1A41                        00            .byte	0
07371                                           ! 1020  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07372 1A42                        00            .byte	0
07373 1A43                        00            .byte	0
07374 1A44                        FE            .byte	$FE
07375 1A45                        C6            .byte	$C6
07376 1A46                        06            .byte	6
07377 1A47                        0C            .byte	$C
07378 1A48                        18            .byte	$18
07379 1A49                        30            .byte	$30
07380 1A4A                        30            .byte	$30
07381 1A4B                        30            .byte	$30
07382 1A4C                        30            .byte	$30
07383 1A4D                        00            .byte	0
07384 1A4E                        00            .byte	0
07385 1A4F                        00            .byte	0
07386                                           ! 1021  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07387 1A50                        00            .byte	0
07388 1A51                        00            .byte	0
07389 1A52                        7C            .byte	$7C
07390 1A53                        C6            .byte	$C6
07391 1A54                        C6            .byte	$C6
07392 1A55                        C6            .byte	$C6
07393 1A56                        7C            .byte	$7C
07394 1A57                        C6            .byte	$C6
07395 1A58                        C6            .byte	$C6
07396 1A59                        C6            .byte	$C6
07397 1A5A                        7C            .byte	$7C
07398 1A5B                        00            .byte	0
07399 1A5C                        00            .byte	0
07400 1A5D                        00            .byte	0
07401                                           ! 1022  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07402 1A5E                        00            .byte	0
07403 1A5F                        00            .byte	0
07404 1A60                        7C            .byte	$7C
07405 1A61                        C6            .byte	$C6
07406 1A62                        C6            .byte	$C6
07407 1A63                        C6            .byte	$C6
07408 1A64                        7E            .byte	$7E
07409 1A65                        06            .byte	6
07410 1A66                        06            .byte	6
07411 1A67                        0C            .byte	$C
07412 1A68                        78            .byte	$78
07413 1A69                        00            .byte	0
07414 1A6A                        00            .byte	0
07415 1A6B                        00            .byte	0
07416                                           ! 1023  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07417 1A6C                        00            .byte	0
07418 1A6D                        00            .byte	0
07419 1A6E                        00            .byte	0
07420 1A6F                        18            .byte	$18
07421 1A70                        18            .byte	$18
07422 1A71                        00            .byte	0
07423 1A72                        00            .byte	0
07424 1A73                        00            .byte	0
07425 1A74                        18            .byte	$18
07426 1A75                        18            .byte	$18
07427 1A76                        00            .byte	0
07428 1A77                        00            .byte	0
07429 1A78                        00            .byte	0
07430 1A79                        00            .byte	0
07431                                           ! 1024  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07432 1A7A                        00            .byte	0
07433 1A7B                        00            .byte	0
07434 1A7C                        00            .byte	0
07435 1A7D                        18            .byte	$18
07436 1A7E                        18            .byte	$18
07437 1A7F                        00            .byte	0
07438 1A80                        00            .byte	0
07439 1A81                        00            .byte	0
07440 1A82                        18            .byte	$18
07441 1A83                        18            .byte	$18
07442 1A84                        30            .byte	$30
07443 1A85                        00            .byte	0
07444 1A86                        00            .byte	0
07445 1A87                        00            .byte	0
07446                                           ! 1025  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07447 1A88                        00            .byte	0
07448 1A89                        00            .byte	0
07449 1A8A                        06            .byte	6
07450 1A8B                        0C            .byte	$C
07451 1A8C                        18            .byte	$18
07452 1A8D                        30            .byte	$30
07453 1A8E                        60            .byte	$60
07454 1A8F                        30            .byte	$30
07455 1A90                        18            .byte	$18
07456 1A91                        0C            .byte	$C
07457 1A92                        06            .byte	6
07458 1A93                        00            .byte	0
07459 1A94                        00            .byte	0
07460 1A95                        00            .byte	0
07461                                           ! 1026  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07462 1A96                        00            .byte	0
07463 1A97                        00            .byte	0
07464 1A98                        00            .byte	0
07465 1A99                        00            .byte	0
07466 1A9A                        00            .byte	0
07467 1A9B                        7E            .byte	$7E
07468 1A9C                        00            .byte	0
07469 1A9D                        00            .byte	0
07470 1A9E                        7E            .byte	$7E
07471 1A9F                        00            .byte	0
07472 1AA0                        00            .byte	0
07473 1AA1                        00            .byte	0
07474 1AA2                        00            .byte	0
07475 1AA3                        00            .byte	0
07476                                           ! 1027  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07477 1AA4                        00            .byte	0
07478 1AA5                        00            .byte	0
07479 1AA6                        60            .byte	$60
07480 1AA7                        30            .byte	$30
07481 1AA8                        18            .byte	$18
07482 1AA9                        0C            .byte	$C
07483 1AAA                        06            .byte	6
07484 1AAB                        0C            .byte	$C
07485 1AAC                        18            .byte	$18
07486 1AAD                        30            .byte	$30
07487 1AAE                        60            .byte	$60
07488 1AAF                        00            .byte	0
07489 1AB0                        00            .byte	0
07490 1AB1                        00            .byte	0
07491                                           ! 1028  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07492 1AB2                        00            .byte	0
07493 1AB3                        00            .byte	0
07494 1AB4                        7C            .byte	$7C
07495 1AB5                        C6            .byte	$C6
07496 1AB6                        C6            .byte	$C6
07497 1AB7                        0C            .byte	$C
07498 1AB8                        18            .byte	$18
07499 1AB9                        18            .byte	$18
07500 1ABA                        00            .byte	0
07501 1ABB                        18            .byte	$18
07502 1ABC                        18            .byte	$18
07503 1ABD                        00            .byte	0
07504 1ABE                        00            .byte	0
07505 1ABF                        00            .byte	0
07506                                           ! 1029  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07507 1AC0                        00            .byte	0
07508 1AC1                        00            .byte	0
07509 1AC2                        7C            .byte	$7C
07510 1AC3                        C6            .byte	$C6
07511 1AC4                        C6            .byte	$C6
07512 1AC5                        DE            .byte	$DE
07513 1AC6                        DE            .byte	$DE
07514 1AC7                        DE            .byte	$DE
07515 1AC8                        DC            .byte	$DC
07516 1AC9                        C0            .byte	$C0
07517 1ACA                        7C            .byte	$7C
07518 1ACB                        00            .byte	0
07519 1ACC                        00            .byte	0
07520 1ACD                        00            .byte	0
07521                                           ! 1030  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07522 1ACE                        00            .byte	0
07523 1ACF                        00            .byte	0
07524 1AD0                        10            .byte	$10
07525 1AD1                        38            .byte	$38
07526 1AD2                        6C            .byte	$6C
07527 1AD3                        C6            .byte	$C6
07528 1AD4                        C6            .byte	$C6
07529 1AD5                        FE            .byte	$FE
07530 1AD6                        C6            .byte	$C6
07531 1AD7                        C6            .byte	$C6
07532 1AD8                        C6            .byte	$C6
07533 1AD9                        00            .byte	0
07534 1ADA                        00            .byte	0
07535 1ADB                        00            .byte	0
07536                                           ! 1031  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07537 1ADC                        00            .byte	0
07538 1ADD                        00            .byte	0
07539 1ADE                        FC            .byte	$FC
07540 1ADF                        66            .byte	$66
07541 1AE0                        66            .byte	$66
07542 1AE1                        66            .byte	$66
07543 1AE2                        7C            .byte	$7C
07544 1AE3                        66            .byte	$66
07545 1AE4                        66            .byte	$66
07546 1AE5                        66            .byte	$66
07547 1AE6                        FC            .byte	$FC
07548 1AE7                        00            .byte	0
07549 1AE8                        00            .byte	0
07550 1AE9                        00            .byte	0
07551                                           ! 1032  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07552 1AEA                        00            .byte	0
07553 1AEB                        00            .byte	0
07554 1AEC                        3C            .byte	$3C
07555 1AED                        66            .byte	$66
07556 1AEE                        C2            .byte	$C2
07557 1AEF                        C0            .byte	$C0
07558 1AF0                        C0            .byte	$C0
07559 1AF1                        C0            .byte	$C0
07560 1AF2                        C2            .byte	$C2
07561 1AF3                        66            .byte	$66
07562 1AF4                        3C            .byte	$3C
07563 1AF5                        00            .byte	0
07564 1AF6                        00            .byte	0
07565 1AF7                        00            .byte	0
07566                                           ! 1033  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07567 1AF8                        00            .byte	0
07568 1AF9                        00            .byte	0
07569 1AFA                        F8            .byte	$F8
07570 1AFB                        6C            .byte	$6C
07571 1AFC                        66            .byte	$66
07572 1AFD                        66            .byte	$66
07573 1AFE                        66            .byte	$66
07574 1AFF                        66            .byte	$66
07575 1B00                        66            .byte	$66
07576 1B01                        6C            .byte	$6C
07577 1B02                        F8            .byte	$F8
07578 1B03                        00            .byte	0
07579 1B04                        00            .byte	0
07580 1B05                        00            .byte	0
07581                                           ! 1034  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07582 1B06                        00            .byte	0
07583 1B07                        00            .byte	0
07584 1B08                        FE            .byte	$FE
07585 1B09                        66            .byte	$66
07586 1B0A                        62            .byte	$62
07587 1B0B                        68            .byte	$68
07588 1B0C                        78            .byte	$78
07589 1B0D                        68            .byte	$68
07590 1B0E                        62            .byte	$62
07591 1B0F                        66            .byte	$66
07592 1B10                        FE            .byte	$FE
07593 1B11                        00            .byte	0
07594 1B12                        00            .byte	0
07595 1B13                        00            .byte	0
07596                                           ! 1035  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07597 1B14                        00            .byte	0
07598 1B15                        00            .byte	0
07599 1B16                        FE            .byte	$FE
07600 1B17                        66            .byte	$66
07601 1B18                        62            .byte	$62
07602 1B19                        68            .byte	$68
07603 1B1A                        78            .byte	$78
07604 1B1B                        68            .byte	$68
07605 1B1C                        60            .byte	$60
07606 1B1D                        60            .byte	$60
07607 1B1E                        F0            .byte	$F0
07608 1B1F                        00            .byte	0
07609 1B20                        00            .byte	0
07610 1B21                        00            .byte	0
07611                                           ! 1036  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07612 1B22                        00            .byte	0
07613 1B23                        00            .byte	0
07614 1B24                        3C            .byte	$3C
07615 1B25                        66            .byte	$66
07616 1B26                        C2            .byte	$C2
07617 1B27                        C0            .byte	$C0
07618 1B28                        C0            .byte	$C0
07619 1B29                        DE            .byte	$DE
07620 1B2A                        C6            .byte	$C6
07621 1B2B                        66            .byte	$66
07622 1B2C                        3A            .byte	$3A
07623 1B2D                        00            .byte	0
07624 1B2E                        00            .byte	0
07625 1B2F                        00            .byte	0
07626                                           ! 1037  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07627 1B30                        00            .byte	0
07628 1B31                        00            .byte	0
07629 1B32                        C6            .byte	$C6
07630 1B33                        C6            .byte	$C6
07631 1B34                        C6            .byte	$C6
07632 1B35                        C6            .byte	$C6
07633 1B36                        FE            .byte	$FE
07634 1B37                        C6            .byte	$C6
07635 1B38                        C6            .byte	$C6
07636 1B39                        C6            .byte	$C6
07637 1B3A                        C6            .byte	$C6
07638 1B3B                        00            .byte	0
07639 1B3C                        00            .byte	0
07640 1B3D                        00            .byte	0
07641                                           ! 1038  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07642 1B3E                        00            .byte	0
07643 1B3F                        00            .byte	0
07644 1B40                        3C            .byte	$3C
07645 1B41                        18            .byte	$18
07646 1B42                        18            .byte	$18
07647 1B43                        18            .byte	$18
07648 1B44                        18            .byte	$18
07649 1B45                        18            .byte	$18
07650 1B46                        18            .byte	$18
07651 1B47                        18            .byte	$18
07652 1B48                        3C            .byte	$3C
07653 1B49                        00            .byte	0
07654 1B4A                        00            .byte	0
07655 1B4B                        00            .byte	0
07656                                           ! 1039  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07657 1B4C                        00            .byte	0
07658 1B4D                        00            .byte	0
07659 1B4E                        1E            .byte	$1E
07660 1B4F                        0C            .byte	$C
07661 1B50                        0C            .byte	$C
07662 1B51                        0C            .byte	$C
07663 1B52                        0C            .byte	$C
07664 1B53                        0C            .byte	$C
07665 1B54                        CC            .byte	$CC
07666 1B55                        CC            .byte	$CC
07667 1B56                        78            .byte	$78
07668 1B57                        00            .byte	0
07669 1B58                        00            .byte	0
07670 1B59                        00            .byte	0
07671                                           ! 1040  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07672 1B5A                        00            .byte	0
07673 1B5B                        00            .byte	0
07674 1B5C                        E6            .byte	$E6
07675 1B5D                        66            .byte	$66
07676 1B5E                        6C            .byte	$6C
07677 1B5F                        6C            .byte	$6C
07678 1B60                        78            .byte	$78
07679 1B61                        6C            .byte	$6C
07680 1B62                        6C            .byte	$6C
07681 1B63                        66            .byte	$66
07682 1B64                        E6            .byte	$E6
07683 1B65                        00            .byte	0
07684 1B66                        00            .byte	0
07685 1B67                        00            .byte	0
07686                                           ! 1041  0x00, 0x00, 0xf0, 0x60, 0x60, 0
07687 1B68                        00            .byte	0
07688 1B69                        00            .byte	0
07689 1B6A                        F0            .byte	$F0
07690 1B6B                        60            .byte	$60
07691 1B6C                        60            .byte	$60
07692                                           ! 1041 x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07693 1B6D                        60            .byte	$60
07694 1B6E                        60            .byte	$60
07695 1B6F                        60            .byte	$60
07696 1B70                        62            .byte	$62
07697 1B71                        66            .byte	$66
07698 1B72                        FE            .byte	$FE
07699 1B73                        00            .byte	0
07700 1B74                        00            .byte	0
07701 1B75                        00            .byte	0
07702                                           ! 1042  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07703 1B76                        00            .byte	0
07704 1B77                        00            .byte	0
07705 1B78                        C6            .byte	$C6
07706 1B79                        EE            .byte	$EE
07707 1B7A                        FE            .byte	$FE
07708 1B7B                        FE            .byte	$FE
07709 1B7C                        D6            .byte	$D6
07710 1B7D                        C6            .byte	$C6
07711 1B7E                        C6            .byte	$C6
07712 1B7F                        C6            .byte	$C6
07713 1B80                        C6            .byte	$C6
07714 1B81                        00            .byte	0
07715 1B82                        00            .byte	0
07716 1B83                        00            .byte	0
07717                                           ! 1043  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07718 1B84                        00            .byte	0
07719 1B85                        00            .byte	0
07720 1B86                        C6            .byte	$C6
07721 1B87                        E6            .byte	$E6
07722 1B88                        F6            .byte	$F6
07723 1B89                        FE            .byte	$FE
07724 1B8A                        DE            .byte	$DE
07725 1B8B                        CE            .byte	$CE
07726 1B8C                        C6            .byte	$C6
07727 1B8D                        C6            .byte	$C6
07728 1B8E                        C6            .byte	$C6
07729 1B8F                        00            .byte	0
07730 1B90                        00            .byte	0
07731 1B91                        00            .byte	0
07732                                           ! 1044  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07733 1B92                        00            .byte	0
07734 1B93                        00            .byte	0
07735 1B94                        38            .byte	$38
07736 1B95                        6C            .byte	$6C
07737 1B96                        C6            .byte	$C6
07738 1B97                        C6            .byte	$C6
07739 1B98                        C6            .byte	$C6
07740 1B99                        C6            .byte	$C6
07741 1B9A                        C6            .byte	$C6
07742 1B9B                        6C            .byte	$6C
07743 1B9C                        38            .byte	$38
07744 1B9D                        00            .byte	0
07745 1B9E                        00            .byte	0
07746 1B9F                        00            .byte	0
07747                                           ! 1045  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07748 1BA0                        00            .byte	0
07749 1BA1                        00            .byte	0
07750 1BA2                        FC            .byte	$FC
07751 1BA3                        66            .byte	$66
07752 1BA4                        66            .byte	$66
07753 1BA5                        66            .byte	$66
07754 1BA6                        7C            .byte	$7C
07755 1BA7                        60            .byte	$60
07756 1BA8                        60            .byte	$60
07757 1BA9                        60            .byte	$60
07758 1BAA                        F0            .byte	$F0
07759 1BAB                        00            .byte	0
07760 1BAC                        00            .byte	0
07761 1BAD                        00            .byte	0
07762                                           ! 1046  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
07763 1BAE                        00            .byte	0
07764 1BAF                        00            .byte	0
07765 1BB0                        7C            .byte	$7C
07766 1BB1                        C6            .byte	$C6
07767 1BB2                        C6            .byte	$C6
07768 1BB3                        C6            .byte	$C6
07769 1BB4                        C6            .byte	$C6
07770 1BB5                        D6            .byte	$D6
07771 1BB6                        DE            .byte	$DE
07772 1BB7                        7C            .byte	$7C
07773 1BB8                        0C            .byte	$C
07774 1BB9                        0E            .byte	$E
07775 1BBA                        00            .byte	0
07776 1BBB                        00            .byte	0
07777                                           ! 1047  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
07778 1BBC                        00            .byte	0
07779 1BBD                        00            .byte	0
07780 1BBE                        FC            .byte	$FC
07781 1BBF                        66            .byte	$66
07782 1BC0                        66            .byte	$66
07783 1BC1                        66            .byte	$66
07784 1BC2                        7C            .byte	$7C
07785 1BC3                        6C            .byte	$6C
07786 1BC4                        66            .byte	$66
07787 1BC5                        66            .byte	$66
07788 1BC6                        E6            .byte	$E6
07789 1BC7                        00            .byte	0
07790 1BC8                        00            .byte	0
07791 1BC9                        00            .byte	0
07792                                           ! 1048  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07793 1BCA                        00            .byte	0
07794 1BCB                        00            .byte	0
07795 1BCC                        7C            .byte	$7C
07796 1BCD                        C6            .byte	$C6
07797 1BCE                        C6            .byte	$C6
07798 1BCF                        60            .byte	$60
07799 1BD0                        38            .byte	$38
07800 1BD1                        0C            .byte	$C
07801 1BD2                        C6            .byte	$C6
07802 1BD3                        C6            .byte	$C6
07803 1BD4                        7C            .byte	$7C
07804 1BD5                        00            .byte	0
07805 1BD6                        00            .byte	0
07806 1BD7                        00            .byte	0
07807                                           ! 1049  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07808 1BD8                        00            .byte	0
07809 1BD9                        00            .byte	0
07810 1BDA                        7E            .byte	$7E
07811 1BDB                        7E            .byte	$7E
07812 1BDC                        5A            .byte	$5A
07813 1BDD                        18            .byte	$18
07814 1BDE                        18            .byte	$18
07815 1BDF                        18            .byte	$18
07816 1BE0                        18            .byte	$18
07817 1BE1                        18            .byte	$18
07818 1BE2                        3C            .byte	$3C
07819 1BE3                        00            .byte	0
07820 1BE4                        00            .byte	0
07821 1BE5                        00            .byte	0
07822                                           ! 1050  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07823 1BE6                        00            .byte	0
07824 1BE7                        00            .byte	0
07825 1BE8                        C6            .byte	$C6
07826 1BE9                        C6            .byte	$C6
07827 1BEA                        C6            .byte	$C6
07828 1BEB                        C6            .byte	$C6
07829 1BEC                        C6            .byte	$C6
07830 1BED                        C6            .byte	$C6
07831 1BEE                        C6            .byte	$C6
07832 1BEF                        C6            .byte	$C6
07833 1BF0                        7C            .byte	$7C
07834 1BF1                        00            .byte	0
07835 1BF2                        00            .byte	0
07836 1BF3                        00            .byte	0
07837                                           ! 1051  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
07838 1BF4                        00            .byte	0
07839 1BF5                        00            .byte	0
07840 1BF6                        C6            .byte	$C6
07841 1BF7                        C6            .byte	$C6
07842 1BF8                        C6            .byte	$C6
07843 1BF9                        C6            .byte	$C6
07844 1BFA                        C6            .byte	$C6
07845 1BFB                        C6            .byte	$C6
07846 1BFC                        6C            .byte	$6C
07847 1BFD                        38            .byte	$38
07848 1BFE                        10            .byte	$10
07849 1BFF                        00            .byte	0
07850 1C00                        00            .byte	0
07851 1C01                        00            .byte	0
07852                                           ! 1052  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
07853 1C02                        00            .byte	0
07854 1C03                        00            .byte	0
07855 1C04                        C6            .byte	$C6
07856 1C05                        C6            .byte	$C6
07857 1C06                        C6            .byte	$C6
07858 1C07                        C6            .byte	$C6
07859 1C08                        D6            .byte	$D6
07860 1C09                        D6            .byte	$D6
07861 1C0A                        FE            .byte	$FE
07862 1C0B                        7C            .byte	$7C
07863 1C0C                        6C            .byte	$6C
07864 1C0D                        00            .byte	0
07865 1C0E                        00            .byte	0
07866 1C0F                        00            .byte	0
07867                                           ! 1053  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07868 1C10                        00            .byte	0
07869 1C11                        00            .byte	0
07870 1C12                        C6            .byte	$C6
07871 1C13                        C6            .byte	$C6
07872 1C14                        6C            .byte	$6C
07873 1C15                        38            .byte	$38
07874 1C16                        38            .byte	$38
07875 1C17                        38            .byte	$38
07876 1C18                        6C            .byte	$6C
07877 1C19                        C6            .byte	$C6
07878 1C1A                        C6            .byte	$C6
07879 1C1B                        00            .byte	0
07880 1C1C                        00            .byte	0
07881 1C1D                        00            .byte	0
07882                                           ! 1054  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07883 1C1E                        00            .byte	0
07884 1C1F                        00            .byte	0
07885 1C20                        66            .byte	$66
07886 1C21                        66            .byte	$66
07887 1C22                        66            .byte	$66
07888 1C23                        66            .byte	$66
07889 1C24                        3C            .byte	$3C
07890 1C25                        18            .byte	$18
07891 1C26                        18            .byte	$18
07892 1C27                        18            .byte	$18
07893 1C28                        3C            .byte	$3C
07894 1C29                        00            .byte	0
07895 1C2A                        00            .byte	0
07896 1C2B                        00            .byte	0
07897                                           ! 1055  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07898 1C2C                        00            .byte	0
07899 1C2D                        00            .byte	0
07900 1C2E                        FE            .byte	$FE
07901 1C2F                        C6            .byte	$C6
07902 1C30                        8C            .byte	$8C
07903 1C31                        18            .byte	$18
07904 1C32                        30            .byte	$30
07905 1C33                        60            .byte	$60
07906 1C34                        C2            .byte	$C2
07907 1C35                        C6            .byte	$C6
07908 1C36                        FE            .byte	$FE
07909 1C37                        00            .byte	0
07910 1C38                        00            .byte	0
07911 1C39                        00            .byte	0
07912                                           ! 1056  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
07913 1C3A                        00            .byte	0
07914 1C3B                        00            .byte	0
07915 1C3C                        3C            .byte	$3C
07916 1C3D                        30            .byte	$30
07917 1C3E                        30            .byte	$30
07918 1C3F                        30            .byte	$30
07919 1C40                        30            .byte	$30
07920 1C41                        30            .byte	$30
07921 1C42                        30            .byte	$30
07922 1C43                        30            .byte	$30
07923 1C44                        3C            .byte	$3C
07924 1C45                        00            .byte	0
07925 1C46                        00            .byte	0
07926 1C47                        00            .byte	0
07927                                           ! 1057  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07928 1C48                        00            .byte	0
07929 1C49                        00            .byte	0
07930 1C4A                        80            .byte	$80
07931 1C4B                        C0            .byte	$C0
07932 1C4C                        E0            .byte	$E0
07933 1C4D                        70            .byte	$70
07934 1C4E                        38            .byte	$38
07935 1C4F                        1C            .byte	$1C
07936 1C50                        0E            .byte	$E
07937 1C51                        06            .byte	6
07938 1C52                        02            .byte	2
07939 1C53                        00            .byte	0
07940 1C54                        00            .byte	0
07941 1C55                        00            .byte	0
07942                                           ! 1058  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
07943 1C56                        00            .byte	0
07944 1C57                        00            .byte	0
07945 1C58                        3C            .byte	$3C
07946 1C59                        0C            .byte	$C
07947 1C5A                        0C            .byte	$C
07948 1C5B                        0C            .byte	$C
07949 1C5C                        0C            .byte	$C
07950 1C5D                        0C            .byte	$C
07951 1C5E                        0C            .byte	$C
07952 1C5F                        0C            .byte	$C
07953 1C60                        3C            .byte	$3C
07954 1C61                        00            .byte	0
07955 1C62                        00            .byte	0
07956 1C63                        00            .byte	0
07957                                           ! 1059  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07958 1C64                        10            .byte	$10
07959 1C65                        38            .byte	$38
07960 1C66                        6C            .byte	$6C
07961 1C67                        C6            .byte	$C6
07962 1C68                        00            .byte	0
07963 1C69                        00            .byte	0
07964 1C6A                        00            .byte	0
07965 1C6B                        00            .byte	0
07966 1C6C                        00            .byte	0
07967 1C6D                        00            .byte	0
07968 1C6E                        00            .byte	0
07969 1C6F                        00            .byte	0
07970 1C70                        00            .byte	0
07971 1C71                        00            .byte	0
07972                                           ! 1060  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
07973 1C72                        00            .byte	0
07974 1C73                        00            .byte	0
07975 1C74                        00            .byte	0
07976 1C75                        00            .byte	0
07977 1C76                        00            .byte	0
07978 1C77                        00            .byte	0
07979 1C78                        00            .byte	0
07980 1C79                        00            .byte	0
07981 1C7A                        00            .byte	0
07982 1C7B                        00            .byte	0
07983 1C7C                        00            .byte	0
07984 1C7D                        00            .byte	0
07985 1C7E                        FF            .byte	$FF
07986 1C7F                        00            .byte	0
07987                                           ! 1061  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07988 1C80                        30            .byte	$30
07989 1C81                        30            .byte	$30
07990 1C82                        18            .byte	$18
07991 1C83                        00            .byte	0
07992 1C84                        00            .byte	0
07993 1C85                        00            .byte	0
07994 1C86                        00            .byte	0
07995 1C87                        00            .byte	0
07996 1C88                        00            .byte	0
07997 1C89                        00            .byte	0
07998 1C8A                        00            .byte	0
07999 1C8B                        00            .byte	0
08000 1C8C                        00            .byte	0
08001 1C8D                        00            .byte	0
08002                                           ! 1062  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08003 1C8E                        00            .byte	0
08004 1C8F                        00            .byte	0
08005 1C90                        00            .byte	0
08006 1C91                        00            .byte	0
08007 1C92                        00            .byte	0
08008 1C93                        78            .byte	$78
08009 1C94                        0C            .byte	$C
08010 1C95                        7C            .byte	$7C
08011 1C96                        CC            .byte	$CC
08012 1C97                        CC            .byte	$CC
08013 1C98                        76            .byte	$76
08014 1C99                        00            .byte	0
08015 1C9A                        00            .byte	0
08016 1C9B                        00            .byte	0
08017                                           ! 1063  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08018 1C9C                        00            .byte	0
08019 1C9D                        00            .byte	0
08020 1C9E                        E0            .byte	$E0
08021 1C9F                        60            .byte	$60
08022 1CA0                        60            .byte	$60
08023 1CA1                        78            .byte	$78
08024 1CA2                        6C            .byte	$6C
08025 1CA3                        66            .byte	$66
08026 1CA4                        66            .byte	$66
08027 1CA5                        66            .byte	$66
08028 1CA6                        7C            .byte	$7C
08029 1CA7                        00            .byte	0
08030 1CA8                        00            .byte	0
08031 1CA9                        00            .byte	0
08032                                           ! 1064  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08033 1CAA                        00            .byte	0
08034 1CAB                        00            .byte	0
08035 1CAC                        00            .byte	0
08036 1CAD                        00            .byte	0
08037 1CAE                        00            .byte	0
08038 1CAF                        7C            .byte	$7C
08039 1CB0                        C6            .byte	$C6
08040 1CB1                        C0            .byte	$C0
08041 1CB2                        C0            .byte	$C0
08042 1CB3                        C6            .byte	$C6
08043 1CB4                        7C            .byte	$7C
08044 1CB5                        00            .byte	0
08045 1CB6                        00            .byte	0
08046 1CB7                        00            .byte	0
08047                                           ! 1065  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6
08048 1CB8                        00            .byte	0
08049 1CB9                        00            .byte	0
08050 1CBA                        1C            .byte	$1C
08051 1CBB                        0C            .byte	$C
08052 1CBC                        0C            .byte	$C
08053 1CBD                        3C            .byte	$3C
08054                                           ! 1065 c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08055 1CBE                        6C            .byte	$6C
08056 1CBF                        CC            .byte	$CC
08057 1CC0                        CC            .byte	$CC
08058 1CC1                        CC            .byte	$CC
08059 1CC2                        76            .byte	$76
08060 1CC3                        00            .byte	0
08061 1CC4                        00            .byte	0
08062 1CC5                        00            .byte	0
08063                                           ! 1066  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08064 1CC6                        00            .byte	0
08065 1CC7                        00            .byte	0
08066 1CC8                        00            .byte	0
08067 1CC9                        00            .byte	0
08068 1CCA                        00            .byte	0
08069 1CCB                        7C            .byte	$7C
08070 1CCC                        C6            .byte	$C6
08071 1CCD                        FE            .byte	$FE
08072 1CCE                        C0            .byte	$C0
08073 1CCF                        C6            .byte	$C6
08074 1CD0                        7C            .byte	$7C
08075 1CD1                        00            .byte	0
08076 1CD2                        00            .byte	0
08077 1CD3                        00            .byte	0
08078                                           ! 1067  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08079 1CD4                        00            .byte	0
08080 1CD5                        00            .byte	0
08081 1CD6                        38            .byte	$38
08082 1CD7                        6C            .byte	$6C
08083 1CD8                        64            .byte	$64
08084 1CD9                        60            .byte	$60
08085 1CDA                        F0            .byte	$F0
08086 1CDB                        60            .byte	$60
08087 1CDC                        60            .byte	$60
08088 1CDD                        60            .byte	$60
08089 1CDE                        F0            .byte	$F0
08090 1CDF                        00            .byte	0
08091 1CE0                        00            .byte	0
08092 1CE1                        00            .byte	0
08093                                           ! 1068  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08094 1CE2                        00            .byte	0
08095 1CE3                        00            .byte	0
08096 1CE4                        00            .byte	0
08097 1CE5                        00            .byte	0
08098 1CE6                        00            .byte	0
08099 1CE7                        76            .byte	$76
08100 1CE8                        CC            .byte	$CC
08101 1CE9                        CC            .byte	$CC
08102 1CEA                        CC            .byte	$CC
08103 1CEB                        7C            .byte	$7C
08104 1CEC                        0C            .byte	$C
08105 1CED                        CC            .byte	$CC
08106 1CEE                        78            .byte	$78
08107 1CEF                        00            .byte	0
08108                                           ! 1069  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08109 1CF0                        00            .byte	0
08110 1CF1                        00            .byte	0
08111 1CF2                        E0            .byte	$E0
08112 1CF3                        60            .byte	$60
08113 1CF4                        60            .byte	$60
08114 1CF5                        6C            .byte	$6C
08115 1CF6                        76            .byte	$76
08116 1CF7                        66            .byte	$66
08117 1CF8                        66            .byte	$66
08118 1CF9                        66            .byte	$66
08119 1CFA                        E6            .byte	$E6
08120 1CFB                        00            .byte	0
08121 1CFC                        00            .byte	0
08122 1CFD                        00            .byte	0
08123                                           ! 1070  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08124 1CFE                        00            .byte	0
08125 1CFF                        00            .byte	0
08126 1D00                        18            .byte	$18
08127 1D01                        18            .byte	$18
08128 1D02                        00            .byte	0
08129 1D03                        38            .byte	$38
08130 1D04                        18            .byte	$18
08131 1D05                        18            .byte	$18
08132 1D06                        18            .byte	$18
08133 1D07                        18            .byte	$18
08134 1D08                        3C            .byte	$3C
08135 1D09                        00            .byte	0
08136 1D0A                        00            .byte	0
08137 1D0B                        00            .byte	0
08138                                           ! 1071  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08139 1D0C                        00            .byte	0
08140 1D0D                        00            .byte	0
08141 1D0E                        06            .byte	6
08142 1D0F                        06            .byte	6
08143 1D10                        00            .byte	0
08144 1D11                        0E            .byte	$E
08145 1D12                        06            .byte	6
08146 1D13                        06            .byte	6
08147 1D14                        06            .byte	6
08148 1D15                        06            .byte	6
08149 1D16                        66            .byte	$66
08150 1D17                        66            .byte	$66
08151 1D18                        3C            .byte	$3C
08152 1D19                        00            .byte	0
08153                                           ! 1072  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08154 1D1A                        00            .byte	0
08155 1D1B                        00            .byte	0
08156 1D1C                        E0            .byte	$E0
08157 1D1D                        60            .byte	$60
08158 1D1E                        60            .byte	$60
08159 1D1F                        66            .byte	$66
08160 1D20                        6C            .byte	$6C
08161 1D21                        78            .byte	$78
08162 1D22                        6C            .byte	$6C
08163 1D23                        66            .byte	$66
08164 1D24                        E6            .byte	$E6
08165 1D25                        00            .byte	0
08166 1D26                        00            .byte	0
08167 1D27                        00            .byte	0
08168                                           ! 1073  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08169 1D28                        00            .byte	0
08170 1D29                        00            .byte	0
08171 1D2A                        38            .byte	$38
08172 1D2B                        18            .byte	$18
08173 1D2C                        18            .byte	$18
08174 1D2D                        18            .byte	$18
08175 1D2E                        18            .byte	$18
08176 1D2F                        18            .byte	$18
08177 1D30                        18            .byte	$18
08178 1D31                        18            .byte	$18
08179 1D32                        3C            .byte	$3C
08180 1D33                        00            .byte	0
08181 1D34                        00            .byte	0
08182 1D35                        00            .byte	0
08183                                           ! 1074  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08184 1D36                        00            .byte	0
08185 1D37                        00            .byte	0
08186 1D38                        00            .byte	0
08187 1D39                        00            .byte	0
08188 1D3A                        00            .byte	0
08189 1D3B                        EC            .byte	$EC
08190 1D3C                        FE            .byte	$FE
08191 1D3D                        D6            .byte	$D6
08192 1D3E                        D6            .byte	$D6
08193 1D3F                        D6            .byte	$D6
08194 1D40                        C6            .byte	$C6
08195 1D41                        00            .byte	0
08196 1D42                        00            .byte	0
08197 1D43                        00            .byte	0
08198                                           ! 1075  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08199 1D44                        00            .byte	0
08200 1D45                        00            .byte	0
08201 1D46                        00            .byte	0
08202 1D47                        00            .byte	0
08203 1D48                        00            .byte	0
08204 1D49                        DC            .byte	$DC
08205 1D4A                        66            .byte	$66
08206 1D4B                        66            .byte	$66
08207 1D4C                        66            .byte	$66
08208 1D4D                        66            .byte	$66
08209 1D4E                        66            .byte	$66
08210 1D4F                        00            .byte	0
08211 1D50                        00            .byte	0
08212 1D51                        00            .byte	0
08213                                           ! 1076  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08214 1D52                        00            .byte	0
08215 1D53                        00            .byte	0
08216 1D54                        00            .byte	0
08217 1D55                        00            .byte	0
08218 1D56                        00            .byte	0
08219 1D57                        7C            .byte	$7C
08220 1D58                        C6            .byte	$C6
08221 1D59                        C6            .byte	$C6
08222 1D5A                        C6            .byte	$C6
08223 1D5B                        C6            .byte	$C6
08224 1D5C                        7C            .byte	$7C
08225 1D5D                        00            .byte	0
08226 1D5E                        00            .byte	0
08227 1D5F                        00            .byte	0
08228                                           ! 1077  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08229 1D60                        00            .byte	0
08230 1D61                        00            .byte	0
08231 1D62                        00            .byte	0
08232 1D63                        00            .byte	0
08233 1D64                        00            .byte	0
08234 1D65                        DC            .byte	$DC
08235 1D66                        66            .byte	$66
08236 1D67                        66            .byte	$66
08237 1D68                        66            .byte	$66
08238 1D69                        7C            .byte	$7C
08239 1D6A                        60            .byte	$60
08240 1D6B                        60            .byte	$60
08241 1D6C                        F0            .byte	$F0
08242 1D6D                        00            .byte	0
08243                                           ! 1078  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08244 1D6E                        00            .byte	0
08245 1D6F                        00            .byte	0
08246 1D70                        00            .byte	0
08247 1D71                        00            .byte	0
08248 1D72                        00            .byte	0
08249 1D73                        76            .byte	$76
08250 1D74                        CC            .byte	$CC
08251 1D75                        CC            .byte	$CC
08252 1D76                        CC            .byte	$CC
08253 1D77                        7C            .byte	$7C
08254 1D78                        0C            .byte	$C
08255 1D79                        0C            .byte	$C
08256 1D7A                        1E            .byte	$1E
08257 1D7B                        00            .byte	0
08258                                           ! 1079  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08259 1D7C                        00            .byte	0
08260 1D7D                        00            .byte	0
08261 1D7E                        00            .byte	0
08262 1D7F                        00            .byte	0
08263 1D80                        00            .byte	0
08264 1D81                        DC            .byte	$DC
08265 1D82                        76            .byte	$76
08266 1D83                        66            .byte	$66
08267 1D84                        60            .byte	$60
08268 1D85                        60            .byte	$60
08269 1D86                        F0            .byte	$F0
08270 1D87                        00            .byte	0
08271 1D88                        00            .byte	0
08272 1D89                        00            .byte	0
08273                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08274 1D8A                        00            .byte	0
08275 1D8B                        00            .byte	0
08276 1D8C                        00            .byte	0
08277 1D8D                        00            .byte	0
08278 1D8E                        00            .byte	0
08279 1D8F                        7C            .byte	$7C
08280 1D90                        C6            .byte	$C6
08281 1D91                        70            .byte	$70
08282 1D92                        1C            .byte	$1C
08283 1D93                        C6            .byte	$C6
08284 1D94                        7C            .byte	$7C
08285 1D95                        00            .byte	0
08286 1D96                        00            .byte	0
08287 1D97                        00            .byte	0
08288                                           ! 1081  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08289 1D98                        00            .byte	0
08290 1D99                        00            .byte	0
08291 1D9A                        10            .byte	$10
08292 1D9B                        30            .byte	$30
08293 1D9C                        30            .byte	$30
08294 1D9D                        FC            .byte	$FC
08295 1D9E                        30            .byte	$30
08296 1D9F                        30            .byte	$30
08297 1DA0                        30            .byte	$30
08298 1DA1                        36            .byte	$36
08299 1DA2                        1C            .byte	$1C
08300 1DA3                        00            .byte	0
08301 1DA4                        00            .byte	0
08302 1DA5                        00            .byte	0
08303                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08304 1DA6                        00            .byte	0
08305 1DA7                        00            .byte	0
08306 1DA8                        00            .byte	0
08307 1DA9                        00            .byte	0
08308 1DAA                        00            .byte	0
08309 1DAB                        CC            .byte	$CC
08310 1DAC                        CC            .byte	$CC
08311 1DAD                        CC            .byte	$CC
08312 1DAE                        CC            .byte	$CC
08313 1DAF                        CC            .byte	$CC
08314 1DB0                        76            .byte	$76
08315 1DB1                        00            .byte	0
08316 1DB2                        00            .byte	0
08317 1DB3                        00            .byte	0
08318                                           ! 1083  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08319 1DB4                        00            .byte	0
08320 1DB5                        00            .byte	0
08321 1DB6                        00            .byte	0
08322 1DB7                        00            .byte	0
08323 1DB8                        00            .byte	0
08324 1DB9                        66            .byte	$66
08325 1DBA                        66            .byte	$66
08326 1DBB                        66            .byte	$66
08327 1DBC                        66            .byte	$66
08328 1DBD                        3C            .byte	$3C
08329 1DBE                        18            .byte	$18
08330 1DBF                        00            .byte	0
08331 1DC0                        00            .byte	0
08332 1DC1                        00            .byte	0
08333                                           ! 1084  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08334 1DC2                        00            .byte	0
08335 1DC3                        00            .byte	0
08336 1DC4                        00            .byte	0
08337 1DC5                        00            .byte	0
08338 1DC6                        00            .byte	0
08339 1DC7                        C6            .byte	$C6
08340 1DC8                        C6            .byte	$C6
08341 1DC9                        D6            .byte	$D6
08342 1DCA                        D6            .byte	$D6
08343 1DCB                        FE            .byte	$FE
08344 1DCC                        6C            .byte	$6C
08345 1DCD                        00            .byte	0
08346 1DCE                        00            .byte	0
08347 1DCF                        00            .byte	0
08348                                           ! 1085  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08349 1DD0                        00            .byte	0
08350 1DD1                        00            .byte	0
08351 1DD2                        00            .byte	0
08352 1DD3                        00            .byte	0
08353 1DD4                        00            .byte	0
08354 1DD5                        C6            .byte	$C6
08355 1DD6                        6C            .byte	$6C
08356 1DD7                        38            .byte	$38
08357 1DD8                        38            .byte	$38
08358 1DD9                        6C            .byte	$6C
08359 1DDA                        C6            .byte	$C6
08360 1DDB                        00            .byte	0
08361 1DDC                        00            .byte	0
08362 1DDD                        00            .byte	0
08363                                           ! 1086  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08364 1DDE                        00            .byte	0
08365 1DDF                        00            .byte	0
08366 1DE0                        00            .byte	0
08367 1DE1                        00            .byte	0
08368 1DE2                        00            .byte	0
08369 1DE3                        C6            .byte	$C6
08370 1DE4                        C6            .byte	$C6
08371 1DE5                        C6            .byte	$C6
08372 1DE6                        C6            .byte	$C6
08373 1DE7                        7E            .byte	$7E
08374 1DE8                        06            .byte	6
08375 1DE9                        0C            .byte	$C
08376 1DEA                        F8            .byte	$F8
08377 1DEB                        00            .byte	0
08378                                           ! 1087  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08379 1DEC                        00            .byte	0
08380 1DED                        00            .byte	0
08381 1DEE                        00            .byte	0
08382 1DEF                        00            .byte	0
08383 1DF0                        00            .byte	0
08384 1DF1                        FE            .byte	$FE
08385 1DF2                        CC            .byte	$CC
08386 1DF3                        18            .byte	$18
08387 1DF4                        30            .byte	$30
08388 1DF5                        66            .byte	$66
08389 1DF6                        FE            .byte	$FE
08390 1DF7                        00            .byte	0
08391 1DF8                        00            .byte	0
08392 1DF9                        00            .byte	0
08393                                           ! 1088  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08394 1DFA                        00            .byte	0
08395 1DFB                        00            .byte	0
08396 1DFC                        0E            .byte	$E
08397 1DFD                        18            .byte	$18
08398 1DFE                        18            .byte	$18
08399 1DFF                        18            .byte	$18
08400 1E00                        70            .byte	$70
08401 1E01                        18            .byte	$18
08402 1E02                        18            .byte	$18
08403 1E03                        18            .byte	$18
08404 1E04                        0E            .byte	$E
08405 1E05                        00            .byte	0
08406 1E06                        00            .byte	0
08407 1E07                        00            .byte	0
08408                                           ! 1089  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18,
08409 1E08                        00            .byte	0
08410 1E09                        00            .byte	0
08411 1E0A                        18            .byte	$18
08412 1E0B                        18            .byte	$18
08413 1E0C                        18            .byte	$18
08414 1E0D                        18            .byte	$18
08415 1E0E                        00            .byte	0
08416                                           ! 1089  0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08417 1E0F                        18            .byte	$18
08418 1E10                        18            .byte	$18
08419 1E11                        18            .byte	$18
08420 1E12                        18            .byte	$18
08421 1E13                        00            .byte	0
08422 1E14                        00            .byte	0
08423 1E15                        00            .byte	0
08424                                           ! 1090  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08425 1E16                        00            .byte	0
08426 1E17                        00            .byte	0
08427 1E18                        70            .byte	$70
08428 1E19                        18            .byte	$18
08429 1E1A                        18            .byte	$18
08430 1E1B                        18            .byte	$18
08431 1E1C                        0E            .byte	$E
08432 1E1D                        18            .byte	$18
08433 1E1E                        18            .byte	$18
08434 1E1F                        18            .byte	$18
08435 1E20                        70            .byte	$70
08436 1E21                        00            .byte	0
08437 1E22                        00            .byte	0
08438 1E23                        00            .byte	0
08439                                           ! 1091  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08440 1E24                        00            .byte	0
08441 1E25                        00            .byte	0
08442 1E26                        76            .byte	$76
08443 1E27                        DC            .byte	$DC
08444 1E28                        00            .byte	0
08445 1E29                        00            .byte	0
08446 1E2A                        00            .byte	0
08447 1E2B                        00            .byte	0
08448 1E2C                        00            .byte	0
08449 1E2D                        00            .byte	0
08450 1E2E                        00            .byte	0
08451 1E2F                        00            .byte	0
08452 1E30                        00            .byte	0
08453 1E31                        00            .byte	0
08454                                           ! 1092  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08455 1E32                        00            .byte	0
08456 1E33                        00            .byte	0
08457 1E34                        00            .byte	0
08458 1E35                        00            .byte	0
08459 1E36                        10            .byte	$10
08460 1E37                        38            .byte	$38
08461 1E38                        6C            .byte	$6C
08462 1E39                        C6            .byte	$C6
08463 1E3A                        C6            .byte	$C6
08464 1E3B                        FE            .byte	$FE
08465 1E3C                        00            .byte	0
08466 1E3D                        00            .byte	0
08467 1E3E                        00            .byte	0
08468 1E3F                        00            .byte	0
08469                                           ! 1093  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08470 1E40                        00            .byte	0
08471 1E41                        00            .byte	0
08472 1E42                        3C            .byte	$3C
08473 1E43                        66            .byte	$66
08474 1E44                        C2            .byte	$C2
08475 1E45                        C0            .byte	$C0
08476 1E46                        C0            .byte	$C0
08477 1E47                        C2            .byte	$C2
08478 1E48                        66            .byte	$66
08479 1E49                        3C            .byte	$3C
08480 1E4A                        0C            .byte	$C
08481 1E4B                        06            .byte	6
08482 1E4C                        7C            .byte	$7C
08483 1E4D                        00            .byte	0
08484                                           ! 1094  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08485 1E4E                        00            .byte	0
08486 1E4F                        00            .byte	0
08487 1E50                        CC            .byte	$CC
08488 1E51                        CC            .byte	$CC
08489 1E52                        00            .byte	0
08490 1E53                        CC            .byte	$CC
08491 1E54                        CC            .byte	$CC
08492 1E55                        CC            .byte	$CC
08493 1E56                        CC            .byte	$CC
08494 1E57                        CC            .byte	$CC
08495 1E58                        76            .byte	$76
08496 1E59                        00            .byte	0
08497 1E5A                        00            .byte	0
08498 1E5B                        00            .byte	0
08499                                           ! 1095  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08500 1E5C                        00            .byte	0
08501 1E5D                        0C            .byte	$C
08502 1E5E                        18            .byte	$18
08503 1E5F                        30            .byte	$30
08504 1E60                        00            .byte	0
08505 1E61                        7C            .byte	$7C
08506 1E62                        C6            .byte	$C6
08507 1E63                        FE            .byte	$FE
08508 1E64                        C0            .byte	$C0
08509 1E65                        C6            .byte	$C6
08510 1E66                        7C            .byte	$7C
08511 1E67                        00            .byte	0
08512 1E68                        00            .byte	0
08513 1E69                        00            .byte	0
08514                                           ! 1096  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08515 1E6A                        00            .byte	0
08516 1E6B                        10            .byte	$10
08517 1E6C                        38            .byte	$38
08518 1E6D                        6C            .byte	$6C
08519 1E6E                        00            .byte	0
08520 1E6F                        78            .byte	$78
08521 1E70                        0C            .byte	$C
08522 1E71                        7C            .byte	$7C
08523 1E72                        CC            .byte	$CC
08524 1E73                        CC            .byte	$CC
08525 1E74                        76            .byte	$76
08526 1E75                        00            .byte	0
08527 1E76                        00            .byte	0
08528 1E77                        00            .byte	0
08529                                           ! 1097  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08530 1E78                        00            .byte	0
08531 1E79                        00            .byte	0
08532 1E7A                        CC            .byte	$CC
08533 1E7B                        CC            .byte	$CC
08534 1E7C                        00            .byte	0
08535 1E7D                        78            .byte	$78
08536 1E7E                        0C            .byte	$C
08537 1E7F                        7C            .byte	$7C
08538 1E80                        CC            .byte	$CC
08539 1E81                        CC            .byte	$CC
08540 1E82                        76            .byte	$76
08541 1E83                        00            .byte	0
08542 1E84                        00            .byte	0
08543 1E85                        00            .byte	0
08544                                           ! 1098  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08545 1E86                        00            .byte	0
08546 1E87                        60            .byte	$60
08547 1E88                        30            .byte	$30
08548 1E89                        18            .byte	$18
08549 1E8A                        00            .byte	0
08550 1E8B                        78            .byte	$78
08551 1E8C                        0C            .byte	$C
08552 1E8D                        7C            .byte	$7C
08553 1E8E                        CC            .byte	$CC
08554 1E8F                        CC            .byte	$CC
08555 1E90                        76            .byte	$76
08556 1E91                        00            .byte	0
08557 1E92                        00            .byte	0
08558 1E93                        00            .byte	0
08559                                           ! 1099  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08560 1E94                        00            .byte	0
08561 1E95                        38            .byte	$38
08562 1E96                        6C            .byte	$6C
08563 1E97                        38            .byte	$38
08564 1E98                        00            .byte	0
08565 1E99                        78            .byte	$78
08566 1E9A                        0C            .byte	$C
08567 1E9B                        7C            .byte	$7C
08568 1E9C                        CC            .byte	$CC
08569 1E9D                        CC            .byte	$CC
08570 1E9E                        76            .byte	$76
08571 1E9F                        00            .byte	0
08572 1EA0                        00            .byte	0
08573 1EA1                        00            .byte	0
08574                                           ! 1100  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08575 1EA2                        00            .byte	0
08576 1EA3                        00            .byte	0
08577 1EA4                        00            .byte	0
08578 1EA5                        00            .byte	0
08579 1EA6                        3C            .byte	$3C
08580 1EA7                        66            .byte	$66
08581 1EA8                        60            .byte	$60
08582 1EA9                        66            .byte	$66
08583 1EAA                        3C            .byte	$3C
08584 1EAB                        0C            .byte	$C
08585 1EAC                        06            .byte	6
08586 1EAD                        3C            .byte	$3C
08587 1EAE                        00            .byte	0
08588 1EAF                        00            .byte	0
08589                                           ! 1101  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08590 1EB0                        00            .byte	0
08591 1EB1                        10            .byte	$10
08592 1EB2                        38            .byte	$38
08593 1EB3                        6C            .byte	$6C
08594 1EB4                        00            .byte	0
08595 1EB5                        7C            .byte	$7C
08596 1EB6                        C6            .byte	$C6
08597 1EB7                        FE            .byte	$FE
08598 1EB8                        C0            .byte	$C0
08599 1EB9                        C6            .byte	$C6
08600 1EBA                        7C            .byte	$7C
08601 1EBB                        00            .byte	0
08602 1EBC                        00            .byte	0
08603 1EBD                        00            .byte	0
08604                                           ! 1102  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08605 1EBE                        00            .byte	0
08606 1EBF                        00            .byte	0
08607 1EC0                        CC            .byte	$CC
08608 1EC1                        CC            .byte	$CC
08609 1EC2                        00            .byte	0
08610 1EC3                        7C            .byte	$7C
08611 1EC4                        C6            .byte	$C6
08612 1EC5                        FE            .byte	$FE
08613 1EC6                        C0            .byte	$C0
08614 1EC7                        C6            .byte	$C6
08615 1EC8                        7C            .byte	$7C
08616 1EC9                        00            .byte	0
08617 1ECA                        00            .byte	0
08618 1ECB                        00            .byte	0
08619                                           ! 1103  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08620 1ECC                        00            .byte	0
08621 1ECD                        60            .byte	$60
08622 1ECE                        30            .byte	$30
08623 1ECF                        18            .byte	$18
08624 1ED0                        00            .byte	0
08625 1ED1                        7C            .byte	$7C
08626 1ED2                        C6            .byte	$C6
08627 1ED3                        FE            .byte	$FE
08628 1ED4                        C0            .byte	$C0
08629 1ED5                        C6            .byte	$C6
08630 1ED6                        7C            .byte	$7C
08631 1ED7                        00            .byte	0
08632 1ED8                        00            .byte	0
08633 1ED9                        00            .byte	0
08634                                           ! 1104  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08635 1EDA                        00            .byte	0
08636 1EDB                        00            .byte	0
08637 1EDC                        66            .byte	$66
08638 1EDD                        66            .byte	$66
08639 1EDE                        00            .byte	0
08640 1EDF                        38            .byte	$38
08641 1EE0                        18            .byte	$18
08642 1EE1                        18            .byte	$18
08643 1EE2                        18            .byte	$18
08644 1EE3                        18            .byte	$18
08645 1EE4                        3C            .byte	$3C
08646 1EE5                        00            .byte	0
08647 1EE6                        00            .byte	0
08648 1EE7                        00            .byte	0
08649                                           ! 1105  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08650 1EE8                        00            .byte	0
08651 1EE9                        18            .byte	$18
08652 1EEA                        3C            .byte	$3C
08653 1EEB                        66            .byte	$66
08654 1EEC                        00            .byte	0
08655 1EED                        38            .byte	$38
08656 1EEE                        18            .byte	$18
08657 1EEF                        18            .byte	$18
08658 1EF0                        18            .byte	$18
08659 1EF1                        18            .byte	$18
08660 1EF2                        3C            .byte	$3C
08661 1EF3                        00            .byte	0
08662 1EF4                        00            .byte	0
08663 1EF5                        00            .byte	0
08664                                           ! 1106  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08665 1EF6                        00            .byte	0
08666 1EF7                        60            .byte	$60
08667 1EF8                        30            .byte	$30
08668 1EF9                        18            .byte	$18
08669 1EFA                        00            .byte	0
08670 1EFB                        38            .byte	$38
08671 1EFC                        18            .byte	$18
08672 1EFD                        18            .byte	$18
08673 1EFE                        18            .byte	$18
08674 1EFF                        18            .byte	$18
08675 1F00                        3C            .byte	$3C
08676 1F01                        00            .byte	0
08677 1F02                        00            .byte	0
08678 1F03                        00            .byte	0
08679                                           ! 1107  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08680 1F04                        00            .byte	0
08681 1F05                        C6            .byte	$C6
08682 1F06                        C6            .byte	$C6
08683 1F07                        10            .byte	$10
08684 1F08                        38            .byte	$38
08685 1F09                        6C            .byte	$6C
08686 1F0A                        C6            .byte	$C6
08687 1F0B                        C6            .byte	$C6
08688 1F0C                        FE            .byte	$FE
08689 1F0D                        C6            .byte	$C6
08690 1F0E                        C6            .byte	$C6
08691 1F0F                        00            .byte	0
08692 1F10                        00            .byte	0
08693 1F11                        00            .byte	0
08694                                           ! 1108  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08695 1F12                        38            .byte	$38
08696 1F13                        6C            .byte	$6C
08697 1F14                        38            .byte	$38
08698 1F15                        00            .byte	0
08699 1F16                        38            .byte	$38
08700 1F17                        6C            .byte	$6C
08701 1F18                        C6            .byte	$C6
08702 1F19                        C6            .byte	$C6
08703 1F1A                        FE            .byte	$FE
08704 1F1B                        C6            .byte	$C6
08705 1F1C                        C6            .byte	$C6
08706 1F1D                        00            .byte	0
08707 1F1E                        00            .byte	0
08708 1F1F                        00            .byte	0
08709                                           ! 1109  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08710 1F20                        18            .byte	$18
08711 1F21                        30            .byte	$30
08712 1F22                        60            .byte	$60
08713 1F23                        00            .byte	0
08714 1F24                        FE            .byte	$FE
08715 1F25                        66            .byte	$66
08716 1F26                        60            .byte	$60
08717 1F27                        7C            .byte	$7C
08718 1F28                        60            .byte	$60
08719 1F29                        66            .byte	$66
08720 1F2A                        FE            .byte	$FE
08721 1F2B                        00            .byte	0
08722 1F2C                        00            .byte	0
08723 1F2D                        00            .byte	0
08724                                           ! 1110  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08725 1F2E                        00            .byte	0
08726 1F2F                        00            .byte	0
08727 1F30                        00            .byte	0
08728 1F31                        00            .byte	0
08729 1F32                        CC            .byte	$CC
08730 1F33                        76            .byte	$76
08731 1F34                        36            .byte	$36
08732 1F35                        7E            .byte	$7E
08733 1F36                        D8            .byte	$D8
08734 1F37                        D8            .byte	$D8
08735 1F38                        6E            .byte	$6E
08736 1F39                        00            .byte	0
08737 1F3A                        00            .byte	0
08738 1F3B                        00            .byte	0
08739                                           ! 1111  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
08740 1F3C                        00            .byte	0
08741 1F3D                        00            .byte	0
08742 1F3E                        3E            .byte	$3E
08743 1F3F                        6C            .byte	$6C
08744 1F40                        CC            .byte	$CC
08745 1F41                        CC            .byte	$CC
08746 1F42                        FE            .byte	$FE
08747 1F43                        CC            .byte	$CC
08748 1F44                        CC            .byte	$CC
08749 1F45                        CC            .byte	$CC
08750 1F46                        CE            .byte	$CE
08751 1F47                        00            .byte	0
08752 1F48                        00            .byte	0
08753 1F49                        00            .byte	0
08754                                           ! 1112  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08755 1F4A                        00            .byte	0
08756 1F4B                        10            .byte	$10
08757 1F4C                        38            .byte	$38
08758 1F4D                        6C            .byte	$6C
08759 1F4E                        00            .byte	0
08760 1F4F                        7C            .byte	$7C
08761 1F50                        C6            .byte	$C6
08762 1F51                        C6            .byte	$C6
08763 1F52                        C6            .byte	$C6
08764 1F53                        C6            .byte	$C6
08765 1F54                        7C            .byte	$7C
08766 1F55                        00            .byte	0
08767 1F56                        00            .byte	0
08768 1F57                        00            .byte	0
08769                                           ! 1113  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0
08770 1F58                        00            .byte	0
08771 1F59                        00            .byte	0
08772 1F5A                        C6            .byte	$C6
08773 1F5B                        C6            .byte	$C6
08774 1F5C                        00            .byte	0
08775 1F5D                        7C            .byte	$7C
08776 1F5E                        C6            .byte	$C6
08777 1F5F                        C6            .byte	$C6
08778 1F60                        C6            .byte	$C6
08779                                           ! 1113 xc6, 0x7c, 0x00, 0x00, 0x00,
08780 1F61                        C6            .byte	$C6
08781 1F62                        7C            .byte	$7C
08782 1F63                        00            .byte	0
08783 1F64                        00            .byte	0
08784 1F65                        00            .byte	0
08785                                           ! 1114  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08786 1F66                        00            .byte	0
08787 1F67                        60            .byte	$60
08788 1F68                        30            .byte	$30
08789 1F69                        18            .byte	$18
08790 1F6A                        00            .byte	0
08791 1F6B                        7C            .byte	$7C
08792 1F6C                        C6            .byte	$C6
08793 1F6D                        C6            .byte	$C6
08794 1F6E                        C6            .byte	$C6
08795 1F6F                        C6            .byte	$C6
08796 1F70                        7C            .byte	$7C
08797 1F71                        00            .byte	0
08798 1F72                        00            .byte	0
08799 1F73                        00            .byte	0
08800                                           ! 1115  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08801 1F74                        00            .byte	0
08802 1F75                        30            .byte	$30
08803 1F76                        78            .byte	$78
08804 1F77                        CC            .byte	$CC
08805 1F78                        00            .byte	0
08806 1F79                        CC            .byte	$CC
08807 1F7A                        CC            .byte	$CC
08808 1F7B                        CC            .byte	$CC
08809 1F7C                        CC            .byte	$CC
08810 1F7D                        CC            .byte	$CC
08811 1F7E                        76            .byte	$76
08812 1F7F                        00            .byte	0
08813 1F80                        00            .byte	0
08814 1F81                        00            .byte	0
08815                                           ! 1116  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08816 1F82                        00            .byte	0
08817 1F83                        60            .byte	$60
08818 1F84                        30            .byte	$30
08819 1F85                        18            .byte	$18
08820 1F86                        00            .byte	0
08821 1F87                        CC            .byte	$CC
08822 1F88                        CC            .byte	$CC
08823 1F89                        CC            .byte	$CC
08824 1F8A                        CC            .byte	$CC
08825 1F8B                        CC            .byte	$CC
08826 1F8C                        76            .byte	$76
08827 1F8D                        00            .byte	0
08828 1F8E                        00            .byte	0
08829 1F8F                        00            .byte	0
08830                                           ! 1117  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
08831 1F90                        00            .byte	0
08832 1F91                        00            .byte	0
08833 1F92                        C6            .byte	$C6
08834 1F93                        C6            .byte	$C6
08835 1F94                        00            .byte	0
08836 1F95                        C6            .byte	$C6
08837 1F96                        C6            .byte	$C6
08838 1F97                        C6            .byte	$C6
08839 1F98                        C6            .byte	$C6
08840 1F99                        7E            .byte	$7E
08841 1F9A                        06            .byte	6
08842 1F9B                        0C            .byte	$C
08843 1F9C                        78            .byte	$78
08844 1F9D                        00            .byte	0
08845                                           ! 1118  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08846 1F9E                        00            .byte	0
08847 1F9F                        C6            .byte	$C6
08848 1FA0                        C6            .byte	$C6
08849 1FA1                        38            .byte	$38
08850 1FA2                        6C            .byte	$6C
08851 1FA3                        C6            .byte	$C6
08852 1FA4                        C6            .byte	$C6
08853 1FA5                        C6            .byte	$C6
08854 1FA6                        C6            .byte	$C6
08855 1FA7                        6C            .byte	$6C
08856 1FA8                        38            .byte	$38
08857 1FA9                        00            .byte	0
08858 1FAA                        00            .byte	0
08859 1FAB                        00            .byte	0
08860                                           ! 1119  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08861 1FAC                        00            .byte	0
08862 1FAD                        C6            .byte	$C6
08863 1FAE                        C6            .byte	$C6
08864 1FAF                        00            .byte	0
08865 1FB0                        C6            .byte	$C6
08866 1FB1                        C6            .byte	$C6
08867 1FB2                        C6            .byte	$C6
08868 1FB3                        C6            .byte	$C6
08869 1FB4                        C6            .byte	$C6
08870 1FB5                        C6            .byte	$C6
08871 1FB6                        7C            .byte	$7C
08872 1FB7                        00            .byte	0
08873 1FB8                        00            .byte	0
08874 1FB9                        00            .byte	0
08875                                           ! 1120  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
08876 1FBA                        00            .byte	0
08877 1FBB                        18            .byte	$18
08878 1FBC                        18            .byte	$18
08879 1FBD                        3C            .byte	$3C
08880 1FBE                        66            .byte	$66
08881 1FBF                        60            .byte	$60
08882 1FC0                        60            .byte	$60
08883 1FC1                        66            .byte	$66
08884 1FC2                        3C            .byte	$3C
08885 1FC3                        18            .byte	$18
08886 1FC4                        18            .byte	$18
08887 1FC5                        00            .byte	0
08888 1FC6                        00            .byte	0
08889 1FC7                        00            .byte	0
08890                                           ! 1121  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
08891 1FC8                        00            .byte	0
08892 1FC9                        38            .byte	$38
08893 1FCA                        6C            .byte	$6C
08894 1FCB                        64            .byte	$64
08895 1FCC                        60            .byte	$60
08896 1FCD                        F0            .byte	$F0
08897 1FCE                        60            .byte	$60
08898 1FCF                        60            .byte	$60
08899 1FD0                        60            .byte	$60
08900 1FD1                        E6            .byte	$E6
08901 1FD2                        FC            .byte	$FC
08902 1FD3                        00            .byte	0
08903 1FD4                        00            .byte	0
08904 1FD5                        00            .byte	0
08905                                           ! 1122  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
08906 1FD6                        00            .byte	0
08907 1FD7                        00            .byte	0
08908 1FD8                        66            .byte	$66
08909 1FD9                        66            .byte	$66
08910 1FDA                        3C            .byte	$3C
08911 1FDB                        18            .byte	$18
08912 1FDC                        7E            .byte	$7E
08913 1FDD                        18            .byte	$18
08914 1FDE                        7E            .byte	$7E
08915 1FDF                        18            .byte	$18
08916 1FE0                        18            .byte	$18
08917 1FE1                        00            .byte	0
08918 1FE2                        00            .byte	0
08919 1FE3                        00            .byte	0
08920                                           ! 1123  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
08921 1FE4                        00            .byte	0
08922 1FE5                        F8            .byte	$F8
08923 1FE6                        CC            .byte	$CC
08924 1FE7                        CC            .byte	$CC
08925 1FE8                        F8            .byte	$F8
08926 1FE9                        C4            .byte	$C4
08927 1FEA                        CC            .byte	$CC
08928 1FEB                        DE            .byte	$DE
08929 1FEC                        CC            .byte	$CC
08930 1FED                        CC            .byte	$CC
08931 1FEE                        C6            .byte	$C6
08932 1FEF                        00            .byte	0
08933 1FF0                        00            .byte	0
08934 1FF1                        00            .byte	0
08935                                           ! 1124  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
08936 1FF2                        00            .byte	0
08937 1FF3                        0E            .byte	$E
08938 1FF4                        1B            .byte	$1B
08939 1FF5                        18            .byte	$18
08940 1FF6                        18            .byte	$18
08941 1FF7                        18            .byte	$18
08942 1FF8                        7E            .byte	$7E
08943 1FF9                        18            .byte	$18
08944 1FFA                        18            .byte	$18
08945 1FFB                        18            .byte	$18
08946 1FFC                        18            .byte	$18
08947 1FFD                        D8            .byte	$D8
08948 1FFE                        70            .byte	$70
08949 1FFF                        00            .byte	0
08950                                           ! 1125  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08951 2000                        00            .byte	0
08952 2001                        18            .byte	$18
08953 2002                        30            .byte	$30
08954 2003                        60            .byte	$60
08955 2004                        00            .byte	0
08956 2005                        78            .byte	$78
08957 2006                        0C            .byte	$C
08958 2007                        7C            .byte	$7C
08959 2008                        CC            .byte	$CC
08960 2009                        CC            .byte	$CC
08961 200A                        76            .byte	$76
08962 200B                        00            .byte	0
08963 200C                        00            .byte	0
08964 200D                        00            .byte	0
08965                                           ! 1126  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08966 200E                        00            .byte	0
08967 200F                        0C            .byte	$C
08968 2010                        18            .byte	$18
08969 2011                        30            .byte	$30
08970 2012                        00            .byte	0
08971 2013                        38            .byte	$38
08972 2014                        18            .byte	$18
08973 2015                        18            .byte	$18
08974 2016                        18            .byte	$18
08975 2017                        18            .byte	$18
08976 2018                        3C            .byte	$3C
08977 2019                        00            .byte	0
08978 201A                        00            .byte	0
08979 201B                        00            .byte	0
08980                                           ! 1127  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08981 201C                        00            .byte	0
08982 201D                        18            .byte	$18
08983 201E                        30            .byte	$30
08984 201F                        60            .byte	$60
08985 2020                        00            .byte	0
08986 2021                        7C            .byte	$7C
08987 2022                        C6            .byte	$C6
08988 2023                        C6            .byte	$C6
08989 2024                        C6            .byte	$C6
08990 2025                        C6            .byte	$C6
08991 2026                        7C            .byte	$7C
08992 2027                        00            .byte	0
08993 2028                        00            .byte	0
08994 2029                        00            .byte	0
08995                                           ! 1128  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08996 202A                        00            .byte	0
08997 202B                        18            .byte	$18
08998 202C                        30            .byte	$30
08999 202D                        60            .byte	$60
09000 202E                        00            .byte	0
09001 202F                        CC            .byte	$CC
09002 2030                        CC            .byte	$CC
09003 2031                        CC            .byte	$CC
09004 2032                        CC            .byte	$CC
09005 2033                        CC            .byte	$CC
09006 2034                        76            .byte	$76
09007 2035                        00            .byte	0
09008 2036                        00            .byte	0
09009 2037                        00            .byte	0
09010                                           ! 1129  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09011 2038                        00            .byte	0
09012 2039                        00            .byte	0
09013 203A                        76            .byte	$76
09014 203B                        DC            .byte	$DC
09015 203C                        00            .byte	0
09016 203D                        DC            .byte	$DC
09017 203E                        66            .byte	$66
09018 203F                        66            .byte	$66
09019 2040                        66            .byte	$66
09020 2041                        66            .byte	$66
09021 2042                        66            .byte	$66
09022 2043                        00            .byte	0
09023 2044                        00            .byte	0
09024 2045                        00            .byte	0
09025                                           ! 1130  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09026 2046                        76            .byte	$76
09027 2047                        DC            .byte	$DC
09028 2048                        00            .byte	0
09029 2049                        C6            .byte	$C6
09030 204A                        E6            .byte	$E6
09031 204B                        F6            .byte	$F6
09032 204C                        FE            .byte	$FE
09033 204D                        DE            .byte	$DE
09034 204E                        CE            .byte	$CE
09035 204F                        C6            .byte	$C6
09036 2050                        C6            .byte	$C6
09037 2051                        00            .byte	0
09038 2052                        00            .byte	0
09039 2053                        00            .byte	0
09040                                           ! 1131  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09041 2054                        00            .byte	0
09042 2055                        3C            .byte	$3C
09043 2056                        6C            .byte	$6C
09044 2057                        6C            .byte	$6C
09045 2058                        3E            .byte	$3E
09046 2059                        00            .byte	0
09047 205A                        7E            .byte	$7E
09048 205B                        00            .byte	0
09049 205C                        00            .byte	0
09050 205D                        00            .byte	0
09051 205E                        00            .byte	0
09052 205F                        00            .byte	0
09053 2060                        00            .byte	0
09054 2061                        00            .byte	0
09055                                           ! 1132  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09056 2062                        00            .byte	0
09057 2063                        38            .byte	$38
09058 2064                        6C            .byte	$6C
09059 2065                        6C            .byte	$6C
09060 2066                        38            .byte	$38
09061 2067                        00            .byte	0
09062 2068                        7C            .byte	$7C
09063 2069                        00            .byte	0
09064 206A                        00            .byte	0
09065 206B                        00            .byte	0
09066 206C                        00            .byte	0
09067 206D                        00            .byte	0
09068 206E                        00            .byte	0
09069 206F                        00            .byte	0
09070                                           ! 1133  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09071 2070                        00            .byte	0
09072 2071                        00            .byte	0
09073 2072                        30            .byte	$30
09074 2073                        30            .byte	$30
09075 2074                        00            .byte	0
09076 2075                        30            .byte	$30
09077 2076                        30            .byte	$30
09078 2077                        60            .byte	$60
09079 2078                        C6            .byte	$C6
09080 2079                        C6            .byte	$C6
09081 207A                        7C            .byte	$7C
09082 207B                        00            .byte	0
09083 207C                        00            .byte	0
09084 207D                        00            .byte	0
09085                                           ! 1134  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09086 207E                        00            .byte	0
09087 207F                        00            .byte	0
09088 2080                        00            .byte	0
09089 2081                        00            .byte	0
09090 2082                        00            .byte	0
09091 2083                        00            .byte	0
09092 2084                        FE            .byte	$FE
09093 2085                        C0            .byte	$C0
09094 2086                        C0            .byte	$C0
09095 2087                        C0            .byte	$C0
09096 2088                        00            .byte	0
09097 2089                        00            .byte	0
09098 208A                        00            .byte	0
09099 208B                        00            .byte	0
09100                                           ! 1135  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09101 208C                        00            .byte	0
09102 208D                        00            .byte	0
09103 208E                        00            .byte	0
09104 208F                        00            .byte	0
09105 2090                        00            .byte	0
09106 2091                        00            .byte	0
09107 2092                        FE            .byte	$FE
09108 2093                        06            .byte	6
09109 2094                        06            .byte	6
09110 2095                        06            .byte	6
09111 2096                        00            .byte	0
09112 2097                        00            .byte	0
09113 2098                        00            .byte	0
09114 2099                        00            .byte	0
09115                                           ! 1136  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09116 209A                        00            .byte	0
09117 209B                        C0            .byte	$C0
09118 209C                        C0            .byte	$C0
09119 209D                        C6            .byte	$C6
09120 209E                        CC            .byte	$CC
09121 209F                        D8            .byte	$D8
09122 20A0                        30            .byte	$30
09123 20A1                        60            .byte	$60
09124 20A2                        DC            .byte	$DC
09125 20A3                        86            .byte	$86
09126 20A4                        0C            .byte	$C
09127 20A5                        18            .byte	$18
09128 20A6                        3E            .byte	$3E
09129 20A7                        00            .byte	0
09130                                           ! 1137  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3
09131 20A8                        00            .byte	0
09132 20A9                        C0            .byte	$C0
09133 20AA                        C0            .byte	$C0
09134 20AB                        C6            .byte	$C6
09135 20AC                        CC            .byte	$CC
09136 20AD                        D8            .byte	$D8
09137 20AE                        30            .byte	$30
09138 20AF                        66            .byte	$66
09139 20B0                        CE            .byte	$CE
09140 20B1                        9E            .byte	$9E
09141                                           ! 1137 e, 0x06, 0x06, 0x00,
09142 20B2                        3E            .byte	$3E
09143 20B3                        06            .byte	6
09144 20B4                        06            .byte	6
09145 20B5                        00            .byte	0
09146                                           ! 1138  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09147 20B6                        00            .byte	0
09148 20B7                        00            .byte	0
09149 20B8                        18            .byte	$18
09150 20B9                        18            .byte	$18
09151 20BA                        00            .byte	0
09152 20BB                        18            .byte	$18
09153 20BC                        18            .byte	$18
09154 20BD                        3C            .byte	$3C
09155 20BE                        3C            .byte	$3C
09156 20BF                        3C            .byte	$3C
09157 20C0                        18            .byte	$18
09158 20C1                        00            .byte	0
09159 20C2                        00            .byte	0
09160 20C3                        00            .byte	0
09161                                           ! 1139  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09162 20C4                        00            .byte	0
09163 20C5                        00            .byte	0
09164 20C6                        00            .byte	0
09165 20C7                        00            .byte	0
09166 20C8                        36            .byte	$36
09167 20C9                        6C            .byte	$6C
09168 20CA                        D8            .byte	$D8
09169 20CB                        6C            .byte	$6C
09170 20CC                        36            .byte	$36
09171 20CD                        00            .byte	0
09172 20CE                        00            .byte	0
09173 20CF                        00            .byte	0
09174 20D0                        00            .byte	0
09175 20D1                        00            .byte	0
09176                                           ! 1140  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09177 20D2                        00            .byte	0
09178 20D3                        00            .byte	0
09179 20D4                        00            .byte	0
09180 20D5                        00            .byte	0
09181 20D6                        D8            .byte	$D8
09182 20D7                        6C            .byte	$6C
09183 20D8                        36            .byte	$36
09184 20D9                        6C            .byte	$6C
09185 20DA                        D8            .byte	$D8
09186 20DB                        00            .byte	0
09187 20DC                        00            .byte	0
09188 20DD                        00            .byte	0
09189 20DE                        00            .byte	0
09190 20DF                        00            .byte	0
09191                                           ! 1141  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09192 20E0                        11            .byte	$11
09193 20E1                        44            .byte	$44
09194 20E2                        11            .byte	$11
09195 20E3                        44            .byte	$44
09196 20E4                        11            .byte	$11
09197 20E5                        44            .byte	$44
09198 20E6                        11            .byte	$11
09199 20E7                        44            .byte	$44
09200 20E8                        11            .byte	$11
09201 20E9                        44            .byte	$44
09202 20EA                        11            .byte	$11
09203 20EB                        44            .byte	$44
09204 20EC                        11            .byte	$11
09205 20ED                        44            .byte	$44
09206                                           ! 1142  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09207 20EE                        55            .byte	$55
09208 20EF                        AA            .byte	$AA
09209 20F0                        55            .byte	$55
09210 20F1                        AA            .byte	$AA
09211 20F2                        55            .byte	$55
09212 20F3                        AA            .byte	$AA
09213 20F4                        55            .byte	$55
09214 20F5                        AA            .byte	$AA
09215 20F6                        55            .byte	$55
09216 20F7                        AA            .byte	$AA
09217 20F8                        55            .byte	$55
09218 20F9                        AA            .byte	$AA
09219 20FA                        55            .byte	$55
09220 20FB                        AA            .byte	$AA
09221                                           ! 1143  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09222 20FC                        DD            .byte	$DD
09223 20FD                        77            .byte	$77
09224 20FE                        DD            .byte	$DD
09225 20FF                        77            .byte	$77
09226 2100                        DD            .byte	$DD
09227 2101                        77            .byte	$77
09228 2102                        DD            .byte	$DD
09229 2103                        77            .byte	$77
09230 2104                        DD            .byte	$DD
09231 2105                        77            .byte	$77
09232 2106                        DD            .byte	$DD
09233 2107                        77            .byte	$77
09234 2108                        DD            .byte	$DD
09235 2109                        77            .byte	$77
09236                                           ! 1144  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09237 210A                        18            .byte	$18
09238 210B                        18            .byte	$18
09239 210C                        18            .byte	$18
09240 210D                        18            .byte	$18
09241 210E                        18            .byte	$18
09242 210F                        18            .byte	$18
09243 2110                        18            .byte	$18
09244 2111                        18            .byte	$18
09245 2112                        18            .byte	$18
09246 2113                        18            .byte	$18
09247 2114                        18            .byte	$18
09248 2115                        18            .byte	$18
09249 2116                        18            .byte	$18
09250 2117                        18            .byte	$18
09251                                           ! 1145  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09252 2118                        18            .byte	$18
09253 2119                        18            .byte	$18
09254 211A                        18            .byte	$18
09255 211B                        18            .byte	$18
09256 211C                        18            .byte	$18
09257 211D                        18            .byte	$18
09258 211E                        18            .byte	$18
09259 211F                        F8            .byte	$F8
09260 2120                        18            .byte	$18
09261 2121                        18            .byte	$18
09262 2122                        18            .byte	$18
09263 2123                        18            .byte	$18
09264 2124                        18            .byte	$18
09265 2125                        18            .byte	$18
09266                                           ! 1146  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09267 2126                        18            .byte	$18
09268 2127                        18            .byte	$18
09269 2128                        18            .byte	$18
09270 2129                        18            .byte	$18
09271 212A                        18            .byte	$18
09272 212B                        F8            .byte	$F8
09273 212C                        18            .byte	$18
09274 212D                        F8            .byte	$F8
09275 212E                        18            .byte	$18
09276 212F                        18            .byte	$18
09277 2130                        18            .byte	$18
09278 2131                        18            .byte	$18
09279 2132                        18            .byte	$18
09280 2133                        18            .byte	$18
09281                                           ! 1147  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09282 2134                        36            .byte	$36
09283 2135                        36            .byte	$36
09284 2136                        36            .byte	$36
09285 2137                        36            .byte	$36
09286 2138                        36            .byte	$36
09287 2139                        36            .byte	$36
09288 213A                        36            .byte	$36
09289 213B                        F6            .byte	$F6
09290 213C                        36            .byte	$36
09291 213D                        36            .byte	$36
09292 213E                        36            .byte	$36
09293 213F                        36            .byte	$36
09294 2140                        36            .byte	$36
09295 2141                        36            .byte	$36
09296                                           ! 1148  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09297 2142                        00            .byte	0
09298 2143                        00            .byte	0
09299 2144                        00            .byte	0
09300 2145                        00            .byte	0
09301 2146                        00            .byte	0
09302 2147                        00            .byte	0
09303 2148                        00            .byte	0
09304 2149                        FE            .byte	$FE
09305 214A                        36            .byte	$36
09306 214B                        36            .byte	$36
09307 214C                        36            .byte	$36
09308 214D                        36            .byte	$36
09309 214E                        36            .byte	$36
09310 214F                        36            .byte	$36
09311                                           ! 1149  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09312 2150                        00            .byte	0
09313 2151                        00            .byte	0
09314 2152                        00            .byte	0
09315 2153                        00            .byte	0
09316 2154                        00            .byte	0
09317 2155                        F8            .byte	$F8
09318 2156                        18            .byte	$18
09319 2157                        F8            .byte	$F8
09320 2158                        18            .byte	$18
09321 2159                        18            .byte	$18
09322 215A                        18            .byte	$18
09323 215B                        18            .byte	$18
09324 215C                        18            .byte	$18
09325 215D                        18            .byte	$18
09326                                           ! 1150  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09327 215E                        36            .byte	$36
09328 215F                        36            .byte	$36
09329 2160                        36            .byte	$36
09330 2161                        36            .byte	$36
09331 2162                        36            .byte	$36
09332 2163                        F6            .byte	$F6
09333 2164                        06            .byte	6
09334 2165                        F6            .byte	$F6
09335 2166                        36            .byte	$36
09336 2167                        36            .byte	$36
09337 2168                        36            .byte	$36
09338 2169                        36            .byte	$36
09339 216A                        36            .byte	$36
09340 216B                        36            .byte	$36
09341                                           ! 1151  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09342 216C                        36            .byte	$36
09343 216D                        36            .byte	$36
09344 216E                        36            .byte	$36
09345 216F                        36            .byte	$36
09346 2170                        36            .byte	$36
09347 2171                        36            .byte	$36
09348 2172                        36            .byte	$36
09349 2173                        36            .byte	$36
09350 2174                        36            .byte	$36
09351 2175                        36            .byte	$36
09352 2176                        36            .byte	$36
09353 2177                        36            .byte	$36
09354 2178                        36            .byte	$36
09355 2179                        36            .byte	$36
09356                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09357 217A                        00            .byte	0
09358 217B                        00            .byte	0
09359 217C                        00            .byte	0
09360 217D                        00            .byte	0
09361 217E                        00            .byte	0
09362 217F                        FE            .byte	$FE
09363 2180                        06            .byte	6
09364 2181                        F6            .byte	$F6
09365 2182                        36            .byte	$36
09366 2183                        36            .byte	$36
09367 2184                        36            .byte	$36
09368 2185                        36            .byte	$36
09369 2186                        36            .byte	$36
09370 2187                        36            .byte	$36
09371                                           ! 1153  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09372 2188                        36            .byte	$36
09373 2189                        36            .byte	$36
09374 218A                        36            .byte	$36
09375 218B                        36            .byte	$36
09376 218C                        36            .byte	$36
09377 218D                        F6            .byte	$F6
09378 218E                        06            .byte	6
09379 218F                        FE            .byte	$FE
09380 2190                        00            .byte	0
09381 2191                        00            .byte	0
09382 2192                        00            .byte	0
09383 2193                        00            .byte	0
09384 2194                        00            .byte	0
09385 2195                        00            .byte	0
09386                                           ! 1154  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09387 2196                        36            .byte	$36
09388 2197                        36            .byte	$36
09389 2198                        36            .byte	$36
09390 2199                        36            .byte	$36
09391 219A                        36            .byte	$36
09392 219B                        36            .byte	$36
09393 219C                        36            .byte	$36
09394 219D                        FE            .byte	$FE
09395 219E                        00            .byte	0
09396 219F                        00            .byte	0
09397 21A0                        00            .byte	0
09398 21A1                        00            .byte	0
09399 21A2                        00            .byte	0
09400 21A3                        00            .byte	0
09401                                           ! 1155  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09402 21A4                        18            .byte	$18
09403 21A5                        18            .byte	$18
09404 21A6                        18            .byte	$18
09405 21A7                        18            .byte	$18
09406 21A8                        18            .byte	$18
09407 21A9                        F8            .byte	$F8
09408 21AA                        18            .byte	$18
09409 21AB                        F8            .byte	$F8
09410 21AC                        00            .byte	0
09411 21AD                        00            .byte	0
09412 21AE                        00            .byte	0
09413 21AF                        00            .byte	0
09414 21B0                        00            .byte	0
09415 21B1                        00            .byte	0
09416                                           ! 1156  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09417 21B2                        00            .byte	0
09418 21B3                        00            .byte	0
09419 21B4                        00            .byte	0
09420 21B5                        00            .byte	0
09421 21B6                        00            .byte	0
09422 21B7                        00            .byte	0
09423 21B8                        00            .byte	0
09424 21B9                        F8            .byte	$F8
09425 21BA                        18            .byte	$18
09426 21BB                        18            .byte	$18
09427 21BC                        18            .byte	$18
09428 21BD                        18            .byte	$18
09429 21BE                        18            .byte	$18
09430 21BF                        18            .byte	$18
09431                                           ! 1157  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09432 21C0                        18            .byte	$18
09433 21C1                        18            .byte	$18
09434 21C2                        18            .byte	$18
09435 21C3                        18            .byte	$18
09436 21C4                        18            .byte	$18
09437 21C5                        18            .byte	$18
09438 21C6                        18            .byte	$18
09439 21C7                        1F            .byte	$1F
09440 21C8                        00            .byte	0
09441 21C9                        00            .byte	0
09442 21CA                        00            .byte	0
09443 21CB                        00            .byte	0
09444 21CC                        00            .byte	0
09445 21CD                        00            .byte	0
09446                                           ! 1158  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09447 21CE                        18            .byte	$18
09448 21CF                        18            .byte	$18
09449 21D0                        18            .byte	$18
09450 21D1                        18            .byte	$18
09451 21D2                        18            .byte	$18
09452 21D3                        18            .byte	$18
09453 21D4                        18            .byte	$18
09454 21D5                        FF            .byte	$FF
09455 21D6                        00            .byte	0
09456 21D7                        00            .byte	0
09457 21D8                        00            .byte	0
09458 21D9                        00            .byte	0
09459 21DA                        00            .byte	0
09460 21DB                        00            .byte	0
09461                                           ! 1159  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09462 21DC                        00            .byte	0
09463 21DD                        00            .byte	0
09464 21DE                        00            .byte	0
09465 21DF                        00            .byte	0
09466 21E0                        00            .byte	0
09467 21E1                        00            .byte	0
09468 21E2                        00            .byte	0
09469 21E3                        FF            .byte	$FF
09470 21E4                        18            .byte	$18
09471 21E5                        18            .byte	$18
09472 21E6                        18            .byte	$18
09473 21E7                        18            .byte	$18
09474 21E8                        18            .byte	$18
09475 21E9                        18            .byte	$18
09476                                           ! 1160  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09477 21EA                        18            .byte	$18
09478 21EB                        18            .byte	$18
09479 21EC                        18            .byte	$18
09480 21ED                        18            .byte	$18
09481 21EE                        18            .byte	$18
09482 21EF                        18            .byte	$18
09483 21F0                        18            .byte	$18
09484 21F1                        1F            .byte	$1F
09485 21F2                        18            .byte	$18
09486 21F3                        18            .byte	$18
09487 21F4                        18            .byte	$18
09488 21F5                        18            .byte	$18
09489 21F6                        18            .byte	$18
09490 21F7                        18            .byte	$18
09491                                           ! 1161  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
09492 21F8                        00            .byte	0
09493 21F9                        00            .byte	0
09494 21FA                        00            .byte	0
09495 21FB                        00            .byte	0
09496 21FC                        00            .byte	0
09497 21FD                        00            .byte	0
09498 21FE                        00            .byte	0
09499 21FF                        FF            .byte	$FF
09500 2200                        00            .byte	0
09501 2201                        00            .byte	0
09502 2202                        00            .byte	0
09503                                           ! 1161  0x00, 0x00,
09504 2203                        00            .byte	0
09505 2204                        00            .byte	0
09506 2205                        00            .byte	0
09507                                           ! 1162  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09508 2206                        18            .byte	$18
09509 2207                        18            .byte	$18
09510 2208                        18            .byte	$18
09511 2209                        18            .byte	$18
09512 220A                        18            .byte	$18
09513 220B                        18            .byte	$18
09514 220C                        18            .byte	$18
09515 220D                        FF            .byte	$FF
09516 220E                        18            .byte	$18
09517 220F                        18            .byte	$18
09518 2210                        18            .byte	$18
09519 2211                        18            .byte	$18
09520 2212                        18            .byte	$18
09521 2213                        18            .byte	$18
09522                                           ! 1163  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09523 2214                        18            .byte	$18
09524 2215                        18            .byte	$18
09525 2216                        18            .byte	$18
09526 2217                        18            .byte	$18
09527 2218                        18            .byte	$18
09528 2219                        1F            .byte	$1F
09529 221A                        18            .byte	$18
09530 221B                        1F            .byte	$1F
09531 221C                        18            .byte	$18
09532 221D                        18            .byte	$18
09533 221E                        18            .byte	$18
09534 221F                        18            .byte	$18
09535 2220                        18            .byte	$18
09536 2221                        18            .byte	$18
09537                                           ! 1164  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09538 2222                        36            .byte	$36
09539 2223                        36            .byte	$36
09540 2224                        36            .byte	$36
09541 2225                        36            .byte	$36
09542 2226                        36            .byte	$36
09543 2227                        36            .byte	$36
09544 2228                        36            .byte	$36
09545 2229                        37            .byte	$37
09546 222A                        36            .byte	$36
09547 222B                        36            .byte	$36
09548 222C                        36            .byte	$36
09549 222D                        36            .byte	$36
09550 222E                        36            .byte	$36
09551 222F                        36            .byte	$36
09552                                           ! 1165  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09553 2230                        36            .byte	$36
09554 2231                        36            .byte	$36
09555 2232                        36            .byte	$36
09556 2233                        36            .byte	$36
09557 2234                        36            .byte	$36
09558 2235                        37            .byte	$37
09559 2236                        30            .byte	$30
09560 2237                        3F            .byte	$3F
09561 2238                        00            .byte	0
09562 2239                        00            .byte	0
09563 223A                        00            .byte	0
09564 223B                        00            .byte	0
09565 223C                        00            .byte	0
09566 223D                        00            .byte	0
09567                                           ! 1166  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09568 223E                        00            .byte	0
09569 223F                        00            .byte	0
09570 2240                        00            .byte	0
09571 2241                        00            .byte	0
09572 2242                        00            .byte	0
09573 2243                        3F            .byte	$3F
09574 2244                        30            .byte	$30
09575 2245                        37            .byte	$37
09576 2246                        36            .byte	$36
09577 2247                        36            .byte	$36
09578 2248                        36            .byte	$36
09579 2249                        36            .byte	$36
09580 224A                        36            .byte	$36
09581 224B                        36            .byte	$36
09582                                           ! 1167  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09583 224C                        36            .byte	$36
09584 224D                        36            .byte	$36
09585 224E                        36            .byte	$36
09586 224F                        36            .byte	$36
09587 2250                        36            .byte	$36
09588 2251                        F7            .byte	$F7
09589 2252                        00            .byte	0
09590 2253                        FF            .byte	$FF
09591 2254                        00            .byte	0
09592 2255                        00            .byte	0
09593 2256                        00            .byte	0
09594 2257                        00            .byte	0
09595 2258                        00            .byte	0
09596 2259                        00            .byte	0
09597                                           ! 1168  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09598 225A                        00            .byte	0
09599 225B                        00            .byte	0
09600 225C                        00            .byte	0
09601 225D                        00            .byte	0
09602 225E                        00            .byte	0
09603 225F                        FF            .byte	$FF
09604 2260                        00            .byte	0
09605 2261                        F7            .byte	$F7
09606 2262                        36            .byte	$36
09607 2263                        36            .byte	$36
09608 2264                        36            .byte	$36
09609 2265                        36            .byte	$36
09610 2266                        36            .byte	$36
09611 2267                        36            .byte	$36
09612                                           ! 1169  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09613 2268                        36            .byte	$36
09614 2269                        36            .byte	$36
09615 226A                        36            .byte	$36
09616 226B                        36            .byte	$36
09617 226C                        36            .byte	$36
09618 226D                        37            .byte	$37
09619 226E                        30            .byte	$30
09620 226F                        37            .byte	$37
09621 2270                        36            .byte	$36
09622 2271                        36            .byte	$36
09623 2272                        36            .byte	$36
09624 2273                        36            .byte	$36
09625 2274                        36            .byte	$36
09626 2275                        36            .byte	$36
09627                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09628 2276                        00            .byte	0
09629 2277                        00            .byte	0
09630 2278                        00            .byte	0
09631 2279                        00            .byte	0
09632 227A                        00            .byte	0
09633 227B                        FF            .byte	$FF
09634 227C                        00            .byte	0
09635 227D                        FF            .byte	$FF
09636 227E                        00            .byte	0
09637 227F                        00            .byte	0
09638 2280                        00            .byte	0
09639 2281                        00            .byte	0
09640 2282                        00            .byte	0
09641 2283                        00            .byte	0
09642                                           ! 1171  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09643 2284                        36            .byte	$36
09644 2285                        36            .byte	$36
09645 2286                        36            .byte	$36
09646 2287                        36            .byte	$36
09647 2288                        36            .byte	$36
09648 2289                        F7            .byte	$F7
09649 228A                        00            .byte	0
09650 228B                        F7            .byte	$F7
09651 228C                        36            .byte	$36
09652 228D                        36            .byte	$36
09653 228E                        36            .byte	$36
09654 228F                        36            .byte	$36
09655 2290                        36            .byte	$36
09656 2291                        36            .byte	$36
09657                                           ! 1172  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09658 2292                        18            .byte	$18
09659 2293                        18            .byte	$18
09660 2294                        18            .byte	$18
09661 2295                        18            .byte	$18
09662 2296                        18            .byte	$18
09663 2297                        FF            .byte	$FF
09664 2298                        00            .byte	0
09665 2299                        FF            .byte	$FF
09666 229A                        00            .byte	0
09667 229B                        00            .byte	0
09668 229C                        00            .byte	0
09669 229D                        00            .byte	0
09670 229E                        00            .byte	0
09671 229F                        00            .byte	0
09672                                           ! 1173  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09673 22A0                        36            .byte	$36
09674 22A1                        36            .byte	$36
09675 22A2                        36            .byte	$36
09676 22A3                        36            .byte	$36
09677 22A4                        36            .byte	$36
09678 22A5                        36            .byte	$36
09679 22A6                        36            .byte	$36
09680 22A7                        FF            .byte	$FF
09681 22A8                        00            .byte	0
09682 22A9                        00            .byte	0
09683 22AA                        00            .byte	0
09684 22AB                        00            .byte	0
09685 22AC                        00            .byte	0
09686 22AD                        00            .byte	0
09687                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09688 22AE                        00            .byte	0
09689 22AF                        00            .byte	0
09690 22B0                        00            .byte	0
09691 22B1                        00            .byte	0
09692 22B2                        00            .byte	0
09693 22B3                        FF            .byte	$FF
09694 22B4                        00            .byte	0
09695 22B5                        FF            .byte	$FF
09696 22B6                        18            .byte	$18
09697 22B7                        18            .byte	$18
09698 22B8                        18            .byte	$18
09699 22B9                        18            .byte	$18
09700 22BA                        18            .byte	$18
09701 22BB                        18            .byte	$18
09702                                           ! 1175  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09703 22BC                        00            .byte	0
09704 22BD                        00            .byte	0
09705 22BE                        00            .byte	0
09706 22BF                        00            .byte	0
09707 22C0                        00            .byte	0
09708 22C1                        00            .byte	0
09709 22C2                        00            .byte	0
09710 22C3                        FF            .byte	$FF
09711 22C4                        36            .byte	$36
09712 22C5                        36            .byte	$36
09713 22C6                        36            .byte	$36
09714 22C7                        36            .byte	$36
09715 22C8                        36            .byte	$36
09716 22C9                        36            .byte	$36
09717                                           ! 1176  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09718 22CA                        36            .byte	$36
09719 22CB                        36            .byte	$36
09720 22CC                        36            .byte	$36
09721 22CD                        36            .byte	$36
09722 22CE                        36            .byte	$36
09723 22CF                        36            .byte	$36
09724 22D0                        36            .byte	$36
09725 22D1                        3F            .byte	$3F
09726 22D2                        00            .byte	0
09727 22D3                        00            .byte	0
09728 22D4                        00            .byte	0
09729 22D5                        00            .byte	0
09730 22D6                        00            .byte	0
09731 22D7                        00            .byte	0
09732                                           ! 1177  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09733 22D8                        18            .byte	$18
09734 22D9                        18            .byte	$18
09735 22DA                        18            .byte	$18
09736 22DB                        18            .byte	$18
09737 22DC                        18            .byte	$18
09738 22DD                        1F            .byte	$1F
09739 22DE                        18            .byte	$18
09740 22DF                        1F            .byte	$1F
09741 22E0                        00            .byte	0
09742 22E1                        00            .byte	0
09743 22E2                        00            .byte	0
09744 22E3                        00            .byte	0
09745 22E4                        00            .byte	0
09746 22E5                        00            .byte	0
09747                                           ! 1178  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09748 22E6                        00            .byte	0
09749 22E7                        00            .byte	0
09750 22E8                        00            .byte	0
09751 22E9                        00            .byte	0
09752 22EA                        00            .byte	0
09753 22EB                        1F            .byte	$1F
09754 22EC                        18            .byte	$18
09755 22ED                        1F            .byte	$1F
09756 22EE                        18            .byte	$18
09757 22EF                        18            .byte	$18
09758 22F0                        18            .byte	$18
09759 22F1                        18            .byte	$18
09760 22F2                        18            .byte	$18
09761 22F3                        18            .byte	$18
09762                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09763 22F4                        00            .byte	0
09764 22F5                        00            .byte	0
09765 22F6                        00            .byte	0
09766 22F7                        00            .byte	0
09767 22F8                        00            .byte	0
09768 22F9                        00            .byte	0
09769 22FA                        00            .byte	0
09770 22FB                        3F            .byte	$3F
09771 22FC                        36            .byte	$36
09772 22FD                        36            .byte	$36
09773 22FE                        36            .byte	$36
09774 22FF                        36            .byte	$36
09775 2300                        36            .byte	$36
09776 2301                        36            .byte	$36
09777                                           ! 1180  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09778 2302                        36            .byte	$36
09779 2303                        36            .byte	$36
09780 2304                        36            .byte	$36
09781 2305                        36            .byte	$36
09782 2306                        36            .byte	$36
09783 2307                        36            .byte	$36
09784 2308                        36            .byte	$36
09785 2309                        FF            .byte	$FF
09786 230A                        36            .byte	$36
09787 230B                        36            .byte	$36
09788 230C                        36            .byte	$36
09789 230D                        36            .byte	$36
09790 230E                        36            .byte	$36
09791 230F                        36            .byte	$36
09792                                           ! 1181  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09793 2310                        18            .byte	$18
09794 2311                        18            .byte	$18
09795 2312                        18            .byte	$18
09796 2313                        18            .byte	$18
09797 2314                        18            .byte	$18
09798 2315                        FF            .byte	$FF
09799 2316                        18            .byte	$18
09800 2317                        FF            .byte	$FF
09801 2318                        18            .byte	$18
09802 2319                        18            .byte	$18
09803 231A                        18            .byte	$18
09804 231B                        18            .byte	$18
09805 231C                        18            .byte	$18
09806 231D                        18            .byte	$18
09807                                           ! 1182  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09808 231E                        18            .byte	$18
09809 231F                        18            .byte	$18
09810 2320                        18            .byte	$18
09811 2321                        18            .byte	$18
09812 2322                        18            .byte	$18
09813 2323                        18            .byte	$18
09814 2324                        18            .byte	$18
09815 2325                        F8            .byte	$F8
09816 2326                        00            .byte	0
09817 2327                        00            .byte	0
09818 2328                        00            .byte	0
09819 2329                        00            .byte	0
09820 232A                        00            .byte	0
09821 232B                        00            .byte	0
09822                                           ! 1183  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09823 232C                        00            .byte	0
09824 232D                        00            .byte	0
09825 232E                        00            .byte	0
09826 232F                        00            .byte	0
09827 2330                        00            .byte	0
09828 2331                        00            .byte	0
09829 2332                        00            .byte	0
09830 2333                        1F            .byte	$1F
09831 2334                        18            .byte	$18
09832 2335                        18            .byte	$18
09833 2336                        18            .byte	$18
09834 2337                        18            .byte	$18
09835 2338                        18            .byte	$18
09836 2339                        18            .byte	$18
09837                                           ! 1184  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09838 233A                        FF            .byte	$FF
09839 233B                        FF            .byte	$FF
09840 233C                        FF            .byte	$FF
09841 233D                        FF            .byte	$FF
09842 233E                        FF            .byte	$FF
09843 233F                        FF            .byte	$FF
09844 2340                        FF            .byte	$FF
09845 2341                        FF            .byte	$FF
09846 2342                        FF            .byte	$FF
09847 2343                        FF            .byte	$FF
09848 2344                        FF            .byte	$FF
09849 2345                        FF            .byte	$FF
09850 2346                        FF            .byte	$FF
09851 2347                        FF            .byte	$FF
09852                                           ! 1185  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0
09853 2348                        00            .byte	0
09854 2349                        00            .byte	0
09855 234A                        00            .byte	0
09856 234B                        00            .byte	0
09857 234C                        00            .byte	0
09858 234D                        00            .byte	0
09859 234E                        00            .byte	0
09860 234F                        FF            .byte	$FF
09861 2350                        FF            .byte	$FF
09862 2351                        FF            .byte	$FF
09863 2352                        FF            .byte	$FF
09864 2353                        FF            .byte	$FF
09865 2354                        FF            .byte	$FF
09866                                           ! 1185 xff,
09867 2355                        FF            .byte	$FF
09868                                           ! 1186  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
09869 2356                        F0            .byte	$F0
09870 2357                        F0            .byte	$F0
09871 2358                        F0            .byte	$F0
09872 2359                        F0            .byte	$F0
09873 235A                        F0            .byte	$F0
09874 235B                        F0            .byte	$F0
09875 235C                        F0            .byte	$F0
09876 235D                        F0            .byte	$F0
09877 235E                        F0            .byte	$F0
09878 235F                        F0            .byte	$F0
09879 2360                        F0            .byte	$F0
09880 2361                        F0            .byte	$F0
09881 2362                        F0            .byte	$F0
09882 2363                        F0            .byte	$F0
09883                                           ! 1187  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
09884 2364                        0F            .byte	$F
09885 2365                        0F            .byte	$F
09886 2366                        0F            .byte	$F
09887 2367                        0F            .byte	$F
09888 2368                        0F            .byte	$F
09889 2369                        0F            .byte	$F
09890 236A                        0F            .byte	$F
09891 236B                        0F            .byte	$F
09892 236C                        0F            .byte	$F
09893 236D                        0F            .byte	$F
09894 236E                        0F            .byte	$F
09895 236F                        0F            .byte	$F
09896 2370                        0F            .byte	$F
09897 2371                        0F            .byte	$F
09898                                           ! 1188  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09899 2372                        FF            .byte	$FF
09900 2373                        FF            .byte	$FF
09901 2374                        FF            .byte	$FF
09902 2375                        FF            .byte	$FF
09903 2376                        FF            .byte	$FF
09904 2377                        FF            .byte	$FF
09905 2378                        FF            .byte	$FF
09906 2379                        00            .byte	0
09907 237A                        00            .byte	0
09908 237B                        00            .byte	0
09909 237C                        00            .byte	0
09910 237D                        00            .byte	0
09911 237E                        00            .byte	0
09912 237F                        00            .byte	0
09913                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
09914 2380                        00            .byte	0
09915 2381                        00            .byte	0
09916 2382                        00            .byte	0
09917 2383                        00            .byte	0
09918 2384                        00            .byte	0
09919 2385                        76            .byte	$76
09920 2386                        DC            .byte	$DC
09921 2387                        D8            .byte	$D8
09922 2388                        D8            .byte	$D8
09923 2389                        DC            .byte	$DC
09924 238A                        76            .byte	$76
09925 238B                        00            .byte	0
09926 238C                        00            .byte	0
09927 238D                        00            .byte	0
09928                                           ! 1190  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
09929 238E                        00            .byte	0
09930 238F                        00            .byte	0
09931 2390                        00            .byte	0
09932 2391                        00            .byte	0
09933 2392                        7C            .byte	$7C
09934 2393                        C6            .byte	$C6
09935 2394                        FC            .byte	$FC
09936 2395                        C6            .byte	$C6
09937 2396                        C6            .byte	$C6
09938 2397                        FC            .byte	$FC
09939 2398                        C0            .byte	$C0
09940 2399                        C0            .byte	$C0
09941 239A                        40            .byte	$40
09942 239B                        00            .byte	0
09943                                           ! 1191  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
09944 239C                        00            .byte	0
09945 239D                        00            .byte	0
09946 239E                        FE            .byte	$FE
09947 239F                        C6            .byte	$C6
09948 23A0                        C6            .byte	$C6
09949 23A1                        C0            .byte	$C0
09950 23A2                        C0            .byte	$C0
09951 23A3                        C0            .byte	$C0
09952 23A4                        C0            .byte	$C0
09953 23A5                        C0            .byte	$C0
09954 23A6                        C0            .byte	$C0
09955 23A7                        00            .byte	0
09956 23A8                        00            .byte	0
09957 23A9                        00            .byte	0
09958                                           ! 1192  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
09959 23AA                        00            .byte	0
09960 23AB                        00            .byte	0
09961 23AC                        00            .byte	0
09962 23AD                        00            .byte	0
09963 23AE                        FE            .byte	$FE
09964 23AF                        6C            .byte	$6C
09965 23B0                        6C            .byte	$6C
09966 23B1                        6C            .byte	$6C
09967 23B2                        6C            .byte	$6C
09968 23B3                        6C            .byte	$6C
09969 23B4                        6C            .byte	$6C
09970 23B5                        00            .byte	0
09971 23B6                        00            .byte	0
09972 23B7                        00            .byte	0
09973                                           ! 1193  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
09974 23B8                        00            .byte	0
09975 23B9                        00            .byte	0
09976 23BA                        FE            .byte	$FE
09977 23BB                        C6            .byte	$C6
09978 23BC                        60            .byte	$60
09979 23BD                        30            .byte	$30
09980 23BE                        18            .byte	$18
09981 23BF                        30            .byte	$30
09982 23C0                        60            .byte	$60
09983 23C1                        C6            .byte	$C6
09984 23C2                        FE            .byte	$FE
09985 23C3                        00            .byte	0
09986 23C4                        00            .byte	0
09987 23C5                        00            .byte	0
09988                                           ! 1194  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
09989 23C6                        00            .byte	0
09990 23C7                        00            .byte	0
09991 23C8                        00            .byte	0
09992 23C9                        00            .byte	0
09993 23CA                        00            .byte	0
09994 23CB                        7E            .byte	$7E
09995 23CC                        D8            .byte	$D8
09996 23CD                        D8            .byte	$D8
09997 23CE                        D8            .byte	$D8
09998 23CF                        D8            .byte	$D8
09999 23D0                        70            .byte	$70
10000 23D1                        00            .byte	0
10001 23D2                        00            .byte	0
10002 23D3                        00            .byte	0
10003                                           ! 1195  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10004 23D4                        00            .byte	0
10005 23D5                        00            .byte	0
10006 23D6                        00            .byte	0
10007 23D7                        00            .byte	0
10008 23D8                        66            .byte	$66
10009 23D9                        66            .byte	$66
10010 23DA                        66            .byte	$66
10011 23DB                        66            .byte	$66
10012 23DC                        7C            .byte	$7C
10013 23DD                        60            .byte	$60
10014 23DE                        60            .byte	$60
10015 23DF                        C0            .byte	$C0
10016 23E0                        00            .byte	0
10017 23E1                        00            .byte	0
10018                                           ! 1196  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10019 23E2                        00            .byte	0
10020 23E3                        00            .byte	0
10021 23E4                        00            .byte	0
10022 23E5                        00            .byte	0
10023 23E6                        76            .byte	$76
10024 23E7                        DC            .byte	$DC
10025 23E8                        18            .byte	$18
10026 23E9                        18            .byte	$18
10027 23EA                        18            .byte	$18
10028 23EB                        18            .byte	$18
10029 23EC                        18            .byte	$18
10030 23ED                        00            .byte	0
10031 23EE                        00            .byte	0
10032 23EF                        00            .byte	0
10033                                           ! 1197  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10034 23F0                        00            .byte	0
10035 23F1                        00            .byte	0
10036 23F2                        7E            .byte	$7E
10037 23F3                        18            .byte	$18
10038 23F4                        3C            .byte	$3C
10039 23F5                        66            .byte	$66
10040 23F6                        66            .byte	$66
10041 23F7                        66            .byte	$66
10042 23F8                        3C            .byte	$3C
10043 23F9                        18            .byte	$18
10044 23FA                        7E            .byte	$7E
10045 23FB                        00            .byte	0
10046 23FC                        00            .byte	0
10047 23FD                        00            .byte	0
10048                                           ! 1198  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10049 23FE                        00            .byte	0
10050 23FF                        00            .byte	0
10051 2400                        38            .byte	$38
10052 2401                        6C            .byte	$6C
10053 2402                        C6            .byte	$C6
10054 2403                        C6            .byte	$C6
10055 2404                        FE            .byte	$FE
10056 2405                        C6            .byte	$C6
10057 2406                        C6            .byte	$C6
10058 2407                        6C            .byte	$6C
10059 2408                        38            .byte	$38
10060 2409                        00            .byte	0
10061 240A                        00            .byte	0
10062 240B                        00            .byte	0
10063                                           ! 1199  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10064 240C                        00            .byte	0
10065 240D                        00            .byte	0
10066 240E                        38            .byte	$38
10067 240F                        6C            .byte	$6C
10068 2410                        C6            .byte	$C6
10069 2411                        C6            .byte	$C6
10070 2412                        C6            .byte	$C6
10071 2413                        6C            .byte	$6C
10072 2414                        6C            .byte	$6C
10073 2415                        6C            .byte	$6C
10074 2416                        EE            .byte	$EE
10075 2417                        00            .byte	0
10076 2418                        00            .byte	0
10077 2419                        00            .byte	0
10078                                           ! 1200  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10079 241A                        00            .byte	0
10080 241B                        00            .byte	0
10081 241C                        1E            .byte	$1E
10082 241D                        30            .byte	$30
10083 241E                        18            .byte	$18
10084 241F                        0C            .byte	$C
10085 2420                        3E            .byte	$3E
10086 2421                        66            .byte	$66
10087 2422                        66            .byte	$66
10088 2423                        66            .byte	$66
10089 2424                        3C            .byte	$3C
10090 2425                        00            .byte	0
10091 2426                        00            .byte	0
10092 2427                        00            .byte	0
10093                                           ! 1201  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10094 2428                        00            .byte	0
10095 2429                        00            .byte	0
10096 242A                        00            .byte	0
10097 242B                        00            .byte	0
10098 242C                        00            .byte	0
10099 242D                        7E            .byte	$7E
10100 242E                        DB            .byte	$DB
10101 242F                        DB            .byte	$DB
10102 2430                        7E            .byte	$7E
10103 2431                        00            .byte	0
10104 2432                        00            .byte	0
10105 2433                        00            .byte	0
10106 2434                        00            .byte	0
10107 2435                        00            .byte	0
10108                                           ! 1202  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10109 2436                        00            .byte	0
10110 2437                        00            .byte	0
10111 2438                        03            .byte	3
10112 2439                        06            .byte	6
10113 243A                        7E            .byte	$7E
10114 243B                        DB            .byte	$DB
10115 243C                        DB            .byte	$DB
10116 243D                        F3            .byte	$F3
10117 243E                        7E            .byte	$7E
10118 243F                        60            .byte	$60
10119 2440                        C0            .byte	$C0
10120 2441                        00            .byte	0
10121 2442                        00            .byte	0
10122 2443                        00            .byte	0
10123                                           ! 1203  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10124 2444                        00            .byte	0
10125 2445                        00            .byte	0
10126 2446                        1C            .byte	$1C
10127 2447                        30            .byte	$30
10128 2448                        60            .byte	$60
10129 2449                        60            .byte	$60
10130 244A                        7C            .byte	$7C
10131 244B                        60            .byte	$60
10132 244C                        60            .byte	$60
10133 244D                        30            .byte	$30
10134 244E                        1C            .byte	$1C
10135 244F                        00            .byte	0
10136 2450                        00            .byte	0
10137 2451                        00            .byte	0
10138                                           ! 1204  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10139 2452                        00            .byte	0
10140 2453                        00            .byte	0
10141 2454                        00            .byte	0
10142 2455                        7C            .byte	$7C
10143 2456                        C6            .byte	$C6
10144 2457                        C6            .byte	$C6
10145 2458                        C6            .byte	$C6
10146 2459                        C6            .byte	$C6
10147 245A                        C6            .byte	$C6
10148 245B                        C6            .byte	$C6
10149 245C                        C6            .byte	$C6
10150 245D                        00            .byte	0
10151 245E                        00            .byte	0
10152 245F                        00            .byte	0
10153                                           ! 1205  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10154 2460                        00            .byte	0
10155 2461                        00            .byte	0
10156 2462                        00            .byte	0
10157 2463                        FE            .byte	$FE
10158 2464                        00            .byte	0
10159 2465                        00            .byte	0
10160 2466                        FE            .byte	$FE
10161 2467                        00            .byte	0
10162 2468                        00            .byte	0
10163 2469                        FE            .byte	$FE
10164 246A                        00            .byte	0
10165 246B                        00            .byte	0
10166 246C                        00            .byte	0
10167 246D                        00            .byte	0
10168                                           ! 1206  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10169 246E                        00            .byte	0
10170 246F                        00            .byte	0
10171 2470                        00            .byte	0
10172 2471                        18            .byte	$18
10173 2472                        18            .byte	$18
10174 2473                        7E            .byte	$7E
10175 2474                        18            .byte	$18
10176 2475                        18            .byte	$18
10177 2476                        00            .byte	0
10178 2477                        00            .byte	0
10179 2478                        FF            .byte	$FF
10180 2479                        00            .byte	0
10181 247A                        00            .byte	0
10182 247B                        00            .byte	0
10183                                           ! 1207  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10184 247C                        00            .byte	0
10185 247D                        00            .byte	0
10186 247E                        30            .byte	$30
10187 247F                        18            .byte	$18
10188 2480                        0C            .byte	$C
10189 2481                        06            .byte	6
10190 2482                        0C            .byte	$C
10191 2483                        18            .byte	$18
10192 2484                        30            .byte	$30
10193 2485                        00            .byte	0
10194 2486                        7E            .byte	$7E
10195 2487                        00            .byte	0
10196 2488                        00            .byte	0
10197 2489                        00            .byte	0
10198                                           ! 1208  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10199 248A                        00            .byte	0
10200 248B                        00            .byte	0
10201 248C                        0C            .byte	$C
10202 248D                        18            .byte	$18
10203 248E                        30            .byte	$30
10204 248F                        60            .byte	$60
10205 2490                        30            .byte	$30
10206 2491                        18            .byte	$18
10207 2492                        0C            .byte	$C
10208 2493                        00            .byte	0
10209 2494                        7E            .byte	$7E
10210 2495                        00            .byte	0
10211 2496                        00            .byte	0
10212 2497                        00            .byte	0
10213                                           ! 1209  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10214 2498                        00            .byte	0
10215 2499                        00            .byte	0
10216 249A                        0E            .byte	$E
10217 249B                        1B            .byte	$1B
10218 249C                        1B            .byte	$1B
10219 249D                        18            .byte	$18
10220 249E                        18            .byte	$18
10221 249F                        18            .byte	$18
10222 24A0                        18            .byte	$18
10223 24A1                        18            .byte	$18
10224 24A2                        18            .byte	$18
10225 24A3                        18            .byte	$18
10226 24A4                        18            .byte	$18
10227 24A5                        18            .byte	$18
10228                                           ! 1210  0x
10229                                           ! 1210 18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10230 24A6                        18            .byte	$18
10231 24A7                        18            .byte	$18
10232 24A8                        18            .byte	$18
10233 24A9                        18            .byte	$18
10234 24AA                        18            .byte	$18
10235 24AB                        18            .byte	$18
10236 24AC                        18            .byte	$18
10237 24AD                        18            .byte	$18
10238 24AE                        D8            .byte	$D8
10239 24AF                        D8            .byte	$D8
10240 24B0                        70            .byte	$70
10241 24B1                        00            .byte	0
10242 24B2                        00            .byte	0
10243 24B3                        00            .byte	0
10244                                           ! 1211  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10245 24B4                        00            .byte	0
10246 24B5                        00            .byte	0
10247 24B6                        00            .byte	0
10248 24B7                        18            .byte	$18
10249 24B8                        18            .byte	$18
10250 24B9                        00            .byte	0
10251 24BA                        7E            .byte	$7E
10252 24BB                        00            .byte	0
10253 24BC                        18            .byte	$18
10254 24BD                        18            .byte	$18
10255 24BE                        00            .byte	0
10256 24BF                        00            .byte	0
10257 24C0                        00            .byte	0
10258 24C1                        00            .byte	0
10259                                           ! 1212  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10260 24C2                        00            .byte	0
10261 24C3                        00            .byte	0
10262 24C4                        00            .byte	0
10263 24C5                        00            .byte	0
10264 24C6                        76            .byte	$76
10265 24C7                        DC            .byte	$DC
10266 24C8                        00            .byte	0
10267 24C9                        76            .byte	$76
10268 24CA                        DC            .byte	$DC
10269 24CB                        00            .byte	0
10270 24CC                        00            .byte	0
10271 24CD                        00            .byte	0
10272 24CE                        00            .byte	0
10273 24CF                        00            .byte	0
10274                                           ! 1213  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10275 24D0                        00            .byte	0
10276 24D1                        38            .byte	$38
10277 24D2                        6C            .byte	$6C
10278 24D3                        6C            .byte	$6C
10279 24D4                        38            .byte	$38
10280 24D5                        00            .byte	0
10281 24D6                        00            .byte	0
10282 24D7                        00            .byte	0
10283 24D8                        00            .byte	0
10284 24D9                        00            .byte	0
10285 24DA                        00            .byte	0
10286 24DB                        00            .byte	0
10287 24DC                        00            .byte	0
10288 24DD                        00            .byte	0
10289                                           ! 1214  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10290 24DE                        00            .byte	0
10291 24DF                        00            .byte	0
10292 24E0                        00            .byte	0
10293 24E1                        00            .byte	0
10294 24E2                        00            .byte	0
10295 24E3                        00            .byte	0
10296 24E4                        18            .byte	$18
10297 24E5                        18            .byte	$18
10298 24E6                        00            .byte	0
10299 24E7                        00            .byte	0
10300 24E8                        00            .byte	0
10301 24E9                        00            .byte	0
10302 24EA                        00            .byte	0
10303 24EB                        00            .byte	0
10304                                           ! 1215  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10305 24EC                        00            .byte	0
10306 24ED                        00            .byte	0
10307 24EE                        00            .byte	0
10308 24EF                        00            .byte	0
10309 24F0                        00            .byte	0
10310 24F1                        00            .byte	0
10311 24F2                        00            .byte	0
10312 24F3                        18            .byte	$18
10313 24F4                        00            .byte	0
10314 24F5                        00            .byte	0
10315 24F6                        00            .byte	0
10316 24F7                        00            .byte	0
10317 24F8                        00            .byte	0
10318 24F9                        00            .byte	0
10319                                           ! 1216  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10320 24FA                        00            .byte	0
10321 24FB                        0F            .byte	$F
10322 24FC                        0C            .byte	$C
10323 24FD                        0C            .byte	$C
10324 24FE                        0C            .byte	$C
10325 24FF                        0C            .byte	$C
10326 2500                        0C            .byte	$C
10327 2501                        EC            .byte	$EC
10328 2502                        6C            .byte	$6C
10329 2503                        3C            .byte	$3C
10330 2504                        1C            .byte	$1C
10331 2505                        00            .byte	0
10332 2506                        00            .byte	0
10333 2507                        00            .byte	0
10334                                           ! 1217  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10335 2508                        00            .byte	0
10336 2509                        D8            .byte	$D8
10337 250A                        6C            .byte	$6C
10338 250B                        6C            .byte	$6C
10339 250C                        6C            .byte	$6C
10340 250D                        6C            .byte	$6C
10341 250E                        6C            .byte	$6C
10342 250F                        00            .byte	0
10343 2510                        00            .byte	0
10344 2511                        00            .byte	0
10345 2512                        00            .byte	0
10346 2513                        00            .byte	0
10347 2514                        00            .byte	0
10348 2515                        00            .byte	0
10349                                           ! 1218  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10350 2516                        00            .byte	0
10351 2517                        70            .byte	$70
10352 2518                        D8            .byte	$D8
10353 2519                        30            .byte	$30
10354 251A                        60            .byte	$60
10355 251B                        C8            .byte	$C8
10356 251C                        F8            .byte	$F8
10357 251D                        00            .byte	0
10358 251E                        00            .byte	0
10359 251F                        00            .byte	0
10360 2520                        00            .byte	0
10361 2521                        00            .byte	0
10362 2522                        00            .byte	0
10363 2523                        00            .byte	0
10364                                           ! 1219  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10365 2524                        00            .byte	0
10366 2525                        00            .byte	0
10367 2526                        00            .byte	0
10368 2527                        00            .byte	0
10369 2528                        7C            .byte	$7C
10370 2529                        7C            .byte	$7C
10371 252A                        7C            .byte	$7C
10372 252B                        7C            .byte	$7C
10373 252C                        7C            .byte	$7C
10374 252D                        7C            .byte	$7C
10375 252E                        00            .byte	0
10376 252F                        00            .byte	0
10377 2530                        00            .byte	0
10378 2531                        00            .byte	0
10379                                           ! 1220  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10380 2532                        00            .byte	0
10381 2533                        00            .byte	0
10382 2534                        00            .byte	0
10383 2535                        00            .byte	0
10384 2536                        00            .byte	0
10385 2537                        00            .byte	0
10386 2538                        00            .byte	0
10387 2539                        00            .byte	0
10388 253A                        00            .byte	0
10389 253B                        00            .byte	0
10390 253C                        00            .byte	0
10391 253D                        00            .byte	0
10392 253E                        00            .byte	0
10393                                           ! 1221 };
10394 253F                        00            .byte	0
10395                                           !BCC_EOS
10396                                           ! 1222 static Bit8u vgafont16[256*16]=
10397                                           ! 1223 {
10398                       00002540            _vgafont16:
10399                                           ! 1224  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10400 2540                        00            .byte	0
10401 2541                        00            .byte	0
10402 2542                        00            .byte	0
10403 2543                        00            .byte	0
10404 2544                        00            .byte	0
10405 2545                        00            .byte	0
10406 2546                        00            .byte	0
10407 2547                        00            .byte	0
10408 2548                        00            .byte	0
10409 2549                        00            .byte	0
10410 254A                        00            .byte	0
10411 254B                        00            .byte	0
10412 254C                        00            .byte	0
10413 254D                        00            .byte	0
10414 254E                        00            .byte	0
10415 254F                        00            .byte	0
10416                                           ! 1225  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10417 2550                        00            .byte	0
10418 2551                        00            .byte	0
10419 2552                        7E            .byte	$7E
10420 2553                        81            .byte	$81
10421 2554                        A5            .byte	$A5
10422 2555                        81            .byte	$81
10423 2556                        81            .byte	$81
10424 2557                        BD            .byte	$BD
10425 2558                        99            .byte	$99
10426 2559                        81            .byte	$81
10427 255A                        81            .byte	$81
10428 255B                        7E            .byte	$7E
10429 255C                        00            .byte	0
10430 255D                        00            .byte	0
10431 255E                        00            .byte	0
10432 255F                        00            .byte	0
10433                                           ! 1226  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10434 2560                        00            .byte	0
10435 2561                        00            .byte	0
10436 2562                        7E            .byte	$7E
10437 2563                        FF            .byte	$FF
10438 2564                        DB            .byte	$DB
10439 2565                        FF            .byte	$FF
10440 2566                        FF            .byte	$FF
10441 2567                        C3            .byte	$C3
10442 2568                        E7            .byte	$E7
10443 2569                        FF            .byte	$FF
10444 256A                        FF            .byte	$FF
10445 256B                        7E            .byte	$7E
10446 256C                        00            .byte	0
10447 256D                        00            .byte	0
10448 256E                        00            .byte	0
10449 256F                        00            .byte	0
10450                                           ! 1227  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10451 2570                        00            .byte	0
10452 2571                        00            .byte	0
10453 2572                        00            .byte	0
10454 2573                        00            .byte	0
10455 2574                        6C            .byte	$6C
10456 2575                        FE            .byte	$FE
10457 2576                        FE            .byte	$FE
10458 2577                        FE            .byte	$FE
10459 2578                        FE            .byte	$FE
10460 2579                        7C            .byte	$7C
10461 257A                        38            .byte	$38
10462 257B                        10            .byte	$10
10463 257C                        00            .byte	0
10464 257D                        00            .byte	0
10465 257E                        00            .byte	0
10466 257F                        00            .byte	0
10467                                           ! 1228  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10468 2580                        00            .byte	0
10469 2581                        00            .byte	0
10470 2582                        00            .byte	0
10471 2583                        00            .byte	0
10472 2584                        10            .byte	$10
10473 2585                        38            .byte	$38
10474 2586                        7C            .byte	$7C
10475 2587                        FE            .byte	$FE
10476 2588                        7C            .byte	$7C
10477 2589                        38            .byte	$38
10478 258A                        10            .byte	$10
10479 258B                        00            .byte	0
10480 258C                        00            .byte	0
10481 258D                        00            .byte	0
10482 258E                        00            .byte	0
10483 258F                        00            .byte	0
10484                                           ! 1229  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10485 2590                        00            .byte	0
10486 2591                        00            .byte	0
10487 2592                        00            .byte	0
10488 2593                        18            .byte	$18
10489 2594                        3C            .byte	$3C
10490 2595                        3C            .byte	$3C
10491 2596                        E7            .byte	$E7
10492 2597                        E7            .byte	$E7
10493 2598                        E7            .byte	$E7
10494 2599                        18            .byte	$18
10495 259A                        18            .byte	$18
10496 259B                        3C            .byte	$3C
10497 259C                        00            .byte	0
10498 259D                        00            .byte	0
10499 259E                        00            .byte	0
10500 259F                        00            .byte	0
10501                                           ! 1230  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10502 25A0                        00            .byte	0
10503 25A1                        00            .byte	0
10504 25A2                        00            .byte	0
10505 25A3                        18            .byte	$18
10506 25A4                        3C            .byte	$3C
10507 25A5                        7E            .byte	$7E
10508 25A6                        FF            .byte	$FF
10509 25A7                        FF            .byte	$FF
10510 25A8                        7E            .byte	$7E
10511 25A9                        18            .byte	$18
10512 25AA                        18            .byte	$18
10513 25AB                        3C            .byte	$3C
10514 25AC                        00            .byte	0
10515 25AD                        00            .byte	0
10516 25AE                        00            .byte	0
10517 25AF                        00            .byte	0
10518                                           ! 1231  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10519 25B0                        00            .byte	0
10520 25B1                        00            .byte	0
10521 25B2                        00            .byte	0
10522 25B3                        00            .byte	0
10523 25B4                        00            .byte	0
10524 25B5                        00            .byte	0
10525 25B6                        18            .byte	$18
10526 25B7                        3C            .byte	$3C
10527 25B8                        3C            .byte	$3C
10528 25B9                        18            .byte	$18
10529 25BA                        00            .byte	0
10530 25BB                        00            .byte	0
10531 25BC                        00            .byte	0
10532 25BD                        00            .byte	0
10533 25BE                        00            .byte	0
10534 25BF                        00            .byte	0
10535                                           ! 1232  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10536 25C0                        FF            .byte	$FF
10537 25C1                        FF            .byte	$FF
10538 25C2                        FF            .byte	$FF
10539 25C3                        FF            .byte	$FF
10540 25C4                        FF            .byte	$FF
10541 25C5                        FF            .byte	$FF
10542 25C6                        E7            .byte	$E7
10543 25C7                        C3            .byte	$C3
10544 25C8                        C3            .byte	$C3
10545 25C9                        E7            .byte	$E7
10546 25CA                        FF            .byte	$FF
10547 25CB                        FF            .byte	$FF
10548 25CC                        FF            .byte	$FF
10549 25CD                        FF            .byte	$FF
10550 25CE                        FF            .byte	$FF
10551 25CF                        FF            .byte	$FF
10552                                           ! 1233  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10553 25D0                        00            .byte	0
10554 25D1                        00            .byte	0
10555 25D2                        00            .byte	0
10556 25D3                        00            .byte	0
10557 25D4                        00            .byte	0
10558 25D5                        3C            .byte	$3C
10559 25D6                        66            .byte	$66
10560 25D7                        42            .byte	$42
10561 25D8                        42            .byte	$42
10562 25D9                        66            .byte	$66
10563 25DA                        3C            .byte	$3C
10564 25DB                        00            .byte	0
10565 25DC                        00            .byte	0
10566 25DD                        00            .byte	0
10567 25DE                        00            .byte	0
10568 25DF                        00            .byte	0
10569                                           ! 1234  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10570 25E0                        FF            .byte	$FF
10571 25E1                        FF            .byte	$FF
10572 25E2                        FF            .byte	$FF
10573 25E3                        FF            .byte	$FF
10574 25E4                        FF            .byte	$FF
10575 25E5                        C3            .byte	$C3
10576 25E6                        99            .byte	$99
10577 25E7                        BD            .byte	$BD
10578 25E8                        BD            .byte	$BD
10579 25E9                        99            .byte	$99
10580 25EA                        C3            .byte	$C3
10581 25EB                        FF            .byte	$FF
10582 25EC                        FF            .byte	$FF
10583 25ED                        FF            .byte	$FF
10584 25EE                        FF            .byte	$FF
10585 25EF                        FF            .byte	$FF
10586                                           ! 1235  0x00, 0x00, 
10587 25F0                        00            .byte	0
10588 25F1                        00            .byte	0
10589                                           ! 1235 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10590 25F2                        1E            .byte	$1E
10591 25F3                        0E            .byte	$E
10592 25F4                        1A            .byte	$1A
10593 25F5                        32            .byte	$32
10594 25F6                        78            .byte	$78
10595 25F7                        CC            .byte	$CC
10596 25F8                        CC            .byte	$CC
10597 25F9                        CC            .byte	$CC
10598 25FA                        CC            .byte	$CC
10599 25FB                        78            .byte	$78
10600 25FC                        00            .byte	0
10601 25FD                        00            .byte	0
10602 25FE                        00            .byte	0
10603 25FF                        00            .byte	0
10604                                           ! 1236  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10605 2600                        00            .byte	0
10606 2601                        00            .byte	0
10607 2602                        3C            .byte	$3C
10608 2603                        66            .byte	$66
10609 2604                        66            .byte	$66
10610 2605                        66            .byte	$66
10611 2606                        66            .byte	$66
10612 2607                        3C            .byte	$3C
10613 2608                        18            .byte	$18
10614 2609                        7E            .byte	$7E
10615 260A                        18            .byte	$18
10616 260B                        18            .byte	$18
10617 260C                        00            .byte	0
10618 260D                        00            .byte	0
10619 260E                        00            .byte	0
10620 260F                        00            .byte	0
10621                                           ! 1237  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10622 2610                        00            .byte	0
10623 2611                        00            .byte	0
10624 2612                        3F            .byte	$3F
10625 2613                        33            .byte	$33
10626 2614                        3F            .byte	$3F
10627 2615                        30            .byte	$30
10628 2616                        30            .byte	$30
10629 2617                        30            .byte	$30
10630 2618                        30            .byte	$30
10631 2619                        70            .byte	$70
10632 261A                        F0            .byte	$F0
10633 261B                        E0            .byte	$E0
10634 261C                        00            .byte	0
10635 261D                        00            .byte	0
10636 261E                        00            .byte	0
10637 261F                        00            .byte	0
10638                                           ! 1238  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10639 2620                        00            .byte	0
10640 2621                        00            .byte	0
10641 2622                        7F            .byte	$7F
10642 2623                        63            .byte	$63
10643 2624                        7F            .byte	$7F
10644 2625                        63            .byte	$63
10645 2626                        63            .byte	$63
10646 2627                        63            .byte	$63
10647 2628                        63            .byte	$63
10648 2629                        67            .byte	$67
10649 262A                        E7            .byte	$E7
10650 262B                        E6            .byte	$E6
10651 262C                        C0            .byte	$C0
10652 262D                        00            .byte	0
10653 262E                        00            .byte	0
10654 262F                        00            .byte	0
10655                                           ! 1239  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10656 2630                        00            .byte	0
10657 2631                        00            .byte	0
10658 2632                        00            .byte	0
10659 2633                        18            .byte	$18
10660 2634                        18            .byte	$18
10661 2635                        DB            .byte	$DB
10662 2636                        3C            .byte	$3C
10663 2637                        E7            .byte	$E7
10664 2638                        3C            .byte	$3C
10665 2639                        DB            .byte	$DB
10666 263A                        18            .byte	$18
10667 263B                        18            .byte	$18
10668 263C                        00            .byte	0
10669 263D                        00            .byte	0
10670 263E                        00            .byte	0
10671 263F                        00            .byte	0
10672                                           ! 1240  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10673 2640                        00            .byte	0
10674 2641                        80            .byte	$80
10675 2642                        C0            .byte	$C0
10676 2643                        E0            .byte	$E0
10677 2644                        F0            .byte	$F0
10678 2645                        F8            .byte	$F8
10679 2646                        FE            .byte	$FE
10680 2647                        F8            .byte	$F8
10681 2648                        F0            .byte	$F0
10682 2649                        E0            .byte	$E0
10683 264A                        C0            .byte	$C0
10684 264B                        80            .byte	$80
10685 264C                        00            .byte	0
10686 264D                        00            .byte	0
10687 264E                        00            .byte	0
10688 264F                        00            .byte	0
10689                                           ! 1241  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10690 2650                        00            .byte	0
10691 2651                        02            .byte	2
10692 2652                        06            .byte	6
10693 2653                        0E            .byte	$E
10694 2654                        1E            .byte	$1E
10695 2655                        3E            .byte	$3E
10696 2656                        FE            .byte	$FE
10697 2657                        3E            .byte	$3E
10698 2658                        1E            .byte	$1E
10699 2659                        0E            .byte	$E
10700 265A                        06            .byte	6
10701 265B                        02            .byte	2
10702 265C                        00            .byte	0
10703 265D                        00            .byte	0
10704 265E                        00            .byte	0
10705 265F                        00            .byte	0
10706                                           ! 1242  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10707 2660                        00            .byte	0
10708 2661                        00            .byte	0
10709 2662                        18            .byte	$18
10710 2663                        3C            .byte	$3C
10711 2664                        7E            .byte	$7E
10712 2665                        18            .byte	$18
10713 2666                        18            .byte	$18
10714 2667                        18            .byte	$18
10715 2668                        7E            .byte	$7E
10716 2669                        3C            .byte	$3C
10717 266A                        18            .byte	$18
10718 266B                        00            .byte	0
10719 266C                        00            .byte	0
10720 266D                        00            .byte	0
10721 266E                        00            .byte	0
10722 266F                        00            .byte	0
10723                                           ! 1243  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10724 2670                        00            .byte	0
10725 2671                        00            .byte	0
10726 2672                        66            .byte	$66
10727 2673                        66            .byte	$66
10728 2674                        66            .byte	$66
10729 2675                        66            .byte	$66
10730 2676                        66            .byte	$66
10731 2677                        66            .byte	$66
10732 2678                        66            .byte	$66
10733 2679                        00            .byte	0
10734 267A                        66            .byte	$66
10735 267B                        66            .byte	$66
10736 267C                        00            .byte	0
10737 267D                        00            .byte	0
10738 267E                        00            .byte	0
10739 267F                        00            .byte	0
10740                                           ! 1244  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
10741 2680                        00            .byte	0
10742 2681                        00            .byte	0
10743 2682                        7F            .byte	$7F
10744 2683                        DB            .byte	$DB
10745 2684                        DB            .byte	$DB
10746 2685                        DB            .byte	$DB
10747 2686                        7B            .byte	$7B
10748 2687                        1B            .byte	$1B
10749 2688                        1B            .byte	$1B
10750 2689                        1B            .byte	$1B
10751 268A                        1B            .byte	$1B
10752 268B                        1B            .byte	$1B
10753 268C                        00            .byte	0
10754 268D                        00            .byte	0
10755 268E                        00            .byte	0
10756 268F                        00            .byte	0
10757                                           ! 1245  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
10758 2690                        00            .byte	0
10759 2691                        7C            .byte	$7C
10760 2692                        C6            .byte	$C6
10761 2693                        60            .byte	$60
10762 2694                        38            .byte	$38
10763 2695                        6C            .byte	$6C
10764 2696                        C6            .byte	$C6
10765 2697                        C6            .byte	$C6
10766 2698                        6C            .byte	$6C
10767 2699                        38            .byte	$38
10768 269A                        0C            .byte	$C
10769 269B                        C6            .byte	$C6
10770 269C                        7C            .byte	$7C
10771 269D                        00            .byte	0
10772 269E                        00            .byte	0
10773 269F                        00            .byte	0
10774                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
10775 26A0                        00            .byte	0
10776 26A1                        00            .byte	0
10777 26A2                        00            .byte	0
10778 26A3                        00            .byte	0
10779 26A4                        00            .byte	0
10780 26A5                        00            .byte	0
10781 26A6                        00            .byte	0
10782 26A7                        00            .byte	0
10783 26A8                        FE            .byte	$FE
10784 26A9                        FE            .byte	$FE
10785 26AA                        FE            .byte	$FE
10786 26AB                        FE            .byte	$FE
10787 26AC                        00            .byte	0
10788 26AD                        00            .byte	0
10789 26AE                        00            .byte	0
10790 26AF                        00            .byte	0
10791                                           ! 1247  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
10792 26B0                        00            .byte	0
10793 26B1                        00            .byte	0
10794 26B2                        18            .byte	$18
10795 26B3                        3C            .byte	$3C
10796 26B4                        7E            .byte	$7E
10797 26B5                        18            .byte	$18
10798 26B6                        18            .byte	$18
10799 26B7                        18            .byte	$18
10800 26B8                        7E            .byte	$7E
10801 26B9                        3C            .byte	$3C
10802 26BA                        18            .byte	$18
10803 26BB                        7E            .byte	$7E
10804 26BC                        00            .byte	0
10805 26BD                        00            .byte	0
10806 26BE                        00            .byte	0
10807 26BF                        00            .byte	0
10808                                           ! 1248  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10809 26C0                        00            .byte	0
10810 26C1                        00            .byte	0
10811 26C2                        18            .byte	$18
10812 26C3                        3C            .byte	$3C
10813 26C4                        7E            .byte	$7E
10814 26C5                        18            .byte	$18
10815 26C6                        18            .byte	$18
10816 26C7                        18            .byte	$18
10817 26C8                        18            .byte	$18
10818 26C9                        18            .byte	$18
10819 26CA                        18            .byte	$18
10820 26CB                        18            .byte	$18
10821 26CC                        00            .byte	0
10822 26CD                        00            .byte	0
10823 26CE                        00            .byte	0
10824 26CF                        00            .byte	0
10825                                           ! 1249  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
10826 26D0                        00            .byte	0
10827 26D1                        00            .byte	0
10828 26D2                        18            .byte	$18
10829 26D3                        18            .byte	$18
10830 26D4                        18            .byte	$18
10831 26D5                        18            .byte	$18
10832 26D6                        18            .byte	$18
10833 26D7                        18            .byte	$18
10834 26D8                        18            .byte	$18
10835 26D9                        7E            .byte	$7E
10836 26DA                        3C            .byte	$3C
10837 26DB                        18            .byte	$18
10838 26DC                        00            .byte	0
10839 26DD                        00            .byte	0
10840 26DE                        00            .byte	0
10841 26DF                        00            .byte	0
10842                                           ! 1250  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10843 26E0                        00            .byte	0
10844 26E1                        00            .byte	0
10845 26E2                        00            .byte	0
10846 26E3                        00            .byte	0
10847 26E4                        00            .byte	0
10848 26E5                        18            .byte	$18
10849 26E6                        0C            .byte	$C
10850 26E7                        FE            .byte	$FE
10851 26E8                        0C            .byte	$C
10852 26E9                        18            .byte	$18
10853 26EA                        00            .byte	0
10854 26EB                        00            .byte	0
10855 26EC                        00            .byte	0
10856 26ED                        00            .byte	0
10857 26EE                        00            .byte	0
10858 26EF                        00            .byte	0
10859                                           ! 1251  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10860 26F0                        00            .byte	0
10861 26F1                        00            .byte	0
10862 26F2                        00            .byte	0
10863 26F3                        00            .byte	0
10864 26F4                        00            .byte	0
10865 26F5                        30            .byte	$30
10866 26F6                        60            .byte	$60
10867 26F7                        FE            .byte	$FE
10868 26F8                        60            .byte	$60
10869 26F9                        30            .byte	$30
10870 26FA                        00            .byte	0
10871 26FB                        00            .byte	0
10872 26FC                        00            .byte	0
10873 26FD                        00            .byte	0
10874 26FE                        00            .byte	0
10875 26FF                        00            .byte	0
10876                                           ! 1252  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10877 2700                        00            .byte	0
10878 2701                        00            .byte	0
10879 2702                        00            .byte	0
10880 2703                        00            .byte	0
10881 2704                        00            .byte	0
10882 2705                        00            .byte	0
10883 2706                        C0            .byte	$C0
10884 2707                        C0            .byte	$C0
10885 2708                        C0            .byte	$C0
10886 2709                        FE            .byte	$FE
10887 270A                        00            .byte	0
10888 270B                        00            .byte	0
10889 270C                        00            .byte	0
10890 270D                        00            .byte	0
10891 270E                        00            .byte	0
10892 270F                        00            .byte	0
10893                                           ! 1253  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10894 2710                        00            .byte	0
10895 2711                        00            .byte	0
10896 2712                        00            .byte	0
10897 2713                        00            .byte	0
10898 2714                        00            .byte	0
10899 2715                        24            .byte	$24
10900 2716                        66            .byte	$66
10901 2717                        FF            .byte	$FF
10902 2718                        66            .byte	$66
10903 2719                        24            .byte	$24
10904 271A                        00            .byte	0
10905 271B                        00            .byte	0
10906 271C                        00            .byte	0
10907 271D                        00            .byte	0
10908 271E                        00            .byte	0
10909 271F                        00            .byte	0
10910                                           ! 1254  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
10911 2720                        00            .byte	0
10912 2721                        00            .byte	0
10913 2722                        00            .byte	0
10914 2723                        00            .byte	0
10915 2724                        10            .byte	$10
10916 2725                        38            .byte	$38
10917 2726                        38            .byte	$38
10918 2727                        7C            .byte	$7C
10919 2728                        7C            .byte	$7C
10920 2729                        FE            .byte	$FE
10921 272A                        FE            .byte	$FE
10922 272B                        00            .byte	0
10923 272C                        00            .byte	0
10924 272D                        00            .byte	0
10925 272E                        00            .byte	0
10926 272F                        00            .byte	0
10927                                           ! 1255  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10928 2730                        00            .byte	0
10929 2731                        00            .byte	0
10930 2732                        00            .byte	0
10931 2733                        00            .byte	0
10932 2734                        FE            .byte	$FE
10933 2735                        FE            .byte	$FE
10934 2736                        7C            .byte	$7C
10935 2737                        7C            .byte	$7C
10936 2738                        38            .byte	$38
10937 2739                        38            .byte	$38
10938 273A                        10            .byte	$10
10939 273B                        00            .byte	0
10940 273C                        00            .byte	0
10941 273D                        00            .byte	0
10942 273E                        00            .byte	0
10943 273F                        00            .byte	0
10944                                           ! 1256  0x00, 0x00, 0x00, 0x00,
10945 2740                        00            .byte	0
10946 2741                        00            .byte	0
10947 2742                        00            .byte	0
10948                                           ! 1256  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10949 2743                        00            .byte	0
10950 2744                        00            .byte	0
10951 2745                        00            .byte	0
10952 2746                        00            .byte	0
10953 2747                        00            .byte	0
10954 2748                        00            .byte	0
10955 2749                        00            .byte	0
10956 274A                        00            .byte	0
10957 274B                        00            .byte	0
10958 274C                        00            .byte	0
10959 274D                        00            .byte	0
10960 274E                        00            .byte	0
10961 274F                        00            .byte	0
10962                                           ! 1257  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10963 2750                        00            .byte	0
10964 2751                        00            .byte	0
10965 2752                        18            .byte	$18
10966 2753                        3C            .byte	$3C
10967 2754                        3C            .byte	$3C
10968 2755                        3C            .byte	$3C
10969 2756                        18            .byte	$18
10970 2757                        18            .byte	$18
10971 2758                        18            .byte	$18
10972 2759                        00            .byte	0
10973 275A                        18            .byte	$18
10974 275B                        18            .byte	$18
10975 275C                        00            .byte	0
10976 275D                        00            .byte	0
10977 275E                        00            .byte	0
10978 275F                        00            .byte	0
10979                                           ! 1258  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10980 2760                        00            .byte	0
10981 2761                        66            .byte	$66
10982 2762                        66            .byte	$66
10983 2763                        66            .byte	$66
10984 2764                        24            .byte	$24
10985 2765                        00            .byte	0
10986 2766                        00            .byte	0
10987 2767                        00            .byte	0
10988 2768                        00            .byte	0
10989 2769                        00            .byte	0
10990 276A                        00            .byte	0
10991 276B                        00            .byte	0
10992 276C                        00            .byte	0
10993 276D                        00            .byte	0
10994 276E                        00            .byte	0
10995 276F                        00            .byte	0
10996                                           ! 1259  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
10997 2770                        00            .byte	0
10998 2771                        00            .byte	0
10999 2772                        00            .byte	0
11000 2773                        6C            .byte	$6C
11001 2774                        6C            .byte	$6C
11002 2775                        FE            .byte	$FE
11003 2776                        6C            .byte	$6C
11004 2777                        6C            .byte	$6C
11005 2778                        6C            .byte	$6C
11006 2779                        FE            .byte	$FE
11007 277A                        6C            .byte	$6C
11008 277B                        6C            .byte	$6C
11009 277C                        00            .byte	0
11010 277D                        00            .byte	0
11011 277E                        00            .byte	0
11012 277F                        00            .byte	0
11013                                           ! 1260  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11014 2780                        18            .byte	$18
11015 2781                        18            .byte	$18
11016 2782                        7C            .byte	$7C
11017 2783                        C6            .byte	$C6
11018 2784                        C2            .byte	$C2
11019 2785                        C0            .byte	$C0
11020 2786                        7C            .byte	$7C
11021 2787                        06            .byte	6
11022 2788                        06            .byte	6
11023 2789                        86            .byte	$86
11024 278A                        C6            .byte	$C6
11025 278B                        7C            .byte	$7C
11026 278C                        18            .byte	$18
11027 278D                        18            .byte	$18
11028 278E                        00            .byte	0
11029 278F                        00            .byte	0
11030                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11031 2790                        00            .byte	0
11032 2791                        00            .byte	0
11033 2792                        00            .byte	0
11034 2793                        00            .byte	0
11035 2794                        C2            .byte	$C2
11036 2795                        C6            .byte	$C6
11037 2796                        0C            .byte	$C
11038 2797                        18            .byte	$18
11039 2798                        30            .byte	$30
11040 2799                        60            .byte	$60
11041 279A                        C6            .byte	$C6
11042 279B                        86            .byte	$86
11043 279C                        00            .byte	0
11044 279D                        00            .byte	0
11045 279E                        00            .byte	0
11046 279F                        00            .byte	0
11047                                           ! 1262  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11048 27A0                        00            .byte	0
11049 27A1                        00            .byte	0
11050 27A2                        38            .byte	$38
11051 27A3                        6C            .byte	$6C
11052 27A4                        6C            .byte	$6C
11053 27A5                        38            .byte	$38
11054 27A6                        76            .byte	$76
11055 27A7                        DC            .byte	$DC
11056 27A8                        CC            .byte	$CC
11057 27A9                        CC            .byte	$CC
11058 27AA                        CC            .byte	$CC
11059 27AB                        76            .byte	$76
11060 27AC                        00            .byte	0
11061 27AD                        00            .byte	0
11062 27AE                        00            .byte	0
11063 27AF                        00            .byte	0
11064                                           ! 1263  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11065 27B0                        00            .byte	0
11066 27B1                        30            .byte	$30
11067 27B2                        30            .byte	$30
11068 27B3                        30            .byte	$30
11069 27B4                        60            .byte	$60
11070 27B5                        00            .byte	0
11071 27B6                        00            .byte	0
11072 27B7                        00            .byte	0
11073 27B8                        00            .byte	0
11074 27B9                        00            .byte	0
11075 27BA                        00            .byte	0
11076 27BB                        00            .byte	0
11077 27BC                        00            .byte	0
11078 27BD                        00            .byte	0
11079 27BE                        00            .byte	0
11080 27BF                        00            .byte	0
11081                                           ! 1264  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11082 27C0                        00            .byte	0
11083 27C1                        00            .byte	0
11084 27C2                        0C            .byte	$C
11085 27C3                        18            .byte	$18
11086 27C4                        30            .byte	$30
11087 27C5                        30            .byte	$30
11088 27C6                        30            .byte	$30
11089 27C7                        30            .byte	$30
11090 27C8                        30            .byte	$30
11091 27C9                        30            .byte	$30
11092 27CA                        18            .byte	$18
11093 27CB                        0C            .byte	$C
11094 27CC                        00            .byte	0
11095 27CD                        00            .byte	0
11096 27CE                        00            .byte	0
11097 27CF                        00            .byte	0
11098                                           ! 1265  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11099 27D0                        00            .byte	0
11100 27D1                        00            .byte	0
11101 27D2                        30            .byte	$30
11102 27D3                        18            .byte	$18
11103 27D4                        0C            .byte	$C
11104 27D5                        0C            .byte	$C
11105 27D6                        0C            .byte	$C
11106 27D7                        0C            .byte	$C
11107 27D8                        0C            .byte	$C
11108 27D9                        0C            .byte	$C
11109 27DA                        18            .byte	$18
11110 27DB                        30            .byte	$30
11111 27DC                        00            .byte	0
11112 27DD                        00            .byte	0
11113 27DE                        00            .byte	0
11114 27DF                        00            .byte	0
11115                                           ! 1266  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11116 27E0                        00            .byte	0
11117 27E1                        00            .byte	0
11118 27E2                        00            .byte	0
11119 27E3                        00            .byte	0
11120 27E4                        00            .byte	0
11121 27E5                        66            .byte	$66
11122 27E6                        3C            .byte	$3C
11123 27E7                        FF            .byte	$FF
11124 27E8                        3C            .byte	$3C
11125 27E9                        66            .byte	$66
11126 27EA                        00            .byte	0
11127 27EB                        00            .byte	0
11128 27EC                        00            .byte	0
11129 27ED                        00            .byte	0
11130 27EE                        00            .byte	0
11131 27EF                        00            .byte	0
11132                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11133 27F0                        00            .byte	0
11134 27F1                        00            .byte	0
11135 27F2                        00            .byte	0
11136 27F3                        00            .byte	0
11137 27F4                        00            .byte	0
11138 27F5                        18            .byte	$18
11139 27F6                        18            .byte	$18
11140 27F7                        7E            .byte	$7E
11141 27F8                        18            .byte	$18
11142 27F9                        18            .byte	$18
11143 27FA                        00            .byte	0
11144 27FB                        00            .byte	0
11145 27FC                        00            .byte	0
11146 27FD                        00            .byte	0
11147 27FE                        00            .byte	0
11148 27FF                        00            .byte	0
11149                                           ! 1268  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11150 2800                        00            .byte	0
11151 2801                        00            .byte	0
11152 2802                        00            .byte	0
11153 2803                        00            .byte	0
11154 2804                        00            .byte	0
11155 2805                        00            .byte	0
11156 2806                        00            .byte	0
11157 2807                        00            .byte	0
11158 2808                        00            .byte	0
11159 2809                        18            .byte	$18
11160 280A                        18            .byte	$18
11161 280B                        18            .byte	$18
11162 280C                        30            .byte	$30
11163 280D                        00            .byte	0
11164 280E                        00            .byte	0
11165 280F                        00            .byte	0
11166                                           ! 1269  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11167 2810                        00            .byte	0
11168 2811                        00            .byte	0
11169 2812                        00            .byte	0
11170 2813                        00            .byte	0
11171 2814                        00            .byte	0
11172 2815                        00            .byte	0
11173 2816                        00            .byte	0
11174 2817                        FE            .byte	$FE
11175 2818                        00            .byte	0
11176 2819                        00            .byte	0
11177 281A                        00            .byte	0
11178 281B                        00            .byte	0
11179 281C                        00            .byte	0
11180 281D                        00            .byte	0
11181 281E                        00            .byte	0
11182 281F                        00            .byte	0
11183                                           ! 1270  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11184 2820                        00            .byte	0
11185 2821                        00            .byte	0
11186 2822                        00            .byte	0
11187 2823                        00            .byte	0
11188 2824                        00            .byte	0
11189 2825                        00            .byte	0
11190 2826                        00            .byte	0
11191 2827                        00            .byte	0
11192 2828                        00            .byte	0
11193 2829                        00            .byte	0
11194 282A                        18            .byte	$18
11195 282B                        18            .byte	$18
11196 282C                        00            .byte	0
11197 282D                        00            .byte	0
11198 282E                        00            .byte	0
11199 282F                        00            .byte	0
11200                                           ! 1271  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11201 2830                        00            .byte	0
11202 2831                        00            .byte	0
11203 2832                        00            .byte	0
11204 2833                        00            .byte	0
11205 2834                        02            .byte	2
11206 2835                        06            .byte	6
11207 2836                        0C            .byte	$C
11208 2837                        18            .byte	$18
11209 2838                        30            .byte	$30
11210 2839                        60            .byte	$60
11211 283A                        C0            .byte	$C0
11212 283B                        80            .byte	$80
11213 283C                        00            .byte	0
11214 283D                        00            .byte	0
11215 283E                        00            .byte	0
11216 283F                        00            .byte	0
11217                                           ! 1272  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11218 2840                        00            .byte	0
11219 2841                        00            .byte	0
11220 2842                        3C            .byte	$3C
11221 2843                        66            .byte	$66
11222 2844                        C3            .byte	$C3
11223 2845                        C3            .byte	$C3
11224 2846                        DB            .byte	$DB
11225 2847                        DB            .byte	$DB
11226 2848                        C3            .byte	$C3
11227 2849                        C3            .byte	$C3
11228 284A                        66            .byte	$66
11229 284B                        3C            .byte	$3C
11230 284C                        00            .byte	0
11231 284D                        00            .byte	0
11232 284E                        00            .byte	0
11233 284F                        00            .byte	0
11234                                           ! 1273  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11235 2850                        00            .byte	0
11236 2851                        00            .byte	0
11237 2852                        18            .byte	$18
11238 2853                        38            .byte	$38
11239 2854                        78            .byte	$78
11240 2855                        18            .byte	$18
11241 2856                        18            .byte	$18
11242 2857                        18            .byte	$18
11243 2858                        18            .byte	$18
11244 2859                        18            .byte	$18
11245 285A                        18            .byte	$18
11246 285B                        7E            .byte	$7E
11247 285C                        00            .byte	0
11248 285D                        00            .byte	0
11249 285E                        00            .byte	0
11250 285F                        00            .byte	0
11251                                           ! 1274  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11252 2860                        00            .byte	0
11253 2861                        00            .byte	0
11254 2862                        7C            .byte	$7C
11255 2863                        C6            .byte	$C6
11256 2864                        06            .byte	6
11257 2865                        0C            .byte	$C
11258 2866                        18            .byte	$18
11259 2867                        30            .byte	$30
11260 2868                        60            .byte	$60
11261 2869                        C0            .byte	$C0
11262 286A                        C6            .byte	$C6
11263 286B                        FE            .byte	$FE
11264 286C                        00            .byte	0
11265 286D                        00            .byte	0
11266 286E                        00            .byte	0
11267 286F                        00            .byte	0
11268                                           ! 1275  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11269 2870                        00            .byte	0
11270 2871                        00            .byte	0
11271 2872                        7C            .byte	$7C
11272 2873                        C6            .byte	$C6
11273 2874                        06            .byte	6
11274 2875                        06            .byte	6
11275 2876                        3C            .byte	$3C
11276 2877                        06            .byte	6
11277 2878                        06            .byte	6
11278 2879                        06            .byte	6
11279 287A                        C6            .byte	$C6
11280 287B                        7C            .byte	$7C
11281 287C                        00            .byte	0
11282 287D                        00            .byte	0
11283 287E                        00            .byte	0
11284 287F                        00            .byte	0
11285                                           ! 1276  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11286 2880                        00            .byte	0
11287 2881                        00            .byte	0
11288 2882                        0C            .byte	$C
11289 2883                        1C            .byte	$1C
11290 2884                        3C            .byte	$3C
11291 2885                        6C            .byte	$6C
11292 2886                        CC            .byte	$CC
11293 2887                        FE            .byte	$FE
11294 2888                        0C            .byte	$C
11295 2889                        0C            .byte	$C
11296 288A                        0C            .byte	$C
11297 288B                        1E            .byte	$1E
11298 288C                        00            .byte	0
11299 288D                        00            .byte	0
11300 288E                        00            .byte	0
11301 288F                        00            .byte	0
11302                                           ! 1277  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0
11303 2890                        00            .byte	0
11304 2891                        00            .byte	0
11305 2892                        FE            .byte	$FE
11306 2893                        C0            .byte	$C0
11307 2894                        C0            .byte	$C0
11308                                           ! 1277 , 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11309 2895                        C0            .byte	$C0
11310 2896                        FC            .byte	$FC
11311 2897                        06            .byte	6
11312 2898                        06            .byte	6
11313 2899                        06            .byte	6
11314 289A                        C6            .byte	$C6
11315 289B                        7C            .byte	$7C
11316 289C                        00            .byte	0
11317 289D                        00            .byte	0
11318 289E                        00            .byte	0
11319 289F                        00            .byte	0
11320                                           ! 1278  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11321 28A0                        00            .byte	0
11322 28A1                        00            .byte	0
11323 28A2                        38            .byte	$38
11324 28A3                        60            .byte	$60
11325 28A4                        C0            .byte	$C0
11326 28A5                        C0            .byte	$C0
11327 28A6                        FC            .byte	$FC
11328 28A7                        C6            .byte	$C6
11329 28A8                        C6            .byte	$C6
11330 28A9                        C6            .byte	$C6
11331 28AA                        C6            .byte	$C6
11332 28AB                        7C            .byte	$7C
11333 28AC                        00            .byte	0
11334 28AD                        00            .byte	0
11335 28AE                        00            .byte	0
11336 28AF                        00            .byte	0
11337                                           ! 1279  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11338 28B0                        00            .byte	0
11339 28B1                        00            .byte	0
11340 28B2                        FE            .byte	$FE
11341 28B3                        C6            .byte	$C6
11342 28B4                        06            .byte	6
11343 28B5                        06            .byte	6
11344 28B6                        0C            .byte	$C
11345 28B7                        18            .byte	$18
11346 28B8                        30            .byte	$30
11347 28B9                        30            .byte	$30
11348 28BA                        30            .byte	$30
11349 28BB                        30            .byte	$30
11350 28BC                        00            .byte	0
11351 28BD                        00            .byte	0
11352 28BE                        00            .byte	0
11353 28BF                        00            .byte	0
11354                                           ! 1280  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11355 28C0                        00            .byte	0
11356 28C1                        00            .byte	0
11357 28C2                        7C            .byte	$7C
11358 28C3                        C6            .byte	$C6
11359 28C4                        C6            .byte	$C6
11360 28C5                        C6            .byte	$C6
11361 28C6                        7C            .byte	$7C
11362 28C7                        C6            .byte	$C6
11363 28C8                        C6            .byte	$C6
11364 28C9                        C6            .byte	$C6
11365 28CA                        C6            .byte	$C6
11366 28CB                        7C            .byte	$7C
11367 28CC                        00            .byte	0
11368 28CD                        00            .byte	0
11369 28CE                        00            .byte	0
11370 28CF                        00            .byte	0
11371                                           ! 1281  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11372 28D0                        00            .byte	0
11373 28D1                        00            .byte	0
11374 28D2                        7C            .byte	$7C
11375 28D3                        C6            .byte	$C6
11376 28D4                        C6            .byte	$C6
11377 28D5                        C6            .byte	$C6
11378 28D6                        7E            .byte	$7E
11379 28D7                        06            .byte	6
11380 28D8                        06            .byte	6
11381 28D9                        06            .byte	6
11382 28DA                        0C            .byte	$C
11383 28DB                        78            .byte	$78
11384 28DC                        00            .byte	0
11385 28DD                        00            .byte	0
11386 28DE                        00            .byte	0
11387 28DF                        00            .byte	0
11388                                           ! 1282  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11389 28E0                        00            .byte	0
11390 28E1                        00            .byte	0
11391 28E2                        00            .byte	0
11392 28E3                        00            .byte	0
11393 28E4                        18            .byte	$18
11394 28E5                        18            .byte	$18
11395 28E6                        00            .byte	0
11396 28E7                        00            .byte	0
11397 28E8                        00            .byte	0
11398 28E9                        18            .byte	$18
11399 28EA                        18            .byte	$18
11400 28EB                        00            .byte	0
11401 28EC                        00            .byte	0
11402 28ED                        00            .byte	0
11403 28EE                        00            .byte	0
11404 28EF                        00            .byte	0
11405                                           ! 1283  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11406 28F0                        00            .byte	0
11407 28F1                        00            .byte	0
11408 28F2                        00            .byte	0
11409 28F3                        00            .byte	0
11410 28F4                        18            .byte	$18
11411 28F5                        18            .byte	$18
11412 28F6                        00            .byte	0
11413 28F7                        00            .byte	0
11414 28F8                        00            .byte	0
11415 28F9                        18            .byte	$18
11416 28FA                        18            .byte	$18
11417 28FB                        30            .byte	$30
11418 28FC                        00            .byte	0
11419 28FD                        00            .byte	0
11420 28FE                        00            .byte	0
11421 28FF                        00            .byte	0
11422                                           ! 1284  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11423 2900                        00            .byte	0
11424 2901                        00            .byte	0
11425 2902                        00            .byte	0
11426 2903                        06            .byte	6
11427 2904                        0C            .byte	$C
11428 2905                        18            .byte	$18
11429 2906                        30            .byte	$30
11430 2907                        60            .byte	$60
11431 2908                        30            .byte	$30
11432 2909                        18            .byte	$18
11433 290A                        0C            .byte	$C
11434 290B                        06            .byte	6
11435 290C                        00            .byte	0
11436 290D                        00            .byte	0
11437 290E                        00            .byte	0
11438 290F                        00            .byte	0
11439                                           ! 1285  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11440 2910                        00            .byte	0
11441 2911                        00            .byte	0
11442 2912                        00            .byte	0
11443 2913                        00            .byte	0
11444 2914                        00            .byte	0
11445 2915                        7E            .byte	$7E
11446 2916                        00            .byte	0
11447 2917                        00            .byte	0
11448 2918                        7E            .byte	$7E
11449 2919                        00            .byte	0
11450 291A                        00            .byte	0
11451 291B                        00            .byte	0
11452 291C                        00            .byte	0
11453 291D                        00            .byte	0
11454 291E                        00            .byte	0
11455 291F                        00            .byte	0
11456                                           ! 1286  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11457 2920                        00            .byte	0
11458 2921                        00            .byte	0
11459 2922                        00            .byte	0
11460 2923                        60            .byte	$60
11461 2924                        30            .byte	$30
11462 2925                        18            .byte	$18
11463 2926                        0C            .byte	$C
11464 2927                        06            .byte	6
11465 2928                        0C            .byte	$C
11466 2929                        18            .byte	$18
11467 292A                        30            .byte	$30
11468 292B                        60            .byte	$60
11469 292C                        00            .byte	0
11470 292D                        00            .byte	0
11471 292E                        00            .byte	0
11472 292F                        00            .byte	0
11473                                           ! 1287  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11474 2930                        00            .byte	0
11475 2931                        00            .byte	0
11476 2932                        7C            .byte	$7C
11477 2933                        C6            .byte	$C6
11478 2934                        C6            .byte	$C6
11479 2935                        0C            .byte	$C
11480 2936                        18            .byte	$18
11481 2937                        18            .byte	$18
11482 2938                        18            .byte	$18
11483 2939                        00            .byte	0
11484 293A                        18            .byte	$18
11485 293B                        18            .byte	$18
11486 293C                        00            .byte	0
11487 293D                        00            .byte	0
11488 293E                        00            .byte	0
11489 293F                        00            .byte	0
11490                                           ! 1288  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11491 2940                        00            .byte	0
11492 2941                        00            .byte	0
11493 2942                        00            .byte	0
11494 2943                        7C            .byte	$7C
11495 2944                        C6            .byte	$C6
11496 2945                        C6            .byte	$C6
11497 2946                        DE            .byte	$DE
11498 2947                        DE            .byte	$DE
11499 2948                        DE            .byte	$DE
11500 2949                        DC            .byte	$DC
11501 294A                        C0            .byte	$C0
11502 294B                        7C            .byte	$7C
11503 294C                        00            .byte	0
11504 294D                        00            .byte	0
11505 294E                        00            .byte	0
11506 294F                        00            .byte	0
11507                                           ! 1289  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11508 2950                        00            .byte	0
11509 2951                        00            .byte	0
11510 2952                        10            .byte	$10
11511 2953                        38            .byte	$38
11512 2954                        6C            .byte	$6C
11513 2955                        C6            .byte	$C6
11514 2956                        C6            .byte	$C6
11515 2957                        FE            .byte	$FE
11516 2958                        C6            .byte	$C6
11517 2959                        C6            .byte	$C6
11518 295A                        C6            .byte	$C6
11519 295B                        C6            .byte	$C6
11520 295C                        00            .byte	0
11521 295D                        00            .byte	0
11522 295E                        00            .byte	0
11523 295F                        00            .byte	0
11524                                           ! 1290  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11525 2960                        00            .byte	0
11526 2961                        00            .byte	0
11527 2962                        FC            .byte	$FC
11528 2963                        66            .byte	$66
11529 2964                        66            .byte	$66
11530 2965                        66            .byte	$66
11531 2966                        7C            .byte	$7C
11532 2967                        66            .byte	$66
11533 2968                        66            .byte	$66
11534 2969                        66            .byte	$66
11535 296A                        66            .byte	$66
11536 296B                        FC            .byte	$FC
11537 296C                        00            .byte	0
11538 296D                        00            .byte	0
11539 296E                        00            .byte	0
11540 296F                        00            .byte	0
11541                                           ! 1291  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11542 2970                        00            .byte	0
11543 2971                        00            .byte	0
11544 2972                        3C            .byte	$3C
11545 2973                        66            .byte	$66
11546 2974                        C2            .byte	$C2
11547 2975                        C0            .byte	$C0
11548 2976                        C0            .byte	$C0
11549 2977                        C0            .byte	$C0
11550 2978                        C0            .byte	$C0
11551 2979                        C2            .byte	$C2
11552 297A                        66            .byte	$66
11553 297B                        3C            .byte	$3C
11554 297C                        00            .byte	0
11555 297D                        00            .byte	0
11556 297E                        00            .byte	0
11557 297F                        00            .byte	0
11558                                           ! 1292  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11559 2980                        00            .byte	0
11560 2981                        00            .byte	0
11561 2982                        F8            .byte	$F8
11562 2983                        6C            .byte	$6C
11563 2984                        66            .byte	$66
11564 2985                        66            .byte	$66
11565 2986                        66            .byte	$66
11566 2987                        66            .byte	$66
11567 2988                        66            .byte	$66
11568 2989                        66            .byte	$66
11569 298A                        6C            .byte	$6C
11570 298B                        F8            .byte	$F8
11571 298C                        00            .byte	0
11572 298D                        00            .byte	0
11573 298E                        00            .byte	0
11574 298F                        00            .byte	0
11575                                           ! 1293  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11576 2990                        00            .byte	0
11577 2991                        00            .byte	0
11578 2992                        FE            .byte	$FE
11579 2993                        66            .byte	$66
11580 2994                        62            .byte	$62
11581 2995                        68            .byte	$68
11582 2996                        78            .byte	$78
11583 2997                        68            .byte	$68
11584 2998                        60            .byte	$60
11585 2999                        62            .byte	$62
11586 299A                        66            .byte	$66
11587 299B                        FE            .byte	$FE
11588 299C                        00            .byte	0
11589 299D                        00            .byte	0
11590 299E                        00            .byte	0
11591 299F                        00            .byte	0
11592                                           ! 1294  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11593 29A0                        00            .byte	0
11594 29A1                        00            .byte	0
11595 29A2                        FE            .byte	$FE
11596 29A3                        66            .byte	$66
11597 29A4                        62            .byte	$62
11598 29A5                        68            .byte	$68
11599 29A6                        78            .byte	$78
11600 29A7                        68            .byte	$68
11601 29A8                        60            .byte	$60
11602 29A9                        60            .byte	$60
11603 29AA                        60            .byte	$60
11604 29AB                        F0            .byte	$F0
11605 29AC                        00            .byte	0
11606 29AD                        00            .byte	0
11607 29AE                        00            .byte	0
11608 29AF                        00            .byte	0
11609                                           ! 1295  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11610 29B0                        00            .byte	0
11611 29B1                        00            .byte	0
11612 29B2                        3C            .byte	$3C
11613 29B3                        66            .byte	$66
11614 29B4                        C2            .byte	$C2
11615 29B5                        C0            .byte	$C0
11616 29B6                        C0            .byte	$C0
11617 29B7                        DE            .byte	$DE
11618 29B8                        C6            .byte	$C6
11619 29B9                        C6            .byte	$C6
11620 29BA                        66            .byte	$66
11621 29BB                        3A            .byte	$3A
11622 29BC                        00            .byte	0
11623 29BD                        00            .byte	0
11624 29BE                        00            .byte	0
11625 29BF                        00            .byte	0
11626                                           ! 1296  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11627 29C0                        00            .byte	0
11628 29C1                        00            .byte	0
11629 29C2                        C6            .byte	$C6
11630 29C3                        C6            .byte	$C6
11631 29C4                        C6            .byte	$C6
11632 29C5                        C6            .byte	$C6
11633 29C6                        FE            .byte	$FE
11634 29C7                        C6            .byte	$C6
11635 29C8                        C6            .byte	$C6
11636 29C9                        C6            .byte	$C6
11637 29CA                        C6            .byte	$C6
11638 29CB                        C6            .byte	$C6
11639 29CC                        00            .byte	0
11640 29CD                        00            .byte	0
11641 29CE                        00            .byte	0
11642 29CF                        00            .byte	0
11643                                           ! 1297  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11644 29D0                        00            .byte	0
11645 29D1                        00            .byte	0
11646 29D2                        3C            .byte	$3C
11647 29D3                        18            .byte	$18
11648 29D4                        18            .byte	$18
11649 29D5                        18            .byte	$18
11650 29D6                        18            .byte	$18
11651 29D7                        18            .byte	$18
11652 29D8                        18            .byte	$18
11653 29D9                        18            .byte	$18
11654 29DA                        18            .byte	$18
11655 29DB                        3C            .byte	$3C
11656 29DC                        00            .byte	0
11657 29DD                        00            .byte	0
11658 29DE                        00            .byte	0
11659 29DF                        00            .byte	0
11660                                           ! 1298  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0
11661 29E0                        00            .byte	0
11662 29E1                        00            .byte	0
11663 29E2                        1E            .byte	$1E
11664 29E3                        0C            .byte	$C
11665 29E4                        0C            .byte	$C
11666 29E5                        0C            .byte	$C
11667 29E6                        0C            .byte	$C
11668                                           ! 1298 c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11669 29E7                        0C            .byte	$C
11670 29E8                        CC            .byte	$CC
11671 29E9                        CC            .byte	$CC
11672 29EA                        CC            .byte	$CC
11673 29EB                        78            .byte	$78
11674 29EC                        00            .byte	0
11675 29ED                        00            .byte	0
11676 29EE                        00            .byte	0
11677 29EF                        00            .byte	0
11678                                           ! 1299  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11679 29F0                        00            .byte	0
11680 29F1                        00            .byte	0
11681 29F2                        E6            .byte	$E6
11682 29F3                        66            .byte	$66
11683 29F4                        66            .byte	$66
11684 29F5                        6C            .byte	$6C
11685 29F6                        78            .byte	$78
11686 29F7                        78            .byte	$78
11687 29F8                        6C            .byte	$6C
11688 29F9                        66            .byte	$66
11689 29FA                        66            .byte	$66
11690 29FB                        E6            .byte	$E6
11691 29FC                        00            .byte	0
11692 29FD                        00            .byte	0
11693 29FE                        00            .byte	0
11694 29FF                        00            .byte	0
11695                                           ! 1300  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11696 2A00                        00            .byte	0
11697 2A01                        00            .byte	0
11698 2A02                        F0            .byte	$F0
11699 2A03                        60            .byte	$60
11700 2A04                        60            .byte	$60
11701 2A05                        60            .byte	$60
11702 2A06                        60            .byte	$60
11703 2A07                        60            .byte	$60
11704 2A08                        60            .byte	$60
11705 2A09                        62            .byte	$62
11706 2A0A                        66            .byte	$66
11707 2A0B                        FE            .byte	$FE
11708 2A0C                        00            .byte	0
11709 2A0D                        00            .byte	0
11710 2A0E                        00            .byte	0
11711 2A0F                        00            .byte	0
11712                                           ! 1301  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11713 2A10                        00            .byte	0
11714 2A11                        00            .byte	0
11715 2A12                        C3            .byte	$C3
11716 2A13                        E7            .byte	$E7
11717 2A14                        FF            .byte	$FF
11718 2A15                        FF            .byte	$FF
11719 2A16                        DB            .byte	$DB
11720 2A17                        C3            .byte	$C3
11721 2A18                        C3            .byte	$C3
11722 2A19                        C3            .byte	$C3
11723 2A1A                        C3            .byte	$C3
11724 2A1B                        C3            .byte	$C3
11725 2A1C                        00            .byte	0
11726 2A1D                        00            .byte	0
11727 2A1E                        00            .byte	0
11728 2A1F                        00            .byte	0
11729                                           ! 1302  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11730 2A20                        00            .byte	0
11731 2A21                        00            .byte	0
11732 2A22                        C6            .byte	$C6
11733 2A23                        E6            .byte	$E6
11734 2A24                        F6            .byte	$F6
11735 2A25                        FE            .byte	$FE
11736 2A26                        DE            .byte	$DE
11737 2A27                        CE            .byte	$CE
11738 2A28                        C6            .byte	$C6
11739 2A29                        C6            .byte	$C6
11740 2A2A                        C6            .byte	$C6
11741 2A2B                        C6            .byte	$C6
11742 2A2C                        00            .byte	0
11743 2A2D                        00            .byte	0
11744 2A2E                        00            .byte	0
11745 2A2F                        00            .byte	0
11746                                           ! 1303  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11747 2A30                        00            .byte	0
11748 2A31                        00            .byte	0
11749 2A32                        7C            .byte	$7C
11750 2A33                        C6            .byte	$C6
11751 2A34                        C6            .byte	$C6
11752 2A35                        C6            .byte	$C6
11753 2A36                        C6            .byte	$C6
11754 2A37                        C6            .byte	$C6
11755 2A38                        C6            .byte	$C6
11756 2A39                        C6            .byte	$C6
11757 2A3A                        C6            .byte	$C6
11758 2A3B                        7C            .byte	$7C
11759 2A3C                        00            .byte	0
11760 2A3D                        00            .byte	0
11761 2A3E                        00            .byte	0
11762 2A3F                        00            .byte	0
11763                                           ! 1304  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11764 2A40                        00            .byte	0
11765 2A41                        00            .byte	0
11766 2A42                        FC            .byte	$FC
11767 2A43                        66            .byte	$66
11768 2A44                        66            .byte	$66
11769 2A45                        66            .byte	$66
11770 2A46                        7C            .byte	$7C
11771 2A47                        60            .byte	$60
11772 2A48                        60            .byte	$60
11773 2A49                        60            .byte	$60
11774 2A4A                        60            .byte	$60
11775 2A4B                        F0            .byte	$F0
11776 2A4C                        00            .byte	0
11777 2A4D                        00            .byte	0
11778 2A4E                        00            .byte	0
11779 2A4F                        00            .byte	0
11780                                           ! 1305  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
11781 2A50                        00            .byte	0
11782 2A51                        00            .byte	0
11783 2A52                        7C            .byte	$7C
11784 2A53                        C6            .byte	$C6
11785 2A54                        C6            .byte	$C6
11786 2A55                        C6            .byte	$C6
11787 2A56                        C6            .byte	$C6
11788 2A57                        C6            .byte	$C6
11789 2A58                        C6            .byte	$C6
11790 2A59                        D6            .byte	$D6
11791 2A5A                        DE            .byte	$DE
11792 2A5B                        7C            .byte	$7C
11793 2A5C                        0C            .byte	$C
11794 2A5D                        0E            .byte	$E
11795 2A5E                        00            .byte	0
11796 2A5F                        00            .byte	0
11797                                           ! 1306  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11798 2A60                        00            .byte	0
11799 2A61                        00            .byte	0
11800 2A62                        FC            .byte	$FC
11801 2A63                        66            .byte	$66
11802 2A64                        66            .byte	$66
11803 2A65                        66            .byte	$66
11804 2A66                        7C            .byte	$7C
11805 2A67                        6C            .byte	$6C
11806 2A68                        66            .byte	$66
11807 2A69                        66            .byte	$66
11808 2A6A                        66            .byte	$66
11809 2A6B                        E6            .byte	$E6
11810 2A6C                        00            .byte	0
11811 2A6D                        00            .byte	0
11812 2A6E                        00            .byte	0
11813 2A6F                        00            .byte	0
11814                                           ! 1307  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11815 2A70                        00            .byte	0
11816 2A71                        00            .byte	0
11817 2A72                        7C            .byte	$7C
11818 2A73                        C6            .byte	$C6
11819 2A74                        C6            .byte	$C6
11820 2A75                        60            .byte	$60
11821 2A76                        38            .byte	$38
11822 2A77                        0C            .byte	$C
11823 2A78                        06            .byte	6
11824 2A79                        C6            .byte	$C6
11825 2A7A                        C6            .byte	$C6
11826 2A7B                        7C            .byte	$7C
11827 2A7C                        00            .byte	0
11828 2A7D                        00            .byte	0
11829 2A7E                        00            .byte	0
11830 2A7F                        00            .byte	0
11831                                           ! 1308  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11832 2A80                        00            .byte	0
11833 2A81                        00            .byte	0
11834 2A82                        FF            .byte	$FF
11835 2A83                        DB            .byte	$DB
11836 2A84                        99            .byte	$99
11837 2A85                        18            .byte	$18
11838 2A86                        18            .byte	$18
11839 2A87                        18            .byte	$18
11840 2A88                        18            .byte	$18
11841 2A89                        18            .byte	$18
11842 2A8A                        18            .byte	$18
11843 2A8B                        3C            .byte	$3C
11844 2A8C                        00            .byte	0
11845 2A8D                        00            .byte	0
11846 2A8E                        00            .byte	0
11847 2A8F                        00            .byte	0
11848                                           ! 1309  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11849 2A90                        00            .byte	0
11850 2A91                        00            .byte	0
11851 2A92                        C6            .byte	$C6
11852 2A93                        C6            .byte	$C6
11853 2A94                        C6            .byte	$C6
11854 2A95                        C6            .byte	$C6
11855 2A96                        C6            .byte	$C6
11856 2A97                        C6            .byte	$C6
11857 2A98                        C6            .byte	$C6
11858 2A99                        C6            .byte	$C6
11859 2A9A                        C6            .byte	$C6
11860 2A9B                        7C            .byte	$7C
11861 2A9C                        00            .byte	0
11862 2A9D                        00            .byte	0
11863 2A9E                        00            .byte	0
11864 2A9F                        00            .byte	0
11865                                           ! 1310  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11866 2AA0                        00            .byte	0
11867 2AA1                        00            .byte	0
11868 2AA2                        C3            .byte	$C3
11869 2AA3                        C3            .byte	$C3
11870 2AA4                        C3            .byte	$C3
11871 2AA5                        C3            .byte	$C3
11872 2AA6                        C3            .byte	$C3
11873 2AA7                        C3            .byte	$C3
11874 2AA8                        C3            .byte	$C3
11875 2AA9                        66            .byte	$66
11876 2AAA                        3C            .byte	$3C
11877 2AAB                        18            .byte	$18
11878 2AAC                        00            .byte	0
11879 2AAD                        00            .byte	0
11880 2AAE                        00            .byte	0
11881 2AAF                        00            .byte	0
11882                                           ! 1311  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11883 2AB0                        00            .byte	0
11884 2AB1                        00            .byte	0
11885 2AB2                        C3            .byte	$C3
11886 2AB3                        C3            .byte	$C3
11887 2AB4                        C3            .byte	$C3
11888 2AB5                        C3            .byte	$C3
11889 2AB6                        C3            .byte	$C3
11890 2AB7                        DB            .byte	$DB
11891 2AB8                        DB            .byte	$DB
11892 2AB9                        FF            .byte	$FF
11893 2ABA                        66            .byte	$66
11894 2ABB                        66            .byte	$66
11895 2ABC                        00            .byte	0
11896 2ABD                        00            .byte	0
11897 2ABE                        00            .byte	0
11898 2ABF                        00            .byte	0
11899                                           ! 1312  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11900 2AC0                        00            .byte	0
11901 2AC1                        00            .byte	0
11902 2AC2                        C3            .byte	$C3
11903 2AC3                        C3            .byte	$C3
11904 2AC4                        66            .byte	$66
11905 2AC5                        3C            .byte	$3C
11906 2AC6                        18            .byte	$18
11907 2AC7                        18            .byte	$18
11908 2AC8                        3C            .byte	$3C
11909 2AC9                        66            .byte	$66
11910 2ACA                        C3            .byte	$C3
11911 2ACB                        C3            .byte	$C3
11912 2ACC                        00            .byte	0
11913 2ACD                        00            .byte	0
11914 2ACE                        00            .byte	0
11915 2ACF                        00            .byte	0
11916                                           ! 1313  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11917 2AD0                        00            .byte	0
11918 2AD1                        00            .byte	0
11919 2AD2                        C3            .byte	$C3
11920 2AD3                        C3            .byte	$C3
11921 2AD4                        C3            .byte	$C3
11922 2AD5                        66            .byte	$66
11923 2AD6                        3C            .byte	$3C
11924 2AD7                        18            .byte	$18
11925 2AD8                        18            .byte	$18
11926 2AD9                        18            .byte	$18
11927 2ADA                        18            .byte	$18
11928 2ADB                        3C            .byte	$3C
11929 2ADC                        00            .byte	0
11930 2ADD                        00            .byte	0
11931 2ADE                        00            .byte	0
11932 2ADF                        00            .byte	0
11933                                           ! 1314  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
11934 2AE0                        00            .byte	0
11935 2AE1                        00            .byte	0
11936 2AE2                        FF            .byte	$FF
11937 2AE3                        C3            .byte	$C3
11938 2AE4                        86            .byte	$86
11939 2AE5                        0C            .byte	$C
11940 2AE6                        18            .byte	$18
11941 2AE7                        30            .byte	$30
11942 2AE8                        60            .byte	$60
11943 2AE9                        C1            .byte	$C1
11944 2AEA                        C3            .byte	$C3
11945 2AEB                        FF            .byte	$FF
11946 2AEC                        00            .byte	0
11947 2AED                        00            .byte	0
11948 2AEE                        00            .byte	0
11949 2AEF                        00            .byte	0
11950                                           ! 1315  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
11951 2AF0                        00            .byte	0
11952 2AF1                        00            .byte	0
11953 2AF2                        3C            .byte	$3C
11954 2AF3                        30            .byte	$30
11955 2AF4                        30            .byte	$30
11956 2AF5                        30            .byte	$30
11957 2AF6                        30            .byte	$30
11958 2AF7                        30            .byte	$30
11959 2AF8                        30            .byte	$30
11960 2AF9                        30            .byte	$30
11961 2AFA                        30            .byte	$30
11962 2AFB                        3C            .byte	$3C
11963 2AFC                        00            .byte	0
11964 2AFD                        00            .byte	0
11965 2AFE                        00            .byte	0
11966 2AFF                        00            .byte	0
11967                                           ! 1316  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11968 2B00                        00            .byte	0
11969 2B01                        00            .byte	0
11970 2B02                        00            .byte	0
11971 2B03                        80            .byte	$80
11972 2B04                        C0            .byte	$C0
11973 2B05                        E0            .byte	$E0
11974 2B06                        70            .byte	$70
11975 2B07                        38            .byte	$38
11976 2B08                        1C            .byte	$1C
11977 2B09                        0E            .byte	$E
11978 2B0A                        06            .byte	6
11979 2B0B                        02            .byte	2
11980 2B0C                        00            .byte	0
11981 2B0D                        00            .byte	0
11982 2B0E                        00            .byte	0
11983 2B0F                        00            .byte	0
11984                                           ! 1317  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
11985 2B10                        00            .byte	0
11986 2B11                        00            .byte	0
11987 2B12                        3C            .byte	$3C
11988 2B13                        0C            .byte	$C
11989 2B14                        0C            .byte	$C
11990 2B15                        0C            .byte	$C
11991 2B16                        0C            .byte	$C
11992 2B17                        0C            .byte	$C
11993 2B18                        0C            .byte	$C
11994 2B19                        0C            .byte	$C
11995 2B1A                        0C            .byte	$C
11996 2B1B                        3C            .byte	$3C
11997 2B1C                        00            .byte	0
11998 2B1D                        00            .byte	0
11999 2B1E                        00            .byte	0
12000 2B1F                        00            .byte	0
12001                                           ! 1318  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12002 2B20                        10            .byte	$10
12003 2B21                        38            .byte	$38
12004 2B22                        6C            .byte	$6C
12005 2B23                        C6            .byte	$C6
12006 2B24                        00            .byte	0
12007 2B25                        00            .byte	0
12008 2B26                        00            .byte	0
12009 2B27                        00            .byte	0
12010 2B28                        00            .byte	0
12011 2B29                        00            .byte	0
12012 2B2A                        00            .byte	0
12013 2B2B                        00            .byte	0
12014 2B2C                        00            .byte	0
12015 2B2D                        00            .byte	0
12016 2B2E                        00            .byte	0
12017 2B2F                        00            .byte	0
12018                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
12019 2B30                        00            .byte	0
12020 2B31                        00            .byte	0
12021 2B32                        00            .byte	0
12022 2B33                        00            .byte	0
12023 2B34                        00            .byte	0
12024 2B35                        00            .byte	0
12025 2B36                        00            .byte	0
12026 2B37                        00            .byte	0
12027 2B38                        00            .byte	0
12028                                           ! 1319 00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12029 2B39                        00            .byte	0
12030 2B3A                        00            .byte	0
12031 2B3B                        00            .byte	0
12032 2B3C                        00            .byte	0
12033 2B3D                        FF            .byte	$FF
12034 2B3E                        00            .byte	0
12035 2B3F                        00            .byte	0
12036                                           ! 1320  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12037 2B40                        30            .byte	$30
12038 2B41                        30            .byte	$30
12039 2B42                        18            .byte	$18
12040 2B43                        00            .byte	0
12041 2B44                        00            .byte	0
12042 2B45                        00            .byte	0
12043 2B46                        00            .byte	0
12044 2B47                        00            .byte	0
12045 2B48                        00            .byte	0
12046 2B49                        00            .byte	0
12047 2B4A                        00            .byte	0
12048 2B4B                        00            .byte	0
12049 2B4C                        00            .byte	0
12050 2B4D                        00            .byte	0
12051 2B4E                        00            .byte	0
12052 2B4F                        00            .byte	0
12053                                           ! 1321  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12054 2B50                        00            .byte	0
12055 2B51                        00            .byte	0
12056 2B52                        00            .byte	0
12057 2B53                        00            .byte	0
12058 2B54                        00            .byte	0
12059 2B55                        78            .byte	$78
12060 2B56                        0C            .byte	$C
12061 2B57                        7C            .byte	$7C
12062 2B58                        CC            .byte	$CC
12063 2B59                        CC            .byte	$CC
12064 2B5A                        CC            .byte	$CC
12065 2B5B                        76            .byte	$76
12066 2B5C                        00            .byte	0
12067 2B5D                        00            .byte	0
12068 2B5E                        00            .byte	0
12069 2B5F                        00            .byte	0
12070                                           ! 1322  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12071 2B60                        00            .byte	0
12072 2B61                        00            .byte	0
12073 2B62                        E0            .byte	$E0
12074 2B63                        60            .byte	$60
12075 2B64                        60            .byte	$60
12076 2B65                        78            .byte	$78
12077 2B66                        6C            .byte	$6C
12078 2B67                        66            .byte	$66
12079 2B68                        66            .byte	$66
12080 2B69                        66            .byte	$66
12081 2B6A                        66            .byte	$66
12082 2B6B                        7C            .byte	$7C
12083 2B6C                        00            .byte	0
12084 2B6D                        00            .byte	0
12085 2B6E                        00            .byte	0
12086 2B6F                        00            .byte	0
12087                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12088 2B70                        00            .byte	0
12089 2B71                        00            .byte	0
12090 2B72                        00            .byte	0
12091 2B73                        00            .byte	0
12092 2B74                        00            .byte	0
12093 2B75                        7C            .byte	$7C
12094 2B76                        C6            .byte	$C6
12095 2B77                        C0            .byte	$C0
12096 2B78                        C0            .byte	$C0
12097 2B79                        C0            .byte	$C0
12098 2B7A                        C6            .byte	$C6
12099 2B7B                        7C            .byte	$7C
12100 2B7C                        00            .byte	0
12101 2B7D                        00            .byte	0
12102 2B7E                        00            .byte	0
12103 2B7F                        00            .byte	0
12104                                           ! 1324  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12105 2B80                        00            .byte	0
12106 2B81                        00            .byte	0
12107 2B82                        1C            .byte	$1C
12108 2B83                        0C            .byte	$C
12109 2B84                        0C            .byte	$C
12110 2B85                        3C            .byte	$3C
12111 2B86                        6C            .byte	$6C
12112 2B87                        CC            .byte	$CC
12113 2B88                        CC            .byte	$CC
12114 2B89                        CC            .byte	$CC
12115 2B8A                        CC            .byte	$CC
12116 2B8B                        76            .byte	$76
12117 2B8C                        00            .byte	0
12118 2B8D                        00            .byte	0
12119 2B8E                        00            .byte	0
12120 2B8F                        00            .byte	0
12121                                           ! 1325  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12122 2B90                        00            .byte	0
12123 2B91                        00            .byte	0
12124 2B92                        00            .byte	0
12125 2B93                        00            .byte	0
12126 2B94                        00            .byte	0
12127 2B95                        7C            .byte	$7C
12128 2B96                        C6            .byte	$C6
12129 2B97                        FE            .byte	$FE
12130 2B98                        C0            .byte	$C0
12131 2B99                        C0            .byte	$C0
12132 2B9A                        C6            .byte	$C6
12133 2B9B                        7C            .byte	$7C
12134 2B9C                        00            .byte	0
12135 2B9D                        00            .byte	0
12136 2B9E                        00            .byte	0
12137 2B9F                        00            .byte	0
12138                                           ! 1326  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12139 2BA0                        00            .byte	0
12140 2BA1                        00            .byte	0
12141 2BA2                        38            .byte	$38
12142 2BA3                        6C            .byte	$6C
12143 2BA4                        64            .byte	$64
12144 2BA5                        60            .byte	$60
12145 2BA6                        F0            .byte	$F0
12146 2BA7                        60            .byte	$60
12147 2BA8                        60            .byte	$60
12148 2BA9                        60            .byte	$60
12149 2BAA                        60            .byte	$60
12150 2BAB                        F0            .byte	$F0
12151 2BAC                        00            .byte	0
12152 2BAD                        00            .byte	0
12153 2BAE                        00            .byte	0
12154 2BAF                        00            .byte	0
12155                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12156 2BB0                        00            .byte	0
12157 2BB1                        00            .byte	0
12158 2BB2                        00            .byte	0
12159 2BB3                        00            .byte	0
12160 2BB4                        00            .byte	0
12161 2BB5                        76            .byte	$76
12162 2BB6                        CC            .byte	$CC
12163 2BB7                        CC            .byte	$CC
12164 2BB8                        CC            .byte	$CC
12165 2BB9                        CC            .byte	$CC
12166 2BBA                        CC            .byte	$CC
12167 2BBB                        7C            .byte	$7C
12168 2BBC                        0C            .byte	$C
12169 2BBD                        CC            .byte	$CC
12170 2BBE                        78            .byte	$78
12171 2BBF                        00            .byte	0
12172                                           ! 1328  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12173 2BC0                        00            .byte	0
12174 2BC1                        00            .byte	0
12175 2BC2                        E0            .byte	$E0
12176 2BC3                        60            .byte	$60
12177 2BC4                        60            .byte	$60
12178 2BC5                        6C            .byte	$6C
12179 2BC6                        76            .byte	$76
12180 2BC7                        66            .byte	$66
12181 2BC8                        66            .byte	$66
12182 2BC9                        66            .byte	$66
12183 2BCA                        66            .byte	$66
12184 2BCB                        E6            .byte	$E6
12185 2BCC                        00            .byte	0
12186 2BCD                        00            .byte	0
12187 2BCE                        00            .byte	0
12188 2BCF                        00            .byte	0
12189                                           ! 1329  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12190 2BD0                        00            .byte	0
12191 2BD1                        00            .byte	0
12192 2BD2                        18            .byte	$18
12193 2BD3                        18            .byte	$18
12194 2BD4                        00            .byte	0
12195 2BD5                        38            .byte	$38
12196 2BD6                        18            .byte	$18
12197 2BD7                        18            .byte	$18
12198 2BD8                        18            .byte	$18
12199 2BD9                        18            .byte	$18
12200 2BDA                        18            .byte	$18
12201 2BDB                        3C            .byte	$3C
12202 2BDC                        00            .byte	0
12203 2BDD                        00            .byte	0
12204 2BDE                        00            .byte	0
12205 2BDF                        00            .byte	0
12206                                           ! 1330  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12207 2BE0                        00            .byte	0
12208 2BE1                        00            .byte	0
12209 2BE2                        06            .byte	6
12210 2BE3                        06            .byte	6
12211 2BE4                        00            .byte	0
12212 2BE5                        0E            .byte	$E
12213 2BE6                        06            .byte	6
12214 2BE7                        06            .byte	6
12215 2BE8                        06            .byte	6
12216 2BE9                        06            .byte	6
12217 2BEA                        06            .byte	6
12218 2BEB                        06            .byte	6
12219 2BEC                        66            .byte	$66
12220 2BED                        66            .byte	$66
12221 2BEE                        3C            .byte	$3C
12222 2BEF                        00            .byte	0
12223                                           ! 1331  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12224 2BF0                        00            .byte	0
12225 2BF1                        00            .byte	0
12226 2BF2                        E0            .byte	$E0
12227 2BF3                        60            .byte	$60
12228 2BF4                        60            .byte	$60
12229 2BF5                        66            .byte	$66
12230 2BF6                        6C            .byte	$6C
12231 2BF7                        78            .byte	$78
12232 2BF8                        78            .byte	$78
12233 2BF9                        6C            .byte	$6C
12234 2BFA                        66            .byte	$66
12235 2BFB                        E6            .byte	$E6
12236 2BFC                        00            .byte	0
12237 2BFD                        00            .byte	0
12238 2BFE                        00            .byte	0
12239 2BFF                        00            .byte	0
12240                                           ! 1332  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12241 2C00                        00            .byte	0
12242 2C01                        00            .byte	0
12243 2C02                        38            .byte	$38
12244 2C03                        18            .byte	$18
12245 2C04                        18            .byte	$18
12246 2C05                        18            .byte	$18
12247 2C06                        18            .byte	$18
12248 2C07                        18            .byte	$18
12249 2C08                        18            .byte	$18
12250 2C09                        18            .byte	$18
12251 2C0A                        18            .byte	$18
12252 2C0B                        3C            .byte	$3C
12253 2C0C                        00            .byte	0
12254 2C0D                        00            .byte	0
12255 2C0E                        00            .byte	0
12256 2C0F                        00            .byte	0
12257                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12258 2C10                        00            .byte	0
12259 2C11                        00            .byte	0
12260 2C12                        00            .byte	0
12261 2C13                        00            .byte	0
12262 2C14                        00            .byte	0
12263 2C15                        E6            .byte	$E6
12264 2C16                        FF            .byte	$FF
12265 2C17                        DB            .byte	$DB
12266 2C18                        DB            .byte	$DB
12267 2C19                        DB            .byte	$DB
12268 2C1A                        DB            .byte	$DB
12269 2C1B                        DB            .byte	$DB
12270 2C1C                        00            .byte	0
12271 2C1D                        00            .byte	0
12272 2C1E                        00            .byte	0
12273 2C1F                        00            .byte	0
12274                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12275 2C20                        00            .byte	0
12276 2C21                        00            .byte	0
12277 2C22                        00            .byte	0
12278 2C23                        00            .byte	0
12279 2C24                        00            .byte	0
12280 2C25                        DC            .byte	$DC
12281 2C26                        66            .byte	$66
12282 2C27                        66            .byte	$66
12283 2C28                        66            .byte	$66
12284 2C29                        66            .byte	$66
12285 2C2A                        66            .byte	$66
12286 2C2B                        66            .byte	$66
12287 2C2C                        00            .byte	0
12288 2C2D                        00            .byte	0
12289 2C2E                        00            .byte	0
12290 2C2F                        00            .byte	0
12291                                           ! 1335  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12292 2C30                        00            .byte	0
12293 2C31                        00            .byte	0
12294 2C32                        00            .byte	0
12295 2C33                        00            .byte	0
12296 2C34                        00            .byte	0
12297 2C35                        7C            .byte	$7C
12298 2C36                        C6            .byte	$C6
12299 2C37                        C6            .byte	$C6
12300 2C38                        C6            .byte	$C6
12301 2C39                        C6            .byte	$C6
12302 2C3A                        C6            .byte	$C6
12303 2C3B                        7C            .byte	$7C
12304 2C3C                        00            .byte	0
12305 2C3D                        00            .byte	0
12306 2C3E                        00            .byte	0
12307 2C3F                        00            .byte	0
12308                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12309 2C40                        00            .byte	0
12310 2C41                        00            .byte	0
12311 2C42                        00            .byte	0
12312 2C43                        00            .byte	0
12313 2C44                        00            .byte	0
12314 2C45                        DC            .byte	$DC
12315 2C46                        66            .byte	$66
12316 2C47                        66            .byte	$66
12317 2C48                        66            .byte	$66
12318 2C49                        66            .byte	$66
12319 2C4A                        66            .byte	$66
12320 2C4B                        7C            .byte	$7C
12321 2C4C                        60            .byte	$60
12322 2C4D                        60            .byte	$60
12323 2C4E                        F0            .byte	$F0
12324 2C4F                        00            .byte	0
12325                                           ! 1337  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12326 2C50                        00            .byte	0
12327 2C51                        00            .byte	0
12328 2C52                        00            .byte	0
12329 2C53                        00            .byte	0
12330 2C54                        00            .byte	0
12331 2C55                        76            .byte	$76
12332 2C56                        CC            .byte	$CC
12333 2C57                        CC            .byte	$CC
12334 2C58                        CC            .byte	$CC
12335 2C59                        CC            .byte	$CC
12336 2C5A                        CC            .byte	$CC
12337 2C5B                        7C            .byte	$7C
12338 2C5C                        0C            .byte	$C
12339 2C5D                        0C            .byte	$C
12340 2C5E                        1E            .byte	$1E
12341 2C5F                        00            .byte	0
12342                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12343 2C60                        00            .byte	0
12344 2C61                        00            .byte	0
12345 2C62                        00            .byte	0
12346 2C63                        00            .byte	0
12347 2C64                        00            .byte	0
12348 2C65                        DC            .byte	$DC
12349 2C66                        76            .byte	$76
12350 2C67                        66            .byte	$66
12351 2C68                        60            .byte	$60
12352 2C69                        60            .byte	$60
12353 2C6A                        60            .byte	$60
12354 2C6B                        F0            .byte	$F0
12355 2C6C                        00            .byte	0
12356 2C6D                        00            .byte	0
12357 2C6E                        00            .byte	0
12358 2C6F                        00            .byte	0
12359                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12360 2C70                        00            .byte	0
12361 2C71                        00            .byte	0
12362 2C72                        00            .byte	0
12363 2C73                        00            .byte	0
12364 2C74                        00            .byte	0
12365 2C75                        7C            .byte	$7C
12366 2C76                        C6            .byte	$C6
12367 2C77                        60            .byte	$60
12368 2C78                        38            .byte	$38
12369 2C79                        0C            .byte	$C
12370 2C7A                        C6            .byte	$C6
12371 2C7B                        7C            .byte	$7C
12372 2C7C                        00            .byte	0
12373 2C7D                        00            .byte	0
12374 2C7E                        00            .byte	0
12375 2C7F                        00            .byte	0
12376                                           ! 1340  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0
12377 2C80                        00            .byte	0
12378 2C81                        00            .byte	0
12379 2C82                        10            .byte	$10
12380 2C83                        30            .byte	$30
12381 2C84                        30            .byte	$30
12382 2C85                        FC            .byte	$FC
12383 2C86                        30            .byte	$30
12384 2C87                        30            .byte	$30
12385 2C88                        30            .byte	$30
12386 2C89                        30            .byte	$30
12387 2C8A                        36            .byte	$36
12388                                           ! 1340 x1c, 0x00, 0x00, 0x00, 0x00,
12389 2C8B                        1C            .byte	$1C
12390 2C8C                        00            .byte	0
12391 2C8D                        00            .byte	0
12392 2C8E                        00            .byte	0
12393 2C8F                        00            .byte	0
12394                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12395 2C90                        00            .byte	0
12396 2C91                        00            .byte	0
12397 2C92                        00            .byte	0
12398 2C93                        00            .byte	0
12399 2C94                        00            .byte	0
12400 2C95                        CC            .byte	$CC
12401 2C96                        CC            .byte	$CC
12402 2C97                        CC            .byte	$CC
12403 2C98                        CC            .byte	$CC
12404 2C99                        CC            .byte	$CC
12405 2C9A                        CC            .byte	$CC
12406 2C9B                        76            .byte	$76
12407 2C9C                        00            .byte	0
12408 2C9D                        00            .byte	0
12409 2C9E                        00            .byte	0
12410 2C9F                        00            .byte	0
12411                                           ! 1342  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12412 2CA0                        00            .byte	0
12413 2CA1                        00            .byte	0
12414 2CA2                        00            .byte	0
12415 2CA3                        00            .byte	0
12416 2CA4                        00            .byte	0
12417 2CA5                        C3            .byte	$C3
12418 2CA6                        C3            .byte	$C3
12419 2CA7                        C3            .byte	$C3
12420 2CA8                        C3            .byte	$C3
12421 2CA9                        66            .byte	$66
12422 2CAA                        3C            .byte	$3C
12423 2CAB                        18            .byte	$18
12424 2CAC                        00            .byte	0
12425 2CAD                        00            .byte	0
12426 2CAE                        00            .byte	0
12427 2CAF                        00            .byte	0
12428                                           ! 1343  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12429 2CB0                        00            .byte	0
12430 2CB1                        00            .byte	0
12431 2CB2                        00            .byte	0
12432 2CB3                        00            .byte	0
12433 2CB4                        00            .byte	0
12434 2CB5                        C3            .byte	$C3
12435 2CB6                        C3            .byte	$C3
12436 2CB7                        C3            .byte	$C3
12437 2CB8                        DB            .byte	$DB
12438 2CB9                        DB            .byte	$DB
12439 2CBA                        FF            .byte	$FF
12440 2CBB                        66            .byte	$66
12441 2CBC                        00            .byte	0
12442 2CBD                        00            .byte	0
12443 2CBE                        00            .byte	0
12444 2CBF                        00            .byte	0
12445                                           ! 1344  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12446 2CC0                        00            .byte	0
12447 2CC1                        00            .byte	0
12448 2CC2                        00            .byte	0
12449 2CC3                        00            .byte	0
12450 2CC4                        00            .byte	0
12451 2CC5                        C3            .byte	$C3
12452 2CC6                        66            .byte	$66
12453 2CC7                        3C            .byte	$3C
12454 2CC8                        18            .byte	$18
12455 2CC9                        3C            .byte	$3C
12456 2CCA                        66            .byte	$66
12457 2CCB                        C3            .byte	$C3
12458 2CCC                        00            .byte	0
12459 2CCD                        00            .byte	0
12460 2CCE                        00            .byte	0
12461 2CCF                        00            .byte	0
12462                                           ! 1345  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12463 2CD0                        00            .byte	0
12464 2CD1                        00            .byte	0
12465 2CD2                        00            .byte	0
12466 2CD3                        00            .byte	0
12467 2CD4                        00            .byte	0
12468 2CD5                        C6            .byte	$C6
12469 2CD6                        C6            .byte	$C6
12470 2CD7                        C6            .byte	$C6
12471 2CD8                        C6            .byte	$C6
12472 2CD9                        C6            .byte	$C6
12473 2CDA                        C6            .byte	$C6
12474 2CDB                        7E            .byte	$7E
12475 2CDC                        06            .byte	6
12476 2CDD                        0C            .byte	$C
12477 2CDE                        F8            .byte	$F8
12478 2CDF                        00            .byte	0
12479                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12480 2CE0                        00            .byte	0
12481 2CE1                        00            .byte	0
12482 2CE2                        00            .byte	0
12483 2CE3                        00            .byte	0
12484 2CE4                        00            .byte	0
12485 2CE5                        FE            .byte	$FE
12486 2CE6                        CC            .byte	$CC
12487 2CE7                        18            .byte	$18
12488 2CE8                        30            .byte	$30
12489 2CE9                        60            .byte	$60
12490 2CEA                        C6            .byte	$C6
12491 2CEB                        FE            .byte	$FE
12492 2CEC                        00            .byte	0
12493 2CED                        00            .byte	0
12494 2CEE                        00            .byte	0
12495 2CEF                        00            .byte	0
12496                                           ! 1347  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12497 2CF0                        00            .byte	0
12498 2CF1                        00            .byte	0
12499 2CF2                        0E            .byte	$E
12500 2CF3                        18            .byte	$18
12501 2CF4                        18            .byte	$18
12502 2CF5                        18            .byte	$18
12503 2CF6                        70            .byte	$70
12504 2CF7                        18            .byte	$18
12505 2CF8                        18            .byte	$18
12506 2CF9                        18            .byte	$18
12507 2CFA                        18            .byte	$18
12508 2CFB                        0E            .byte	$E
12509 2CFC                        00            .byte	0
12510 2CFD                        00            .byte	0
12511 2CFE                        00            .byte	0
12512 2CFF                        00            .byte	0
12513                                           ! 1348  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12514 2D00                        00            .byte	0
12515 2D01                        00            .byte	0
12516 2D02                        18            .byte	$18
12517 2D03                        18            .byte	$18
12518 2D04                        18            .byte	$18
12519 2D05                        18            .byte	$18
12520 2D06                        00            .byte	0
12521 2D07                        18            .byte	$18
12522 2D08                        18            .byte	$18
12523 2D09                        18            .byte	$18
12524 2D0A                        18            .byte	$18
12525 2D0B                        18            .byte	$18
12526 2D0C                        00            .byte	0
12527 2D0D                        00            .byte	0
12528 2D0E                        00            .byte	0
12529 2D0F                        00            .byte	0
12530                                           ! 1349  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12531 2D10                        00            .byte	0
12532 2D11                        00            .byte	0
12533 2D12                        70            .byte	$70
12534 2D13                        18            .byte	$18
12535 2D14                        18            .byte	$18
12536 2D15                        18            .byte	$18
12537 2D16                        0E            .byte	$E
12538 2D17                        18            .byte	$18
12539 2D18                        18            .byte	$18
12540 2D19                        18            .byte	$18
12541 2D1A                        18            .byte	$18
12542 2D1B                        70            .byte	$70
12543 2D1C                        00            .byte	0
12544 2D1D                        00            .byte	0
12545 2D1E                        00            .byte	0
12546 2D1F                        00            .byte	0
12547                                           ! 1350  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12548 2D20                        00            .byte	0
12549 2D21                        00            .byte	0
12550 2D22                        76            .byte	$76
12551 2D23                        DC            .byte	$DC
12552 2D24                        00            .byte	0
12553 2D25                        00            .byte	0
12554 2D26                        00            .byte	0
12555 2D27                        00            .byte	0
12556 2D28                        00            .byte	0
12557 2D29                        00            .byte	0
12558 2D2A                        00            .byte	0
12559 2D2B                        00            .byte	0
12560 2D2C                        00            .byte	0
12561 2D2D                        00            .byte	0
12562 2D2E                        00            .byte	0
12563 2D2F                        00            .byte	0
12564                                           ! 1351  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12565 2D30                        00            .byte	0
12566 2D31                        00            .byte	0
12567 2D32                        00            .byte	0
12568 2D33                        00            .byte	0
12569 2D34                        10            .byte	$10
12570 2D35                        38            .byte	$38
12571 2D36                        6C            .byte	$6C
12572 2D37                        C6            .byte	$C6
12573 2D38                        C6            .byte	$C6
12574 2D39                        C6            .byte	$C6
12575 2D3A                        FE            .byte	$FE
12576 2D3B                        00            .byte	0
12577 2D3C                        00            .byte	0
12578 2D3D                        00            .byte	0
12579 2D3E                        00            .byte	0
12580 2D3F                        00            .byte	0
12581                                           ! 1352  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12582 2D40                        00            .byte	0
12583 2D41                        00            .byte	0
12584 2D42                        3C            .byte	$3C
12585 2D43                        66            .byte	$66
12586 2D44                        C2            .byte	$C2
12587 2D45                        C0            .byte	$C0
12588 2D46                        C0            .byte	$C0
12589 2D47                        C0            .byte	$C0
12590 2D48                        C2            .byte	$C2
12591 2D49                        66            .byte	$66
12592 2D4A                        3C            .byte	$3C
12593 2D4B                        0C            .byte	$C
12594 2D4C                        06            .byte	6
12595 2D4D                        7C            .byte	$7C
12596 2D4E                        00            .byte	0
12597 2D4F                        00            .byte	0
12598                                           ! 1353  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12599 2D50                        00            .byte	0
12600 2D51                        00            .byte	0
12601 2D52                        CC            .byte	$CC
12602 2D53                        00            .byte	0
12603 2D54                        00            .byte	0
12604 2D55                        CC            .byte	$CC
12605 2D56                        CC            .byte	$CC
12606 2D57                        CC            .byte	$CC
12607 2D58                        CC            .byte	$CC
12608 2D59                        CC            .byte	$CC
12609 2D5A                        CC            .byte	$CC
12610 2D5B                        76            .byte	$76
12611 2D5C                        00            .byte	0
12612 2D5D                        00            .byte	0
12613 2D5E                        00            .byte	0
12614 2D5F                        00            .byte	0
12615                                           ! 1354  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12616 2D60                        00            .byte	0
12617 2D61                        0C            .byte	$C
12618 2D62                        18            .byte	$18
12619 2D63                        30            .byte	$30
12620 2D64                        00            .byte	0
12621 2D65                        7C            .byte	$7C
12622 2D66                        C6            .byte	$C6
12623 2D67                        FE            .byte	$FE
12624 2D68                        C0            .byte	$C0
12625 2D69                        C0            .byte	$C0
12626 2D6A                        C6            .byte	$C6
12627 2D6B                        7C            .byte	$7C
12628 2D6C                        00            .byte	0
12629 2D6D                        00            .byte	0
12630 2D6E                        00            .byte	0
12631 2D6F                        00            .byte	0
12632                                           ! 1355  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12633 2D70                        00            .byte	0
12634 2D71                        10            .byte	$10
12635 2D72                        38            .byte	$38
12636 2D73                        6C            .byte	$6C
12637 2D74                        00            .byte	0
12638 2D75                        78            .byte	$78
12639 2D76                        0C            .byte	$C
12640 2D77                        7C            .byte	$7C
12641 2D78                        CC            .byte	$CC
12642 2D79                        CC            .byte	$CC
12643 2D7A                        CC            .byte	$CC
12644 2D7B                        76            .byte	$76
12645 2D7C                        00            .byte	0
12646 2D7D                        00            .byte	0
12647 2D7E                        00            .byte	0
12648 2D7F                        00            .byte	0
12649                                           ! 1356  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12650 2D80                        00            .byte	0
12651 2D81                        00            .byte	0
12652 2D82                        CC            .byte	$CC
12653 2D83                        00            .byte	0
12654 2D84                        00            .byte	0
12655 2D85                        78            .byte	$78
12656 2D86                        0C            .byte	$C
12657 2D87                        7C            .byte	$7C
12658 2D88                        CC            .byte	$CC
12659 2D89                        CC            .byte	$CC
12660 2D8A                        CC            .byte	$CC
12661 2D8B                        76            .byte	$76
12662 2D8C                        00            .byte	0
12663 2D8D                        00            .byte	0
12664 2D8E                        00            .byte	0
12665 2D8F                        00            .byte	0
12666                                           ! 1357  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12667 2D90                        00            .byte	0
12668 2D91                        60            .byte	$60
12669 2D92                        30            .byte	$30
12670 2D93                        18            .byte	$18
12671 2D94                        00            .byte	0
12672 2D95                        78            .byte	$78
12673 2D96                        0C            .byte	$C
12674 2D97                        7C            .byte	$7C
12675 2D98                        CC            .byte	$CC
12676 2D99                        CC            .byte	$CC
12677 2D9A                        CC            .byte	$CC
12678 2D9B                        76            .byte	$76
12679 2D9C                        00            .byte	0
12680 2D9D                        00            .byte	0
12681 2D9E                        00            .byte	0
12682 2D9F                        00            .byte	0
12683                                           ! 1358  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12684 2DA0                        00            .byte	0
12685 2DA1                        38            .byte	$38
12686 2DA2                        6C            .byte	$6C
12687 2DA3                        38            .byte	$38
12688 2DA4                        00            .byte	0
12689 2DA5                        78            .byte	$78
12690 2DA6                        0C            .byte	$C
12691 2DA7                        7C            .byte	$7C
12692 2DA8                        CC            .byte	$CC
12693 2DA9                        CC            .byte	$CC
12694 2DAA                        CC            .byte	$CC
12695 2DAB                        76            .byte	$76
12696 2DAC                        00            .byte	0
12697 2DAD                        00            .byte	0
12698 2DAE                        00            .byte	0
12699 2DAF                        00            .byte	0
12700                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12701 2DB0                        00            .byte	0
12702 2DB1                        00            .byte	0
12703 2DB2                        00            .byte	0
12704 2DB3                        00            .byte	0
12705 2DB4                        3C            .byte	$3C
12706 2DB5                        66            .byte	$66
12707 2DB6                        60            .byte	$60
12708 2DB7                        60            .byte	$60
12709 2DB8                        66            .byte	$66
12710 2DB9                        3C            .byte	$3C
12711 2DBA                        0C            .byte	$C
12712 2DBB                        06            .byte	6
12713 2DBC                        3C            .byte	$3C
12714 2DBD                        00            .byte	0
12715 2DBE                        00            .byte	0
12716 2DBF                        00            .byte	0
12717                                           ! 1360  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12718 2DC0                        00            .byte	0
12719 2DC1                        10            .byte	$10
12720 2DC2                        38            .byte	$38
12721 2DC3                        6C            .byte	$6C
12722 2DC4                        00            .byte	0
12723 2DC5                        7C            .byte	$7C
12724 2DC6                        C6            .byte	$C6
12725 2DC7                        FE            .byte	$FE
12726 2DC8                        C0            .byte	$C0
12727 2DC9                        C0            .byte	$C0
12728 2DCA                        C6            .byte	$C6
12729 2DCB                        7C            .byte	$7C
12730 2DCC                        00            .byte	0
12731 2DCD                        00            .byte	0
12732 2DCE                        00            .byte	0
12733 2DCF                        00            .byte	0
12734                                           ! 1361  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 
12735 2DD0                        00            .byte	0
12736 2DD1                        00            .byte	0
12737 2DD2                        C6            .byte	$C6
12738 2DD3                        00            .byte	0
12739 2DD4                        00            .byte	0
12740 2DD5                        7C            .byte	$7C
12741 2DD6                        C6            .byte	$C6
12742 2DD7                        FE            .byte	$FE
12743 2DD8                        C0            .byte	$C0
12744 2DD9                        C0            .byte	$C0
12745 2DDA                        C6            .byte	$C6
12746 2DDB                        7C            .byte	$7C
12747 2DDC                        00            .byte	0
12748                                           ! 1361 0x00, 0x00, 0x00,
12749 2DDD                        00            .byte	0
12750 2DDE                        00            .byte	0
12751 2DDF                        00            .byte	0
12752                                           ! 1362  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12753 2DE0                        00            .byte	0
12754 2DE1                        60            .byte	$60
12755 2DE2                        30            .byte	$30
12756 2DE3                        18            .byte	$18
12757 2DE4                        00            .byte	0
12758 2DE5                        7C            .byte	$7C
12759 2DE6                        C6            .byte	$C6
12760 2DE7                        FE            .byte	$FE
12761 2DE8                        C0            .byte	$C0
12762 2DE9                        C0            .byte	$C0
12763 2DEA                        C6            .byte	$C6
12764 2DEB                        7C            .byte	$7C
12765 2DEC                        00            .byte	0
12766 2DED                        00            .byte	0
12767 2DEE                        00            .byte	0
12768 2DEF                        00            .byte	0
12769                                           ! 1363  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12770 2DF0                        00            .byte	0
12771 2DF1                        00            .byte	0
12772 2DF2                        66            .byte	$66
12773 2DF3                        00            .byte	0
12774 2DF4                        00            .byte	0
12775 2DF5                        38            .byte	$38
12776 2DF6                        18            .byte	$18
12777 2DF7                        18            .byte	$18
12778 2DF8                        18            .byte	$18
12779 2DF9                        18            .byte	$18
12780 2DFA                        18            .byte	$18
12781 2DFB                        3C            .byte	$3C
12782 2DFC                        00            .byte	0
12783 2DFD                        00            .byte	0
12784 2DFE                        00            .byte	0
12785 2DFF                        00            .byte	0
12786                                           ! 1364  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12787 2E00                        00            .byte	0
12788 2E01                        18            .byte	$18
12789 2E02                        3C            .byte	$3C
12790 2E03                        66            .byte	$66
12791 2E04                        00            .byte	0
12792 2E05                        38            .byte	$38
12793 2E06                        18            .byte	$18
12794 2E07                        18            .byte	$18
12795 2E08                        18            .byte	$18
12796 2E09                        18            .byte	$18
12797 2E0A                        18            .byte	$18
12798 2E0B                        3C            .byte	$3C
12799 2E0C                        00            .byte	0
12800 2E0D                        00            .byte	0
12801 2E0E                        00            .byte	0
12802 2E0F                        00            .byte	0
12803                                           ! 1365  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12804 2E10                        00            .byte	0
12805 2E11                        60            .byte	$60
12806 2E12                        30            .byte	$30
12807 2E13                        18            .byte	$18
12808 2E14                        00            .byte	0
12809 2E15                        38            .byte	$38
12810 2E16                        18            .byte	$18
12811 2E17                        18            .byte	$18
12812 2E18                        18            .byte	$18
12813 2E19                        18            .byte	$18
12814 2E1A                        18            .byte	$18
12815 2E1B                        3C            .byte	$3C
12816 2E1C                        00            .byte	0
12817 2E1D                        00            .byte	0
12818 2E1E                        00            .byte	0
12819 2E1F                        00            .byte	0
12820                                           ! 1366  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12821 2E20                        00            .byte	0
12822 2E21                        C6            .byte	$C6
12823 2E22                        00            .byte	0
12824 2E23                        10            .byte	$10
12825 2E24                        38            .byte	$38
12826 2E25                        6C            .byte	$6C
12827 2E26                        C6            .byte	$C6
12828 2E27                        C6            .byte	$C6
12829 2E28                        FE            .byte	$FE
12830 2E29                        C6            .byte	$C6
12831 2E2A                        C6            .byte	$C6
12832 2E2B                        C6            .byte	$C6
12833 2E2C                        00            .byte	0
12834 2E2D                        00            .byte	0
12835 2E2E                        00            .byte	0
12836 2E2F                        00            .byte	0
12837                                           ! 1367  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12838 2E30                        38            .byte	$38
12839 2E31                        6C            .byte	$6C
12840 2E32                        38            .byte	$38
12841 2E33                        00            .byte	0
12842 2E34                        38            .byte	$38
12843 2E35                        6C            .byte	$6C
12844 2E36                        C6            .byte	$C6
12845 2E37                        C6            .byte	$C6
12846 2E38                        FE            .byte	$FE
12847 2E39                        C6            .byte	$C6
12848 2E3A                        C6            .byte	$C6
12849 2E3B                        C6            .byte	$C6
12850 2E3C                        00            .byte	0
12851 2E3D                        00            .byte	0
12852 2E3E                        00            .byte	0
12853 2E3F                        00            .byte	0
12854                                           ! 1368  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12855 2E40                        18            .byte	$18
12856 2E41                        30            .byte	$30
12857 2E42                        60            .byte	$60
12858 2E43                        00            .byte	0
12859 2E44                        FE            .byte	$FE
12860 2E45                        66            .byte	$66
12861 2E46                        60            .byte	$60
12862 2E47                        7C            .byte	$7C
12863 2E48                        60            .byte	$60
12864 2E49                        60            .byte	$60
12865 2E4A                        66            .byte	$66
12866 2E4B                        FE            .byte	$FE
12867 2E4C                        00            .byte	0
12868 2E4D                        00            .byte	0
12869 2E4E                        00            .byte	0
12870 2E4F                        00            .byte	0
12871                                           ! 1369  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
12872 2E50                        00            .byte	0
12873 2E51                        00            .byte	0
12874 2E52                        00            .byte	0
12875 2E53                        00            .byte	0
12876 2E54                        00            .byte	0
12877 2E55                        6E            .byte	$6E
12878 2E56                        3B            .byte	$3B
12879 2E57                        1B            .byte	$1B
12880 2E58                        7E            .byte	$7E
12881 2E59                        D8            .byte	$D8
12882 2E5A                        DC            .byte	$DC
12883 2E5B                        77            .byte	$77
12884 2E5C                        00            .byte	0
12885 2E5D                        00            .byte	0
12886 2E5E                        00            .byte	0
12887 2E5F                        00            .byte	0
12888                                           ! 1370  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
12889 2E60                        00            .byte	0
12890 2E61                        00            .byte	0
12891 2E62                        3E            .byte	$3E
12892 2E63                        6C            .byte	$6C
12893 2E64                        CC            .byte	$CC
12894 2E65                        CC            .byte	$CC
12895 2E66                        FE            .byte	$FE
12896 2E67                        CC            .byte	$CC
12897 2E68                        CC            .byte	$CC
12898 2E69                        CC            .byte	$CC
12899 2E6A                        CC            .byte	$CC
12900 2E6B                        CE            .byte	$CE
12901 2E6C                        00            .byte	0
12902 2E6D                        00            .byte	0
12903 2E6E                        00            .byte	0
12904 2E6F                        00            .byte	0
12905                                           ! 1371  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12906 2E70                        00            .byte	0
12907 2E71                        10            .byte	$10
12908 2E72                        38            .byte	$38
12909 2E73                        6C            .byte	$6C
12910 2E74                        00            .byte	0
12911 2E75                        7C            .byte	$7C
12912 2E76                        C6            .byte	$C6
12913 2E77                        C6            .byte	$C6
12914 2E78                        C6            .byte	$C6
12915 2E79                        C6            .byte	$C6
12916 2E7A                        C6            .byte	$C6
12917 2E7B                        7C            .byte	$7C
12918 2E7C                        00            .byte	0
12919 2E7D                        00            .byte	0
12920 2E7E                        00            .byte	0
12921 2E7F                        00            .byte	0
12922                                           ! 1372  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12923 2E80                        00            .byte	0
12924 2E81                        00            .byte	0
12925 2E82                        C6            .byte	$C6
12926 2E83                        00            .byte	0
12927 2E84                        00            .byte	0
12928 2E85                        7C            .byte	$7C
12929 2E86                        C6            .byte	$C6
12930 2E87                        C6            .byte	$C6
12931 2E88                        C6            .byte	$C6
12932 2E89                        C6            .byte	$C6
12933 2E8A                        C6            .byte	$C6
12934 2E8B                        7C            .byte	$7C
12935 2E8C                        00            .byte	0
12936 2E8D                        00            .byte	0
12937 2E8E                        00            .byte	0
12938 2E8F                        00            .byte	0
12939                                           ! 1373  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12940 2E90                        00            .byte	0
12941 2E91                        60            .byte	$60
12942 2E92                        30            .byte	$30
12943 2E93                        18            .byte	$18
12944 2E94                        00            .byte	0
12945 2E95                        7C            .byte	$7C
12946 2E96                        C6            .byte	$C6
12947 2E97                        C6            .byte	$C6
12948 2E98                        C6            .byte	$C6
12949 2E99                        C6            .byte	$C6
12950 2E9A                        C6            .byte	$C6
12951 2E9B                        7C            .byte	$7C
12952 2E9C                        00            .byte	0
12953 2E9D                        00            .byte	0
12954 2E9E                        00            .byte	0
12955 2E9F                        00            .byte	0
12956                                           ! 1374  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12957 2EA0                        00            .byte	0
12958 2EA1                        30            .byte	$30
12959 2EA2                        78            .byte	$78
12960 2EA3                        CC            .byte	$CC
12961 2EA4                        00            .byte	0
12962 2EA5                        CC            .byte	$CC
12963 2EA6                        CC            .byte	$CC
12964 2EA7                        CC            .byte	$CC
12965 2EA8                        CC            .byte	$CC
12966 2EA9                        CC            .byte	$CC
12967 2EAA                        CC            .byte	$CC
12968 2EAB                        76            .byte	$76
12969 2EAC                        00            .byte	0
12970 2EAD                        00            .byte	0
12971 2EAE                        00            .byte	0
12972 2EAF                        00            .byte	0
12973                                           ! 1375  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12974 2EB0                        00            .byte	0
12975 2EB1                        60            .byte	$60
12976 2EB2                        30            .byte	$30
12977 2EB3                        18            .byte	$18
12978 2EB4                        00            .byte	0
12979 2EB5                        CC            .byte	$CC
12980 2EB6                        CC            .byte	$CC
12981 2EB7                        CC            .byte	$CC
12982 2EB8                        CC            .byte	$CC
12983 2EB9                        CC            .byte	$CC
12984 2EBA                        CC            .byte	$CC
12985 2EBB                        76            .byte	$76
12986 2EBC                        00            .byte	0
12987 2EBD                        00            .byte	0
12988 2EBE                        00            .byte	0
12989 2EBF                        00            .byte	0
12990                                           ! 1376  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
12991 2EC0                        00            .byte	0
12992 2EC1                        00            .byte	0
12993 2EC2                        C6            .byte	$C6
12994 2EC3                        00            .byte	0
12995 2EC4                        00            .byte	0
12996 2EC5                        C6            .byte	$C6
12997 2EC6                        C6            .byte	$C6
12998 2EC7                        C6            .byte	$C6
12999 2EC8                        C6            .byte	$C6
13000 2EC9                        C6            .byte	$C6
13001 2ECA                        C6            .byte	$C6
13002 2ECB                        7E            .byte	$7E
13003 2ECC                        06            .byte	6
13004 2ECD                        0C            .byte	$C
13005 2ECE                        78            .byte	$78
13006 2ECF                        00            .byte	0
13007                                           ! 1377  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13008 2ED0                        00            .byte	0
13009 2ED1                        C6            .byte	$C6
13010 2ED2                        00            .byte	0
13011 2ED3                        7C            .byte	$7C
13012 2ED4                        C6            .byte	$C6
13013 2ED5                        C6            .byte	$C6
13014 2ED6                        C6            .byte	$C6
13015 2ED7                        C6            .byte	$C6
13016 2ED8                        C6            .byte	$C6
13017 2ED9                        C6            .byte	$C6
13018 2EDA                        C6            .byte	$C6
13019 2EDB                        7C            .byte	$7C
13020 2EDC                        00            .byte	0
13021 2EDD                        00            .byte	0
13022 2EDE                        00            .byte	0
13023 2EDF                        00            .byte	0
13024                                           ! 1378  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13025 2EE0                        00            .byte	0
13026 2EE1                        C6            .byte	$C6
13027 2EE2                        00            .byte	0
13028 2EE3                        C6            .byte	$C6
13029 2EE4                        C6            .byte	$C6
13030 2EE5                        C6            .byte	$C6
13031 2EE6                        C6            .byte	$C6
13032 2EE7                        C6            .byte	$C6
13033 2EE8                        C6            .byte	$C6
13034 2EE9                        C6            .byte	$C6
13035 2EEA                        C6            .byte	$C6
13036 2EEB                        7C            .byte	$7C
13037 2EEC                        00            .byte	0
13038 2EED                        00            .byte	0
13039 2EEE                        00            .byte	0
13040 2EEF                        00            .byte	0
13041                                           ! 1379  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13042 2EF0                        00            .byte	0
13043 2EF1                        18            .byte	$18
13044 2EF2                        18            .byte	$18
13045 2EF3                        7E            .byte	$7E
13046 2EF4                        C3            .byte	$C3
13047 2EF5                        C0            .byte	$C0
13048 2EF6                        C0            .byte	$C0
13049 2EF7                        C0            .byte	$C0
13050 2EF8                        C3            .byte	$C3
13051 2EF9                        7E            .byte	$7E
13052 2EFA                        18            .byte	$18
13053 2EFB                        18            .byte	$18
13054 2EFC                        00            .byte	0
13055 2EFD                        00            .byte	0
13056 2EFE                        00            .byte	0
13057 2EFF                        00            .byte	0
13058                                           ! 1380  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13059 2F00                        00            .byte	0
13060 2F01                        38            .byte	$38
13061 2F02                        6C            .byte	$6C
13062 2F03                        64            .byte	$64
13063 2F04                        60            .byte	$60
13064 2F05                        F0            .byte	$F0
13065 2F06                        60            .byte	$60
13066 2F07                        60            .byte	$60
13067 2F08                        60            .byte	$60
13068 2F09                        60            .byte	$60
13069 2F0A                        E6            .byte	$E6
13070 2F0B                        FC            .byte	$FC
13071 2F0C                        00            .byte	0
13072 2F0D                        00            .byte	0
13073 2F0E                        00            .byte	0
13074 2F0F                        00            .byte	0
13075                                           ! 1381  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13076 2F10                        00            .byte	0
13077 2F11                        00            .byte	0
13078 2F12                        C3            .byte	$C3
13079 2F13                        66            .byte	$66
13080 2F14                        3C            .byte	$3C
13081 2F15                        18            .byte	$18
13082 2F16                        FF            .byte	$FF
13083 2F17                        18            .byte	$18
13084 2F18                        FF            .byte	$FF
13085 2F19                        18            .byte	$18
13086 2F1A                        18            .byte	$18
13087 2F1B                        18            .byte	$18
13088 2F1C                        00            .byte	0
13089 2F1D                        00            .byte	0
13090 2F1E                        00            .byte	0
13091 2F1F                        00            .byte	0
13092                                           ! 1382  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00,
13093 2F20                        00            .byte	0
13094 2F21                        FC            .byte	$FC
13095 2F22                        66            .byte	$66
13096 2F23                        66            .byte	$66
13097 2F24                        7C            .byte	$7C
13098 2F25                        62            .byte	$62
13099 2F26                        66            .byte	$66
13100 2F27                        6F            .byte	$6F
13101 2F28                        66            .byte	$66
13102 2F29                        66            .byte	$66
13103 2F2A                        66            .byte	$66
13104 2F2B                        F3            .byte	$F3
13105 2F2C                        00            .byte	0
13106 2F2D                        00            .byte	0
13107                                           ! 1382  0x00,
13108 2F2E                        00            .byte	0
13109 2F2F                        00            .byte	0
13110                                           ! 1383  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13111 2F30                        00            .byte	0
13112 2F31                        0E            .byte	$E
13113 2F32                        1B            .byte	$1B
13114 2F33                        18            .byte	$18
13115 2F34                        18            .byte	$18
13116 2F35                        18            .byte	$18
13117 2F36                        7E            .byte	$7E
13118 2F37                        18            .byte	$18
13119 2F38                        18            .byte	$18
13120 2F39                        18            .byte	$18
13121 2F3A                        18            .byte	$18
13122 2F3B                        18            .byte	$18
13123 2F3C                        D8            .byte	$D8
13124 2F3D                        70            .byte	$70
13125 2F3E                        00            .byte	0
13126 2F3F                        00            .byte	0
13127                                           ! 1384  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13128 2F40                        00            .byte	0
13129 2F41                        18            .byte	$18
13130 2F42                        30            .byte	$30
13131 2F43                        60            .byte	$60
13132 2F44                        00            .byte	0
13133 2F45                        78            .byte	$78
13134 2F46                        0C            .byte	$C
13135 2F47                        7C            .byte	$7C
13136 2F48                        CC            .byte	$CC
13137 2F49                        CC            .byte	$CC
13138 2F4A                        CC            .byte	$CC
13139 2F4B                        76            .byte	$76
13140 2F4C                        00            .byte	0
13141 2F4D                        00            .byte	0
13142 2F4E                        00            .byte	0
13143 2F4F                        00            .byte	0
13144                                           ! 1385  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13145 2F50                        00            .byte	0
13146 2F51                        0C            .byte	$C
13147 2F52                        18            .byte	$18
13148 2F53                        30            .byte	$30
13149 2F54                        00            .byte	0
13150 2F55                        38            .byte	$38
13151 2F56                        18            .byte	$18
13152 2F57                        18            .byte	$18
13153 2F58                        18            .byte	$18
13154 2F59                        18            .byte	$18
13155 2F5A                        18            .byte	$18
13156 2F5B                        3C            .byte	$3C
13157 2F5C                        00            .byte	0
13158 2F5D                        00            .byte	0
13159 2F5E                        00            .byte	0
13160 2F5F                        00            .byte	0
13161                                           ! 1386  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13162 2F60                        00            .byte	0
13163 2F61                        18            .byte	$18
13164 2F62                        30            .byte	$30
13165 2F63                        60            .byte	$60
13166 2F64                        00            .byte	0
13167 2F65                        7C            .byte	$7C
13168 2F66                        C6            .byte	$C6
13169 2F67                        C6            .byte	$C6
13170 2F68                        C6            .byte	$C6
13171 2F69                        C6            .byte	$C6
13172 2F6A                        C6            .byte	$C6
13173 2F6B                        7C            .byte	$7C
13174 2F6C                        00            .byte	0
13175 2F6D                        00            .byte	0
13176 2F6E                        00            .byte	0
13177 2F6F                        00            .byte	0
13178                                           ! 1387  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13179 2F70                        00            .byte	0
13180 2F71                        18            .byte	$18
13181 2F72                        30            .byte	$30
13182 2F73                        60            .byte	$60
13183 2F74                        00            .byte	0
13184 2F75                        CC            .byte	$CC
13185 2F76                        CC            .byte	$CC
13186 2F77                        CC            .byte	$CC
13187 2F78                        CC            .byte	$CC
13188 2F79                        CC            .byte	$CC
13189 2F7A                        CC            .byte	$CC
13190 2F7B                        76            .byte	$76
13191 2F7C                        00            .byte	0
13192 2F7D                        00            .byte	0
13193 2F7E                        00            .byte	0
13194 2F7F                        00            .byte	0
13195                                           ! 1388  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13196 2F80                        00            .byte	0
13197 2F81                        00            .byte	0
13198 2F82                        76            .byte	$76
13199 2F83                        DC            .byte	$DC
13200 2F84                        00            .byte	0
13201 2F85                        DC            .byte	$DC
13202 2F86                        66            .byte	$66
13203 2F87                        66            .byte	$66
13204 2F88                        66            .byte	$66
13205 2F89                        66            .byte	$66
13206 2F8A                        66            .byte	$66
13207 2F8B                        66            .byte	$66
13208 2F8C                        00            .byte	0
13209 2F8D                        00            .byte	0
13210 2F8E                        00            .byte	0
13211 2F8F                        00            .byte	0
13212                                           ! 1389  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13213 2F90                        76            .byte	$76
13214 2F91                        DC            .byte	$DC
13215 2F92                        00            .byte	0
13216 2F93                        C6            .byte	$C6
13217 2F94                        E6            .byte	$E6
13218 2F95                        F6            .byte	$F6
13219 2F96                        FE            .byte	$FE
13220 2F97                        DE            .byte	$DE
13221 2F98                        CE            .byte	$CE
13222 2F99                        C6            .byte	$C6
13223 2F9A                        C6            .byte	$C6
13224 2F9B                        C6            .byte	$C6
13225 2F9C                        00            .byte	0
13226 2F9D                        00            .byte	0
13227 2F9E                        00            .byte	0
13228 2F9F                        00            .byte	0
13229                                           ! 1390  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13230 2FA0                        00            .byte	0
13231 2FA1                        3C            .byte	$3C
13232 2FA2                        6C            .byte	$6C
13233 2FA3                        6C            .byte	$6C
13234 2FA4                        3E            .byte	$3E
13235 2FA5                        00            .byte	0
13236 2FA6                        7E            .byte	$7E
13237 2FA7                        00            .byte	0
13238 2FA8                        00            .byte	0
13239 2FA9                        00            .byte	0
13240 2FAA                        00            .byte	0
13241 2FAB                        00            .byte	0
13242 2FAC                        00            .byte	0
13243 2FAD                        00            .byte	0
13244 2FAE                        00            .byte	0
13245 2FAF                        00            .byte	0
13246                                           ! 1391  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13247 2FB0                        00            .byte	0
13248 2FB1                        38            .byte	$38
13249 2FB2                        6C            .byte	$6C
13250 2FB3                        6C            .byte	$6C
13251 2FB4                        38            .byte	$38
13252 2FB5                        00            .byte	0
13253 2FB6                        7C            .byte	$7C
13254 2FB7                        00            .byte	0
13255 2FB8                        00            .byte	0
13256 2FB9                        00            .byte	0
13257 2FBA                        00            .byte	0
13258 2FBB                        00            .byte	0
13259 2FBC                        00            .byte	0
13260 2FBD                        00            .byte	0
13261 2FBE                        00            .byte	0
13262 2FBF                        00            .byte	0
13263                                           ! 1392  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13264 2FC0                        00            .byte	0
13265 2FC1                        00            .byte	0
13266 2FC2                        30            .byte	$30
13267 2FC3                        30            .byte	$30
13268 2FC4                        00            .byte	0
13269 2FC5                        30            .byte	$30
13270 2FC6                        30            .byte	$30
13271 2FC7                        60            .byte	$60
13272 2FC8                        C0            .byte	$C0
13273 2FC9                        C6            .byte	$C6
13274 2FCA                        C6            .byte	$C6
13275 2FCB                        7C            .byte	$7C
13276 2FCC                        00            .byte	0
13277 2FCD                        00            .byte	0
13278 2FCE                        00            .byte	0
13279 2FCF                        00            .byte	0
13280                                           ! 1393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13281 2FD0                        00            .byte	0
13282 2FD1                        00            .byte	0
13283 2FD2                        00            .byte	0
13284 2FD3                        00            .byte	0
13285 2FD4                        00            .byte	0
13286 2FD5                        00            .byte	0
13287 2FD6                        FE            .byte	$FE
13288 2FD7                        C0            .byte	$C0
13289 2FD8                        C0            .byte	$C0
13290 2FD9                        C0            .byte	$C0
13291 2FDA                        C0            .byte	$C0
13292 2FDB                        00            .byte	0
13293 2FDC                        00            .byte	0
13294 2FDD                        00            .byte	0
13295 2FDE                        00            .byte	0
13296 2FDF                        00            .byte	0
13297                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13298 2FE0                        00            .byte	0
13299 2FE1                        00            .byte	0
13300 2FE2                        00            .byte	0
13301 2FE3                        00            .byte	0
13302 2FE4                        00            .byte	0
13303 2FE5                        00            .byte	0
13304 2FE6                        FE            .byte	$FE
13305 2FE7                        06            .byte	6
13306 2FE8                        06            .byte	6
13307 2FE9                        06            .byte	6
13308 2FEA                        06            .byte	6
13309 2FEB                        00            .byte	0
13310 2FEC                        00            .byte	0
13311 2FED                        00            .byte	0
13312 2FEE                        00            .byte	0
13313 2FEF                        00            .byte	0
13314                                           ! 1395  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13315 2FF0                        00            .byte	0
13316 2FF1                        C0            .byte	$C0
13317 2FF2                        C0            .byte	$C0
13318 2FF3                        C2            .byte	$C2
13319 2FF4                        C6            .byte	$C6
13320 2FF5                        CC            .byte	$CC
13321 2FF6                        18            .byte	$18
13322 2FF7                        30            .byte	$30
13323 2FF8                        60            .byte	$60
13324 2FF9                        CE            .byte	$CE
13325 2FFA                        9B            .byte	$9B
13326 2FFB                        06            .byte	6
13327 2FFC                        0C            .byte	$C
13328 2FFD                        1F            .byte	$1F
13329 2FFE                        00            .byte	0
13330 2FFF                        00            .byte	0
13331                                           ! 1396  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13332 3000                        00            .byte	0
13333 3001                        C0            .byte	$C0
13334 3002                        C0            .byte	$C0
13335 3003                        C2            .byte	$C2
13336 3004                        C6            .byte	$C6
13337 3005                        CC            .byte	$CC
13338 3006                        18            .byte	$18
13339 3007                        30            .byte	$30
13340 3008                        66            .byte	$66
13341 3009                        CE            .byte	$CE
13342 300A                        96            .byte	$96
13343 300B                        3E            .byte	$3E
13344 300C                        06            .byte	6
13345 300D                        06            .byte	6
13346 300E                        00            .byte	0
13347 300F                        00            .byte	0
13348                                           ! 1397  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13349 3010                        00            .byte	0
13350 3011                        00            .byte	0
13351 3012                        18            .byte	$18
13352 3013                        18            .byte	$18
13353 3014                        00            .byte	0
13354 3015                        18            .byte	$18
13355 3016                        18            .byte	$18
13356 3017                        18            .byte	$18
13357 3018                        3C            .byte	$3C
13358 3019                        3C            .byte	$3C
13359 301A                        3C            .byte	$3C
13360 301B                        18            .byte	$18
13361 301C                        00            .byte	0
13362 301D                        00            .byte	0
13363 301E                        00            .byte	0
13364 301F                        00            .byte	0
13365                                           ! 1398  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13366 3020                        00            .byte	0
13367 3021                        00            .byte	0
13368 3022                        00            .byte	0
13369 3023                        00            .byte	0
13370 3024                        00            .byte	0
13371 3025                        36            .byte	$36
13372 3026                        6C            .byte	$6C
13373 3027                        D8            .byte	$D8
13374 3028                        6C            .byte	$6C
13375 3029                        36            .byte	$36
13376 302A                        00            .byte	0
13377 302B                        00            .byte	0
13378 302C                        00            .byte	0
13379 302D                        00            .byte	0
13380 302E                        00            .byte	0
13381 302F                        00            .byte	0
13382                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13383 3030                        00            .byte	0
13384 3031                        00            .byte	0
13385 3032                        00            .byte	0
13386 3033                        00            .byte	0
13387 3034                        00            .byte	0
13388 3035                        D8            .byte	$D8
13389 3036                        6C            .byte	$6C
13390 3037                        36            .byte	$36
13391 3038                        6C            .byte	$6C
13392 3039                        D8            .byte	$D8
13393 303A                        00            .byte	0
13394 303B                        00            .byte	0
13395 303C                        00            .byte	0
13396 303D                        00            .byte	0
13397 303E                        00            .byte	0
13398 303F                        00            .byte	0
13399                                           ! 1400  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13400 3040                        11            .byte	$11
13401 3041                        44            .byte	$44
13402 3042                        11            .byte	$11
13403 3043                        44            .byte	$44
13404 3044                        11            .byte	$11
13405 3045                        44            .byte	$44
13406 3046                        11            .byte	$11
13407 3047                        44            .byte	$44
13408 3048                        11            .byte	$11
13409 3049                        44            .byte	$44
13410 304A                        11            .byte	$11
13411 304B                        44            .byte	$44
13412 304C                        11            .byte	$11
13413 304D                        44            .byte	$44
13414 304E                        11            .byte	$11
13415 304F                        44            .byte	$44
13416                                           ! 1401  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13417 3050                        55            .byte	$55
13418 3051                        AA            .byte	$AA
13419 3052                        55            .byte	$55
13420 3053                        AA            .byte	$AA
13421 3054                        55            .byte	$55
13422 3055                        AA            .byte	$AA
13423 3056                        55            .byte	$55
13424 3057                        AA            .byte	$AA
13425 3058                        55            .byte	$55
13426 3059                        AA            .byte	$AA
13427 305A                        55            .byte	$55
13428 305B                        AA            .byte	$AA
13429 305C                        55            .byte	$55
13430 305D                        AA            .byte	$AA
13431 305E                        55            .byte	$55
13432 305F                        AA            .byte	$AA
13433                                           ! 1402  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13434 3060                        DD            .byte	$DD
13435 3061                        77            .byte	$77
13436 3062                        DD            .byte	$DD
13437 3063                        77            .byte	$77
13438 3064                        DD            .byte	$DD
13439 3065                        77            .byte	$77
13440 3066                        DD            .byte	$DD
13441 3067                        77            .byte	$77
13442 3068                        DD            .byte	$DD
13443 3069                        77            .byte	$77
13444 306A                        DD            .byte	$DD
13445 306B                        77            .byte	$77
13446 306C                        DD            .byte	$DD
13447 306D                        77            .byte	$77
13448 306E                        DD            .byte	$DD
13449 306F                        77            .byte	$77
13450                                           ! 1403  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13451 3070                        18            .byte	$18
13452 3071                        18            .byte	$18
13453 3072                        18            .byte	$18
13454 3073                        18            .byte	$18
13455 3074                        18            .byte	$18
13456 3075                        18            .byte	$18
13457 3076                        18            .byte	$18
13458 3077                        18            .byte	$18
13459 3078                        18            .byte	$18
13460 3079                        18            .byte	$18
13461 307A                        18            .byte	$18
13462 307B                        18            .byte	$18
13463 307C                        18            .byte	$18
13464 307D                        18            .byte	$18
13465 307E                        18            .byte	$18
13466 307F                        18            .byte	$18
13467                                           ! 1404  0x1
13468                                           ! 1404 8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13469 3080                        18            .byte	$18
13470 3081                        18            .byte	$18
13471 3082                        18            .byte	$18
13472 3083                        18            .byte	$18
13473 3084                        18            .byte	$18
13474 3085                        18            .byte	$18
13475 3086                        18            .byte	$18
13476 3087                        F8            .byte	$F8
13477 3088                        18            .byte	$18
13478 3089                        18            .byte	$18
13479 308A                        18            .byte	$18
13480 308B                        18            .byte	$18
13481 308C                        18            .byte	$18
13482 308D                        18            .byte	$18
13483 308E                        18            .byte	$18
13484 308F                        18            .byte	$18
13485                                           ! 1405  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13486 3090                        18            .byte	$18
13487 3091                        18            .byte	$18
13488 3092                        18            .byte	$18
13489 3093                        18            .byte	$18
13490 3094                        18            .byte	$18
13491 3095                        F8            .byte	$F8
13492 3096                        18            .byte	$18
13493 3097                        F8            .byte	$F8
13494 3098                        18            .byte	$18
13495 3099                        18            .byte	$18
13496 309A                        18            .byte	$18
13497 309B                        18            .byte	$18
13498 309C                        18            .byte	$18
13499 309D                        18            .byte	$18
13500 309E                        18            .byte	$18
13501 309F                        18            .byte	$18
13502                                           ! 1406  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13503 30A0                        36            .byte	$36
13504 30A1                        36            .byte	$36
13505 30A2                        36            .byte	$36
13506 30A3                        36            .byte	$36
13507 30A4                        36            .byte	$36
13508 30A5                        36            .byte	$36
13509 30A6                        36            .byte	$36
13510 30A7                        F6            .byte	$F6
13511 30A8                        36            .byte	$36
13512 30A9                        36            .byte	$36
13513 30AA                        36            .byte	$36
13514 30AB                        36            .byte	$36
13515 30AC                        36            .byte	$36
13516 30AD                        36            .byte	$36
13517 30AE                        36            .byte	$36
13518 30AF                        36            .byte	$36
13519                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13520 30B0                        00            .byte	0
13521 30B1                        00            .byte	0
13522 30B2                        00            .byte	0
13523 30B3                        00            .byte	0
13524 30B4                        00            .byte	0
13525 30B5                        00            .byte	0
13526 30B6                        00            .byte	0
13527 30B7                        FE            .byte	$FE
13528 30B8                        36            .byte	$36
13529 30B9                        36            .byte	$36
13530 30BA                        36            .byte	$36
13531 30BB                        36            .byte	$36
13532 30BC                        36            .byte	$36
13533 30BD                        36            .byte	$36
13534 30BE                        36            .byte	$36
13535 30BF                        36            .byte	$36
13536                                           ! 1408  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13537 30C0                        00            .byte	0
13538 30C1                        00            .byte	0
13539 30C2                        00            .byte	0
13540 30C3                        00            .byte	0
13541 30C4                        00            .byte	0
13542 30C5                        F8            .byte	$F8
13543 30C6                        18            .byte	$18
13544 30C7                        F8            .byte	$F8
13545 30C8                        18            .byte	$18
13546 30C9                        18            .byte	$18
13547 30CA                        18            .byte	$18
13548 30CB                        18            .byte	$18
13549 30CC                        18            .byte	$18
13550 30CD                        18            .byte	$18
13551 30CE                        18            .byte	$18
13552 30CF                        18            .byte	$18
13553                                           ! 1409  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13554 30D0                        36            .byte	$36
13555 30D1                        36            .byte	$36
13556 30D2                        36            .byte	$36
13557 30D3                        36            .byte	$36
13558 30D4                        36            .byte	$36
13559 30D5                        F6            .byte	$F6
13560 30D6                        06            .byte	6
13561 30D7                        F6            .byte	$F6
13562 30D8                        36            .byte	$36
13563 30D9                        36            .byte	$36
13564 30DA                        36            .byte	$36
13565 30DB                        36            .byte	$36
13566 30DC                        36            .byte	$36
13567 30DD                        36            .byte	$36
13568 30DE                        36            .byte	$36
13569 30DF                        36            .byte	$36
13570                                           ! 1410  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13571 30E0                        36            .byte	$36
13572 30E1                        36            .byte	$36
13573 30E2                        36            .byte	$36
13574 30E3                        36            .byte	$36
13575 30E4                        36            .byte	$36
13576 30E5                        36            .byte	$36
13577 30E6                        36            .byte	$36
13578 30E7                        36            .byte	$36
13579 30E8                        36            .byte	$36
13580 30E9                        36            .byte	$36
13581 30EA                        36            .byte	$36
13582 30EB                        36            .byte	$36
13583 30EC                        36            .byte	$36
13584 30ED                        36            .byte	$36
13585 30EE                        36            .byte	$36
13586 30EF                        36            .byte	$36
13587                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13588 30F0                        00            .byte	0
13589 30F1                        00            .byte	0
13590 30F2                        00            .byte	0
13591 30F3                        00            .byte	0
13592 30F4                        00            .byte	0
13593 30F5                        FE            .byte	$FE
13594 30F6                        06            .byte	6
13595 30F7                        F6            .byte	$F6
13596 30F8                        36            .byte	$36
13597 30F9                        36            .byte	$36
13598 30FA                        36            .byte	$36
13599 30FB                        36            .byte	$36
13600 30FC                        36            .byte	$36
13601 30FD                        36            .byte	$36
13602 30FE                        36            .byte	$36
13603 30FF                        36            .byte	$36
13604                                           ! 1412  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13605 3100                        36            .byte	$36
13606 3101                        36            .byte	$36
13607 3102                        36            .byte	$36
13608 3103                        36            .byte	$36
13609 3104                        36            .byte	$36
13610 3105                        F6            .byte	$F6
13611 3106                        06            .byte	6
13612 3107                        FE            .byte	$FE
13613 3108                        00            .byte	0
13614 3109                        00            .byte	0
13615 310A                        00            .byte	0
13616 310B                        00            .byte	0
13617 310C                        00            .byte	0
13618 310D                        00            .byte	0
13619 310E                        00            .byte	0
13620 310F                        00            .byte	0
13621                                           ! 1413  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13622 3110                        36            .byte	$36
13623 3111                        36            .byte	$36
13624 3112                        36            .byte	$36
13625 3113                        36            .byte	$36
13626 3114                        36            .byte	$36
13627 3115                        36            .byte	$36
13628 3116                        36            .byte	$36
13629 3117                        FE            .byte	$FE
13630 3118                        00            .byte	0
13631 3119                        00            .byte	0
13632 311A                        00            .byte	0
13633 311B                        00            .byte	0
13634 311C                        00            .byte	0
13635 311D                        00            .byte	0
13636 311E                        00            .byte	0
13637 311F                        00            .byte	0
13638                                           ! 1414  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13639 3120                        18            .byte	$18
13640 3121                        18            .byte	$18
13641 3122                        18            .byte	$18
13642 3123                        18            .byte	$18
13643 3124                        18            .byte	$18
13644 3125                        F8            .byte	$F8
13645 3126                        18            .byte	$18
13646 3127                        F8            .byte	$F8
13647 3128                        00            .byte	0
13648 3129                        00            .byte	0
13649 312A                        00            .byte	0
13650 312B                        00            .byte	0
13651 312C                        00            .byte	0
13652 312D                        00            .byte	0
13653 312E                        00            .byte	0
13654 312F                        00            .byte	0
13655                                           ! 1415  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13656 3130                        00            .byte	0
13657 3131                        00            .byte	0
13658 3132                        00            .byte	0
13659 3133                        00            .byte	0
13660 3134                        00            .byte	0
13661 3135                        00            .byte	0
13662 3136                        00            .byte	0
13663 3137                        F8            .byte	$F8
13664 3138                        18            .byte	$18
13665 3139                        18            .byte	$18
13666 313A                        18            .byte	$18
13667 313B                        18            .byte	$18
13668 313C                        18            .byte	$18
13669 313D                        18            .byte	$18
13670 313E                        18            .byte	$18
13671 313F                        18            .byte	$18
13672                                           ! 1416  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13673 3140                        18            .byte	$18
13674 3141                        18            .byte	$18
13675 3142                        18            .byte	$18
13676 3143                        18            .byte	$18
13677 3144                        18            .byte	$18
13678 3145                        18            .byte	$18
13679 3146                        18            .byte	$18
13680 3147                        1F            .byte	$1F
13681 3148                        00            .byte	0
13682 3149                        00            .byte	0
13683 314A                        00            .byte	0
13684 314B                        00            .byte	0
13685 314C                        00            .byte	0
13686 314D                        00            .byte	0
13687 314E                        00            .byte	0
13688 314F                        00            .byte	0
13689                                           ! 1417  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13690 3150                        18            .byte	$18
13691 3151                        18            .byte	$18
13692 3152                        18            .byte	$18
13693 3153                        18            .byte	$18
13694 3154                        18            .byte	$18
13695 3155                        18            .byte	$18
13696 3156                        18            .byte	$18
13697 3157                        FF            .byte	$FF
13698 3158                        00            .byte	0
13699 3159                        00            .byte	0
13700 315A                        00            .byte	0
13701 315B                        00            .byte	0
13702 315C                        00            .byte	0
13703 315D                        00            .byte	0
13704 315E                        00            .byte	0
13705 315F                        00            .byte	0
13706                                           ! 1418  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13707 3160                        00            .byte	0
13708 3161                        00            .byte	0
13709 3162                        00            .byte	0
13710 3163                        00            .byte	0
13711 3164                        00            .byte	0
13712 3165                        00            .byte	0
13713 3166                        00            .byte	0
13714 3167                        FF            .byte	$FF
13715 3168                        18            .byte	$18
13716 3169                        18            .byte	$18
13717 316A                        18            .byte	$18
13718 316B                        18            .byte	$18
13719 316C                        18            .byte	$18
13720 316D                        18            .byte	$18
13721 316E                        18            .byte	$18
13722 316F                        18            .byte	$18
13723                                           ! 1419  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13724 3170                        18            .byte	$18
13725 3171                        18            .byte	$18
13726 3172                        18            .byte	$18
13727 3173                        18            .byte	$18
13728 3174                        18            .byte	$18
13729 3175                        18            .byte	$18
13730 3176                        18            .byte	$18
13731 3177                        1F            .byte	$1F
13732 3178                        18            .byte	$18
13733 3179                        18            .byte	$18
13734 317A                        18            .byte	$18
13735 317B                        18            .byte	$18
13736 317C                        18            .byte	$18
13737 317D                        18            .byte	$18
13738 317E                        18            .byte	$18
13739 317F                        18            .byte	$18
13740                                           ! 1420  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13741 3180                        00            .byte	0
13742 3181                        00            .byte	0
13743 3182                        00            .byte	0
13744 3183                        00            .byte	0
13745 3184                        00            .byte	0
13746 3185                        00            .byte	0
13747 3186                        00            .byte	0
13748 3187                        FF            .byte	$FF
13749 3188                        00            .byte	0
13750 3189                        00            .byte	0
13751 318A                        00            .byte	0
13752 318B                        00            .byte	0
13753 318C                        00            .byte	0
13754 318D                        00            .byte	0
13755 318E                        00            .byte	0
13756 318F                        00            .byte	0
13757                                           ! 1421  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13758 3190                        18            .byte	$18
13759 3191                        18            .byte	$18
13760 3192                        18            .byte	$18
13761 3193                        18            .byte	$18
13762 3194                        18            .byte	$18
13763 3195                        18            .byte	$18
13764 3196                        18            .byte	$18
13765 3197                        FF            .byte	$FF
13766 3198                        18            .byte	$18
13767 3199                        18            .byte	$18
13768 319A                        18            .byte	$18
13769 319B                        18            .byte	$18
13770 319C                        18            .byte	$18
13771 319D                        18            .byte	$18
13772 319E                        18            .byte	$18
13773 319F                        18            .byte	$18
13774                                           ! 1422  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13775 31A0                        18            .byte	$18
13776 31A1                        18            .byte	$18
13777 31A2                        18            .byte	$18
13778 31A3                        18            .byte	$18
13779 31A4                        18            .byte	$18
13780 31A5                        1F            .byte	$1F
13781 31A6                        18            .byte	$18
13782 31A7                        1F            .byte	$1F
13783 31A8                        18            .byte	$18
13784 31A9                        18            .byte	$18
13785 31AA                        18            .byte	$18
13786 31AB                        18            .byte	$18
13787 31AC                        18            .byte	$18
13788 31AD                        18            .byte	$18
13789 31AE                        18            .byte	$18
13790 31AF                        18            .byte	$18
13791                                           ! 1423  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13792 31B0                        36            .byte	$36
13793 31B1                        36            .byte	$36
13794 31B2                        36            .byte	$36
13795 31B3                        36            .byte	$36
13796 31B4                        36            .byte	$36
13797 31B5                        36            .byte	$36
13798 31B6                        36            .byte	$36
13799 31B7                        37            .byte	$37
13800 31B8                        36            .byte	$36
13801 31B9                        36            .byte	$36
13802 31BA                        36            .byte	$36
13803 31BB                        36            .byte	$36
13804 31BC                        36            .byte	$36
13805 31BD                        36            .byte	$36
13806 31BE                        36            .byte	$36
13807 31BF                        36            .byte	$36
13808                                           ! 1424  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13809 31C0                        36            .byte	$36
13810 31C1                        36            .byte	$36
13811 31C2                        36            .byte	$36
13812 31C3                        36            .byte	$36
13813 31C4                        36            .byte	$36
13814 31C5                        37            .byte	$37
13815 31C6                        30            .byte	$30
13816 31C7                        3F            .byte	$3F
13817 31C8                        00            .byte	0
13818 31C9                        00            .byte	0
13819 31CA                        00            .byte	0
13820 31CB                        00            .byte	0
13821 31CC                        00            .byte	0
13822 31CD                        00            .byte	0
13823 31CE                        00            .byte	0
13824 31CF                        00            .byte	0
13825                                           ! 1425  0x00, 0x00, 0x
13826 31D0                        00            .byte	0
13827 31D1                        00            .byte	0
13828                                           ! 1425 00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13829 31D2                        00            .byte	0
13830 31D3                        00            .byte	0
13831 31D4                        00            .byte	0
13832 31D5                        3F            .byte	$3F
13833 31D6                        30            .byte	$30
13834 31D7                        37            .byte	$37
13835 31D8                        36            .byte	$36
13836 31D9                        36            .byte	$36
13837 31DA                        36            .byte	$36
13838 31DB                        36            .byte	$36
13839 31DC                        36            .byte	$36
13840 31DD                        36            .byte	$36
13841 31DE                        36            .byte	$36
13842 31DF                        36            .byte	$36
13843                                           ! 1426  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13844 31E0                        36            .byte	$36
13845 31E1                        36            .byte	$36
13846 31E2                        36            .byte	$36
13847 31E3                        36            .byte	$36
13848 31E4                        36            .byte	$36
13849 31E5                        F7            .byte	$F7
13850 31E6                        00            .byte	0
13851 31E7                        FF            .byte	$FF
13852 31E8                        00            .byte	0
13853 31E9                        00            .byte	0
13854 31EA                        00            .byte	0
13855 31EB                        00            .byte	0
13856 31EC                        00            .byte	0
13857 31ED                        00            .byte	0
13858 31EE                        00            .byte	0
13859 31EF                        00            .byte	0
13860                                           ! 1427  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13861 31F0                        00            .byte	0
13862 31F1                        00            .byte	0
13863 31F2                        00            .byte	0
13864 31F3                        00            .byte	0
13865 31F4                        00            .byte	0
13866 31F5                        FF            .byte	$FF
13867 31F6                        00            .byte	0
13868 31F7                        F7            .byte	$F7
13869 31F8                        36            .byte	$36
13870 31F9                        36            .byte	$36
13871 31FA                        36            .byte	$36
13872 31FB                        36            .byte	$36
13873 31FC                        36            .byte	$36
13874 31FD                        36            .byte	$36
13875 31FE                        36            .byte	$36
13876 31FF                        36            .byte	$36
13877                                           ! 1428  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13878 3200                        36            .byte	$36
13879 3201                        36            .byte	$36
13880 3202                        36            .byte	$36
13881 3203                        36            .byte	$36
13882 3204                        36            .byte	$36
13883 3205                        37            .byte	$37
13884 3206                        30            .byte	$30
13885 3207                        37            .byte	$37
13886 3208                        36            .byte	$36
13887 3209                        36            .byte	$36
13888 320A                        36            .byte	$36
13889 320B                        36            .byte	$36
13890 320C                        36            .byte	$36
13891 320D                        36            .byte	$36
13892 320E                        36            .byte	$36
13893 320F                        36            .byte	$36
13894                                           ! 1429  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13895 3210                        00            .byte	0
13896 3211                        00            .byte	0
13897 3212                        00            .byte	0
13898 3213                        00            .byte	0
13899 3214                        00            .byte	0
13900 3215                        FF            .byte	$FF
13901 3216                        00            .byte	0
13902 3217                        FF            .byte	$FF
13903 3218                        00            .byte	0
13904 3219                        00            .byte	0
13905 321A                        00            .byte	0
13906 321B                        00            .byte	0
13907 321C                        00            .byte	0
13908 321D                        00            .byte	0
13909 321E                        00            .byte	0
13910 321F                        00            .byte	0
13911                                           ! 1430  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13912 3220                        36            .byte	$36
13913 3221                        36            .byte	$36
13914 3222                        36            .byte	$36
13915 3223                        36            .byte	$36
13916 3224                        36            .byte	$36
13917 3225                        F7            .byte	$F7
13918 3226                        00            .byte	0
13919 3227                        F7            .byte	$F7
13920 3228                        36            .byte	$36
13921 3229                        36            .byte	$36
13922 322A                        36            .byte	$36
13923 322B                        36            .byte	$36
13924 322C                        36            .byte	$36
13925 322D                        36            .byte	$36
13926 322E                        36            .byte	$36
13927 322F                        36            .byte	$36
13928                                           ! 1431  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13929 3230                        18            .byte	$18
13930 3231                        18            .byte	$18
13931 3232                        18            .byte	$18
13932 3233                        18            .byte	$18
13933 3234                        18            .byte	$18
13934 3235                        FF            .byte	$FF
13935 3236                        00            .byte	0
13936 3237                        FF            .byte	$FF
13937 3238                        00            .byte	0
13938 3239                        00            .byte	0
13939 323A                        00            .byte	0
13940 323B                        00            .byte	0
13941 323C                        00            .byte	0
13942 323D                        00            .byte	0
13943 323E                        00            .byte	0
13944 323F                        00            .byte	0
13945                                           ! 1432  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13946 3240                        36            .byte	$36
13947 3241                        36            .byte	$36
13948 3242                        36            .byte	$36
13949 3243                        36            .byte	$36
13950 3244                        36            .byte	$36
13951 3245                        36            .byte	$36
13952 3246                        36            .byte	$36
13953 3247                        FF            .byte	$FF
13954 3248                        00            .byte	0
13955 3249                        00            .byte	0
13956 324A                        00            .byte	0
13957 324B                        00            .byte	0
13958 324C                        00            .byte	0
13959 324D                        00            .byte	0
13960 324E                        00            .byte	0
13961 324F                        00            .byte	0
13962                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13963 3250                        00            .byte	0
13964 3251                        00            .byte	0
13965 3252                        00            .byte	0
13966 3253                        00            .byte	0
13967 3254                        00            .byte	0
13968 3255                        FF            .byte	$FF
13969 3256                        00            .byte	0
13970 3257                        FF            .byte	$FF
13971 3258                        18            .byte	$18
13972 3259                        18            .byte	$18
13973 325A                        18            .byte	$18
13974 325B                        18            .byte	$18
13975 325C                        18            .byte	$18
13976 325D                        18            .byte	$18
13977 325E                        18            .byte	$18
13978 325F                        18            .byte	$18
13979                                           ! 1434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13980 3260                        00            .byte	0
13981 3261                        00            .byte	0
13982 3262                        00            .byte	0
13983 3263                        00            .byte	0
13984 3264                        00            .byte	0
13985 3265                        00            .byte	0
13986 3266                        00            .byte	0
13987 3267                        FF            .byte	$FF
13988 3268                        36            .byte	$36
13989 3269                        36            .byte	$36
13990 326A                        36            .byte	$36
13991 326B                        36            .byte	$36
13992 326C                        36            .byte	$36
13993 326D                        36            .byte	$36
13994 326E                        36            .byte	$36
13995 326F                        36            .byte	$36
13996                                           ! 1435  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13997 3270                        36            .byte	$36
13998 3271                        36            .byte	$36
13999 3272                        36            .byte	$36
14000 3273                        36            .byte	$36
14001 3274                        36            .byte	$36
14002 3275                        36            .byte	$36
14003 3276                        36            .byte	$36
14004 3277                        3F            .byte	$3F
14005 3278                        00            .byte	0
14006 3279                        00            .byte	0
14007 327A                        00            .byte	0
14008 327B                        00            .byte	0
14009 327C                        00            .byte	0
14010 327D                        00            .byte	0
14011 327E                        00            .byte	0
14012 327F                        00            .byte	0
14013                                           ! 1436  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14014 3280                        18            .byte	$18
14015 3281                        18            .byte	$18
14016 3282                        18            .byte	$18
14017 3283                        18            .byte	$18
14018 3284                        18            .byte	$18
14019 3285                        1F            .byte	$1F
14020 3286                        18            .byte	$18
14021 3287                        1F            .byte	$1F
14022 3288                        00            .byte	0
14023 3289                        00            .byte	0
14024 328A                        00            .byte	0
14025 328B                        00            .byte	0
14026 328C                        00            .byte	0
14027 328D                        00            .byte	0
14028 328E                        00            .byte	0
14029 328F                        00            .byte	0
14030                                           ! 1437  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14031 3290                        00            .byte	0
14032 3291                        00            .byte	0
14033 3292                        00            .byte	0
14034 3293                        00            .byte	0
14035 3294                        00            .byte	0
14036 3295                        1F            .byte	$1F
14037 3296                        18            .byte	$18
14038 3297                        1F            .byte	$1F
14039 3298                        18            .byte	$18
14040 3299                        18            .byte	$18
14041 329A                        18            .byte	$18
14042 329B                        18            .byte	$18
14043 329C                        18            .byte	$18
14044 329D                        18            .byte	$18
14045 329E                        18            .byte	$18
14046 329F                        18            .byte	$18
14047                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14048 32A0                        00            .byte	0
14049 32A1                        00            .byte	0
14050 32A2                        00            .byte	0
14051 32A3                        00            .byte	0
14052 32A4                        00            .byte	0
14053 32A5                        00            .byte	0
14054 32A6                        00            .byte	0
14055 32A7                        3F            .byte	$3F
14056 32A8                        36            .byte	$36
14057 32A9                        36            .byte	$36
14058 32AA                        36            .byte	$36
14059 32AB                        36            .byte	$36
14060 32AC                        36            .byte	$36
14061 32AD                        36            .byte	$36
14062 32AE                        36            .byte	$36
14063 32AF                        36            .byte	$36
14064                                           ! 1439  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14065 32B0                        36            .byte	$36
14066 32B1                        36            .byte	$36
14067 32B2                        36            .byte	$36
14068 32B3                        36            .byte	$36
14069 32B4                        36            .byte	$36
14070 32B5                        36            .byte	$36
14071 32B6                        36            .byte	$36
14072 32B7                        FF            .byte	$FF
14073 32B8                        36            .byte	$36
14074 32B9                        36            .byte	$36
14075 32BA                        36            .byte	$36
14076 32BB                        36            .byte	$36
14077 32BC                        36            .byte	$36
14078 32BD                        36            .byte	$36
14079 32BE                        36            .byte	$36
14080 32BF                        36            .byte	$36
14081                                           ! 1440  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14082 32C0                        18            .byte	$18
14083 32C1                        18            .byte	$18
14084 32C2                        18            .byte	$18
14085 32C3                        18            .byte	$18
14086 32C4                        18            .byte	$18
14087 32C5                        FF            .byte	$FF
14088 32C6                        18            .byte	$18
14089 32C7                        FF            .byte	$FF
14090 32C8                        18            .byte	$18
14091 32C9                        18            .byte	$18
14092 32CA                        18            .byte	$18
14093 32CB                        18            .byte	$18
14094 32CC                        18            .byte	$18
14095 32CD                        18            .byte	$18
14096 32CE                        18            .byte	$18
14097 32CF                        18            .byte	$18
14098                                           ! 1441  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14099 32D0                        18            .byte	$18
14100 32D1                        18            .byte	$18
14101 32D2                        18            .byte	$18
14102 32D3                        18            .byte	$18
14103 32D4                        18            .byte	$18
14104 32D5                        18            .byte	$18
14105 32D6                        18            .byte	$18
14106 32D7                        F8            .byte	$F8
14107 32D8                        00            .byte	0
14108 32D9                        00            .byte	0
14109 32DA                        00            .byte	0
14110 32DB                        00            .byte	0
14111 32DC                        00            .byte	0
14112 32DD                        00            .byte	0
14113 32DE                        00            .byte	0
14114 32DF                        00            .byte	0
14115                                           ! 1442  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14116 32E0                        00            .byte	0
14117 32E1                        00            .byte	0
14118 32E2                        00            .byte	0
14119 32E3                        00            .byte	0
14120 32E4                        00            .byte	0
14121 32E5                        00            .byte	0
14122 32E6                        00            .byte	0
14123 32E7                        1F            .byte	$1F
14124 32E8                        18            .byte	$18
14125 32E9                        18            .byte	$18
14126 32EA                        18            .byte	$18
14127 32EB                        18            .byte	$18
14128 32EC                        18            .byte	$18
14129 32ED                        18            .byte	$18
14130 32EE                        18            .byte	$18
14131 32EF                        18            .byte	$18
14132                                           ! 1443  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14133 32F0                        FF            .byte	$FF
14134 32F1                        FF            .byte	$FF
14135 32F2                        FF            .byte	$FF
14136 32F3                        FF            .byte	$FF
14137 32F4                        FF            .byte	$FF
14138 32F5                        FF            .byte	$FF
14139 32F6                        FF            .byte	$FF
14140 32F7                        FF            .byte	$FF
14141 32F8                        FF            .byte	$FF
14142 32F9                        FF            .byte	$FF
14143 32FA                        FF            .byte	$FF
14144 32FB                        FF            .byte	$FF
14145 32FC                        FF            .byte	$FF
14146 32FD                        FF            .byte	$FF
14147 32FE                        FF            .byte	$FF
14148 32FF                        FF            .byte	$FF
14149                                           ! 1444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14150 3300                        00            .byte	0
14151 3301                        00            .byte	0
14152 3302                        00            .byte	0
14153 3303                        00            .byte	0
14154 3304                        00            .byte	0
14155 3305                        00            .byte	0
14156 3306                        00            .byte	0
14157 3307                        FF            .byte	$FF
14158 3308                        FF            .byte	$FF
14159 3309                        FF            .byte	$FF
14160 330A                        FF            .byte	$FF
14161 330B                        FF            .byte	$FF
14162 330C                        FF            .byte	$FF
14163 330D                        FF            .byte	$FF
14164 330E                        FF            .byte	$FF
14165 330F                        FF            .byte	$FF
14166                                           ! 1445  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14167 3310                        F0            .byte	$F0
14168 3311                        F0            .byte	$F0
14169 3312                        F0            .byte	$F0
14170 3313                        F0            .byte	$F0
14171 3314                        F0            .byte	$F0
14172 3315                        F0            .byte	$F0
14173 3316                        F0            .byte	$F0
14174 3317                        F0            .byte	$F0
14175 3318                        F0            .byte	$F0
14176 3319                        F0            .byte	$F0
14177 331A                        F0            .byte	$F0
14178 331B                        F0            .byte	$F0
14179 331C                        F0            .byte	$F0
14180 331D                        F0            .byte	$F0
14181 331E                        F0            .byte	$F0
14182 331F                        F0            .byte	$F0
14183                                           ! 1446  0x0f, 0x0f, 0x0f, 0x0f, 0
14184 3320                        0F            .byte	$F
14185 3321                        0F            .byte	$F
14186 3322                        0F            .byte	$F
14187 3323                        0F            .byte	$F
14188                                           ! 1446 x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14189 3324                        0F            .byte	$F
14190 3325                        0F            .byte	$F
14191 3326                        0F            .byte	$F
14192 3327                        0F            .byte	$F
14193 3328                        0F            .byte	$F
14194 3329                        0F            .byte	$F
14195 332A                        0F            .byte	$F
14196 332B                        0F            .byte	$F
14197 332C                        0F            .byte	$F
14198 332D                        0F            .byte	$F
14199 332E                        0F            .byte	$F
14200 332F                        0F            .byte	$F
14201                                           ! 1447  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14202 3330                        FF            .byte	$FF
14203 3331                        FF            .byte	$FF
14204 3332                        FF            .byte	$FF
14205 3333                        FF            .byte	$FF
14206 3334                        FF            .byte	$FF
14207 3335                        FF            .byte	$FF
14208 3336                        FF            .byte	$FF
14209 3337                        00            .byte	0
14210 3338                        00            .byte	0
14211 3339                        00            .byte	0
14212 333A                        00            .byte	0
14213 333B                        00            .byte	0
14214 333C                        00            .byte	0
14215 333D                        00            .byte	0
14216 333E                        00            .byte	0
14217 333F                        00            .byte	0
14218                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14219 3340                        00            .byte	0
14220 3341                        00            .byte	0
14221 3342                        00            .byte	0
14222 3343                        00            .byte	0
14223 3344                        00            .byte	0
14224 3345                        76            .byte	$76
14225 3346                        DC            .byte	$DC
14226 3347                        D8            .byte	$D8
14227 3348                        D8            .byte	$D8
14228 3349                        D8            .byte	$D8
14229 334A                        DC            .byte	$DC
14230 334B                        76            .byte	$76
14231 334C                        00            .byte	0
14232 334D                        00            .byte	0
14233 334E                        00            .byte	0
14234 334F                        00            .byte	0
14235                                           ! 1449  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14236 3350                        00            .byte	0
14237 3351                        00            .byte	0
14238 3352                        78            .byte	$78
14239 3353                        CC            .byte	$CC
14240 3354                        CC            .byte	$CC
14241 3355                        CC            .byte	$CC
14242 3356                        D8            .byte	$D8
14243 3357                        CC            .byte	$CC
14244 3358                        C6            .byte	$C6
14245 3359                        C6            .byte	$C6
14246 335A                        C6            .byte	$C6
14247 335B                        CC            .byte	$CC
14248 335C                        00            .byte	0
14249 335D                        00            .byte	0
14250 335E                        00            .byte	0
14251 335F                        00            .byte	0
14252                                           ! 1450  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14253 3360                        00            .byte	0
14254 3361                        00            .byte	0
14255 3362                        FE            .byte	$FE
14256 3363                        C6            .byte	$C6
14257 3364                        C6            .byte	$C6
14258 3365                        C0            .byte	$C0
14259 3366                        C0            .byte	$C0
14260 3367                        C0            .byte	$C0
14261 3368                        C0            .byte	$C0
14262 3369                        C0            .byte	$C0
14263 336A                        C0            .byte	$C0
14264 336B                        C0            .byte	$C0
14265 336C                        00            .byte	0
14266 336D                        00            .byte	0
14267 336E                        00            .byte	0
14268 336F                        00            .byte	0
14269                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14270 3370                        00            .byte	0
14271 3371                        00            .byte	0
14272 3372                        00            .byte	0
14273 3373                        00            .byte	0
14274 3374                        FE            .byte	$FE
14275 3375                        6C            .byte	$6C
14276 3376                        6C            .byte	$6C
14277 3377                        6C            .byte	$6C
14278 3378                        6C            .byte	$6C
14279 3379                        6C            .byte	$6C
14280 337A                        6C            .byte	$6C
14281 337B                        6C            .byte	$6C
14282 337C                        00            .byte	0
14283 337D                        00            .byte	0
14284 337E                        00            .byte	0
14285 337F                        00            .byte	0
14286                                           ! 1452  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14287 3380                        00            .byte	0
14288 3381                        00            .byte	0
14289 3382                        00            .byte	0
14290 3383                        FE            .byte	$FE
14291 3384                        C6            .byte	$C6
14292 3385                        60            .byte	$60
14293 3386                        30            .byte	$30
14294 3387                        18            .byte	$18
14295 3388                        30            .byte	$30
14296 3389                        60            .byte	$60
14297 338A                        C6            .byte	$C6
14298 338B                        FE            .byte	$FE
14299 338C                        00            .byte	0
14300 338D                        00            .byte	0
14301 338E                        00            .byte	0
14302 338F                        00            .byte	0
14303                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14304 3390                        00            .byte	0
14305 3391                        00            .byte	0
14306 3392                        00            .byte	0
14307 3393                        00            .byte	0
14308 3394                        00            .byte	0
14309 3395                        7E            .byte	$7E
14310 3396                        D8            .byte	$D8
14311 3397                        D8            .byte	$D8
14312 3398                        D8            .byte	$D8
14313 3399                        D8            .byte	$D8
14314 339A                        D8            .byte	$D8
14315 339B                        70            .byte	$70
14316 339C                        00            .byte	0
14317 339D                        00            .byte	0
14318 339E                        00            .byte	0
14319 339F                        00            .byte	0
14320                                           ! 1454  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14321 33A0                        00            .byte	0
14322 33A1                        00            .byte	0
14323 33A2                        00            .byte	0
14324 33A3                        00            .byte	0
14325 33A4                        66            .byte	$66
14326 33A5                        66            .byte	$66
14327 33A6                        66            .byte	$66
14328 33A7                        66            .byte	$66
14329 33A8                        66            .byte	$66
14330 33A9                        7C            .byte	$7C
14331 33AA                        60            .byte	$60
14332 33AB                        60            .byte	$60
14333 33AC                        C0            .byte	$C0
14334 33AD                        00            .byte	0
14335 33AE                        00            .byte	0
14336 33AF                        00            .byte	0
14337                                           ! 1455  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14338 33B0                        00            .byte	0
14339 33B1                        00            .byte	0
14340 33B2                        00            .byte	0
14341 33B3                        00            .byte	0
14342 33B4                        76            .byte	$76
14343 33B5                        DC            .byte	$DC
14344 33B6                        18            .byte	$18
14345 33B7                        18            .byte	$18
14346 33B8                        18            .byte	$18
14347 33B9                        18            .byte	$18
14348 33BA                        18            .byte	$18
14349 33BB                        18            .byte	$18
14350 33BC                        00            .byte	0
14351 33BD                        00            .byte	0
14352 33BE                        00            .byte	0
14353 33BF                        00            .byte	0
14354                                           ! 1456  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14355 33C0                        00            .byte	0
14356 33C1                        00            .byte	0
14357 33C2                        00            .byte	0
14358 33C3                        7E            .byte	$7E
14359 33C4                        18            .byte	$18
14360 33C5                        3C            .byte	$3C
14361 33C6                        66            .byte	$66
14362 33C7                        66            .byte	$66
14363 33C8                        66            .byte	$66
14364 33C9                        3C            .byte	$3C
14365 33CA                        18            .byte	$18
14366 33CB                        7E            .byte	$7E
14367 33CC                        00            .byte	0
14368 33CD                        00            .byte	0
14369 33CE                        00            .byte	0
14370 33CF                        00            .byte	0
14371                                           ! 1457  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14372 33D0                        00            .byte	0
14373 33D1                        00            .byte	0
14374 33D2                        00            .byte	0
14375 33D3                        38            .byte	$38
14376 33D4                        6C            .byte	$6C
14377 33D5                        C6            .byte	$C6
14378 33D6                        C6            .byte	$C6
14379 33D7                        FE            .byte	$FE
14380 33D8                        C6            .byte	$C6
14381 33D9                        C6            .byte	$C6
14382 33DA                        6C            .byte	$6C
14383 33DB                        38            .byte	$38
14384 33DC                        00            .byte	0
14385 33DD                        00            .byte	0
14386 33DE                        00            .byte	0
14387 33DF                        00            .byte	0
14388                                           ! 1458  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14389 33E0                        00            .byte	0
14390 33E1                        00            .byte	0
14391 33E2                        38            .byte	$38
14392 33E3                        6C            .byte	$6C
14393 33E4                        C6            .byte	$C6
14394 33E5                        C6            .byte	$C6
14395 33E6                        C6            .byte	$C6
14396 33E7                        6C            .byte	$6C
14397 33E8                        6C            .byte	$6C
14398 33E9                        6C            .byte	$6C
14399 33EA                        6C            .byte	$6C
14400 33EB                        EE            .byte	$EE
14401 33EC                        00            .byte	0
14402 33ED                        00            .byte	0
14403 33EE                        00            .byte	0
14404 33EF                        00            .byte	0
14405                                           ! 1459  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14406 33F0                        00            .byte	0
14407 33F1                        00            .byte	0
14408 33F2                        1E            .byte	$1E
14409 33F3                        30            .byte	$30
14410 33F4                        18            .byte	$18
14411 33F5                        0C            .byte	$C
14412 33F6                        3E            .byte	$3E
14413 33F7                        66            .byte	$66
14414 33F8                        66            .byte	$66
14415 33F9                        66            .byte	$66
14416 33FA                        66            .byte	$66
14417 33FB                        3C            .byte	$3C
14418 33FC                        00            .byte	0
14419 33FD                        00            .byte	0
14420 33FE                        00            .byte	0
14421 33FF                        00            .byte	0
14422                                           ! 1460  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14423 3400                        00            .byte	0
14424 3401                        00            .byte	0
14425 3402                        00            .byte	0
14426 3403                        00            .byte	0
14427 3404                        00            .byte	0
14428 3405                        7E            .byte	$7E
14429 3406                        DB            .byte	$DB
14430 3407                        DB            .byte	$DB
14431 3408                        DB            .byte	$DB
14432 3409                        7E            .byte	$7E
14433 340A                        00            .byte	0
14434 340B                        00            .byte	0
14435 340C                        00            .byte	0
14436 340D                        00            .byte	0
14437 340E                        00            .byte	0
14438 340F                        00            .byte	0
14439                                           ! 1461  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14440 3410                        00            .byte	0
14441 3411                        00            .byte	0
14442 3412                        00            .byte	0
14443 3413                        03            .byte	3
14444 3414                        06            .byte	6
14445 3415                        7E            .byte	$7E
14446 3416                        DB            .byte	$DB
14447 3417                        DB            .byte	$DB
14448 3418                        F3            .byte	$F3
14449 3419                        7E            .byte	$7E
14450 341A                        60            .byte	$60
14451 341B                        C0            .byte	$C0
14452 341C                        00            .byte	0
14453 341D                        00            .byte	0
14454 341E                        00            .byte	0
14455 341F                        00            .byte	0
14456                                           ! 1462  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14457 3420                        00            .byte	0
14458 3421                        00            .byte	0
14459 3422                        1C            .byte	$1C
14460 3423                        30            .byte	$30
14461 3424                        60            .byte	$60
14462 3425                        60            .byte	$60
14463 3426                        7C            .byte	$7C
14464 3427                        60            .byte	$60
14465 3428                        60            .byte	$60
14466 3429                        60            .byte	$60
14467 342A                        30            .byte	$30
14468 342B                        1C            .byte	$1C
14469 342C                        00            .byte	0
14470 342D                        00            .byte	0
14471 342E                        00            .byte	0
14472 342F                        00            .byte	0
14473                                           ! 1463  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14474 3430                        00            .byte	0
14475 3431                        00            .byte	0
14476 3432                        00            .byte	0
14477 3433                        7C            .byte	$7C
14478 3434                        C6            .byte	$C6
14479 3435                        C6            .byte	$C6
14480 3436                        C6            .byte	$C6
14481 3437                        C6            .byte	$C6
14482 3438                        C6            .byte	$C6
14483 3439                        C6            .byte	$C6
14484 343A                        C6            .byte	$C6
14485 343B                        C6            .byte	$C6
14486 343C                        00            .byte	0
14487 343D                        00            .byte	0
14488 343E                        00            .byte	0
14489 343F                        00            .byte	0
14490                                           ! 1464  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14491 3440                        00            .byte	0
14492 3441                        00            .byte	0
14493 3442                        00            .byte	0
14494 3443                        00            .byte	0
14495 3444                        FE            .byte	$FE
14496 3445                        00            .byte	0
14497 3446                        00            .byte	0
14498 3447                        FE            .byte	$FE
14499 3448                        00            .byte	0
14500 3449                        00            .byte	0
14501 344A                        FE            .byte	$FE
14502 344B                        00            .byte	0
14503 344C                        00            .byte	0
14504 344D                        00            .byte	0
14505 344E                        00            .byte	0
14506 344F                        00            .byte	0
14507                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14508 3450                        00            .byte	0
14509 3451                        00            .byte	0
14510 3452                        00            .byte	0
14511 3453                        00            .byte	0
14512 3454                        18            .byte	$18
14513 3455                        18            .byte	$18
14514 3456                        7E            .byte	$7E
14515 3457                        18            .byte	$18
14516 3458                        18            .byte	$18
14517 3459                        00            .byte	0
14518 345A                        00            .byte	0
14519 345B                        FF            .byte	$FF
14520 345C                        00            .byte	0
14521 345D                        00            .byte	0
14522 345E                        00            .byte	0
14523 345F                        00            .byte	0
14524                                           ! 1466  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14525 3460                        00            .byte	0
14526 3461                        00            .byte	0
14527 3462                        00            .byte	0
14528 3463                        30            .byte	$30
14529 3464                        18            .byte	$18
14530 3465                        0C            .byte	$C
14531 3466                        06            .byte	6
14532 3467                        0C            .byte	$C
14533 3468                        18            .byte	$18
14534 3469                        30            .byte	$30
14535 346A                        00            .byte	0
14536 346B                        7E            .byte	$7E
14537 346C                        00            .byte	0
14538 346D                        00            .byte	0
14539 346E                        00            .byte	0
14540 346F                        00            .byte	0
14541                                           ! 1467  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 
14542 3470                        00            .byte	0
14543 3471                        00            .byte	0
14544 3472                        00            .byte	0
14545 3473                        0C            .byte	$C
14546 3474                        18            .byte	$18
14547 3475                        30            .byte	$30
14548                                           ! 1467 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14549 3476                        60            .byte	$60
14550 3477                        30            .byte	$30
14551 3478                        18            .byte	$18
14552 3479                        0C            .byte	$C
14553 347A                        00            .byte	0
14554 347B                        7E            .byte	$7E
14555 347C                        00            .byte	0
14556 347D                        00            .byte	0
14557 347E                        00            .byte	0
14558 347F                        00            .byte	0
14559                                           ! 1468  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14560 3480                        00            .byte	0
14561 3481                        00            .byte	0
14562 3482                        0E            .byte	$E
14563 3483                        1B            .byte	$1B
14564 3484                        1B            .byte	$1B
14565 3485                        18            .byte	$18
14566 3486                        18            .byte	$18
14567 3487                        18            .byte	$18
14568 3488                        18            .byte	$18
14569 3489                        18            .byte	$18
14570 348A                        18            .byte	$18
14571 348B                        18            .byte	$18
14572 348C                        18            .byte	$18
14573 348D                        18            .byte	$18
14574 348E                        18            .byte	$18
14575 348F                        18            .byte	$18
14576                                           ! 1469  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14577 3490                        18            .byte	$18
14578 3491                        18            .byte	$18
14579 3492                        18            .byte	$18
14580 3493                        18            .byte	$18
14581 3494                        18            .byte	$18
14582 3495                        18            .byte	$18
14583 3496                        18            .byte	$18
14584 3497                        18            .byte	$18
14585 3498                        D8            .byte	$D8
14586 3499                        D8            .byte	$D8
14587 349A                        D8            .byte	$D8
14588 349B                        70            .byte	$70
14589 349C                        00            .byte	0
14590 349D                        00            .byte	0
14591 349E                        00            .byte	0
14592 349F                        00            .byte	0
14593                                           ! 1470  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14594 34A0                        00            .byte	0
14595 34A1                        00            .byte	0
14596 34A2                        00            .byte	0
14597 34A3                        00            .byte	0
14598 34A4                        18            .byte	$18
14599 34A5                        18            .byte	$18
14600 34A6                        00            .byte	0
14601 34A7                        7E            .byte	$7E
14602 34A8                        00            .byte	0
14603 34A9                        18            .byte	$18
14604 34AA                        18            .byte	$18
14605 34AB                        00            .byte	0
14606 34AC                        00            .byte	0
14607 34AD                        00            .byte	0
14608 34AE                        00            .byte	0
14609 34AF                        00            .byte	0
14610                                           ! 1471  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14611 34B0                        00            .byte	0
14612 34B1                        00            .byte	0
14613 34B2                        00            .byte	0
14614 34B3                        00            .byte	0
14615 34B4                        00            .byte	0
14616 34B5                        76            .byte	$76
14617 34B6                        DC            .byte	$DC
14618 34B7                        00            .byte	0
14619 34B8                        76            .byte	$76
14620 34B9                        DC            .byte	$DC
14621 34BA                        00            .byte	0
14622 34BB                        00            .byte	0
14623 34BC                        00            .byte	0
14624 34BD                        00            .byte	0
14625 34BE                        00            .byte	0
14626 34BF                        00            .byte	0
14627                                           ! 1472  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14628 34C0                        00            .byte	0
14629 34C1                        38            .byte	$38
14630 34C2                        6C            .byte	$6C
14631 34C3                        6C            .byte	$6C
14632 34C4                        38            .byte	$38
14633 34C5                        00            .byte	0
14634 34C6                        00            .byte	0
14635 34C7                        00            .byte	0
14636 34C8                        00            .byte	0
14637 34C9                        00            .byte	0
14638 34CA                        00            .byte	0
14639 34CB                        00            .byte	0
14640 34CC                        00            .byte	0
14641 34CD                        00            .byte	0
14642 34CE                        00            .byte	0
14643 34CF                        00            .byte	0
14644                                           ! 1473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14645 34D0                        00            .byte	0
14646 34D1                        00            .byte	0
14647 34D2                        00            .byte	0
14648 34D3                        00            .byte	0
14649 34D4                        00            .byte	0
14650 34D5                        00            .byte	0
14651 34D6                        00            .byte	0
14652 34D7                        18            .byte	$18
14653 34D8                        18            .byte	$18
14654 34D9                        00            .byte	0
14655 34DA                        00            .byte	0
14656 34DB                        00            .byte	0
14657 34DC                        00            .byte	0
14658 34DD                        00            .byte	0
14659 34DE                        00            .byte	0
14660 34DF                        00            .byte	0
14661                                           ! 1474  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14662 34E0                        00            .byte	0
14663 34E1                        00            .byte	0
14664 34E2                        00            .byte	0
14665 34E3                        00            .byte	0
14666 34E4                        00            .byte	0
14667 34E5                        00            .byte	0
14668 34E6                        00            .byte	0
14669 34E7                        00            .byte	0
14670 34E8                        18            .byte	$18
14671 34E9                        00            .byte	0
14672 34EA                        00            .byte	0
14673 34EB                        00            .byte	0
14674 34EC                        00            .byte	0
14675 34ED                        00            .byte	0
14676 34EE                        00            .byte	0
14677 34EF                        00            .byte	0
14678                                           ! 1475  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14679 34F0                        00            .byte	0
14680 34F1                        0F            .byte	$F
14681 34F2                        0C            .byte	$C
14682 34F3                        0C            .byte	$C
14683 34F4                        0C            .byte	$C
14684 34F5                        0C            .byte	$C
14685 34F6                        0C            .byte	$C
14686 34F7                        EC            .byte	$EC
14687 34F8                        6C            .byte	$6C
14688 34F9                        6C            .byte	$6C
14689 34FA                        3C            .byte	$3C
14690 34FB                        1C            .byte	$1C
14691 34FC                        00            .byte	0
14692 34FD                        00            .byte	0
14693 34FE                        00            .byte	0
14694 34FF                        00            .byte	0
14695                                           ! 1476  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14696 3500                        00            .byte	0
14697 3501                        D8            .byte	$D8
14698 3502                        6C            .byte	$6C
14699 3503                        6C            .byte	$6C
14700 3504                        6C            .byte	$6C
14701 3505                        6C            .byte	$6C
14702 3506                        6C            .byte	$6C
14703 3507                        00            .byte	0
14704 3508                        00            .byte	0
14705 3509                        00            .byte	0
14706 350A                        00            .byte	0
14707 350B                        00            .byte	0
14708 350C                        00            .byte	0
14709 350D                        00            .byte	0
14710 350E                        00            .byte	0
14711 350F                        00            .byte	0
14712                                           ! 1477  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14713 3510                        00            .byte	0
14714 3511                        70            .byte	$70
14715 3512                        D8            .byte	$D8
14716 3513                        30            .byte	$30
14717 3514                        60            .byte	$60
14718 3515                        C8            .byte	$C8
14719 3516                        F8            .byte	$F8
14720 3517                        00            .byte	0
14721 3518                        00            .byte	0
14722 3519                        00            .byte	0
14723 351A                        00            .byte	0
14724 351B                        00            .byte	0
14725 351C                        00            .byte	0
14726 351D                        00            .byte	0
14727 351E                        00            .byte	0
14728 351F                        00            .byte	0
14729                                           ! 1478  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14730 3520                        00            .byte	0
14731 3521                        00            .byte	0
14732 3522                        00            .byte	0
14733 3523                        00            .byte	0
14734 3524                        7C            .byte	$7C
14735 3525                        7C            .byte	$7C
14736 3526                        7C            .byte	$7C
14737 3527                        7C            .byte	$7C
14738 3528                        7C            .byte	$7C
14739 3529                        7C            .byte	$7C
14740 352A                        7C            .byte	$7C
14741 352B                        00            .byte	0
14742 352C                        00            .byte	0
14743 352D                        00            .byte	0
14744 352E                        00            .byte	0
14745 352F                        00            .byte	0
14746                                           ! 1479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
14747 3530                        00            .byte	0
14748 3531                        00            .byte	0
14749 3532                        00            .byte	0
14750 3533                        00            .byte	0
14751 3534                        00            .byte	0
14752 3535                        00            .byte	0
14753 3536                        00            .byte	0
14754 3537                        00            .byte	0
14755 3538                        00            .byte	0
14756 3539                        00            .byte	0
14757 353A                        00            .byte	0
14758 353B                        00            .byte	0
14759 353C                        00            .byte	0
14760 353D                        00            .byte	0
14761 353E                        00            .byte	0
14762                                           ! 1480 };
14763 353F                        00            .byte	0
14764                                           !BCC_EOS
14765                                           ! 1481 static Bit8u vgafont14alt[1]={0x00};
14766                       00003540            _vgafont14alt:
14767 3540                        00            .byte	0
14768                                           !BCC_EOS
14769                                           ! 1482 static Bit8u vgafont16alt[1]={0x00};
14770                       00003541            _vgafont16alt:
14771 3541                        00            .byte	0
14772                                           !BCC_EOS
14773                                           ! 1483 #asm
14774                                           !BCC_ASM
14775                       00003542            init_vga_card:
14776                                           ;; switch to color mode and enable CPU access 480 lines
14777 3542           BA                   03C2    mov dx, #0x3C2
14778 3545           B0                     C3    mov al, #0xC3
14779 3547           EE                           outb dx,al
14780                                           ;; more than 64k 3C4/04
14781 3548           BA                   03C4    mov dx, #0x3C4
14782 354B           B0                     04    mov al, #0x04
14783 354D           EE                           outb dx,al
14784 354E           BA                   03C5    mov dx, #0x3C5
14785 3551           B0                     02    mov al, #0x02
14786 3553           EE                           outb dx,al
14787 3554           BB                   355E    mov bx, #msg_vga_init
14788 3557           53                           push bx
14789 3558           E8         45D9              call _printf
14790 355B           44                           inc sp
14791 355C           44                           inc sp
14792 355D           C3                           ret
14793                       0000355E            msg_vga_init:
14794 355E                        56            .ascii "VGABios $Id: vgabios.c,v 1.67 2008/01/27 09:44:12 vruppert Exp $"
14795 359E                        0D            .byte 0x0d,0x0a,0x00
14796                                           ! 1505 endasm
14797                                           !BCC_ENDASM
14798                                           ! 1506 #asm
14799                                           !BCC_ASM
14800                       000035A1            init_bios_area:
14801 35A1           1E                           push ds
14802 35A2           B8                   0040    mov ax, # 0x40
14803 35A5           8ED8                         mov ds, ax
14804                                           ;; init detected hardware BIOS Area
14805 35A7           BB                   0010    mov bx, # 0x10
14806 35AA           8B07                         mov ax, [bx]
14807 35AC           25                   FFCF    and ax, #0xffcf
14808                                           ;; set 80x25 color (not clear from RBIL but usual)
14809 35AF           0D                   0020    or ax, #0x0020
14810 35B2           8907                         mov [bx], ax
14811                                           ;; Just for the first int10 find its children
14812                                           ;; the default char height
14813 35B4           BB                   0085    mov bx, # 0x85
14814 35B7           B0                     10    mov al, #0x10
14815 35B9           8807                         mov [bx], al
14816                                           ;; Clear the screen
14817 35BB           BB                   0087    mov bx, # 0x87
14818 35BE           B0                     60    mov al, #0x60
14819 35C0           8807                         mov [bx], al
14820                                           ;; Set the basic screen we have
14821 35C2           BB                   0088    mov bx, # 0x88
14822 35C5           B0                     F9    mov al, #0xf9
14823 35C7           8807                         mov [bx], al
14824                                           ;; Set the basic modeset options
14825 35C9           BB                   0089    mov bx, # 0x89
14826 35CC           B0                     51    mov al, #0x51
14827 35CE           8807                         mov [bx], al
14828                                           ;; Set the default MSR
14829 35D0           BB                   0065    mov bx, # 0x65
14830 35D3           B0                     09    mov al, #0x09
14831 35D5           8807                         mov [bx], al
14832 35D7           1F                           pop ds
14833 35D8           C3                           ret
14834                       000035D9            _video_save_pointer_table:
14835 35D9                      0270              .word _video_param_table
14836 35DB                      C000              .word 0xc000
14837 35DD                      0000              .word 0
14838 35DF                      0000              .word 0
14839 35E1                      0000              .word 0
14840 35E3                      0000              .word 0
14841 35E5                      0000              .word 0
14842 35E7                      0000              .word 0
14843 35E9                      0000              .word 0
14844 35EB                      0000              .word 0
14845 35ED                      0000              .word 0
14846 35EF                      0000              .word 0
14847 35F1                      0000              .word 0
14848 35F3                      0000              .word 0
14849                                           ! 1556 endasm
14850                                           !BCC_ENDASM
14851                                           ! 1557 static void display_splash_screen()
14852                                           ! 1558 {
14853                                           
14854                       000035F5            _display_splash_screen:
14855                                           ! 1559 }
14856 35F5           C3                         ret
14857                                           ! 1560 static void display_info()
14858                                           ! 1561 {
14859                       000035F6            _display_info:
14860                                           ! 1562 #asm
14861                                           !BCC_ASM
14862 35F6           B8                   C000   mov ax,#0xc000
14863 35F9           8ED8                        mov ds,ax
14864 35FB           BE                   0022   mov si,#vgabios_name
14865 35FE           E8         0013             call _display_string
14866 3601           BE                   003E   mov si,#vgabios_version
14867 3604           E8         000D             call _display_string
14868                                            ;;mov si,#vgabios_copyright
14869                                            ;;call _display_string
14870                                            ;;mov si,#crlf
14871                                            ;;call _display_string
14872 3607           BE                   0086   mov si,#vgabios_license
14873 360A           E8         0007             call _display_string
14874 360D           BE                   00BB   mov si,#vgabios_website
14875 3610           E8         0001             call _display_string
14876                                           ! 1577 endasm
14877                                           !BCC_ENDASM
14878                                           ! 1578 }
14879 3613           C3                         ret
14880                                           ! 1579 static void display_string()
14881                                           ! 1580 {
14882                       00003614            _display_string:
14883                                           ! 1581 #asm
14884                                           !BCC_ASM
14885 3614           8CD8                        mov ax,ds
14886 3616           8EC0                        mov es,ax
14887 3618           89F7                        mov di,si
14888 361A           31C9                        xor cx,cx
14889 361C           F7D1                        not cx
14890 361E           30C0                        xor al,al
14891 3620           FC                          cld
14892 3621           F2                          repne
14893 3622           AE                           scasb
14894 3623           F7D1                        not cx
14895 3625           49                          dec cx
14896 3626           51                          push cx
14897 3627           B8                   0300   mov ax,#0x0300
14898 362A           BB                   0000   mov bx,#0x0000
14899 362D           CD                     10   int #0x10
14900 362F           59                          pop cx
14901 3630           B8                   1301   mov ax,#0x1301
14902 3633           BB                   000B   mov bx,#0x000b
14903 3636           89F5                        mov bp,si
14904 3638           CD                     10   int #0x10
14905                                           ! 1602 endasm
14906                                           !BCC_ENDASM
14907                                           ! 1603 }
14908 363A           C3                         ret
14909                                           ! 1604 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14910                                           ! 1605   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14911                       0000363B            _int10_func:
14912                                           !BCC_EOS
14913                                           ! 1606 {
14914                                           ! 1607  switch(( AX >> 8 ))
14915 363B           55                         push	bp
14916 363C           89E5                       mov	bp,sp
14917                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14918 363E           8B46         12            mov	ax,$12[bp]
14919 3641           88E0                       mov	al,ah
14920 3643           30E4                       xor	ah,ah
14921                                           ! 1608   {
14922 3645           E9         0426            br 	.3
14923                                           ! 1609    case 0x00:
14924                                           ! 1610      biosfn_set_video_mode(( AX & 0x00ff ));
14925                       00003648            .4:
14926                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14927 3648           8A46         12            mov	al,$12[bp]
14928                                           ! Debug: list unsigned char = al+0 (used reg = )
14929 364B           30E4                       xor	ah,ah
14930 364D           50                         push	ax
14931                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
14932 364E           E8         046C            call	_biosfn_set_video_mode
14933 3651           44                         inc	sp
14934 3652           44                         inc	sp
14935                                           !BCC_EOS
14936                                           ! 1611      switch(( AX & 0x00ff )&0x7F)
14937                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14938 3653           8A46         12            mov	al,$12[bp]
14939                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
14940 3656           24                     7F  and	al,*$7F
14941                                           ! 1612       {case 6:
14942 3658           EB           24            jmp .7
14943                                           ! 1613         AX = ((AX & 0xff00) | (0x3F));
14944                       0000365A            .8:
14945                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14946 365A           8B46         12            mov	ax,$12[bp]
14947 365D           30C0                       xor	al,al
14948                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
14949 365F           0C                     3F  or	al,*$3F
14950                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14951 3661           8946         12            mov	$12[bp],ax
14952                                           !BCC_EOS
14953                                           ! 1614         break;
14954 3664           EB           3D            jmp .5
14955                                           !BCC_EOS
14956                                           ! 1615        case 0:
14957                                           ! 1616        case 1:
14958                       00003666            .9:
14959                                           ! 1617        case 2:
14960                       00003666            .A:
14961                                           ! 1618        case 3:
14962                       00003666            .B:
14963                                           ! 1619        case 4:
14964                       00003666            .C:
14965                                           ! 1620        case 5:
14966                       00003666            .D:
14967                                           ! 1621        case 7:
14968                       00003666            .E:
14969                                           ! 1622         AX = ((AX & 0xff00) | (0x30));
14970                       00003666            .F:
14971                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14972 3666           8B46         12            mov	ax,$12[bp]
14973 3669           30C0                       xor	al,al
14974                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
14975 366B           0C                     30  or	al,*$30
14976                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14977 366D           8946         12            mov	$12[bp],ax
14978                                           !BCC_EOS
14979                                           ! 1623         break;
14980 3670           EB           31            jmp .5
14981                                           !BCC_EOS
14982                                           ! 1624       default:
14983                                           ! 1625         AX = ((AX & 0xff00) | (0x20));
14984                       00003672            .10:
14985                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14986 3672           8B46         12            mov	ax,$12[bp]
14987 3675           30C0                       xor	al,al
14988                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
14989 3677           0C                     20  or	al,*$20
14990                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14991 3679           8946         12            mov	$12[bp],ax
14992                                           !BCC_EOS
14993                                           ! 1626       }
14994                                           ! 1627      break;
14995 367C           EB           25            jmp .5
14996                       0000367E            .7:
14997 367E           2C                     00  sub	al,*0
14998 3680           72           F0            jb 	.10
14999 3682           3C                     07  cmp	al,*7
15000 3684           77           1B            ja  	.11
15001 3686           30E4                       xor	ah,ah
15002 3688           D1E0                       shl	ax,*1
15003 368A           89C3                       mov	bx,ax
15004 368C           2E                         seg	cs
15005 368D           FFA7       3691            br	.12[bx]
15006                       00003691            .12:
15007 3691                      3666            .word	.9
15008 3693                      3666            .word	.A
15009 3695                      3666            .word	.B
15010 3697                      3666            .word	.C
15011 3699                      3666            .word	.D
15012 369B                      3666            .word	.E
15013 369D                      365A            .word	.8
15014 369F                      3666            .word	.F
15015                       000036A1            .11:
15016 36A1           EB           CF            jmp	.10
15017                       000036A3            .5:
15018 36A3           E9         0415            br 	.1
15019                                           !BCC_EOS
15020                                           ! 1628    case 0x01:
15021                                           ! 1629      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15022                       000036A6            .13:
15023                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15024 36A6           8A46         10            mov	al,$10[bp]
15025                                           ! Debug: list unsigned char = al+0 (used reg = )
15026 36A9           30E4                       xor	ah,ah
15027 36AB           50                         push	ax
15028                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15029 36AC           8B46         10            mov	ax,$10[bp]
15030 36AF           88E0                       mov	al,ah
15031 36B1           30E4                       xor	ah,ah
15032                                           ! Debug: list unsigned int = ax+0 (used reg = )
15033 36B3           50                         push	ax
15034                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15035 36B4           E8         0A8E            call	_biosfn_set_cursor_shape
15036 36B7           83C4                   04  add	sp,*4
15037                                           !BCC_EOS
15038                                           ! 1630      break;
15039 36BA           E9         03FE            br 	.1
15040                                           !BCC_EOS
15041                                           ! 1631    case 0x02:
15042                                           ! 1632      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15043                       000036BD            .14:
15044                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15045 36BD           FF76         0E            push	$E[bp]
15046                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15047 36C0           8B46         0C            mov	ax,$C[bp]
15048 36C3           88E0                       mov	al,ah
15049 36C5           30E4                       xor	ah,ah
15050                                           ! Debug: list unsigned int = ax+0 (used reg = )
15051 36C7           50                         push	ax
15052                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15053 36C8           E8         0B95            call	_biosfn_set_cursor_pos
15054 36CB           83C4                   04  add	sp,*4
15055                                           !BCC_EOS
15056                                           ! 1633      break;
15057 36CE           E9         03EA            br 	.1
15058                                           !BCC_EOS
15059                                           ! 1634    case 0x03:
15060                                           ! 1635      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15061                       000036D1            .15:
15062                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15063 36D1           8D5E         0E            lea	bx,$E[bp]
15064 36D4           53                         push	bx
15065                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15066 36D5           8D5E         10            lea	bx,$10[bp]
15067 36D8           53                         push	bx
15068                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15069 36D9           8B46         0C            mov	ax,$C[bp]
15070 36DC           88E0                       mov	al,ah
15071 36DE           30E4                       xor	ah,ah
15072                                           ! Debug: list unsigned int = ax+0 (used reg = )
15073 36E0           50                         push	ax
15074                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15075 36E1           E8         0C7C            call	_biosfn_get_cursor_pos
15076 36E4           83C4                   06  add	sp,*6
15077                                           !BCC_EOS
15078                                           ! 1636      break;
15079 36E7           E9         03D1            br 	.1
15080                                           !BCC_EOS
15081                                           ! 1637    case 0x04:
15082                                           ! 1638      AX=0x00;
15083                       000036EA            .16:
15084                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15085 36EA           31C0                       xor	ax,ax
15086 36EC           8946         12            mov	$12[bp],ax
15087                                           !BCC_EOS
15088                                           ! 1639      BX=0x00;
15089                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15090 36EF           31C0                       xor	ax,ax
15091 36F1           8946         0C            mov	$C[bp],ax
15092                                           !BCC_EOS
15093                                           ! 1640      CX=0x00;
15094                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15095 36F4           31C0                       xor	ax,ax
15096 36F6           8946         10            mov	$10[bp],ax
15097                                           !BCC_EOS
15098                                           ! 1641      DX=0x00;
15099                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15100 36F9           31C0                       xor	ax,ax
15101 36FB           8946         0E            mov	$E[bp],ax
15102                                           !BCC_EOS
15103                                           ! 1642      brea
15104                                           ! 1642 k;
15105 36FE           E9         03BA            br 	.1
15106                                           !BCC_EOS
15107                                           ! 1643    case 0x05:
15108                                           ! 1644      biosfn_set_active_page(( AX & 0x00ff ));
15109                       00003701            .17:
15110                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15111 3701           8A46         12            mov	al,$12[bp]
15112                                           ! Debug: list unsigned char = al+0 (used reg = )
15113 3704           30E4                       xor	ah,ah
15114 3706           50                         push	ax
15115                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15116 3707           E8         0CCB            call	_biosfn_set_active_page
15117 370A           44                         inc	sp
15118 370B           44                         inc	sp
15119                                           !BCC_EOS
15120                                           ! 1645      break;
15121 370C           E9         03AC            br 	.1
15122                                           !BCC_EOS
15123                                           ! 1646    case 0x06:
15124                                           ! 1647      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15125                       0000370F            .18:
15126                                           ! Debug: list int = const 1 (used reg = )
15127 370F           B8                   0001  mov	ax,*1
15128 3712           50                         push	ax
15129                                           ! Debug: list int = const $FF (used reg = )
15130 3713           B8                   00FF  mov	ax,#$FF
15131 3716           50                         push	ax
15132                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15133 3717           8A46         0E            mov	al,$E[bp]
15134                                           ! Debug: list unsigned char = al+0 (used reg = )
15135 371A           30E4                       xor	ah,ah
15136 371C           50                         push	ax
15137                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15138 371D           8B46         0E            mov	ax,$E[bp]
15139 3720           88E0                       mov	al,ah
15140 3722           30E4                       xor	ah,ah
15141                                           ! Debug: list unsigned int = ax+0 (used reg = )
15142 3724           50                         push	ax
15143                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15144 3725           8A46         10            mov	al,$10[bp]
15145                                           ! Debug: list unsigned char = al+0 (used reg = )
15146 3728           30E4                       xor	ah,ah
15147 372A           50                         push	ax
15148                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15149 372B           8B46         10            mov	ax,$10[bp]
15150 372E           88E0                       mov	al,ah
15151 3730           30E4                       xor	ah,ah
15152                                           ! Debug: list unsigned int = ax+0 (used reg = )
15153 3732           50                         push	ax
15154                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15155 3733           8B46         0C            mov	ax,$C[bp]
15156 3736           88E0                       mov	al,ah
15157 3738           30E4                       xor	ah,ah
15158                                           ! Debug: list unsigned int = ax+0 (used reg = )
15159 373A           50                         push	ax
15160                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15161 373B           8A46         12            mov	al,$12[bp]
15162                                           ! Debug: list unsigned char = al+0 (used reg = )
15163 373E           30E4                       xor	ah,ah
15164 3740           50                         push	ax
15165                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15166 3741           E8         1114            call	_biosfn_scroll
15167 3744           83C4                   10  add	sp,*$10
15168                                           !BCC_EOS
15169                                           ! 1648      break;
15170 3747           E9         0371            br 	.1
15171                                           !BCC_EOS
15172                                           ! 1649    case 0x07:
15173                                           ! 1650      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15174                       0000374A            .19:
15175                                           ! Debug: list int = const 0 (used reg = )
15176 374A           31C0                       xor	ax,ax
15177 374C           50                         push	ax
15178                                           ! Debug: list int = const $FF (used reg = )
15179 374D           B8                   00FF  mov	ax,#$FF
15180 3750           50                         push	ax
15181                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15182 3751           8A46         0E            mov	al,$E[bp]
15183                                           ! Debug: list unsigned char = al+0 (used reg = )
15184 3754           30E4                       xor	ah,ah
15185 3756           50                         push	ax
15186                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15187 3757           8B46         0E            mov	ax,$E[bp]
15188 375A           88E0                       mov	al,ah
15189 375C           30E4                       xor	ah,ah
15190                                           ! Debug: list unsigned int = ax+0 (used reg = )
15191 375E           50                         push	ax
15192                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15193 375F           8A46         10            mov	al,$10[bp]
15194                                           ! Debug: list unsigned char = al+0 (used reg = )
15195 3762           30E4                       xor	ah,ah
15196 3764           50                         push	ax
15197                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15198 3765           8B46         10            mov	ax,$10[bp]
15199 3768           88E0                       mov	al,ah
15200 376A           30E4                       xor	ah,ah
15201                                           ! Debug: list unsigned int = ax+0 (used reg = )
15202 376C           50                         push	ax
15203                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15204 376D           8B46         0C            mov	ax,$C[bp]
15205 3770           88E0                       mov	al,ah
15206 3772           30E4                       xor	ah,ah
15207                                           ! Debug: list unsigned int = ax+0 (used reg = )
15208 3774           50                         push	ax
15209                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15210 3775           8A46         12            mov	al,$12[bp]
15211                                           ! Debug: list unsigned char = al+0 (used reg = )
15212 3778           30E4                       xor	ah,ah
15213 377A           50                         push	ax
15214                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15215 377B           E8         10DA            call	_biosfn_scroll
15216 377E           83C4                   10  add	sp,*$10
15217                                           !BCC_EOS
15218                                           ! 1651      break;
15219 3781           E9         0337            br 	.1
15220                                           !BCC_EOS
15221                                           ! 1652    case 0x08:
15222                                           ! 1653      biosfn_read_char_attr(( BX >> 8 ),&AX);
15223                       00003784            .1A:
15224                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15225 3784           8D5E         12            lea	bx,$12[bp]
15226 3787           53                         push	bx
15227                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15228 3788           8B46         0C            mov	ax,$C[bp]
15229 378B           88E0                       mov	al,ah
15230 378D           30E4                       xor	ah,ah
15231                                           ! Debug: list unsigned int = ax+0 (used reg = )
15232 378F           50                         push	ax
15233                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15234 3790           E8         17CB            call	_biosfn_read_char_attr
15235 3793           83C4                   04  add	sp,*4
15236                                           !BCC_EOS
15237                                           ! 1654      break;
15238 3796           E9         0322            br 	.1
15239                                           !BCC_EOS
15240                                           ! 1655    case 0x09:
15241                                           ! 1656      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15242                       00003799            .1B:
15243                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15244 3799           FF76         10            push	$10[bp]
15245                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15246 379C           8A46         0C            mov	al,$C[bp]
15247                                           ! Debug: list unsigned char = al+0 (used reg = )
15248 379F           30E4                       xor	ah,ah
15249 37A1           50                         push	ax
15250                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15251 37A2           8B46         0C            mov	ax,$C[bp]
15252 37A5           88E0                       mov	al,ah
15253 37A7           30E4                       xor	ah,ah
15254                                           ! Debug: list unsigned int = ax+0 (used reg = )
15255 37A9           50                         push	ax
15256                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15257 37AA           8A46         12            mov	al,$12[bp]
15258                                           ! Debug: list unsigned char = al+0 (used reg = )
15259 37AD           30E4                       xor	ah,ah
15260 37AF           50                         push	ax
15261                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15262 37B0           E8         1CF0            call	_biosfn_write_char_attr
15263 37B3           83C4                   08  add	sp,*8
15264                                           !BCC_EOS
15265                                           ! 1657      break;
15266 37B6           E9         0302            br 	.1
15267                                           !BCC_EOS
15268                                           ! 1658    case 0x0A:
15269                                           ! 1659      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15270                       000037B9            .1C:
15271                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15272 37B9           FF76         10            push	$10[bp]
15273                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15274 37BC           8A46         0C            mov	al,$C[bp]
15275                                           ! Debug: list unsigned char = al+0 (used reg = )
15276 37BF           30E4                       xor	ah,ah
15277 37C1           50                         push	ax
15278                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15279 37C2           8B46         0C            mov	ax,$C[bp]
15280 37C5           88E0                       mov	al,ah
15281 37C7           30E4                       xor	ah,ah
15282                                           ! Debug: list unsigned int = ax+0 (used reg = )
15283 37C9           50                         push	ax
15284                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15285 37CA           8A46         12            mov	al,$12[bp]
15286                                           ! Debug: list unsigned char = al+0 (used reg = )
15287 37CD           30E4                       xor	ah,ah
15288 37CF           50                         push	ax
15289                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15290 37D0           E8         1EC4            call	_biosfn_write_char_only
15291 37D3           83C4                   08  add	sp,*8
15292                                           !BCC_EOS
15293                                           ! 1660      break;
15294 37D6           E9         02E2            br 	.1
15295                                           !BCC_EOS
15296                                           ! 1661    case 0x0C:
15297                                           ! 1662      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15298                       000037D9            .1D:
15299                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15300 37D9           FF76         0E            push	$E[bp]
15301                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15302 37DC           FF76         10            push	$10[bp]
15303                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15304 37DF           8A46         12            mov	al,$12[bp]
15305                                           ! Debug: list unsigned char = al+0 (used reg = )
15306 37E2           30E4                       xor	ah,ah
15307 37E4           50                         push	ax
15308                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15309 37E5           8B46         0C            mov	ax,$C[bp]
15310 37E8           88E0                       mov	al,ah
15311 37EA           30E4                       xor	ah,ah
15312                                           ! Debug: list unsigned int = ax+0 (used reg = )
15313 37EC           50                         push	ax
15314                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15315 37ED           E8         2115            call	_biosfn_write_pixel
15316 37F0           83C4                   08  add	sp,*8
15317                                           !BCC_EOS
15318                                           ! 1663      break;
15319 37F3           E9         02C5            br 	.1
15320                                           !BCC_EOS
15321                                           ! 1664    case 0x0D:
15322                                           ! 1665      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15323                       000037F6            .1E:
15324                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15325 37F6           8D5E         12            lea	bx,$12[bp]
15326 37F9           53                         push	bx
15327                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15328 37FA           FF76         0E            push	$E[bp]
15329                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15330 37FD           FF76         10            push	$10[bp]
15331                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15332 3800           8B46         0C            mov	ax,$C[bp]
15333 3803           88E0                       mov	al,ah
15334 3805           30E4                       xor	ah,ah
15335                                           ! Debug: list unsigned int = ax+0 (used reg = )
15336 3807           50                         push	ax
15337                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15338 3808           E8         2396            call	_biosfn_read_pixel
15339 380B           83C4                   08  add	sp,*8
15340                                           !BCC_EOS
15341                                           ! 1666      break;
15342 380E           E9         02AA            br 	.1
15343                                           !BCC_EOS
15344                                           ! 1667    case 0x0E:
15345                                           ! 1668      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15346                       00003811            .1F:
15347                                           ! Debug: list int = const 2 (used reg = )
15348 3811           B8                   0002  mov	ax,*2
15349 3814           50                         push	ax
15350                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15351 3815           8A46         0C            mov	al,$C[bp]
15352                                           ! Debug: list unsigned char = al+0 (used reg = )
15353 3818           30E4                       xor	ah,ah
15354 381A           50                         push	ax
15355                                           ! Debug: list int = const $FF (used reg = )
15356 381B           B8                   00FF  mov	ax,#$FF
15357 381E           50                         push	ax
15358                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15359 381F           8A46         12            mov	al,$12[bp]
15360                                           ! Debug: list unsigned char = al+0 (used reg = )
15361 3822           30E4                       xor	ah,ah
15362 3824           50                         push	ax
15363                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15364 3825           E8         257F            call	_biosfn_write_teletype
15365 3828           83C4                   08  add	sp,*8
15366                                           !BCC_EOS
15367                                           ! 1669      break;
15368 382B           E9         028D            br 	.1
15369                                           !BCC_EOS
15370                                           ! 1670    case 0x10:
15371                                           ! 1671      biosfn_perform_gray_scale_summing(BX,CX);
15372                       0000382E            .20:
15373                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15374 382E           FF76         10            push	$10[bp]
15375                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15376 3831           FF76         0C            push	$C[bp]
15377                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15378 3834           E8         2B66            call	_biosfn_perform_gray_scale_summing
15379 3837           83C4                   04  add	sp,*4
15380                                           !BCC_EOS
15381                                           ! 1672      break;
15382 383A           E9         027E            br 	.1
15383                                           !BCC_EOS
15384                                           ! 1673    case 0x11:
15385                                           ! 1674      switch(( AX & 0x00ff ))
15386                       0000383D            .21:
15387                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15388 383D           8A46         12            mov	al,$12[bp]
15389                                           ! 1675       {
15390 3840           E9         00E1            br 	.24
15391                                           ! 1676        case 0x00:
15392                                           ! 1677        case 0x10:
15393                       00003843            .25:
15394                                           ! 1678         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15395                       00003843            .26:
15396                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15397 3843           8B46         0C            mov	ax,$C[bp]
15398 3846           88E0                       mov	al,ah
15399 3848           30E4                       xor	ah,ah
15400                                           ! Debug: list unsigned int = ax+0 (used reg = )
15401 384A           50                         push	ax
15402                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15403 384B           8A46         0C            mov	al,$C[bp]
15404                                           ! Debug: list unsigned char = al+0 (used reg = )
15405 384E           30E4                       xor	ah,ah
15406 3850           50                         push	ax
15407                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15408 3851           FF76         0E            push	$E[bp]
15409                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15410 3854           FF76         10            push	$10[bp]
15411                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15412 3857           FF76         08            push	8[bp]
15413                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15414 385A           FF76         16            push	$16[bp]
15415                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15416 385D           8A46         12            mov	al,$12[bp]
15417                                           ! Debug: list unsigned char = al+0 (used reg = )
15418 3860           30E4                       xor	ah,ah
15419 3862           50                         push	ax
15420                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15421 3863           E8         2DDE            call	_biosfn_load_text_user_pat
15422 3866           83C4                   0E  add	sp,*$E
15423                                           !BCC_EOS
15424                                           ! 1679         break;
15425 3869           E9         010C            br 	.22
15426                                           !BCC_EOS
15427                                           ! 1680        case 0x01:
15428                                           ! 1681        case 0x11:
15429                       0000386C            .27:
15430                                           ! 1682         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15431                       0000386C            .28:
15432                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15433 386C           8A46         0C            mov	al,$C[bp]
15434                                           ! Debug: list unsigned char = al+0 (used reg = )
15435 386F           30E4                       xor	ah,ah
15436 3871           50                         push	ax
15437                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15438 3872           8A46         12            mov	al,$12[bp]
15439                                           ! Debug: list unsigned char = al+0 (used reg = )
15440 3875           30E4                       xor	ah,ah
15441 3877           50                         push	ax
15442                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15443 3878           E8         2E65            call	_biosfn_load_text_8_14_pat
15444 387B           83C4                   04  add	sp,*4
15445                                           !BCC_EOS
15446                                           ! 1683         break;
15447 387E           E9         00F7            br 	.22
15448                                           !BCC_EOS
15449                                           ! 1684        case 0x02:
15450                                           ! 1685        case 0x12:
15451                       00003881            .29:
15452                                           ! 1686         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15453                       00003881            .2A:
15454                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15455 3881           8A46         0C            mov	al,$C[bp]
15456                                           ! Debug: list unsigned char = al+0 (used reg = )
15457 3884           30E4                       xor	ah,ah
15458 3886           50                         push	ax
15459                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15460 3887           8A46         12            mov	al,$12[bp]
15461                                           ! Debug: list unsigned char = al+0 (used reg = )
15462 388A           30E4                       xor	ah,ah
15463 388C           50                         push	ax
15464                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15465 388D           E8         2EE7            call	_biosfn_load_text_8_8_pat
15466 3890           83C4                   04  add	sp,*4
15467                                           !BCC_EOS
15468                                           ! 1687         break;
15469 3893           E9         00E2            br 	.22
15470                                           !BCC_EOS
15471                                           ! 1688        case 0x04:
15472                                           ! 1689        case 0x14:
15473                       00003896            .2B:
15474                                           ! 1690         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15475                       00003896            .2C:
15476                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15477 3896           8A46         0C            mov	al,$C[bp]
15478                                           ! Debug: list unsigned char = al+0 (used reg = )
15479 3899           30E4                       xor	ah,ah
15480 389B           50                         push	ax
15481                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15482 389C           8A46         12            mov	al,$12[bp]
15483                                           ! Debug: list unsigned char = al+0 (used reg = )
15484 389F           30E4                       xor	ah,ah
15485 38A1           50                         push	ax
15486                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15487 38A2           E8         2F71            call	_biosfn_load_text_8_16_pat
15488 38A5           83C4                   04  add	sp,*4
15489                                           !BCC_EOS
15490                                           ! 1691         break;
15491 38A8           E9         00CD            br 	.22
15492                                           !BCC_EOS
15493                                           ! 1692        case 0x20:
15494                                           ! 1693         biosfn_load_gfx_8_8_chars(ES,BP);
15495                       000038AB            .2D:
15496                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15497 38AB           FF76         08            push	8[bp]
15498                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15499 38AE           FF76         16            push	$16[bp]
15500                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15501 38B1           E8         2FF3            call	_biosfn_load_gfx_8_8_chars
15502 38B4           83C4                   04  add	sp,*4
15503                                           !BCC_EOS
15504                                           ! 1694         break;
15505 38B7           E9         00BE            br 	.22
15506                                           !BCC_EOS
15507                                           ! 1695        case 0x21:
15508                                           ! 1696         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15509                       000038BA            .2E:
15510                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15511 38BA           8A46         0E            mov	al,$E[bp]
15512                                           ! Debug: list unsigned char = al+0 (used reg = )
15513 38BD           30E4                       xor	ah,ah
15514 38BF           50                         push	ax
15515                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15516 38C0           8A46         0C            mov	al,$C[bp]
15517                                           ! Debug: list unsigned char = al+0 (used reg = )
15518 38C3           30E4                       xor	ah,ah
15519 38C5           50                         push	ax
15520                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15521 38C6           FF76         10            push	$10[bp]
15522                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15523 38C9           FF76         08            push	8[bp]
15524                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15525 38CC           FF76         16            push	$16[bp]
15526                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15527 38CF           E8         2FD6            call	_biosfn_load_gfx_user_chars
15528 38D2           83C4                   0A  add	sp,*$A
15529                                           !BCC_EOS
15530                                           ! 1697         break;
15531 38D5           E9         00A0            br 	.22
15532                                           !BCC_EOS
15533                                           ! 1698        case 0x22:
15534                                           ! 1699         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15535                       000038D8            .2F:
15536                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15537 38D8           8A46         0C            mov	al,$C[bp]
15538                                           ! Debug: list unsigned char = al+0 (used reg = )
15539 38DB           30E4                       xor	ah,ah
15540 38DD           50                         push	ax
15541                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15542 38DE           E8         2FC8            call	_biosfn_load_gfx_8_14_chars
15543 38E1           44                         inc	sp
15544 38E2           44                         inc	sp
15545                                           !BCC_EOS
15546                                           ! 1700         break;
15547 38E3           E9         0092            br 	.22
15548                                           !BCC_EOS
15549                                           ! 1701        case 0x23:
15550                                           ! 1702         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15551                       000038E6            .30:
15552                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15553 38E6           8A46         0C            mov	al,$C[bp]
15554                                           ! Debug: list unsigned char = al+0 (used reg = )
15555 38E9           30E4                       xor	ah,ah
15556 38EB           50                         push	ax
15557                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15558 38EC           E8         2FBB            call	_biosfn_load_gfx_8_8_dd_chars
15559 38EF           44                         inc	sp
15560 38F0           44                         inc	sp
15561                                           !BCC_EOS
15562                                           ! 1703         break;
15563 38F1           E9         0084            br 	.22
15564                                           !BCC_EOS
15565                                           ! 1704        case 0x24:
15566                                           ! 1705         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15567                       000038F4            .31:
15568                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15569 38F4           8A46         0C            mov	al,$C[bp]
15570                                           ! Debug: list unsigned char = al+0 (used reg = )
15571 38F7           30E4                       xor	ah,ah
15572 38F9           50                         push	ax
15573                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15574 38FA           E8         2FAE            call	_biosfn_load_gfx_8_16_chars
15575 38FD           44                         inc	sp
15576 38FE           44                         inc	sp
15577                                           !BCC_EOS
15578                                           ! 1706         break;
15579 38FF           E9         0076            br 	.22
15580                                           !BCC_EOS
15581                                           ! 1707        case 0x30:
15582                                           ! 1708         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15583                       00003902            .32:
15584                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15585 3902           8D5E         0E            lea	bx,$E[bp]
15586 3905           53                         push	bx
15587                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15588 3906           8D5E         10            lea	bx,$10[bp]
15589 3909           53                         push	bx
15590                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15591 390A           8D5E         08            lea	bx,8[bp]
15592 390D           53                         push	bx
15593                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15594 390E           8D5E         16            lea	bx,$16[bp]
15595 3911           53                         push	bx
15596                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15597 3912           8B46         0C            mov	ax,$C[bp]
15598 3915           88E0                       mov	al,ah
15599 3917           30E4                       xor	ah,ah
15600                                           ! Debug: list unsigned int = ax+0 (used reg = )
15601 3919           50                         push	ax
15602                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15603 391A           E8         2F8F            call	_biosfn_get_font_info
15604 391D           83C4                   0A  add	sp,*$A
15605                                           !BCC_EOS
15606                                           ! 1709         break;
15607 3920           EB           56            jmp .22
15608                                           !BCC_EOS
15609                                           ! 1710       
15610                                           ! 1710 }
15611                                           ! 1711      break;
15612 3922           EB           54            jmp .22
15613                       00003924            .24:
15614 3924           2C                     00  sub	al,*0
15615 3926         0F84         FF19            beq 	.25
15616 392A           2C                     01  sub	al,*1
15617 392C         0F84         FF3C            beq 	.27
15618 3930           2C                     01  sub	al,*1
15619 3932         0F84         FF4B            beq 	.29
15620 3936           2C                     02  sub	al,*2
15621 3938         0F84         FF5A            beq 	.2B
15622 393C           2C                     0C  sub	al,*$C
15623 393E         0F84         FF01            beq 	.26
15624 3942           2C                     01  sub	al,*1
15625 3944         0F84         FF24            beq 	.28
15626 3948           2C                     01  sub	al,*1
15627 394A         0F84         FF33            beq 	.2A
15628 394E           2C                     02  sub	al,*2
15629 3950         0F84         FF42            beq 	.2C
15630 3954           2C                     0C  sub	al,*$C
15631 3956         0F84         FF51            beq 	.2D
15632 395A           2C                     01  sub	al,*1
15633 395C         0F84         FF5A            beq 	.2E
15634 3960           2C                     01  sub	al,*1
15635 3962         0F84         FF72            beq 	.2F
15636 3966           2C                     01  sub	al,*1
15637 3968         0F84         FF7A            beq 	.30
15638 396C           2C                     01  sub	al,*1
15639 396E         0F84         FF82            beq 	.31
15640 3972           2C                     0C  sub	al,*$C
15641 3974         0F84         FF8A            beq 	.32
15642                       00003978            .22:
15643 3978           E9         0140            br 	.1
15644                                           !BCC_EOS
15645                                           ! 1712    case 0x12:
15646                                           ! 1713      switch(( BX & 0x00ff ))
15647                       0000397B            .33:
15648                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15649 397B           8A46         0C            mov	al,$C[bp]
15650                                           ! 1714       {
15651 397E           EB           3D            jmp .36
15652                                           ! 1715        case 0x20:
15653                                           ! 1716         biosfn_alternate_prtsc();
15654                       00003980            .37:
15655                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15656 3980           E8         3103            call	_biosfn_alternate_prtsc
15657                                           !BCC_EOS
15658                                           ! 1717         break;
15659 3983           EB           44            jmp .34
15660                                           !BCC_EOS
15661                                           ! 1718        case 0x35:
15662                                           ! 1719         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15663                       00003985            .38:
15664                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15665 3985           FF76         0E            push	$E[bp]
15666                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15667 3988           FF76         16            push	$16[bp]
15668                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15669 398B           8A46         12            mov	al,$12[bp]
15670                                           ! Debug: list unsigned char = al+0 (used reg = )
15671 398E           30E4                       xor	ah,ah
15672 3990           50                         push	ax
15673                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15674 3991           E8         31CC            call	_biosfn_switch_video_interface
15675 3994           83C4                   06  add	sp,*6
15676                                           !BCC_EOS
15677                                           ! 1720         AX = ((AX & 0xff00) | (0x12));
15678                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15679 3997           8B46         12            mov	ax,$12[bp]
15680 399A           30C0                       xor	al,al
15681                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15682 399C           0C                     12  or	al,*$12
15683                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15684 399E           8946         12            mov	$12[bp],ax
15685                                           !BCC_EOS
15686                                           ! 1721         break;
15687 39A1           EB           26            jmp .34
15688                                           !BCC_EOS
15689                                           ! 1722        case 0x36:
15690                                           ! 1723         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15691                       000039A3            .39:
15692                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15693 39A3           8A46         12            mov	al,$12[bp]
15694                                           ! Debug: list unsigned char = al+0 (used reg = )
15695 39A6           30E4                       xor	ah,ah
15696 39A8           50                         push	ax
15697                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15698 39A9           E8         31B5            call	_biosfn_enable_video_refresh_control
15699 39AC           44                         inc	sp
15700 39AD           44                         inc	sp
15701                                           !BCC_EOS
15702                                           ! 1724         AX = ((AX & 0xff00) | (0x12));
15703                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15704 39AE           8B46         12            mov	ax,$12[bp]
15705 39B1           30C0                       xor	al,al
15706                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15707 39B3           0C                     12  or	al,*$12
15708                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15709 39B5           8946         12            mov	$12[bp],ax
15710                                           !BCC_EOS
15711                                           ! 1725         break;
15712 39B8           EB           0F            jmp .34
15713                                           !BCC_EOS
15714                                           ! 1726       }
15715                                           ! 1727      break;
15716 39BA           E9         000C            br 	.34
15717                       000039BD            .36:
15718 39BD           2C                     20  sub	al,*$20
15719 39BF           74           BF            je 	.37
15720 39C1           2C                     15  sub	al,*$15
15721 39C3           74           C0            je 	.38
15722 39C5           2C                     01  sub	al,*1
15723 39C7           74           DA            je 	.39
15724                       000039C9            .34:
15725 39C9           E9         00EF            br 	.1
15726                                           !BCC_EOS
15727                                           ! 1728    case 0x13:
15728                                           ! 1729      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15729                       000039CC            .3A:
15730                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15731 39CC           FF76         08            push	8[bp]
15732                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15733 39CF           FF76         16            push	$16[bp]
15734                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15735 39D2           8A46         0E            mov	al,$E[bp]
15736                                           ! Debug: list unsigned char = al+0 (used reg = )
15737 39D5           30E4                       xor	ah,ah
15738 39D7           50                         push	ax
15739                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15740 39D8           8B46         0E            mov	ax,$E[bp]
15741 39DB           88E0                       mov	al,ah
15742 39DD           30E4                       xor	ah,ah
15743                                           ! Debug: list unsigned int = ax+0 (used reg = )
15744 39DF           50                         push	ax
15745                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
15746 39E0           FF76         10            push	$10[bp]
15747                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
15748 39E3           8A46         0C            mov	al,$C[bp]
15749                                           ! Debug: list unsigned char = al+0 (used reg = )
15750 39E6           30E4                       xor	ah,ah
15751 39E8           50                         push	ax
15752                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15753 39E9           8B46         0C            mov	ax,$C[bp]
15754 39EC           88E0                       mov	al,ah
15755 39EE           30E4                       xor	ah,ah
15756                                           ! Debug: list unsigned int = ax+0 (used reg = )
15757 39F0           50                         push	ax
15758                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15759 39F1           8A46         12            mov	al,$12[bp]
15760                                           ! Debug: list unsigned char = al+0 (used reg = )
15761 39F4           30E4                       xor	ah,ah
15762 39F6           50                         push	ax
15763                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
15764 39F7           E8         3168            call	_biosfn_write_string
15765 39FA           83C4                   10  add	sp,*$10
15766                                           !BCC_EOS
15767                                           ! 1730      break;
15768 39FD           E9         00BB            br 	.1
15769                                           !BCC_EOS
15770                                           ! 1731    case 0x1B:
15771                                           ! 1732      biosfn_read_state_info(BX,ES,DI);
15772                       00003A00            .3B:
15773                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
15774 3A00           FF76         04            push	4[bp]
15775                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15776 3A03           FF76         16            push	$16[bp]
15777                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15778 3A06           FF76         0C            push	$C[bp]
15779                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
15780 3A09           E8         3262            call	_biosfn_read_state_info
15781 3A0C           83C4                   06  add	sp,*6
15782                                           !BCC_EOS
15783                                           ! 1733      AX = ((AX & 0xff00) | (0x1B));
15784                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15785 3A0F           8B46         12            mov	ax,$12[bp]
15786 3A12           30C0                       xor	al,al
15787                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
15788 3A14           0C                     1B  or	al,*$1B
15789                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15790 3A16           8946         12            mov	$12[bp],ax
15791                                           !BCC_EOS
15792                                           ! 1734      break;
15793 3A19           E9         009F            br 	.1
15794                                           !BCC_EOS
15795                                           ! 1735    case 0x1C:
15796                                           ! 1736      switch(( AX & 0x00ff ))
15797                       00003A1C            .3C:
15798                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15799 3A1C           8A46         12            mov	al,$12[bp]
15800                                           ! 1737       {
15801 3A1F           EB           33            jmp .3F
15802                                           ! 1738        case 0x00:
15803                                           ! 1739         biosfn_read_video_state_size(CX,&BX);
15804                       00003A21            .40:
15805                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
15806 3A21           8D5E         0C            lea	bx,$C[bp]
15807 3A24           53                         push	bx
15808                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15809 3A25           FF76         10            push	$10[bp]
15810                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
15811 3A28           E8         33C2            call	_biosfn_read_video_state_size
15812 3A2B           83C4                   04  add	sp,*4
15813                                           !BCC_EOS
15814                                           ! 1740         break;
15815 3A2E           EB           30            jmp .3D
15816                                           !BCC_EOS
15817                                           ! 1741        case 0x01:
15818                                           ! 1742         biosfn_save_video_state(CX,ES,BX);
15819                       00003A30            .41:
15820                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15821 3A30           FF76         0C            push	$C[bp]
15822                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15823 3A33           FF76         16            push	$16[bp]
15824                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15825 3A36           FF76         10            push	$10[bp]
15826                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
15827 3A39           E8         33D5            call	_biosfn_save_video_state
15828 3A3C           83C4                   06  add	sp,*6
15829                                           !BCC_EOS
15830                                           ! 1743         break;
15831 3A3F           EB           1F            jmp .3D
15832                                           !BCC_EOS
15833                                           ! 1744        case 0x02:
15834                                           ! 1745         biosfn_restore_video_state(CX,ES,BX);
15835                       00003A41            .42:
15836                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15837 3A41           FF76         0C            push	$C[bp]
15838                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15839 3A44           FF76         16            push	$16[bp]
15840                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15841 3A47           FF76         10            push	$10[bp]
15842                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
15843 3A4A           E8         398E            call	_biosfn_restore_video_state
15844 3A4D           83C4                   06  add	sp,*6
15845                                           !BCC_EOS
15846                                           ! 1746         break;
15847 3A50           EB           0E            jmp .3D
15848                                           !BCC_EOS
15849                                           ! 1747       }
15850                                           ! 1748      AX = ((AX & 0xff00) | (0x1C));
15851 3A52           EB           0C            jmp .3D
15852                       00003A54            .3F:
15853 3A54           2C                     00  sub	al,*0
15854 3A56           74           C9            je 	.40
15855 3A58           2C                     01  sub	al,*1
15856 3A5A           74           D4            je 	.41
15857 3A5C           2C                     01  sub	al,*1
15858 3A5E           74           E1            je 	.42
15859                       00003A60            .3D:
15860                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15861 3A60           8B46         12            mov	ax,$12[bp]
15862 3A63           30C0                       xor	al,al
15863                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
15864 3A65           0C                     1C  or	al,*$1C
15865                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15866 3A67           8946         12            mov	$12[bp],ax
15867                                           !BCC_EOS
15868                                           ! 1749      break;
15869 3A6A           EB           4F            jmp .1
15870                                           !BCC_EOS
15871                                           ! 1750   }
15872                                           ! 1751 }
15873 3A6C           EB           4D            jmp .1
15874                       00003A6E            .3:
15875 3A6E           2D                   0000  sub	ax,*0
15876 3A71           7C           48            jl  	.1
15877 3A73           3D                   001C  cmp	ax,*$1C
15878 3A76           77           43            ja  	.43
15879 3A78           D1E0                       shl	ax,*1
15880 3A7A           89C3                       mov	bx,ax
15881 3A7C           2E                         seg	cs
15882 3A7D           FFA7       3A81            br	.44[bx]
15883                       00003A81            .44:
15884 3A81                      3648            .word	.4
15885 3A83                      36A6            .word	.13
15886 3A85                      36BD            .word	.14
15887 3A87                      36D1            .word	.15
15888 3A89                      36EA            .word	.16
15889 3A8B                      3701            .word	.17
15890 3A8D                      370F            .word	.18
15891 3A8F                      374A            .word	.19
15892 3A91                      3784            .word	.1A
15893 3A93                      3799            .word	.1B
15894 3A95                      37B9            .word	.1C
15895 3A97                      3ABB            .word	.1
15896 3A99                      37D9            .word	.1D
15897 3A9B                      37F6            .word	.1E
15898 3A9D                      3811            .word	.1F
15899 3A9F                      3ABB            .word	.1
15900 3AA1                      382E            .word	.20
15901 3AA3                      383D            .word	.21
15902 3AA5                      397B            .word	.33
15903 3AA7                      39CC            .word	.3A
15904 3AA9                      3ABB            .word	.1
15905 3AAB                      3ABB            .word	.1
15906 3AAD                      3ABB            .word	.1
15907 3AAF                      3ABB            .word	.1
15908 3AB1                      3ABB            .word	.1
15909 3AB3                      3ABB            .word	.1
15910 3AB5                      3ABB            .word	.1
15911 3AB7                      3A00            .word	.3B
15912 3AB9                      3A1C            .word	.3C
15913                       00003ABB            .43:
15914                       00003ABB            .1:
15915                       FFFFFFFE            ..FFFF	=	-2
15916 3ABB           5D                         pop	bp
15917 3ABC           C3                         ret
15918                                           ! 1752 static void biosfn_set_video_mode(mode) Bit8u mode;
15919                                           ! Register BX used in function int10_func
15920                       00003ABD            _biosfn_set_video_mode:
15921                                           !BCC_EOS
15922                                           ! 1753 {
15923                                           ! 1754  Bit8u noclearmem=mode&0x80;
15924 3ABD           55                         push	bp
15925 3ABE           89E5                       mov	bp,sp
15926 3AC0           4C                         dec	sp
15927                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
15928 3AC1           8A46         04            mov	al,4[bp]
15929 3AC4           24                     80  and	al,#$80
15930                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
15931 3AC6           8846         FF            mov	-1[bp],al
15932                                           !BCC_EOS
15933                                           ! 1755  Bit8u line,mmask,*palette,vpti;
15934                                           !BCC_EOS
15935                                           ! 1756  Bit16u i,twidth,theightm1,cheight;
15936                                           !BCC_EOS
15937                                           ! 1757  Bit8u modeset_ctl,video_ctl,vga_switches;
15938                                           !BCC_EOS
15939                                           ! 1758  Bit16u crtc_addr;
15940                                           !BCC_EOS
15941                                           ! 1759  mode=mode&0x7f;
15942 3AC9           83C4                   EB  add	sp,*-$15
15943                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
15944 3ACC           8A46         04            mov	al,4[bp]
15945 3ACF           24                     7F  and	al,*$7F
15946                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
15947 3AD1           8846         04            mov	4[bp],al
15948                                           !BCC_EOS
15949                                           ! 1760  line=find_vga_entry(mode);
15950                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
15951 3AD4           8A46         04            mov	al,4[bp]
15952 3AD7           30E4                       xor	ah,ah
15953 3AD9           50                         push	ax
15954                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
15955 3ADA           E8         3EDC            call	_find_vga_entry
15956 3ADD           44                         inc	sp
15957 3ADE           44                         inc	sp
15958                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
15959 3ADF           8846         FE            mov	-2[bp],al
15960                                           !BCC_EOS
15961                                           ! 1761  if(line==0xFF)
15962                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
15963 3AE2           8A46         FE            mov	al,-2[bp]
15964 3AE5           3C                     FF  cmp	al,#$FF
15965 3AE7           75           04            jne 	.45
15966                       00003AE9            .46:
15967                                           ! 1762   return;
15968 3AE9           89EC                       mov	sp,bp
15969 3AEB           5D                         pop	bp
15970 3AEC           C3                         ret
15971                                           !BCC_EOS
15972                                           ! 1763  vpti=line_to_vpti[line];
15973                       00003AED            .45:
15974                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
15975 3AED           8A46         FE            mov	al,-2[bp]
15976 3AF0           30E4                       xor	ah,ah
15977 3AF2           89C3                       mov	bx,ax
15978                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
15979 3AF4           8A87       025C            mov	al,_line_to_vpti[bx]
15980 3AF8           8846         F9            mov	-7[bp],al
15981                                           !BCC_EOS
15982                                           ! 1764  twidth=video_param_table[vpti].twidth;
15983                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15984 3AFB           8A46         F9            mov	al,-7[bp]
15985 3AFE           30E4                       xor	ah,ah
15986 3B00           B1                     06  mov	cl,*6
15987 3B02           D3E0                       shl	ax,cl
15988 3B04           89C3                       mov	bx,ax
15989                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
15990 3B06           8A87       0270            mov	al,_video_param_table[bx]
15991 3B0A           30E4                       xor	ah,ah
15992 3B0C           8946         F4            mov	-$C[bp],ax
15993                                           !BCC_EOS
15994                                           ! 1765  theightm1=video_param_table[vpti].theightm1;
15995                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15996 3B0F           8A46         F9            mov	al,-7[bp]
15997 3B12           30E4                       xor	ah,ah
15998 3B14           B1                     06  mov	cl,*6
15999 3B16           D3E0                       shl	ax,cl
16000 3B18           89C3                       mov	bx,ax
16001 3B1A           81C3                 0270  add	bx,#_video_param_table
16002                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16003 3B1E           8A47         01            mov	al,1[bx]
16004 3B21           30E4                       xor	ah,ah
16005 3B23           8946         F2            mov	-$E[bp],ax
16006                                           !BCC_EOS
16007                                           ! 1766  cheight=video_param_table[vpti].cheight;
16008                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16009 3B26           8A46         F9            mov	al,-7[bp]
16010 3B29           30E4                       xor	ah,ah
16011 3B2B           B1                     06  mov	cl,*6
16012 3B2D           D3E0                       shl	ax,cl
16013 3B2F           89C3                       mov	bx,ax
16014 3B31           81C3                 0270  add	bx,#_video_param_table
16015                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16016 3B35           8A47         02            mov	al,2[bx]
16017 3B38           30E4                       xor	ah,ah
16018 3B3A           8946         F0            mov	-$10[bp],ax
16019                                           !BCC_EOS
16020                                           ! 1767  video_ctl=read_byte(0x40,0x87);
16021                                           ! Debug: list int = const $87 (used reg = )
16022 3B3D           B8                   0087  mov	ax,#$87
16023 3B40           50                         push	ax
16024                                           ! Debug: list int = const $40 (used reg = )
16025 3B41           B8                   0040  mov	ax,*$40
16026 3B44           50                         push	ax
16027                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16028 3B45           E8         3F5D            call	_read_byte
16029 3B48           83C4                   04  add	sp,*4
16030                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16031 3B4B           8846         EE            mov	-$12[bp],al
16032                                           !BCC_EOS
16033                                           ! 1768  vga_switches=read_byte(0x40,0x88);
16034                                           ! Debug: list int = const $88 (used reg = )
16035 3B4E           B8                   0088  mov	ax,#$88
16036 3B51           50                         push	ax
16037                                           ! Debug: list int = const $40 (used reg = )
16038 3B52           B8                   0040  mov	ax,*$40
16039 3B55           50                         push	ax
16040                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16041 3B56           E8         3F4C            call	_read_byte
16042 3B59           83C4                   04  add	sp,*4
16043                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16044 3B5C           8846         ED            mov	-$13[bp],al
16045                                           !BCC_EOS
16046                                           ! 1769  modeset_ctl=read_byte(0x40,0x89);
16047                                           ! Debug: list int = const $89 (used reg = )
16048 3B5F           B8                   0089  mov	ax,#$89
16049 3B62           50                         push	ax
16050                                           ! Debug: list int = const $40 (used reg = )
16051 3B63           B8                   0040  mov	ax,*$40
16052 3B66           50                         push	ax
16053                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16054 3B67           E8         3F3B            call	_read_byte
16055 3B6A           83C4                   04  add	sp,*4
16056                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16057 3B6D           8846         EF            mov	-$11[bp],al
16058                                           !BCC_EOS
16059                                           ! 1770  if((modeset_ctl&0x08)==0)
16060                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16061 3B70           8A46         EF            mov	al,-$11[bp]
16062 3B73           24                     08  and	al,*8
16063                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16064 3B75           84C0                       test	al,al
16065 3B77         0F85         0145            bne 	.47
16066                       00003B7B            .48:
16067                                           ! 1771   {
16068                                           ! 1772    outb(0x3c6,vga_modes[line].pelmask);
16069                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16070 3B7B           8A46         FE            mov	al,-2[bp]
16071 3B7E           30E4                       xor	ah,ah
16072 3B80           B1                     03  mov	cl,*3
16073 3B82           D3E0                       shl	ax,cl
16074 3B84           89C3                       mov	bx,ax
16075 3B86           81C3                 01DC  add	bx,#_vga_modes
16076                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16077 3B8A           8A47         06            mov	al,6[bx]
16078 3B8D           30E4                       xor	ah,ah
16079 3B8F           50                         push	ax
16080                                           ! Debug: list int = const $3C6 (used reg = )
16081 3B90           B8                   03C6  mov	ax,#$3C6
16082 3B93           50                         push	ax
16083                                           ! Debug: func () void = outb+0 (used reg = )
16084 3B94           E8         3F7A            call	_outb
16085 3B97           83C4                   04  add	sp,*4
16086                                           !BCC_EOS
16087                                           ! 1773    outb(0x3c8,0x00);
16088                                           ! Debug: list int = const 0 (used reg = )
16089 3B9A           31C0                       xor	ax,ax
16090 3B9C           50                         push	ax
16091                                           ! Debug: list int = const $3C8 (used reg = )
16092 3B9D           B8                   03C8  mov	ax,#$3C8
16093 3BA0           50                         push	ax
16094                                           ! Debug: func () void = outb+0 (used reg = )
16095 3BA1           E8         3F6D            call	_outb
16096 3BA4           83C4                   04  add	sp,*4
16097                                           !BCC_EOS
16098                                           ! 1774    switch(vga_modes[line].dacmodel)
16099                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16100 3BA7           8A46         FE            mov	al,-2[bp]
16101 3BAA           30E4                       xor	ah,ah
16102 3BAC           B1                     03  mov	cl,*3
16103 3BAE           D3E0                       shl	ax,cl
16104 3BB0           89C3                       mov	bx,ax
16105 3BB2           81C3                 01DC  add	bx,#_vga_modes
16106 3BB6           8A47         07            mov	al,7[bx]
16107                                           ! 1775     {case 0:
16108 3BB9           EB           22            jmp .4B
16109                                           ! 1776       palette=&palette0;
16110                       00003BBB            .4C:
16111                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16112 3BBB           BB                   09F0  mov	bx,#_palette0
16113 3BBE           895E         FA            mov	-6[bp],bx
16114                                           !BCC_EOS
16115                                           ! 1777       break;
16116 3BC1           EB           2A            jmp .49
16117                                           !BCC_EOS
16118                                           ! 1778      case 1:
16119                                           ! 1779       palette=&palette1;
16120                       00003BC3            .4D:
16121                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16122 3BC3           BB                   0AB0  mov	bx,#_palette1
16123 3BC6           895E         FA            mov	-6[bp],bx
16124                                           !BCC_EOS
16125                                           ! 1780       break;
16126 3BC9           EB           22            jmp .49
16127                                           !BCC_EOS
16128                                           ! 1781      case 2:
16129                                           ! 1782       palette=&palette2;
16130                       00003BCB            .4E:
16131                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16132 3BCB           BB                   0B70  mov	bx,#_palette2
16133 3BCE           895E         FA            mov	-6[bp],bx
16134                                           !BCC_EOS
16135                                           ! 1783       break;
16136 3BD1           EB           1A            jmp .49
16137                                           !BCC_EOS
16138                                           ! 1784      case 3:
16139                                           ! 1785       palette=&palette3;
16140                       00003BD3            .4F:
16141                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16142 3BD3           BB                   0C30  mov	bx,#_palette3
16143 3BD6           895E         FA            mov	-6[bp],bx
16144                                           !BCC_EOS
16145                                           ! 1786       break;
16146 3BD9           EB           12            jmp .49
16147                                           !BCC_EOS
16148                                           ! 1787     }
16149                                           ! 1788    for(i=0;i<0x0100;i++)
16150 3BDB           EB           10            jmp .49
16151                       00003BDD            .4B:
16152 3BDD           2C                     00  sub	al,*0
16153 3BDF           74           DA            je 	.4C
16154 3BE1           2C                     01  sub	al,*1
16155 3BE3           74           DE            je 	.4D
16156 3BE5           2C                     01  sub	al,*1
16157 3BE7           74           E2            je 	.4E
16158 3BE9           2C                     01  sub	al,*1
16159 3BEB           74           E6            je 	.4F
16160                       00003BED            .49:
16161                       FFFFFFE8            ..FFFE	=	-$18
16162                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16163 3BED           31C0                       xor	ax,ax
16164 3BEF           8946         F6            mov	-$A[bp],ax
16165                                           !BCC_EOS
16166                                           !BCC_EOS
16167                                           ! 1789     {if(i<=dac_regs[vga_modes[line].dacmodel])
16168 3BF2           E9         00AB            br 	.52
16169                       00003BF5            .53:
16170                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16171 3BF5           8A46         FE            mov	al,-2[bp]
16172 3BF8           30E4                       xor	ah,ah
16173 3BFA           B1                     03  mov	cl,*3
16174 3BFC           D3E0                       shl	ax,cl
16175 3BFE           89C3                       mov	bx,ax
16176 3C00           81C3                 01DC  add	bx,#_vga_modes
16177                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16178 3C04           8A47         07            mov	al,7[bx]
16179 3C07           30E4                       xor	ah,ah
16180 3C09           89C3                       mov	bx,ax
16181                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16182 3C0B           8A87       026C            mov	al,_dac_regs[bx]
16183 3C0F           30E4                       xor	ah,ah
16184 3C11           3B46         F6            cmp	ax,-$A[bp]
16185 3C14           72           5C            jb  	.54
16186                       00003C16            .55:
16187                                           ! 1790       {outb(0x3c9,palette[(i*3)+0]);
16188                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16189 3C16           8B46         F6            mov	ax,-$A[bp]
16190 3C19           89C2                       mov	dx,ax
16191 3C1B           D1E0                       shl	ax,*1
16192 3C1D           01D0                       add	ax,dx
16193                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16194                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16195 3C1F           0346         FA            add	ax,-6[bp]
16196 3C22           89C3                       mov	bx,ax
16197                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16198 3C24           8A07                       mov	al,[bx]
16199 3C26           30E4                       xor	ah,ah
16200 3C28           50                         push	ax
16201                                           ! Debug: list int = const $3C9 (used reg = )
16202 3C29           B8                   03C9  mov	ax,#$3C9
16203 3C2C           50                         push	ax
16204                                           ! Debug: func () void = outb+0 (used reg = )
16205 3C2D           E8         3EE1            call	_outb
16206 3C30           83C4                   04  add	sp,*4
16207                                           !BCC_EOS
16208                                           ! 1791        outb(0x3c9,palette[(i*3)+1]);
16209                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16210 3C33           8B46         F6            mov	ax,-$A[bp]
16211 3C36           89C2                       mov	dx,ax
16212 3C38           D1E0                       shl	ax,*1
16213 3C3A           01D0                       add	ax,dx
16214                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16215                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16216 3C3C           40                         inc	ax
16217 3C3D           0346         FA            add	ax,-6[bp]
16218 3C40           89C3                       mov	bx,ax
16219                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16220 3C42           8A07                       mov	al,[bx]
16221 3C44           30E4                       xor	ah,ah
16222 3C46           50                         push	ax
16223                                           ! Debug: list int = const $3C9 (used reg = )
16224 3C47           B8                   03C9  mov	ax,#$3C9
16225 3C4A           50                         push	ax
16226                                           ! Debug: func () void = outb+0 (used reg = )
16227 3C4B           E8         3EC3            call	_outb
16228 3C4E           83C4                   04  add	sp,*4
16229                                           !BCC_EOS
16230                                           ! 1792        outb(0x3c9,p
16231                                           ! 1792 alette[(i*3)+2]);
16232                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16233 3C51           8B46         F6            mov	ax,-$A[bp]
16234 3C54           89C2                       mov	dx,ax
16235 3C56           D1E0                       shl	ax,*1
16236 3C58           01D0                       add	ax,dx
16237                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16238                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16239 3C5A           40                         inc	ax
16240 3C5B           40                         inc	ax
16241 3C5C           0346         FA            add	ax,-6[bp]
16242 3C5F           89C3                       mov	bx,ax
16243                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16244 3C61           8A07                       mov	al,[bx]
16245 3C63           30E4                       xor	ah,ah
16246 3C65           50                         push	ax
16247                                           ! Debug: list int = const $3C9 (used reg = )
16248 3C66           B8                   03C9  mov	ax,#$3C9
16249 3C69           50                         push	ax
16250                                           ! Debug: func () void = outb+0 (used reg = )
16251 3C6A           E8         3EA4            call	_outb
16252 3C6D           83C4                   04  add	sp,*4
16253                                           !BCC_EOS
16254                                           ! 1793       }
16255                                           ! 1794      else
16256                                           ! 1795       {outb(0x3c9,0);
16257 3C70           EB           27            jmp .56
16258                       00003C72            .54:
16259                                           ! Debug: list int = const 0 (used reg = )
16260 3C72           31C0                       xor	ax,ax
16261 3C74           50                         push	ax
16262                                           ! Debug: list int = const $3C9 (used reg = )
16263 3C75           B8                   03C9  mov	ax,#$3C9
16264 3C78           50                         push	ax
16265                                           ! Debug: func () void = outb+0 (used reg = )
16266 3C79           E8         3E95            call	_outb
16267 3C7C           83C4                   04  add	sp,*4
16268                                           !BCC_EOS
16269                                           ! 1796        outb(0x3c9,0);
16270                                           ! Debug: list int = const 0 (used reg = )
16271 3C7F           31C0                       xor	ax,ax
16272 3C81           50                         push	ax
16273                                           ! Debug: list int = const $3C9 (used reg = )
16274 3C82           B8                   03C9  mov	ax,#$3C9
16275 3C85           50                         push	ax
16276                                           ! Debug: func () void = outb+0 (used reg = )
16277 3C86           E8         3E88            call	_outb
16278 3C89           83C4                   04  add	sp,*4
16279                                           !BCC_EOS
16280                                           ! 1797        outb(0x3c9,0);
16281                                           ! Debug: list int = const 0 (used reg = )
16282 3C8C           31C0                       xor	ax,ax
16283 3C8E           50                         push	ax
16284                                           ! Debug: list int = const $3C9 (used reg = )
16285 3C8F           B8                   03C9  mov	ax,#$3C9
16286 3C92           50                         push	ax
16287                                           ! Debug: func () void = outb+0 (used reg = )
16288 3C93           E8         3E7B            call	_outb
16289 3C96           83C4                   04  add	sp,*4
16290                                           !BCC_EOS
16291                                           ! 1798       }
16292                                           ! 1799     }
16293                       00003C99            .56:
16294                                           ! 1800    if((modeset_ctl&0x02)==0x02)
16295                       00003C99            .51:
16296                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16297 3C99           8B46         F6            mov	ax,-$A[bp]
16298 3C9C           40                         inc	ax
16299 3C9D           8946         F6            mov	-$A[bp],ax
16300                       00003CA0            .52:
16301                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16302 3CA0           8B46         F6            mov	ax,-$A[bp]
16303 3CA3           3D                   0100  cmp	ax,#$100
16304 3CA6         0F82         FF4B            blo 	.53
16305                       00003CAA            .57:
16306                       00003CAA            .50:
16307                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16308 3CAA           8A46         EF            mov	al,-$11[bp]
16309 3CAD           24                     02  and	al,*2
16310                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16311 3CAF           3C                     02  cmp	al,*2
16312 3CB1           75           0D            jne 	.58
16313                       00003CB3            .59:
16314                                           ! 1801     {
16315                                           ! 1802      biosfn_perform_gray_scale_summing(0x00, 0x100);
16316                                           ! Debug: list int = const $100 (used reg = )
16317 3CB3           B8                   0100  mov	ax,#$100
16318 3CB6           50                         push	ax
16319                                           ! Debug: list int = const 0 (used reg = )
16320 3CB7           31C0                       xor	ax,ax
16321 3CB9           50                         push	ax
16322                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16323 3CBA           E8         26E0            call	_biosfn_perform_gray_scale_summing
16324 3CBD           83C4                   04  add	sp,*4
16325                                           !BCC_EOS
16326                                           ! 1803     }
16327                                           ! 1804   }
16328                       00003CC0            .58:
16329                                           ! 1805  inb(0x3da);
16330                       00003CC0            .47:
16331                                           ! Debug: list int = const $3DA (used reg = )
16332 3CC0           B8                   03DA  mov	ax,#$3DA
16333 3CC3           50                         push	ax
16334                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16335 3CC4           E8         3E34            call	_inb
16336 3CC7           44                         inc	sp
16337 3CC8           44                         inc	sp
16338                                           !BCC_EOS
16339                                           ! 1806  for(i=0;i<=0x13;i++)
16340                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16341 3CC9           31C0                       xor	ax,ax
16342 3CCB           8946         F6            mov	-$A[bp],ax
16343                                           !BCC_EOS
16344                                           !BCC_EOS
16345                                           ! 1807   {outb(0x3c0,i);
16346 3CCE           EB           38            jmp .5C
16347                       00003CD0            .5D:
16348                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16349 3CD0           FF76         F6            push	-$A[bp]
16350                                           ! Debug: list int = const $3C0 (used reg = )
16351 3CD3           B8                   03C0  mov	ax,#$3C0
16352 3CD6           50                         push	ax
16353                                           ! Debug: func () void = outb+0 (used reg = )
16354 3CD7           E8         3E37            call	_outb
16355 3CDA           83C4                   04  add	sp,*4
16356                                           !BCC_EOS
16357                                           ! 1808    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16358                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16359 3CDD           8A46         F9            mov	al,-7[bp]
16360 3CE0           30E4                       xor	ah,ah
16361 3CE2           B1                     06  mov	cl,*6
16362 3CE4           D3E0                       shl	ax,cl
16363 3CE6           89C3                       mov	bx,ax
16364 3CE8           81C3                 0270  add	bx,#_video_param_table
16365                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16366 3CEC           8B46         F6            mov	ax,-$A[bp]
16367 3CEF           01C3                       add	bx,ax
16368                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16369 3CF1           8A47         23            mov	al,$23[bx]
16370 3CF4           30E4                       xor	ah,ah
16371 3CF6           50                         push	ax
16372                                           ! Debug: list int = const $3C0 (used reg = )
16373 3CF7           B8                   03C0  mov	ax,#$3C0
16374 3CFA           50                         push	ax
16375                                           ! Debug: func () void = outb+0 (used reg = )
16376 3CFB           E8         3E13            call	_outb
16377 3CFE           83C4                   04  add	sp,*4
16378                                           !BCC_EOS
16379                                           ! 1809   }
16380                                           ! 1810  outb(0x3c0,0x14);
16381                       00003D01            .5B:
16382                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16383 3D01           8B46         F6            mov	ax,-$A[bp]
16384 3D04           40                         inc	ax
16385 3D05           8946         F6            mov	-$A[bp],ax
16386                       00003D08            .5C:
16387                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16388 3D08           8B46         F6            mov	ax,-$A[bp]
16389 3D0B           3D                   0013  cmp	ax,*$13
16390 3D0E           76           C0            jbe	.5D
16391                       00003D10            .5E:
16392                       00003D10            .5A:
16393                                           ! Debug: list int = const $14 (used reg = )
16394 3D10           B8                   0014  mov	ax,*$14
16395 3D13           50                         push	ax
16396                                           ! Debug: list int = const $3C0 (used reg = )
16397 3D14           B8                   03C0  mov	ax,#$3C0
16398 3D17           50                         push	ax
16399                                           ! Debug: func () void = outb+0 (used reg = )
16400 3D18           E8         3DF6            call	_outb
16401 3D1B           83C4                   04  add	sp,*4
16402                                           !BCC_EOS
16403                                           ! 1811  outb(0x3c0,0x00);
16404                                           ! Debug: list int = const 0 (used reg = )
16405 3D1E           31C0                       xor	ax,ax
16406 3D20           50                         push	ax
16407                                           ! Debug: list int = const $3C0 (used reg = )
16408 3D21           B8                   03C0  mov	ax,#$3C0
16409 3D24           50                         push	ax
16410                                           ! Debug: func () void = outb+0 (used reg = )
16411 3D25           E8         3DE9            call	_outb
16412 3D28           83C4                   04  add	sp,*4
16413                                           !BCC_EOS
16414                                           ! 1812  outb(0x3c4,0);
16415                                           ! Debug: list int = const 0 (used reg = )
16416 3D2B           31C0                       xor	ax,ax
16417 3D2D           50                         push	ax
16418                                           ! Debug: list int = const $3C4 (used reg = )
16419 3D2E           B8                   03C4  mov	ax,#$3C4
16420 3D31           50                         push	ax
16421                                           ! Debug: func () void = outb+0 (used reg = )
16422 3D32           E8         3DDC            call	_outb
16423 3D35           83C4                   04  add	sp,*4
16424                                           !BCC_EOS
16425                                           ! 1813  outb(0x3c5,0x03);
16426                                           ! Debug: list int = const 3 (used reg = )
16427 3D38           B8                   0003  mov	ax,*3
16428 3D3B           50                         push	ax
16429                                           ! Debug: list int = const $3C5 (used reg = )
16430 3D3C           B8                   03C5  mov	ax,#$3C5
16431 3D3F           50                         push	ax
16432                                           ! Debug: func () void = outb+0 (used reg = )
16433 3D40           E8         3DCE            call	_outb
16434 3D43           83C4                   04  add	sp,*4
16435                                           !BCC_EOS
16436                                           ! 1814  for(i=1;i<=4;i++)
16437                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16438 3D46           B8                   0001  mov	ax,*1
16439 3D49           8946         F6            mov	-$A[bp],ax
16440                                           !BCC_EOS
16441                                           !BCC_EOS
16442                                           ! 1815   {outb(0x3c4,i);
16443 3D4C           EB           3F            jmp .61
16444                       00003D4E            .62:
16445                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16446 3D4E           FF76         F6            push	-$A[bp]
16447                                           ! Debug: list int = const $3C4 (used reg = )
16448 3D51           B8                   03C4  mov	ax,#$3C4
16449 3D54           50                         push	ax
16450                                           ! Debug: func () void = outb+0 (used reg = )
16451 3D55           E8         3DB9            call	_outb
16452 3D58           83C4                   04  add	sp,*4
16453                                           !BCC_EOS
16454                                           ! 1816    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16455                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16456 3D5B           8B46         F6            mov	ax,-$A[bp]
16457 3D5E           48                         dec	ax
16458 3D5F           50                         push	ax
16459                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16460 3D60           8A46         F9            mov	al,-7[bp]
16461 3D63           30E4                       xor	ah,ah
16462 3D65           B1                     06  mov	cl,*6
16463 3D67           D3E0                       shl	ax,cl
16464 3D69           89C3                       mov	bx,ax
16465 3D6B           81C3                 0270  add	bx,#_video_param_table
16466                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16467 3D6F           8B46         E8            mov	ax,-$18[bp]
16468 3D72           01C3                       add	bx,ax
16469 3D74           44                         inc	sp
16470 3D75           44                         inc	sp
16471                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16472 3D76           8A47         05            mov	al,5[bx]
16473 3D79           30E4                       xor	ah,ah
16474 3D7B           50                         push	ax
16475                                           ! Debug: list int = const $3C5 (used reg = )
16476 3D7C           B8                   03C5  mov	ax,#$3C5
16477 3D7F           50                         push	ax
16478                                           ! Debug: func () void = outb+0 (used reg = )
16479 3D80           E8         3D8E            call	_outb
16480 3D83           83C4                   04  add	sp,*4
16481                                           !BCC_EOS
16482                                           ! 1817   }
16483                                           ! 1818  for(i=0;i<=8;i++)
16484                       00003D86            .60:
16485                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16486 3D86           8B46         F6            mov	ax,-$A[bp]
16487 3D89           40                         inc	ax
16488 3D8A           8946         F6            mov	-$A[bp],ax
16489                       00003D8D            .61:
16490                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16491 3D8D           8B46         F6            mov	ax,-$A[bp]
16492 3D90           3D                   0004  cmp	ax,*4
16493 3D93           76           B9            jbe	.62
16494                       00003D95            .63:
16495                       00003D95            .5F:
16496                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16497 3D95           31C0                       xor	ax,ax
16498 3D97           8946         F6            mov	-$A[bp],ax
16499                                           !BCC_EOS
16500                                           !BCC_EOS
16501                                           ! 1819   {outb(0x3ce,i);
16502 3D9A           EB           38            jmp .66
16503                       00003D9C            .67:
16504                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16505 3D9C           FF76         F6            push	-$A[bp]
16506                                           ! Debug: list int = const $3CE (used reg = )
16507 3D9F           B8                   03CE  mov	ax,#$3CE
16508 3DA2           50                         push	ax
16509                                           ! Debug: func () void = outb+0 (used reg = )
16510 3DA3           E8         3D6B            call	_outb
16511 3DA6           83C4                   04  add	sp,*4
16512                                           !BCC_EOS
16513                                           ! 1820    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16514                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16515 3DA9           8A46         F9            mov	al,-7[bp]
16516 3DAC           30E4                       xor	ah,ah
16517 3DAE           B1                     06  mov	cl,*6
16518 3DB0           D3E0                       shl	ax,cl
16519 3DB2           89C3                       mov	bx,ax
16520 3DB4           81C3                 0270  add	bx,#_video_param_table
16521                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16522 3DB8           8B46         F6            mov	ax,-$A[bp]
16523 3DBB           01C3                       add	bx,ax
16524                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16525 3DBD           8A47         37            mov	al,$37[bx]
16526 3DC0           30E4                       xor	ah,ah
16527 3DC2           50                         push	ax
16528                                           ! Debug: list int = const $3CF (used reg = )
16529 3DC3           B8                   03CF  mov	ax,#$3CF
16530 3DC6           50                         push	ax
16531                                           ! Debug: func () void = outb+0 (used reg = )
16532 3DC7           E8         3D47            call	_outb
16533 3DCA           83C4                   04  add	sp,*4
16534                                           !BCC_EOS
16535                                           ! 1821   }
16536                                           ! 1822  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16537                       00003DCD            .65:
16538                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16539 3DCD           8B46         F6            mov	ax,-$A[bp]
16540 3DD0           40                         inc	ax
16541 3DD1           8946         F6            mov	-$A[bp],ax
16542                       00003DD4            .66:
16543                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16544 3DD4           8B46         F6            mov	ax,-$A[bp]
16545 3DD7           3D                   0008  cmp	ax,*8
16546 3DDA           76           C0            jbe	.67
16547                       00003DDC            .68:
16548                       00003DDC            .64:
16549                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16550 3DDC           8A46         FE            mov	al,-2[bp]
16551 3DDF           30E4                       xor	ah,ah
16552 3DE1           B1                     03  mov	cl,*3
16553 3DE3           D3E0                       shl	ax,cl
16554 3DE5           89C3                       mov	bx,ax
16555 3DE7           81C3                 01DC  add	bx,#_vga_modes
16556                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
16557 3DEB           8A47         02            mov	al,2[bx]
16558 3DEE           3C                     01  cmp	al,*1
16559 3DF0           75           05            jne 	.69
16560                       00003DF2            .6A:
16561 3DF2           B8                   03B4  mov	ax,#$3B4
16562 3DF5           EB           03            jmp .6B
16563                       00003DF7            .69:
16564 3DF7           B8                   03D4  mov	ax,#$3D4
16565                       00003DFA            .6B:
16566                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
16567 3DFA           8946         EA            mov	-$16[bp],ax
16568                                           !BCC_EOS
16569                                           ! 1823  outw(crtc_addr,0x0011);
16570                                           ! Debug: list int = const $11 (used reg = )
16571 3DFD           B8                   0011  mov	ax,*$11
16572 3E00           50                         push	ax
16573                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16574 3E01           FF76         EA            push	-$16[bp]
16575                                           ! Debug: func () void = outw+0 (used reg = )
16576 3E04           E8         3D1A            call	_outw
16577 3E07           83C4                   04  add	sp,*4
16578                                           !BCC_EOS
16579                                           ! 1824  for(i=0;i<=0x18;i++)
16580                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16581 3E0A           31C0                       xor	ax,ax
16582 3E0C           8946         F6            mov	-$A[bp],ax
16583                                           !BCC_EOS
16584                                           !BCC_EOS
16585                                           ! 1825   {outb(crtc_addr,i);
16586 3E0F           EB           38            jmp .6E
16587                       00003E11            .6F:
16588                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16589 3E11           FF76         F6            push	-$A[bp]
16590                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16591 3E14           FF76         EA            push	-$16[bp]
16592                                           ! Debug: func () void = outb+0 (used reg = )
16593 3E17           E8         3CF7            call	_outb
16594 3E1A           83C4                   04  add	sp,*4
16595                                           !BCC_EOS
16596                                           ! 1826    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
16597                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16598 3E1D           8A46         F9            mov	al,-7[bp]
16599 3E20           30E4                       xor	ah,ah
16600 3E22           B1                     06  mov	cl,*6
16601 3E24           D3E0                       shl	ax,cl
16602 3E26           89C3                       mov	bx,ax
16603 3E28           81C3                 0270  add	bx,#_video_param_table
16604                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
16605 3E2C           8B46         F6            mov	ax,-$A[bp]
16606 3E2F           01C3                       add	bx,ax
16607                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
16608 3E31           8A47         0A            mov	al,$A[bx]
16609 3E34           30E4                       xor	ah,ah
16610 3E36           50                         push	ax
16611                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16612 3E37           8B46         EA            mov	ax,-$16[bp]
16613                                           ! Debug: list unsigned int = ax+1 (used reg = )
16614 3E3A           40                         inc	ax
16615 3E3B           50                         push	ax
16616                                           ! Debug: func () void = outb+0 (used reg = )
16617 3E3C           E8         3CD2            call	_outb
16618 3E3F           83C4                   04  add	sp,*4
16619                                           !BCC_EOS
16620                                           ! 1827   }
16621                                           ! 1828  outb(0x3c2,video_param_table[vpti].miscreg);
16622                       00003E42            .6D:
16623                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16624 3E42           8B46         F6            mov	ax,-$A[bp]
16625 3E45           40                         inc	ax
16626 3E46           8946         F6            mov	-$A[bp],ax
16627                       00003E49            .6E:
16628                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
16629 3E49           8B46         F6            mov	ax,-$A[bp]
16630 3E4C           3D                   0018  cmp	ax,*$18
16631 3E4F           76           C0            jbe	.6F
16632                       00003E51            .70:
16633                       00003E51            .6C:
16634                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16635 3E51           8A46         F9            mov	al,-7[bp]
16636 3E54           30E4                       xor	ah,ah
16637 3E56           B1                     06  mov	cl,*6
16638 3E58           D3E0                       shl	ax,cl
16639 3E5A           89C3                       mov	bx,ax
16640 3E5C           81C3                 0270  add	bx,#_video_param_table
16641                                           ! Debug: list unsigned char = [bx+9] (used reg = )
16642 3E60           8A47         09            mov	al,9[bx]
16643 3E63           30E4                       xor	ah,ah
16644 3E65           50                         push	ax
16645                                           ! Debug: list int = const $3C2 (used reg = )
16646 3E66           B8                   03C2  mov	ax,#$3C2
16647 3E69           50                         push	ax
16648                                           ! Debug: func () void = outb+0 (used reg = )
16649 3E6A           E8         3CA4            call	_outb
16650 3E6D           83C4                   04  add	sp,*4
16651                                           !BCC_EOS
16652                                           ! 1829  outb(0x3c0,0x20);
16653                                           ! Debug: list int = const $20 (used reg = )
16654 3E70           B8                   0020  mov	ax,*$20
16655 3E73           50                         push	ax
16656                                           ! Debug: list int = const $3C0 (used reg = )
16657 3E74           B8                   03C0  mov	ax,#$3C0
16658 3E77           50                         push	ax
16659                                           ! Debug: func () void = outb+0 (used reg = )
16660 3E78           E8         3C96            call	_outb
16661 3E7B           83C4                   04  add	sp,*4
16662                                           !BCC_EOS
16663                                           ! 1830  inb(0x3da);
16664                                           ! Debug: list int = const $3DA (used reg = )
16665 3E7E           B8                   03DA  mov	ax,#$3DA
16666 3E81           50                         push	ax
16667                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16668 3E82           E8         3C76            call	_inb
16669 3E85           44                         inc	sp
16670 3E86           44                         inc	sp
16671                                           !BCC_EOS
16672                                           ! 1831  if(noclearmem==0x00)
16673                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
16674 3E87           8A46         FF            mov	al,-1[bp]
16675 3E8A           84C0                       test	al,al
16676 3E8C         0F85         00C1            bne 	.71
16677                       00003E90            .72:
16678                                           ! 1832   {
16679                                           ! 1833    if(vga_modes[line].class==0x00)
16680                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16681 3E90           8A46         FE            mov	al,-2[bp]
16682 3E93           30E4                       xor	ah,ah
16683 3E95           B1                     03  mov	cl,*3
16684 3E97           D3E0                       shl	ax,cl
16685 3E99           89C3                       mov	bx,ax
16686 3E9B           81C3                 01DC  add	bx,#_vga_modes
16687                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
16688 3E9F           8A47         01            mov	al,1[bx]
16689 3EA2           84C0                       test	al,al
16690 3EA4           75           26            jne 	.73
16691                       00003EA6            .74:
16692                                           ! 1834     {
16693                                           ! 1835      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
16694                                           ! Debug: list int = const $4000 (used reg = )
16695 3EA6           B8                   4000  mov	ax,#$4000
16696 3EA9           50                         push	ax
16697                                           ! Debug: list int = const $720 (used reg = )
16698 3EAA           B8                   0720  mov	ax,#$720
16699 3EAD           50                         push	ax
16700                                           ! Debug: list int = const 0 (used reg = )
16701 3EAE           31C0                       xor	ax,ax
16702 3EB0           50                         push	ax
16703                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16704 3EB1           8A46         FE            mov	al,-2[bp]
16705 3EB4           30E4                       xor	ah,ah
16706 3EB6           B1                     03  mov	cl,*3
16707 3EB8           D3E0                       shl	ax,cl
16708 3EBA           89C3                       mov	bx,ax
16709 3EBC           81C3                 01DC  add	bx,#_vga_modes
16710                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16711 3EC0           FF77         04            push	4[bx]
16712                                           ! Debug: func () void = memsetw+0 (used reg = )
16713 3EC3           E8         3B5A            call	_memsetw
16714 3EC6           83C4                   08  add	sp,*8
16715                                           !BCC_EOS
16716                                           ! 1836     }
16717                                           ! 1837    else
16718                                           ! 1838     {
16719 3EC9           E9         0085            br 	.75
16720                       00003ECC            .73:
16721                                           ! 1839      if(mode<0x0d)
16722                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
16723 3ECC           8A46         04            mov	al,4[bp]
16724 3ECF           3C                     0D  cmp	al,*$D
16725 3ED1           73           24            jae 	.76
16726                       00003ED3            .77:
16727                                           ! 1840       {
16728                                           ! 1841        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
16729                                           ! Debug: list int = const $4000 (used reg = )
16730 3ED3           B8                   4000  mov	ax,#$4000
16731 3ED6           50                         push	ax
16732                                           ! Debug: list int = const 0 (used reg = )
16733 3ED7           31C0                       xor	ax,ax
16734 3ED9           50                         push	ax
16735                                           ! Debug: list int = const 0 (used reg = )
16736 3EDA           31C0                       xor	ax,ax
16737 3EDC           50                         push	ax
16738                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16739 3EDD           8A46         FE            mov	al,-2[bp]
16740 3EE0           30E4                       xor	ah,ah
16741 3EE2           B1                     03  mov	cl,*3
16742 3EE4           D3E0                       shl	ax,cl
16743 3EE6           89C3                       mov	bx,ax
16744 3EE8           81C3                 01DC  add	bx,#_vga_modes
16745                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16746 3EEC           FF77         04            push	4[bx]
16747                                           ! Debug: func () void = memsetw+0 (used reg = )
16748 3EEF           E8         3B2E            call	_memsetw
16749 3EF2           83C4                   08  add	sp,*8
16750                                           !BCC_EOS
16751                                           ! 1842       }
16752                                           ! 1843      else
16753                                           ! 1844       {
16754 3EF5           EB           5A            jmp .78
16755                       00003EF7            .76:
16756                                           ! 1845        outb( 0x3c4, 0x02 );
16757                                           ! Debug: list int = const 2 (used reg = )
16758 3EF7           B8                   0002  mov	ax,*2
16759 3EFA           50                         push	ax
16760                                           ! Debug: list int = const $3C4 (used reg = )
16761 3EFB           B8                   03C4  mov	ax,#$3C4
16762 3EFE           50                         push	ax
16763                                           ! Debug: func () void = outb+0 (used reg = )
16764 3EFF           E8         3C0F            call	_outb
16765 3F02           83C4                   04  add	sp,*4
16766                                           !BCC_EOS
16767                                           ! 1846        mmask = inb( 0x3c5 );
16768                                           ! Debug: list int = const $3C5 (used reg = )
16769 3F05           B8                   03C5  mov	ax,#$3C5
16770 3F08           50                         push	ax
16771                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16772 3F09           E8         3BEF            call	_inb
16773 3F0C           44                         inc	sp
16774 3F0D           44                         inc	sp
16775                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
16776 3F0E           8846         FD            mov	-3[bp],al
16777                                           !BCC_EOS
16778                                           ! 1847        outb( 0x3c5, 0x0f );
16779                                           ! Debug: list int = const $F (used reg = )
16780 3F11           B8                   000F  mov	ax,*$F
16781 3F14           50                         push	ax
16782                                           ! Debug: list int = const $3C5 (used reg = )
16783 3F15           B8                   03C5  mov	ax,#$3C5
16784 3F18           50                         push	ax
16785                                           ! Debug: func () void = outb+0 (used reg = )
16786 3F19           E8         3BF5            call	_outb
16787 3F1C           83C4                   04  add	sp,*4
16788                                           !BCC_EOS
16789                                           ! 1848        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
16790                                           ! Debug: list unsigned int = const $8000 (used reg = )
16791 3F1F           B8                   8000  mov	ax,#$8000
16792 3F22           50                         push	ax
16793                                           ! Debug: list int = const 0 (used reg = )
16794 3F23           31C0                       xor	ax,ax
16795 3F25           50                         push	ax
16796                                           ! Debug: list int = const 0 (used reg = )
16797 3F26           31C0                       xor	ax,ax
16798 3F28           50                         push	ax
16799                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16800 3F29           8A46         FE            mov	al,-2[bp]
16801 3F2C           30E4                       xor	ah,ah
16802 3F2E           B1                     03  mov	cl,*3
16803 3F30           D3E0                       shl	ax,cl
16804 3F32           89C3                       mov	bx,ax
16805 3F34           81C3                 01DC  add	bx,#_vga_modes
16806                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16807 3F38           FF77         04            push	4[bx]
16808                                           ! Debug: func () void = memsetw+0 (used reg = )
16809 3F3B           E8         3AE2            call	_memsetw
16810 3F3E           83C4                   08  add	sp,*8
16811                                           !BCC_EOS
16812                                           ! 1849        outb( 0x3c5, mmask );
16813                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
16814 3F41           8A46         FD            mov	al,-3[bp]
16815 3F44           30E4                       xor	ah,ah
16816 3F46           50                         push	ax
16817                                           ! Debug: list int = const $3C5 (used reg = )
16818 3F47           B8                   03C5  mov	ax,#$3C5
16819 3F4A           50                         push	ax
16820                                           ! Debug: func () void = outb+0 (used reg = )
16821 3F4B           E8         3BC3            call	_outb
16822 3F4E           83C4                   04  add	sp,*4
16823                                           !BCC_EOS
16824                                           ! 1850       }
16825                                           ! 1851     }
16826                       00003F51            .78:
16827                                           ! 1852   }
16828                       00003F51            .75:
16829                                           ! 1853  write_byte(0x40,0x49,mode);
16830                       00003F51            .71:
16831                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16832 3F51           8A46         04            mov	al,4[bp]
16833 3F54           30E4                       xor	ah,ah
16834 3F56           50                         push	ax
16835                                           ! Debug: list int = const $49 (used reg = )
16836 3F57           B8                   0049  mov	ax,*$49
16837 3F5A           50                         push	ax
16838                                           ! Debug: list int = const $40 (used reg = )
16839 3F5B           B8                   0040  mov	ax,*$40
16840 3F5E           50                         push	ax
16841                                           ! Debug: func () void = write_byte+0 (used reg = )
16842 3F5F           E8         3B69            call	_write_byte
16843 3F62           83C4                   06  add	sp,*6
16844                                           !BCC_EOS
16845                                           ! 1854  write_word(0x40,0x4A,twidth);
16846                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
16847 3F65           FF76         F4            push	-$C[bp]
16848                                           ! Debug: list int = const $4A (used reg = )
16849 3F68           B8                   004A  mov	ax,*$4A
16850 3F6B           50                         push	ax
16851                                           ! Debug: list int = const $40 (used reg = )
16852 3F6C           B8                   0040  mov	ax,*$40
16853 3F6F           50                         push	ax
16854                                           ! Debug: func () void = write_word+0 (used reg = )
16855 3F70           E8         3B70            call	_write_word
16856 3F73           83C4                   06  add	sp,*6
16857                                           !BCC_EOS
16858                                           ! 1855  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
16859                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16860 3F76           8A46         F9            mov	al,-7[bp]
16861 3F79           30E4                       xor	ah,ah
16862 3F7B           B1                     06  mov	cl,*6
16863 3F7D           D3E0                       shl	ax,cl
16864 3F7F           89C3                       mov	bx,ax
16865 3F81           81C3                 0270  add	bx,#_video_param_table
16866                                           ! Debug: address unsigned char = [bx+3] (used reg = )
16867                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
16868                                           ! Debug: list unsigned short = [bx+3] (used reg = )
16869 3F85           FF77         03            push	3[bx]
16870                                           ! Debug: list int = const $4C (used reg = )
16871 3F88           B8                   004C  mov	ax,*$4C
16872 3F8B           50                         push	ax
16873                                           ! Debug: list int = const $40 (used reg = )
16874 3F8C           B8                   0040  mov	ax,*$40
16875 3F8F           50                         push	ax
16876                                           ! Debug: func () void = write_word+0 (used reg = )
16877 3F90           E8         3B50            call	_write_word
16878 3F93           83C4                   06  add	sp,*6
16879                                           !BCC_EOS
16880                                           ! 1856  write_word(0x40,0x63,crtc_addr);
16881                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
16882 3F96           FF76         EA            push	-$16[bp]
16883                                           ! Debug: list int = const $63 (used reg = )
16884 3F99           B8                   0063  mov	ax,*$63
16885 3F9C           50                         push	ax
16886                                           ! Debug: list int = const $40 (used reg = )
16887 3F9D           B8                   0040  mov	ax,*$40
16888 3FA0           50                         push	ax
16889                                           ! Debug: func () void = write_word+0 (used reg = )
16890 3FA1           E8         3B3F            call	_write_word
16891 3FA4           83C4                   06  add	sp,*6
16892                                           !BCC_EOS
16893                                           ! 1857  write_byte(0x40,0x84,theightm1);
16894                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
16895 3FA7           FF76         F2            push	-$E[bp]
16896                                           ! Debug: list int = const $84 (used reg = )
16897 3FAA           B8                   0084  mov	ax,#$84
16898 3FAD           50                         push	ax
16899                                           ! Debug: list int = const $40 (used reg = )
16900 3FAE           B8                   0040  mov	ax,*$40
16901 3FB1           50                         push	ax
16902                                           ! Debug: func () void = write_byte+0 (used reg = )
16903 3FB2           E8         3B16            call	_write_byte
16904 3FB5           83C4                   06  add	sp,*6
16905                                           !BCC_EOS
16906                                           ! 1858  write_word(0x40,0x85,cheight);
16907                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
16908 3FB8           FF76         F0            push	-$10[bp]
16909                                           ! Debug: list int = const $85 (used reg = )
16910 3FBB           B8                   0085  mov	ax,#$85
16911 3FBE           50                         push	ax
16912                                           ! Debug: list int = const $40 (used reg = )
16913 3FBF           B8                   0040  mov	ax,*$40
16914 3FC2           50                         push	ax
16915                                           ! Debug: func () void = write_word+0 (used reg = )
16916 3FC3           E8         3B1D            call	_write_word
16917 3FC6           83C4                   06  add	sp,*6
16918                                           !BCC_EOS
16919                                           ! 1859  write_byte(0x40,0x87,(0x60|noclearmem));
16920                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
16921                                           ! Debug: expression subtree swapping
16922 3FC9           8A46         FF            mov	al,-1[bp]
16923 3FCC           0C                     60  or	al,*$60
16924                                           ! Debug: list unsigned char = al+0 (used reg = )
16925 3FCE           30E4                       xor	ah,ah
16926 3FD0           50                         push	ax
16927                                           ! Debug: list int = const $87 (used reg = )
16928 3FD1           B8                   0087  mov	ax,#$87
16929 3FD4           50                         push	ax
16930                                           ! Debug: list int = const $40 (used reg = )
16931 3FD5           B8                   0040  mov	ax,*$40
16932 3FD8           50                         push	ax
16933                                           ! Debug: func () void = write_byte+0 (used reg = )
16934 3FD9           E8         3AEF            call	_write_byte
16935 3FDC           83C4                   06  add	sp,*6
16936                                           !BCC_EOS
16937                                           ! 1860  write_byte(0x40,0x88,0xF9);
16938                                           ! Debug: list int = const $F9 (used reg = )
16939 3FDF           B8                   00F9  mov	ax,#$F9
16940 3FE2           50                         push	ax
16941                                           ! Debug: list int = const $88 (used reg = )
16942 3FE3           B8                   0088  mov	ax,#$88
16943 3FE6           50                         push	ax
16944                                           ! Debug: list int = const $40 (used reg = )
16945 3FE7           B8                   0040  mov	ax,*$40
16946 3FEA           50                         push	ax
16947                                           ! Debug: func () void = write_byte+0 (used reg = )
16948 3FEB           E8         3ADD            call	_write_byte
16949 3FEE           83C4                   06  add	sp,*6
16950                                           !BCC_EOS
16951                                           ! 1861  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
16952                                           ! Debug: list int = const $89 (used reg = )
16953 3FF1           B8                   0089  mov	ax,#$89
16954 3FF4           50                         push	ax
16955                                           ! Debug: list int = const $40 (used reg = )
16956 3FF5           B8                   0040  mov	ax,*$40
16957 3FF8           50                         push	ax
16958                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16959 3FF9           E8         3AA9            call	_read_byte
16960 3FFC           83C4                   04  add	sp,*4
16961                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
16962 3FFF           24                     7F  and	al,*$7F
16963                                           ! Debug: list unsigned char = al+0 (used reg = )
16964 4001           30E4                       xor	ah,ah
16965 4003           50                         push	ax
16966                                           ! Debug: list int = const $89 (used reg = )
16967 4004           B8                   0089  mov	ax,#$89
16968 4007           50                         push	ax
16969                                           ! Debug: list int = const $40 (used reg = )
16970 4008           B8                   0040  mov	ax,*$40
16971 400B           50                         push	ax
16972                                           ! Debug: func () void = write_byte+0 (used reg = )
16973 400C           E8         3ABC            call	_write_byte
16974 400F           83C4                   06  add	sp,*6
16975                                           !BCC_EOS
16976                                           ! 1862  write_byte(0x40,0x8A,0x08);
16977                                           ! Debug: list int = const 8 (used reg = )
16978 4012           B8                   0008  mov	ax,*8
16979 4015           50                         push	ax
16980                                           ! Debug: list int = const $8A (used reg = )
16981 4016           B8                   008A  mov	ax,#$8A
16982 4019           50                         push	ax
16983                                           ! Debug: list int = const $40 (used reg = )
16984 401A           B8                   0040  mov	ax,*$40
16985 401D           50                         push	ax
16986                                           ! Debug: func () void = write_byte+0 (used reg = )
16987 401E           E8         3AAA            call	_write_byte
16988 4021           83C4                   06  add	sp,*6
16989                                           !BCC_EOS
16990                                           ! 1863  write_word(0x40,0xA8, video_save_pointer_table);
16991                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
16992 4024           BB                   35D9  mov	bx,#_video_save_pointer_table
16993 4027           53                         push	bx
16994                                           ! Debug: list int = const $A8 (used reg = )
16995 4028           B8                   00A8  mov	ax,#$A8
16996 402B           50                         push	ax
16997                                           ! Debug: list int = const $40 (used reg = )
16998 402C           B8                   0040  mov	ax,*$40
16999 402F           50                         push	ax
17000                                           ! Debug: func () void = write_word+0 (used reg = )
17001 4030           E8         3AB0            call	_write_word
17002 4033           83C4                   06  add	sp,*6
17003                                           !BCC_EOS
17004                                           ! 1864  write_word(0x40,0xA8 +2, 0xc000);
17005                                           ! Debug: list unsigned int = const $C000 (used reg = )
17006 4036           B8                   C000  mov	ax,#$C000
17007 4039           50                         push	ax
17008                                           ! Debug: list int = const $AA (used reg = )
17009 403A           B8                   00AA  mov	ax,#$AA
17010 403D           50                         push	ax
17011                                           ! Debug: list int = const $40 (used reg = )
17012 403E           B8                   0040  mov	ax,*$40
17013 4041           50                         push	ax
17014                                           ! Debug: func () void = write_word+0 (used reg = )
17015 4042           E8         3A9E            call	_write_word
17016 4045           83C4                   06  add	sp,*6
17017                                           !BCC_EOS
17018                                           ! 1865  write_byte(0x40,0x65,0x00);
17019                                           ! Debug: list int = const 0 (used reg = )
17020 4048           31C0                       xor	ax,ax
17021 404A           50                         push	ax
17022                                           ! Debug: list int = const $65 (used reg = )
17023 404B           B8                   0065  mov	ax,*$65
17024 404E           50                         push	ax
17025                                           ! Debug: list int = const $40 (used reg = )
17026 404F           B8                   0040  mov	ax,*$40
17027 4052           50                         push	ax
17028                                           ! Debug: func () void = write_byte+0 (used reg = )
17029 4053           E8         3A75            call	_write_byte
17030 4056           83C4                   06  add	sp,*6
17031                                           !BCC_EOS
17032                                           ! 1866  write_byte(0x40,0x66,0x00);
17033                                           ! Debug: list int = const 0 (used reg = )
17034 4059           31C0                       xor	ax,ax
17035 405B           50                         push	ax
17036                                           ! Debug: list int = const $66 (used reg = )
17037 405C           B8                   0066  mov	ax,*$66
17038 405F           50                         push	ax
17039                                           ! Debug: list int = const $40 (used reg = )
17040 4060           B8                   0040  mov	ax,*$40
17041 4063           50                         push	ax
17042                                           ! Debug: func () void = write_byte+0 (used reg = )
17043 4064           E8         3A64            call	_write_byte
17044 4067           83C4                   06  add	sp,*6
17045                                           !BCC_EOS
17046                                           ! 1867  if(vga_modes[line].class==0x00)
17047                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17048 406A           8A46         FE            mov	al,-2[bp]
17049 406D           30E4                       xor	ah,ah
17050 406F           B1                     03  mov	cl,*3
17051 4071           D3E0                       shl	ax,cl
17052 4073           89C3                       mov	bx,ax
17053 4075           81C3                 01DC  add	bx,#_vga_modes
17054                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17055 4079           8A47         01            mov	al,1[bx]
17056 407C           84C0                       test	al,al
17057 407E           75           0E            jne 	.79
17058                       00004080            .7A:
17059                                           ! 1868   {
17060                                           ! 1869    biosfn_set_cursor_shape(0x06,0x07);
17061                                           ! Debug: list int = const 7 (used reg = )
17062 4080           B8                   0007  mov	ax,*7
17063 4083           50                         push	ax
17064                                           ! Debug: list int = const 6 (used reg = )
17065 4084           B8                   0006  mov	ax,*6
17066 4087           50                         push	ax
17067                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17068 4088           E8         00BA            call	_biosfn_set_cursor_shape
17069 408B           83C4                   04  add	sp,*4
17070                                           !BCC_EOS
17071                                           ! 1870   }
17072                                           ! 1871  for(i=0;i<8;i++)
17073                       0000408E            .79:
17074                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17075 408E           31C0                       xor	ax,ax
17076 4090           8946         F6            mov	-$A[bp],ax
17077                                           !BCC_EOS
17078                                           !BCC_EOS
17079                                           ! 1872   biosfn_set_cursor_pos(i,0x0000);
17080 4093           EB           13            jmp .7D
17081                       00004095            .7E:
17082                                           ! Debug: list int = const 0 (used reg = )
17083 4095           31C0                       xor	ax,ax
17084 4097           50                         push	ax
17085                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17086 4098           FF76         F6            push	-$A[bp]
17087                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17088 409B           E8         01C2            call	_biosfn_set_cursor_pos
17089 409E           83C4                   04  add	sp,*4
17090                                           !BCC_EOS
17091                                           ! 1873  biosfn_set_active_page(0x00);
17092                       000040A1            .7C:
17093                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17094 40A1           8B46         F6            mov	ax,-$A[bp]
17095 40A4           40                         inc	ax
17096 40A5           8946         F6            mov	-$A[bp],ax
17097                       000040A8            .7D:
17098                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17099 40A8           8B46         F6            mov	ax,-$A[bp]
17100 40AB           3D                   0008  cmp	ax,*8
17101 40AE           72           E5            jb 	.7E
17102                       000040B0            .7F:
17103                       000040B0            .7B:
17104                                           ! Debug: list int = const 0 (used reg = )
17105 40B0           31C0                       xor	ax,ax
17106 40B2           50                         push	ax
17107                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17108 40B3           E8         031F            call	_biosfn_set_active_page
17109 40B6           44                         inc	sp
17110 40B7           44                         inc	sp
17111                                           !BCC_EOS
17112                                           ! 1874  if(vga_modes[line].class==0x00)
17113                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17114 40B8           8A46         FE            mov	al,-2[bp]
17115 40BB           30E4                       xor	ah,ah
17116 40BD           B1                     03  mov	cl,*3
17117 40BF           D3E0                       shl	ax,cl
17118 40C1           89C3                       mov	bx,ax
17119 40C3           81C3                 01DC  add	bx,#_vga_modes
17120                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17121 40C7           8A47         01            mov	al,1[bx]
17122 40CA           84C0                       test	al,al
17123 40CC           75           0E            jne 	.80
17124                       000040CE            .81:
17125                                           ! 1875   {
17126                                           ! 1876 #asm
17127                                           !BCC_EOS
17128                                           !BCC_ASM
17129                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17130                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17131                       00000008            _biosfn_set_video_mode.theightm1	set	8
17132                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17133                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17134                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17135                       00000014            _biosfn_set_video_mode.line	set	$14
17136                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17137                       00000006            _biosfn_set_video_mode.cheight	set	6
17138                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17139                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17140                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17141                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17142                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17143                       0000000C            _biosfn_set_video_mode.i	set	$C
17144                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17145                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17146                       00000004            .biosfn_set_video_mode.mode	set	4
17147                       00000010            _biosfn_set_video_mode.palette	set	$10
17148                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17149                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17150                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17151                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17152                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17153                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17154                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17155                       00000013            _biosfn_set_video_mode.mmask	set	$13
17156                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17157                                             ;; copy and activate 8x16 font
17158 40CE           B8                   1104    mov ax, #0x1104
17159 40D1           B3                     00    mov bl, #0x00
17160 40D3           CD                     10    int #0x10
17161 40D5           B8                   1103    mov ax, #0x1103
17162 40D8           B3                     00    mov bl, #0x00
17163 40DA           CD                     10    int #0x10
17164                                           ! 1884 endasm
17165                                           !BCC_ENDASM
17166                                           !BCC_EOS
17167                                           ! 1885   }
17168                                           ! 1886 #asm
17169                       000040DC            .80:
17170                                           !BCC_EOS
17171                                           !BCC_ASM
17172                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17173                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17174                       00000008            _biosfn_set_video_mode.theightm1	set	8
17175                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17176                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17177                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17178                       00000014            _biosfn_set_video_mode.line	set	$14
17179                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17180                       00000006            _biosfn_set_video_mode.cheight	set	6
17181                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17182                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17183                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17184                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17185                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17186                       0000000C            _biosfn_set_video_mode.i	set	$C
17187                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17188                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17189                       00000004            .biosfn_set_video_mode.mode	set	4
17190                       00000010            _biosfn_set_video_mode.palette	set	$10
17191                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17192                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17193                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17194                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17195                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17196                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17197                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17198                       00000013            _biosfn_set_video_mode.mmask	set	$13
17199                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17200                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   40DC           1E                           push ds
 +a   40DD           31C0                         xor ax, ax
 +a   40DF           8ED8                         mov ds, ax
 +a   40E1           B8                   1340    mov ax,  #_vgafont8+128*8
 +a   40E4           A3         007C              mov 0x1f*4, ax
 +a   40E7           B8                   C000    mov ax,  #0xC000
 +a   40EA           A3         007E              mov 0x1f*4+2, ax
 +a   40ED           1F                           pop ds
17201                                           ! 1888 endasm
17202                                           !BCC_ENDASM
17203                                           !BCC_EOS
17204                                           ! 1889   switch(cheight)
17205 40EE           8B46         F0            mov	ax,-$10[bp]
17206                                           ! 1890    {case 8:
17207 40F1           E9         003E            br 	.84
17208                                           ! 1891 #asm
17209                       000040F4            .85:
17210                                           !BCC_EOS
17211                                           !BCC_ASM
17212                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17213                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17214                       00000008            _biosfn_set_video_mode.theightm1	set	8
17215                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17216                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17217                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17218                       00000014            _biosfn_set_video_mode.line	set	$14
17219                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17220                       00000006            _biosfn_set_video_mode.cheight	set	6
17221                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17222                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17223                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17224                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17225                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17226                       0000000C            _biosfn_set_video_mode.i	set	$C
17227                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17228                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17229                       00000004            .biosfn_set_video_mode.mode	set	4
17230                       00000010            _biosfn_set_video_mode.palette	set	$10
17231                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17232                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17233                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17234                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17235                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17236                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17237                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17238                       00000013            _biosfn_set_video_mode.mmask	set	$13
17239                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17240                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   40F4           1E                           push ds
 +a   40F5           31C0                         xor ax, ax
 +a   40F7           8ED8                         mov ds, ax
 +a   40F9           B8                   0F40    mov ax,  #_vgafont8
 +a   40FC           A3         010C              mov 0x43*4, ax
 +a   40FF           B8                   C000    mov ax,  #0xC000
 +a   4102           A3         010E              mov 0x43*4+2, ax
 +a   4105           1F                           pop ds
17241                                           ! 1893 endasm
17242                                           !BCC_ENDASM
17243                                           !BCC_EOS
17244                                           ! 1894      break;
17245 4106           EB           39            jmp .82
17246                                           !BCC_EOS
17247                                           ! 1895     case 14:
17248                                           ! 1896 #asm
17249                       00004108            .86:
17250                                           !BCC_EOS
17251                                           !BCC_ASM
17252                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17253                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17254                       00000008            _biosfn_set_video_mode.theightm1	set	8
17255                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17256                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17257                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17258                       00000014            _biosfn_set_video_mode.line	set	$14
17259                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17260                       00000006            _biosfn_set_video_mode.cheight	set	6
17261                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17262                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17263                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17264                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17265                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17266                       0000000C            _biosfn_set_video_mode.i	set	$C
17267                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17268                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17269                       00000004            .biosfn_set_video_mode.mode	set	4
17270                       00000010            _biosfn_set_video_mode.palette	set	$10
17271                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17272                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17273                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17274                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17275                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17276                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17277                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17278                       00000013            _biosfn_set_video_mode.mmask	set	$13
17279                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17280                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   4108           1E                           push ds
 +a   4109           31C0                         xor ax, ax
 +a   410B           8ED8                         mov ds, ax
 +a   410D           B8                   1740    mov ax,  #_vgafont14
 +a   4110           A3         010C              mov 0x43*4, ax
 +a   4113           B8                   C000    mov ax,  #0xC000
 +a   4116           A3         010E              mov 0x43*4+2, ax
 +a   4119           1F                           pop ds
17281                                           ! 1898 endasm
17282                                           !BCC_ENDASM
17283                                           !BCC_EOS
17284                                           ! 1899      break;
17285 411A           EB           25            jmp .82
17286                                           !BCC_EOS
17287                                           ! 1900     case 16:
17288                                           ! 1901 #asm
17289                       0000411C            .87:
17290                                           !BCC_EOS
17291                                           !BCC_ASM
17292                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17293                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17294                       00000008            _biosfn_set_video_mode.theightm1	set	8
17295                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17296                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17297                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17298                       00000014            _biosfn_set_video_mode.line	set	$14
17299                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17300                       00000006            _biosfn_set_video_mode.cheight	set	6
17301                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17302                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17303                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17304                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17305                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17306                       0000000C            _biosfn_set_video_mode.i	set	$C
17307                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17308                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17309                       00000004            .biosfn_set_video_mode.mode	set	4
17310                       00000010            _biosfn_set_video_mode.palette	set	$10
17311                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17312                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17313                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17314                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17315                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17316                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17317                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17318                       00000013            _biosfn_set_video_mode.mmask	set	$13
17319                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17320                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   411C           1E                           push ds
 +a   411D           31C0                         xor ax, ax
 +a   411F           8ED8                         mov ds, ax
 +a   4121           B8                   2540    mov ax,  #_vgafont16
 +a   4124           A3         010C              mov 0x43*4, ax
 +a   4127           B8                   C000    mov ax,  #0xC000
 +a   412A           A3         010E              mov 0x43*4+2, ax
 +a   412D           1F                           pop ds
17321                                           ! 1903 endasm
17322                                           !BCC_ENDASM
17323                                           !BCC_EOS
17324                                           ! 1904      break;
17325 412E           EB           11            jmp .82
17326                                           !BCC_EOS
17327                                           ! 1905    }
17328                                           ! 1906 }
17329 4130           EB           0F            jmp .82
17330                       00004132            .84:
17331 4132           2D                   0008  sub	ax,*8
17332 4135           74           BD            je 	.85
17333 4137           2D                   0006  sub	ax,*6
17334 413A           74           CC            je 	.86
17335 413C           2D                   0002  sub	ax,*2
17336 413F           74           DB            je 	.87
17337                       00004141            .82:
17338                       FFFFFFE8            ..FFFD	=	-$18
17339 4141           89EC                       mov	sp,bp
17340 4143           5D                         pop	bp
17341 4144           C3                         ret
17342                                           ! 1907 static void biosfn_set_cursor_shape (CH,CL)
17343                                           ! Register BX used in function biosfn_set_video_mode
17344                                           ! 1908 Bit8u CH;Bit8u CL;
17345                       00004145            _biosfn_set_cursor_shape:
17346                                           !BCC_EOS
17347                                           !BCC_EOS
17348                                           ! 1909 {Bit16u cheight,curs,crtc_addr;
17349                                           !BCC_EOS
17350                                           ! 1910  Bit8u modeset_ctl;
17351                                           !BCC_EOS
17352                                           ! 1911  CH&=0x3f;
17353 4145           55                         push	bp
17354 4146           89E5                       mov	bp,sp
17355 4148           83C4                   F8  add	sp,*-8
17356                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17357 414B           8A46         04            mov	al,4[bp]
17358 414E           24                     3F  and	al,*$3F
17359 4150           8846         04            mov	4[bp],al
17360                                           !BCC_EOS
17361                                           ! 1912  CL&=0x1f;
17362                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17363 4153           8A46         06            mov	al,6[bp]
17364 4156           24                     1F  and	al,*$1F
17365 4158           8846         06            mov	6[bp],al
17366                                           !BCC_EOS
17367                                           ! 1913  curs=(CH<<8)+CL;
17368                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17369 415B           8A46         04            mov	al,4[bp]
17370 415E           30E4                       xor	ah,ah
17371 4160           88C4                       mov	ah,al
17372 4162           30C0                       xor	al,al
17373                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17374 4164           0246         06            add	al,6[bp]
17375 4167           80D4                   00  adc	ah,*0
17376                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17377 416A           8946         FC            mov	-4[bp],ax
17378                                           !BCC_EOS
17379                                           ! 1914  write_word(0x40,0x60,curs);
17380                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17381 416D           FF76         FC            push	-4[bp]
17382                                           ! Debug: list int = const $60 (used reg = )
17383 4170           B8                   0060  mov	ax,*$60
17384 4173           50                         push	ax
17385                                           ! Debug: list int = const $40 (used reg = )
17386 4174           B8                   0040  mov	ax,*$40
17387 4177           50                         push	ax
17388                                           ! Debug: func () void = write_word+0 (used reg = )
17389 4178           E8         3968            call	_write_word
17390 417B           83C4                   06  add	sp,*6
17391                                           !BCC_EOS
17392                                           ! 1915  modeset_ctl=read_byte(0x40,0x89);
17393                                           ! Debug: list int = const $89 (used reg = )
17394 417E           B8                   0089  mov	ax,#$89
17395 4181           50                         push	ax
17396                                           ! Debug: list int = const $40 (used reg = )
17397 4182           B8                   0040  mov	ax,*$40
17398 4185           50                         push	ax
17399                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17400 4186           E8         391C            call	_read_byte
17401 4189           83C4                   04  add	sp,*4
17402                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17403 418C           8846         F9            mov	-7[bp],al
17404                                           !BCC_EOS
17405                                           ! 1916  cheight = read_word(0x40,0x85);
17406                                           ! Debug: list int = const $85 (used reg = )
17407 418F           B8                   0085  mov	ax,#$85
17408 4192           50                         push	ax
17409                                           ! Debug: list int = const $40 (used reg = )
17410 4193           B8                   0040  mov	ax,*$40
17411 4196           50                         push	ax
17412                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17413 4197           E8         391E            call	_read_word
17414 419A           83C4                   04  add	sp,*4
17415                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17416 419D           8946         FE            mov	-2[bp],ax
17417                                           !BCC_EOS
17418                                           ! 1917  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17419                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17420 41A0           8A46         F9            mov	al,-7[bp]
17421 41A3           24                     01  and	al,*1
17422 41A5           84C0                       test	al,al
17423 41A7           74           66            je  	.88
17424                       000041A9            .8C:
17425                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17426 41A9           8B46         FE            mov	ax,-2[bp]
17427 41AC           3D                   0008  cmp	ax,*8
17428 41AF           76           5E            jbe 	.88
17429                       000041B1            .8B:
17430                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17431 41B1           8A46         06            mov	al,6[bp]
17432 41B4           3C                     08  cmp	al,*8
17433 41B6           73           57            jae 	.88
17434                       000041B8            .8A:
17435                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17436 41B8           8A46         04            mov	al,4[bp]
17437 41BB           3C                     20  cmp	al,*$20
17438 41BD           73           50            jae 	.88
17439                       000041BF            .89:
17440                                           ! 1918   {
17441                                           ! 1919    if(CL!=(CH+1))
17442                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17443 41BF           8A46         04            mov	al,4[bp]
17444 41C2           30E4                       xor	ah,ah
17445                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17446                                           ! Debug: expression subtree swapping
17447 41C4           40                         inc	ax
17448 41C5           50                         push	ax
17449 41C6           8A46         06            mov	al,6[bp]
17450 41C9           30E4                       xor	ah,ah
17451 41CB           3B46         F6            cmp	ax,-$A[bp]
17452 41CE           8D66         F8            lea	sp,-8[bp]
17453 41D1           74           15            je  	.8D
17454                       000041D3            .8E:
17455                                           ! 1920     {
17456                                           ! 1921      CH = ((CH+1) * cheight / 8) -1;
17457                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17458 41D3           8A46         04            mov	al,4[bp]
17459 41D6           30E4                       xor	ah,ah
17460                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17461 41D8           40                         inc	ax
17462 41D9           8B4E         FE            mov	cx,-2[bp]
17463 41DC           F7E9                       imul	cx
17464                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17465 41DE           B1                     03  mov	cl,*3
17466 41E0           D3E8                       shr	ax,cl
17467                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17468                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17469 41E2           48                         dec	ax
17470 41E3           8846         04            mov	4[bp],al
17471                                           !BCC_EOS
17472                                           ! 1922     }
17473                                           ! 1923    else
17474                                           ! 1924     {
17475 41E6           EB           14            jmp .8F
17476                       000041E8            .8D:
17477                                           ! 1925      CH = ((CL+1) * cheight / 8) - 2;
17478                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17479 41E8           8A46         06            mov	al,6[bp]
17480 41EB           30E4                       xor	ah,ah
17481                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17482 41ED           40                         inc	ax
17483 41EE           8B4E         FE            mov	cx,-2[bp]
17484 41F1           F7E9                       imul	cx
17485                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17486 41F3           B1                     03  mov	cl,*3
17487 41F5           D3E8                       shr	ax,cl
17488                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17489                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17490 41F7           48                         dec	ax
17491 41F8           48                         dec	ax
17492 41F9           8846         04            mov	4[bp],al
17493                                           !BCC_EOS
17494                                           ! 1926     }
17495                                           ! 1927    CL = ((CL+1) * cheight / 8) - 1;
17496                       000041FC            .8F:
17497                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17498 41FC           8A46         06            mov	al,6[bp]
17499 41FF           30E4                       xor	ah,ah
17500                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17501 4201           40                         inc	ax
17502 4202           8B4E         FE            mov	cx,-2[bp]
17503 4205           F7E9                       imul	cx
17504                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17505 4207           B1                     03  mov	cl,*3
17506 4209           D3E8                       shr	ax,cl
17507                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17508                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17509 420B           48                         dec	ax
17510 420C           8846         06            mov	6[bp],al
17511                                           !BCC_EOS
17512                                           ! 1928   }
17513                                           ! 1929  crtc_addr=read_word(0x40,0x63);
17514                       0000420F            .88:
17515                                           ! Debug: list int = const $63 (used reg = )
17516 420F           B8                   0063  mov	ax,*$63
17517 4212           50                         push	ax
17518                                           ! Debug: list int = const $40 (used reg = )
17519 4213           B8                   0040  mov	ax,*$40
17520 4216           50                         push	ax
17521                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17522 4217           E8         389E            call	_read_word
17523 421A           83C4                   04  add	sp,*4
17524                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17525 421D           8946         FA            mov	-6[bp],ax
17526                                           !BCC_EOS
17527                                           ! 1930  outb(crtc_addr,0x0a);
17528                                           ! Debug: list int = const $A (used reg = )
17529 4220           B8                   000A  mov	ax,*$A
17530 4223           50                         push	ax
17531                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17532 4224           FF76         FA            push	-6[bp]
17533                                           ! Debug: func () void = outb+0 (used reg = )
17534 4227           E8         38E7            call	_outb
17535 422A           83C4                   04  add	sp,*4
17536                                           !BCC_EOS
17537                                           ! 1931  outb(crtc_addr+1,CH);
17538                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17539 422D           8A46         04            mov	al,4[bp]
17540 4230           30E4                       xor	ah,ah
17541 4232           50                         push	ax
17542                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17543 4233           8B46         FA            mov	ax,-6[bp]
17544                                           ! Debug: list unsigned int = ax+1 (used reg = )
17545 4236           40                         inc	ax
17546 4237           50                         push	ax
17547                                           ! Debug: func () void = outb+0 (used reg = )
17548 4238           E8         38D6            call	_outb
17549 423B           83C4                   04  add	sp,*4
17550                                           !BCC_EOS
17551                                           ! 1932  outb(crtc_addr,0x0b);
17552                                           ! Debug: list int = const $B (used reg = )
17553 423E           B8                   000B  mov	ax,*$B
17554 4241           50                         push	ax
17555                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17556 4242           FF76         FA            push	-6[bp]
17557                                           ! Debug: func () void = outb+0 (used reg = )
17558 4245           E8         38C9            call	_outb
17559 4248           83C4                   04  add	sp,*4
17560                                           !BCC_EOS
17561                                           ! 1933  outb(crtc_addr+1,CL);
17562                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
17563 424B           8A46         06            mov	al,6[bp]
17564 424E           30E4                       xor	ah,ah
17565 4250           50                         push	ax
17566                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17567 4251           8B46         FA            mov	ax,-6[bp]
17568                                           ! Debug: list unsigned int = ax+1 (used reg = )
17569 4254           40                         inc	ax
17570 4255           50                         push	ax
17571                                           ! Debug: func () void = outb+0 (used reg = )
17572 4256           E8         38B8            call	_outb
17573 4259           83C4                   04  add	sp,*4
17574                                           !BCC_EOS
17575                                           ! 1934 }
17576 425C           89EC                       mov	sp,bp
17577 425E           5D                         pop	bp
17578 425F           C3                         ret
17579                                           ! 1935 static void biosfn_set_cursor_pos (page, cursor)
17580                                           ! 1936 Bit8u page;Bit16u cursor;
17581                       00004260            _biosfn_set_cursor_pos:
17582                                           !BCC_EOS
17583                                           !BCC_EOS
17584                                           ! 1937 {
17585                                           ! 1938  Bit8u xcurs,ycurs,current;
17586                                           !BCC_EOS
17587                                           ! 1939  Bit16u nbcols,nbrows,address,crtc_addr;
17588                                           !BCC_EOS
17589                                           ! 1940  if(page>7)return;
17590 4260           55                         push	bp
17591 4261           89E5                       mov	bp,sp
17592 4263           83C4                   F4  add	sp,*-$C
17593                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
17594 4266           8A46         04            mov	al,4[bp]
17595 4269           3C                     07  cmp	al,*7
17596 426B           76           04            jbe 	.90
17597                       0000426D            .91:
17598 426D           89EC                       mov	sp,bp
17599 426F           5D                         pop	bp
17600 4270           C3                         ret
17601                                           !BCC_EOS
17602                                           ! 1941  write_word(0x40, 0x50 +2*page, cursor);
17603                       00004271            .90:
17604                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
17605 4271           FF76         06            push	6[bp]
17606                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
17607                                           ! Debug: expression subtree swapping
17608 4274           8A46         04            mov	al,4[bp]
17609 4277           30E4                       xor	ah,ah
17610 4279           D1E0                       shl	ax,*1
17611                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17612                                           ! Debug: expression subtree swapping
17613                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17614 427B           05                   0050  add	ax,*$50
17615 427E           50                         push	ax
17616                                           ! Debug: list int = const $40 (used reg = )
17617 427F           B8                   0040  mov	ax,*$40
17618 4282           50                         push	ax
17619                                           ! Debug: func () void = write_word+0 (used reg = )
17620 4283           E8         385D            call	_write_word
17621 4286           83C4                   06  add	sp,*6
17622                                           !BCC_EOS
17623                                           ! 1942  current=read_byte(0x40,0x62);
17624                                           ! Debug: list int = const $62 (used reg = )
17625 4289           B8                   0062  mov	ax,*$62
17626 428C           50                         push	ax
17627                                           ! Debug: list int = const $40 (used reg = )
17628 428D           B8                   0040  mov	ax,*$40
17629 4290           50                         push	ax
17630                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17631 4291           E8         3811            call	_read_byte
17632 4294           83C4                   04  add	sp,*4
17633                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
17634 4297           8846         FD            mov	-3[bp],al
17635                                           !BCC_EOS
17636                                           ! 1943  if(page==current)
17637                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
17638 429A           8A46         04            mov	al,4[bp]
17639 429D           3A46         FD            cmp	al,-3[bp]
17640 42A0         0F85         00B8            bne 	.92
17641                       000042A4            .93:
17642                                           ! 1944   {
17643                                           ! 1945    nbcols=read_word(0x40,0x4A);
17644                                           ! Debug: list int = const $4A (used reg = )
17645 42A4           B8                   004A  mov	ax,*$4A
17646 42A7           50                         push	ax
17647                                           ! Debug: list int = const $40 (used reg = )
17648 42A8           B8                   0040  mov	ax,*$40
17649 42AB           50                         push	ax
17650                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17651 42AC           E8         3809            call	_read_word
17652 42AF           83C4                   04  add	sp,*4
17653                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
17654 42B2           8946         FA            mov	-6[bp],ax
17655                                           !BCC_EOS
17656                                           ! 1946    nbrows=read_byte(0x40,0x84)+1;
17657                                           ! Debug: list int = const $84 (used reg = )
17658 42B5           B8                   0084  mov	ax,#$84
17659 42B8           50                         push	ax
17660                                           ! Debug: list int = const $40 (used reg = )
17661 42B9           B8                   0040  mov	ax,*$40
17662 42BC           50                         push	ax
17663                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17664 42BD           E8         37E5            call	_read_byte
17665 42C0           83C4                   04  add	sp,*4
17666                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
17667 42C3           30E4                       xor	ah,ah
17668                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
17669 42C5           40                         inc	ax
17670 42C6           8946         F8            mov	-8[bp],ax
17671                                           !BCC_EOS
17672                                           ! 1947    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
17673                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
17674 42C9           8A46         06            mov	al,6[bp]
17675                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
17676 42CC           8846         FF            mov	-1[bp],al
17677                                           !BCC_EOS
17678                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
17679 42CF           8B46         06            mov	ax,6[bp]
17680 42D2           30C0                       xor	al,al
17681                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17682 42D4           88E0                       mov	al,ah
17683 42D6           30E4                       xor	ah,ah
17684                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
17685 42D8           8846         FE            mov	-2[bp],al
17686                                           !BCC_EOS
17687                                           ! 1948    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
17688                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
17689 42DB           8A46         FE            mov	al,-2[bp]
17690 42DE           30E4                       xor	ah,ah
17691 42E0           8B4E         FA            mov	cx,-6[bp]
17692 42E3           F7E9                       imul	cx
17693 42E5           50                         push	ax
17694                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
17695 42E6           8B46         FA            mov	ax,-6[bp]
17696 42E9           8B4E         F8            mov	cx,-8[bp]
17697 42EC           F7E9                       imul	cx
17698                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
17699 42EE           0C                     FF  or	al,#$FF
17700                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
17701                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
17702 42F0           89C3                       mov	bx,ax
17703 42F2           8A46         04            mov	al,4[bp]
17704 42F5           30E4                       xor	ah,ah
17705 42F7           93                         xchg	ax,bx
17706 42F8           40                         inc	ax
17707 42F9           89D9                       mov	cx,bx
17708 42FB           F7E9                       imul	cx
17709                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
17710 42FD           0246         FF            add	al,-1[bp]
17711 4300           80D4                   00  adc	ah,*0
17712                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
17713 4303           0346         F2            add	ax,-$E[bp]
17714 4306           44                         inc	sp
17715 4307           44                         inc	sp
17716                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
17717 4308           8946         F6            mov	-$A[bp],ax
17718                                           !BCC_EOS
17719                                           ! 1949    crtc_addr=read_word(0x40,0x63);
17720                                           ! Debug: list int = const $63 (used reg = )
17721 430B           B8                   0063  mov	ax,*$63
17722 430E           50                         push	ax
17723                                           ! Debug: list int = const $40 (used reg = )
17724 430F           B8                   0040  mov	ax,*$40
17725 4312           50                         push	ax
17726                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17727 4313           E8         37A2            call	_read_word
17728 4316           83C4                   04  add	sp,*4
17729                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
17730 4319           8946         F4            mov	-$C[bp],ax
17731                                           !BCC_EOS
17732                                           ! 1950    outb(crtc_addr,0x0e);
17733                                           ! Debug: list int = const $E (used reg = )
17734 431C           B8                   000E  mov	ax,*$E
17735 431F           50                         push	ax
17736                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17737 4320           FF76         F4            push	-$C[bp]
17738                                           ! Debug: func () void = outb+0 (used reg = )
17739 4323           E8         37EB            call	_outb
17740 4326           83C4                   04  add	sp,*4
17741                                           !BCC_EOS
17742                                           ! 1951    outb(crtc_addr+1,(address&0xff00)>>8);
17743                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
17744 4329           8B46         F6            mov	ax,-$A[bp]
17745 432C           30C0                       xor	al,al
17746                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17747 432E           88E0                       mov	al,ah
17748 4330           30E4                       xor	ah,ah
17749                                           ! Debug: list unsigned int = ax+0 (used reg = )
17750 4332           50                         push	ax
17751                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17752 4333           8B46         F4            mov	ax,-$C[bp]
17753                                           ! Debug: list unsigned int = ax+1 (used reg = )
17754 4336           40                         inc	ax
17755 4337           50                         push	ax
17756                                           ! Debug: func () void = outb+0 (used reg = )
17757 4338           E8         37D6            call	_outb
17758 433B           83C4                   04  add	sp,*4
17759                                           !BCC_EOS
17760                                           ! 1952    outb(crtc_addr,0x0f);
17761                                           ! Debug: list int = const $F (used reg = )
17762 433E           B8                   000F  mov	ax,*$F
17763 4341           50                         push	ax
17764                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17765 4342           FF76         F4            push	-$C[bp]
17766                                           ! Debug: func () void = outb+0 (used reg = )
17767 4345           E8         37C9            call	_outb
17768 4348           83C4                   04  add	sp,*4
17769                                           !BCC_EOS
17770                                           ! 1953    outb(crtc_addr+1,address&0x00ff);
17771                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
17772 434B           8A46         F6            mov	al,-$A[bp]
17773                                           ! Debug: list unsigned char = al+0 (used reg = )
17774 434E           30E4                       xor	ah,ah
17775 4350           50                         push	ax
17776                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17777 4351           8B46         F4            mov	ax,-$C[bp]
17778                                           ! Debug: list unsigned int = ax+1 (used reg = )
17779 4354           40                         inc	ax
17780 4355           50                         push	ax
17781                                           ! Debug: func () void = outb+0 (used reg = )
17782 4356           E8         37B8            call	_outb
17783 4359           83C4                   04  add	sp,*4
17784                                           !BCC_EOS
17785                                           ! 1954   }
17786                                           ! 1955 }
17787                       0000435C            .92:
17788 435C           89EC                       mov	sp,bp
17789 435E           5D                         pop	bp
17790 435F           C3                         ret
17791                                           ! 1956 static void biosfn_get_cursor_pos (page,shape, pos)
17792                                           ! Register BX used in function biosfn_set_cursor_pos
17793                                           ! 1957 Bit8u page;Bit16u *shape;Bit16u *pos;
17794                       00004360            _biosfn_get_cursor_pos:
17795                                           !BCC_EOS
17796                                           !BCC_EOS
17797                                           !BCC_EOS
17798                                           ! 1958 {
17799                                           ! 1959  Bit16u ss=get_SS();
17800 4360           55                         push	bp
17801 4361           89E5                       mov	bp,sp
17802 4363           4C                         dec	sp
17803 4364           4C                         dec	sp
17804                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
17805 4365           E8         37C9            call	_get_SS
17806                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
17807 4368           8946         FE            mov	-2[bp],ax
17808                                           !BCC_EOS
17809                                           ! 1960  write_word(ss, shape, 0);
17810                                           ! Debug: list int = const 0 (used reg = )
17811 436B           31C0                       xor	ax,ax
17812 436D           50                         push	ax
17813                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17814 436E           FF76         06            push	6[bp]
17815                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17816 4371           FF76         FE            push	-2[bp]
17817                                           ! Debug: func () void = write_word+0 (used reg = )
17818 4374           E8         376C            call	_write_word
17819 4377           83C4                   06  add	sp,*6
17820                                           !BCC_EOS
17821                                           ! 1961  write_word(ss, pos, 0);
17822                                           ! Debug: list int = const 0 (used reg = )
17823 437A           31C0                       xor	ax,ax
17824 437C           50                         push	ax
17825                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17826 437D           FF76         08            push	8[bp]
17827                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17828 4380           FF76         FE            push	-2[bp]
17829                                           ! Debug: func () void = write_word+0 (used reg = )
17830 4383           E8         375D            call	_write_word
17831 4386           83C4                   06  add	sp,*6
17832                                           !BCC_EOS
17833                                           ! 1962  if(page>7)return;
17834                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
17835 4389           8A46         04            mov	al,4[bp]
17836 438C           3C                     07  cmp	al,*7
17837 438E           76           04            jbe 	.94
17838                       00004390            .95:
17839 4390           89EC                       mov	sp,bp
17840 4392           5D                         pop	bp
17841 4393           C3                         ret
17842                                           !BCC_EOS
17843                                           ! 1963  write_word(ss,shape,read_word(0x40,0x60));
17844                       00004394            .94:
17845                                           ! Debug: list int = const $60 (used reg = )
17846 4394           B8                   0060  mov	ax,*$60
17847 4397           50                         push	ax
17848                                           ! Debug: list int = const $40 (used reg = )
17849 4398           B8                   0040  mov	ax,*$40
17850 439B           50                         push	ax
17851                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17852 439C           E8         3719            call	_read_word
17853 439F           83C4                   04  add	sp,*4
17854                                           ! Debug: list unsigned short = ax+0 (used reg = )
17855 43A2           50                         push	ax
17856                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17857 43A3           FF76         06            push	6[bp]
17858                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17859 43A6           FF76         FE            push	-2[bp]
17860                                           ! Debug: func () void = write_word+0 (used reg = )
17861 43A9           E8         3737            call	_write_word
17862 43AC           83C4                   06  add	sp,*6
17863                                           !BCC_EOS
17864                                           ! 1964  write_word(ss,pos,read_word(0x40,0x50 +page*2));
17865                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
17866 43AF           8A46         04            mov	al,4[bp]
17867 43B2           30E4                       xor	ah,ah
17868 43B4           D1E0                       shl	ax,*1
17869                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17870                                           ! Debug: expression subtree swapping
17871                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17872 43B6           05                   0050  add	ax,*$50
17873 43B9           50                         push	ax
17874                                           ! Debug: list int = const $40 (used reg = )
17875 43BA           B8                   0040  mov	ax,*$40
17876 43BD           50                         push	ax
17877                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17878 43BE           E8         36F7            call	_read_word
17879 43C1           83C4                   04  add	sp,*4
17880                                           ! Debug: list unsigned short = ax+0 (used reg = )
17881 43C4           50                         push	ax
17882                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17883 43C5           FF76         08            push	8[bp]
17884                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17885 43C8           FF76         FE            push	-2[bp]
17886                                           ! Debug: func () void = write_word+0 (used reg = )
17887 43CB           E8         3715            call	_write_word
17888 43CE           83C4                   06  add	sp,*6
17889                                           !BCC_EOS
17890                                           ! 1965 }
17891 43D1           89EC                       mov	sp,bp
17892 43D3           5D                         pop	bp
17893 43D4           C3                         ret
17894                                           ! 1966 static void biosfn_set_active_page (page)
17895                                           ! 1967 Bit8u page;
17896                       000043D5            _biosfn_set_active_page:
17897                                           !BCC_EOS
17898                                           ! 1968 {
17899                                           ! 1969  Bit16u cursor,dummy,crtc_addr;
17900                                           !BCC_EOS
17901                                           ! 1970  B
17902                                           ! 1970 it16u nbcols,nbrows,address;
17903                                           !BCC_EOS
17904                                           ! 1971  Bit8u mode,line;
17905                                           !BCC_EOS
17906                                           ! 1972  if(page>7)return;
17907 43D5           55                         push	bp
17908 43D6           89E5                       mov	bp,sp
17909 43D8           83C4                   F2  add	sp,*-$E
17910                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
17911 43DB           8A46         04            mov	al,4[bp]
17912 43DE           3C                     07  cmp	al,*7
17913 43E0           76           04            jbe 	.96
17914                       000043E2            .97:
17915 43E2           89EC                       mov	sp,bp
17916 43E4           5D                         pop	bp
17917 43E5           C3                         ret
17918                                           !BCC_EOS
17919                                           ! 1973  mode=read_byte(0x40,0x49);
17920                       000043E6            .96:
17921                                           ! Debug: list int = const $49 (used reg = )
17922 43E6           B8                   0049  mov	ax,*$49
17923 43E9           50                         push	ax
17924                                           ! Debug: list int = const $40 (used reg = )
17925 43EA           B8                   0040  mov	ax,*$40
17926 43ED           50                         push	ax
17927                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17928 43EE           E8         36B4            call	_read_byte
17929 43F1           83C4                   04  add	sp,*4
17930                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
17931 43F4           8846         F3            mov	-$D[bp],al
17932                                           !BCC_EOS
17933                                           ! 1974  line=find_vga_entry(mode);
17934                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
17935 43F7           8A46         F3            mov	al,-$D[bp]
17936 43FA           30E4                       xor	ah,ah
17937 43FC           50                         push	ax
17938                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
17939 43FD           E8         35B9            call	_find_vga_entry
17940 4400           44                         inc	sp
17941 4401           44                         inc	sp
17942                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
17943 4402           8846         F2            mov	-$E[bp],al
17944                                           !BCC_EOS
17945                                           ! 1975  if(line==0xFF)return;
17946                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
17947 4405           8A46         F2            mov	al,-$E[bp]
17948 4408           3C                     FF  cmp	al,#$FF
17949 440A           75           04            jne 	.98
17950                       0000440C            .99:
17951 440C           89EC                       mov	sp,bp
17952 440E           5D                         pop	bp
17953 440F           C3                         ret
17954                                           !BCC_EOS
17955                                           ! 1976  biosfn_get_cursor_pos(page,&dummy,&cursor);
17956                       00004410            .98:
17957                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
17958 4410           8D5E         FE            lea	bx,-2[bp]
17959 4413           53                         push	bx
17960                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
17961 4414           8D5E         FC            lea	bx,-4[bp]
17962 4417           53                         push	bx
17963                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
17964 4418           8A46         04            mov	al,4[bp]
17965 441B           30E4                       xor	ah,ah
17966 441D           50                         push	ax
17967                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
17968 441E           E8         FF3F            call	_biosfn_get_cursor_pos
17969 4421           83C4                   06  add	sp,*6
17970                                           !BCC_EOS
17971                                           ! 1977  if(vga_modes[line].class==0x00)
17972                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
17973 4424           8A46         F2            mov	al,-$E[bp]
17974 4427           30E4                       xor	ah,ah
17975 4429           B1                     03  mov	cl,*3
17976 442B           D3E0                       shl	ax,cl
17977 442D           89C3                       mov	bx,ax
17978 442F           81C3                 01DC  add	bx,#_vga_modes
17979                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17980 4433           8A47         01            mov	al,1[bx]
17981 4436           84C0                       test	al,al
17982 4438           75           6E            jne 	.9A
17983                       0000443A            .9B:
17984                                           ! 1978   {
17985                                           ! 1979    nbcols=read_word(0x40,0x4A);
17986                                           ! Debug: list int = const $4A (used reg = )
17987 443A           B8                   004A  mov	ax,*$4A
17988 443D           50                         push	ax
17989                                           ! Debug: list int = const $40 (used reg = )
17990 443E           B8                   0040  mov	ax,*$40
17991 4441           50                         push	ax
17992                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17993 4442           E8         3673            call	_read_word
17994 4445           83C4                   04  add	sp,*4
17995                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
17996 4448           8946         F8            mov	-8[bp],ax
17997                                           !BCC_EOS
17998                                           ! 1980    nbrows=read_byte(0x40,0x84)+1;
17999                                           ! Debug: list int = const $84 (used reg = )
18000 444B           B8                   0084  mov	ax,#$84
18001 444E           50                         push	ax
18002                                           ! Debug: list int = const $40 (used reg = )
18003 444F           B8                   0040  mov	ax,*$40
18004 4452           50                         push	ax
18005                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18006 4453           E8         364F            call	_read_byte
18007 4456           83C4                   04  add	sp,*4
18008                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18009 4459           30E4                       xor	ah,ah
18010                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18011 445B           40                         inc	ax
18012 445C           8946         F6            mov	-$A[bp],ax
18013                                           !BCC_EOS
18014                                           ! 1981    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18015                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18016 445F           8B46         F8            mov	ax,-8[bp]
18017 4462           8B4E         F6            mov	cx,-$A[bp]
18018 4465           F7E9                       imul	cx
18019                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18020 4467           D1E0                       shl	ax,*1
18021                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18022 4469           0C                     FF  or	al,#$FF
18023                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18024                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18025 446B           89C3                       mov	bx,ax
18026 446D           8A46         04            mov	al,4[bp]
18027 4470           30E4                       xor	ah,ah
18028 4472           93                         xchg	ax,bx
18029 4473           40                         inc	ax
18030 4474           89D9                       mov	cx,bx
18031 4476           F7E9                       imul	cx
18032                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18033 4478           8946         F4            mov	-$C[bp],ax
18034                                           !BCC_EOS
18035                                           ! 1982    write_word(0x40,0x4E,address);
18036                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18037 447B           FF76         F4            push	-$C[bp]
18038                                           ! Debug: list int = const $4E (used reg = )
18039 447E           B8                   004E  mov	ax,*$4E
18040 4481           50                         push	ax
18041                                           ! Debug: list int = const $40 (used reg = )
18042 4482           B8                   0040  mov	ax,*$40
18043 4485           50                         push	ax
18044                                           ! Debug: func () void = write_word+0 (used reg = )
18045 4486           E8         365A            call	_write_word
18046 4489           83C4                   06  add	sp,*6
18047                                           !BCC_EOS
18048                                           ! 1983    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18049                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18050 448C           8B46         F8            mov	ax,-8[bp]
18051 448F           8B4E         F6            mov	cx,-$A[bp]
18052 4492           F7E9                       imul	cx
18053                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18054 4494           0C                     FF  or	al,#$FF
18055                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18056                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18057 4496           89C3                       mov	bx,ax
18058 4498           8A46         04            mov	al,4[bp]
18059 449B           30E4                       xor	ah,ah
18060 449D           93                         xchg	ax,bx
18061 449E           40                         inc	ax
18062 449F           89D9                       mov	cx,bx
18063 44A1           F7E9                       imul	cx
18064                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18065 44A3           8946         F4            mov	-$C[bp],ax
18066                                           !BCC_EOS
18067                                           ! 1984   }
18068                                           ! 1985  else
18069                                           ! 1986   {
18070 44A6           EB           24            jmp .9C
18071                       000044A8            .9A:
18072                                           ! 1987    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18073                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18074 44A8           8A46         F2            mov	al,-$E[bp]
18075 44AB           30E4                       xor	ah,ah
18076 44AD           89C3                       mov	bx,ax
18077                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18078 44AF           8A87       025C            mov	al,_line_to_vpti[bx]
18079 44B3           30E4                       xor	ah,ah
18080 44B5           B1                     06  mov	cl,*6
18081 44B7           D3E0                       shl	ax,cl
18082 44B9           89C3                       mov	bx,ax
18083 44BB           81C3                 0270  add	bx,#_video_param_table
18084                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18085                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18086                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18087 44BF           8A46         04            mov	al,4[bp]
18088 44C2           30E4                       xor	ah,ah
18089 44C4           8B4F         03            mov	cx,3[bx]
18090 44C7           F7E9                       imul	cx
18091                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18092 44C9           8946         F4            mov	-$C[bp],ax
18093                                           !BCC_EOS
18094                                           ! 1988   }
18095                                           ! 1989  crtc_addr=read_word(0x40,0x63);
18096                       000044CC            .9C:
18097                                           ! Debug: list int = const $63 (used reg = )
18098 44CC           B8                   0063  mov	ax,*$63
18099 44CF           50                         push	ax
18100                                           ! Debug: list int = const $40 (used reg = )
18101 44D0           B8                   0040  mov	ax,*$40
18102 44D3           50                         push	ax
18103                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18104 44D4           E8         35E1            call	_read_word
18105 44D7           83C4                   04  add	sp,*4
18106                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18107 44DA           8946         FA            mov	-6[bp],ax
18108                                           !BCC_EOS
18109                                           ! 1990  outb(crtc_addr,0x0c);
18110                                           ! Debug: list int = const $C (used reg = )
18111 44DD           B8                   000C  mov	ax,*$C
18112 44E0           50                         push	ax
18113                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18114 44E1           FF76         FA            push	-6[bp]
18115                                           ! Debug: func () void = outb+0 (used reg = )
18116 44E4           E8         362A            call	_outb
18117 44E7           83C4                   04  add	sp,*4
18118                                           !BCC_EOS
18119                                           ! 1991  outb(crtc_addr+1,(address&0xff00)>>8);
18120                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18121 44EA           8B46         F4            mov	ax,-$C[bp]
18122 44ED           30C0                       xor	al,al
18123                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18124 44EF           88E0                       mov	al,ah
18125 44F1           30E4                       xor	ah,ah
18126                                           ! Debug: list unsigned int = ax+0 (used reg = )
18127 44F3           50                         push	ax
18128                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18129 44F4           8B46         FA            mov	ax,-6[bp]
18130                                           ! Debug: list unsigned int = ax+1 (used reg = )
18131 44F7           40                         inc	ax
18132 44F8           50                         push	ax
18133                                           ! Debug: func () void = outb+0 (used reg = )
18134 44F9           E8         3615            call	_outb
18135 44FC           83C4                   04  add	sp,*4
18136                                           !BCC_EOS
18137                                           ! 1992  outb(crtc_addr,0x0d);
18138                                           ! Debug: list int = const $D (used reg = )
18139 44FF           B8                   000D  mov	ax,*$D
18140 4502           50                         push	ax
18141                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18142 4503           FF76         FA            push	-6[bp]
18143                                           ! Debug: func () void = outb+0 (used reg = )
18144 4506           E8         3608            call	_outb
18145 4509           83C4                   04  add	sp,*4
18146                                           !BCC_EOS
18147                                           ! 1993  outb(crtc_addr+1,address&0x00ff);
18148                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18149 450C           8A46         F4            mov	al,-$C[bp]
18150                                           ! Debug: list unsigned char = al+0 (used reg = )
18151 450F           30E4                       xor	ah,ah
18152 4511           50                         push	ax
18153                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18154 4512           8B46         FA            mov	ax,-6[bp]
18155                                           ! Debug: list unsigned int = ax+1 (used reg = )
18156 4515           40                         inc	ax
18157 4516           50                         push	ax
18158                                           ! Debug: func () void = outb+0 (used reg = )
18159 4517           E8         35F7            call	_outb
18160 451A           83C4                   04  add	sp,*4
18161                                           !BCC_EOS
18162                                           ! 1994  write_byte(0x40,0x62,page);
18163                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18164 451D           8A46         04            mov	al,4[bp]
18165 4520           30E4                       xor	ah,ah
18166 4522           50                         push	ax
18167                                           ! Debug: list int = const $62 (used reg = )
18168 4523           B8                   0062  mov	ax,*$62
18169 4526           50                         push	ax
18170                                           ! Debug: list int = const $40 (used reg = )
18171 4527           B8                   0040  mov	ax,*$40
18172 452A           50                         push	ax
18173                                           ! Debug: func () void = write_byte+0 (used reg = )
18174 452B           E8         359D            call	_write_byte
18175 452E           83C4                   06  add	sp,*6
18176                                           !BCC_EOS
18177                                           ! 1995  biosfn_set_cursor_pos(page,cursor);
18178                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18179 4531           FF76         FE            push	-2[bp]
18180                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18181 4534           8A46         04            mov	al,4[bp]
18182 4537           30E4                       xor	ah,ah
18183 4539           50                         push	ax
18184                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18185 453A           E8         FD23            call	_biosfn_set_cursor_pos
18186 453D           83C4                   04  add	sp,*4
18187                                           !BCC_EOS
18188                                           ! 1996 }
18189 4540           89EC                       mov	sp,bp
18190 4542           5D                         pop	bp
18191 4543           C3                         ret
18192                                           ! 1997 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18193                                           ! Register BX used in function biosfn_set_active_page
18194                                           ! 1998 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18195                       00004544            _vgamem_copy_pl4:
18196                                           !BCC_EOS
18197                                           !BCC_EOS
18198                                           !BCC_EOS
18199                                           !BCC_EOS
18200                                           !BCC_EOS
18201                                           !BCC_EOS
18202                                           ! 1999 {
18203                                           ! 2000  Bit16u src,dest;
18204                                           !BCC_EOS
18205                                           ! 2001  Bit8u i;
18206                                           !BCC_EOS
18207                                           ! 2002  src=ysrc*cheight*nbcols+xstart;
18208 4544           55                         push	bp
18209 4545           89E5                       mov	bp,sp
18210 4547           83C4                   FA  add	sp,*-6
18211                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18212 454A           8A46         0E            mov	al,$E[bp]
18213 454D           30E4                       xor	ah,ah
18214 454F           89C3                       mov	bx,ax
18215 4551           8A46         06            mov	al,6[bp]
18216 4554           30E4                       xor	ah,ah
18217 4556           89D9                       mov	cx,bx
18218 4558           F7E9                       imul	cx
18219                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18220 455A           89C3                       mov	bx,ax
18221 455C           8A46         0C            mov	al,$C[bp]
18222 455F           30E4                       xor	ah,ah
18223 4561           93                         xchg	ax,bx
18224 4562           89D9                       mov	cx,bx
18225 4564           F7E9                       imul	cx
18226                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18227 4566           0246         04            add	al,4[bp]
18228 4569           80D4                   00  adc	ah,*0
18229                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18230 456C           8946         FE            mov	-2[bp],ax
18231                                           !BCC_EOS
18232                                           ! 2003  dest=ydest*cheight*nbcols+xstart;
18233                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18234 456F           8A46         0E            mov	al,$E[bp]
18235 4572           30E4                       xor	ah,ah
18236 4574           89C3                       mov	bx,ax
18237 4576           8A46         08            mov	al,8[bp]
18238 4579           30E4                       xor	ah,ah
18239 457B           89D9                       mov	cx,bx
18240 457D           F7E9                       imul	cx
18241                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18242 457F           89C3                       mov	bx,ax
18243 4581           8A46         0C            mov	al,$C[bp]
18244 4584           30E4                       xor	ah,ah
18245 4586           93                         xchg	ax,bx
18246 4587           89D9                       mov	cx,bx
18247 4589           F7E9                       imul	cx
18248                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18249 458B           0246         04            add	al,4[bp]
18250 458E           80D4                   00  adc	ah,*0
18251                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18252 4591           8946         FC            mov	-4[bp],ax
18253                                           !BCC_EOS
18254                                           ! 2004  outw(0x3ce, 0x0105);
18255                                           ! Debug: list int = const $105 (used reg = )
18256 4594           B8                   0105  mov	ax,#$105
18257 4597           50                         push	ax
18258                                           ! Debug: list int = const $3CE (used reg = )
18259 4598           B8                   03CE  mov	ax,#$3CE
18260 459B           50                         push	ax
18261                                           ! Debug: func () void = outw+0 (used reg = )
18262 459C           E8         3582            call	_outw
18263 459F           83C4                   04  add	sp,*4
18264                                           !BCC_EOS
18265                                           ! 2005  for(i=0;i<cheight;i++)
18266                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18267 45A2           30C0                       xor	al,al
18268 45A4           8846         FB            mov	-5[bp],al
18269                                           !BCC_EOS
18270                                           !BCC_EOS
18271                                           ! 2006   {
18272 45A7           EB           43            jmp .9F
18273                       000045A9            .A0:
18274                                           ! 2007    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18275                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18276 45A9           8A46         0A            mov	al,$A[bp]
18277 45AC           30E4                       xor	ah,ah
18278 45AE           50                         push	ax
18279                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18280 45AF           8A46         0C            mov	al,$C[bp]
18281 45B2           30E4                       xor	ah,ah
18282 45B4           89C3                       mov	bx,ax
18283 45B6           8A46         FB            mov	al,-5[bp]
18284 45B9           30E4                       xor	ah,ah
18285 45BB           89D9                       mov	cx,bx
18286 45BD           F7E9                       imul	cx
18287                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18288                                           ! Debug: expression subtree swapping
18289 45BF           0346         FE            add	ax,-2[bp]
18290                                           ! Debug: list unsigned int = ax+0 (used reg = )
18291 45C2           50                         push	ax
18292                                           ! Debug: list unsigned int = const $A000 (used reg = )
18293 45C3           B8                   A000  mov	ax,#$A000
18294 45C6           50                         push	ax
18295                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18296 45C7           8A46         0C            mov	al,$C[bp]
18297 45CA           30E4                       xor	ah,ah
18298 45CC           89C3                       mov	bx,ax
18299 45CE           8A46         FB            mov	al,-5[bp]
18300 45D1           30E4                       xor	ah,ah
18301 45D3           89D9                       mov	cx,bx
18302 45D5           F7E9                       imul	cx
18303                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18304                                           ! Debug: expression subtree swapping
18305 45D7           0346         FC            add	ax,-4[bp]
18306                                           ! Debug: list unsigned int = ax+0 (used reg = )
18307 45DA           50                         push	ax
18308                                           ! Debug: list unsigned int = const $A000 (used reg = )
18309 45DB           B8                   A000  mov	ax,#$A000
18310 45DE           50                         push	ax
18311                                           ! Debug: func () void = memcpyb+0 (used reg = )
18312 45DF           E8         3463            call	_memcpyb
18313 45E2           83C4                   0A  add	sp,*$A
18314                                           !BCC_EOS
18315                                           ! 2008   }
18316                                           ! 2009  outw(0x3ce, 0x0005);
18317                       000045E5            .9E:
18318                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18319 45E5           8A46         FB            mov	al,-5[bp]
18320 45E8           40                         inc	ax
18321 45E9           8846         FB            mov	-5[bp],al
18322                       000045EC            .9F:
18323                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18324 45EC           8A46         FB            mov	al,-5[bp]
18325 45EF           3A46         0E            cmp	al,$E[bp]
18326 45F2           72           B5            jb 	.A0
18327                       000045F4            .A1:
18328                       000045F4            .9D:
18329                                           ! Debug: list int = const 5 (used reg = )
18330 45F4           B8                   0005  mov	ax,*5
18331 45F7           50                         push	ax
18332                                           ! Debug: list int = const $3CE (used reg = )
18333 45F8           B8                   03CE  mov	ax,#$3CE
18334 45FB           50                         push	ax
18335                                           ! Debug: func () void = outw+0 (used reg = )
18336 45FC           E8         3522            call	_outw
18337 45FF           83C4                   04  add	sp,*4
18338                                           !BCC_EOS
18339                                           ! 2010 }
18340 4602           89EC                       mov	sp,bp
18341 4604           5D                         pop	bp
18342 4605           C3                         ret
18343                                           ! 2011 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18344                                           ! Register BX used in function vgamem_copy_pl4
18345                                           ! 2012 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18346                       00004606            _vgamem_fill_pl4:
18347                                           !BCC_EOS
18348                                           !BCC_EOS
18349                                           !BCC_EOS
18350                                           !BCC_EOS
18351                                           !BCC_EOS
18352                                           !BCC_EOS
18353                                           ! 2013 {
18354                                           ! 2014  Bit16u dest;
18355                                           !BCC_EOS
18356                                           ! 2015  Bit8u i;
18357                                           !BCC_EOS
18358                                           ! 2016  dest=ystart*cheight*nbcols+xstart;
18359 4606           55                         push	bp
18360 4607           89E5                       mov	bp,sp
18361 4609           83C4                   FC  add	sp,*-4
18362                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18363 460C           8A46         0C            mov	al,$C[bp]
18364 460F           30E4                       xor	ah,ah
18365 4611           89C3                       mov	bx,ax
18366 4613           8A46         06            mov	al,6[bp]
18367 4616           30E4                       xor	ah,ah
18368 4618           89D9                       mov	cx,bx
18369 461A           F7E9                       imul	cx
18370                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18371 461C           89C3                       mov	bx,ax
18372 461E           8A46         0A            mov	al,$A[bp]
18373 4621           30E4                       xor	ah,ah
18374 4623           93                         xchg	ax,bx
18375 4624           89D9                       mov	cx,bx
18376 4626           F7E9                       imul	cx
18377                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18378 4628           0246         04            add	al,4[bp]
18379 462B           80D4                   00  adc	ah,*0
18380                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18381 462E           8946         FE            mov	-2[bp],ax
18382                                           !BCC_EOS
18383                                           ! 2017  outw(0x3ce, 0x0205);
18384                                           ! Debug: list int = const $205 (used reg = )
18385 4631           B8                   0205  mov	ax,#$205
18386 4634           50                         push	ax
18387                                           ! Debug: list int = const $3CE (used reg = )
18388 4635           B8                   03CE  mov	ax,#$3CE
18389 4638           50                         push	ax
18390                                           ! Debug: func () void = outw+0 (used reg = )
18391 4639           E8         34E5            call	_outw
18392 463C           83C4                   04  add	sp,*4
18393                                           !BCC_EOS
18394                                           ! 2018  for(i=0;i<cheight;i++)
18395                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18396 463F           30C0                       xor	al,al
18397 4641           8846         FD            mov	-3[bp],al
18398                                           !BCC_EOS
18399                                           !BCC_EOS
18400                                           ! 2019   {
18401 4644           EB           31            jmp .A4
18402                       00004646            .A5:
18403                                           ! 2020    memsetb(0xa000,dest+i*nbcols,attr,cols);
18404                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18405 4646           8A46         08            mov	al,8[bp]
18406 4649           30E4                       xor	ah,ah
18407 464B           50                         push	ax
18408                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18409 464C           8A46         0E            mov	al,$E[bp]
18410 464F           30E4                       xor	ah,ah
18411 4651           50                         push	ax
18412                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18413 4652           8A46         0A            mov	al,$A[bp]
18414 4655           30E4                       xor	ah,ah
18415 4657           89C3                       mov	bx,ax
18416 4659           8A46         FD            mov	al,-3[bp]
18417 465C           30E4                       xor	ah,ah
18418 465E           89D9                       mov	cx,bx
18419 4660           F7E9                       imul	cx
18420                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18421                                           ! Debug: expression subtree swapping
18422 4662           0346         FE            add	ax,-2[bp]
18423                                           ! Debug: list unsigned int = ax+0 (used reg = )
18424 4665           50                         push	ax
18425                                           ! Debug: list unsigned int = const $A000 (used reg = )
18426 4666           B8                   A000  mov	ax,#$A000
18427 4669           50                         push	ax
18428                                           ! Debug: func () void = memsetb+0 (used reg = )
18429 466A           E8         338E            call	_memsetb
18430 466D           83C4                   08  add	sp,*8
18431                                           !BCC_EOS
18432                                           ! 2021   }
18433                                           ! 2022  outw(0x3ce, 0x0005);
18434                       00004670            .A3:
18435                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18436 4670           8A46         FD            mov	al,-3[bp]
18437 4673           40                         inc	ax
18438 4674           8846         FD            mov	-3[bp],al
18439                       00004677            .A4:
18440                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18441 4677           8A46         FD            mov	al,-3[bp]
18442 467A           3A46         0C            cmp	al,$C[bp]
18443 467D           72           C7            jb 	.A5
18444                       0000467F            .A6:
18445                       0000467F            .A2:
18446                                           ! Debug: list int = const 5 (used reg = )
18447 467F           B8                   0005  mov	ax,*5
18448 4682           50                         push	ax
18449                                           ! Debug: list int = const $3CE (used reg = )
18450 4683           B8                   03CE  mov	ax,#$3CE
18451 4686           50                         push	ax
18452                                           ! Debug: func () void = outw+0 (used reg = )
18453 4687           E8         3497            call	_outw
18454 468A           83C4                   04  add	sp,*4
18455                                           !BCC_EOS
18456                                           ! 2023 }
18457 468D           89EC                       mov	sp,bp
18458 468F           5D                         pop	bp
18459 4690           C3                         ret
18460                                           ! 2024 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18461                                           ! Register BX used in function vgamem_fill_pl4
18462                                           ! 2025 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18463                       00004691            _vgamem_copy_cga:
18464                                           !BCC_EOS
18465                                           !BCC_EOS
18466                                           !BCC_EOS
18467                                           !BCC_EOS
18468                                           !BCC_EOS
18469                                           !BCC_EOS
18470                                           ! 2026 {
18471                                           ! 2027  Bit16u src,dest;
18472                                           !BCC_EOS
18473                                           ! 2028  Bit8u i;
18474                                           !BCC_EOS
18475                                           ! 2029  src=((ysrc*cheight*nbcols)>>1)+xstart;
18476 4691           55                         push	bp
18477 4692           89E5                       mov	bp,sp
18478 4694           83C4                   FA  add	sp,*-6
18479                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18480 4697           8A46         0E            mov	al,$E[bp]
18481 469A           30E4                       xor	ah,ah
18482 469C           89C3                       mov	bx,ax
18483 469E           8A46         06            mov	al,6[bp]
18484 46A1           30E4                       xor	ah,ah
18485 46A3           89D9                       mov	cx,bx
18486 46A5           F7E9                       imul	cx
18487                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18488 46A7           89C3                       mov	bx,ax
18489 46A9           8A46         0C            mov	al,$C[bp]
18490 46AC           30E4                       xor	ah,ah
18491 46AE           93                         xchg	ax,bx
18492 46AF           89D9                       mov	cx,bx
18493 46B1           F7E9                       imul	cx
18494                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18495 46B3           D1E8                       shr	ax,*1
18496                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18497 46B5           0246         04            add	al,4[bp]
18498 46B8           80D4                   00  adc	ah,*0
18499                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18500 46BB           8946         FE            mov	-2[bp],ax
18501                                           !BCC_EOS
18502                                           ! 2030  dest=((ydest*cheight*nbcols)>>1)+xstart;
18503                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18504 46BE           8A46         0E            mov	al,$E[bp]
18505 46C1           30E4                       xor	ah,ah
18506 46C3           89C3                       mov	bx,ax
18507 46C5           8A46         08            mov	al,8[bp]
18508 46C8           30E4                       xor	ah,ah
18509 46CA           89D9                       mov	cx,bx
18510 46CC           F7E9                       imul	cx
18511                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18512 46CE           89C3                       mov	bx,ax
18513 46D0           8A46         0C            mov	al,$C[bp]
18514 46D3           30E4                       xor	ah,ah
18515 46D5           93                         xchg	ax,bx
18516 46D6           89D9                       mov	cx,bx
18517 46D8           F7E9                       imul	cx
18518                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18519 46DA           D1E8                       shr	ax,*1
18520                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18521 46DC           0246         04            add	al,4[bp]
18522 46DF           80D4                   00  adc	ah,*0
18523                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18524 46E2           8946         FC            mov	-4[bp],ax
18525                                           !BCC_EOS
18526                                           ! 2031  for(i=0;i<cheight;i++)
18527                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18528 46E5           30C0                       xor	al,al
18529 46E7           8846         FB            mov	-5[bp],al
18530                                           !BCC_EOS
18531                                           !BCC_EOS
18532                                           ! 2032   {
18533 46EA           E9         00A8            br 	.A9
18534                       000046ED            .AA:
18535                                           ! 2033    if (i & 1)
18536                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18537 46ED           8A46         FB            mov	al,-5[bp]
18538 46F0           24                     01  and	al,*1
18539 46F2           84C0                       test	al,al
18540 46F4           74           56            je  	.AB
18541                       000046F6            .AC:
18542                                           ! 2034      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18543                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18544 46F6           8A46         0A            mov	al,$A[bp]
18545 46F9           30E4                       xor	ah,ah
18546 46FB           50                         push	ax
18547                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18548 46FC           8A46         FB            mov	al,-5[bp]
18549 46FF           30E4                       xor	ah,ah
18550 4701           D1E8                       shr	ax,*1
18551                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18552 4703           89C3                       mov	bx,ax
18553 4705           8A46         0C            mov	al,$C[bp]
18554 4708           30E4                       xor	ah,ah
18555 470A           93                         xchg	ax,bx
18556 470B           89D9                       mov	cx,bx
18557 470D           F7E9                       imul	cx
18558 470F           50                         push	ax
18559                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
18560                                           ! Debug: expression subtree swapping
18561 4710           8B46         FE            mov	ax,-2[bp]
18562                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18563 4713           05                   2000  add	ax,#$2000
18564 4716           0346         F6            add	ax,-$A[bp]
18565 4719           44                         inc	sp
18566 471A           44                         inc	sp
18567                                           ! Debug: list unsigned int = ax+0 (used reg = )
18568 471B           50                         push	ax
18569                                           ! Debug: list unsigned int = const $B800 (used reg = )
18570 471C           B8                   B800  mov	ax,#$B800
18571 471F           50                         push	ax
18572                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18573 4720           8A46         FB            mov	al,-5[bp]
18574 4723           30E4                       xor	ah,ah
18575 4725           D1E8                       shr	ax,*1
18576                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18577 4727           89C3                       mov	bx,ax
18578 4729           8A46         0C            mov	al,$C[bp]
18579 472C           30E4                       xor	ah,ah
18580 472E           93                         xchg	ax,bx
18581 472F           89D9                       mov	cx,bx
18582 4731           F7E9                       imul	cx
18583 4733           50                         push	ax
18584                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
18585                                           ! Debug: expression subtree swapping
18586 4734           8B46         FC            mov	ax,-4[bp]
18587                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
18588 4737           05                   2000  add	ax,#$2000
18589 473A           0346         F2            add	ax,-$E[bp]
18590 473D           44                         inc	sp
18591 473E           44                         inc	sp
18592                                           ! Debug: list unsigned int = ax+0 (used reg = )
18593 473F           50                         push	ax
18594                                           ! Debug: list unsigned int = const $B800 (used reg = )
18595 4740           B8                   B800  mov	ax,#$B800
18596 4743           50                         push	ax
18597                                           ! Debug: func () void = memcpyb+0 (used reg = )
18598 4744           E8         32FE            call	_memcpyb
18599 4747           83C4                   0A  add	sp,*$A
18600                                           !BCC_EOS
18601                                           ! 2035    else
18602                                           ! 2036      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
18603 474A           EB           42            jmp .AD
18604                       0000474C            .AB:
18605                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18606 474C           8A46         0A            mov	al,$A[bp]
18607 474F           30E4                       xor	ah,ah
18608 4751           50                         push	ax
18609                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18610 4752           8A46         FB            mov	al,-5[bp]
18611 4755           30E4                       xor	ah,ah
18612 4757           D1E8                       shr	ax,*1
18613                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18614 4759           89C3                       mov	bx,ax
18615 475B           8A46         0C            mov	al,$C[bp]
18616 475E           30E4                       xor	ah,ah
18617 4760           93                         xchg	ax,bx
18618 4761           89D9                       mov	cx,bx
18619 4763           F7E9                       imul	cx
18620                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18621                                           ! Debug: expression subtree swapping
18622 4765           0346         FE            add	ax,-2[bp]
18623                                           ! Debug: list unsigned int = ax+0 (used reg = )
18624 4768           50                         push	ax
18625                                           ! Debug: list unsigned int = const $B800 (used reg = )
18626 4769           B8                   B800  mov	ax,#$B800
18627 476C           50                         push	ax
18628                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18629 476D           8A46         FB            mov	al,-5[bp]
18630 4770           30E4                       xor	ah,ah
18631 4772           D1E8                       shr	ax,*1
18632                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18633 4774           89C3                       mov	bx,ax
18634 4776           8A46         0C            mov	al,$C[bp]
18635 4779           30E4                       xor	ah,ah
18636 477B           93                         xchg	ax,bx
18637 477C           89D9                       mov	cx,bx
18638 477E           F7E9                       imul	cx
18639                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18640                                           ! Debug: expression subtree swapping
18641 4780           0346         FC            add	ax,-4[bp]
18642                                           ! Debug: list unsigned int = ax+0 (used reg = )
18643 4783           50                         push	ax
18644                                           ! Debug: list unsigned int = const $B800 (used reg = )
18645 4784           B8                   B800  mov	ax,#$B800
18646 4787           50                         push	ax
18647                                           ! Debug: func () void = memcpyb+0 (used reg = )
18648 4788           E8         32BA            call	_memcpyb
18649 478B           83C4                   0A  add	sp,*$A
18650                                           !BCC_EOS
18651                                           ! 2037   }
18652                       0000478E            .AD:
18653                                           ! 2038 }
18654                       0000478E            .A8:
18655                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18656 478E           8A46         FB            mov	al,-5[bp]
18657 4791           40                         inc	ax
18658 4792           8846         FB            mov	-5[bp],al
18659                       00004795            .A9:
18660                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18661 4795           8A46         FB            mov	al,-5[bp]
18662 4798           3A46         0E            cmp	al,$E[bp]
18663 479B         0F82         FF4E            blo 	.AA
18664                       0000479F            .AE:
18665                       0000479F            .A7:
18666 479F           89EC                       mov	sp,bp
18667 47A1           5D                         pop	bp
18668 47A2           C3                         ret
18669                                           ! 2039 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
18670                                           ! Register BX used in function vgamem_copy_cga
18671                                           ! 2040 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheig
18672                       000047A3            _vgamem_fill_cga:
18673                                           !BCC_EOS
18674                                           !BCC_EOS
18675                                           !BCC_EOS
18676                                           !BCC_EOS
18677                                           ! 2040 ht;Bit8u attr;
18678                                           !BCC_EOS
18679                                           !BCC_EOS
18680                                           ! 2041 {
18681                                           ! 2042  Bit16u dest;
18682                                           !BCC_EOS
18683                                           ! 2043  Bit8u i;
18684                                           !BCC_EOS
18685                                           ! 2044  dest=((ystart*cheight*nbcols)>>1)+xstart;
18686 47A3           55                         push	bp
18687 47A4           89E5                       mov	bp,sp
18688 47A6           83C4                   FC  add	sp,*-4
18689                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18690 47A9           8A46         0C            mov	al,$C[bp]
18691 47AC           30E4                       xor	ah,ah
18692 47AE           89C3                       mov	bx,ax
18693 47B0           8A46         06            mov	al,6[bp]
18694 47B3           30E4                       xor	ah,ah
18695 47B5           89D9                       mov	cx,bx
18696 47B7           F7E9                       imul	cx
18697                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18698 47B9           89C3                       mov	bx,ax
18699 47BB           8A46         0A            mov	al,$A[bp]
18700 47BE           30E4                       xor	ah,ah
18701 47C0           93                         xchg	ax,bx
18702 47C1           89D9                       mov	cx,bx
18703 47C3           F7E9                       imul	cx
18704                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18705 47C5           D1E8                       shr	ax,*1
18706                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18707 47C7           0246         04            add	al,4[bp]
18708 47CA           80D4                   00  adc	ah,*0
18709                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18710 47CD           8946         FE            mov	-2[bp],ax
18711                                           !BCC_EOS
18712                                           ! 2045  for(i=0;i<cheight;i++)
18713                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18714 47D0           30C0                       xor	al,al
18715 47D2           8846         FD            mov	-3[bp],al
18716                                           !BCC_EOS
18717                                           !BCC_EOS
18718                                           ! 2046   {
18719 47D5           EB           75            jmp .B1
18720                       000047D7            .B2:
18721                                           ! 2047    if (i & 1)
18722                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
18723 47D7           8A46         FD            mov	al,-3[bp]
18724 47DA           24                     01  and	al,*1
18725 47DC           84C0                       test	al,al
18726 47DE           74           38            je  	.B3
18727                       000047E0            .B4:
18728                                           ! 2048      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
18729                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18730 47E0           8A46         08            mov	al,8[bp]
18731 47E3           30E4                       xor	ah,ah
18732 47E5           50                         push	ax
18733                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18734 47E6           8A46         0E            mov	al,$E[bp]
18735 47E9           30E4                       xor	ah,ah
18736 47EB           50                         push	ax
18737                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18738 47EC           8A46         FD            mov	al,-3[bp]
18739 47EF           30E4                       xor	ah,ah
18740 47F1           D1E8                       shr	ax,*1
18741                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18742 47F3           89C3                       mov	bx,ax
18743 47F5           8A46         0A            mov	al,$A[bp]
18744 47F8           30E4                       xor	ah,ah
18745 47FA           93                         xchg	ax,bx
18746 47FB           89D9                       mov	cx,bx
18747 47FD           F7E9                       imul	cx
18748 47FF           50                         push	ax
18749                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
18750                                           ! Debug: expression subtree swapping
18751 4800           8B46         FE            mov	ax,-2[bp]
18752                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18753 4803           05                   2000  add	ax,#$2000
18754 4806           0346         F6            add	ax,-$A[bp]
18755 4809           44                         inc	sp
18756 480A           44                         inc	sp
18757                                           ! Debug: list unsigned int = ax+0 (used reg = )
18758 480B           50                         push	ax
18759                                           ! Debug: list unsigned int = const $B800 (used reg = )
18760 480C           B8                   B800  mov	ax,#$B800
18761 480F           50                         push	ax
18762                                           ! Debug: func () void = memsetb+0 (used reg = )
18763 4810           E8         31E8            call	_memsetb
18764 4813           83C4                   08  add	sp,*8
18765                                           !BCC_EOS
18766                                           ! 2049    else
18767                                           ! 2050      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
18768 4816           EB           2D            jmp .B5
18769                       00004818            .B3:
18770                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18771 4818           8A46         08            mov	al,8[bp]
18772 481B           30E4                       xor	ah,ah
18773 481D           50                         push	ax
18774                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18775 481E           8A46         0E            mov	al,$E[bp]
18776 4821           30E4                       xor	ah,ah
18777 4823           50                         push	ax
18778                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18779 4824           8A46         FD            mov	al,-3[bp]
18780 4827           30E4                       xor	ah,ah
18781 4829           D1E8                       shr	ax,*1
18782                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18783 482B           89C3                       mov	bx,ax
18784 482D           8A46         0A            mov	al,$A[bp]
18785 4830           30E4                       xor	ah,ah
18786 4832           93                         xchg	ax,bx
18787 4833           89D9                       mov	cx,bx
18788 4835           F7E9                       imul	cx
18789                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18790                                           ! Debug: expression subtree swapping
18791 4837           0346         FE            add	ax,-2[bp]
18792                                           ! Debug: list unsigned int = ax+0 (used reg = )
18793 483A           50                         push	ax
18794                                           ! Debug: list unsigned int = const $B800 (used reg = )
18795 483B           B8                   B800  mov	ax,#$B800
18796 483E           50                         push	ax
18797                                           ! Debug: func () void = memsetb+0 (used reg = )
18798 483F           E8         31B9            call	_memsetb
18799 4842           83C4                   08  add	sp,*8
18800                                           !BCC_EOS
18801                                           ! 2051   }
18802                       00004845            .B5:
18803                                           ! 2052 }
18804                       00004845            .B0:
18805                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18806 4845           8A46         FD            mov	al,-3[bp]
18807 4848           40                         inc	ax
18808 4849           8846         FD            mov	-3[bp],al
18809                       0000484C            .B1:
18810                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18811 484C           8A46         FD            mov	al,-3[bp]
18812 484F           3A46         0C            cmp	al,$C[bp]
18813 4852           72           83            jb 	.B2
18814                       00004854            .B6:
18815                       00004854            .AF:
18816 4854           89EC                       mov	sp,bp
18817 4856           5D                         pop	bp
18818 4857           C3                         ret
18819                                           ! 2053 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
18820                                           ! Register BX used in function vgamem_fill_cga
18821                                           ! 2054 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
18822                       00004858            _biosfn_scroll:
18823                                           !BCC_EOS
18824                                           !BCC_EOS
18825                                           !BCC_EOS
18826                                           !BCC_EOS
18827                                           !BCC_EOS
18828                                           !BCC_EOS
18829                                           !BCC_EOS
18830                                           !BCC_EOS
18831                                           ! 2055 {
18832                                           ! 2056  Bit8u mode,line,cheight,bpp,cols;
18833                                           !BCC_EOS
18834                                           ! 2057  Bit16u nbcols,nbrows,i;
18835                                           !BCC_EOS
18836                                           ! 2058  Bit16u address;
18837                                           !BCC_EOS
18838                                           ! 2059  if(rul>rlr)return;
18839 4858           55                         push	bp
18840 4859           89E5                       mov	bp,sp
18841 485B           83C4                   F2  add	sp,*-$E
18842                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
18843 485E           8A46         08            mov	al,8[bp]
18844 4861           3A46         0C            cmp	al,$C[bp]
18845 4864           76           04            jbe 	.B7
18846                       00004866            .B8:
18847 4866           89EC                       mov	sp,bp
18848 4868           5D                         pop	bp
18849 4869           C3                         ret
18850                                           !BCC_EOS
18851                                           ! 2060  if(cul>clr)return;
18852                       0000486A            .B7:
18853                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
18854 486A           8A46         0A            mov	al,$A[bp]
18855 486D           3A46         0E            cmp	al,$E[bp]
18856 4870           76           04            jbe 	.B9
18857                       00004872            .BA:
18858 4872           89EC                       mov	sp,bp
18859 4874           5D                         pop	bp
18860 4875           C3                         ret
18861                                           !BCC_EOS
18862                                           ! 2061  mode=read_byte(0x40,0x49);
18863                       00004876            .B9:
18864                                           ! Debug: list int = const $49 (used reg = )
18865 4876           B8                   0049  mov	ax,*$49
18866 4879           50                         push	ax
18867                                           ! Debug: list int = const $40 (used reg = )
18868 487A           B8                   0040  mov	ax,*$40
18869 487D           50                         push	ax
18870                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18871 487E           E8         3224            call	_read_byte
18872 4881           83C4                   04  add	sp,*4
18873                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
18874 4884           8846         FF            mov	-1[bp],al
18875                                           !BCC_EOS
18876                                           ! 2062  line=find_vga_entry(mode);
18877                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
18878 4887           8A46         FF            mov	al,-1[bp]
18879 488A           30E4                       xor	ah,ah
18880 488C           50                         push	ax
18881                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18882 488D           E8         3129            call	_find_vga_entry
18883 4890           44                         inc	sp
18884 4891           44                         inc	sp
18885                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
18886 4892           8846         FE            mov	-2[bp],al
18887                                           !BCC_EOS
18888                                           ! 2063  if(line==0xFF)return;
18889                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
18890 4895           8A46         FE            mov	al,-2[bp]
18891 4898           3C                     FF  cmp	al,#$FF
18892 489A           75           04            jne 	.BB
18893                       0000489C            .BC:
18894 489C           89EC                       mov	sp,bp
18895 489E           5D                         pop	bp
18896 489F           C3                         ret
18897                                           !BCC_EOS
18898                                           ! 2064  nbrows=read_byte(0x40,0x84)+1;
18899                       000048A0            .BB:
18900                                           ! Debug: list int = const $84 (used reg = )
18901 48A0           B8                   0084  mov	ax,#$84
18902 48A3           50                         push	ax
18903                                           ! Debug: list int = const $40 (used reg = )
18904 48A4           B8                   0040  mov	ax,*$40
18905 48A7           50                         push	ax
18906                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18907 48A8           E8         31FA            call	_read_byte
18908 48AB           83C4                   04  add	sp,*4
18909                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18910 48AE           30E4                       xor	ah,ah
18911                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18912 48B0           40                         inc	ax
18913 48B1           8946         F6            mov	-$A[bp],ax
18914                                           !BCC_EOS
18915                                           ! 2065  nbcols=read_word(0x40,0x4A);
18916                                           ! Debug: list int = const $4A (used reg = )
18917 48B4           B8                   004A  mov	ax,*$4A
18918 48B7           50                         push	ax
18919                                           ! Debug: list int = const $40 (used reg = )
18920 48B8           B8                   0040  mov	ax,*$40
18921 48BB           50                         push	ax
18922                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18923 48BC           E8         31F9            call	_read_word
18924 48BF           83C4                   04  add	sp,*4
18925                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18926 48C2           8946         F8            mov	-8[bp],ax
18927                                           !BCC_EOS
18928                                           ! 2066  if(page==0xFF)
18929                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
18930 48C5           8A46         10            mov	al,$10[bp]
18931 48C8           3C                     FF  cmp	al,#$FF
18932 48CA           75           11            jne 	.BD
18933                       000048CC            .BE:
18934                                           ! 2067   page=read_byte(0x40,0x62);
18935                                           ! Debug: list int = const $62 (used reg = )
18936 48CC           B8                   0062  mov	ax,*$62
18937 48CF           50                         push	ax
18938                                           ! Debug: list int = const $40 (used reg = )
18939 48D0           B8                   0040  mov	ax,*$40
18940 48D3           50                         push	ax
18941                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18942 48D4           E8         31CE            call	_read_byte
18943 48D7           83C4                   04  add	sp,*4
18944                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
18945 48DA           8846         10            mov	$10[bp],al
18946                                           !BCC_EOS
18947                                           ! 2068  if(rlr>=nbrows)rlr=nbrows-1;
18948                       000048DD            .BD:
18949                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
18950 48DD           8A46         0C            mov	al,$C[bp]
18951 48E0           30E4                       xor	ah,ah
18952 48E2           3B46         F6            cmp	ax,-$A[bp]
18953 48E5           72           07            jb  	.BF
18954                       000048E7            .C0:
18955                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18956 48E7           8B46         F6            mov	ax,-$A[bp]
18957                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
18958 48EA           48                         dec	ax
18959 48EB           8846         0C            mov	$C[bp],al
18960                                           !BCC_EOS
18961                                           ! 2069  if(clr>=nbcols)clr=nbcols-1;
18962                       000048EE            .BF:
18963                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
18964 48EE           8A46         0E            mov	al,$E[bp]
18965 48F1           30E4                       xor	ah,ah
18966 48F3           3B46         F8            cmp	ax,-8[bp]
18967 48F6           72           07            jb  	.C1
18968                       000048F8            .C2:
18969                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
18970 48F8           8B46         F8            mov	ax,-8[bp]
18971                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
18972 48FB           48                         dec	ax
18973 48FC           8846         0E            mov	$E[bp],al
18974                                           !BCC_EOS
18975                                           ! 2070  if(nblines>nbrows)nblines=0;
18976                       000048FF            .C1:
18977                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
18978 48FF           8A46         04            mov	al,4[bp]
18979 4902           30E4                       xor	ah,ah
18980 4904           3B46         F6            cmp	ax,-$A[bp]
18981 4907           76           05            jbe 	.C3
18982                       00004909            .C4:
18983                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
18984 4909           30C0                       xor	al,al
18985 490B           8846         04            mov	4[bp],al
18986                                           !BCC_EOS
18987                                           ! 2071  cols=clr-cul+1;
18988                       0000490E            .C3:
18989                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
18990 490E           8A46         0E            mov	al,$E[bp]
18991 4911           30E4                       xor	ah,ah
18992 4913           2A46         0A            sub	al,$A[bp]
18993 4916           80DC                   00  sbb	ah,*0
18994                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18995                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
18996 4919           40                         inc	ax
18997 491A           8846         FB            mov	-5[bp],al
18998                                           !BCC_EOS
18999                                           ! 2072  if(vga_modes[line].class==0x00)
19000                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19001 491D           8A46         FE            mov	al,-2[bp]
19002 4920           30E4                       xor	ah,ah
19003 4922           B1                     03  mov	cl,*3
19004 4924           D3E0                       shl	ax,cl
19005 4926           89C3                       mov	bx,ax
19006 4928           81C3                 01DC  add	bx,#_vga_modes
19007                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19008 492C           8A47         01            mov	al,1[bx]
19009 492F           84C0                       test	al,al
19010 4931         0F85         0250            bne 	.C5
19011                       00004935            .C6:
19012                                           ! 2073   {
19013                                           ! 2074    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19014                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19015 4935           8B46         F8            mov	ax,-8[bp]
19016 4938           8B4E         F6            mov	cx,-$A[bp]
19017 493B           F7E9                       imul	cx
19018                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19019 493D           D1E0                       shl	ax,*1
19020                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19021 493F           0C                     FF  or	al,#$FF
19022                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19023                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19024 4941           89C3                       mov	bx,ax
19025 4943           8A46         10            mov	al,$10[bp]
19026 4946           30E4                       xor	ah,ah
19027 4948           93                         xchg	ax,bx
19028 4949           40                         inc	ax
19029 494A           89D9                       mov	cx,bx
19030 494C           F7E9                       imul	cx
19031                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19032 494E           8946         F2            mov	-$E[bp],ax
19033                                           !BCC_EOS
19034                                           ! 2075    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19035                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19036 4951           8A46         04            mov	al,4[bp]
19037 4954           84C0                       test	al,al
19038 4956           75           67            jne 	.C7
19039                       00004958            .CC:
19040                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19041 4958           8A46         08            mov	al,8[bp]
19042 495B           84C0                       test	al,al
19043 495D           75           60            jne 	.C7
19044                       0000495F            .CB:
19045                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19046 495F           8A46         0A            mov	al,$A[bp]
19047 4962           84C0                       test	al,al
19048 4964           75           59            jne 	.C7
19049                       00004966            .CA:
19050                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19051 4966           8B46         F6            mov	ax,-$A[bp]
19052                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19053                                           ! Debug: expression subtree swapping
19054 4969           48                         dec	ax
19055 496A           50                         push	ax
19056 496B           8A46         0C            mov	al,$C[bp]
19057 496E           30E4                       xor	ah,ah
19058 4970           3B46         F0            cmp	ax,-$10[bp]
19059 4973           8D66         F2            lea	sp,-$E[bp]
19060 4976           75           47            jne 	.C7
19061                       00004978            .C9:
19062                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19063 4978           8B46         F8            mov	ax,-8[bp]
19064                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19065                                           ! Debug: expression subtree swapping
19066 497B           48                         dec	ax
19067 497C           50                         push	ax
19068 497D           8A46         0E            mov	al,$E[bp]
19069 4980           30E4                       xor	ah,ah
19070 4982           3B46         F0            cmp	ax,-$10[bp]
19071 4985           8D66         F2            lea	sp,-$E[bp]
19072 4988           75           35            jne 	.C7
19073                       0000498A            .C8:
19074                                           ! 2076     {
19075                                           ! 2077      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19076                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19077 498A           8B46         F6            mov	ax,-$A[bp]
19078 498D           8B4E         F8            mov	cx,-8[bp]
19079 4990           F7E9                       imul	cx
19080                                           ! Debug: list unsigned int = ax+0 (used reg = )
19081 4992           50                         push	ax
19082                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19083 4993           8A46         06            mov	al,6[bp]
19084 4996           30E4                       xor	ah,ah
19085                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19086 4998           B9                   0100  mov	cx,#$100
19087 499B           F7E9                       imul	cx
19088                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19089                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19090 499D           05                   0020  add	ax,*$20
19091 49A0           50                         push	ax
19092                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19093 49A1           FF76         F2            push	-$E[bp]
19094                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19095 49A4           8A46         FE            mov	al,-2[bp]
19096 49A7           30E4                       xor	ah,ah
19097 49A9           B1                     03  mov	cl,*3
19098 49AB           D3E0                       shl	ax,cl
19099 49AD           89C3                       mov	bx,ax
19100 49AF           81C3                 01DC  add	bx,#_vga_modes
19101                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19102 49B3           FF77         04            push	4[bx]
19103                                           ! Debug: func () void = memsetw+0 (used reg = )
19104 49B6           E8         3067            call	_memsetw
19105 49B9           83C4                   08  add	sp,*8
19106                                           !BCC_EOS
19107                                           ! 2078     }
19108                                           ! 2079    else
19109                                           ! 2080     {
19110 49BC           E9         01C3            br 	.CD
19111                       000049BF            .C7:
19112                                           ! 2081      if(dir==1)
19113                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19114 49BF           8A46         12            mov	al,$12[bp]
19115 49C2           3C                     01  cmp	al,*1
19116 49C4         0F85         00DC            bne 	.CE
19117                       000049C8            .CF:
19118                                           ! 2082       {for(i=rul;i<=rlr;i++)
19119                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19120 49C8           8A46         08            mov	al,8[bp]
19121 49CB           30E4                       xor	ah,ah
19122 49CD           8946         F4            mov	-$C[bp],ax
19123                                           !BCC_EOS
19124                                           !BCC_EOS
19125                                           ! 2083         {
19126 49D0           E9         00C2            br 	.D2
19127                       000049D3            .D3:
19128                                           ! 2084          if((i+nblines>rlr)||(nblines==0))
19129                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19130 49D3           8B46         F4            mov	ax,-$C[bp]
19131 49D6           0246         04            add	al,4[bp]
19132 49D9           80D4                   00  adc	ah,*0
19133                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19134 49DC           50                         push	ax
19135 49DD           8A46         0C            mov	al,$C[bp]
19136 49E0           30E4                       xor	ah,ah
19137 49E2           3B46         F0            cmp	ax,-$10[bp]
19138 49E5           8D66         F2            lea	sp,-$E[bp]
19139 49E8           72           07            jb  	.D5
19140                       000049EA            .D6:
19141                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19142 49EA           8A46         04            mov	al,4[bp]
19143 49ED           84C0                       test	al,al
19144 49EF           75           42            jne 	.D4
19145                       000049F1            .D5:
19146                                           ! 2085           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19147                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19148 49F1           8A46         FB            mov	al,-5[bp]
19149 49F4           30E4                       xor	ah,ah
19150 49F6           50                         push	ax
19151                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19152 49F7           8A46         06            mov	al,6[bp]
19153 49FA           30E4                       xor	ah,ah
19154                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19155 49FC           B9                   0100  mov	cx,#$100
19156 49FF           F7E9                       imul	cx
19157                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19158                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19159 4A01           05                   0020  add	ax,*$20
19160 4A04           50                         push	ax
19161                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19162 4A05           8B46         F4            mov	ax,-$C[bp]
19163 4A08           8B4E         F8            mov	cx,-8[bp]
19164 4A0B           F7E9                       imul	cx
19165                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19166 4A0D           0246         0A            add	al,$A[bp]
19167 4A10           80D4                   00  adc	ah,*0
19168                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19169 4A13           D1E0                       shl	ax,*1
19170                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19171                                           ! Debug: expression subtree swapping
19172 4A15           0346         F2            add	ax,-$E[bp]
19173                                           ! Debug: list unsigned int = ax+0 (used reg = )
19174 4A18           50                         push	ax
19175                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19176 4A19           8A46         FE            mov	al,-2[bp]
19177 4A1C           30E4                       xor	ah,ah
19178 4A1E           B1                     03  mov	cl,*3
19179 4A20           D3E0                       shl	ax,cl
19180 4A22           89C3                       mov	bx,ax
19181 4A24           81C3                 01DC  add	bx,#_vga_modes
19182                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19183 4A28           FF77         04            push	4[bx]
19184                                           ! Debug: func () void = memsetw+0 (used reg = )
19185 4A2B           E8         2FF2            call	_memsetw
19186 4A2E           83C4                   08  add	sp,*8
19187                                           !BCC_EOS
19188                                           ! 2086          else
19189                                           ! 2087           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19190 4A31           EB           5B            jmp .D7
19191                       00004A33            .D4:
19192                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19193 4A33           8A46         FB            mov	al,-5[bp]
19194 4A36           30E4                       xor	ah,ah
19195 4A38           50                         push	ax
19196                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19197 4A39           8B46         F4            mov	ax,-$C[bp]
19198 4A3C           0246         04            add	al,4[bp]
19199 4A3F           80D4                   00  adc	ah,*0
19200                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19201 4A42           8B4E         F8            mov	cx,-8[bp]
19202 4A45           F7E9                       imul	cx
19203                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19204 4A47           0246         0A            add	al,$A[bp]
19205 4A4A           80D4                   00  adc	ah,*0
19206                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19207 4A4D           D1E0                       shl	ax,*1
19208                                           ! Debug: list unsigned int = ax+0 (used reg = )
19209 4A4F           50                         push	ax
19210                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19211 4A50           8A46         FE            mov	al,-2[bp]
19212 4A53           30E4                       xor	ah,ah
19213 4A55           B1                     03  mov	cl,*3
19214 4A57           D3E0                       shl	ax,cl
19215 4A59           89C3                       mov	bx,ax
19216 4A5B           81C3                 01DC  add	bx,#_vga_modes
19217                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19218 4A5F           FF77         04            push	4[bx]
19219                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19220 4A62           8B46         F4            mov	ax,-$C[bp]
19221 4A65           8B4E         F8            mov	cx,-8[bp]
19222 4A68           F7E9                       imul	cx
19223                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19224 4A6A           0246         0A            add	al,$A[bp]
19225 4A6D           80D4                   00  adc	ah,*0
19226                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19227 4A70           D1E0                       shl	ax,*1
19228                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19229                                           ! Debug: expression subtree swapping
19230 4A72           0346         F2            add	ax,-$E[bp]
19231                                           ! Debug: list unsigned int = ax+0 (used reg = )
19232 4A75           50                         push	ax
19233                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19234 4A76           8A46         FE            mov	al,-2[bp]
19235 4A79           30E4                       xor	ah,ah
19236 4A7B           B1                     03  mov	cl,*3
19237 4A7D           D3E0                       shl	ax,cl
19238 4A7F           89C3                       mov	bx,ax
19239 4A81           81C3                 01DC  add	bx,#_vga_modes
19240                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19241 4A85           FF77         04            push	4[bx]
19242                                           ! Debug: func () void = memcpyw+0 (used reg = )
19243 4A88           E8         2FEA            call	_memcpyw
19244 4A8B           83C4                   0A  add	sp,*$A
19245                                           !BCC_EOS
19246                                           ! 2088         }
19247                       00004A8E            .D7:
19248                                           ! 2089       }
19249                       00004A8E            .D1:
19250                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19251 4A8E           8B46         F4            mov	ax,-$C[bp]
19252 4A91           40                         inc	ax
19253 4A92           8946         F4            mov	-$C[bp],ax
19254                       00004A95            .D2:
19255                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19256 4A95           8A46         0C            mov	al,$C[bp]
19257 4A98           30E4                       xor	ah,ah
19258 4A9A           3B46         F4            cmp	ax,-$C[bp]
19259 4A9D         0F83         FF32            bhis	.D3
19260                       00004AA1            .D8:
19261                       00004AA1            .D0:
19262                                           ! 2090      else
19263                                           ! 2091       {for(i=rlr;i>=rul;i--)
19264 4AA1           E9         00DE            br 	.D9
19265                       00004AA4            .CE:
19266                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19267 4AA4           8A46         0C            mov	al,$C[bp]
19268 4AA7           30E4                       xor	ah,ah
19269 4AA9           8946         F4            mov	-$C[bp],ax
19270                                           !BCC_EOS
19271                                           !BCC_EOS
19272                                           ! 2092         {
19273 4AAC           E9         00C7            br 	.DC
19274                       00004AAF            .DD:
19275                                           ! 2093          if((i<rul+nblines)||(nblines==0))
19276                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19277 4AAF           8A46         08            mov	al,8[bp]
19278 4AB2           30E4                       xor	ah,ah
19279 4AB4           0246         04            add	al,4[bp]
19280 4AB7           80D4                   00  adc	ah,*0
19281                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19282 4ABA           3B46         F4            cmp	ax,-$C[bp]
19283 4ABD           77           07            ja  	.DF
19284                       00004ABF            .E0:
19285                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19286 4ABF           8A46         04            mov	al,4[bp]
19287 4AC2           84C0                       test	al,al
19288 4AC4           75           42            jne 	.DE
19289                       00004AC6            .DF:
19290                                           ! 2094           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19291                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19292 4AC6           8A46         FB            mov	al,-5[bp]
19293 4AC9           30E4                       xor	ah,ah
19294 4ACB           50                         push	ax
19295                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19296 4ACC           8A46         06            mov	al,6[bp]
19297 4ACF           30E4                       xor	ah,ah
19298                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19299 4AD1           B9                   0100  mov	cx,#$100
19300 4AD4           F7E9                       imul	cx
19301                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19302                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19303 4AD6           05                   0020  add	ax,*$20
19304 4AD9           50                         push	ax
19305                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19306 4ADA           8B46         F4            mov	ax,-$C[bp]
19307 4ADD           8B4E         F8            mov	cx,-8[bp]
19308 4AE0           F7E9                       imul	cx
19309                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19310 4AE2           0246         0A            add	al,$A[bp]
19311 4AE5           80D4                   00  adc	ah,*0
19312                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19313 4AE8           D1E0                       shl	ax,*1
19314                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19315                                           ! Debug: expression subtree swapping
19316 4AEA           0346         F2            add	ax,-$E[bp]
19317                                           ! Debug: list unsigned int = ax+0 (used reg = )
19318 4AED           50                         push	ax
19319                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19320 4AEE           8A46         FE            mov	al,-2[bp]
19321 4AF1           30E4                       xor	ah,ah
19322 4AF3           B1                     03  mov	cl,*3
19323 4AF5           D3E0                       shl	ax,cl
19324 4AF7           89C3                       mov	bx,ax
19325 4AF9           81C3                 01DC  add	bx,#_vga_modes
19326                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19327 4AFD           FF77         04            push	4[bx]
19328                                           ! Debug: func () void = memsetw+0 (used reg = )
19329 4B00           E8         2F1D            call	_memsetw
19330 4B03           83C4                   08  add	sp,*8
19331                                           !BCC_EOS
19332                                           ! 2095          else
19333                                           ! 2096           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19334 4B06           EB           5B            jmp .E1
19335                       00004B08            .DE:
19336                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19337 4B08           8A46         FB            mov	al,-5[bp]
19338 4B0B           30E4                       xor	ah,ah
19339 4B0D           50                         push	ax
19340                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19341 4B0E           8B46         F4            mov	ax,-$C[bp]
19342 4B11           2A46         04            sub	al,4[bp]
19343 4B14           80DC                   00  sbb	ah,*0
19344                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19345 4B17           8B4E         F8            mov	cx,-8[bp]
19346 4B1A           F7E9                       imul	cx
19347                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19348 4B1C           0246         0A            add	al,$A[bp]
19349 4B1F           80D4                   00  adc	ah,*0
19350                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19351 4B22           D1E0                       shl	ax,*1
19352                                           ! Debug: list unsigned int = ax+0 (used reg = )
19353 4B24           50                         push	ax
19354                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19355 4B25           8A46         FE            mov	al,-2[bp]
19356 4B28           30E4                       xor	ah,ah
19357 4B2A           B1                     03  mov	cl,*3
19358 4B2C           D3E0                       shl	ax,cl
19359 4B2E           89C3                       mov	bx,ax
19360 4B30           81C3                 01DC  add	bx,#_vga_modes
19361                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19362 4B34           FF77         04            push	4[bx]
19363                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19364 4B37           8B46         F4            mov	ax,-$C[bp]
19365 4B3A           8B4E         F8            mov	cx,-8[bp]
19366 4B3D           F7E9                       imul	cx
19367                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19368 4B3F           0246         0A            add	al,$A[bp]
19369 4B42           80D4                   00  adc	ah,*0
19370                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19371 4B45           D1E0                       shl	ax,*1
19372                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19373                                           ! Debug: expression subtree swapping
19374 4B47           0346         F2            add	ax,-$E[bp]
19375                                           ! Debug: list unsigned int = ax+0 (used reg = )
19376 4B4A           50                         push	ax
19377                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19378 4B4B           8A46         FE            mov	al,-2[bp]
19379 4B4E           30E4                       xor	ah,ah
19380 4B50           B1                     03  mov	cl,*3
19381 4B52           D3E0                       shl	ax,cl
19382 4B54           89C3                       mov	bx,ax
19383 4B56           81C3                 01DC  add	bx,#_vga_modes
19384                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19385 4B5A           FF77         04            push	4[bx]
19386                                           ! Debug: func () void = memcpyw+0 (used reg = )
19387 4B5D           E8         2F15            call	_memcpyw
19388 4B60           83C4                   0A  add	sp,*$A
19389                                           !BCC_EOS
19390                                           ! 2097          if (i>rlr) break;
19391                       00004B63            .E1:
19392                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19393 4B63           8A46         0C            mov	al,$C[bp]
19394 4B66           30E4                       xor	ah,ah
19395 4B68           3B46         F4            cmp	ax,-$C[bp]
19396 4B6B           73           02            jae 	.E2
19397                       00004B6D            .E3:
19398 4B6D           EB           13            jmp .DA
19399                                           !BCC_EOS
19400                                           ! 2098         }
19401                       00004B6F            .E2:
19402                                           ! 2099       }
19403                       00004B6F            .DB:
19404                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19405 4B6F           8B46         F4            mov	ax,-$C[bp]
19406 4B72           48                         dec	ax
19407 4B73           8946         F4            mov	-$C[bp],ax
19408                       00004B76            .DC:
19409                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19410 4B76           8A46         08            mov	al,8[bp]
19411 4B79           30E4                       xor	ah,ah
19412 4B7B           3B46         F4            cmp	ax,-$C[bp]
19413 4B7E         0F86         FF2D            blos	.DD
19414                       00004B82            .E4:
19415                       00004B82            .DA:
19416                                           ! 2100     }
19417                       00004B82            .D9:
19418                                           ! 2101   }
19419                       00004B82            .CD:
19420                                           ! 2102  else
19421                                           ! 2103   {
19422 4B82           E9         03D5            br 	.E5
19423                       00004B85            .C5:
19424                                           ! 2104    cheight=video_param_table[line_to_vpti[line]].cheight;
19425                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19426 4B85           8A46         FE            mov	al,-2[bp]
19427 4B88           30E4                       xor	ah,ah
19428 4B8A           89C3                       mov	bx,ax
19429                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19430 4B8C           8A87       025C            mov	al,_line_to_vpti[bx]
19431 4B90           30E4                       xor	ah,ah
19432 4B92           B1                     06  mov	cl,*6
19433 4B94           D3E0                       shl	ax,cl
19434 4B96           89C3                       mov	bx,ax
19435 4B98           81C3                 0270  add	bx,#_video_param_table
19436                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19437 4B9C           8A47         02            mov	al,2[bx]
19438 4B9F           8846         FD            mov	-3[bp],al
19439                                           !BCC_EOS
19440                                           ! 2105    switch(vga_modes[line].memmodel)
19441                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19442 4BA2           8A46         FE            mov	al,-2[bp]
19443 4BA5           30E4                       xor	ah,ah
19444 4BA7           B1                     03  mov	cl,*3
19445 4BA9           D3E0                       shl	ax,cl
19446 4BAB           89C3                       mov	bx,ax
19447 4BAD           81C3                 01DC  add	bx,#_vga_modes
19448 4BB1           8A47         02            mov	al,2[bx]
19449                                           ! 2106     {
19450 4BB4           E9         0391            br 	.E8
19451                                           ! 2107      case 0x04:
19452                                           ! 2108      case 0x03:
19453                       00004BB7            .E9:
19454                                           ! 2109        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19455                       00004BB7            .EA:
19456                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19457 4BB7           8A46         04            mov	al,4[bp]
19458 4BBA           84C0                       test	al,al
19459 4BBC         0F85         0089            bne 	.EB
19460                       00004BC0            .F0:
19461                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19462 4BC0           8A46         08            mov	al,8[bp]
19463 4BC3           84C0                       test	al,al
19464 4BC5         0F85         0080            bne 	.EB
19465                       00004BC9            .EF:
19466                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19467 4BC9           8A46         0A            mov	al,$A[bp]
19468 4BCC           84C0                       test	al,al
19469 4BCE           75           79            jne 	.EB
19470                       00004BD0            .EE:
19471                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19472 4BD0           8B46         F6            mov	ax,-$A[bp]
19473                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19474                                           ! Debug: expression subtree swapping
19475 4BD3           48                         dec	ax
19476 4BD4           50                         push	ax
19477 4BD5           8A46         0C            mov	al,$C[bp]
19478 4BD8           30E4                       xor	ah,ah
19479 4BDA           3B46         F0            cmp	ax,0+..FFFC[bp]
19480 4BDD           8D66         F2            lea	sp,2+..FFFC[bp]
19481 4BE0           75           67            jne 	.EB
19482                       00004BE2            .ED:
19483                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19484 4BE2           8B46         F8            mov	ax,-8[bp]
19485                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19486                                           ! Debug: expression subtree swapping
19487 4BE5           48                         dec	ax
19488 4BE6           50                         push	ax
19489 4BE7           8A46         0E            mov	al,$E[bp]
19490 4BEA           30E4                       xor	ah,ah
19491 4BEC           3B46         F0            cmp	ax,0+..FFFC[bp]
19492 4BEF           8D66         F2            lea	sp,2+..FFFC[bp]
19493 4BF2           75           55            jne 	.EB
19494                       00004BF4            .EC:
19495                                           ! 2110         {
19496                                           ! 2111          outw(0x3ce, 0x02
19497                                           ! 2111 05);
19498                                           ! Debug: list int = const $205 (used reg = )
19499 4BF4           B8                   0205  mov	ax,#$205
19500 4BF7           50                         push	ax
19501                                           ! Debug: list int = const $3CE (used reg = )
19502 4BF8           B8                   03CE  mov	ax,#$3CE
19503 4BFB           50                         push	ax
19504                                           ! Debug: func () void = outw+0 (used reg = )
19505 4BFC           E8         2F22            call	_outw
19506 4BFF           83C4                   04  add	sp,*4
19507                                           !BCC_EOS
19508                                           ! 2112          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19509                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19510 4C02           8B46         F6            mov	ax,-$A[bp]
19511 4C05           8B4E         F8            mov	cx,-8[bp]
19512 4C08           F7E9                       imul	cx
19513                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19514 4C0A           89C3                       mov	bx,ax
19515 4C0C           8A46         FD            mov	al,-3[bp]
19516 4C0F           30E4                       xor	ah,ah
19517 4C11           93                         xchg	ax,bx
19518 4C12           89D9                       mov	cx,bx
19519 4C14           F7E9                       imul	cx
19520                                           ! Debug: list unsigned int = ax+0 (used reg = )
19521 4C16           50                         push	ax
19522                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19523 4C17           8A46         06            mov	al,6[bp]
19524 4C1A           30E4                       xor	ah,ah
19525 4C1C           50                         push	ax
19526                                           ! Debug: list int = const 0 (used reg = )
19527 4C1D           31C0                       xor	ax,ax
19528 4C1F           50                         push	ax
19529                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19530 4C20           8A46         FE            mov	al,-2[bp]
19531 4C23           30E4                       xor	ah,ah
19532 4C25           B1                     03  mov	cl,*3
19533 4C27           D3E0                       shl	ax,cl
19534 4C29           89C3                       mov	bx,ax
19535 4C2B           81C3                 01DC  add	bx,#_vga_modes
19536                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19537 4C2F           FF77         04            push	4[bx]
19538                                           ! Debug: func () void = memsetb+0 (used reg = )
19539 4C32           E8         2DC6            call	_memsetb
19540 4C35           83C4                   08  add	sp,*8
19541                                           !BCC_EOS
19542                                           ! 2113          outw(0x3ce, 0x0005);
19543                                           ! Debug: list int = const 5 (used reg = )
19544 4C38           B8                   0005  mov	ax,*5
19545 4C3B           50                         push	ax
19546                                           ! Debug: list int = const $3CE (used reg = )
19547 4C3C           B8                   03CE  mov	ax,#$3CE
19548 4C3F           50                         push	ax
19549                                           ! Debug: func () void = outw+0 (used reg = )
19550 4C40           E8         2EDE            call	_outw
19551 4C43           83C4                   04  add	sp,*4
19552                                           !BCC_EOS
19553                                           ! 2114         }
19554                                           ! 2115        else
19555                                           ! 2116         {
19556 4C46           E9         0121            br 	.F1
19557                       00004C49            .EB:
19558                                           ! 2117          if(dir==1)
19559                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19560 4C49           8A46         12            mov	al,$12[bp]
19561 4C4C           3C                     01  cmp	al,*1
19562 4C4E         0F85         008A            bne 	.F2
19563                       00004C52            .F3:
19564                                           ! 2118           {for(i=rul;i<=rlr;i++)
19565                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19566 4C52           8A46         08            mov	al,8[bp]
19567 4C55           30E4                       xor	ah,ah
19568 4C57           8946         F4            mov	-$C[bp],ax
19569                                           !BCC_EOS
19570                                           !BCC_EOS
19571                                           ! 2119             {
19572 4C5A           EB           73            jmp .F6
19573                       00004C5C            .F7:
19574                                           ! 2120              if((i+nblines>rlr)||(nblines==0))
19575                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19576 4C5C           8B46         F4            mov	ax,-$C[bp]
19577 4C5F           0246         04            add	al,4[bp]
19578 4C62           80D4                   00  adc	ah,*0
19579                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19580 4C65           50                         push	ax
19581 4C66           8A46         0C            mov	al,$C[bp]
19582 4C69           30E4                       xor	ah,ah
19583 4C6B           3B46         F0            cmp	ax,0+..FFFC[bp]
19584 4C6E           8D66         F2            lea	sp,2+..FFFC[bp]
19585 4C71           72           07            jb  	.F9
19586                       00004C73            .FA:
19587                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19588 4C73           8A46         04            mov	al,4[bp]
19589 4C76           84C0                       test	al,al
19590 4C78           75           26            jne 	.F8
19591                       00004C7A            .F9:
19592                                           ! 2121               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19593                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19594 4C7A           8A46         06            mov	al,6[bp]
19595 4C7D           30E4                       xor	ah,ah
19596 4C7F           50                         push	ax
19597                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19598 4C80           8A46         FD            mov	al,-3[bp]
19599 4C83           30E4                       xor	ah,ah
19600 4C85           50                         push	ax
19601                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19602 4C86           FF76         F8            push	-8[bp]
19603                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19604 4C89           8A46         FB            mov	al,-5[bp]
19605 4C8C           30E4                       xor	ah,ah
19606 4C8E           50                         push	ax
19607                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19608 4C8F           FF76         F4            push	-$C[bp]
19609                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19610 4C92           8A46         0A            mov	al,$A[bp]
19611 4C95           30E4                       xor	ah,ah
19612 4C97           50                         push	ax
19613                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19614 4C98           E8         F96B            call	_vgamem_fill_pl4
19615 4C9B           83C4                   0C  add	sp,*$C
19616                                           !BCC_EOS
19617                                           ! 2122              else
19618                                           ! 2123               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
19619 4C9E           EB           28            jmp .FB
19620                       00004CA0            .F8:
19621                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19622 4CA0           8A46         FD            mov	al,-3[bp]
19623 4CA3           30E4                       xor	ah,ah
19624 4CA5           50                         push	ax
19625                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19626 4CA6           FF76         F8            push	-8[bp]
19627                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19628 4CA9           8A46         FB            mov	al,-5[bp]
19629 4CAC           30E4                       xor	ah,ah
19630 4CAE           50                         push	ax
19631                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19632 4CAF           FF76         F4            push	-$C[bp]
19633                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19634 4CB2           8B46         F4            mov	ax,-$C[bp]
19635 4CB5           0246         04            add	al,4[bp]
19636 4CB8           80D4                   00  adc	ah,*0
19637                                           ! Debug: list unsigned int = ax+0 (used reg = )
19638 4CBB           50                         push	ax
19639                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19640 4CBC           8A46         0A            mov	al,$A[bp]
19641 4CBF           30E4                       xor	ah,ah
19642 4CC1           50                         push	ax
19643                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19644 4CC2           E8         F87F            call	_vgamem_copy_pl4
19645 4CC5           83C4                   0C  add	sp,*$C
19646                                           !BCC_EOS
19647                                           ! 2124             }
19648                       00004CC8            .FB:
19649                                           ! 2125           }
19650                       00004CC8            .F5:
19651                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19652 4CC8           8B46         F4            mov	ax,-$C[bp]
19653 4CCB           40                         inc	ax
19654 4CCC           8946         F4            mov	-$C[bp],ax
19655                       00004CCF            .F6:
19656                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19657 4CCF           8A46         0C            mov	al,$C[bp]
19658 4CD2           30E4                       xor	ah,ah
19659 4CD4           3B46         F4            cmp	ax,-$C[bp]
19660 4CD7           73           83            jae	.F7
19661                       00004CD9            .FC:
19662                       00004CD9            .F4:
19663                                           ! 2126          else
19664                                           ! 2127           {for(i=rlr;i>=rul;i--)
19665 4CD9           E9         008E            br 	.FD
19666                       00004CDC            .F2:
19667                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19668 4CDC           8A46         0C            mov	al,$C[bp]
19669 4CDF           30E4                       xor	ah,ah
19670 4CE1           8946         F4            mov	-$C[bp],ax
19671                                           !BCC_EOS
19672                                           !BCC_EOS
19673                                           ! 2128             {
19674 4CE4           EB           78            jmp .100
19675                       00004CE6            .101:
19676                                           ! 2129              if((i<rul+nblines)||(nblines==0))
19677                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19678 4CE6           8A46         08            mov	al,8[bp]
19679 4CE9           30E4                       xor	ah,ah
19680 4CEB           0246         04            add	al,4[bp]
19681 4CEE           80D4                   00  adc	ah,*0
19682                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19683 4CF1           3B46         F4            cmp	ax,-$C[bp]
19684 4CF4           77           07            ja  	.103
19685                       00004CF6            .104:
19686                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19687 4CF6           8A46         04            mov	al,4[bp]
19688 4CF9           84C0                       test	al,al
19689 4CFB           75           26            jne 	.102
19690                       00004CFD            .103:
19691                                           ! 2130               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19692                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19693 4CFD           8A46         06            mov	al,6[bp]
19694 4D00           30E4                       xor	ah,ah
19695 4D02           50                         push	ax
19696                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19697 4D03           8A46         FD            mov	al,-3[bp]
19698 4D06           30E4                       xor	ah,ah
19699 4D08           50                         push	ax
19700                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19701 4D09           FF76         F8            push	-8[bp]
19702                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19703 4D0C           8A46         FB            mov	al,-5[bp]
19704 4D0F           30E4                       xor	ah,ah
19705 4D11           50                         push	ax
19706                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19707 4D12           FF76         F4            push	-$C[bp]
19708                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19709 4D15           8A46         0A            mov	al,$A[bp]
19710 4D18           30E4                       xor	ah,ah
19711 4D1A           50                         push	ax
19712                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19713 4D1B           E8         F8E8            call	_vgamem_fill_pl4
19714 4D1E           83C4                   0C  add	sp,*$C
19715                                           !BCC_EOS
19716                                           ! 2131              else
19717                                           ! 2132               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
19718 4D21           EB           28            jmp .105
19719                       00004D23            .102:
19720                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19721 4D23           8A46         FD            mov	al,-3[bp]
19722 4D26           30E4                       xor	ah,ah
19723 4D28           50                         push	ax
19724                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19725 4D29           FF76         F8            push	-8[bp]
19726                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19727 4D2C           8A46         FB            mov	al,-5[bp]
19728 4D2F           30E4                       xor	ah,ah
19729 4D31           50                         push	ax
19730                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
19731 4D32           8B46         F4            mov	ax,-$C[bp]
19732 4D35           2A46         04            sub	al,4[bp]
19733 4D38           80DC                   00  sbb	ah,*0
19734                                           ! Debug: list unsigned int = ax+0 (used reg = )
19735 4D3B           50                         push	ax
19736                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19737 4D3C           FF76         F4            push	-$C[bp]
19738                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19739 4D3F           8A46         0A            mov	al,$A[bp]
19740 4D42           30E4                       xor	ah,ah
19741 4D44           50                         push	ax
19742                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19743 4D45           E8         F7FC            call	_vgamem_copy_pl4
19744 4D48           83C4                   0C  add	sp,*$C
19745                                           !BCC_EOS
19746                                           ! 2133              if (i>rlr) break;
19747                       00004D4B            .105:
19748                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19749 4D4B           8A46         0C            mov	al,$C[bp]
19750 4D4E           30E4                       xor	ah,ah
19751 4D50           3B46         F4            cmp	ax,-$C[bp]
19752 4D53           73           02            jae 	.106
19753                       00004D55            .107:
19754 4D55           EB           13            jmp .FE
19755                                           !BCC_EOS
19756                                           ! 2134             }
19757                       00004D57            .106:
19758                                           ! 2135           }
19759                       00004D57            .FF:
19760                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19761 4D57           8B46         F4            mov	ax,-$C[bp]
19762 4D5A           48                         dec	ax
19763 4D5B           8946         F4            mov	-$C[bp],ax
19764                       00004D5E            .100:
19765                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19766 4D5E           8A46         08            mov	al,8[bp]
19767 4D61           30E4                       xor	ah,ah
19768 4D63           3B46         F4            cmp	ax,-$C[bp]
19769 4D66         0F86         FF7C            blos	.101
19770                       00004D6A            .108:
19771                       00004D6A            .FE:
19772                                           ! 2136         }
19773                       00004D6A            .FD:
19774                                           ! 2137        break;
19775                       00004D6A            .F1:
19776 4D6A           E9         01ED            br 	.E6
19777                                           !BCC_EOS
19778                                           ! 2138      case 0x02:
19779                                           ! 2139        bpp=vga_modes[line].pixbits;
19780                       00004D6D            .109:
19781                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19782 4D6D           8A46         FE            mov	al,-2[bp]
19783 4D70           30E4                       xor	ah,ah
19784 4D72           B1                     03  mov	cl,*3
19785 4D74           D3E0                       shl	ax,cl
19786 4D76           89C3                       mov	bx,ax
19787 4D78           81C3                 01DC  add	bx,#_vga_modes
19788                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
19789 4D7C           8A47         03            mov	al,3[bx]
19790 4D7F           8846         FC            mov	-4[bp],al
19791                                           !BCC_EOS
19792                                           ! 2140        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19793                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19794 4D82           8A46         04            mov	al,4[bp]
19795 4D85           84C0                       test	al,al
19796 4D87           75           77            jne 	.10A
19797                       00004D89            .10F:
19798                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19799 4D89           8A46         08            mov	al,8[bp]
19800 4D8C           84C0                       test	al,al
19801 4D8E           75           70            jne 	.10A
19802                       00004D90            .10E:
19803                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19804 4D90           8A46         0A            mov	al,$A[bp]
19805 4D93           84C0                       test	al,al
19806 4D95           75           69            jne 	.10A
19807                       00004D97            .10D:
19808                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19809 4D97           8B46         F6            mov	ax,-$A[bp]
19810                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19811                                           ! Debug: expression subtree swapping
19812 4D9A           48                         dec	ax
19813 4D9B           50                         push	ax
19814 4D9C           8A46         0C            mov	al,$C[bp]
19815 4D9F           30E4                       xor	ah,ah
19816 4DA1           3B46         F0            cmp	ax,0+..FFFC[bp]
19817 4DA4           8D66         F2            lea	sp,2+..FFFC[bp]
19818 4DA7           75           57            jne 	.10A
19819                       00004DA9            .10C:
19820                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19821 4DA9           8B46         F8            mov	ax,-8[bp]
19822                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19823                                           ! Debug: expression subtree swapping
19824 4DAC           48                         dec	ax
19825 4DAD           50                         push	ax
19826 4DAE           8A46         0E            mov	al,$E[bp]
19827 4DB1           30E4                       xor	ah,ah
19828 4DB3           3B46         F0            cmp	ax,0+..FFFC[bp]
19829 4DB6           8D66         F2            lea	sp,2+..FFFC[bp]
19830 4DB9           75           45            jne 	.10A
19831                       00004DBB            .10B:
19832                                           ! 2141         {
19833                                           ! 2142          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
19834                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19835 4DBB           8B46         F6            mov	ax,-$A[bp]
19836 4DBE           8B4E         F8            mov	cx,-8[bp]
19837 4DC1           F7E9                       imul	cx
19838                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19839 4DC3           89C3                       mov	bx,ax
19840 4DC5           8A46         FD            mov	al,-3[bp]
19841 4DC8           30E4                       xor	ah,ah
19842 4DCA           93                         xchg	ax,bx
19843 4DCB           89D9                       mov	cx,bx
19844 4DCD           F7E9                       imul	cx
19845                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
19846 4DCF           89C3                       mov	bx,ax
19847 4DD1           8A46         FC            mov	al,-4[bp]
19848 4DD4           30E4                       xor	ah,ah
19849 4DD6           93                         xchg	ax,bx
19850 4DD7           89D9                       mov	cx,bx
19851 4DD9           F7E9                       imul	cx
19852                                           ! Debug: list unsigned int = ax+0 (used reg = )
19853 4DDB           50                         push	ax
19854                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19855 4DDC           8A46         06            mov	al,6[bp]
19856 4DDF           30E4                       xor	ah,ah
19857 4DE1           50                         push	ax
19858                                           ! Debug: list int = const 0 (used reg = )
19859 4DE2           31C0                       xor	ax,ax
19860 4DE4           50                         push	ax
19861                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19862 4DE5           8A46         FE            mov	al,-2[bp]
19863 4DE8           30E4                       xor	ah,ah
19864 4DEA           B1                     03  mov	cl,*3
19865 4DEC           D3E0                       shl	ax,cl
19866 4DEE           89C3                       mov	bx,ax
19867 4DF0           81C3                 01DC  add	bx,#_vga_modes
19868                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19869 4DF4           FF77         04            push	4[bx]
19870                                           ! Debug: func () void = memsetb+0 (used reg = )
19871 4DF7           E8         2C01            call	_memsetb
19872 4DFA           83C4                   08  add	sp,*8
19873                                           !BCC_EOS
19874                                           ! 2143         }
19875                                           ! 2144        else
19876                                           ! 2145         {
19877 4DFD           E9         0144            br 	.110
19878                       00004E00            .10A:
19879                                           ! 2146          if(bpp==2)
19880                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
19881 4E00           8A46         FC            mov	al,-4[bp]
19882 4E03           3C                     02  cmp	al,*2
19883 4E05           75           1C            jne 	.111
19884                       00004E07            .112:
19885                                           ! 2147           {
19886                                           ! 2148            cul<<=1;
19887                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
19888 4E07           8A46         0A            mov	al,$A[bp]
19889 4E0A           30E4                       xor	ah,ah
19890 4E0C           D1E0                       shl	ax,*1
19891 4E0E           8846         0A            mov	$A[bp],al
19892                                           !BCC_EOS
19893                                           ! 2149            cols<<=1;
19894                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
19895 4E11           8A46         FB            mov	al,-5[bp]
19896 4E14           30E4                       xor	ah,ah
19897 4E16           D1E0                       shl	ax,*1
19898 4E18           8846         FB            mov	-5[bp],al
19899                                           !BCC_EOS
19900                                           ! 2150            nbcols<<=1;
19901                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19902 4E1B           8B46         F8            mov	ax,-8[bp]
19903 4E1E           D1E0                       shl	ax,*1
19904 4E20           8946         F8            mov	-8[bp],ax
19905                                           !BCC_EOS
19906                                           ! 2151           }
19907                                           ! 2152          if(dir==1)
19908                       00004E23            .111:
19909                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19910 4E23           8A46         12            mov	al,$12[bp]
19911 4E26           3C                     01  cmp	al,*1
19912 4E28         0F85         008A            bne 	.113
19913                       00004E2C            .114:
19914                                           ! 2153           {for(i=rul;i<=rlr;i++)
19915                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19916 4E2C           8A46         08            mov	al,8[bp]
19917 4E2F           30E4                       xor	ah,ah
19918 4E31           8946         F4            mov	-$C[bp],ax
19919                                           !BCC_EOS
19920                                           !BCC_EOS
19921                                           ! 2154             {
19922 4E34           EB           73            jmp .117
19923                       00004E36            .118:
19924                                           ! 2155              if((i+nblines>rlr)||(nblines==0))
19925                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19926 4E36           8B46         F4            mov	ax,-$C[bp]
19927 4E39           0246         04            add	al,4[bp]
19928 4E3C           80D4                   00  adc	ah,*0
19929                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19930 4E3F           50                         push	ax
19931 4E40           8A46         0C            mov	al,$C[bp]
19932 4E43           30E4                       xor	ah,ah
19933 4E45           3B46         F0            cmp	ax,0+..FFFC[bp]
19934 4E48           8D66         F2            lea	sp,2+..FFFC[bp]
19935 4E4B           72           07            jb  	.11A
19936                       00004E4D            .11B:
19937                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19938 4E4D           8A46         04            mov	al,4[bp]
19939 4E50           84C0                       test	al,al
19940 4E52           75           26            jne 	.119
19941                       00004E54            .11A:
19942                                           ! 2156               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
19943                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19944 4E54           8A46         06            mov	al,6[bp]
19945 4E57           30E4                       xor	ah,ah
19946 4E59           50                         push	ax
19947                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19948 4E5A           8A46         FD            mov	al,-3[bp]
19949 4E5D           30E4                       xor	ah,ah
19950 4E5F           50                         push	ax
19951                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19952 4E60           FF76         F8            push	-8[bp]
19953                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19954 4E63           8A46         FB            mov	al,-5[bp]
19955 4E66           30E4                       xor	ah,ah
19956 4E68           50                         push	ax
19957                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19958 4E69           FF76         F4            push	-$C[bp]
19959                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19960 4E6C           8A46         0A            mov	al,$A[bp]
19961 4E6F           30E4                       xor	ah,ah
19962 4E71           50                         push	ax
19963                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
19964 4E72           E8         F92E            call	_vgamem_fill_cga
19965 4E75           83C4                   0C  add	sp,*$C
19966                                           !BCC_EOS
19967                                           ! 2157              else
19968                                           ! 2158               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
19969 4E78           EB           28            jmp .11C
19970                       00004E7A            .119:
19971                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19972 4E7A           8A46         FD            mov	al,-3[bp]
19973 4E7D           30E4                       xor	ah,ah
19974 4E7F           50                         push	ax
19975                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19976 4E80           FF76         F8            push	-8[bp]
19977                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19978 4E83           8A46         FB            mov	al,-5[bp]
19979 4E86           30E4                       xor	ah,ah
19980 4E88           50                         push	ax
19981                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19982 4E89           FF76         F4            push	-$C[bp]
19983                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19984 4E8C           8B46         F4            mov	ax,-$C[bp]
19985 4E8F           0246         04            add	al,4[bp]
19986 4E92           80D4                   00  adc	ah,*0
19987                                           ! Debug: list unsigned int = ax+0 (used reg = )
19988 4E95           50                         push	ax
19989                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19990 4E96           8A46         0A            mov	al,$A[bp]
19991 4E99           30E4                       xor	ah,ah
19992 4E9B           50                         push	ax
19993                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
19994 4E9C           E8         F7F2            call	_vgamem_copy_cga
19995 4E9F           83C4                   0C  add	sp,*$C
19996                                           !BCC_EOS
19997                                           ! 2159             }
19998                       00004EA2            .11C:
19999                                           ! 2160           }
20000                       00004EA2            .116:
20001                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20002 4EA2           8B46         F4            mov	ax,-$C[bp]
20003 4EA5           40                         inc	ax
20004 4EA6           8946         F4            mov	-$C[bp],ax
20005                       00004EA9            .117:
20006                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20007 4EA9           8A46         0C            mov	al,$C[bp]
20008 4EAC           30E4                       xor	ah,ah
20009 4EAE           3B46         F4            cmp	ax,-$C[bp]
20010 4EB1           73           83            jae	.118
20011                       00004EB3            .11D:
20012                       00004EB3            .115:
20013                                           ! 2161          else
20014                                           ! 2162           {for(i=rlr;i>=rul;i--)
20015 4EB3           E9         008E            br 	.11E
20016                       00004EB6            .113:
20017                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20018 4EB6           8A46         0C            mov	al,$C[bp]
20019 4EB9           30E4                       xor	ah,ah
20020 4EBB           8946         F4            mov	-$C[bp],ax
20021                                           !BCC_EOS
20022                                           !BCC_EOS
20023                                           ! 2163             {
20024 4EBE           EB           78            jmp .121
20025                       00004EC0            .122:
20026                                           ! 2164              if((i<rul+nblines)||(nblines==0))
20027                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20028 4EC0           8A46         08            mov	al,8[bp]
20029 4EC3           30E4                       xor	ah,ah
20030 4EC5           0246         04            add	al,4[bp]
20031 4EC8           80D4                   00  adc	ah,*0
20032                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20033 4ECB           3B46         F4            cmp	ax,-$C[bp]
20034 4ECE           77           07            ja  	.124
20035                       00004ED0            .125:
20036                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20037 4ED0           8A46         04            mov	al,4[bp]
20038 4ED3           84C0                       test	al,al
20039 4ED5           75           26            jne 	.123
20040                       00004ED7            .124:
20041                                           ! 2165               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20042                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20043 4ED7           8A46         06            mov	al,6[bp]
20044 4EDA           30E4                       xor	ah,ah
20045 4EDC           50                         push	ax
20046                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20047 4EDD           8A46         FD            mov	al,-3[bp]
20048 4EE0           30E4                       xor	ah,ah
20049 4EE2           50                         push	ax
20050                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20051 4EE3           FF76         F8            push	-8[bp]
20052                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20053 4EE6           8A46         FB            mov	al,-5[bp]
20054 4EE9           30E4                       xor	ah,ah
20055 4EEB           50                         push	ax
20056                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20057 4EEC           FF76         F4            push	-$C[bp]
20058                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20059 4EEF           8A46         0A            mov	al,$A[bp]
20060 4EF2           30E4                       xor	ah,ah
20061 4EF4           50                         push	ax
20062                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20063 4EF5           E8         F8AB            call	_vgamem_fill_cga
20064 4EF8           83C4                   0C  add	sp,*$C
20065                                           !BCC_EOS
20066                                           ! 2166              else
20067                                           ! 2167               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20068 4EFB           EB           28            jmp .126
20069                       00004EFD            .123:
20070                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20071 4EFD           8A46         FD            mov	al,-3[bp]
20072 4F00           30E4                       xor	ah,ah
20073 4F02           50                         push	ax
20074                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20075 4F03           FF76         F8            push	-8[bp]
20076                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20077 4F06           8A46         FB            mov	al,-5[bp]
20078 4F09           30E4                       xor	ah,ah
20079 4F0B           50                         push	ax
20080                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20081 4F0C           8B46         F4            mov	ax,-$C[bp]
20082 4F0F           2A46         04            sub	al,4[bp]
20083 4F12           80DC                   00  sbb	ah,*0
20084                                           ! Debug: list unsigned int = ax+0 (used reg = )
20085 4F15           50                         push	ax
20086                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20087 4F16           FF76         F4            push	-$C[bp]
20088                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20089 4F19           8A46         0A            mov	al,$A[bp]
20090 4F1C           30E4                       xor	ah,ah
20091 4F1E           50                         push	ax
20092                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20093 4F1F           E8         F76F            call	_vgamem_copy_cga
20094 4F22           83C4                   0C  add	sp,*$C
20095                                           !BCC_EOS
20096                                           ! 2168              if (i>rlr) break;
20097                       00004F25            .126:
20098                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20099 4F25           8A46         0C            mov	al,$C[bp]
20100 4F28           30E4                       xor	ah,ah
20101 4F2A           3B46         F4            cmp	ax,-$C[bp]
20102 4F2D           73           02            jae 	.127
20103                       00004F2F            .128:
20104 4F2F           EB           13            jmp .11F
20105                                           !BCC_EOS
20106                                           ! 2169             }
20107                       00004F31            .127:
20108                                           ! 2170           }
20109                       00004F31            .120:
20110                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20111 4F31           8B46         F4            mov	ax,-$C[bp]
20112 4F34           48                         dec	ax
20113 4F35           8946         F4            mov	-$C[bp],ax
20114                       00004F38            .121:
20115                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20116 4F38           8A46         08            mov	al,8[bp]
20117 4F3B           30E4                       xor	ah,ah
20118 4F3D           3B46         F4            cmp	ax,-$C[bp]
20119 4F40         0F86         FF7C            blos	.122
20120                       00004F44            .129:
20121                       00004F44            .11F:
20122                                           ! 2171         }
20123                       00004F44            .11E:
20124                                           ! 2172        break;
20125                       00004F44            .110:
20126 4F44           EB           14            jmp .E6
20127                                           !BCC_EOS
20128                                           ! 2173     }
20129                                           ! 2174   }
20130 4F46           EB           12            jmp .E6
20131                       00004F48            .E8:
20132 4F48           2C                     02  sub	al,*2
20133 4F4A         0F84         FE1F            beq 	.109
20134 4F4E           2C                     01  sub	al,*1
20135 4F50         0F84         FC63            beq 	.EA
20136 4F54           2C                     01  sub	al,*1
20137 4F56         0F84         FC5D            beq 	.E9
20138                       00004F5A            .E6:
20139                       FFFFFFF0            ..FFFC	=	-$10
20140                                           ! 2175 }
20141                       00004F5A            .E5:
20142 4F5A           89EC                       mov	sp,bp
20143 4F5C           5D                         pop	bp
20144 4F5D           C3                         ret
20145                                           ! 2176 static void biosfn_read_char_attr (page,car)
20146                                           ! Register BX used in function biosfn_scroll
20147                                           ! 2177 Bit8u page;Bit16u *car;
20148                       00004F5E            _biosfn_read_char_attr:
20149                                           !BCC_EOS
20150                                           !BCC_EOS
20151                                           ! 2178 {Bit16u ss=get_SS();
20152 4F5E           55                         push	bp
20153 4F5F           89E5                       mov	bp,sp
20154 4F61           4C                         dec	sp
20155 4F62           4C                         dec	sp
20156                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20157 4F63           E8         2BCB            call	_get_SS
20158                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20159 4F66           8946         FE            mov	-2[bp],ax
20160                                           !BCC_EOS
20161                                           ! 2179  Bit8u xcurs,ycurs,mode,line;
20162                                           !BCC_EOS
20163                                           ! 2180  Bit16u nbcols,nbrows,address;
20164                                           !BCC_EOS
20165                                           ! 2181  Bit16u cursor,dummy;
20166                                           !BCC_EOS
20167                                           ! 2182  mode=read_byte(0x40,0x49);
20168 4F69           83C4                   F2  add	sp,*-$E
20169                                           ! Debug: list int = const $49 (used reg = )
20170 4F6C           B8                   0049  mov	ax,*$49
20171 4F6F           50                         push	ax
20172                                           ! Debug: list int = const $40 (used reg = )
20173 4F70           B8                   0040  mov	ax,*$40
20174 4F73           50                         push	ax
20175                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20176 4F74           E8         2B2E            call	_read_byte
20177 4F77           83C4                   04  add	sp,*4
20178                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20179 4F7A           8846         FB            mov	-5[bp],al
20180                                           !BCC_EOS
20181                                           ! 2183  line=find_vga_entry(mode);
20182                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20183 4F7D           8A46         FB            mov	al,-5[bp]
20184 4F80           30E4                       xor	ah,ah
20185 4F82           50                         push	ax
20186                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20187 4F83           E8         2A33            call	_find_vga_entry
20188 4F86           44                         inc	sp
20189 4F87           44                         inc	sp
20190                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20191 4F88           8846         FA            mov	-6[bp],al
20192                                           !BCC_EOS
20193                                           ! 2184  if(line==0xFF)return;
20194                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20195 4F8B           8A46         FA            mov	al,-6[bp]
20196 4F8E           3C                     FF  cmp	al,#$FF
20197 4F90           75           04            jne 	.12A
20198                       00004F92            .12B:
20199 4F92           89EC                       mov	sp,bp
20200 4F94           5D                         pop	bp
20201 4F95           C3                         ret
20202                                           !BCC_EOS
20203                                           ! 2185  biosfn_get_cursor_pos(page,&dummy,&cursor);
20204                       00004F96            .12A:
20205                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20206 4F96           8D5E         F2            lea	bx,-$E[bp]
20207 4F99           53                         push	bx
20208                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20209 4F9A           8D5E         F0            lea	bx,-$10[bp]
20210 4F9D           53                         push	bx
20211                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20212 4F9E           8A46         04            mov	al,4[bp]
20213 4FA1           30E4                       xor	ah,ah
20214 4FA3           50                         push	ax
20215                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20216 4FA4           E8         F3B9            call	_biosfn_get_cursor_pos
20217 4FA7           83C4                   06  add	sp,*6
20218                                           !BCC_EOS
20219                                           ! 2186  x
20220                                           ! 2186 curs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20221                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20222 4FAA           8A46         F2            mov	al,-$E[bp]
20223                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20224 4FAD           8846         FD            mov	-3[bp],al
20225                                           !BCC_EOS
20226                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20227 4FB0           8B46         F2            mov	ax,-$E[bp]
20228 4FB3           30C0                       xor	al,al
20229                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20230 4FB5           88E0                       mov	al,ah
20231 4FB7           30E4                       xor	ah,ah
20232                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20233 4FB9           8846         FC            mov	-4[bp],al
20234                                           !BCC_EOS
20235                                           ! 2187  nbrows=read_byte(0x40,0x84)+1;
20236                                           ! Debug: list int = const $84 (used reg = )
20237 4FBC           B8                   0084  mov	ax,#$84
20238 4FBF           50                         push	ax
20239                                           ! Debug: list int = const $40 (used reg = )
20240 4FC0           B8                   0040  mov	ax,*$40
20241 4FC3           50                         push	ax
20242                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20243 4FC4           E8         2ADE            call	_read_byte
20244 4FC7           83C4                   04  add	sp,*4
20245                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20246 4FCA           30E4                       xor	ah,ah
20247                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20248 4FCC           40                         inc	ax
20249 4FCD           8946         F6            mov	-$A[bp],ax
20250                                           !BCC_EOS
20251                                           ! 2188  nbcols=read_word(0x40,0x4A);
20252                                           ! Debug: list int = const $4A (used reg = )
20253 4FD0           B8                   004A  mov	ax,*$4A
20254 4FD3           50                         push	ax
20255                                           ! Debug: list int = const $40 (used reg = )
20256 4FD4           B8                   0040  mov	ax,*$40
20257 4FD7           50                         push	ax
20258                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20259 4FD8           E8         2ADD            call	_read_word
20260 4FDB           83C4                   04  add	sp,*4
20261                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20262 4FDE           8946         F8            mov	-8[bp],ax
20263                                           !BCC_EOS
20264                                           ! 2189  if(vga_modes[line].class==0x00)
20265                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20266 4FE1           8A46         FA            mov	al,-6[bp]
20267 4FE4           30E4                       xor	ah,ah
20268 4FE6           B1                     03  mov	cl,*3
20269 4FE8           D3E0                       shl	ax,cl
20270 4FEA           89C3                       mov	bx,ax
20271 4FEC           81C3                 01DC  add	bx,#_vga_modes
20272                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20273 4FF0           8A47         01            mov	al,1[bx]
20274 4FF3           84C0                       test	al,al
20275 4FF5           75           5E            jne 	.12C
20276                       00004FF7            .12D:
20277                                           ! 2190   {
20278                                           ! 2191    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20279                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20280 4FF7           8A46         FC            mov	al,-4[bp]
20281 4FFA           30E4                       xor	ah,ah
20282 4FFC           8B4E         F8            mov	cx,-8[bp]
20283 4FFF           F7E9                       imul	cx
20284                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20285                                           ! Debug: expression subtree swapping
20286 5001           0246         FD            add	al,-3[bp]
20287 5004           80D4                   00  adc	ah,*0
20288                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20289 5007           D1E0                       shl	ax,*1
20290 5009           50                         push	ax
20291                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20292 500A           8B46         F8            mov	ax,-8[bp]
20293 500D           8B4E         F6            mov	cx,-$A[bp]
20294 5010           F7E9                       imul	cx
20295                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20296 5012           D1E0                       shl	ax,*1
20297                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20298 5014           0C                     FF  or	al,#$FF
20299                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20300                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20301 5016           89C3                       mov	bx,ax
20302 5018           8A46         04            mov	al,4[bp]
20303 501B           30E4                       xor	ah,ah
20304 501D           93                         xchg	ax,bx
20305 501E           40                         inc	ax
20306 501F           89D9                       mov	cx,bx
20307 5021           F7E9                       imul	cx
20308                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20309 5023           0346         EE            add	ax,-$12[bp]
20310 5026           44                         inc	sp
20311 5027           44                         inc	sp
20312                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20313 5028           8946         F4            mov	-$C[bp],ax
20314                                           !BCC_EOS
20315                                           ! 2192    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20316                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20317 502B           FF76         F4            push	-$C[bp]
20318                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20319 502E           8A46         FA            mov	al,-6[bp]
20320 5031           30E4                       xor	ah,ah
20321 5033           B1                     03  mov	cl,*3
20322 5035           D3E0                       shl	ax,cl
20323 5037           89C3                       mov	bx,ax
20324 5039           81C3                 01DC  add	bx,#_vga_modes
20325                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20326 503D           FF77         04            push	4[bx]
20327                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20328 5040           E8         2A75            call	_read_word
20329 5043           83C4                   04  add	sp,*4
20330                                           ! Debug: list unsigned short = ax+0 (used reg = )
20331 5046           50                         push	ax
20332                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20333 5047           FF76         06            push	6[bp]
20334                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20335 504A           FF76         FE            push	-2[bp]
20336                                           ! Debug: func () void = write_word+0 (used reg = )
20337 504D           E8         2A93            call	_write_word
20338 5050           83C4                   06  add	sp,*6
20339                                           !BCC_EOS
20340                                           ! 2193   }
20341                                           ! 2194  else
20342                                           ! 2195   {
20343 5053           EB           00            jmp .12E
20344                       00005055            .12C:
20345                                           ! 2196   }
20346                                           ! 2197 }
20347                       00005055            .12E:
20348 5055           89EC                       mov	sp,bp
20349 5057           5D                         pop	bp
20350 5058           C3                         ret
20351                                           ! 2198 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20352                                           ! Register BX used in function biosfn_read_char_attr
20353                                           ! 2199 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20354                       00005059            _write_gfx_char_pl4:
20355                                           !BCC_EOS
20356                                           !BCC_EOS
20357                                           !BCC_EOS
20358                                           !BCC_EOS
20359                                           !BCC_EOS
20360                                           !BCC_EOS
20361                                           ! 2200 {
20362                                           ! 2201  Bit8u i,j,mask;
20363                                           !BCC_EOS
20364                                           ! 2202  Bit8u *fdata;
20365                                           !BCC_EOS
20366                                           ! 2203  Bit16u addr,dest,src;
20367                                           !BCC_EOS
20368                                           ! 2204  switch(cheight)
20369 5059           55                         push	bp
20370 505A           89E5                       mov	bp,sp
20371 505C           83C4                   F4  add	sp,*-$C
20372 505F           8A46         0E            mov	al,$E[bp]
20373                                           ! 2205   {case 14:
20374 5062           EB           18            jmp .131
20375                                           ! 2206     fdata = &vgafont14;
20376                       00005064            .132:
20377                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20378 5064           BB                   1740  mov	bx,#_vgafont14
20379 5067           895E         FA            mov	-6[bp],bx
20380                                           !BCC_EOS
20381                                           ! 2207     break;
20382 506A           EB           1A            jmp .12F
20383                                           !BCC_EOS
20384                                           ! 2208    case 16:
20385                                           ! 2209     fdata = &vgafont16;
20386                       0000506C            .133:
20387                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20388 506C           BB                   2540  mov	bx,#_vgafont16
20389 506F           895E         FA            mov	-6[bp],bx
20390                                           !BCC_EOS
20391                                           ! 2210     break;
20392 5072           EB           12            jmp .12F
20393                                           !BCC_EOS
20394                                           ! 2211    default:
20395                                           ! 2212     fdata = &vgafont8;
20396                       00005074            .134:
20397                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20398 5074           BB                   0F40  mov	bx,#_vgafont8
20399 5077           895E         FA            mov	-6[bp],bx
20400                                           !BCC_EOS
20401                                           ! 2213   }
20402                                           ! 2214  addr=xcurs+ycurs*cheight*nbcols;
20403 507A           EB           0A            jmp .12F
20404                       0000507C            .131:
20405 507C           2C                     0E  sub	al,*$E
20406 507E           74           E4            je 	.132
20407 5080           2C                     02  sub	al,*2
20408 5082           74           E8            je 	.133
20409 5084           EB           EE            jmp	.134
20410                       00005086            .12F:
20411                       FFFFFFF2            ..FFFB	=	-$E
20412                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20413 5086           8A46         0E            mov	al,$E[bp]
20414 5089           30E4                       xor	ah,ah
20415 508B           89C3                       mov	bx,ax
20416 508D           8A46         0A            mov	al,$A[bp]
20417 5090           30E4                       xor	ah,ah
20418 5092           89D9                       mov	cx,bx
20419 5094           F7E9                       imul	cx
20420                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20421 5096           89C3                       mov	bx,ax
20422 5098           8A46         0C            mov	al,$C[bp]
20423 509B           30E4                       xor	ah,ah
20424 509D           93                         xchg	ax,bx
20425 509E           89D9                       mov	cx,bx
20426 50A0           F7E9                       imul	cx
20427                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20428                                           ! Debug: expression subtree swapping
20429 50A2           0246         08            add	al,8[bp]
20430 50A5           80D4                   00  adc	ah,*0
20431                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20432 50A8           8946         F8            mov	-8[bp],ax
20433                                           !BCC_EOS
20434                                           ! 2215  src = car * cheight;
20435                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20436 50AB           8A46         0E            mov	al,$E[bp]
20437 50AE           30E4                       xor	ah,ah
20438 50B0           89C3                       mov	bx,ax
20439 50B2           8A46         04            mov	al,4[bp]
20440 50B5           30E4                       xor	ah,ah
20441 50B7           89D9                       mov	cx,bx
20442 50B9           F7E9                       imul	cx
20443                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20444 50BB           8946         F4            mov	-$C[bp],ax
20445                                           !BCC_EOS
20446                                           ! 2216  outw(0x3c4, 0x0f02);
20447                                           ! Debug: list int = const $F02 (used reg = )
20448 50BE           B8                   0F02  mov	ax,#$F02
20449 50C1           50                         push	ax
20450                                           ! Debug: list int = const $3C4 (used reg = )
20451 50C2           B8                   03C4  mov	ax,#$3C4
20452 50C5           50                         push	ax
20453                                           ! Debug: func () void = outw+0 (used reg = )
20454 50C6           E8         2A58            call	_outw
20455 50C9           83C4                   04  add	sp,*4
20456                                           !BCC_EOS
20457                                           ! 2217  outw(0x3ce, 0x0205);
20458                                           ! Debug: list int = const $205 (used reg = )
20459 50CC           B8                   0205  mov	ax,#$205
20460 50CF           50                         push	ax
20461                                           ! Debug: list int = const $3CE (used reg = )
20462 50D0           B8                   03CE  mov	ax,#$3CE
20463 50D3           50                         push	ax
20464                                           ! Debug: func () void = outw+0 (used reg = )
20465 50D4           E8         2A4A            call	_outw
20466 50D7           83C4                   04  add	sp,*4
20467                                           !BCC_EOS
20468                                           ! 2218  if(attr&0x80)
20469                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20470 50DA           8A46         06            mov	al,6[bp]
20471 50DD           24                     80  and	al,#$80
20472 50DF           84C0                       test	al,al
20473 50E1           74           10            je  	.135
20474                       000050E3            .136:
20475                                           ! 2219   {
20476                                           ! 2220    outw(0x3ce, 0x1803);
20477                                           ! Debug: list int = const $1803 (used reg = )
20478 50E3           B8                   1803  mov	ax,#$1803
20479 50E6           50                         push	ax
20480                                           ! Debug: list int = const $3CE (used reg = )
20481 50E7           B8                   03CE  mov	ax,#$3CE
20482 50EA           50                         push	ax
20483                                           ! Debug: func () void = outw+0 (used reg = )
20484 50EB           E8         2A33            call	_outw
20485 50EE           83C4                   04  add	sp,*4
20486                                           !BCC_EOS
20487                                           ! 2221   }
20488                                           ! 2222  else
20489                                           ! 2223   {
20490 50F1           EB           0E            jmp .137
20491                       000050F3            .135:
20492                                           ! 2224    outw(0x3ce, 0x0003);
20493                                           ! Debug: list int = const 3 (used reg = )
20494 50F3           B8                   0003  mov	ax,*3
20495 50F6           50                         push	ax
20496                                           ! Debug: list int = const $3CE (used reg = )
20497 50F7           B8                   03CE  mov	ax,#$3CE
20498 50FA           50                         push	ax
20499                                           ! Debug: func () void = outw+0 (used reg = )
20500 50FB           E8         2A23            call	_outw
20501 50FE           83C4                   04  add	sp,*4
20502                                           !BCC_EOS
20503                                           ! 2225   }
20504                                           ! 2226  for(i=0;i<cheight;i++)
20505                       00005101            .137:
20506                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20507 5101           30C0                       xor	al,al
20508 5103           8846         FF            mov	-1[bp],al
20509                                           !BCC_EOS
20510                                           !BCC_EOS
20511                                           ! 2227   {
20512 5106           E9         00A6            br 	.13A
20513                       00005109            .13B:
20514                                           ! 2228    dest=addr+i*nbcols;
20515                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20516 5109           8A46         0C            mov	al,$C[bp]
20517 510C           30E4                       xor	ah,ah
20518 510E           89C3                       mov	bx,ax
20519 5110           8A46         FF            mov	al,-1[bp]
20520 5113           30E4                       xor	ah,ah
20521 5115           89D9                       mov	cx,bx
20522 5117           F7E9                       imul	cx
20523                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20524                                           ! Debug: expression subtree swapping
20525 5119           0346         F8            add	ax,-8[bp]
20526                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20527 511C           8946         F6            mov	-$A[bp],ax
20528                                           !BCC_EOS
20529                                           ! 2229    for(j=0;j<8;j++)
20530                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20531 511F           30C0                       xor	al,al
20532 5121           8846         FE            mov	-2[bp],al
20533                                           !BCC_EOS
20534                                           !BCC_EOS
20535                                           ! 2230     {
20536 5124           EB           79            jmp .13E
20537                       00005126            .13F:
20538                                           ! 2231      mask=0x80>>j;
20539                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20540 5126           8A46         FE            mov	al,-2[bp]
20541 5129           30E4                       xor	ah,ah
20542 512B           89C3                       mov	bx,ax
20543 512D           B8                   0080  mov	ax,#$80
20544 5130           89D9                       mov	cx,bx
20545 5132           D3F8                       sar	ax,cl
20546                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20547 5134           8846         FD            mov	-3[bp],al
20548                                           !BCC_EOS
20549                                           ! 2232      outw(0x3ce, (mask << 8) | 0x08);
20550                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20551 5137           8A46         FD            mov	al,-3[bp]
20552 513A           30E4                       xor	ah,ah
20553 513C           88C4                       mov	ah,al
20554 513E           30C0                       xor	al,al
20555                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
20556 5140           0C                     08  or	al,*8
20557                                           ! Debug: list unsigned int = ax+0 (used reg = )
20558 5142           50                         push	ax
20559                                           ! Debug: list int = const $3CE (used reg = )
20560 5143           B8                   03CE  mov	ax,#$3CE
20561 5146           50                         push	ax
20562                                           ! Debug: func () void = outw+0 (used reg = )
20563 5147           E8         29D7            call	_outw
20564 514A           83C4                   04  add	sp,*4
20565                                           !BCC_EOS
20566                                           ! 2233      read_byte(0xa000,dest);
20567                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20568 514D           FF76         F6            push	-$A[bp]
20569                                           ! Debug: list unsigned int = const $A000 (used reg = )
20570 5150           B8                   A000  mov	ax,#$A000
20571 5153           50                         push	ax
20572                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20573 5154           E8         294E            call	_read_byte
20574 5157           83C4                   04  add	sp,*4
20575                                           !BCC_EOS
20576                                           ! 2234      if(fdata[src+i]&mask)
20577                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20578 515A           8B46         F4            mov	ax,-$C[bp]
20579 515D           0246         FF            add	al,-1[bp]
20580 5160           80D4                   00  adc	ah,*0
20581                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20582 5163           0346         FA            add	ax,-6[bp]
20583 5166           89C3                       mov	bx,ax
20584                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20585 5168           8A07                       mov	al,[bx]
20586 516A           2246         FD            and	al,-3[bp]
20587 516D           84C0                       test	al,al
20588 516F           74           17            je  	.140
20589                       00005171            .141:
20590                                           ! 2235       {
20591                                           ! 2236        write_byte(0xa000,dest,attr&0x0f);
20592                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
20593 5171           8A46         06            mov	al,6[bp]
20594 5174           24                     0F  and	al,*$F
20595                                           ! Debug: list unsigned char = al+0 (used reg = )
20596 5176           30E4                       xor	ah,ah
20597 5178           50                         push	ax
20598                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20599 5179           FF76         F6            push	-$A[bp]
20600                                           ! Debug: list unsigned int = const $A000 (used reg = )
20601 517C           B8                   A000  mov	ax,#$A000
20602 517F           50                         push	ax
20603                                           ! Debug: func () void = write_byte+0 (used reg = )
20604 5180           E8         2948            call	_write_byte
20605 5183           83C4                   06  add	sp,*6
20606                                           !BCC_EOS
20607                                           ! 2237       }
20608                                           ! 2238      else
20609                                           ! 2239       {
20610 5186           EB           10            jmp .142
20611                       00005188            .140:
20612                                           ! 2240        write_byte(0xa000,dest,0x00);
20613                                           ! Debug: list int = const 0 (used reg = )
20614 5188           31C0                       xor	ax,ax
20615 518A           50                         push	ax
20616                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20617 518B           FF76         F6            push	-$A[bp]
20618                                           ! Debug: list unsigned int = const $A000 (used reg = )
20619 518E           B8                   A000  mov	ax,#$A000
20620 5191           50                         push	ax
20621                                           ! Debug: func () void = write_byte+0 (used reg = )
20622 5192           E8         2936            call	_write_byte
20623 5195           83C4                   06  add	sp,*6
20624                                           !BCC_EOS
20625                                           ! 2241       }
20626                                           ! 2242     }
20627                       00005198            .142:
20628                                           ! 2243   }
20629                       00005198            .13D:
20630                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20631 5198           8A46         FE            mov	al,-2[bp]
20632 519B           40                         inc	ax
20633 519C           8846         FE            mov	-2[bp],al
20634                       0000519F            .13E:
20635                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20636 519F           8A46         FE            mov	al,-2[bp]
20637 51A2           3C                     08  cmp	al,*8
20638 51A4         0F82         FF7E            blo 	.13F
20639                       000051A8            .143:
20640                       000051A8            .13C:
20641                                           ! 2244 #asm
20642                       000051A8            .139:
20643                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
20644 51A8           8A46         FF            mov	al,-1[bp]
20645 51AB           40                         inc	ax
20646 51AC           8846         FF            mov	-1[bp],al
20647                       000051AF            .13A:
20648                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
20649 51AF           8A46         FF            mov	al,-1[bp]
20650 51B2           3A46         0E            cmp	al,$E[bp]
20651 51B5         0F82         FF50            blo 	.13B
20652                       000051B9            .144:
20653                       000051B9            .138:
20654                                           !BCC_EOS
20655                                           !BCC_ASM
20656                       0000000A            _write_gfx_char_pl4.j	set	$A
20657                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
20658                       00000006            _write_gfx_char_pl4.fdata	set	6
20659                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
20660                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
20661                       0000000E            .write_gfx_char_pl4.cheight	set	$E
20662                       00000018            _write_gfx_char_pl4.nbcols	set	$18
20663                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
20664                       0000000B            _write_gfx_char_pl4.i	set	$B
20665                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
20666                       00000016            _write_gfx_char_pl4.ycurs	set	$16
20667                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
20668                       00000009            _write_gfx_char_pl4.mask	set	9
20669                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
20670                       00000002            _write_gfx_char_pl4.dest	set	2
20671                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
20672                       00000014            _write_gfx_char_pl4.xcurs	set	$14
20673                       00000008            .write_gfx_char_pl4.xcurs	set	8
20674                       00000000            _write_gfx_char_pl4.src	set	0
20675                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
20676                       00000012            _write_gfx_char_pl4.attr	set	$12
20677                       00000006            .write_gfx_char_pl4.attr	set	6
20678                       00000010            _write_gfx_char_pl4.car	set	$10
20679                       00000004            .write_gfx_char_pl4.car	set	4
20680                       00000004            _write_gfx_char_pl4.addr	set	4
20681                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
20682 51B9           BA                   03CE    mov dx, # 0x3ce
20683 51BC           B8                   FF08    mov ax, #0xff08
20684 51BF           EF                           out dx, ax
20685 51C0           B8                   0005    mov ax, #0x0005
20686 51C3           EF                           out dx, ax
20687 51C4           B8                   0003    mov ax, #0x0003
20688 51C7           EF                           out dx, ax
20689                                           ! 2252 endasm
20690                                           !BCC_ENDASM
20691                                           !BCC_EOS
20692                                           ! 2253 }
20693 51C8           89EC                       mov	sp,bp
20694 51CA           5D                         pop	bp
20695 51CB           C3                         ret
20696                                           ! 2254 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
20697                                           ! Register BX used in function write_gfx_char_pl4
20698                                           ! 2255 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
20699                       000051CC            _write_gfx_char_cga:
20700                                           !BCC_EOS
20701                                           !BCC_EOS
20702                                           !BCC_EOS
20703                                           !BCC_EOS
20704                                           !BCC_EOS
20705                                           !BCC_EOS
20706                                           ! 2256 {
20707                                           ! 2257  Bit8u i,j,mask,data;
20708                                           !BCC_EOS
20709                                           ! 2258  Bit8u *fdata;
20710                                           !BCC_EOS
20711                                           ! 2259  Bit16u addr,dest,src;
20712                                           !BCC_EOS
20713                                           ! 2260  fdata = &vgafont8;
20714 51CC           55                         push	bp
20715 51CD           89E5                       mov	bp,sp
20716 51CF           83C4                   F4  add	sp,*-$C
20717                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20718 51D2           BB                   0F40  mov	bx,#_vgafont8
20719 51D5           895E         FA            mov	-6[bp],bx
20720                                           !BCC_EOS
20721                                           ! 2261  addr=(xcurs*bpp)+ycurs*320;
20722                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
20723 51D8           8A46         0A            mov	al,$A[bp]
20724 51DB           30E4                       xor	ah,ah
20725 51DD           B9                   0140  mov	cx,#$140
20726 51E0           F7E9                       imul	cx
20727 51E2           50                         push	ax
20728                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
20729 51E3           8A46         0E            mov	al,$E[bp]
20730 51E6           30E4                       xor	ah,ah
20731 51E8           89C3                       mov	bx,ax
20732 51EA           8A46         08            mov	al,8[bp]
20733 51ED           30E4                       xor	ah,ah
20734 51EF           89D9                       mov	cx,bx
20735 51F1           F7E9                       imul	cx
20736                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
20737 51F3           0346         F2            add	ax,-$E[bp]
20738 51F6           44                         inc	sp
20739 51F7           44                         inc	sp
20740                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20741 51F8           8946         F8            mov	-8[bp],ax
20742                                           !BCC_EOS
20743                                           ! 2262  src = car * 8;
20744                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
20745 51FB           8A46         04            mov	al,4[bp]
20746 51FE           30E4                       xor	ah,ah
20747 5200           B1                     03  mov	cl,*3
20748 5202           D3E0                       shl	ax,cl
20749                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20750 5204           8946         F4            mov	-$C[bp],ax
20751                                           !BCC_EOS
20752                                           ! 2263  for(i=0;i<8;i++)
20753                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20754 5207           30C0                       xor	al,al
20755 5209           8846         FF            mov	-1[bp],al
20756                                           !BCC_EOS
20757                                           !BCC_EOS
20758                                           ! 2264   {
20759 520C           E9         01B3            br 	.147
20760                       0000520F            .148:
20761                                           ! 2265    dest=addr+(i>>1)*80;
20762                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20763 520F           8A46         FF            mov	al,-1[bp]
20764 5212           30E4                       xor	ah,ah
20765 5214           D1E8                       shr	ax,*1
20766                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
20767 5216           B9                   0050  mov	cx,*$50
20768 5219           F7E9                       imul	cx
20769                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20770                                           ! Debug: expression subtree swapping
20771 521B           0346         F8            add	ax,-8[bp]
20772                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20773 521E           8946         F6            mov	-$A[bp],ax
20774                                           !BCC_EOS
20775                                           ! 2266    if (i & 1) dest += 0x2000;
20776                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20777 5221           8A46         FF            mov	al,-1[bp]
20778 5224           24                     01  and	al,*1
20779 5226           84C0                       test	al,al
20780 5228           74           09            je  	.149
20781                       0000522A            .14A:
20782                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
20783 522A           8B46         F6            mov	ax,-$A[bp]
20784 522D           05                   2000  add	ax,#$2000
20785 5230           8946         F6            mov	-$A[bp],ax
20786                                           !BCC_EOS
20787                                           ! 2267    mask = 0x80;
20788                       00005233            .149:
20789                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
20790 5233           B0                     80  mov	al,#$80
20791 5235           8846         FD            mov	-3[bp],al
20792                                           !BCC_EOS
20793                                           ! 2268    if (bpp == 1)
20794                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
20795 5238           8A46         0E            mov	al,$E[bp]
20796 523B           3C                     01  cmp	al,*1
20797 523D         0F85         00B3            bne 	.14B
20798                       00005241            .14C:
20799                                           ! 2269     {
20800                                           ! 2270      if (attr & 0x80)
20801                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20802 5241           8A46         06            mov	al,6[bp]
20803 5244           24                     80  and	al,#$80
20804 5246           84C0                       test	al,al
20805 5248           74           12            je  	.14D
20806                       0000524A            .14E:
20807                                           ! 2271       {
20808                                           ! 2272        data = read_byte(0xb800,dest);
20809                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20810 524A           FF76         F6            push	-$A[bp]
20811                                           ! Debug: list unsigned int = const $B800 (used reg = )
20812 524D           B8                   B800  mov	ax,#$B800
20813 5250           50                         push	ax
20814                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20815 5251           E8         2851            call	_read_byte
20816 5254           83C4                   04  add	sp,*4
20817                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20818 5257           8846         FC            mov	-4[bp],al
20819                                           !BCC_EOS
20820                                           ! 2273       }
20821                                           ! 2274      else
20822                                           ! 2275       {
20823 525A           EB           05            jmp .14F
20824                       0000525C            .14D:
20825                                           ! 2276        data = 0x00;
20826                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20827 525C           30C0                       xor	al,al
20828 525E           8846         FC            mov	-4[bp],al
20829                                           !BCC_EOS
20830                                           ! 2277       }
20831                                           ! 2278      for(j=0;j<8;j++)
20832                       00005261            .14F:
20833                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20834 5261           30C0                       xor	al,al
20835 5263           8846         FE            mov	-2[bp],al
20836                                           !BCC_EOS
20837                                           !BCC_EOS
20838                                           ! 2279       {
20839 5266           EB           6F            jmp .152
20840                       00005268            .153:
20841                                           ! 2280        if (fdata[src+i] & mask)
20842                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20843 5268           8B46         F4            mov	ax,-$C[bp]
20844 526B           0246         FF            add	al,-1[bp]
20845 526E           80D4                   00  adc	ah,*0
20846                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20847 5271           0346         FA            add	ax,-6[bp]
20848 5274           89C3                       mov	bx,ax
20849                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20850 5276           8A07                       mov	al,[bx]
20851 5278           2246         FD            and	al,-3[bp]
20852 527B           84C0                       test	al,al
20853 527D           74           47            je  	.154
20854                       0000527F            .155:
20855                                           ! 2281         {
20856                                           ! 2282          if (attr & 0x80)
20857                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20858 527F           8A46         06            mov	al,6[bp]
20859 5282           24                     80  and	al,#$80
20860 5284           84C0                       test	al,al
20861 5286           74           20            je  	.156
20862                       00005288            .157:
20863                                           ! 2283           {
20864                                           ! 2284            data ^= (attr & 0x01) << (7-j);
20865                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20866 5288           B8                   0007  mov	ax,*7
20867 528B           2A46         FE            sub	al,-2[bp]
20868 528E           80DC                   00  sbb	ah,*0
20869 5291           50                         push	ax
20870                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20871 5292           8A46         06            mov	al,6[bp]
20872 5295           24                     01  and	al,*1
20873                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20874 5297           30E4                       xor	ah,ah
20875 5299           8B4E         F2            mov	cx,-$E[bp]
20876 529C           D3E0                       shl	ax,cl
20877 529E           44                         inc	sp
20878 529F           44                         inc	sp
20879                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20880 52A0           3246         FC            xor	al,-4[bp]
20881 52A3           8846         FC            mov	-4[bp],al
20882                                           !BCC_EOS
20883                                           ! 2285           }
20884                                           ! 2286          else
20885                                           ! 2287           {
20886 52A6           EB           1E            jmp .158
20887                       000052A8            .156:
20888                                           ! 2288            data |= (attr & 0x01) << (7-j);
20889                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20890 52A8           B8                   0007  mov	ax,*7
20891 52AB           2A46         FE            sub	al,-2[bp]
20892 52AE           80DC                   00  sbb	ah,*0
20893 52B1           50                         push	ax
20894                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20895 52B2           8A46         06            mov	al,6[bp]
20896 52B5           24                     01  and	al,*1
20897                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20898 52B7           30E4                       xor	ah,ah
20899 52B9           8B4E         F2            mov	cx,-$E[bp]
20900 52BC           D3E0                       shl	ax,cl
20901 52BE           44                         inc	sp
20902 52BF           44                         inc	sp
20903                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20904 52C0           0A46         FC            or	al,-4[bp]
20905 52C3           8846         FC            mov	-4[bp],al
20906                                           !BCC_EOS
20907                                           ! 2289           }
20908                                           ! 2290         }
20909                       000052C6            .158:
20910                                           ! 2291        mask >
20911                       000052C6            .154:
20912                                           ! 2291 >= 1;
20913                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
20914 52C6           8A46         FD            mov	al,-3[bp]
20915 52C9           30E4                       xor	ah,ah
20916 52CB           D1E8                       shr	ax,*1
20917 52CD           8846         FD            mov	-3[bp],al
20918                                           !BCC_EOS
20919                                           ! 2292       }
20920                                           ! 2293      write_byte(0xb800,dest,data);
20921                       000052D0            .151:
20922                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20923 52D0           8A46         FE            mov	al,-2[bp]
20924 52D3           40                         inc	ax
20925 52D4           8846         FE            mov	-2[bp],al
20926                       000052D7            .152:
20927                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20928 52D7           8A46         FE            mov	al,-2[bp]
20929 52DA           3C                     08  cmp	al,*8
20930 52DC           72           8A            jb 	.153
20931                       000052DE            .159:
20932                       000052DE            .150:
20933                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
20934 52DE           8A46         FC            mov	al,-4[bp]
20935 52E1           30E4                       xor	ah,ah
20936 52E3           50                         push	ax
20937                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20938 52E4           FF76         F6            push	-$A[bp]
20939                                           ! Debug: list unsigned int = const $B800 (used reg = )
20940 52E7           B8                   B800  mov	ax,#$B800
20941 52EA           50                         push	ax
20942                                           ! Debug: func () void = write_byte+0 (used reg = )
20943 52EB           E8         27DD            call	_write_byte
20944 52EE           83C4                   06  add	sp,*6
20945                                           !BCC_EOS
20946                                           ! 2294     }
20947                                           ! 2295    else
20948                                           ! 2296     {
20949 52F1           E9         00C7            br 	.15A
20950                       000052F4            .14B:
20951                                           ! 2297      while (mask > 0)
20952                                           ! 2298       {
20953 52F4           E9         00BB            br 	.15C
20954                       000052F7            .15D:
20955                                           ! 2299        if (attr & 0x80)
20956                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20957 52F7           8A46         06            mov	al,6[bp]
20958 52FA           24                     80  and	al,#$80
20959 52FC           84C0                       test	al,al
20960 52FE           74           12            je  	.15E
20961                       00005300            .15F:
20962                                           ! 2300         {
20963                                           ! 2301          data = read_byte(0xb800,dest);
20964                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20965 5300           FF76         F6            push	-$A[bp]
20966                                           ! Debug: list unsigned int = const $B800 (used reg = )
20967 5303           B8                   B800  mov	ax,#$B800
20968 5306           50                         push	ax
20969                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20970 5307           E8         279B            call	_read_byte
20971 530A           83C4                   04  add	sp,*4
20972                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20973 530D           8846         FC            mov	-4[bp],al
20974                                           !BCC_EOS
20975                                           ! 2302         }
20976                                           ! 2303        else
20977                                           ! 2304         {
20978 5310           EB           05            jmp .160
20979                       00005312            .15E:
20980                                           ! 2305          data = 0x00;
20981                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20982 5312           30C0                       xor	al,al
20983 5314           8846         FC            mov	-4[bp],al
20984                                           !BCC_EOS
20985                                           ! 2306         }
20986                                           ! 2307        for(j=0;j<4;j++)
20987                       00005317            .160:
20988                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20989 5317           30C0                       xor	al,al
20990 5319           8846         FE            mov	-2[bp],al
20991                                           !BCC_EOS
20992                                           !BCC_EOS
20993                                           ! 2308         {
20994 531C           EB           73            jmp .163
20995                       0000531E            .164:
20996                                           ! 2309          if (fdata[src+i] & mask)
20997                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20998 531E           8B46         F4            mov	ax,-$C[bp]
20999 5321           0246         FF            add	al,-1[bp]
21000 5324           80D4                   00  adc	ah,*0
21001                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21002 5327           0346         FA            add	ax,-6[bp]
21003 532A           89C3                       mov	bx,ax
21004                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21005 532C           8A07                       mov	al,[bx]
21006 532E           2246         FD            and	al,-3[bp]
21007 5331           84C0                       test	al,al
21008 5333           74           4B            je  	.165
21009                       00005335            .166:
21010                                           ! 2310           {
21011                                           ! 2311            if (attr & 0x80)
21012                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21013 5335           8A46         06            mov	al,6[bp]
21014 5338           24                     80  and	al,#$80
21015 533A           84C0                       test	al,al
21016 533C           74           22            je  	.167
21017                       0000533E            .168:
21018                                           ! 2312             {
21019                                           ! 2313              data ^= (attr & 0x03) << ((3-j)*2);
21020                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21021 533E           B8                   0003  mov	ax,*3
21022 5341           2A46         FE            sub	al,-2[bp]
21023 5344           80DC                   00  sbb	ah,*0
21024                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21025 5347           D1E0                       shl	ax,*1
21026 5349           50                         push	ax
21027                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21028 534A           8A46         06            mov	al,6[bp]
21029 534D           24                     03  and	al,*3
21030                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21031 534F           30E4                       xor	ah,ah
21032 5351           8B4E         F2            mov	cx,-$E[bp]
21033 5354           D3E0                       shl	ax,cl
21034 5356           44                         inc	sp
21035 5357           44                         inc	sp
21036                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21037 5358           3246         FC            xor	al,-4[bp]
21038 535B           8846         FC            mov	-4[bp],al
21039                                           !BCC_EOS
21040                                           ! 2314             }
21041                                           ! 2315            else
21042                                           ! 2316             {
21043 535E           EB           20            jmp .169
21044                       00005360            .167:
21045                                           ! 2317              data |= (attr & 0x03) << ((3-j)*2);
21046                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21047 5360           B8                   0003  mov	ax,*3
21048 5363           2A46         FE            sub	al,-2[bp]
21049 5366           80DC                   00  sbb	ah,*0
21050                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21051 5369           D1E0                       shl	ax,*1
21052 536B           50                         push	ax
21053                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21054 536C           8A46         06            mov	al,6[bp]
21055 536F           24                     03  and	al,*3
21056                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21057 5371           30E4                       xor	ah,ah
21058 5373           8B4E         F2            mov	cx,-$E[bp]
21059 5376           D3E0                       shl	ax,cl
21060 5378           44                         inc	sp
21061 5379           44                         inc	sp
21062                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21063 537A           0A46         FC            or	al,-4[bp]
21064 537D           8846         FC            mov	-4[bp],al
21065                                           !BCC_EOS
21066                                           ! 2318             }
21067                                           ! 2319           }
21068                       00005380            .169:
21069                                           ! 2320          mask >>= 1;
21070                       00005380            .165:
21071                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21072 5380           8A46         FD            mov	al,-3[bp]
21073 5383           30E4                       xor	ah,ah
21074 5385           D1E8                       shr	ax,*1
21075 5387           8846         FD            mov	-3[bp],al
21076                                           !BCC_EOS
21077                                           ! 2321         }
21078                                           ! 2322        write_byte(0xb800,dest,data);
21079                       0000538A            .162:
21080                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21081 538A           8A46         FE            mov	al,-2[bp]
21082 538D           40                         inc	ax
21083 538E           8846         FE            mov	-2[bp],al
21084                       00005391            .163:
21085                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21086 5391           8A46         FE            mov	al,-2[bp]
21087 5394           3C                     04  cmp	al,*4
21088 5396           72           86            jb 	.164
21089                       00005398            .16A:
21090                       00005398            .161:
21091                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21092 5398           8A46         FC            mov	al,-4[bp]
21093 539B           30E4                       xor	ah,ah
21094 539D           50                         push	ax
21095                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21096 539E           FF76         F6            push	-$A[bp]
21097                                           ! Debug: list unsigned int = const $B800 (used reg = )
21098 53A1           B8                   B800  mov	ax,#$B800
21099 53A4           50                         push	ax
21100                                           ! Debug: func () void = write_byte+0 (used reg = )
21101 53A5           E8         2723            call	_write_byte
21102 53A8           83C4                   06  add	sp,*6
21103                                           !BCC_EOS
21104                                           ! 2323        dest += 1;
21105                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21106 53AB           8B46         F6            mov	ax,-$A[bp]
21107 53AE           40                         inc	ax
21108 53AF           8946         F6            mov	-$A[bp],ax
21109                                           !BCC_EOS
21110                                           ! 2324       }
21111                                           ! 2325     }
21112                       000053B2            .15C:
21113                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21114 53B2           8A46         FD            mov	al,-3[bp]
21115 53B5           84C0                       test	al,al
21116 53B7         0F85         FF3C            bne 	.15D
21117                       000053BB            .16B:
21118                       000053BB            .15B:
21119                                           ! 2326   }
21120                       000053BB            .15A:
21121                                           ! 2327 }
21122                       000053BB            .146:
21123                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21124 53BB           8A46         FF            mov	al,-1[bp]
21125 53BE           40                         inc	ax
21126 53BF           8846         FF            mov	-1[bp],al
21127                       000053C2            .147:
21128                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21129 53C2           8A46         FF            mov	al,-1[bp]
21130 53C5           3C                     08  cmp	al,*8
21131 53C7         0F82         FE44            blo 	.148
21132                       000053CB            .16C:
21133                       000053CB            .145:
21134 53CB           89EC                       mov	sp,bp
21135 53CD           5D                         pop	bp
21136 53CE           C3                         ret
21137                                           ! 2328 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21138                                           ! Register BX used in function write_gfx_char_cga
21139                                           ! 2329 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21140                       000053CF            _write_gfx_char_lin:
21141                                           !BCC_EOS
21142                                           !BCC_EOS
21143                                           !BCC_EOS
21144                                           !BCC_EOS
21145                                           !BCC_EOS
21146                                           ! 2330 {
21147                                           ! 2331  Bit8u i,j,mask,data;
21148                                           !BCC_EOS
21149                                           ! 2332  Bit8u *fdata;
21150                                           !BCC_EOS
21151                                           ! 2333  Bit16u addr,dest,src;
21152                                           !BCC_EOS
21153                                           ! 2334  fdata = &vgafont8;
21154 53CF           55                         push	bp
21155 53D0           89E5                       mov	bp,sp
21156 53D2           83C4                   F4  add	sp,*-$C
21157                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21158 53D5           BB                   0F40  mov	bx,#_vgafont8
21159 53D8           895E         FA            mov	-6[bp],bx
21160                                           !BCC_EOS
21161                                           ! 2335  addr=xcurs*8+ycurs*nbcols*64;
21162                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21163 53DB           8A46         0C            mov	al,$C[bp]
21164 53DE           30E4                       xor	ah,ah
21165 53E0           89C3                       mov	bx,ax
21166 53E2           8A46         0A            mov	al,$A[bp]
21167 53E5           30E4                       xor	ah,ah
21168 53E7           89D9                       mov	cx,bx
21169 53E9           F7E9                       imul	cx
21170                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21171 53EB           B1                     06  mov	cl,*6
21172 53ED           D3E0                       shl	ax,cl
21173 53EF           50                         push	ax
21174                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21175 53F0           8A46         08            mov	al,8[bp]
21176 53F3           30E4                       xor	ah,ah
21177 53F5           B1                     03  mov	cl,*3
21178 53F7           D3E0                       shl	ax,cl
21179                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21180 53F9           0346         F2            add	ax,-$E[bp]
21181 53FC           44                         inc	sp
21182 53FD           44                         inc	sp
21183                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21184 53FE           8946         F8            mov	-8[bp],ax
21185                                           !BCC_EOS
21186                                           ! 2336  src = car * 8;
21187                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21188 5401           8A46         04            mov	al,4[bp]
21189 5404           30E4                       xor	ah,ah
21190 5406           B1                     03  mov	cl,*3
21191 5408           D3E0                       shl	ax,cl
21192                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21193 540A           8946         F4            mov	-$C[bp],ax
21194                                           !BCC_EOS
21195                                           ! 2337  for(i=0;i<8;i++)
21196                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21197 540D           30C0                       xor	al,al
21198 540F           8846         FF            mov	-1[bp],al
21199                                           !BCC_EOS
21200                                           !BCC_EOS
21201                                           ! 2338   {
21202 5412           E9         0081            br 	.16F
21203                       00005415            .170:
21204                                           ! 2339    dest=addr+i*nbcols*8;
21205                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21206 5415           8A46         0C            mov	al,$C[bp]
21207 5418           30E4                       xor	ah,ah
21208 541A           89C3                       mov	bx,ax
21209 541C           8A46         FF            mov	al,-1[bp]
21210 541F           30E4                       xor	ah,ah
21211 5421           89D9                       mov	cx,bx
21212 5423           F7E9                       imul	cx
21213                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21214 5425           B1                     03  mov	cl,*3
21215 5427           D3E0                       shl	ax,cl
21216                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21217                                           ! Debug: expression subtree swapping
21218 5429           0346         F8            add	ax,-8[bp]
21219                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21220 542C           8946         F6            mov	-$A[bp],ax
21221                                           !BCC_EOS
21222                                           ! 2340    mask = 0x80;
21223                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21224 542F           B0                     80  mov	al,#$80
21225 5431           8846         FD            mov	-3[bp],al
21226                                           !BCC_EOS
21227                                           ! 2341    for(j=0;j<8;j++)
21228                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21229 5434           30C0                       xor	al,al
21230 5436           8846         FE            mov	-2[bp],al
21231                                           !BCC_EOS
21232                                           !BCC_EOS
21233                                           ! 2342     {
21234 5439           EB           4D            jmp .173
21235                       0000543B            .174:
21236                                           ! 2343      data = 0x00;
21237                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21238 543B           30C0                       xor	al,al
21239 543D           8846         FC            mov	-4[bp],al
21240                                           !BCC_EOS
21241                                           ! 2344      if (fdata[src+i] & mask)
21242                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21243 5440           8B46         F4            mov	ax,-$C[bp]
21244 5443           0246         FF            add	al,-1[bp]
21245 5446           80D4                   00  adc	ah,*0
21246                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21247 5449           0346         FA            add	ax,-6[bp]
21248 544C           89C3                       mov	bx,ax
21249                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21250 544E           8A07                       mov	al,[bx]
21251 5450           2246         FD            and	al,-3[bp]
21252 5453           84C0                       test	al,al
21253 5455           74           06            je  	.175
21254                       00005457            .176:
21255                                           ! 2345       {
21256                                           ! 2346        data = attr;
21257                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21258 5457           8A46         06            mov	al,6[bp]
21259 545A           8846         FC            mov	-4[bp],al
21260                                           !BCC_EOS
21261                                           ! 2347       }
21262                                           ! 2348      write_byte(0xa000,dest+j,data);
21263                       0000545D            .175:
21264                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21265 545D           8A46         FC            mov	al,-4[bp]
21266 5460           30E4                       xor	ah,ah
21267 5462           50                         push	ax
21268                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21269 5463           8B46         F6            mov	ax,-$A[bp]
21270 5466           0246         FE            add	al,-2[bp]
21271 5469           80D4                   00  adc	ah,*0
21272                                           ! Debug: list unsigned int = ax+0 (used reg = )
21273 546C           50                         push	ax
21274                                           ! Debug: list unsigned int = const $A000 (used reg = )
21275 546D           B8                   A000  mov	ax,#$A000
21276 5470           50                         push	ax
21277                                           ! Debug: func () void = write_byte+0 (used reg = )
21278 5471           E8         2657            call	_write_byte
21279 5474           83C4                   06  add	sp,*6
21280                                           !BCC_EOS
21281                                           ! 2349      mask >>= 1;
21282                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21283 5477           8A46         FD            mov	al,-3[bp]
21284 547A           30E4                       xor	ah,ah
21285 547C           D1E8                       shr	ax,*1
21286 547E           8846         FD            mov	-3[bp],al
21287                                           !BCC_EOS
21288                                           ! 2350     }
21289                                           ! 2351   }
21290                       00005481            .172:
21291                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21292 5481           8A46         FE            mov	al,-2[bp]
21293 5484           40                         inc	ax
21294 5485           8846         FE            mov	-2[bp],al
21295                       00005488            .173:
21296                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21297 5488           8A46         FE            mov	al,-2[bp]
21298 548B           3C                     08  cmp	al,*8
21299 548D           72           AC            jb 	.174
21300                       0000548F            .177:
21301                       0000548F            .171:
21302                                           ! 2352 }
21303                       0000548F            .16E:
21304                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21305 548F           8A46         FF            mov	al,-1[bp]
21306 5492           40                         inc	ax
21307 5493           8846         FF            mov	-1[bp],al
21308                       00005496            .16F:
21309                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21310 5496           8A46         FF            mov	al,-1[bp]
21311 5499           3C                     08  cmp	al,*8
21312 549B         0F82         FF76            blo 	.170
21313                       0000549F            .178:
21314                       0000549F            .16D:
21315 549F           89EC                       mov	sp,bp
21316 54A1           5D                         pop	bp
21317 54A2           C3                         ret
21318                                           ! 2353 static void biosfn_write_char_attr (car,page,attr,count)
21319                                           ! Register BX used in function write_gfx_char_lin
21320                                           ! 2354 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21321                       000054A3            _biosfn_write_char_attr:
21322                                           !BCC_EOS
21323                                           !BCC_EOS
21324                                           !BCC_EOS
21325                                           !BCC_EOS
21326                                           ! 2355 {
21327                                           ! 2356  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21328                                           !BCC_EOS
21329                                           ! 2357  Bit16u nbcols,nbrows,address;
21330                                           !BCC_EOS
21331                                           ! 2358  Bit16u cursor,dummy;
21332                                           !BCC_EOS
21333                                           ! 2359  mode=read_byte(0x40,0x49);
21334 54A3           55                         push	bp
21335 54A4           89E5                       mov	bp,sp
21336 54A6           83C4                   F0  add	sp,*-$10
21337                                           ! Debug: list int = const $49 (used reg = )
21338 54A9           B8                   0049  mov	ax,*$49
21339 54AC           50                         push	ax
21340                                           ! Debug: list int = const $40 (used reg = )
21341 54AD           B8                   0040  mov	ax,*$40
21342 54B0           50                         push	ax
21343                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21344 54B1           E8         25F1            call	_read_byte
21345 54B4           83C4                   04  add	sp,*4
21346                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21347 54B7           8846         FC            mov	-4[bp],al
21348                                           !BCC_EOS
21349                                           ! 2360  line=find_vga_entry(mode);
21350                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21351 54BA           8A46         FC            mov	al,-4[bp]
21352 54BD           30E4                       xor	ah,ah
21353 54BF           50                         push	ax
21354                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21355 54C0           E8         24F6            call	_find_vga_entry
21356 54C3           44                         inc	sp
21357 54C4           44                         inc	sp
21358                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21359 54C5           8846         FB            mov	-5[bp],al
21360                                           !BCC_EOS
21361                                           ! 2361  if(line==0xFF)return;
21362                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21363 54C8           8A46         FB            mov	al,-5[bp]
21364 54CB           3C                     FF  cmp	al,#$FF
21365 54CD         0F85         0004            bne 	.179
21366                       000054D1            .17A:
21367 54D1           89EC                       mov	sp,bp
21368 54D3           5D                         pop	bp
21369 54D4           C3                         ret
21370                                           !BCC_EOS
21371                                           ! 2362  biosfn_get_cursor_pos(page,&dummy,&cursor);
21372                       000054D5            .179:
21373                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21374 54D5           8D5E         F2            lea	bx,-$E[bp]
21375 54D8           53                         push	bx
21376                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21377 54D9           8D5E         F0            lea	bx,-$10[bp]
21378 54DC           53                         push	bx
21379                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21380 54DD           8A46         06            mov	al,6[bp]
21381 54E0           30E4                       xor	ah,ah
21382 54E2           50                         push	ax
21383                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21384 54E3           E8         EE7A            call	_biosfn_get_cursor_pos
21385 54E6           83C4                   06  add	sp,*6
21386                                           !BCC_EOS
21387                                           ! 2363  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21388                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21389 54E9           8A46         F2            mov	al,-$E[bp]
21390                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21391 54EC           8846         FE            mov	-2[bp],al
21392                                           !BCC_EOS
21393                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21394 54EF           8B46         F2            mov	ax,-$E[bp]
21395 54F2           30C0                       xor	al,al
21396                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21397 54F4           88E0                       mov	al,ah
21398 54F6           30E4                       xor	ah,ah
21399                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21400 54F8           8846         FD            mov	-3[bp],al
21401                                           !BCC_EOS
21402                                           ! 2364  nbrows=read_byte(0x40,0x84)+1;
21403                                           ! Debug: list int = const $84 (used reg = )
21404 54FB           B8                   0084  mov	ax,#$84
21405 54FE           50                         push	ax
21406                                           ! Debug: list int = const $40 (used reg = )
21407 54FF           B8                   0040  mov	ax,*$40
21408 5502           50                         push	ax
21409                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21410 5503           E8         259F            call	_read_byte
21411 5506           83C4                   04  add	sp,*4
21412                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21413 5509           30E4                       xor	ah,ah
21414                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21415 550B           40                         inc	ax
21416 550C           8946         F6            mov	-$A[bp],ax
21417                                           !BCC_EOS
21418                                           ! 2365  nbcols=read_word(0x40,0x4A);
21419                                           ! Debug: list int = const $4A (used reg = )
21420 550F           B8                   004A  mov	ax,*$4A
21421 5512           50                         push	ax
21422                                           ! Debug: list int = const $40 (used reg = )
21423 5513           B8                   0040  mov	ax,*$40
21424 5516           50                         push	ax
21425                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21426 5517           E8         259E            call	_read_word
21427 551A           83C4                   04  add	sp,*4
21428                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21429 551D           8946         F8            mov	-8[bp],ax
21430                                           !BCC_EOS
21431                                           ! 2366  if(vga_modes[line].class==0x00)
21432                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21433 5520           8A46         FB            mov	al,-5[bp]
21434 5523           30E4                       xor	ah,ah
21435 5525           B1                     03  mov	cl,*3
21436 5527           D3E0                       shl	ax,cl
21437 5529           89C3                       mov	bx,ax
21438 552B           81C3                 01DC  add	bx,#_vga_modes
21439                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21440 552F           8A47         01            mov	al,1[bx]
21441 5532           84C0                       test	al,al
21442 5534           75           6A            jne 	.17B
21443                       00005536            .17C:
21444                                           ! 2367   {
21445                                           ! 2368    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21446                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21447 5536           8A46         FD            mov	al,-3[bp]
21448 5539           30E4                       xor	ah,ah
21449 553B           8B4E         F8            mov	cx,-8[bp]
21450 553E           F7E9                       imul	cx
21451                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21452                                           ! Debug: expression subtree swapping
21453 5540           0246         FE            add	al,-2[bp]
21454 5543           80D4                   00  adc	ah,*0
21455                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21456 5546           D1E0                       shl	ax,*1
21457 5548           50                         push	ax
21458                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21459 5549           8B46         F8            mov	ax,-8[bp]
21460 554C           8B4E         F6            mov	cx,-$A[bp]
21461 554F           F7E9                       imul	cx
21462                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21463 5551           D1E0                       shl	ax,*1
21464                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21465 5553           0C                     FF  or	al,#$FF
21466                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21467                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21468 5555           89C3                       mov	bx,ax
21469 5557           8A46         06            mov	al,6[bp]
21470 555A           30E4                       xor	ah,ah
21471 555C           93                         xchg	ax,bx
21472 555D           40                         inc	ax
21473 555E           89D9                       mov	cx,bx
21474 5560           F7E9                       imul	cx
21475                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21476 5562           0346         EE            add	ax,-$12[bp]
21477 5565           44                         inc	sp
21478 5566           44                         inc	sp
21479                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21480 5567           8946         F4            mov	-$C[bp],ax
21481                                           !BCC_EOS
21482                                           ! 2369    dummy=((Bit16u)attr<<8)+car;
21483                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21484 556A           8A46         08            mov	al,8[bp]
21485 556D           30E4                       xor	ah,ah
21486                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21487 556F           88C4                       mov	ah,al
21488 5571           30C0                       xor	al,al
21489                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21490 5573           0246         04            add	al,4[bp]
21491 5576           80D4                   00  adc	ah,*0
21492                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21493 5579           8946         F0            mov	-$10[bp],ax
21494                                           !BCC_EOS
21495                                           ! 2370    memsetw(vga_modes[line].sstart,address,dummy,count);
21496                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21497 557C           FF76         0A            push	$A[bp]
21498                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21499 557F           FF76         F0            push	-$10[bp]
21500                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21501 5582           FF76         F4            push	-$C[bp]
21502                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21503 5585           8A46         FB            mov	al,-5[bp]
21504 5588           30E4                       xor	ah,ah
21505 558A           B1                     03  mov	cl,*3
21506 558C           D3E0                       shl	ax,cl
21507 558E           89C3                       mov	bx,ax
21508 5590           81C3                 01DC  add	bx,#_vga_modes
21509                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21510 5594           FF77         04            push	4[bx]
21511                                           ! Debug: func () void = memsetw+0 (used reg = )
21512 5597           E8         2486            call	_memsetw
21513 559A           83C4                   08  add	sp,*8
21514                                           !BCC_EOS
21515                                           ! 2371   }
21516                                           ! 2372  else
21517                                           ! 2373   {
21518 559D           E9         00F3            br 	.17D
21519                       000055A0            .17B:
21520                                           ! 2374    cheight=video_param_table[line_to_vpti[line]].cheight;
21521                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21522 55A0           8A46         FB            mov	al,-5[bp]
21523 55A3           30E4                       xor	ah,ah
21524 55A5           89C3                       mov	bx,ax
21525                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21526 55A7           8A87       025C            mov	al,_line_to_vpti[bx]
21527 55AB           30E4                       xor	ah,ah
21528 55AD           B1                     06  mov	cl,*6
21529 55AF           D3E0                       shl	ax,cl
21530 55B1           89C3                       mov	bx,ax
21531 55B3           81C3                 0270  add	bx,#_video_param_table
21532                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21533 55B7           8A47         02            mov	al,2[bx]
21534 55BA           8846         FF            mov	-1[bp],al
21535                                           !BCC_EOS
21536                                           ! 2375    bpp=vga_modes[line].pixbits;
21537                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21538 55BD           8A46         FB            mov	al,-5[bp]
21539 55C0           30E4                       xor	ah,ah
21540 55C2           B1                     03  mov	cl,*3
21541 55C4           D3E0                       shl	ax,cl
21542 55C6           89C3                       mov	bx,ax
21543 55C8           81C3                 01DC  add	bx,#_vga_modes
21544                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21545 55CC           8A47         03            mov	al,3[bx]
21546 55CF           8846         FA            mov	-6[bp],al
21547                                           !BCC_EOS
21548                                           ! 2376    while((count-->0) && (xcurs<nbcols))
21549                                           ! 2377     {
21550 55D2           E9         00A6            br 	.17F
21551                       000055D5            .180:
21552                                           ! 2378      switch(vga_modes[line].memmodel)
21553                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21554 55D5           8A46         FB            mov	al,-5[bp]
21555 55D8           30E4                       xor	ah,ah
21556 55DA           B1                     03  mov	cl,*3
21557 55DC           D3E0                       shl	ax,cl
21558 55DE           89C3                       mov	bx,ax
21559 55E0           81C3                 01DC  add	bx,#_vga_modes
21560 55E4           8A47         02            mov	al,2[bx]
21561                                           ! 2379       {
21562 55E7           EB           77            jmp .183
21563                                           ! 2380        case 0x04:
21564                                           ! 2381        case 0x03:
21565                       000055E9            .184:
21566                                           ! 2382          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21567                       000055E9            .185:
21568                                           ! 2382 
21569                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21570 55E9           8A46         FF            mov	al,-1[bp]
21571 55EC           30E4                       xor	ah,ah
21572 55EE           50                         push	ax
21573                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21574 55EF           FF76         F8            push	-8[bp]
21575                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21576 55F2           8A46         FD            mov	al,-3[bp]
21577 55F5           30E4                       xor	ah,ah
21578 55F7           50                         push	ax
21579                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21580 55F8           8A46         FE            mov	al,-2[bp]
21581 55FB           30E4                       xor	ah,ah
21582 55FD           50                         push	ax
21583                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21584 55FE           8A46         08            mov	al,8[bp]
21585 5601           30E4                       xor	ah,ah
21586 5603           50                         push	ax
21587                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21588 5604           8A46         04            mov	al,4[bp]
21589 5607           30E4                       xor	ah,ah
21590 5609           50                         push	ax
21591                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21592 560A           E8         FA4C            call	_write_gfx_char_pl4
21593 560D           83C4                   0C  add	sp,*$C
21594                                           !BCC_EOS
21595                                           ! 2383          break;
21596 5610           EB           62            jmp .181
21597                                           !BCC_EOS
21598                                           ! 2384        case 0x02:
21599                                           ! 2385          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21600                       00005612            .186:
21601                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21602 5612           8A46         FA            mov	al,-6[bp]
21603 5615           30E4                       xor	ah,ah
21604 5617           50                         push	ax
21605                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21606 5618           FF76         F8            push	-8[bp]
21607                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21608 561B           8A46         FD            mov	al,-3[bp]
21609 561E           30E4                       xor	ah,ah
21610 5620           50                         push	ax
21611                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21612 5621           8A46         FE            mov	al,-2[bp]
21613 5624           30E4                       xor	ah,ah
21614 5626           50                         push	ax
21615                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21616 5627           8A46         08            mov	al,8[bp]
21617 562A           30E4                       xor	ah,ah
21618 562C           50                         push	ax
21619                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21620 562D           8A46         04            mov	al,4[bp]
21621 5630           30E4                       xor	ah,ah
21622 5632           50                         push	ax
21623                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
21624 5633           E8         FB96            call	_write_gfx_char_cga
21625 5636           83C4                   0C  add	sp,*$C
21626                                           !BCC_EOS
21627                                           ! 2386          break;
21628 5639           EB           39            jmp .181
21629                                           !BCC_EOS
21630                                           ! 2387        case 0x05:
21631                                           ! 2388          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
21632                       0000563B            .187:
21633                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
21634 563B           FF76         F8            push	-8[bp]
21635                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
21636 563E           8A46         FD            mov	al,-3[bp]
21637 5641           30E4                       xor	ah,ah
21638 5643           50                         push	ax
21639                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
21640 5644           8A46         FE            mov	al,-2[bp]
21641 5647           30E4                       xor	ah,ah
21642 5649           50                         push	ax
21643                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
21644 564A           8A46         08            mov	al,8[bp]
21645 564D           30E4                       xor	ah,ah
21646 564F           50                         push	ax
21647                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
21648 5650           8A46         04            mov	al,4[bp]
21649 5653           30E4                       xor	ah,ah
21650 5655           50                         push	ax
21651                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
21652 5656           E8         FD76            call	_write_gfx_char_lin
21653 5659           83C4                   0A  add	sp,*$A
21654                                           !BCC_EOS
21655                                           ! 2389          break;
21656 565C           EB           16            jmp .181
21657                                           !BCC_EOS
21658                                           ! 2390       }
21659                                           ! 2391      xcurs++;
21660 565E           EB           14            jmp .181
21661                       00005660            .183:
21662 5660           2C                     02  sub	al,*2
21663 5662           74           AE            je 	.186
21664 5664           2C                     01  sub	al,*1
21665 5666         0F84         FF7F            beq 	.185
21666 566A           2C                     01  sub	al,*1
21667 566C         0F84         FF79            beq 	.184
21668 5670           2C                     01  sub	al,*1
21669 5672           74           C7            je 	.187
21670                       00005674            .181:
21671                       FFFFFFEE            ..FFFA	=	-$12
21672                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
21673 5674           8A46         FE            mov	al,-2[bp]
21674 5677           40                         inc	ax
21675 5678           8846         FE            mov	-2[bp],al
21676                                           !BCC_EOS
21677                                           ! 2392     }
21678                                           ! 2393   }
21679                       0000567B            .17F:
21680                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21681 567B           8B46         0A            mov	ax,$A[bp]
21682 567E           48                         dec	ax
21683 567F           8946         0A            mov	$A[bp],ax
21684                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21685 5682           3D                   FFFF  cmp	ax,*-1
21686 5685           74           0C            je  	.188
21687                       00005687            .189:
21688                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
21689 5687           8A46         FE            mov	al,-2[bp]
21690 568A           30E4                       xor	ah,ah
21691 568C           3B46         F8            cmp	ax,-8[bp]
21692 568F         0F82         FF42            blo 	.180
21693                       00005693            .188:
21694                       00005693            .17E:
21695                                           ! 2394 }
21696                       00005693            .17D:
21697 5693           89EC                       mov	sp,bp
21698 5695           5D                         pop	bp
21699 5696           C3                         ret
21700                                           ! 2395 static void biosfn_write_char_only (car,page,attr,count)
21701                                           ! Register BX used in function biosfn_write_char_attr
21702                                           ! 2396 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21703                       00005697            _biosfn_write_char_only:
21704                                           !BCC_EOS
21705                                           !BCC_EOS
21706                                           !BCC_EOS
21707                                           !BCC_EOS
21708                                           ! 2397 {
21709                                           ! 2398  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21710                                           !BCC_EOS
21711                                           ! 2399  Bit16u nbcols,nbrows,address;
21712                                           !BCC_EOS
21713                                           ! 2400  Bit16u cursor,dummy;
21714                                           !BCC_EOS
21715                                           ! 2401  mode=read_byte(0x40,0x49);
21716 5697           55                         push	bp
21717 5698           89E5                       mov	bp,sp
21718 569A           83C4                   F0  add	sp,*-$10
21719                                           ! Debug: list int = const $49 (used reg = )
21720 569D           B8                   0049  mov	ax,*$49
21721 56A0           50                         push	ax
21722                                           ! Debug: list int = const $40 (used reg = )
21723 56A1           B8                   0040  mov	ax,*$40
21724 56A4           50                         push	ax
21725                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21726 56A5           E8         23FD            call	_read_byte
21727 56A8           83C4                   04  add	sp,*4
21728                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21729 56AB           8846         FC            mov	-4[bp],al
21730                                           !BCC_EOS
21731                                           ! 2402  line=find_vga_entry(mode);
21732                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21733 56AE           8A46         FC            mov	al,-4[bp]
21734 56B1           30E4                       xor	ah,ah
21735 56B3           50                         push	ax
21736                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21737 56B4           E8         2302            call	_find_vga_entry
21738 56B7           44                         inc	sp
21739 56B8           44                         inc	sp
21740                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21741 56B9           8846         FB            mov	-5[bp],al
21742                                           !BCC_EOS
21743                                           ! 2403  if(line==0xFF)return;
21744                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21745 56BC           8A46         FB            mov	al,-5[bp]
21746 56BF           3C                     FF  cmp	al,#$FF
21747 56C1           75           04            jne 	.18A
21748                       000056C3            .18B:
21749 56C3           89EC                       mov	sp,bp
21750 56C5           5D                         pop	bp
21751 56C6           C3                         ret
21752                                           !BCC_EOS
21753                                           ! 2404  biosfn_get_cursor_pos(page,&dummy,&cursor);
21754                       000056C7            .18A:
21755                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21756 56C7           8D5E         F2            lea	bx,-$E[bp]
21757 56CA           53                         push	bx
21758                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21759 56CB           8D5E         F0            lea	bx,-$10[bp]
21760 56CE           53                         push	bx
21761                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21762 56CF           8A46         06            mov	al,6[bp]
21763 56D2           30E4                       xor	ah,ah
21764 56D4           50                         push	ax
21765                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21766 56D5           E8         EC88            call	_biosfn_get_cursor_pos
21767 56D8           83C4                   06  add	sp,*6
21768                                           !BCC_EOS
21769                                           ! 2405  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21770                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21771 56DB           8A46         F2            mov	al,-$E[bp]
21772                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21773 56DE           8846         FE            mov	-2[bp],al
21774                                           !BCC_EOS
21775                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21776 56E1           8B46         F2            mov	ax,-$E[bp]
21777 56E4           30C0                       xor	al,al
21778                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21779 56E6           88E0                       mov	al,ah
21780 56E8           30E4                       xor	ah,ah
21781                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21782 56EA           8846         FD            mov	-3[bp],al
21783                                           !BCC_EOS
21784                                           ! 2406  nbrows=read_byte(0x40,0x84)+1;
21785                                           ! Debug: list int = const $84 (used reg = )
21786 56ED           B8                   0084  mov	ax,#$84
21787 56F0           50                         push	ax
21788                                           ! Debug: list int = const $40 (used reg = )
21789 56F1           B8                   0040  mov	ax,*$40
21790 56F4           50                         push	ax
21791                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21792 56F5           E8         23AD            call	_read_byte
21793 56F8           83C4                   04  add	sp,*4
21794                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21795 56FB           30E4                       xor	ah,ah
21796                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21797 56FD           40                         inc	ax
21798 56FE           8946         F6            mov	-$A[bp],ax
21799                                           !BCC_EOS
21800                                           ! 2407  nbcols=read_word(0x40,0x4A);
21801                                           ! Debug: list int = const $4A (used reg = )
21802 5701           B8                   004A  mov	ax,*$4A
21803 5704           50                         push	ax
21804                                           ! Debug: list int = const $40 (used reg = )
21805 5705           B8                   0040  mov	ax,*$40
21806 5708           50                         push	ax
21807                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21808 5709           E8         23AC            call	_read_word
21809 570C           83C4                   04  add	sp,*4
21810                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21811 570F           8946         F8            mov	-8[bp],ax
21812                                           !BCC_EOS
21813                                           ! 2408  if(vga_modes[line].class==0x00)
21814                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21815 5712           8A46         FB            mov	al,-5[bp]
21816 5715           30E4                       xor	ah,ah
21817 5717           B1                     03  mov	cl,*3
21818 5719           D3E0                       shl	ax,cl
21819 571B           89C3                       mov	bx,ax
21820 571D           81C3                 01DC  add	bx,#_vga_modes
21821                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21822 5721           8A47         01            mov	al,1[bx]
21823 5724           84C0                       test	al,al
21824 5726           75           6E            jne 	.18C
21825                       00005728            .18D:
21826                                           ! 2409   {
21827                                           ! 2410    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21828                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21829 5728           8A46         FD            mov	al,-3[bp]
21830 572B           30E4                       xor	ah,ah
21831 572D           8B4E         F8            mov	cx,-8[bp]
21832 5730           F7E9                       imul	cx
21833                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21834                                           ! Debug: expression subtree swapping
21835 5732           0246         FE            add	al,-2[bp]
21836 5735           80D4                   00  adc	ah,*0
21837                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21838 5738           D1E0                       shl	ax,*1
21839 573A           50                         push	ax
21840                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21841 573B           8B46         F8            mov	ax,-8[bp]
21842 573E           8B4E         F6            mov	cx,-$A[bp]
21843 5741           F7E9                       imul	cx
21844                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21845 5743           D1E0                       shl	ax,*1
21846                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21847 5745           0C                     FF  or	al,#$FF
21848                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21849                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21850 5747           89C3                       mov	bx,ax
21851 5749           8A46         06            mov	al,6[bp]
21852 574C           30E4                       xor	ah,ah
21853 574E           93                         xchg	ax,bx
21854 574F           40                         inc	ax
21855 5750           89D9                       mov	cx,bx
21856 5752           F7E9                       imul	cx
21857                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21858 5754           0346         EE            add	ax,-$12[bp]
21859 5757           44                         inc	sp
21860 5758           44                         inc	sp
21861                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21862 5759           8946         F4            mov	-$C[bp],ax
21863                                           !BCC_EOS
21864                                           ! 2411    while(count-->0)
21865                                           ! 2412     {write_byte(vga_modes[line].sstart,address,car);
21866 575C           EB           29            jmp .18F
21867                       0000575E            .190:
21868                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
21869 575E           8A46         04            mov	al,4[bp]
21870 5761           30E4                       xor	ah,ah
21871 5763           50                         push	ax
21872                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
21873 5764           FF76         F4            push	-$C[bp]
21874                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
21875 5767           8A46         FB            mov	al,-5[bp]
21876 576A           30E4                       xor	ah,ah
21877 576C           B1                     03  mov	cl,*3
21878 576E           D3E0                       shl	ax,cl
21879 5770           89C3                       mov	bx,ax
21880 5772           81C3                 01DC  add	bx,#_vga_modes
21881                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21882 5776           FF77         04            push	4[bx]
21883                                           ! Debug: func () void = write_byte+0 (used reg = )
21884 5779           E8         234F            call	_write_byte
21885 577C           83C4                   06  add	sp,*6
21886                                           !BCC_EOS
21887                                           ! 2413      address+=2;
21888                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
21889 577F           8B46         F4            mov	ax,-$C[bp]
21890 5782           40                         inc	ax
21891 5783           40                         inc	ax
21892 5784           8946         F4            mov	-$C[bp],ax
21893                                           !BCC_EOS
21894                                           ! 2414     }
21895                                           ! 2415   }
21896                       00005787            .18F:
21897                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21898 5787           8B46         0A            mov	ax,$A[bp]
21899 578A           48                         dec	ax
21900 578B           8946         0A            mov	$A[bp],ax
21901                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21902 578E           3D                   FFFF  cmp	ax,*-1
21903 5791           75           CB            jne	.190
21904                       00005793            .191:
21905                       00005793            .18E:
21906                                           ! 2416  else
21907                                           ! 2417   {
21908 5793           E9         00F3            br 	.192
21909                       00005796            .18C:
21910                                           ! 2418    cheight=video_param_table[line_to_vpti[line]].cheight;
21911                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21912 5796           8A46         FB            mov	al,-5[bp]
21913 5799           30E4                       xor	ah,ah
21914 579B           89C3                       mov	bx,ax
21915                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21916 579D           8A87       025C            mov	al,_line_to_vpti[bx]
21917 57A1           30E4                       xor	ah,ah
21918 57A3           B1                     06  mov	cl,*6
21919 57A5           D3E0                       shl	ax,cl
21920 57A7           89C3                       mov	bx,ax
21921 57A9           81C3                 0270  add	bx,#_video_param_table
21922                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21923 57AD           8A47         02            mov	al,2[bx]
21924 57B0           8846         FF            mov	-1[bp],al
21925                                           !BCC_EOS
21926                                           ! 2419    bpp=vga_modes[line].pixbits;
21927                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21928 57B3           8A46         FB            mov	al,-5[bp]
21929 57B6           30E4                       xor	ah,ah
21930 57B8           B1                     03  mov	cl,*3
21931 57BA           D3E0                       shl	ax,cl
21932 57BC           89C3                       mov	bx,ax
21933 57BE           81C3                 01DC  add	bx,#_vga_modes
21934                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21935 57C2           8A47         03            mov	al,3[bx]
21936 57C5           8846         FA            mov	-6[bp],al
21937                                           !BCC_EOS
21938                                           ! 2420    while((count-->0) && (xcurs<nbcols))
21939                                           ! 2421     {
21940 57C8           E9         00A6            br 	.194
21941                       000057CB            .195:
21942                                           ! 2422      switch(vga_modes[line].memmodel)
21943                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21944 57CB           8A46         FB            mov	al,-5[bp]
21945 57CE           30E4                       xor	ah,ah
21946 57D0           B1                     03  mov	cl,*3
21947 57D2           D3E0                       shl	ax,cl
21948 57D4           89C3                       mov	bx,ax
21949 57D6           81C3                 01DC  add	bx,#_vga_modes
21950 57DA           8A47         02            mov	al,2[bx]
21951                                           ! 2423       {
21952 57DD           EB           77            jmp .198
21953                                           ! 2424        case 0x04:
21954                                           ! 2425        case 0x03:
21955                       000057DF            .199:
21956                                           ! 2426          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21957                       000057DF            .19A:
21958                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21959 57DF           8A46         FF            mov	al,-1[bp]
21960 57E2           30E4                       xor	ah,ah
21961 57E4           50                         push	ax
21962                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21963 57E5           FF76         F8            push	-8[bp]
21964                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21965 57E8           8A46         FD            mov	al,-3[bp]
21966 57EB           30E4                       xor	ah,ah
21967 57ED           50                         push	ax
21968                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21969 57EE           8A46         FE            mov	al,-2[bp]
21970 57F1           30E4                       xor	ah,ah
21971 57F3           50                         push	ax
21972                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21973 57F4           8A46         08            mov	al,8[bp]
21974 57F7           30E4                       xor	ah,ah
21975 57F9           50                         push	ax
21976                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21977 57FA           8A46         04            mov	al,4[bp]
21978 57FD           30E4                       xor	ah,ah
21979 57FF           50                         push	ax
21980                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21981 5800           E8         F856            call	_write_gfx_char_pl4
21982 5803           83C4                   0C  add	sp,*$C
21983                                           !BCC_EOS
21984                                           ! 2427          break;
21985 5806           EB           62            jmp .196
21986                                           !BCC_EOS
21987                                           ! 2428        case 0x02:
21988                                           ! 2429          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21989                       00005808            .19B:
21990                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21991 5808           8A46         FA            mov	al,-6[bp]
21992 580B           30E4                       xor	ah,ah
21993 580D           50                         push	ax
21994                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21995 580E           FF76         F8            push	-8[bp]
21996                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21997 5811           8A46         FD            mov	al,-3[bp]
21998 5814           30E4                       xor	ah,ah
21999 5816           50                         push	ax
22000                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22001 5817           8A46         FE            mov	al,-2[bp]
22002 581A           30E4                       xor	ah,ah
22003 581C           50                         push	ax
22004                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22005 581D           8A46         08            mov	al,8[bp]
22006 5820           30E4                       xor	ah,ah
22007 5822           50                         push	ax
22008                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22009 5823           8A46         04            mov	al,4[bp]
22010 5826           30E4                       xor	ah,ah
22011 5828           50                         push	ax
22012                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22013 5829           E8         F9A0            call	_write_gfx_char_cga
22014 582C           83C4                   0C  add	sp,*$C
22015                                           !BCC_EOS
22016                                           ! 2430          break;
22017 582F           EB           39            jmp .196
22018                                           !BCC_EOS
22019                                           ! 2431        case 0x05:
22020                                           ! 2432          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22021                       00005831            .19C:
22022                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22023 5831           FF76         F8            push	-8[bp]
22024                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22025 5834           8A46         FD            mov	al,-3[bp]
22026 5837           30E4                       xor	ah,ah
22027 5839           50                         push	ax
22028                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22029 583A           8A46         FE            mov	al,-2[bp]
22030 583D           30E4                       xor	ah,ah
22031 583F           50                         push	ax
22032                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22033 5840           8A46         08            mov	al,8[bp]
22034 5843           30E4                       xor	ah,ah
22035 5845           50                         push	ax
22036                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22037 5846           8A46         04            mov	al,4[bp]
22038 5849           30E4                       xor	ah,ah
22039 584B           50                         push	ax
22040                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22041 584C           E8         FB80            call	_write_gfx_char_lin
22042 584F           83C4                   0A  add	sp,*$A
22043                                           !BCC_EOS
22044                                           ! 2433          break;
22045 5852           EB           16            jmp .196
22046                                           !BCC_EOS
22047                                           ! 2434       }
22048                                           ! 2435      xcurs++;
22049 5854           EB           14            jmp .196
22050                       00005856            .198:
22051 5856           2C                     02  sub	al,*2
22052 5858           74           AE            je 	.19B
22053 585A           2C                     01  sub	al,*1
22054 585C         0F84         FF7F            beq 	.19A
22055 5860           2C                     01  sub	al,*1
22056 5862         0F84         FF79            beq 	.199
22057 5866           2C                     01  sub	al,*1
22058 5868           74           C7            je 	.19C
22059                       0000586A            .196:
22060                       FFFFFFEE            ..FFF9	=	-$12
22061                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22062 586A           8A46         FE            mov	al,-2[bp]
22063 586D           40                         inc	ax
22064 586E           8846         FE            mov	-2[bp],al
22065                                           !BCC_EOS
22066                                           ! 2436     }
22067                                           ! 2437   }
22068                       00005871            .194:
22069                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22070 5871           8B46         0A            mov	ax,$A[bp]
22071 5874           48                         dec	ax
22072 5875           8946         0A            mov	$A[bp],ax
22073                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22074 5878           3D                   FFFF  cmp	ax,*-1
22075 587B           74           0C            je  	.19D
22076                       0000587D            .19E:
22077                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22078 587D           8A46         FE            mov	al,-2[bp]
22079 5880           30E4                       xor	ah,ah
22080 5882           3B46         F8            cmp	ax,-8[bp]
22081 5885         0F82         FF42            blo 	.195
22082                       00005889            .19D:
22083                       00005889            .193:
22084                                           ! 2438 }
22085                       00005889            .192:
22086 5889           89EC                       mov	sp,bp
22087 588B           5D                         pop	bp
22088 588C           C3                         ret
22089                                           ! 2439 #asm
22090                                           !BCC_ASM
22091                       00000008            _biosfn_write_char_only.count	set	8
22092                       00000006            _biosfn_write_char_only.attr	set	6
22093                       00000004            _biosfn_write_char_only.page	set	4
22094                       00000002            _biosfn_write_char_only.car	set	2
22095                       0000588D            biosfn_group_0B:
22096 588D           80FF                   00    cmp bh, #0x00
22097 5890           74           06              je biosfn_set_border_color
22098 5892           80FF                   01    cmp bh, #0x01
22099 5895           74           40              je biosfn_set_palette
22100 5897           C3                           ret
22101                       00005898            biosfn_set_border_color:
22102 5898           50                           push ax
22103 5899           53                           push bx
22104 589A           51                           push cx
22105 589B           52                           push dx
22106 589C           BA                   03DA    mov dx, # 0x3da
22107 589F           EC                           in al, dx
22108 58A0           BA                   03C0    mov dx, # 0x3c0
22109 58A3           B0                     00    mov al, #0x00
22110 58A5           EE                           out dx, al
22111 58A6           88D8                         mov al, bl
22112 58A8           24                     0F    and al, #0x0f
22113 58AA           A8                     08    test al, #0x08
22114 58AC           74           02              jz set_low_border
22115 58AE           04                     08    add al, #0x08
22116                       000058B0            set_low_border:
22117 58B0           EE                           out dx, al
22118 58B1           B1                     01    mov cl, #0x01
22119 58B3           80E3                   10    and bl, #0x10
22120                       000058B6            set_intensity_loop:
22121 58B6           BA                   03C0    mov dx, # 0x3c0
22122 58B9           88C8                         mov al, cl
22123 58BB           EE                           out dx, al
22124 58BC           BA                   03C1    mov dx, # 0x3c1
22125 58BF           EC                           in al, dx
22126 58C0           24                     EF    and al, #0xef
22127 58C2           08D8                         or al, bl
22128 58C4           BA                   03C0    mov dx, # 0x3c0
22129 58C7           EE                           out dx, al
22130 58C8           FEC1                         inc cl
22131 58CA           80F9                   04    cmp cl, #0x04
22132 58CD           75           E7              jne set_intensity_loop
22133 58CF           B0                     20    mov al, #0x20
22134 58D1           EE                           out dx, al
22135 58D2           5A                           pop dx
22136 58D3           59                           pop cx
22137 58D4           5B                           pop bx
22138 58D5           58                           pop ax
22139 58D6           C3                           ret
22140                       000058D7            biosfn_set_palette:
22141 58D7           50                           push ax
22142 58D8           53                           push bx
22143 58D9           51                           push cx
22144 58DA           52                           push dx
22145 58DB           BA                   03DA    mov dx, # 0x3da
22146 58DE           EC                           in al, dx
22147 58DF           B1                     01    mov cl, #0x01
22148 58E1           80E3                   01    and bl, #0x01
22149                       000058E4            set_cga_palette_loop:
22150 58E4           BA                   03C0    mov dx, # 0x3c0
22151 58E7           88C8                         mov al, cl
22152 58E9           EE                           out dx, al
22153 58EA           BA                   03C1    mov dx, # 0x3c1
22154 58ED           EC                           in al, dx
22155 58EE           24                     FE    and al, #0xfe
22156 58F0           08D8                         or al, bl
22157 58F2           BA                   03C0    mov dx, # 0x3c0
22158 58F5           EE                           out dx, al
22159 58F6           FEC1                         inc cl
22160 58F8           80F9                   04    cmp cl, #0x04
22161 58FB           75           E7              jne set_cga_palette_loop
22162 58FD           B0                     20    mov al, #0x20
22163 58FF           EE                           out dx, al
22164 5900           5A                           pop dx
22165 5901           59                           pop cx
22166 5902           5B                           pop bx
22167 5903           58                           pop ax
22168 5904           C3                           ret
22169                                           ! 2514 endasm
22170                                           !BCC_ENDASM
22171                                           ! 2515 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22172                                           ! Register BX used in function biosfn_write_char_only
22173                       00005905            _biosfn_write_pixel:
22174                                           !BCC_EOS
22175                                           !BCC_EOS
22176                                           !BCC_EOS
22177                                           !BCC_EOS
22178                                           ! 2516 {
22179                                           ! 2517  Bit8u mode,line,mask,attr,data;
22180                                           !BCC_EOS
22181                                           ! 2518  Bit16u addr;
22182                                           !BCC_EOS
22183                                           ! 2519  mode=read_byte(0x40,0x49);
22184 5905           55                         push	bp
22185 5906           89E5                       mov	bp,sp
22186 5908           83C4                   F8  add	sp,*-8
22187                                           ! Debug: list int = const $49 (used reg = )
22188 590B           B8                   0049  mov	ax,*$49
22189 590E           50                         push	ax
22190                                           ! Debug: list int = const $40 (used reg = )
22191 590F           B8                   0040  mov	ax,*$40
22192 5912           50                         push	ax
22193                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22194 5913           E8         218F            call	_read_byte
22195 5916           83C4                   04  add	sp,*4
22196                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22197 5919           8846         FF            mov	-1[bp],al
22198                                           !BCC_EOS
22199                                           ! 2520  line=find_vga_entry(mode);
22200                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22201 591C           8A46         FF            mov	al,-1[bp]
22202 591F           30E4                       xor	ah,ah
22203 5921           50                         push	ax
22204                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22205 5922           E8         2094            call	_find_vga_entry
22206 5925           44                         inc	sp
22207 5926           44                         inc	sp
22208                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22209 5927           8846         FE            mov	-2[bp],al
22210                                           !BCC_EOS
22211                                           ! 2521  if(line==0xFF)return;
22212                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22213 592A           8A46         FE            mov	al,-2[bp]
22214 592D           3C                     FF  cmp	al,#$FF
22215 592F           75           04            jne 	.19F
22216                       00005931            .1A0:
22217 5931           89EC                       mov	sp,bp
22218 5933           5D                         pop	bp
22219 5934           C3                         ret
22220                                           !BCC_EOS
22221                                           ! 2522  if(vga_modes[line].class==0x00)return;
22222                       00005935            .19F:
22223                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22224 5935           8A46         FE            mov	al,-2[bp]
22225 5938           30E4                       xor	ah,ah
22226 593A           B1                     03  mov	cl,*3
22227 593C           D3E0                       shl	ax,cl
22228 593E           89C3                       mov	bx,ax
22229 5940           81C3                 01DC  add	bx,#_vga_modes
22230                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22231 5944           8A47         01            mov	al,1[bx]
22232 5947           84C0                       test	al,al
22233 5949           75           04            jne 	.1A1
22234                       0000594B            .1A2:
22235 594B           89EC                       mov	sp,bp
22236 594D           5D                         pop	bp
22237 594E           C3                         ret
22238                                           !BCC_EOS
22239                                           ! 2523  switch(vga_modes[line].memmodel)
22240                       0000594F            .1A1:
22241                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22242 594F           8A46         FE            mov	al,-2[bp]
22243 5952           30E4                       xor	ah,ah
22244 5954           B1                     03  mov	cl,*3
22245 5956           D3E0                       shl	ax,cl
22246 5958           89C3                       mov	bx,ax
22247 595A           81C3                 01DC  add	bx,#_vga_modes
22248 595E           8A47         02            mov	al,2[bx]
22249                                           ! 2524   {
22250 5961           E9         0223            br 	.1A5
22251                                           ! 2525    case 0x04:
22252                                           ! 2526    case 0x03:
22253                       00005964            .1A6:
22254                                           ! 2527      addr = CX/8+DX*read_word(0x40,0x4A);
22255                       00005964            .1A7:
22256                                           ! Debug: list int = const $4A (used reg = )
22257 5964           B8                   004A  mov	ax,*$4A
22258 5967           50                         push	ax
22259                                           ! Debug: list int = const $40 (used reg = )
22260 5968           B8                   0040  mov	ax,*$40
22261 596B           50                         push	ax
22262                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22263 596C           E8         2149            call	_read_word
22264 596F           83C4                   04  add	sp,*4
22265                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22266                                           ! Debug: expression subtree swapping
22267 5972           8B4E         0A            mov	cx,$A[bp]
22268 5975           F7E9                       imul	cx
22269 5977           50                         push	ax
22270                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22271 5978           8B46         08            mov	ax,8[bp]
22272 597B           B1                     03  mov	cl,*3
22273 597D           D3E8                       shr	ax,cl
22274                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22275 597F           0346         F6            add	ax,0+..FFF8[bp]
22276 5982           44                         inc	sp
22277 5983           44                         inc	sp
22278                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22279 5984           8946         F8            mov	-8[bp],ax
22280                                           !BCC_EOS
22281                                           ! 2528      mask = 0x80 >> (CX & 0x07);
22282                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22283 5987           8A46         08            mov	al,8[bp]
22284 598A           24                     07  and	al,*7
22285                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22286 598C           30E4                       xor	ah,ah
22287 598E           89C3                       mov	bx,ax
22288 5990           B8                   0080  mov	ax,#$80
22289 5993           89D9                       mov	cx,bx
22290 5995           D3F8                       sar	ax,cl
22291                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22292 5997           8846         FD            mov	-3[bp],al
22293                                           !BCC_EOS
22294                                           ! 2529      outw(0x3ce, (mask << 8) | 0x08);
22295                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22296 599A           8A46         FD            mov	al,-3[bp]
22297 599D           30E4                       xor	ah,ah
22298 599F           88C4                       mov	ah,al
22299 59A1           30C0                       xor	al,al
22300                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22301 59A3           0C                     08  or	al,*8
22302                                           ! Debug: list unsigned int = ax+0 (used reg = )
22303 59A5           50                         push	ax
22304                                           ! Debug: list int = const $3CE (used reg = )
22305 59A6           B8                   03CE  mov	ax,#$3CE
22306 59A9           50                         push	ax
22307                                           ! Debug: func () void = outw+0 (used reg = )
22308 59AA           E8         2174            call	_outw
22309 59AD           83C4                   04  add	sp,*4
22310                                           !BCC_EOS
22311                                           ! 2530      outw(0x3ce, 0x0205);
22312                                           ! Debug: list int = const $205 (used reg = )
22313 59B0           B8                   0205  mov	ax,#$205
22314 59B3           50                         push	ax
22315                                           ! Debug: list int = const $3CE (used reg = )
22316 59B4           B8                   03CE  mov	ax,#$3CE
22317 59B7           50                         push	ax
22318                                           ! Debug: func () void = outw+0 (used reg = )
22319 59B8           E8         2166            call	_outw
22320 59BB           83C4                   04  add	sp,*4
22321                                           !BCC_EOS
22322                                           ! 2531      data = read_byte(0xa000,addr);
22323                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22324 59BE           FF76         F8            push	-8[bp]
22325                                           ! Debug: list unsigned int = const $A000 (used reg = )
22326 59C1           B8                   A000  mov	ax,#$A000
22327 59C4           50                         push	ax
22328                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22329 59C5           E8         20DD            call	_read_byte
22330 59C8           83C4                   04  add	sp,*4
22331                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22332 59CB           8846         FB            mov	-5[bp],al
22333                                           !BCC_EOS
22334                                           ! 2532      if (AL & 0x80)
22335                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22336 59CE           8A46         06            mov	al,6[bp]
22337 59D1           24                     80  and	al,#$80
22338 59D3           84C0                       test	al,al
22339 59D5           74           0E            je  	.1A8
22340                       000059D7            .1A9:
22341                                           ! 2533       {
22342                                           ! 2534        outw(0x3ce, 0x1803);
22343                                           ! Debug: list int = const $1803 (used reg = )
22344 59D7           B8                   1803  mov	ax,#$1803
22345 59DA           50                         push	ax
22346                                           ! Debug: list int = const $3CE (used reg = )
22347 59DB           B8                   03CE  mov	ax,#$3CE
22348 59DE           50                         push	ax
22349                                           ! Debug: func () void = outw+0 (used reg = )
22350 59DF           E8         213F            call	_outw
22351 59E2           83C4                   04  add	sp,*4
22352                                           !BCC_EOS
22353                                           ! 2535       }
22354                                           ! 2536      write_byte(0xa000,addr,AL);
22355                       000059E5            .1A8:
22356                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22357 59E5           8A46         06            mov	al,6[bp]
22358 59E8           30E4                       xor	ah,ah
22359 59EA           50                         push	ax
22360                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22361 59EB           FF76         F8            push	-8[bp]
22362                                           ! Debug: list unsigned int = const $A000 (used reg = )
22363 59EE           B8                   A000  mov	ax,#$A000
22364 59F1           50                         push	ax
22365                                           ! Debug: func () void = write_byte+0 (used reg = )
22366 59F2           E8         20D6            call	_write_byte
22367 59F5           83C4                   06  add	sp,*6
22368                                           !BCC_EOS
22369                                           ! 2537 #asm
22370                                           !BCC_EOS
22371                                           !BCC_ASM
22372                       0000000C            _biosfn_write_pixel.BH	set	$C
22373                       00000004            .biosfn_write_pixel.BH	set	4
22374                       00000010            _biosfn_write_pixel.CX	set	$10
22375                       00000008            .biosfn_write_pixel.CX	set	8
22376                       00000006            _biosfn_write_pixel.line	set	6
22377                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22378                       0000000E            _biosfn_write_pixel.AL	set	$E
22379                       00000006            .biosfn_write_pixel.AL	set	6
22380                       00000003            _biosfn_write_pixel.data	set	3
22381                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22382                       00000012            _biosfn_write_pixel.DX	set	$12
22383                       0000000A            .biosfn_write_pixel.DX	set	$A
22384                       00000005            _biosfn_write_pixel.mask	set	5
22385                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22386                       00000004            _biosfn_write_pixel.attr	set	4
22387                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22388                       00000007            _biosfn_write_pixel.mode	set	7
22389                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22390                       00000000            _biosfn_write_pixel.addr	set	0
22391                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22392 59F8           BA                   03CE       mov dx, # 0x3ce
22393 59FB           B8                   FF08       mov ax, #0xff08
22394 59FE           EF                              out dx, ax
22395 59FF           B8                   0005       mov ax, #0x0005
22396 5A02           EF                              out dx, ax
22397 5A03           B8                   0003       mov ax, #0x0003
22398 5A06           EF                              out dx, ax
22399                                           ! 2545 endasm
22400                                           !BCC_ENDASM
22401                                           !BCC_EOS
22402                                           ! 2546      break;
22403 5A07           E9         0193            br 	.1A3
22404                                           !BCC_EOS
22405                                           ! 2547    case 0x02:
22406                                           ! 2548      if(vga_modes[line].pixbits==2)
22407                       00005A0A            .1AA:
22408                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22409 5A0A           8A46         FE            mov	al,-2[bp]
22410 5A0D           30E4                       xor	ah,ah
22411 5A0F           B1                     03  mov	cl,*3
22412 5A11           D3E0                       shl	ax,cl
22413 5A13           89C3                       mov	bx,ax
22414 5A15           81C3                 01DC  add	bx,#_vga_modes
22415                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22416 5A19           8A47         03            mov	al,3[bx]
22417 5A1C           3C                     02  cmp	al,*2
22418 5A1E           75           1C            jne 	.1AB
22419                       00005A20            .1AC:
22420                                           ! 2549       {
22421                                           ! 2550        addr=(CX>>2)+(DX>>1)*80;
22422                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22423 5A20           8B46         0A            mov	ax,$A[bp]
22424 5A23           D1E8                       shr	ax,*1
22425                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22426 5A25           B9                   0050  mov	cx,*$50
22427 5A28           F7E9                       imul	cx
22428 5A2A           50                         push	ax
22429                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22430 5A2B           8B46         08            mov	ax,8[bp]
22431 5A2E           D1E8                       shr	ax,*1
22432 5A30           D1E8                       shr	ax,*1
22433                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22434 5A32           0346         F6            add	ax,0+..FFF8[bp]
22435 5A35           44                         inc	sp
22436 5A36           44                         inc	sp
22437                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22438 5A37           8946         F8            mov	-8[bp],ax
22439                                           !BCC_EOS
22440                                           ! 2551       }
22441                                           ! 2552      else
22442                                           ! 2553       {
22443 5A3A           EB           1A            jmp .1AD
22444                       00005A3C            .1AB:
22445                                           ! 2554        addr=(CX>>3)+(DX>>1)*80;
22446                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22447 5A3C           8B46         0A            mov	ax,$A[bp]
22448 5A3F           D1E8                       shr	ax,*1
22449                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22450 5A41           B9                   0050  mov	cx,*$50
22451 5A44           F7E9                       imul	cx
22452 5A46           50                         push	ax
22453                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22454 5A47           8B46         08            mov	ax,8[bp]
22455 5A4A           B1                     03  mov	cl,*3
22456 5A4C           D3E8                       shr	ax,cl
22457                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22458 5A4E           0346         F6            add	ax,0+..FFF8[bp]
22459 5A51           44                         inc	sp
22460 5A52           44                         inc	sp
22461                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22462 5A53           8946         F8            mov	-8[bp],ax
22463                                           !BCC_EOS
22464                                           ! 2555       }
22465                                           ! 2556      if (DX & 1) addr += 0x2000;
22466                       00005A56            .1AD:
22467                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22468 5A56           8A46         0A            mov	al,$A[bp]
22469 5A59           24                     01  and	al,*1
22470 5A5B           84C0                       test	al,al
22471 5A5D           74           09            je  	.1AE
22472                       00005A5F            .1AF:
22473                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22474 5A5F           8B46         F8            mov	ax,-8[bp]
22475 5A62           05                   2000  add	ax,#$2000
22476 5A65           8946         F8            mov	-8[bp],ax
22477                                           !BCC_EOS
22478                                           ! 2557      data = read_byte(0xb800,addr);
22479                       00005A68            .1AE:
22480                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22481 5A68           FF76         F8            push	-8[bp]
22482                                           ! Debug: list unsigned int = const $B800 (used reg = )
22483 5A6B           B8                   B800  mov	ax,#$B800
22484 5A6E           50                         push	ax
22485                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22486 5A6F           E8         2033            call	_read_byte
22487 5A72           83C4                   04  add	sp,*4
22488                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22489 5A75           8846         FB            mov	-5[bp],al
22490                                           !BCC_EOS
22491                                           ! 2558      if(vga_modes[line].pixbits==2)
22492                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22493 5A78           8A46         FE            mov	al,-2[bp]
22494 5A7B           30E4                       xor	ah,ah
22495 5A7D           B1                     03  mov	cl,*3
22496 5A7F           D3E0                       shl	ax,cl
22497 5A81           89C3                       mov	bx,ax
22498 5A83           81C3                 01DC  add	bx,#_vga_modes
22499                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22500 5A87           8A47         03            mov	al,3[bx]
22501 5A8A           3C                     02  cmp	al,*2
22502 5A8C           75           46            jne 	.1B0
22503                       00005A8E            .1B1:
22504                                           ! 2559       {
22505                                           ! 2560        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22506                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22507 5A8E           8A46         08            mov	al,8[bp]
22508 5A91           24                     03  and	al,*3
22509                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22510 5A93           50                         push	ax
22511 5A94           B8                   0003  mov	ax,*3
22512 5A97           2A46         F6            sub	al,0+..FFF8[bp]
22513 5A9A           80DC                   00  sbb	ah,*0
22514 5A9D           44                         inc	sp
22515 5A9E           44                         inc	sp
22516                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22517 5A9F           D1E0                       shl	ax,*1
22518 5AA1           50                         push	ax
22519                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22520 5AA2           8A46         06            mov	al,6[bp]
22521 5AA5           24                     03  and	al,*3
22522                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22523 5AA7           30E4                       xor	ah,ah
22524 5AA9           8B4E         F6            mov	cx,0+..FFF8[bp]
22525 5AAC           D3E0                       shl	ax,cl
22526 5AAE           44                         inc	sp
22527 5AAF           44                         inc	sp
22528                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22529 5AB0           8846         FC            mov	-4[bp],al
22530                                           !BCC_EOS
22531                                           ! 2561        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22532                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22533 5AB3           8A46         08            mov	al,8[bp]
22534 5AB6           24                     03  and	al,*3
22535                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22536 5AB8           50                         push	ax
22537 5AB9           B8                   0003  mov	ax,*3
22538 5ABC           2A46         F6            sub	al,0+..FFF8[bp]
22539 5ABF           80DC                   00  sbb	ah,*0
22540 5AC2           44                         inc	sp
22541 5AC3           44                         inc	sp
22542                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22543 5AC4           D1E0                       shl	ax,*1
22544                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22545 5AC6           89C3                       mov	bx,ax
22546 5AC8           B8                   0003  mov	ax,*3
22547 5ACB           89D9                       mov	cx,bx
22548 5ACD           D3E0                       shl	ax,cl
22549                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22550 5ACF           8846         FD            mov	-3[bp],al
22551                                           !BCC_EOS
22552                                           ! 2562       }
22553                                           ! 2563      else
22554                                           ! 2564       {
22555 5AD2           EB           40            jmp .1B2
22556                       00005AD4            .1B0:
22557                                           ! 2565        attr = (AL & 0x01) << (7 - (CX & 0x07));
22558                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22559 5AD4           8A46         08            mov	al,8[bp]
22560 5AD7           24                     07  and	al,*7
22561                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22562 5AD9           50                         push	ax
22563 5ADA           B8                   0007  mov	ax,*7
22564 5ADD           2A46         F6            sub	al,0+..FFF8[bp]
22565 5AE0           80DC                   00  sbb	ah,*0
22566 5AE3           44                         inc	sp
22567 5AE4           44                         inc	sp
22568 5AE5           50                         push	ax
22569                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
22570 5AE6           8A46         06            mov	al,6[bp]
22571 5AE9           24                     01  and	al,*1
22572                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22573 5AEB           30E4                       xor	ah,ah
22574 5AED           8B4E         F6            mov	cx,0+..FFF8[bp]
22575 5AF0           D3E0                       shl	ax,cl
22576 5AF2           44                         inc	sp
22577 5AF3           44                         inc	sp
22578                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22579 5AF4           8846         FC            mov	-4[bp],al
22580                                           !BCC_EOS
22581                                           ! 2566        mask = 0x01 << (7 - (CX & 0x07));
22582                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22583 5AF7           8A46         08            mov	al,8[bp]
22584 5AFA           24                     07  and	al,*7
22585                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22586 5AFC           50                         push	ax
22587 5AFD           B8                   0007  mov	ax,*7
22588 5B00           2A46         F6            sub	al,0+..FFF8[bp]
22589 5B03           80DC                   00  sbb	ah,*0
22590 5B06           44                         inc	sp
22591 5B07           44                         inc	sp
22592                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
22593 5B08           89C3                       mov	bx,ax
22594 5B0A           B8                   0001  mov	ax,*1
22595 5B0D           89D9                       mov	cx,bx
22596 5B0F           D3E0                       shl	ax,cl
22597                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22598 5B11           8846         FD            mov	-3[bp],al
22599                                           !BCC_EOS
22600                                           ! 2567       }
22601                                           ! 2568      if (AL & 0x80)
22602                       00005B14            .1B2:
22603                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22604 5B14           8A46         06            mov	al,6[bp]
22605 5B17           24                     80  and	al,#$80
22606 5B19           84C0                       test	al,al
22607 5B1B           74           0B            je  	.1B3
22608                       00005B1D            .1B4:
22609                                           ! 2569       {
22610                                           ! 2570        data ^= attr;
22611                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22612 5B1D           8A46         FB            mov	al,-5[bp]
22613 5B20           3246         FC            xor	al,-4[bp]
22614 5B23           8846         FB            mov	-5[bp],al
22615                                           !BCC_EOS
22616                                           ! 2571       }
22617                                           ! 2572      else
22618                                           ! 2573       {
22619 5B26           EB           16            jmp .1B5
22620                       00005B28            .1B3:
22621                                           ! 2574        data &= ~mask;
22622                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
22623 5B28           8A46         FD            mov	al,-3[bp]
22624 5B2B           30E4                       xor	ah,ah
22625 5B2D           F7D0                       not	ax
22626                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
22627 5B2F           2246         FB            and	al,-5[bp]
22628 5B32           8846         FB            mov	-5[bp],al
22629                                           !BCC_EOS
22630                                           ! 2575        data |= attr;
22631                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22632 5B35           8A46         FB            mov	al,-5[bp]
22633 5B38           0A46         FC            or	al,-4[bp]
22634 5B3B           8846         FB            mov	-5[bp],al
22635                                           !BCC_EOS
22636                                           ! 2576       }
22637                                           ! 2577      write_byte(0xb800,addr,data);
22638                       00005B3E            .1B5:
22639                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
22640 5B3E           8A46         FB            mov	al,-5[bp]
22641 5B41           30E4                       xor	ah,ah
22642 5B43           50                         push	ax
22643                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22644 5B44           FF76         F8            push	-8[bp]
22645                                           ! Debug: list unsigned int = const $B800 (used reg = )
22646 5B47           B8                   B800  mov	ax,#$B800
22647 5B4A           50                         push	ax
22648                                           ! Debug: func () void = write_byte+0 (used reg = )
22649 5B4B           E8         1F7D            call	_write_byte
22650 5B4E           83C4                   06  add	sp,*6
22651                                           !BCC_EOS
22652                                           ! 2578      break;
22653 5B51           EB           4A            jmp .1A3
22654                                           !BCC_EOS
22655                                           ! 2579    case 0x05:
22656                                           ! 2580      addr=CX+DX*(read_word(0x40,0x4A)*8);
22657                       00005B53            .1B6:
22658                                           ! Debug: list int = const $4A (used reg = )
22659 5B53           B8                   004A  mov	ax,*$4A
22660 5B56           50                         push	ax
22661                                           ! Debug: list int = const $40 (used reg = )
22662 5B57           B8                   0040  mov	ax,*$40
22663 5B5A           50                         push	ax
22664                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22665 5B5B           E8         1F5A            call	_read_word
22666 5B5E           83C4                   04  add	sp,*4
22667                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
22668 5B61           B1                     03  mov	cl,*3
22669 5B63           D3E0                       shl	ax,cl
22670                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22671                                           ! Debug: expression subtree swapping
22672 5B65           8B4E         0A            mov	cx,$A[bp]
22673 5B68           F7E9                       imul	cx
22674                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
22675                                           ! Debug: expression subtree swapping
22676 5B6A           0346         08            add	ax,8[bp]
22677                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22678 5B6D           8946         F8            mov	-8[bp],ax
22679                                           !BCC_EOS
22680                                           ! 2581      write_byte(0xa000,addr,AL);
22681                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22682 5B70           8A46         06            mov	al,6[bp]
22683 5B73           30E4                       xor	ah,ah
22684 5B75           50                         push	ax
22685                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22686 5B76           FF76         F8            push	-8[bp]
22687                                           ! Debug: list unsigned int = const $A000 (used reg = )
22688 5B79           B8                   A000  mov	ax,#$A000
22689 5B7C           50                         push	ax
22690                                           ! Debug: func () void = write_byte+0 (used reg = )
22691 5B7D           E8         1F4B            call	_write_byte
22692 5B80           83C4                   06  add	sp,*6
22693                                           !BCC_EOS
22694                                           ! 2582      break;
22695 5B83           EB           18            jmp .1A3
22696                                           !BCC_EOS
22697                                           ! 2583   }
22698                                           ! 2584 }
22699 5B85           EB           16            jmp .1A3
22700                       00005B87            .1A5:
22701 5B87           2C                     02  sub	al,*2
22702 5B89         0F84         FE7D            beq 	.1AA
22703 5B8D           2C                     01  sub	al,*1
22704 5B8F         0F84         FDD1            beq 	.1A7
22705 5B93           2C                     01  sub	al,*1
22706 5B95         0F84         FDCB            beq 	.1A6
22707 5B99           2C                     01  sub	al,*1
22708 5B9B           74           B6            je 	.1B6
22709                       00005B9D            .1A3:
22710                       FFFFFFF6            ..FFF8	=	-$A
22711 5B9D           89EC                       mov	sp,bp
22712 5B9F           5D                         pop	bp
22713 5BA0           C3                         ret
22714                                           ! 2585 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *A
22715                                           ! Register BX used in function biosfn_write_pixel
22716                       00005BA1            _biosfn_read_pixel:
22717                                           !BCC_EOS
22718                                           !BCC_EOS
22719                                           !BCC_EOS
22720                                           ! 2585 X;
22721                                           !BCC_EOS
22722                                           ! 2586 {
22723                                           ! 2587  Bit8u mode,line,mask,attr,data,i;
22724                                           !BCC_EOS
22725                                           ! 2588  Bit16u addr;
22726                                           !BCC_EOS
22727                                           ! 2589  Bit16u ss=get_SS();
22728 5BA1           55                         push	bp
22729 5BA2           89E5                       mov	bp,sp
22730 5BA4           83C4                   F6  add	sp,*-$A
22731                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
22732 5BA7           E8         1F87            call	_get_SS
22733                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
22734 5BAA           8946         F6            mov	-$A[bp],ax
22735                                           !BCC_EOS
22736                                           ! 2590  mode=read_byte(0x40,0x49);
22737                                           ! Debug: list int = const $49 (used reg = )
22738 5BAD           B8                   0049  mov	ax,*$49
22739 5BB0           50                         push	ax
22740                                           ! Debug: list int = const $40 (used reg = )
22741 5BB1           B8                   0040  mov	ax,*$40
22742 5BB4           50                         push	ax
22743                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22744 5BB5           E8         1EED            call	_read_byte
22745 5BB8           83C4                   04  add	sp,*4
22746                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
22747 5BBB           8846         FF            mov	-1[bp],al
22748                                           !BCC_EOS
22749                                           ! 2591  line=find_vga_entry(mode);
22750                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
22751 5BBE           8A46         FF            mov	al,-1[bp]
22752 5BC1           30E4                       xor	ah,ah
22753 5BC3           50                         push	ax
22754                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22755 5BC4           E8         1DF2            call	_find_vga_entry
22756 5BC7           44                         inc	sp
22757 5BC8           44                         inc	sp
22758                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
22759 5BC9           8846         FE            mov	-2[bp],al
22760                                           !BCC_EOS
22761                                           ! 2592  if(line==0xFF)return;
22762                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
22763 5BCC           8A46         FE            mov	al,-2[bp]
22764 5BCF           3C                     FF  cmp	al,#$FF
22765 5BD1           75           04            jne 	.1B7
22766                       00005BD3            .1B8:
22767 5BD3           89EC                       mov	sp,bp
22768 5BD5           5D                         pop	bp
22769 5BD6           C3                         ret
22770                                           !BCC_EOS
22771                                           ! 2593  if(vga_modes[line].class==0x00)return;
22772                       00005BD7            .1B7:
22773                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22774 5BD7           8A46         FE            mov	al,-2[bp]
22775 5BDA           30E4                       xor	ah,ah
22776 5BDC           B1                     03  mov	cl,*3
22777 5BDE           D3E0                       shl	ax,cl
22778 5BE0           89C3                       mov	bx,ax
22779 5BE2           81C3                 01DC  add	bx,#_vga_modes
22780                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22781 5BE6           8A47         01            mov	al,1[bx]
22782 5BE9           84C0                       test	al,al
22783 5BEB           75           04            jne 	.1B9
22784                       00005BED            .1BA:
22785 5BED           89EC                       mov	sp,bp
22786 5BEF           5D                         pop	bp
22787 5BF0           C3                         ret
22788                                           !BCC_EOS
22789                                           ! 2594  switch(vga_modes[line].memmodel)
22790                       00005BF1            .1B9:
22791                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22792 5BF1           8A46         FE            mov	al,-2[bp]
22793 5BF4           30E4                       xor	ah,ah
22794 5BF6           B1                     03  mov	cl,*3
22795 5BF8           D3E0                       shl	ax,cl
22796 5BFA           89C3                       mov	bx,ax
22797 5BFC           81C3                 01DC  add	bx,#_vga_modes
22798 5C00           8A47         02            mov	al,2[bx]
22799                                           ! 2595   {
22800 5C03           E9         0167            br 	.1BD
22801                                           ! 2596    case 0x04:
22802                                           ! 2597    case 0x03:
22803                       00005C06            .1BE:
22804                                           ! 2598      addr = CX/8+DX*read_word(0x40,0x4A);
22805                       00005C06            .1BF:
22806                                           ! Debug: list int = const $4A (used reg = )
22807 5C06           B8                   004A  mov	ax,*$4A
22808 5C09           50                         push	ax
22809                                           ! Debug: list int = const $40 (used reg = )
22810 5C0A           B8                   0040  mov	ax,*$40
22811 5C0D           50                         push	ax
22812                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22813 5C0E           E8         1EA7            call	_read_word
22814 5C11           83C4                   04  add	sp,*4
22815                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
22816                                           ! Debug: expression subtree swapping
22817 5C14           8B4E         08            mov	cx,8[bp]
22818 5C17           F7E9                       imul	cx
22819 5C19           50                         push	ax
22820                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
22821 5C1A           8B46         06            mov	ax,6[bp]
22822 5C1D           B1                     03  mov	cl,*3
22823 5C1F           D3E8                       shr	ax,cl
22824                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22825 5C21           0346         F4            add	ax,0+..FFF7[bp]
22826 5C24           44                         inc	sp
22827 5C25           44                         inc	sp
22828                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22829 5C26           8946         F8            mov	-8[bp],ax
22830                                           !BCC_EOS
22831                                           ! 2599      mask = 0x80 >> (CX & 0x07);
22832                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
22833 5C29           8A46         06            mov	al,6[bp]
22834 5C2C           24                     07  and	al,*7
22835                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22836 5C2E           30E4                       xor	ah,ah
22837 5C30           89C3                       mov	bx,ax
22838 5C32           B8                   0080  mov	ax,#$80
22839 5C35           89D9                       mov	cx,bx
22840 5C37           D3F8                       sar	ax,cl
22841                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
22842 5C39           8846         FD            mov	-3[bp],al
22843                                           !BCC_EOS
22844                                           ! 2600      attr = 0x00;
22845                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
22846 5C3C           30C0                       xor	al,al
22847 5C3E           8846         FC            mov	-4[bp],al
22848                                           !BCC_EOS
22849                                           ! 2601      for(i=0;i<4;i++)
22850                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
22851 5C41           30C0                       xor	al,al
22852 5C43           8846         FA            mov	-6[bp],al
22853                                           !BCC_EOS
22854                                           !BCC_EOS
22855                                           ! 2602       {
22856 5C46           EB           4B            jmp .1C2
22857                       00005C48            .1C3:
22858                                           ! 2603        outw(0x3ce, (i << 8) | 0x04);
22859                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
22860 5C48           8A46         FA            mov	al,-6[bp]
22861 5C4B           30E4                       xor	ah,ah
22862 5C4D           88C4                       mov	ah,al
22863 5C4F           30C0                       xor	al,al
22864                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
22865 5C51           0C                     04  or	al,*4
22866                                           ! Debug: list unsigned int = ax+0 (used reg = )
22867 5C53           50                         push	ax
22868                                           ! Debug: list int = const $3CE (used reg = )
22869 5C54           B8                   03CE  mov	ax,#$3CE
22870 5C57           50                         push	ax
22871                                           ! Debug: func () void = outw+0 (used reg = )
22872 5C58           E8         1EC6            call	_outw
22873 5C5B           83C4                   04  add	sp,*4
22874                                           !BCC_EOS
22875                                           ! 2604        data = read_byte(0xa000,addr) & mask;
22876                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22877 5C5E           FF76         F8            push	-8[bp]
22878                                           ! Debug: list unsigned int = const $A000 (used reg = )
22879 5C61           B8                   A000  mov	ax,#$A000
22880 5C64           50                         push	ax
22881                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22882 5C65           E8         1E3D            call	_read_byte
22883 5C68           83C4                   04  add	sp,*4
22884                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
22885 5C6B           2246         FD            and	al,-3[bp]
22886                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22887 5C6E           8846         FB            mov	-5[bp],al
22888                                           !BCC_EOS
22889                                           ! 2605        if (data > 0) attr |= (0x01 << i);
22890                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
22891 5C71           8A46         FB            mov	al,-5[bp]
22892 5C74           84C0                       test	al,al
22893 5C76           74           14            je  	.1C4
22894                       00005C78            .1C5:
22895                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
22896 5C78           8A46         FA            mov	al,-6[bp]
22897 5C7B           30E4                       xor	ah,ah
22898 5C7D           89C3                       mov	bx,ax
22899 5C7F           B8                   0001  mov	ax,*1
22900 5C82           89D9                       mov	cx,bx
22901 5C84           D3E0                       shl	ax,cl
22902                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
22903 5C86           0A46         FC            or	al,-4[bp]
22904 5C89           8846         FC            mov	-4[bp],al
22905                                           !BCC_EOS
22906                                           ! 2606       }
22907                       00005C8C            .1C4:
22908                                           ! 2607      break;
22909                       00005C8C            .1C1:
22910                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
22911 5C8C           8A46         FA            mov	al,-6[bp]
22912 5C8F           40                         inc	ax
22913 5C90           8846         FA            mov	-6[bp],al
22914                       00005C93            .1C2:
22915                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
22916 5C93           8A46         FA            mov	al,-6[bp]
22917 5C96           3C                     04  cmp	al,*4
22918 5C98           72           AE            jb 	.1C3
22919                       00005C9A            .1C6:
22920                       00005C9A            .1C0:
22921 5C9A           E9         00E8            br 	.1BB
22922                                           !BCC_EOS
22923                                           ! 2608    case 0x02:
22924                                           ! 2609      addr=(CX>>2)+(DX>>1)*80;
22925                       00005C9D            .1C7:
22926                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22927 5C9D           8B46         08            mov	ax,8[bp]
22928 5CA0           D1E8                       shr	ax,*1
22929                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22930 5CA2           B9                   0050  mov	cx,*$50
22931 5CA5           F7E9                       imul	cx
22932 5CA7           50                         push	ax
22933                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
22934 5CA8           8B46         06            mov	ax,6[bp]
22935 5CAB           D1E8                       shr	ax,*1
22936 5CAD           D1E8                       shr	ax,*1
22937                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22938 5CAF           0346         F4            add	ax,0+..FFF7[bp]
22939 5CB2           44                         inc	sp
22940 5CB3           44                         inc	sp
22941                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22942 5CB4           8946         F8            mov	-8[bp],ax
22943                                           !BCC_EOS
22944                                           ! 2610      if (DX & 1) addr += 0x2000;
22945                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22946 5CB7           8A46         08            mov	al,8[bp]
22947 5CBA           24                     01  and	al,*1
22948 5CBC           84C0                       test	al,al
22949 5CBE           74           09            je  	.1C8
22950                       00005CC0            .1C9:
22951                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
22952 5CC0           8B46         F8            mov	ax,-8[bp]
22953 5CC3           05                   2000  add	ax,#$2000
22954 5CC6           8946         F8            mov	-8[bp],ax
22955                                           !BCC_EOS
22956                                           ! 2611      data = read_byte(0xb800,addr);
22957                       00005CC9            .1C8:
22958                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22959 5CC9           FF76         F8            push	-8[bp]
22960                                           ! Debug: list unsigned int = const $B800 (used reg = )
22961 5CCC           B8                   B800  mov	ax,#$B800
22962 5CCF           50                         push	ax
22963                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22964 5CD0           E8         1DD2            call	_read_byte
22965 5CD3           83C4                   04  add	sp,*4
22966                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22967 5CD6           8846         FB            mov	-5[bp],al
22968                                           !BCC_EOS
22969                                           ! 2612      if(vga_modes[line].pixbits==2)
22970                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22971 5CD9           8A46         FE            mov	al,-2[bp]
22972 5CDC           30E4                       xor	ah,ah
22973 5CDE           B1                     03  mov	cl,*3
22974 5CE0           D3E0                       shl	ax,cl
22975 5CE2           89C3                       mov	bx,ax
22976 5CE4           81C3                 01DC  add	bx,#_vga_modes
22977                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22978 5CE8           8A47         03            mov	al,3[bx]
22979 5CEB           3C                     02  cmp	al,*2
22980 5CED           75           25            jne 	.1CA
22981                       00005CEF            .1CB:
22982                                           ! 2613       {
22983                                           ! 2614        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
22984                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
22985 5CEF           8A46         06            mov	al,6[bp]
22986 5CF2           24                     03  and	al,*3
22987                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22988 5CF4           50                         push	ax
22989 5CF5           B8                   0003  mov	ax,*3
22990 5CF8           2A46         F4            sub	al,0+..FFF7[bp]
22991 5CFB           80DC                   00  sbb	ah,*0
22992 5CFE           44                         inc	sp
22993 5CFF           44                         inc	sp
22994                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22995 5D00           D1E0                       shl	ax,*1
22996                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
22997 5D02           89C3                       mov	bx,ax
22998 5D04           8A46         FB            mov	al,-5[bp]
22999 5D07           30E4                       xor	ah,ah
23000 5D09           89D9                       mov	cx,bx
23001 5D0B           D3E8                       shr	ax,cl
23002                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23003 5D0D           24                     03  and	al,*3
23004                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23005 5D0F           8846         FC            mov	-4[bp],al
23006                                           !BCC_EOS
23007                                           ! 2615       }
23008                                           ! 2616      else
23009                                           ! 2617       {
23010 5D12           EB           21            jmp .1CC
23011                       00005D14            .1CA:
23012                                           ! 2618        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23013                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23014 5D14           8A46         06            mov	al,6[bp]
23015 5D17           24                     07  and	al,*7
23016                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23017 5D19           50                         push	ax
23018 5D1A           B8                   0007  mov	ax,*7
23019 5D1D           2A46         F4            sub	al,0+..FFF7[bp]
23020 5D20           80DC                   00  sbb	ah,*0
23021 5D23           44                         inc	sp
23022 5D24           44                         inc	sp
23023                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23024 5D25           89C3                       mov	bx,ax
23025 5D27           8A46         FB            mov	al,-5[bp]
23026 5D2A           30E4                       xor	ah,ah
23027 5D2C           89D9                       mov	cx,bx
23028 5D2E           D3E8                       shr	ax,cl
23029                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23030 5D30           24                     01  and	al,*1
23031                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23032 5D32           8846         FC            mov	-4[bp],al
23033                                           !BCC_EOS
23034                                           ! 2619       }
23035                                           ! 2620      break;
23036                       00005D35            .1CC:
23037 5D35           EB           4E            jmp .1BB
23038                                           !BCC_EOS
23039                                           ! 2621    case 0x05:
23040                                           ! 2622      addr=CX+DX*(read_word(0x40,0x4A)*8);
23041                       00005D37            .1CD:
23042                                           ! Debug: list int = const $4A (used reg = )
23043 5D37           B8                   004A  mov	ax,*$4A
23044 5D3A           50                         push	ax
23045                                           ! Debug: list int = const $40 (used reg = )
23046 5D3B           B8                   0040  mov	ax,*$40
23047 5D3E           50                         push	ax
23048                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23049 5D3F           E8         1D76            call	_read_word
23050 5D42           83C4                   04  add	sp,*4
23051                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23052 5D45           B1                     03  mov	cl,*3
23053 5D47           D3E0                       shl	ax,cl
23054                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23055                                           ! Debug: expression subtree swapping
23056 5D49           8B4E         08            mov	cx,8[bp]
23057 5D4C           F7E9                       imul	cx
23058                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23059                                           ! Debug: expression subtree swapping
23060 5D4E           0346         06            add	ax,6[bp]
23061                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23062 5D51           8946         F8            mov	-8[bp],ax
23063                                           !BCC_EOS
23064                                           ! 2623      attr=read_byte(0xa000,addr);
23065                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23066 5D54           FF76         F8            push	-8[bp]
23067                                           ! Debug: list unsigned int = const $A000 (used reg = )
23068 5D57           B8                   A000  mov	ax,#$A000
23069 5D5A           50                         push	ax
23070                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23071 5D5B           E8         1D47            call	_read_byte
23072 5D5E           83C4                   04  add	sp,*4
23073                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23074 5D61           8846         FC            mov	-4[bp],al
23075                                           !BCC_EOS
23076                                           ! 2624      break;
23077 5D64           EB           1F            jmp .1BB
23078                                           !BCC_EOS
23079                                           ! 2625    default:
23080                                           ! 2626      attr = 0;
23081                       00005D66            .1CE:
23082                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23083 5D66           30C0                       xor	al,al
23084 5D68           8846         FC            mov	-4[bp],al
23085                                           !BCC_EOS
23086                                           ! 2627   }
23087                                           ! 2628  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23088 5D6B           EB           18            jmp .1BB
23089                       00005D6D            .1BD:
23090 5D6D           2C                     02  sub	al,*2
23091 5D6F         0F84         FF2A            beq 	.1C7
23092 5D73           2C                     01  sub	al,*1
23093 5D75         0F84         FE8D            beq 	.1BF
23094 5D79           2C                     01  sub	al,*1
23095 5D7B         0F84         FE87            beq 	.1BE
23096 5D7F           2C                     01  sub	al,*1
23097 5D81           74           B4            je 	.1CD
23098 5D83           EB           E1            jmp	.1CE
23099                       00005D85            .1BB:
23100                       FFFFFFF4            ..FFF7	=	-$C
23101                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23102 5D85           FF76         0A            push	$A[bp]
23103                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23104 5D88           FF76         F6            push	-$A[bp]
23105                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23106 5D8B           E8         1D2A            call	_read_word
23107 5D8E           83C4                   04  add	sp,*4
23108                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23109 5D91           30C0                       xor	al,al
23110                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23111 5D93           0A46         FC            or	al,-4[bp]
23112                                           ! Debug: list unsigned int = ax+0 (used reg = )
23113 5D96           50                         push	ax
23114                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23115 5D97           FF76         0A            push	$A[bp]
23116                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23117 5D9A           FF76         F6            push	-$A[bp]
23118                                           ! Debug: func () void = write_word+0 (used reg = )
23119 5D9D           E8         1D43            call	_write_word
23120 5DA0           83C4                   06  add	sp,*6
23121                                           !BCC_EOS
23122                                           ! 2629 }
23123 5DA3           89EC                       mov	sp,bp
23124 5DA5           5D                         pop	bp
23125 5DA6           C3                         ret
23126                                           ! 2630 static void biosfn_write_teletype (car, page, attr, flag)
23127                                           ! Register BX used in function biosfn_read_pixel
23128                                           ! 2631 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23129                       00005DA7            _biosfn_write_teletype:
23130                                           !BCC_EOS
23131                                           !BCC_EOS
23132                                           !BCC_EOS
23133                                           !BCC_EOS
23134                                           ! 2632 {
23135                                           ! 2633  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23136                                           !BCC_EOS
23137                                           ! 2634  Bit16u nbcols,nbrows,address;
23138                                           !BCC_EOS
23139                                           ! 2635  Bit16u cursor,dummy;
23140                                           !BCC_EOS
23141                                           ! 2636  if(page==0xff)
23142 5DA7           55                         push	bp
23143 5DA8           89E5                       mov	bp,sp
23144 5DAA           83C4                   F0  add	sp,*-$10
23145                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23146 5DAD           8A46         06            mov	al,6[bp]
23147 5DB0           3C                     FF  cmp	al,#$FF
23148 5DB2           75           11            jne 	.1CF
23149                       00005DB4            .1D0:
23150                                           ! 2637   page=read_byte(0x40,0x62);
23151                                           ! Debug: list int = const $62 (used reg = )
23152 5DB4           B8                   0062  mov	ax,*$62
23153 5DB7           50                         push	ax
23154                                           ! Debug: list int = const $40 (used reg = )
23155 5DB8           B8                   0040  mov	ax,*$40
23156 5DBB           50                         push	ax
23157                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23158 5DBC           E8         1CE6            call	_read_byte
23159 5DBF           83C4                   04  add	sp,*4
23160                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23161 5DC2           8846         06            mov	6[bp],al
23162                                           !BCC_EOS
23163                                           ! 2638  mode=read_byte(0x40,0x49);
23164                       00005DC5            .1CF:
23165                                           ! Debug: list int = const $49 (used reg = )
23166 5DC5           B8                   0049  mov	ax,*$49
23167 5DC8           50                         push	ax
23168                                           ! Debug: list int = const $40 (used reg = )
23169 5DC9           B8                   0040  mov	ax,*$40
23170 5DCC           50                         push	ax
23171                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23172 5DCD           E8         1CD5            call	_read_byte
23173 5DD0           83C4                   04  add	sp,*4
23174                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23175 5DD3           8846         FC            mov	-4[bp],al
23176                                           !BCC_EOS
23177                                           ! 2639  line=find_vga_entry(mode);
23178                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23179 5DD6           8A46         FC            mov	al,-4[bp]
23180 5DD9           30E4                       xor	ah,ah
23181 5DDB           50                         push	ax
23182                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23183 5DDC           E8         1BDA            call	_find_vga_entry
23184 5DDF           44                         inc	sp
23185 5DE0           44                         inc	sp
23186                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23187 5DE1           8846         FB            mov	-5[bp],al
23188                                           !BCC_EOS
23189                                           ! 2640  if(line==0xFF)return;
23190                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23191 5DE4           8A46         FB            mov	al,-5[bp]
23192 5DE7           3C                     FF  cmp	al,#$FF
23193 5DE9           75           04            jne 	.1D1
23194                       00005DEB            .1D2:
23195 5DEB           89EC                       mov	sp,bp
23196 5DED           5D                         pop	bp
23197 5DEE           C3                         ret
23198                                           !BCC_EOS
23199                                           ! 2641  biosfn_get_cursor_pos(page,&dummy,&cursor);
23200                       00005DEF            .1D1:
23201                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23202 5DEF           8D5E         F2            lea	bx,-$E[bp]
23203 5DF2           53                         push	bx
23204                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23205 5DF3           8D5E         F0            lea	bx,-$10[bp]
23206 5DF6           53                         push	bx
23207                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23208 5DF7           8A46         06            mov	al,6[bp]
23209 5DFA           30E4                       xor	ah,ah
23210 5DFC           50                         push	ax
23211                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23212 5DFD           E8         E560            call	_biosfn_get_cursor_pos
23213 5E00           83C4                   06  add	sp,*6
23214                                           !BCC_EOS
23215                                           ! 2642  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23216                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23217 5E03           8A46         F2            mov	al,-$E[bp]
23218                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23219 5E06           8846         FE            mov	-2[bp],al
23220                                           !BCC_EOS
23221                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23222 5E09           8B46         F2            mov	ax,-$E[bp]
23223 5E0C           30C0                       xor	al,al
23224                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23225 5E0E           88E0                       mov	al,ah
23226 5E10           30E4                       xor	ah,ah
23227                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23228 5E12           8846         FD            mov	-3[bp],al
23229                                           !BCC_EOS
23230                                           ! 2643  nbrows=read_byte(0x40,0x84)+1;
23231                                           ! Debug: list int = const $84 (used reg = )
23232 5E15           B8                   0084  mov	ax,#$84
23233 5E18           50                         push	ax
23234                                           ! Debug: list int = const $40 (used reg = )
23235 5E19           B8                   0040  mov	ax,*$40
23236 5E1C           50                         push	ax
23237                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23238 5E1D           E8         1C85            call	_read_byte
23239 5E20           83C4                   04  add	sp,*4
23240                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23241 5E23           30E4                       xor	ah,ah
23242                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23243 5E25           40                         inc	ax
23244 5E26           8946         F6            mov	-$A[bp],ax
23245                                           !BCC_EOS
23246                                           ! 2644  nbcols=read_word(0x40,0x4A);
23247                                           ! Debug: list int = const $4A (used reg = )
23248 5E29           B8                   004A  mov	ax,*$4A
23249 5E2C           50                         push	ax
23250                                           ! Debug: list int = const $40 (used reg = )
23251 5E2D           B8                   0040  mov	ax,*$40
23252 5E30           50                         push	ax
23253                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23254 5E31           E8         1C84            call	_read_word
23255 5E34           83C4                   04  add	sp,*4
23256                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23257 5E37           8946         F8            mov	-8[bp],ax
23258                                           !BCC_EOS
23259                                           ! 2645  switch(car)
23260 5E3A           8A46         04            mov	al,4[bp]
23261                                           ! 2646   {
23262 5E3D           E9         01EB            br 	.1D5
23263                                           ! 2647    case 7:
23264                                           ! 2648     break;
23265                       00005E40            .1D6:
23266 5E40           E9         0209            br 	.1D3
23267                                           !BCC_EOS
23268                                           ! 2649    case 8:
23269                                           ! 2650     if(xcurs>0)xcurs--;
23270                       00005E43            .1D7:
23271                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23272 5E43           8A46         FE            mov	al,-2[bp]
23273 5E46           84C0                       test	al,al
23274 5E48           74           07            je  	.1D8
23275                       00005E4A            .1D9:
23276                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23277 5E4A           8A46         FE            mov	al,-2[bp]
23278 5E4D           48                         dec	ax
23279 5E4E           8846         FE            mov	-2[bp],al
23280                                           !BCC_EOS
23281                                           ! 2651     break;
23282                       00005E51            .1D8:
23283 5E51           E9         01F8            br 	.1D3
23284                                           !BCC_EOS
23285                                           ! 2652    case '\r':
23286                                           ! 2653     xcurs=0;
23287                       00005E54            .1DA:
23288                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23289 5E54           30C0                       xor	al,al
23290 5E56           8846         FE            mov	-2[bp],al
23291                                           !BCC_EOS
23292                                           ! 2654     break;
23293 5E59           E9         01F0            br 	.1D3
23294                                           !BCC_EOS
23295                                           ! 2655    case '\n':
23296                                           ! 2656     ycurs++;
23297                       00005E5C            .1DB:
23298                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23299 5E5C           8A46         FD            mov	al,-3[bp]
23300 5E5F           40                         inc	ax
23301 5E60           8846         FD            mov	-3[bp],al
23302                                           !BCC_EOS
23303                                           ! 2657     break;
23304 5E63           E9         01E6            br 	.1D3
23305                                           !BCC_EOS
23306                                           ! 2658    case '\t':
23307                                           ! 2659     do
23308                       00005E66            .1DC:
23309                                           ! 2660      {
23310                       00005E66            .1DF:
23311                                           ! 2661       biosfn_write_teletype(' ',page,attr,flag);
23312                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23313 5E66           8A46         0A            mov	al,$A[bp]
23314 5E69           30E4                       xor	ah,ah
23315 5E6B           50                         push	ax
23316                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23317 5E6C           8A46         08            mov	al,8[bp]
23318 5E6F           30E4                       xor	ah,ah
23319 5E71           50                         push	ax
23320                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23321 5E72           8A46         06            mov	al,6[bp]
23322 5E75           30E4                       xor	ah,ah
23323 5E77           50                         push	ax
23324                                           ! Debug: list int = const $20 (used reg = )
23325 5E78           B8                   0020  mov	ax,*$20
23326 5E7B           50                         push	ax
23327                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23328 5E7C           E8         FF28            call	_biosfn_write_teletype
23329 5E7F           83C4                   08  add	sp,*8
23330                                           !BCC_EOS
23331                                           ! 2662       biosfn_get_cursor_pos(page,&dummy,&cursor);
23332                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23333 5E82           8D5E         F2            lea	bx,-$E[bp]
23334 5E85           53                         push	bx
23335                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23336 5E86           8D5E         F0            lea	bx,-$10[bp]
23337 5E89           53                         push	bx
23338                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23339 5E8A           8A46         06            mov	al,6[bp]
23340 5E8D           30E4                       xor	ah,ah
23341 5E8F           50                         push	ax
23342                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23343 5E90           E8         E4CD            call	_biosfn_get_cursor_pos
23344 5E93           83C4                   06  add	sp,*6
23345                                           !BCC_EOS
23346                                           ! 2663       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23347                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23348 5E96           8A46         F2            mov	al,-$E[bp]
23349                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23350 5E99           8846         FE            mov	-2[bp],al
23351                                           !BCC_EOS
23352                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23353 5E9C           8B46         F2            mov	ax,-$E[bp]
23354 5E9F           30C0                       xor	al,al
23355                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23356 5EA1           88E0                       mov	al,ah
23357 5EA3           30E4                       xor	ah,ah
23358                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23359 5EA5           8846         FD            mov	-3[bp],al
23360                                           !BCC_EOS
23361                                           ! 2664      }while(xcurs%8==0);
23362                       00005EA8            .1DE:
23363                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23364 5EA8           8A46         FE            mov	al,-2[bp]
23365 5EAB           30E4                       xor	ah,ah
23366 5EAD           24                     07  and	al,*7
23367                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23368 5EAF           84C0                       test	al,al
23369 5EB1           74           B3            je 	.1DF
23370                       00005EB3            .1E0:
23371                                           !BCC_EOS
23372                                           ! 2665     break;
23373                       00005EB3            .1DD:
23374 5EB3           E9         0196            br 	.1D3
23375                                           !BCC_EOS
23376                                           ! 2666    default:
23377                                           ! 2667     if(vga_modes[line].class==0x00)
23378                       00005EB6            .1E1:
23379                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23380 5EB6           8A46         FB            mov	al,-5[bp]
23381 5EB9           30E4                       xor	ah,ah
23382 5EBB           B1                     03  mov	cl,*3
23383 5EBD           D3E0                       shl	ax,cl
23384 5EBF           89C3                       mov	bx,ax
23385 5EC1           81C3                 01DC  add	bx,#_vga_modes
23386                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23387 5EC5           8A47         01            mov	al,1[bx]
23388 5EC8           84C0                       test	al,al
23389 5ECA         0F85         0082            bne 	.1E2
23390                       00005ECE            .1E3:
23391                                           ! 2668      {
23392                                           ! 2669       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23393                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23394 5ECE           8A46         FD            mov	al,-3[bp]
23395 5ED1           30E4                       xor	ah,ah
23396 5ED3           8B4E         F8            mov	cx,-8[bp]
23397 5ED6           F7E9                       imul	cx
23398                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23399                                           ! Debug: expression subtree swapping
23400 5ED8           0246         FE            add	al,-2[bp]
23401 5EDB           80D4                   00  adc	ah,*0
23402                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23403 5EDE           D1E0                       shl	ax,*1
23404 5EE0           50                         push	ax
23405                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23406 5EE1           8B46         F8            mov	ax,-8[bp]
23407 5EE4           8B4E         F6            mov	cx,-$A[bp]
23408 5EE7           F7E9                       imul	cx
23409                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23410 5EE9           D1E0                       shl	ax,*1
23411                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23412 5EEB           0C                     FF  or	al,#$FF
23413                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23414                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23415 5EED           89C3                       mov	bx,ax
23416 5EEF           8A46         06            mov	al,6[bp]
23417 5EF2           30E4                       xor	ah,ah
23418 5EF4           93                         xchg	ax,bx
23419 5EF5           40                         inc	ax
23420 5EF6           89D9                       mov	cx,bx
23421 5EF8           F7E9                       imul	cx
23422                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23423 5EFA           0346         EE            add	ax,0+..FFF6[bp]
23424 5EFD           44                         inc	sp
23425 5EFE           44                         inc	sp
23426                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23427 5EFF           8946         F4            mov	-$C[bp],ax
23428                                           !BCC_EOS
23429                                           ! 2670       write_byte(vga_modes[line].sstar
23430                                           ! 2670 t,address,car);
23431                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23432 5F02           8A46         04            mov	al,4[bp]
23433 5F05           30E4                       xor	ah,ah
23434 5F07           50                         push	ax
23435                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23436 5F08           FF76         F4            push	-$C[bp]
23437                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23438 5F0B           8A46         FB            mov	al,-5[bp]
23439 5F0E           30E4                       xor	ah,ah
23440 5F10           B1                     03  mov	cl,*3
23441 5F12           D3E0                       shl	ax,cl
23442 5F14           89C3                       mov	bx,ax
23443 5F16           81C3                 01DC  add	bx,#_vga_modes
23444                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23445 5F1A           FF77         04            push	4[bx]
23446                                           ! Debug: func () void = write_byte+0 (used reg = )
23447 5F1D           E8         1BAB            call	_write_byte
23448 5F20           83C4                   06  add	sp,*6
23449                                           !BCC_EOS
23450                                           ! 2671       if(flag==3)
23451                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23452 5F23           8A46         0A            mov	al,$A[bp]
23453 5F26           3C                     03  cmp	al,*3
23454 5F28           75           23            jne 	.1E4
23455                       00005F2A            .1E5:
23456                                           ! 2672        write_byte(vga_modes[line].sstart,address+1,attr);
23457                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23458 5F2A           8A46         08            mov	al,8[bp]
23459 5F2D           30E4                       xor	ah,ah
23460 5F2F           50                         push	ax
23461                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23462 5F30           8B46         F4            mov	ax,-$C[bp]
23463                                           ! Debug: list unsigned int = ax+1 (used reg = )
23464 5F33           40                         inc	ax
23465 5F34           50                         push	ax
23466                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23467 5F35           8A46         FB            mov	al,-5[bp]
23468 5F38           30E4                       xor	ah,ah
23469 5F3A           B1                     03  mov	cl,*3
23470 5F3C           D3E0                       shl	ax,cl
23471 5F3E           89C3                       mov	bx,ax
23472 5F40           81C3                 01DC  add	bx,#_vga_modes
23473                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23474 5F44           FF77         04            push	4[bx]
23475                                           ! Debug: func () void = write_byte+0 (used reg = )
23476 5F47           E8         1B81            call	_write_byte
23477 5F4A           83C4                   06  add	sp,*6
23478                                           !BCC_EOS
23479                                           ! 2673      }
23480                       00005F4D            .1E4:
23481                                           ! 2674     else
23482                                           ! 2675      {
23483 5F4D           E9         00D2            br 	.1E6
23484                       00005F50            .1E2:
23485                                           ! 2676       cheight=video_param_table[line_to_vpti[line]].cheight;
23486                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23487 5F50           8A46         FB            mov	al,-5[bp]
23488 5F53           30E4                       xor	ah,ah
23489 5F55           89C3                       mov	bx,ax
23490                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23491 5F57           8A87       025C            mov	al,_line_to_vpti[bx]
23492 5F5B           30E4                       xor	ah,ah
23493 5F5D           B1                     06  mov	cl,*6
23494 5F5F           D3E0                       shl	ax,cl
23495 5F61           89C3                       mov	bx,ax
23496 5F63           81C3                 0270  add	bx,#_video_param_table
23497                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23498 5F67           8A47         02            mov	al,2[bx]
23499 5F6A           8846         FF            mov	-1[bp],al
23500                                           !BCC_EOS
23501                                           ! 2677       bpp=vga_modes[line].pixbits;
23502                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23503 5F6D           8A46         FB            mov	al,-5[bp]
23504 5F70           30E4                       xor	ah,ah
23505 5F72           B1                     03  mov	cl,*3
23506 5F74           D3E0                       shl	ax,cl
23507 5F76           89C3                       mov	bx,ax
23508 5F78           81C3                 01DC  add	bx,#_vga_modes
23509                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23510 5F7C           8A47         03            mov	al,3[bx]
23511 5F7F           8846         FA            mov	-6[bp],al
23512                                           !BCC_EOS
23513                                           ! 2678       switch(vga_modes[line].memmodel)
23514                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23515 5F82           8A46         FB            mov	al,-5[bp]
23516 5F85           30E4                       xor	ah,ah
23517 5F87           B1                     03  mov	cl,*3
23518 5F89           D3E0                       shl	ax,cl
23519 5F8B           89C3                       mov	bx,ax
23520 5F8D           81C3                 01DC  add	bx,#_vga_modes
23521 5F91           8A47         02            mov	al,2[bx]
23522                                           ! 2679        {
23523 5F94           E9         0077            br 	.1E9
23524                                           ! 2680         case 0x04:
23525                                           ! 2681         case 0x03:
23526                       00005F97            .1EA:
23527                                           ! 2682           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23528                       00005F97            .1EB:
23529                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23530 5F97           8A46         FF            mov	al,-1[bp]
23531 5F9A           30E4                       xor	ah,ah
23532 5F9C           50                         push	ax
23533                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23534 5F9D           FF76         F8            push	-8[bp]
23535                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23536 5FA0           8A46         FD            mov	al,-3[bp]
23537 5FA3           30E4                       xor	ah,ah
23538 5FA5           50                         push	ax
23539                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23540 5FA6           8A46         FE            mov	al,-2[bp]
23541 5FA9           30E4                       xor	ah,ah
23542 5FAB           50                         push	ax
23543                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23544 5FAC           8A46         08            mov	al,8[bp]
23545 5FAF           30E4                       xor	ah,ah
23546 5FB1           50                         push	ax
23547                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23548 5FB2           8A46         04            mov	al,4[bp]
23549 5FB5           30E4                       xor	ah,ah
23550 5FB7           50                         push	ax
23551                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23552 5FB8           E8         F09E            call	_write_gfx_char_pl4
23553 5FBB           83C4                   0C  add	sp,*$C
23554                                           !BCC_EOS
23555                                           ! 2683           break;
23556 5FBE           EB           62            jmp .1E7
23557                                           !BCC_EOS
23558                                           ! 2684         case 0x02:
23559                                           ! 2685           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
23560                       00005FC0            .1EC:
23561                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
23562 5FC0           8A46         FA            mov	al,-6[bp]
23563 5FC3           30E4                       xor	ah,ah
23564 5FC5           50                         push	ax
23565                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23566 5FC6           FF76         F8            push	-8[bp]
23567                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23568 5FC9           8A46         FD            mov	al,-3[bp]
23569 5FCC           30E4                       xor	ah,ah
23570 5FCE           50                         push	ax
23571                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23572 5FCF           8A46         FE            mov	al,-2[bp]
23573 5FD2           30E4                       xor	ah,ah
23574 5FD4           50                         push	ax
23575                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23576 5FD5           8A46         08            mov	al,8[bp]
23577 5FD8           30E4                       xor	ah,ah
23578 5FDA           50                         push	ax
23579                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23580 5FDB           8A46         04            mov	al,4[bp]
23581 5FDE           30E4                       xor	ah,ah
23582 5FE0           50                         push	ax
23583                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
23584 5FE1           E8         F1E8            call	_write_gfx_char_cga
23585 5FE4           83C4                   0C  add	sp,*$C
23586                                           !BCC_EOS
23587                                           ! 2686           break;
23588 5FE7           EB           39            jmp .1E7
23589                                           !BCC_EOS
23590                                           ! 2687         case 0x05:
23591                                           ! 2688           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
23592                       00005FE9            .1ED:
23593                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
23594 5FE9           FF76         F8            push	-8[bp]
23595                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
23596 5FEC           8A46         FD            mov	al,-3[bp]
23597 5FEF           30E4                       xor	ah,ah
23598 5FF1           50                         push	ax
23599                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
23600 5FF2           8A46         FE            mov	al,-2[bp]
23601 5FF5           30E4                       xor	ah,ah
23602 5FF7           50                         push	ax
23603                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
23604 5FF8           8A46         08            mov	al,8[bp]
23605 5FFB           30E4                       xor	ah,ah
23606 5FFD           50                         push	ax
23607                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
23608 5FFE           8A46         04            mov	al,4[bp]
23609 6001           30E4                       xor	ah,ah
23610 6003           50                         push	ax
23611                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
23612 6004           E8         F3C8            call	_write_gfx_char_lin
23613 6007           83C4                   0A  add	sp,*$A
23614                                           !BCC_EOS
23615                                           ! 2689           break;
23616 600A           EB           16            jmp .1E7
23617                                           !BCC_EOS
23618                                           ! 2690        }
23619                                           ! 2691      }
23620 600C           EB           14            jmp .1E7
23621                       0000600E            .1E9:
23622 600E           2C                     02  sub	al,*2
23623 6010           74           AE            je 	.1EC
23624 6012           2C                     01  sub	al,*1
23625 6014         0F84         FF7F            beq 	.1EB
23626 6018           2C                     01  sub	al,*1
23627 601A         0F84         FF79            beq 	.1EA
23628 601E           2C                     01  sub	al,*1
23629 6020           74           C7            je 	.1ED
23630                       00006022            .1E7:
23631                                           ! 2692     xcurs++;
23632                       00006022            .1E6:
23633                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
23634 6022           8A46         FE            mov	al,-2[bp]
23635 6025           40                         inc	ax
23636 6026           8846         FE            mov	-2[bp],al
23637                                           !BCC_EOS
23638                                           ! 2693   }
23639                                           ! 2694  if(xcurs==nbcols)
23640 6029           EB           21            jmp .1D3
23641                       0000602B            .1D5:
23642 602B           2C                     07  sub	al,*7
23643 602D         0F84         FE0F            beq 	.1D6
23644 6031           2C                     01  sub	al,*1
23645 6033         0F84         FE0C            beq 	.1D7
23646 6037           2C                     01  sub	al,*1
23647 6039         0F84         FE29            beq 	.1DC
23648 603D           2C                     01  sub	al,*1
23649 603F         0F84         FE19            beq 	.1DB
23650 6043           2C                     03  sub	al,*3
23651 6045         0F84         FE0B            beq 	.1DA
23652 6049           E9         FE6A            br 	.1E1
23653                       0000604C            .1D3:
23654                       FFFFFFEE            ..FFF6	=	-$12
23655                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
23656 604C           8A46         FE            mov	al,-2[bp]
23657 604F           30E4                       xor	ah,ah
23658 6051           3B46         F8            cmp	ax,-8[bp]
23659 6054           75           0C            jne 	.1EE
23660                       00006056            .1EF:
23661                                           ! 2695   {xcurs=0;
23662                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23663 6056           30C0                       xor	al,al
23664 6058           8846         FE            mov	-2[bp],al
23665                                           !BCC_EOS
23666                                           ! 2696    ycurs++;
23667                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23668 605B           8A46         FD            mov	al,-3[bp]
23669 605E           40                         inc	ax
23670 605F           8846         FD            mov	-3[bp],al
23671                                           !BCC_EOS
23672                                           ! 2697   }
23673                                           ! 2698  if(ycurs==nbrows)
23674                       00006062            .1EE:
23675                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
23676 6062           8A46         FD            mov	al,-3[bp]
23677 6065           30E4                       xor	ah,ah
23678 6067           3B46         F6            cmp	ax,-$A[bp]
23679 606A           75           70            jne 	.1F0
23680                       0000606C            .1F1:
23681                                           ! 2699   {
23682                                           ! 2700    if(vga_modes[line].class==0x00)
23683                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23684 606C           8A46         FB            mov	al,-5[bp]
23685 606F           30E4                       xor	ah,ah
23686 6071           B1                     03  mov	cl,*3
23687 6073           D3E0                       shl	ax,cl
23688 6075           89C3                       mov	bx,ax
23689 6077           81C3                 01DC  add	bx,#_vga_modes
23690                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23691 607B           8A47         01            mov	al,1[bx]
23692 607E           84C0                       test	al,al
23693 6080           75           2A            jne 	.1F2
23694                       00006082            .1F3:
23695                                           ! 2701     {
23696                                           ! 2702      biosfn_scroll(0x01,0x07,0,0,nbrows-1,nbcols-1,page,1);
23697                                           ! Debug: list int = const 1 (used reg = )
23698 6082           B8                   0001  mov	ax,*1
23699 6085           50                         push	ax
23700                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23701 6086           8A46         06            mov	al,6[bp]
23702 6089           30E4                       xor	ah,ah
23703 608B           50                         push	ax
23704                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23705 608C           8B46         F8            mov	ax,-8[bp]
23706                                           ! Debug: list unsigned int = ax-1 (used reg = )
23707 608F           48                         dec	ax
23708 6090           50                         push	ax
23709                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23710 6091           8B46         F6            mov	ax,-$A[bp]
23711                                           ! Debug: list unsigned int = ax-1 (used reg = )
23712 6094           48                         dec	ax
23713 6095           50                         push	ax
23714                                           ! Debug: list int = const 0 (used reg = )
23715 6096           31C0                       xor	ax,ax
23716 6098           50                         push	ax
23717                                           ! Debug: list int = const 0 (used reg = )
23718 6099           31C0                       xor	ax,ax
23719 609B           50                         push	ax
23720                                           ! Debug: list int = const 7 (used reg = )
23721 609C           B8                   0007  mov	ax,*7
23722 609F           50                         push	ax
23723                                           ! Debug: list int = const 1 (used reg = )
23724 60A0           B8                   0001  mov	ax,*1
23725 60A3           50                         push	ax
23726                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23727 60A4           E8         E7B1            call	_biosfn_scroll
23728 60A7           83C4                   10  add	sp,*$10
23729                                           !BCC_EOS
23730                                           ! 2703     }
23731                                           ! 2704    else
23732                                           ! 2705     {
23733 60AA           EB           27            jmp .1F4
23734                       000060AC            .1F2:
23735                                           ! 2706      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
23736                                           ! Debug: list int = const 1 (used reg = )
23737 60AC           B8                   0001  mov	ax,*1
23738 60AF           50                         push	ax
23739                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23740 60B0           8A46         06            mov	al,6[bp]
23741 60B3           30E4                       xor	ah,ah
23742 60B5           50                         push	ax
23743                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23744 60B6           8B46         F8            mov	ax,-8[bp]
23745                                           ! Debug: list unsigned int = ax-1 (used reg = )
23746 60B9           48                         dec	ax
23747 60BA           50                         push	ax
23748                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23749 60BB           8B46         F6            mov	ax,-$A[bp]
23750                                           ! Debug: list unsigned int = ax-1 (used reg = )
23751 60BE           48                         dec	ax
23752 60BF           50                         push	ax
23753                                           ! Debug: list int = const 0 (used reg = )
23754 60C0           31C0                       xor	ax,ax
23755 60C2           50                         push	ax
23756                                           ! Debug: list int = const 0 (used reg = )
23757 60C3           31C0                       xor	ax,ax
23758 60C5           50                         push	ax
23759                                           ! Debug: list int = const 0 (used reg = )
23760 60C6           31C0                       xor	ax,ax
23761 60C8           50                         push	ax
23762                                           ! Debug: list int = const 1 (used reg = )
23763 60C9           B8                   0001  mov	ax,*1
23764 60CC           50                         push	ax
23765                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23766 60CD           E8         E788            call	_biosfn_scroll
23767 60D0           83C4                   10  add	sp,*$10
23768                                           !BCC_EOS
23769                                           ! 2707     }
23770                                           ! 2708    ycurs-=1;
23771                       000060D3            .1F4:
23772                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23773 60D3           8A46         FD            mov	al,-3[bp]
23774 60D6           30E4                       xor	ah,ah
23775 60D8           48                         dec	ax
23776 60D9           8846         FD            mov	-3[bp],al
23777                                           !BCC_EOS
23778                                           ! 2709   }
23779                                           ! 2710  cursor=ycurs; cursor<<=8; cursor+=xcurs;
23780                       000060DC            .1F0:
23781                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
23782 60DC           8A46         FD            mov	al,-3[bp]
23783 60DF           30E4                       xor	ah,ah
23784 60E1           8946         F2            mov	-$E[bp],ax
23785                                           !BCC_EOS
23786                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
23787 60E4           8B46         F2            mov	ax,-$E[bp]
23788 60E7           88C4                       mov	ah,al
23789 60E9           30C0                       xor	al,al
23790 60EB           8946         F2            mov	-$E[bp],ax
23791                                           !BCC_EOS
23792                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
23793 60EE           8B46         F2            mov	ax,-$E[bp]
23794 60F1           0246         FE            add	al,-2[bp]
23795 60F4           80D4                   00  adc	ah,*0
23796 60F7           8946         F2            mov	-$E[bp],ax
23797                                           !BCC_EOS
23798                                           ! 2711  biosfn_set_cursor_pos(page,cursor);
23799                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
23800 60FA           FF76         F2            push	-$E[bp]
23801                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23802 60FD           8A46         06            mov	al,6[bp]
23803 6100           30E4                       xor	ah,ah
23804 6102           50                         push	ax
23805                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
23806 6103           E8         E15A            call	_biosfn_set_cursor_pos
23807 6106           83C4                   04  add	sp,*4
23808                                           !BCC_EOS
23809                                           ! 2712 }
23810 6109           89EC                       mov	sp,bp
23811 610B           5D                         pop	bp
23812 610C           C3                         ret
23813                                           ! 2713 #asm
23814                                           !BCC_ASM
23815                       00000008            _biosfn_write_teletype.flag	set	8
23816                       00000006            _biosfn_write_teletype.attr	set	6
23817                       00000004            _biosfn_write_teletype.page	set	4
23818                       00000002            _biosfn_write_teletype.car	set	2
23819                       0000610D            biosfn_get_video_mode:
23820 610D           1E                           push ds
23821 610E           B8                   0040    mov ax, # 0x40
23822 6111           8ED8                         mov ds, ax
23823 6113           53                           push bx
23824 6114           BB                   0062    mov bx, # 0x62
23825 6117           8A07                         mov al, [bx]
23826 6119           5B                           pop bx
23827 611A           88C7                         mov bh, al
23828 611C           53                           push bx
23829 611D           BB                   0087    mov bx, # 0x87
23830 6120           8A27                         mov ah, [bx]
23831 6122           80E4                   80    and ah, #0x80
23832 6125           BB                   0049    mov bx, # 0x49
23833 6128           8A07                         mov al, [bx]
23834 612A           08E0                         or al, ah
23835 612C           BB                   004A    mov bx, # 0x4A
23836 612F           8A27                         mov ah, [bx]
23837 6131           5B                           pop bx
23838 6132           1F                           pop ds
23839 6133           C3                           ret
23840                                           ! 2735 endasm
23841                                           !BCC_ENDASM
23842                                           ! 2736 #asm
23843                                           !BCC_ASM
23844                       00000008            _biosfn_write_teletype.flag	set	8
23845                       00000006            _biosfn_write_teletype.attr	set	6
23846                       00000004            _biosfn_write_teletype.page	set	4
23847                       00000002            _biosfn_write_teletype.car	set	2
23848                       00006134            biosfn_group_10:
23849 6134           3C                     00    cmp al, #0x00
23850 6136           75           02              jne int10_test_1001
23851 6138           EB           61              jmp biosfn_set_single_palette_reg
23852                       0000613A            int10_test_1001:
23853 613A           3C                     01    cmp al, #0x01
23854 613C           75           02              jne int10_test_1002
23855 613E           EB           75              jmp biosfn_set_overscan_border_color
23856                       00006140            int10_test_1002:
23857 6140           3C                     02    cmp al, #0x02
23858 6142           75           02              jne int10_test_1003
23859 6144           EB           77              jmp biosfn_set_all_palette_reg
23860                       00006146            int10_test_1003:
23861 6146           3C                     03    cmp al, #0x03
23862 6148           75           03              jne int10_test_1007
23863 614A           E9         009D              jmp biosfn_toggle_intensity
23864                       0000614D            int10_test_1007:
23865 614D           3C                     07    cmp al, #0x07
23866 614F           75           03              jne int10_test_1008
23867 6151           E9         00BC              jmp biosfn_get_single_palette_reg
23868                       00006154            int10_test_1008:
23869 6154           3C                     08    cmp al, #0x08
23870 6156           75           03              jne int10_test_1009
23871 6158           E9         00D9              jmp biosfn_read_overscan_border_color
23872                       0000615B            int10_test_1009:
23873 615B           3C                     09    cmp al, #0x09
23874 615D           75           03              jne int10_test_1010
23875 615F           E9         00E0              jmp biosfn_get_all_palette_reg
23876                       00006162            int10_test_1010:
23877 6162           3C                     10    cmp al, #0x10
23878 6164           75           03              jne int10_test_1012
23879 6166           E9         011A              jmp biosfn_set_single_dac_reg
23880                       00006169            int10_test_1012:
23881 6169           3C                     12    cmp al, #0x12
23882 616B           75           03              jne int10_test_1013
23883 616D           E9         012C              jmp biosfn_set_all_dac_reg
23884                       00006170            int10_test_1013:
23885 6170           3C                     13    cmp al, #0x13
23886 6172           75           03              jne int10_test_1015
23887 6174           E9         014D              jmp biosfn_select_video_dac_color_page
23888                       00006177            int10_test_1015:
23889 6177           3C                     15    cmp al, #0x15
23890 6179           75           03              jne int10_test_1017
23891 617B           E9         0189              jmp biosfn_read_single_dac_reg
23892                       0000617E            int10_test_1017:
23893 617E           3C                     17    cmp al, #0x17
23894 6180           75           03              jne int10_test_1018
23895 6182           E9         019D              jmp biosfn_read_all_dac_reg
23896                       00006185            int10_test_1018:
23897 6185           3C                     18    cmp al, #0x18
23898 6187           75           03              jne int10_test_1019
23899 6189           E9         01BE              jmp biosfn_set_pel_mask
23900                       0000618C            int10_test_1019:
23901 618C           3C                     19    cmp al, #0x19
23902 618E           75           03              jne int10_test_101A
23903 6190           E9         01C2              jmp biosfn_read_pel_mask
23904                       00006193            int10_test_101A:
23905 6193           3C                     1A    cmp al, #0x1a
23906 6195           75           03              jne int10_group_10_unknown
23907 6197           E9         01C6              jmp biosfn_read_video_dac_state
23908                       0000619A            int10_group_10_unknown:
23909 619A           C3                           ret
23910                       0000619B            biosfn_set_single_palette_reg:
23911 619B           80FB                   14    cmp bl, #0x14
23912 619E           77           14              ja no_actl_reg1
23913 61A0           50                           push ax
23914 61A1           52                           push dx
23915 61A2           BA                   03DA    mov dx, # 0x3da
23916 61A5           EC                           in al, dx
23917 61A6           BA                   03C0    mov dx, # 0x3c0
23918 61A9           88D8                         mov al, bl
23919 61AB           EE                           out dx, al
23920 61AC           88F8                         mov al, bh
23921 61AE           EE                           out dx, al
23922 61AF           B0                     20    mov al, #0x20
23923 61B1           EE                           out dx, al
23924 61B2           5A                           pop dx
23925 61B3           58                           pop ax
23926                       000061B4            no_actl_reg1:
23927 61B4           C3                           ret
23928                                           ! 2817 endasm
23929                                           !BCC_ENDASM
23930                                           ! 2818 #asm
23931                                           !BCC_ASM
23932                       00000008            _biosfn_write_teletype.flag	set	8
23933                       00000006            _biosfn_write_teletype.attr	set	6
23934                       00000004            _biosfn_write_teletype.page	set	4
23935                       00000002            _biosfn_write_teletype.car	set	2
23936                       000061B5            biosfn_set_overscan_border_color:
23937 61B5           53                           push bx
23938 61B6           B3                     11    mov bl, #0x11
23939 61B8           E8         FFE0              call biosfn_set_single_palette_reg
23940 61BB           5B                           pop bx
23941 61BC           C3                           ret
23942                                           ! 2825 endasm
23943                                           !BCC_ENDASM
23944                                           ! 2826 #asm
23945                                           !BCC_ASM
23946                       00000008            _biosfn_write_teletype.flag	set	8
23947                       00000006            _biosfn_write_teletype.attr	set	6
23948                       00000004            _biosfn_write_teletype.page	set	4
23949                       00000002            _biosfn_write_teletype.car	set	2
23950                       000061BD            biosfn_set_all_palette_reg:
23951 61BD           50                           push ax
23952 61BE           53                           push bx
23953 61BF           51                           push cx
23954 61C0           52                           push dx
23955 61C1           89D3                         mov bx, dx
23956 61C3           BA                   03DA    mov dx, # 0x3da
23957 61C6           EC                           in al, dx
23958 61C7           B1                     00    mov cl, #0x00
23959 61C9           BA                   03C0    mov dx, # 0x3c0
23960                       000061CC            set_palette_loop:
23961 61CC           88C8                         mov al, cl
23962 61CE           EE                           out dx, al
23963 61CF           26                           seg es
23964 61D0           8A07                         mov al, [bx]
23965 61D2           EE                           out dx, al
23966 61D3           43                           inc bx
23967 61D4           FEC1                         inc cl
23968 61D6           80F9                   10    cmp cl, #0x10
23969 61D9           75           F1              jne set_palette_loop
23970 61DB           B0                     11    mov al, #0x11
23971 61DD           EE                           out dx, al
23972 61DE           26                           seg es
23973 61DF           8A07                         mov al, [bx]
23974 61E1           EE                           out dx, al
23975 61E2           B0                     20    mov al, #0x20
23976 61E4           EE                           out dx, al
23977 61E5           5A                           pop dx
23978 61E6           59                           pop cx
23979 61E7           5B                           pop bx
23980 61E8           58                           pop ax
23981 61E9           C3                           ret
23982                                           ! 2859 endasm
23983                                           !BCC_ENDASM
23984                                           ! 2860 #asm
23985                                           !BCC_ASM
23986                       00000008            _biosfn_write_teletype.flag	set	8
23987                       00000006            _biosfn_write_teletype.attr	set	6
23988                       00000004            _biosfn_write_teletype.page	set	4
23989                       00000002            _biosfn_write_teletype.car	set	2
23990                       000061EA            biosfn_toggle_intensity:
23991 61EA           50                           push ax
23992 61EB           53                           push bx
23993 61EC           52                           push dx
23994 61ED           BA                   03DA    mov dx, # 0x3da
23995 61F0           EC                           in al, dx
23996 61F1           BA                   03C0    mov dx, # 0x3c0
23997 61F4           B0                     10    mov al, #0x10
23998 61F6           EE                           out dx, al
23999 61F7           BA                   03C1    mov dx, # 0x3c1
24000 61FA           EC                           in al, dx
24001 61FB           24                     F7    and al, #0xf7
24002 61FD           80E3                   01    and bl, #0x01
24003 6200           C0E3                   03    shl bl, 3
24004 6203           08D8                         or al, bl
24005 6205           BA                   03C0    mov dx, # 0x3c0
24006 6208           EE                           out dx, al
24007 6209           B0                     20    mov al, #0x20
24008 620B           EE                           out dx, al
24009 620C           5A                           pop dx
24010 620D           5B                           pop bx
24011 620E           58                           pop ax
24012 620F           C3                           ret
24013                                           ! 2884 endasm
24014                                           !BCC_ENDASM
24015                                           ! 2885 #asm
24016                                           !BCC_ASM
24017                       00000008            _biosfn_write_teletype.flag	set	8
24018                       00000006            _biosfn_write_teletype.attr	set	6
24019                       00000004            _biosfn_write_teletype.page	set	4
24020                       00000002            _biosfn_write_teletype.car	set	2
24021                       00006210            biosfn_get_single_palette_reg:
24022 6210           80FB                   14    cmp bl, #0x14
24023 6213           77           1E              ja no_actl_reg2
24024 6215           50                           push ax
24025 6216           52                           push dx
24026 6217           BA                   03DA    mov dx, # 0x3da
24027 621A           EC                           in al, dx
24028 621B           BA                   03C0    mov dx, # 0x3c0
24029 621E           88D8                         mov al, bl
24030 6220           EE                           out dx, al
24031 6221           BA                   03C1    mov dx, # 0x3c1
24032 6224           EC                           in al, dx
24033 6225           88C7                         mov bh, al
24034 6227           BA                   03DA    mov dx, # 0x3da
24035 622A           EC                           in al, dx
24036 622B           BA                   03C0    mov dx, # 0x3c0
24037 622E           B0                     20    mov al, #0x20
24038 6230           EE                           out dx, al
24039 6231           5A                           pop dx
24040 6232           58                           pop ax
24041                       00006233            no_actl_reg2:
24042 6233           C3                           ret
24043                                           ! 2908 enda
24044                                           !BCC_ENDASM
24045                                           ! 2909 #asm
24046                                           !BCC_ASM
24047                       00000008            _biosfn_write_teletype.flag	set	8
24048                       00000006            _biosfn_write_teletype.attr	set	6
24049                       00000004            _biosfn_write_teletype.page	set	4
24050                       00000002            _biosfn_write_teletype.car	set	2
24051                       00006234            biosfn_read_overscan_border_color:
24052 6234           50                           push ax
24053 6235           53                           push bx
24054 6236           B3                     11    mov bl, #0x11
24055 6238           E8         FFD5              call biosfn_get_single_palette_reg
24056 623B           88F8                         mov al, bh
24057 623D           5B                           pop bx
24058 623E           88C7                         mov bh, al
24059 6240           58                           pop ax
24060 6241           C3                           ret
24061                                           ! 2920 endasm
24062                                           !BCC_ENDASM
24063                                           ! 2921 #asm
24064                                           !BCC_ASM
24065                       00000008            _biosfn_write_teletype.flag	set	8
24066                       00000006            _biosfn_write_teletype.attr	set	6
24067                       00000004            _biosfn_write_teletype.page	set	4
24068                       00000002            _biosfn_write_teletype.car	set	2
24069                       00006242            biosfn_get_all_palette_reg:
24070 6242           50                           push ax
24071 6243           53                           push bx
24072 6244           51                           push cx
24073 6245           52                           push dx
24074 6246           89D3                         mov bx, dx
24075 6248           B1                     00    mov cl, #0x00
24076                       0000624A            get_palette_loop:
24077 624A           BA                   03DA    mov dx, # 0x3da
24078 624D           EC                           in al, dx
24079 624E           BA                   03C0    mov dx, # 0x3c0
24080 6251           88C8                         mov al, cl
24081 6253           EE                           out dx, al
24082 6254           BA                   03C1    mov dx, # 0x3c1
24083 6257           EC                           in al, dx
24084 6258           26                           seg es
24085 6259           8807                         mov [bx], al
24086 625B           43                           inc bx
24087 625C           FEC1                         inc cl
24088 625E           80F9                   10    cmp cl, #0x10
24089 6261           75           E7              jne get_palette_loop
24090 6263           BA                   03DA    mov dx, # 0x3da
24091 6266           EC                           in al, dx
24092 6267           BA                   03C0    mov dx, # 0x3c0
24093 626A           B0                     11    mov al, #0x11
24094 626C           EE                           out dx, al
24095 626D           BA                   03C1    mov dx, # 0x3c1
24096 6270           EC                           in al, dx
24097 6271           26                           seg es
24098 6272           8807                         mov [bx], al
24099 6274           BA                   03DA    mov dx, # 0x3da
24100 6277           EC                           in al, dx
24101 6278           BA                   03C0    mov dx, # 0x3c0
24102 627B           B0                     20    mov al, #0x20
24103 627D           EE                           out dx, al
24104 627E           5A                           pop dx
24105 627F           59                           pop cx
24106 6280           5B                           pop bx
24107 6281           58                           pop ax
24108 6282           C3                           ret
24109                                           ! 2962 endasm
24110                                           !BCC_ENDASM
24111                                           ! 2963 #asm
24112                                           !BCC_ASM
24113                       00000008            _biosfn_write_teletype.flag	set	8
24114                       00000006            _biosfn_write_teletype.attr	set	6
24115                       00000004            _biosfn_write_teletype.page	set	4
24116                       00000002            _biosfn_write_teletype.car	set	2
24117                       00006283            biosfn_set_single_dac_reg:
24118 6283           50                           push ax
24119 6284           52                           push dx
24120 6285           BA                   03C8    mov dx, # 0x3c8
24121 6288           88D8                         mov al, bl
24122 628A           EE                           out dx, al
24123 628B           BA                   03C9    mov dx, # 0x3c9
24124 628E           58                           pop ax
24125 628F           50                           push ax
24126 6290           88E0                         mov al, ah
24127 6292           EE                           out dx, al
24128 6293           88E8                         mov al, ch
24129 6295           EE                           out dx, al
24130 6296           88C8                         mov al, cl
24131 6298           EE                           out dx, al
24132 6299           5A                           pop dx
24133 629A           58                           pop ax
24134 629B           C3                           ret
24135                                           ! 2982 endasm
24136                                           !BCC_ENDASM
24137                                           ! 2983 #asm
24138                                           !BCC_ASM
24139                       00000008            _biosfn_write_teletype.flag	set	8
24140                       00000006            _biosfn_write_teletype.attr	set	6
24141                       00000004            _biosfn_write_teletype.page	set	4
24142                       00000002            _biosfn_write_teletype.car	set	2
24143                       0000629C            biosfn_set_all_dac_reg:
24144 629C           50                           push ax
24145 629D           53                           push bx
24146 629E           51                           push cx
24147 629F           52                           push dx
24148 62A0           BA                   03C8    mov dx, # 0x3c8
24149 62A3           88D8                         mov al, bl
24150 62A5           EE                           out dx, al
24151 62A6           5A                           pop dx
24152 62A7           52                           push dx
24153 62A8           89D3                         mov bx, dx
24154 62AA           BA                   03C9    mov dx, # 0x3c9
24155                       000062AD            set_dac_loop:
24156 62AD           26                           seg es
24157 62AE           8A07                         mov al, [bx]
24158 62B0           EE                           out dx, al
24159 62B1           43                           inc bx
24160 62B2           26                           seg es
24161 62B3           8A07                         mov al, [bx]
24162 62B5           EE                           out dx, al
24163 62B6           43                           inc bx
24164 62B7           26                           seg es
24165 62B8           8A07                         mov al, [bx]
24166 62BA           EE                           out dx, al
24167 62BB           43                           inc bx
24168 62BC           49                           dec cx
24169 62BD           75           EE              jnz set_dac_loop
24170 62BF           5A                           pop dx
24171 62C0           59                           pop cx
24172 62C1           5B                           pop bx
24173 62C2           58                           pop ax
24174 62C3           C3                           ret
24175                                           ! 3016 endasm
24176                                           !BCC_ENDASM
24177                                           ! 3017 #asm
24178                                           !BCC_ASM
24179                       00000008            _biosfn_write_teletype.flag	set	8
24180                       00000006            _biosfn_write_teletype.attr	set	6
24181                       00000004            _biosfn_write_teletype.page	set	4
24182                       00000002            _biosfn_write_teletype.car	set	2
24183                       000062C4            biosfn_select_video_dac_color_page:
24184 62C4           50                           push ax
24185 62C5           53                           push bx
24186 62C6           52                           push dx
24187 62C7           BA                   03DA    mov dx, # 0x3da
24188 62CA           EC                           in al, dx
24189 62CB           BA                   03C0    mov dx, # 0x3c0
24190 62CE           B0                     10    mov al, #0x10
24191 62D0           EE                           out dx, al
24192 62D1           BA                   03C1    mov dx, # 0x3c1
24193 62D4           EC                           in al, dx
24194 62D5           80E3                   01    and bl, #0x01
24195 62D8           75           0D              jnz set_dac_page
24196 62DA           24                     7F    and al, #0x7f
24197 62DC           C0E7                   07    shl bh, 7
24198 62DF           08F8                         or al, bh
24199 62E1           BA                   03C0    mov dx, # 0x3c0
24200 62E4           EE                           out dx, al
24201 62E5           EB           19              jmp set_actl_normal
24202                       000062E7            set_dac_page:
24203 62E7           50                           push ax
24204 62E8           BA                   03DA    mov dx, # 0x3da
24205 62EB           EC                           in al, dx
24206 62EC           BA                   03C0    mov dx, # 0x3c0
24207 62EF           B0                     14    mov al, #0x14
24208 62F1           EE                           out dx, al
24209 62F2           58                           pop ax
24210 62F3           24                     80    and al, #0x80
24211 62F5           75           03              jnz set_dac_16_page
24212 62F7           C0E7                   02    shl bh, 2
24213                       000062FA            set_dac_16_page:
24214 62FA           80E7                   0F    and bh, #0x0f
24215 62FD           88F8                         mov al, bh
24216 62FF           EE                           out dx, al
24217                       00006300            set_actl_normal:
24218 6300           B0                     20    mov al, #0x20
24219 6302           EE                           out dx, al
24220 6303           5A                           pop dx
24221 6304           5B                           pop bx
24222 6305           58                           pop ax
24223 6306           C3                           ret
24224                                           ! 3059 endasm
24225                                           !BCC_ENDASM
24226                                           ! 3060 #asm
24227                                           !BCC_ASM
24228                       00000008            _biosfn_write_teletype.flag	set	8
24229                       00000006            _biosfn_write_teletype.attr	set	6
24230                       00000004            _biosfn_write_teletype.page	set	4
24231                       00000002            _biosfn_write_teletype.car	set	2
24232                       00006307            biosfn_read_single_dac_reg:
24233 6307           50                           push ax
24234 6308           52                           push dx
24235 6309           BA                   03C7    mov dx, # 0x3c7
24236 630C           88D8                         mov al, bl
24237 630E           EE                           out dx, al
24238 630F           58                           pop ax
24239 6310           88C4                         mov ah, al
24240 6312           BA                   03C9    mov dx, # 0x3c9
24241 6315           EC                           in al, dx
24242 6316           86E0                         xchg al, ah
24243 6318           50                           push ax
24244 6319           EC                           in al, dx
24245 631A           88C5                         mov ch, al
24246 631C           EC                           in al, dx
24247 631D           88C1                         mov cl, al
24248 631F           5A                           pop dx
24249 6320           58                           pop ax
24250 6321           C3                           ret
24251                                           ! 3080 endasm
24252                                           !BCC_ENDASM
24253                                           ! 3081 #asm
24254                                           !BCC_ASM
24255                       00000008            _biosfn_write_teletype.flag	set	8
24256                       00000006            _biosfn_write_teletype.attr	set	6
24257                       00000004            _biosfn_write_teletype.page	set	4
24258                       00000002            _biosfn_write_teletype.car	set	2
24259                       00006322            biosfn_read_all_dac_reg:
24260 6322           50                           push ax
24261 6323           53                           push bx
24262 6324           51                           push cx
24263 6325           52                           push dx
24264 6326           BA                   03C7    mov dx, # 0x3c7
24265 6329           88D8                         mov al, bl
24266 632B           EE                           out dx, al
24267 632C           5A                           pop dx
24268 632D           52                           push dx
24269 632E           89D3                         mov bx, dx
24270 6330           BA                   03C9    mov dx, # 0x3c9
24271                       00006333            read_dac_loop:
24272 6333           EC                           in al, dx
24273 6334           26                           seg es
24274 6335           8807                         mov [bx], al
24275 6337           43                           inc bx
24276 6338           EC                           in al, dx
24277 6339           26                           seg es
24278 633A           8807                         mov [bx], al
24279 633C           43                           inc bx
24280 633D           EC                           in al, dx
24281 633E           26                           seg es
24282 633F           8807                         mov [bx], al
24283 6341           43                           inc bx
24284 6342           49                           dec cx
24285 6343           75           EE              jnz read_dac_loop
24286 6345           5A                           pop dx
24287 6346           59                           pop cx
24288 6347           5B                           pop bx
24289 6348           58                           pop ax
24290 6349           C3                           ret
24291                                           ! 3114 endasm
24292                                           !BCC_ENDASM
24293                                           ! 3115 #asm
24294                                           !BCC_ASM
24295                       00000008            _biosfn_write_teletype.flag	set	8
24296                       00000006            _biosfn_write_teletype.attr	set	6
24297                       00000004            _biosfn_write_teletype.page	set	4
24298                       00000002            _biosfn_write_teletype.car	set	2
24299                       0000634A            biosfn_set_pel_mask:
24300 634A           50                           push ax
24301 634B           52                           push dx
24302 634C           BA                   03C6    mov dx, # 0x3c6
24303 634F           88D8                         mov al, bl
24304 6351           EE                           out dx, al
24305 6352           5A                           pop dx
24306 6353           58                           pop ax
24307 6354           C3                           ret
24308                                           ! 3125 endasm
24309                                           !BCC_ENDASM
24310                                           ! 3126 #asm
24311                                           !BCC_ASM
24312                       00000008            _biosfn_write_teletype.flag	set	8
24313                       00000006            _biosfn_write_teletype.attr	set	6
24314                       00000004            _biosfn_write_teletype.page	set	4
24315                       00000002            _biosfn_write_teletype.car	set	2
24316                       00006355            biosfn_read_pel_mask:
24317 6355           50                           push ax
24318 6356           52                           push dx
24319 6357           BA                   03C6    mov dx, # 0x3c6
24320 635A           EC                           in al, dx
24321 635B           88C3                         mov bl, al
24322 635D           5A                           pop dx
24323 635E           58                           pop ax
24324 635F           C3                           ret
24325                                           ! 3136 endasm
24326                                           !BCC_ENDASM
24327                                           ! 3137 #asm
24328                                           !BCC_ASM
24329                       00000008            _biosfn_write_teletype.flag	set	8
24330                       00000006            _biosfn_write_teletype.attr	set	6
24331                       00000004            _biosfn_write_teletype.page	set	4
24332                       00000002            _biosfn_write_teletype.car	set	2
24333                       00006360            biosfn_read_video_dac_state:
24334 6360           50                           push ax
24335 6361           52                           push dx
24336 6362           BA                   03DA    mov dx, # 0x3da
24337 6365           EC                           in al, dx
24338 6366           BA                   03C0    mov dx, # 0x3c0
24339 6369           B0                     10    mov al, #0x10
24340 636B           EE                           out dx, al
24341 636C           BA                   03C1    mov dx, # 0x3c1
24342 636F           EC                           in al, dx
24343 6370           88C3                         mov bl, al
24344 6372           C0EB                   07    shr bl, 7
24345 6375           BA                   03DA    mov dx, # 0x3da
24346 6378           EC                           in al, dx
24347 6379           BA                   03C0    mov dx, # 0x3c0
24348 637C           B0                     14    mov al, #0x14
24349 637E           EE                           out dx, al
24350 637F           BA                   03C1    mov dx, # 0x3c1
24351 6382           EC                           in al, dx
24352 6383           88C7                         mov bh, al
24353 6385           80E7                   0F    and bh, #0x0f
24354 6388           F6C3                   01    test bl, #0x01
24355 638B           75           03              jnz get_dac_16_page
24356 638D           C0EF                   02    shr bh, 2
24357                       00006390            get_dac_16_page:
24358 6390           BA                   03DA    mov dx, # 0x3da
24359 6393           EC                           in al, dx
24360 6394           BA                   03C0    mov dx, # 0x3c0
24361 6397           B0                     20    mov al, #0x20
24362 6399           EE                           out dx, al
24363 639A           5A                           pop dx
24364 639B           58                           pop ax
24365 639C           C3                           ret
24366                                           ! 3171 endasm
24367                                           !BCC_ENDASM
24368                                           ! 3172 static void biosfn_perform_gray_scale_summing (start,count)
24369                                           ! Register BX used in function biosfn_write_teletype
24370                                           ! 3173 Bit16u start;Bit16u count;
24371                       0000639D            _biosfn_perform_gray_scale_summing:
24372                                           !BCC_EOS
24373                                           !BCC_EOS
24374                                           ! 3174 {Bit8u r,g,b;
24375                                           !BCC_EOS
24376                                           ! 3175  Bit16u i;
24377                                           !BCC_EOS
24378                                           ! 3176  Bit16u index;
24379                                           !BCC_EOS
24380                                           ! 3177  inb(0x3da);
24381 639D           55                         push	bp
24382 639E           89E5                       mov	bp,sp
24383 63A0           83C4                   F8  add	sp,*-8
24384                                           ! Debug: list int = const $3DA (used reg = )
24385 63A3           B8                   03DA  mov	ax,#$3DA
24386 63A6           50                         push	ax
24387                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24388 63A7           E8         1751            call	_inb
24389 63AA           44                         inc	sp
24390 63AB           44                         inc	sp
24391                                           !BCC_EOS
24392                                           ! 3178  outb(0x3c0,0x00);
24393                                           ! Debug: list int = const 0 (used reg = )
24394 63AC           31C0                       xor	ax,ax
24395 63AE           50                         push	ax
24396                                           ! Debug: list int = const $3C0 (used reg = )
24397 63AF           B8                   03C0  mov	ax,#$3C0
24398 63B2           50                         push	ax
24399                                           ! Debug: func () void = outb+0 (used reg = )
24400 63B3           E8         175B            call	_outb
24401 63B6           83C4                   04  add	sp,*4
24402                                           !BCC_EOS
24403                                           ! 3179  for( index = 0; index < count; index++ )
24404                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24405 63B9           31C0                       xor	ax,ax
24406 63BB           8946         F8            mov	-8[bp],ax
24407                                           !BCC_EOS
24408                                           !BCC_EOS
24409                                           ! 3180   {
24410 63BE           E9         00BE            br 	.1F7
24411                       000063C1            .1F8:
24412                                           ! 3181    outb(0x3c7,start);
24413                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24414 63C1           FF76         04            push	4[bp]
24415                                           ! Debug: list int = const $3C7 (used reg = )
24416 63C4           B8                   03C7  mov	ax,#$3C7
24417 63C7           50                         push	ax
24418                                           ! Debug: func () void = outb+0 (used reg = )
24419 63C8           E8         1746            call	_outb
24420 63CB           83C4                   04  add	sp,*4
24421                                           !BCC_EOS
24422                                           ! 3182    r=inb( 0x3c9 );
24423                                           ! Debug: list int = const $3C9 (used reg = )
24424 63CE           B8                   03C9  mov	ax,#$3C9
24425 63D1           50                         push	ax
24426                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24427 63D2           E8         1726            call	_inb
24428 63D5           44                         inc	sp
24429 63D6           44                         inc	sp
24430                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24431 63D7           8846         FF            mov	-1[bp],al
24432                                           !BCC_EOS
24433                                           ! 3183    g=inb( 0x3c9 );
24434                                           ! Debug: list int = const $3C9 (used reg = )
24435 63DA           B8                   03C9  mov	ax,#$3C9
24436 63DD           50                         push	ax
24437                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24438 63DE           E8         171A            call	_inb
24439 63E1           44                         inc	sp
24440 63E2           44                         inc	sp
24441                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24442 63E3           8846         FE            mov	-2[bp],al
24443                                           !BCC_EOS
24444                                           ! 3184    b=inb( 0x3c9 );
24445                                           ! Debug: list int = const $3C9 (used reg = )
24446 63E6           B8                   03C9  mov	ax,#$3C9
24447 63E9           50                         push	ax
24448                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24449 63EA           E8         170E            call	_inb
24450 63ED           44                         inc	sp
24451 63EE           44                         inc	sp
24452                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24453 63EF           8846         FD            mov	-3[bp],al
24454                                           !BCC_EOS
24455                                           ! 3185    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24456                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24457                                           ! Debug: expression subtree swapping
24458 63F2           8A46         FD            mov	al,-3[bp]
24459 63F5           30E4                       xor	ah,ah
24460 63F7           B9                   001C  mov	cx,*$1C
24461 63FA           F7E9                       imul	cx
24462 63FC           50                         push	ax
24463                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24464                                           ! Debug: expression subtree swapping
24465 63FD           8A46         FE            mov	al,-2[bp]
24466 6400           30E4                       xor	ah,ah
24467 6402           B9                   0097  mov	cx,#$97
24468 6405           F7E9                       imul	cx
24469 6407           50                         push	ax
24470                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24471                                           ! Debug: expression subtree swapping
24472 6408           8A46         FF            mov	al,-1[bp]
24473 640B           30E4                       xor	ah,ah
24474 640D           B9                   004D  mov	cx,*$4D
24475 6410           F7E9                       imul	cx
24476                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24477 6412           0346         F4            add	ax,-$C[bp]
24478 6415           44                         inc	sp
24479 6416           44                         inc	sp
24480                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24481 6417           0346         F6            add	ax,-$A[bp]
24482 641A           44                         inc	sp
24483 641B           44                         inc	sp
24484                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24485                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24486 641C           05                   0080  add	ax,#$80
24487 641F           88E0                       mov	al,ah
24488 6421           30E4                       xor	ah,ah
24489                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24490 6423           8946         FA            mov	-6[bp],ax
24491                                           !BCC_EOS
24492                                           ! 3186    if(i>0x3f)i=0x3f;
24493                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24494 6426           8B46         FA            mov	ax,-6[bp]
24495 6429           3D                   003F  cmp	ax,*$3F
24496 642C           76           06            jbe 	.1F9
24497                       0000642E            .1FA:
24498                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24499 642E           B8                   003F  mov	ax,*$3F
24500 6431           8946         FA            mov	-6[bp],ax
24501                                           !BCC_EOS
24502                                           ! 3187    outb(0x3c8,start);
24503                       00006434            .1F9:
24504                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24505 6434           FF76         04            push	4[bp]
24506                                           ! Debug: list int = const $3C8 (used reg = )
24507 6437           B8                   03C8  mov	ax,#$3C8
24508 643A           50                         push	ax
24509                                           ! Debug: func () void = outb+0 (used reg = )
24510 643B           E8         16D3            call	_outb
24511 643E           83C4                   04  add	sp,*4
24512                                           !BCC_EOS
24513                                           ! 3188    outb( 0x3c9, i&0xff );
24514                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24515 6441           8A46         FA            mov	al,-6[bp]
24516                                           ! Debug: list unsigned char = al+0 (used reg = )
24517 6444           30E4                       xor	ah,ah
24518 6446           50                         push	ax
24519                                           ! Debug: list int = const $3C9 (used reg = )
24520 6447           B8                   03C9  mov	ax,#$3C9
24521 644A           50                         push	ax
24522                                           ! Debug: func () void = outb+0 (used reg = )
24523 644B           E8         16C3            call	_outb
24524 644E           83C4                   04  add	sp,*4
24525                                           !BCC_EOS
24526                                           ! 3189    outb( 0x3c9, i&0xff );
24527                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24528 6451           8A46         FA            mov	al,-6[bp]
24529                                           ! Debug: list unsigned char = al+0 (used reg = )
24530 6454           30E4                       xor	ah,ah
24531 6456           50                         push	ax
24532                                           ! Debug: list int = const $3C9 (used reg = )
24533 6457           B8                   03C9  mov	ax,#$3C9
24534 645A           50                         push	ax
24535                                           ! Debug: func () void = outb+0 (used reg = )
24536 645B           E8         16B3            call	_outb
24537 645E           83C4                   04  add	sp,*4
24538                                           !BCC_EOS
24539                                           ! 3190    outb( 0x3c9, i&0xff );
24540                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24541 6461           8A46         FA            mov	al,-6[bp]
24542                                           ! Debug: list unsigned char = al+0 (used reg = )
24543 6464           30E4                       xor	ah,ah
24544 6466           50                         push	ax
24545                                           ! Debug: list int = const $3C9 (used reg = )
24546 6467           B8                   03C9  mov	ax,#$3C9
24547 646A           50                         push	ax
24548                                           ! Debug: func () void = outb+0 (used reg = )
24549 646B           E8         16A3            call	_outb
24550 646E           83C4                   04  add	sp,*4
24551                                           !BCC_EOS
24552                                           ! 3191    start++;
24553                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24554 6471           8B46         04            mov	ax,4[bp]
24555 6474           40                         inc	ax
24556 6475           8946         04            mov	4[bp],ax
24557                                           !BCC_EOS
24558                                           ! 3192   }
24559                                           ! 3193  inb(0x3da);
24560                       00006478            .1F6:
24561                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
24562 6478           8B46         F8            mov	ax,-8[bp]
24563 647B           40                         inc	ax
24564 647C           8946         F8            mov	-8[bp],ax
24565                       0000647F            .1F7:
24566                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
24567 647F           8B46         F8            mov	ax,-8[bp]
24568 6482           3B46         06            cmp	ax,6[bp]
24569 6485         0F82         FF38            blo 	.1F8
24570                       00006489            .1FB:
24571                       00006489            .1F5:
24572                                           ! Debug: list int = const $3DA (used reg = )
24573 6489           B8                   03DA  mov	ax,#$3DA
24574 648C           50                         push	ax
24575                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24576 648D           E8         166B            call	_inb
24577 6490           44                         inc	sp
24578 6491           44                         inc	sp
24579                                           !BCC_EOS
24580                                           ! 3194  outb(0x3c0,0x20);
24581                                           ! Debug: list int = const $20 (used reg = )
24582 6492           B8                   0020  mov	ax,*$20
24583 6495           50                         push	ax
24584                                           ! Debug: list int = const $3C0 (used reg = )
24585 6496           B8                   03C0  mov	ax,#$3C0
24586 6499           50                         push	ax
24587                                           ! Debug: func () void = outb+0 (used reg = )
24588 649A           E8         1674            call	_outb
24589 649D           83C4                   04  add	sp,*4
24590                                           !BCC_EOS
24591                                           ! 3195 }
24592 64A0           89EC                       mov	sp,bp
24593 64A2           5D                         pop	bp
24594 64A3           C3                         ret
24595                                           ! 3196 static void get_font_access()
24596                                           ! 3197 {
24597                       000064A4            _get_font_access:
24598                                           ! 3198 #asm
24599                                           !BCC_ASM
24600 64A4           BA                   03C4   mov dx, # 0x3c4
24601 64A7           B8                   0100   mov ax, #0x0100
24602 64AA           EF                          out dx, ax
24603 64AB           B8                   0402   mov ax, #0x0402
24604 64AE           EF                          out dx, ax
24605 64AF           B8                   0704   mov ax, #0x0704
24606 64B2           EF                          out dx, ax
24607 64B3           B8                   0300   mov ax, #0x0300
24608 64B6           EF                          out dx, ax
24609 64B7           BA                   03CE   mov dx, # 0x3ce
24610 64BA           B8                   0204   mov ax, #0x0204
24611 64BD           EF                          out dx, ax
24612 64BE           B8                   0005   mov ax, #0x0005
24613 64C1           EF                          out dx, ax
24614 64C2           B8                   0406   mov ax, #0x0406
24615 64C5           EF                          out dx, ax
24616                                           ! 3215 endasm
24617                                           !BCC_ENDASM
24618                                           ! 3216 }
24619 64C6           C3                         ret
24620                                           ! 3217 static void release_font_access()
24621                                           ! 3218 {
24622                       000064C7            _release_font_access:
24623                                           ! 3219 #asm
24624                                           !BCC_ASM
24625 64C7           BA                   03C4   mov dx, # 0x3c4
24626 64CA           B8                   0100   mov ax, #0x0100
24627 64CD           EF                          out dx, ax
24628 64CE           B8                   0302   mov ax, #0x0302
24629 64D1           EF                          out dx, ax
24630 64D2           B8                   0304   mov ax, #0x0304
24631 64D5           EF                          out dx, ax
24632 64D6           B8                   0300   mov ax, #0x0300
24633 64D9           EF                          out dx, ax
24634 64DA           BA                   03CC   mov dx, # 0x3cc
24635 64DD           EC                          in al, dx
24636 64DE           24                     01   and al, #0x01
24637 64E0           C0E0                   02   shl al, 2
24638 64E3           0C                     0A   or al, #0x0a
24639 64E5           88C4                        mov ah, al
24640 64E7           B0                     06   mov al, #0x06
24641 64E9           BA                   03CE   mov dx, # 0x3ce
24642 64EC           EF                          out dx, ax
24643 64ED           B8                   0004   mov ax, #0x0004
24644 64F0           EF                          out dx, ax
24645 64F1           B8                   1005   mov ax, #0x1005
24646 64F4           EF                          out dx, ax
24647                                           ! 3242 endasm
24648                                           !BCC_ENDASM
24649                                           ! 3243 }
24650 64F5           C3                         ret
24651                                           ! 3244 #asm
24652                                           !BCC_ASM
24653                       000064F6            idiv_u:
24654 64F6           31D2                         xor dx,dx
24655 64F8           F7F3                         div bx
24656 64FA           C3                           ret
24657                                           ! 3249 endasm
24658                                           !BCC_ENDASM
24659                                           ! 3250 static void set_scan_lines(lines) Bit8u lines;
24660                       000064FB            _set_scan_lines:
24661                                           !BCC_EOS
24662                                           ! 3251 {
24663                                           ! 3252  Bit16u crtc_addr,cols,page,vde;
24664                                           !BCC_EOS
24665                                           ! 3253  Bit8u crtc_r9,ovl,rows;
24666                                           !BCC_EOS
24667                                           ! 3254  crtc_addr = read_word(0x40,0x63);
24668 64FB           55                         push	bp
24669 64FC           89E5                       mov	bp,sp
24670 64FE           83C4                   F4  add	sp,*-$C
24671                                           ! Debug: list int = const $63 (used reg = )
24672 6501           B8                   0063  mov	ax,*$63
24673 6504           50                         push	ax
24674                                           ! Debug: list int = const $40 (used reg = )
24675 6505           B8                   0040  mov	ax,*$40
24676 6508           50                         push	ax
24677                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24678 6509           E8         15AC            call	_read_word
24679 650C           83C4                   04  add	sp,*4
24680                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24681 650F           8946         FE            mov	-2[bp],ax
24682                                           !BCC_EOS
24683                                           ! 3255  outb(crtc_addr, 0x09);
24684                                           ! Debug: list int = const 9 (used reg = )
24685 6512           B8                   0009  mov	ax,*9
24686 6515           50                         push	ax
24687                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24688 6516           FF76         FE            push	-2[bp]
24689                                           ! Debug: func () void = outb+0 (used reg = )
24690 6519           E8         15F5            call	_outb
24691 651C           83C4                   04  add	sp,*4
24692                                           !BCC_EOS
24693                                           ! 3256  crtc_r9 = inb(crtc_addr+1);
24694                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24695 651F           8B46         FE            mov	ax,-2[bp]
24696                                           ! Debug: list unsigned int = ax+1 (used reg = )
24697 6522           40                         inc	ax
24698 6523           50                         push	ax
24699                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24700 6524           E8         15D4            call	_inb
24701 6527           44                         inc	sp
24702 6528           44                         inc	sp
24703                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24704 6529           8846         F7            mov	-9[bp],al
24705                                           !BCC_EOS
24706                                           ! 3257  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
24707                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
24708 652C           8A46         04            mov	al,4[bp]
24709 652F           30E4                       xor	ah,ah
24710 6531           48                         dec	ax
24711 6532           50                         push	ax
24712                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
24713 6533           8A46         F7            mov	al,-9[bp]
24714 6536           24                     E0  and	al,#$E0
24715                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
24716 6538           30E4                       xor	ah,ah
24717 653A           0B46         F2            or	ax,-$E[bp]
24718 653D           44                         inc	sp
24719 653E           44                         inc	sp
24720                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24721 653F           8846         F7            mov	-9[bp],al
24722                                           !BCC_EOS
24723                                           ! 3258  outb(crtc_addr+1, crtc_r9);
24724                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24725 6542           8A46         F7            mov	al,-9[bp]
24726 6545           30E4                       xor	ah,ah
24727 6547           50                         push	ax
24728                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
24729 6548           8B46         FE            mov	ax,-2[bp]
24730                                           ! Debug: list unsigned int = ax+1 (used reg = )
24731 654B           40                         inc	ax
24732 654C           50                         push	ax
24733                                           ! Debug: func () void = outb+0 (used reg = )
24734 654D           E8         15C1            call	_outb
24735 6550           83C4                   04  add	sp,*4
24736                                           !BCC_EOS
24737                                           ! 3259  if(lines==8)
24738                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
24739 6553           8A46         04            mov	al,4[bp]
24740 6556           3C                     08  cmp	al,*8
24741 6558           75           10            jne 	.1FC
24742                       0000655A            .1FD:
24743                                           ! 3260   {
24744                                           ! 3261    biosfn_set_cursor_shape(0x06,0x07);
24745                                           ! Debug: list int = const 7 (used reg = )
24746 655A           B8                   0007  mov	ax,*7
24747 655D           50                         push	ax
24748                                           ! Debug: list int = const 6 (used reg = )
24749 655E           B8                   0006  mov	ax,*6
24750 6561           50                         push	ax
24751                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24752 6562           E8         DBE0            call	_biosfn_set_cursor_shape
24753 6565           83C4                   04  add	sp,*4
24754                                           !BCC_EOS
24755                                           ! 3262   }
24756                                           ! 3263  else
24757                                           ! 3264   {
24758 6568           EB           18            jmp .1FE
24759                       0000656A            .1FC:
24760                                           ! 3265    biosfn_set_cursor_shape(lines-4,lines-3);
24761                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
24762 656A           8A46         04            mov	al,4[bp]
24763 656D           30E4                       xor	ah,ah
24764                                           ! Debug: list unsigned int = ax-3 (used reg = )
24765 656F           05                   FFFD  add	ax,*-3
24766 6572           50                         push	ax
24767                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
24768 6573           8A46         04            mov	al,4[bp]
24769 6576           30E4                       xor	ah,ah
24770                                           ! Debug: list unsigned int = ax-4 (used reg = )
24771 6578           05                   FFFC  add	ax,*-4
24772 657B           50                         push	ax
24773                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24774 657C           E8         DBC6            call	_biosfn_set_cursor_shape
24775 657F           83C4                   04  add	sp,*4
24776                                           !BCC_EOS
24777                                           ! 3266   }
24778                                           ! 3267  write_word(0x40,0x85, lines);
24779                       00006582            .1FE:
24780                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
24781 6582           8A46         04            mov	al,4[bp]
24782 6585           30E4                       xor	ah,ah
24783 6587           50                         push	ax
24784                                           ! Debug: list int = const $85 (used reg = )
24785 6588           B8                   0085  mov	ax,#$85
24786 658B           50                         push	ax
24787                                           ! Debug: list int = const $40 (used reg = )
24788 658C           B8                   0040  mov	ax,*$40
24789 658F           50                         push	ax
24790                                           ! Debug: func () void = write_word+0 (used reg = )
24791 6590           E8         1550            call	_write_word
24792 6593           83C4                   06  add	sp,*6
24793                                           !BCC_EOS
24794                                           ! 3268  outb(crtc_addr, 0x12);
24795                                           ! Debug: list int = const $12 (used reg = )
24796 6596           B8                   0012  mov	ax,*$12
24797 6599           50                         push	ax
24798                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24799 659A           FF76         FE            push	-2[bp]
24800                                           ! Debug: func () void = outb+0 (used reg = )
24801 659D           E8         1571            call	_outb
24802 65A0           83C4                   04  add	sp,*4
24803                                           !BCC_EOS
24804                                           ! 3269  vde = inb(crtc_addr+1);
24805                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24806 65A3           8B46         FE            mov	ax,-2[bp]
24807                                           ! Debug: list unsigned int = ax+1 (used reg = )
24808 65A6           40                         inc	ax
24809 65A7           50                         push	ax
24810                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24811 65A8           E8         1550            call	_inb
24812 65AB           44                         inc	sp
24813 65AC           44                         inc	sp
24814                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
24815 65AD           30E4                       xor	ah,ah
24816 65AF           8946         F8            mov	-8[bp],ax
24817                                           !BCC_EOS
24818                                           ! 3270  outb(crtc_addr, 0x07);
24819                                           ! Debug: list int = const 7 (used reg = )
24820 65B2           B8                   0007  mov	ax,*7
24821 65B5           50                         push	ax
24822                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24823 65B6           FF76         FE            push	-2[bp]
24824                                           ! Debug: func () void = outb+0 (used reg = )
24825 65B9           E8         1555            call	_outb
24826 65BC           83C4                   04  add	sp,*4
24827                                           !BCC_EOS
24828                                           ! 3271  ovl = inb(crtc_addr+1);
24829                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24830 65BF           8B46         FE            mov	ax,-2[bp]
24831                                           ! Debug: list unsigned int = ax+1 (used reg = )
24832 65C2           40                         inc	ax
24833 65C3           50                         push	ax
24834                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24835 65C4           E8         1534            call	_inb
24836 65C7           44                         inc	sp
24837 65C8           44                         inc	sp
24838                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
24839 65C9           8846         F6            mov	-$A[bp],al
24840                                           !BCC_EOS
24841                                           ! 3272  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
24842                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
24843 65CC           8A46         F6            mov	al,-$A[bp]
24844 65CF           24                     40  and	al,*$40
24845                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
24846 65D1           30E4                       xor	ah,ah
24847 65D3           B1                     03  mov	cl,*3
24848 65D5           D3E0                       shl	ax,cl
24849 65D7           50                         push	ax
24850                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
24851 65D8           8A46         F6            mov	al,-$A[bp]
24852 65DB           24                     02  and	al,*2
24853                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
24854 65DD           30E4                       xor	ah,ah
24855 65DF           B1                     07  mov	cl,*7
24856 65E1           D3E0                       shl	ax,cl
24857                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
24858 65E3           0346         F2            add	ax,-$E[bp]
24859 65E6           44                         inc	sp
24860 65E7           44                         inc	sp
24861                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24862                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
24863 65E8           40                         inc	ax
24864 65E9           0346         F8            add	ax,-8[bp]
24865 65EC           8946         F8            mov	-8[bp],ax
24866                                           !BCC_EOS
24867                                           ! 3273  rows = vde / lines;
24868                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
24869 65EF           8A46         04            mov	al,4[bp]
24870 65F2           30E4                       xor	ah,ah
24871 65F4           89C3                       mov	bx,ax
24872 65F6           8B46         F8            mov	ax,-8[bp]
24873 65F9           E8         FEFA            call	idiv_u
24874                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
24875 65FC           8846         F5            mov	-$B[bp],al
24876                                           !BCC_EOS
24877                                           ! 3274  write_byte(0x40,0x84, rows-1);
24878                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
24879 65FF           8A46         F5            mov	al,-$B[bp]
24880 6602           30E4                       xor	ah,ah
24881                                           ! Debug: list unsigned int = ax-1 (used reg = )
24882 6604           48                         dec	ax
24883 6605           50                         push	ax
24884                                           ! Debug: list int = const $84 (used reg = )
24885 6606           B8                   0084  mov	ax,#$84
24886 6609           50                         push	ax
24887                                           ! Debug: list int = const $40 (used reg = )
24888 660A           B8                   0040  mov	ax,*$40
24889 660D           50                         push	ax
24890                                           ! Debug: func () void = write_byte+0 (used reg = )
24891 660E           E8         14BA            call	_write_byte
24892 6611           83C4                   06  add	sp,*6
24893                                           !BCC_EOS
24894                                           ! 3275  cols = read_word(0x40,0x4A);
24895                                           ! Debug: list int = const $4A (used reg = )
24896 6614           B8                   004A  mov	ax,*$4A
24897 6617           50                         push	ax
24898                                           ! Debug: list int = const $40 (used reg = )
24899 6618           B8                   0040  mov	ax,*$40
24900 661B           50                         push	ax
24901                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24902 661C           E8         1499            call	_read_word
24903 661F           83C4                   04  add	sp,*4
24904                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
24905 6622           8946         FC            mov	-4[bp],ax
24906                                           !BCC_EOS
24907                                           ! 3276  write_word(0x40,0x4C, rows * cols * 2);
24908                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
24909 6625           8A46         F5            mov	al,-$B[bp]
24910 6628           30E4                       xor	ah,ah
24911 662A           8B4E         FC            mov	cx,-4[bp]
24912 662D           F7E9                       imul	cx
24913                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24914 662F           D1E0                       shl	ax,*1
24915                                           ! Debug: list unsigned int = ax+0 (used reg = )
24916 6631           50                         push	ax
24917                                           ! Debug: list int = const $4C (used reg = )
24918 6632           B8                   004C  mov	ax,*$4C
24919 6635           50                         push	ax
24920                                           ! Debug: list int = const $40 (used reg = )
24921 6636           B8                   0040  mov	ax,*$40
24922 6639           50                         push	ax
24923                                           ! Debug: func () void = write_word+0 (used reg = )
24924 663A           E8         14A6            call	_write_word
24925 663D           83C4                   06  add	sp,*6
24926                                           !BCC_EOS
24927                                           ! 3277 }
24928 6640           89EC                       mov	sp,bp
24929 6642           5D                         pop	bp
24930 6643           C3                         ret
24931                                           ! 3278 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
24932                                           ! Register BX used in function set_scan_lines
24933                       00006644            _biosfn_load_text_user_pat:
24934                                           !BCC_EOS
24935                                           !BCC_EOS
24936                                           !BCC_EOS
24937                                           !BCC_EOS
24938                                           !BCC_EOS
24939                                           !BCC_EOS
24940                                           !BCC_EOS
24941                                           ! 3279 {
24942                                           ! 3280  Bit16u blockaddr,dest,i,src;
24943                                           !BCC_EOS
24944                                           ! 3281  get_font_access();
24945 6644           55                         push	bp
24946 6645           89E5                       mov	bp,sp
24947 6647           83C4                   F8  add	sp,*-8
24948                                           ! Debug: func () void = get_font_access+0 (used reg = )
24949 664A           E8         FE57            call	_get_font_access
24950                                           !BCC_EOS
24951                                           ! 3282  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
24952                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
24953 664D           8A46         0E            mov	al,$E[bp]
24954 6650           24                     04  and	al,*4
24955                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
24956 6652           30E4                       xor	ah,ah
24957 6654           88C4                       mov	ah,al
24958 6656           30C0                       xor	al,al
24959 6658           B1                     03  mov	cl,*3
24960 665A           D3E0                       shl	ax,cl
24961 665C           50                         push	ax
24962                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
24963 665D           8A46         0E            mov	al,$E[bp]
24964 6660           24                     03  and	al,*3
24965                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
24966 6662           30E4                       xor	ah,ah
24967 6664           88C4                       mov	ah,al
24968 6666           30C0                       xor	al,al
24969 6668           B1                     06  mov	cl,*6
24970 666A           D3E0                       shl	ax,cl
24971                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24972 666C           0346         F6            add	ax,-$A[bp]
24973 666F           44                         inc	sp
24974 6670           44                         inc	sp
24975                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
24976 6671           8946         FE            mov	-2[bp],ax
24977                                           !BCC_EOS
24978                                           ! 3283  for(i=0;i<CX;i++)
24979                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
24980 6674           31C0                       xor	ax,ax
24981 6676           8946         FA            mov	-6[bp],ax
24982                                           !BCC_EOS
24983                                           !BCC_EOS
24984                                           ! 3284   {
24985 6679           EB           44            jmp .201
24986                       0000667B            .202:
24987                                           ! 3285    src = BP + i * BH;
24988                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
24989 667B           8A46         10            mov	al,$10[bp]
24990 667E           30E4                       xor	ah,ah
24991 6680           89C3                       mov	bx,ax
24992 6682           8B46         FA            mov	ax,-6[bp]
24993 6685           89D9                       mov	cx,bx
24994 6687           F7E9                       imul	cx
24995                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
24996                                           ! Debug: expression subtree swapping
24997 6689           0346         08            add	ax,8[bp]
24998                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
24999 668C           8946         F8            mov	-8[bp],ax
25000                                           !BCC_EOS
25001                                           ! 3286    dest = blockaddr + (DX + i) * 32;
25002                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25003 668F           8B46         0C            mov	ax,$C[bp]
25004 6692           0346         FA            add	ax,-6[bp]
25005                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25006 6695           B1                     05  mov	cl,*5
25007 6697           D3E0                       shl	ax,cl
25008                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25009                                           ! Debug: expression subtree swapping
25010 6699           0346         FE            add	ax,-2[bp]
25011                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25012 669C           8946         FC            mov	-4[bp],ax
25013                                           !BCC_EOS
25014                                           ! 3287    memcpyb(0xA000, dest, ES, src, BH);
25015                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25016 669F           8A46         10            mov	al,$10[bp]
25017 66A2           30E4                       xor	ah,ah
25018 66A4           50                         push	ax
25019                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25020 66A5           FF76         F8            push	-8[bp]
25021                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25022 66A8           FF76         06            push	6[bp]
25023                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25024 66AB           FF76         FC            push	-4[bp]
25025                                           ! Debug: list unsigned int = const $A000 (used reg = )
25026 66AE           B8                   A000  mov	ax,#$A000
25027 66B1           50                         push	ax
25028                                           ! Debug: func () void = memcpyb+0 (used reg = )
25029 66B2           E8         1390            call	_memcpyb
25030 66B5           83C4                   0A  add	sp,*$A
25031                                           !BCC_EOS
25032                                           ! 3288   }
25033                                           ! 3289  release_font_access();
25034                       000066B8            .200:
25035                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25036 66B8           8B46         FA            mov	ax,-6[bp]
25037 66BB           40                         inc	ax
25038 66BC           8946         FA            mov	-6[bp],ax
25039                       000066BF            .201:
25040                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25041 66BF           8B46         FA            mov	ax,-6[bp]
25042 66C2           3B46         0A            cmp	ax,$A[bp]
25043 66C5           72           B4            jb 	.202
25044                       000066C7            .203:
25045                       000066C7            .1FF:
25046                                           ! Debug: func () void = release_font_access+0 (used reg = )
25047 66C7           E8         FDFD            call	_release_font_access
25048                                           !BCC_EOS
25049                                           ! 3290  if(AL>=0x10)
25050                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25051 66CA           8A46         04            mov	al,4[bp]
25052 66CD           3C                     10  cmp	al,*$10
25053 66CF           72           0B            jb  	.204
25054                       000066D1            .205:
25055                                           ! 3291   {
25056                                           ! 3292    set_scan_lines(BH);
25057                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25058 66D1           8A46         10            mov	al,$10[bp]
25059 66D4           30E4                       xor	ah,ah
25060 66D6           50                         push	ax
25061                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25062 66D7           E8         FE21            call	_set_scan_lines
25063 66DA           44                         inc	sp
25064 66DB           44                         inc	sp
25065                                           !BCC_EOS
25066                                           ! 3293   }
25067                                           ! 3294 }
25068                       000066DC            .204:
25069 66DC           89EC                       mov	sp,bp
25070 66DE           5D                         pop	bp
25071 66DF           C3                         ret
25072                                           ! 3295 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25073                                           ! Register BX used in function biosfn_load_text_user_pat
25074                       000066E0            _biosfn_load_text_8_14_pat:
25075                                           !BCC_EOS
25076                                           !BCC_EOS
25077                                           ! 3296 {
25078                                           ! 3297  Bit16u blockaddr,dest,i,src;
25079                                           !BCC_EOS
25080                                           ! 3298  get_font_access();
25081 66E0           55                         push	bp
25082 66E1           89E5                       mov	bp,sp
25083 66E3           83C4                   F8  add	sp,*-8
25084                                           ! Debug: func () void = get_font_access+0 (used reg = )
25085 66E6           E8         FDBB            call	_get_font_access
25086                                           !BCC_EOS
25087                                           ! 3299  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25088                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25089 66E9           8A46         06            mov	al,6[bp]
25090 66EC           24                     04  and	al,*4
25091                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25092 66EE           30E4                       xor	ah,ah
25093 66F0           88C4                       mov	ah,al
25094 66F2           30C0                       xor	al,al
25095 66F4           B1                     03  mov	cl,*3
25096 66F6           D3E0                       shl	ax,cl
25097 66F8           50                         push	ax
25098                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25099 66F9           8A46         06            mov	al,6[bp]
25100 66FC           24                     03  and	al,*3
25101                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25102 66FE           30E4                       xor	ah,ah
25103 6700           88C4                       mov	ah,al
25104 6702           30C0                       xor	al,al
25105 6704           B1                     06  mov	cl,*6
25106 6706           D3E0                       shl	ax,cl
25107                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25108 6708           0346         F6            add	ax,-$A[bp]
25109 670B           44                         inc	sp
25110 670C           44                         inc	sp
25111                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25112 670D           8946         FE            mov	-2[bp],ax
25113                                           !BCC_EOS
25114                                           ! 3300  for(i=0;i<0x100;i++)
25115                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25116 6710           31C0                       xor	ax,ax
25117 6712           8946         FA            mov	-6[bp],ax
25118                                           !BCC_EOS
25119                                           !BCC_EOS
25120                                           ! 3301   {
25121 6715           EB           41            jmp .208
25122                       00006717            .209:
25123                                           ! 3302    src = i * 14;
25124                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25125 6717           8B46         FA            mov	ax,-6[bp]
25126 671A           89C2                       mov	dx,ax
25127 671C           B1                     03  mov	cl,*3
25128 671E           D3E0                       shl	ax,cl
25129 6720           29D0                       sub	ax,dx
25130 6722           D1E0                       shl	ax,*1
25131                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25132 6724           8946         F8            mov	-8[bp],ax
25133                                           !BCC_EOS
25134                                           ! 3303    dest = blockaddr + i * 32;
25135                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25136 6727           8B46         FA            mov	ax,-6[bp]
25137 672A           B1                     05  mov	cl,*5
25138 672C           D3E0                       shl	ax,cl
25139                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25140                                           ! Debug: expression subtree swapping
25141 672E           0346         FE            add	ax,-2[bp]
25142                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25143 6731           8946         FC            mov	-4[bp],ax
25144                                           !BCC_EOS
25145                                           ! 3304    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25146                                           ! Debug: list int = const $E (used reg = )
25147 6734           B8                   000E  mov	ax,*$E
25148 6737           50                         push	ax
25149                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25150 6738           8B5E         F8            mov	bx,-8[bp]
25151                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25152                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25153 673B           81C3                 1740  add	bx,#_vgafont14
25154 673F           53                         push	bx
25155                                           ! Debug: list unsigned int = const $C000 (used reg = )
25156 6740           B8                   C000  mov	ax,#$C000
25157 6743           50                         push	ax
25158                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25159 6744           FF76         FC            push	-4[bp]
25160                                           ! Debug: list unsigned int = const $A000 (used reg = )
25161 6747           B8                   A000  mov	ax,#$A000
25162 674A           50                         push	ax
25163                                           ! Debug: func () void = memcpyb+0 (used reg = )
25164 674B           E8         12F7            call	_memcpyb
25165 674E           83C4                   0A  add	sp,*$A
25166                                           !BCC_EOS
25167                                           ! 3305   }
25168                                           ! 3306  release_font_access();
25169                       00006751            .207:
25170                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25171 6751           8B46         FA            mov	ax,-6[bp]
25172 6754           40                         inc	ax
25173 6755           8946         FA            mov	-6[bp],ax
25174                       00006758            .208:
25175                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25176 6758           8B46         FA            mov	ax,-6[bp]
25177 675B           3D                   0100  cmp	ax,#$100
25178 675E           72           B7            jb 	.209
25179                       00006760            .20A:
25180                       00006760            .206:
25181                                           ! Debug: func () void = release_font_access+0 (used reg = )
25182 6760           E8         FD64            call	_release_font_access
25183                                           !BCC_EOS
25184                                           ! 3307  if(AL>=0x10)
25185                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25186 6763           8A46         04            mov	al,4[bp]
25187 6766           3C                     10  cmp	al,*$10
25188 6768           72           09            jb  	.20B
25189                       0000676A            .20C:
25190                                           ! 3308   {
25191                                           ! 3309    set_scan_lines(14);
25192                                           ! Debug: list int = const $E (used reg = )
25193 676A           B8                   000E  mov	ax,*$E
25194 676D           50                         push	ax
25195                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25196 676E           E8         FD8A            call	_set_scan_lines
25197 6771           44                         inc	sp
25198 6772           44                         inc	sp
25199                                           !BCC_EOS
25200                                           ! 3310   }
25201                                           ! 3311 }
25202                       00006773            .20B:
25203 6773           89EC                       mov	sp,bp
25204 6775           5D                         pop	bp
25205 6776           C3                         ret
25206                                           ! 3312 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u B
25207                                           ! Register BX used in function biosfn_load_text_8_14_pat
25208                       00006777            _biosfn_load_text_8_8_pat:
25209                                           !BCC_EOS
25210                                           ! 3312 L;
25211                                           !BCC_EOS
25212                                           ! 3313 {
25213                                           ! 3314  Bit16u blockaddr,dest,i,src;
25214                                           !BCC_EOS
25215                                           ! 3315  get_font_access();
25216 6777           55                         push	bp
25217 6778           89E5                       mov	bp,sp
25218 677A           83C4                   F8  add	sp,*-8
25219                                           ! Debug: func () void = get_font_access+0 (used reg = )
25220 677D           E8         FD24            call	_get_font_access
25221                                           !BCC_EOS
25222                                           ! 3316  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25223                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25224 6780           8A46         06            mov	al,6[bp]
25225 6783           24                     04  and	al,*4
25226                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25227 6785           30E4                       xor	ah,ah
25228 6787           88C4                       mov	ah,al
25229 6789           30C0                       xor	al,al
25230 678B           B1                     03  mov	cl,*3
25231 678D           D3E0                       shl	ax,cl
25232 678F           50                         push	ax
25233                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25234 6790           8A46         06            mov	al,6[bp]
25235 6793           24                     03  and	al,*3
25236                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25237 6795           30E4                       xor	ah,ah
25238 6797           88C4                       mov	ah,al
25239 6799           30C0                       xor	al,al
25240 679B           B1                     06  mov	cl,*6
25241 679D           D3E0                       shl	ax,cl
25242                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25243 679F           0346         F6            add	ax,-$A[bp]
25244 67A2           44                         inc	sp
25245 67A3           44                         inc	sp
25246                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25247 67A4           8946         FE            mov	-2[bp],ax
25248                                           !BCC_EOS
25249                                           ! 3317  for(i=0;i<0x100;i++)
25250                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25251 67A7           31C0                       xor	ax,ax
25252 67A9           8946         FA            mov	-6[bp],ax
25253                                           !BCC_EOS
25254                                           !BCC_EOS
25255                                           ! 3318   {
25256 67AC           E9         003B            br 	.20F
25257                       000067AF            .210:
25258                                           ! 3319    src = i * 8;
25259                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25260 67AF           8B46         FA            mov	ax,-6[bp]
25261 67B2           B1                     03  mov	cl,*3
25262 67B4           D3E0                       shl	ax,cl
25263                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25264 67B6           8946         F8            mov	-8[bp],ax
25265                                           !BCC_EOS
25266                                           ! 3320    dest = blockaddr + i * 32;
25267                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25268 67B9           8B46         FA            mov	ax,-6[bp]
25269 67BC           B1                     05  mov	cl,*5
25270 67BE           D3E0                       shl	ax,cl
25271                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25272                                           ! Debug: expression subtree swapping
25273 67C0           0346         FE            add	ax,-2[bp]
25274                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25275 67C3           8946         FC            mov	-4[bp],ax
25276                                           !BCC_EOS
25277                                           ! 3321    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25278                                           ! Debug: list int = const 8 (used reg = )
25279 67C6           B8                   0008  mov	ax,*8
25280 67C9           50                         push	ax
25281                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25282 67CA           8B5E         F8            mov	bx,-8[bp]
25283                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25284                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25285 67CD           81C3                 0F40  add	bx,#_vgafont8
25286 67D1           53                         push	bx
25287                                           ! Debug: list unsigned int = const $C000 (used reg = )
25288 67D2           B8                   C000  mov	ax,#$C000
25289 67D5           50                         push	ax
25290                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25291 67D6           FF76         FC            push	-4[bp]
25292                                           ! Debug: list unsigned int = const $A000 (used reg = )
25293 67D9           B8                   A000  mov	ax,#$A000
25294 67DC           50                         push	ax
25295                                           ! Debug: func () void = memcpyb+0 (used reg = )
25296 67DD           E8         1265            call	_memcpyb
25297 67E0           83C4                   0A  add	sp,*$A
25298                                           !BCC_EOS
25299                                           ! 3322   }
25300                                           ! 3323  release_font_access();
25301                       000067E3            .20E:
25302                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25303 67E3           8B46         FA            mov	ax,-6[bp]
25304 67E6           40                         inc	ax
25305 67E7           8946         FA            mov	-6[bp],ax
25306                       000067EA            .20F:
25307                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25308 67EA           8B46         FA            mov	ax,-6[bp]
25309 67ED           3D                   0100  cmp	ax,#$100
25310 67F0           72           BD            jb 	.210
25311                       000067F2            .211:
25312                       000067F2            .20D:
25313                                           ! Debug: func () void = release_font_access+0 (used reg = )
25314 67F2           E8         FCD2            call	_release_font_access
25315                                           !BCC_EOS
25316                                           ! 3324  if(AL>=0x10)
25317                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25318 67F5           8A46         04            mov	al,4[bp]
25319 67F8           3C                     10  cmp	al,*$10
25320 67FA           72           09            jb  	.212
25321                       000067FC            .213:
25322                                           ! 3325   {
25323                                           ! 3326    set_scan_lines(8);
25324                                           ! Debug: list int = const 8 (used reg = )
25325 67FC           B8                   0008  mov	ax,*8
25326 67FF           50                         push	ax
25327                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25328 6800           E8         FCF8            call	_set_scan_lines
25329 6803           44                         inc	sp
25330 6804           44                         inc	sp
25331                                           !BCC_EOS
25332                                           ! 3327   }
25333                                           ! 3328 }
25334                       00006805            .212:
25335 6805           89EC                       mov	sp,bp
25336 6807           5D                         pop	bp
25337 6808           C3                         ret
25338                                           ! 3329 #asm
25339                                           !BCC_ASM
25340                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25341                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25342                       00006809            biosfn_set_text_block_specifier:
25343 6809           50                           push ax
25344 680A           52                           push dx
25345 680B           BA                   03C4    mov dx, # 0x3c4
25346 680E           88DC                         mov ah, bl
25347 6810           B0                     03    mov al, #0x03
25348 6812           EF                           out dx, ax
25349 6813           5A                           pop dx
25350 6814           58                           pop ax
25351 6815           C3                           ret
25352                                           ! 3340 endasm
25353                                           !BCC_ENDASM
25354                                           ! 3341 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25355                                           ! Register BX used in function biosfn_load_text_8_8_pat
25356                       00006816            _biosfn_load_text_8_16_pat:
25357                                           !BCC_EOS
25358                                           !BCC_EOS
25359                                           ! 3342 {
25360                                           ! 3343  Bit16u blockaddr,dest,i,src;
25361                                           !BCC_EOS
25362                                           ! 3344  get_font_access();
25363 6816           55                         push	bp
25364 6817           89E5                       mov	bp,sp
25365 6819           83C4                   F8  add	sp,*-8
25366                                           ! Debug: func () void = get_font_access+0 (used reg = )
25367 681C           E8         FC85            call	_get_font_access
25368                                           !BCC_EOS
25369                                           ! 3345  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25370                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25371 681F           8A46         06            mov	al,6[bp]
25372 6822           24                     04  and	al,*4
25373                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25374 6824           30E4                       xor	ah,ah
25375 6826           88C4                       mov	ah,al
25376 6828           30C0                       xor	al,al
25377 682A           B1                     03  mov	cl,*3
25378 682C           D3E0                       shl	ax,cl
25379 682E           50                         push	ax
25380                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25381 682F           8A46         06            mov	al,6[bp]
25382 6832           24                     03  and	al,*3
25383                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25384 6834           30E4                       xor	ah,ah
25385 6836           88C4                       mov	ah,al
25386 6838           30C0                       xor	al,al
25387 683A           B1                     06  mov	cl,*6
25388 683C           D3E0                       shl	ax,cl
25389                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25390 683E           0346         F6            add	ax,-$A[bp]
25391 6841           44                         inc	sp
25392 6842           44                         inc	sp
25393                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25394 6843           8946         FE            mov	-2[bp],ax
25395                                           !BCC_EOS
25396                                           ! 3346  for(i=0;i<0x100;i++)
25397                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25398 6846           31C0                       xor	ax,ax
25399 6848           8946         FA            mov	-6[bp],ax
25400                                           !BCC_EOS
25401                                           !BCC_EOS
25402                                           ! 3347   {
25403 684B           EB           3B            jmp .216
25404                       0000684D            .217:
25405                                           ! 3348    src = i * 16;
25406                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25407 684D           8B46         FA            mov	ax,-6[bp]
25408 6850           B1                     04  mov	cl,*4
25409 6852           D3E0                       shl	ax,cl
25410                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25411 6854           8946         F8            mov	-8[bp],ax
25412                                           !BCC_EOS
25413                                           ! 3349    dest = blockaddr + i * 32;
25414                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25415 6857           8B46         FA            mov	ax,-6[bp]
25416 685A           B1                     05  mov	cl,*5
25417 685C           D3E0                       shl	ax,cl
25418                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25419                                           ! Debug: expression subtree swapping
25420 685E           0346         FE            add	ax,-2[bp]
25421                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25422 6861           8946         FC            mov	-4[bp],ax
25423                                           !BCC_EOS
25424                                           ! 3350    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25425                                           ! Debug: list int = const $10 (used reg = )
25426 6864           B8                   0010  mov	ax,*$10
25427 6867           50                         push	ax
25428                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25429 6868           8B5E         F8            mov	bx,-8[bp]
25430                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25431                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25432 686B           81C3                 2540  add	bx,#_vgafont16
25433 686F           53                         push	bx
25434                                           ! Debug: list unsigned int = const $C000 (used reg = )
25435 6870           B8                   C000  mov	ax,#$C000
25436 6873           50                         push	ax
25437                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25438 6874           FF76         FC            push	-4[bp]
25439                                           ! Debug: list unsigned int = const $A000 (used reg = )
25440 6877           B8                   A000  mov	ax,#$A000
25441 687A           50                         push	ax
25442                                           ! Debug: func () void = memcpyb+0 (used reg = )
25443 687B           E8         11C7            call	_memcpyb
25444 687E           83C4                   0A  add	sp,*$A
25445                                           !BCC_EOS
25446                                           ! 3351   }
25447                                           ! 3352  release_font_access();
25448                       00006881            .215:
25449                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25450 6881           8B46         FA            mov	ax,-6[bp]
25451 6884           40                         inc	ax
25452 6885           8946         FA            mov	-6[bp],ax
25453                       00006888            .216:
25454                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25455 6888           8B46         FA            mov	ax,-6[bp]
25456 688B           3D                   0100  cmp	ax,#$100
25457 688E           72           BD            jb 	.217
25458                       00006890            .218:
25459                       00006890            .214:
25460                                           ! Debug: func () void = release_font_access+0 (used reg = )
25461 6890           E8         FC34            call	_release_font_access
25462                                           !BCC_EOS
25463                                           ! 3353  if(AL>=0x10)
25464                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25465 6893           8A46         04            mov	al,4[bp]
25466 6896           3C                     10  cmp	al,*$10
25467 6898           72           09            jb  	.219
25468                       0000689A            .21A:
25469                                           ! 3354   {
25470                                           ! 3355    set_scan_lines(16);
25471                                           ! Debug: list int = const $10 (used reg = )
25472 689A           B8                   0010  mov	ax,*$10
25473 689D           50                         push	ax
25474                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25475 689E           E8         FC5A            call	_set_scan_lines
25476 68A1           44                         inc	sp
25477 68A2           44                         inc	sp
25478                                           !BCC_EOS
25479                                           ! 3356   }
25480                                           ! 3357 }
25481                       000068A3            .219:
25482 68A3           89EC                       mov	sp,bp
25483 68A5           5D                         pop	bp
25484 68A6           C3                         ret
25485                                           ! 3358 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25486                                           ! Register BX used in function biosfn_load_text_8_16_pat
25487                       000068A7            _biosfn_load_gfx_8_8_chars:
25488                                           !BCC_EOS
25489                                           !BCC_EOS
25490                                           ! 3359 {
25491                                           ! 3360 }
25492 68A7           C3                         ret
25493                                           ! 3361 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25494                       000068A8            _biosfn_load_gfx_user_chars:
25495                                           !BCC_EOS
25496                                           !BCC_EOS
25497                                           !BCC_EOS
25498                                           !BCC_EOS
25499                                           !BCC_EOS
25500                                           ! 3362 {
25501                                           ! 3363 }
25502 68A8           C3                         ret
25503                                           ! 3364 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25504                       000068A9            _biosfn_load_gfx_8_14_chars:
25505                                           !BCC_EOS
25506                                           ! 3365 {
25507                                           ! 3366 }
25508 68A9           C3                         ret
25509                                           ! 3367 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25510                       000068AA            _biosfn_load_gfx_8_8_dd_chars:
25511                                           !BCC_EOS
25512                                           ! 3368 {
25513                                           ! 3369 }
25514 68AA           C3                         ret
25515                                           ! 3370 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25516                       000068AB            _biosfn_load_gfx_8_16_chars:
25517                                           !BCC_EOS
25518                                           ! 3371 {
25519                                           ! 3372 }
25520 68AB           C3                         ret
25521                                           ! 3373 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25522                                           ! 3374 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25523                       000068AC            _biosfn_get_font_info:
25524                                           !BCC_EOS
25525                                           !BCC_EOS
25526                                           !BCC_EOS
25527                                           !BCC_EOS
25528                                           !BCC_EOS
25529                                           ! 3375 {Bit16u ss=get_SS();
25530 68AC           55                         push	bp
25531 68AD           89E5                       mov	bp,sp
25532 68AF           4C                         dec	sp
25533 68B0           4C                         dec	sp
25534                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
25535 68B1           E8         127D            call	_get_SS
25536                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
25537 68B4           8946         FE            mov	-2[bp],ax
25538                                           !BCC_EOS
25539                                           ! 3376  switch(BH)
25540 68B7           8A46         04            mov	al,4[bp]
25541                                           ! 3377   {case 0x00:
25542 68BA           E9         0143            br 	.21D
25543                                           ! 3378     write_word(ss,ES,read_word(0x00,0x1f*4));
25544                       000068BD            .21E:
25545                                           ! Debug: list int = const $7C (used reg = )
25546 68BD           B8                   007C  mov	ax,*$7C
25547 68C0           50                         push	ax
25548                                           ! Debug: list int = const 0 (used reg = )
25549 68C1           31C0                       xor	ax,ax
25550 68C3           50                         push	ax
25551                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25552 68C4           E8         11F1            call	_read_word
25553 68C7           83C4                   04  add	sp,*4
25554                                           ! Debug: list unsigned short = ax+0 (used reg = )
25555 68CA           50                         push	ax
25556                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25557 68CB           FF76         06            push	6[bp]
25558                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25559 68CE           FF76         FE            push	-2[bp]
25560                                           ! Debug: func () void = write_word+0 (used reg = )
25561 68D1           E8         120F            call	_write_word
25562 68D4           83C4                   06  add	sp,*6
25563                                           !BCC_EOS
25564                                           ! 3379     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
25565                                           ! Debug: list int = const $7E (used reg = )
25566 68D7           B8                   007E  mov	ax,*$7E
25567 68DA           50                         push	ax
25568                                           ! Debug: list int = const 0 (used reg = )
25569 68DB           31C0                       xor	ax,ax
25570 68DD           50                         push	ax
25571                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25572 68DE           E8         11D7            call	_read_word
25573 68E1           83C4                   04  add	sp,*4
25574                                           ! Debug: list unsigned short = ax+0 (used reg = )
25575 68E4           50                         push	ax
25576                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25577 68E5           FF76         08            push	8[bp]
25578                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25579 68E8           FF76         FE            push	-2[bp]
25580                                           ! Debug: func () void = write_word+0 (used reg = )
25581 68EB           E8         11F5            call	_write_word
25582 68EE           83C4                   06  add	sp,*6
25583                                           !BCC_EOS
25584                                           ! 3380     break;
25585 68F1           E9         0131            br 	.21B
25586                                           !BCC_EOS
25587                                           ! 3381    case 0x01:
25588                                           ! 3382     write_word(ss,ES,read_word(0x00,0x43*4));
25589                       000068F4            .21F:
25590                                           ! Debug: list int = const $10C (used reg = )
25591 68F4           B8                   010C  mov	ax,#$10C
25592 68F7           50                         push	ax
25593                                           ! Debug: list int = const 0 (used reg = )
25594 68F8           31C0                       xor	ax,ax
25595 68FA           50                         push	ax
25596                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25597 68FB           E8         11BA            call	_read_word
25598 68FE           83C4                   04  add	sp,*4
25599                                           ! Debug: list unsigned short = ax+0 (used reg = )
25600 6901           50                         push	ax
25601                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25602 6902           FF76         06            push	6[bp]
25603                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25604 6905           FF76         FE            push	-2[bp]
25605                                           ! Debug: func () void = write_word+0 (used reg = )
25606 6908           E8         11D8            call	_write_word
25607 690B           83C4                   06  add	sp,*6
25608                                           !BCC_EOS
25609                                           ! 3383     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
25610                                           ! Debug: list int = const $10E (used reg = )
25611 690E           B8                   010E  mov	ax,#$10E
25612 6911           50                         push	ax
25613                                           ! Debug: list int = const 0 (used reg = )
25614 6912           31C0                       xor	ax,ax
25615 6914           50                         push	ax
25616                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25617 6915           E8         11A0            call	_read_word
25618 6918           83C4                   04  add	sp,*4
25619                                           ! Debug: list unsigned short = ax+0 (used reg = )
25620 691B           50                         push	ax
25621                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25622 691C           FF76         08            push	8[bp]
25623                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25624 691F           FF76         FE            push	-2[bp]
25625                                           ! Debug: func () void = write_word+0 (used reg = )
25626 6922           E8         11BE            call	_write_word
25627 6925           83C4                   06  add	sp,*6
25628                                           !BCC_EOS
25629                                           ! 3384     break;
25630 6928           E9         00FA            br 	.21B
25631                                           !BCC_EOS
25632                                           ! 3385    case 0x02:
25633                                           ! 3386     write_word(ss,ES,0xC000);
25634                       0000692B            .220:
25635                                           ! Debug: list unsigned int = const $C000 (used reg = )
25636 692B           B8                   C000  mov	ax,#$C000
25637 692E           50                         push	ax
25638                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25639 692F           FF76         06            push	6[bp]
25640                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25641 6932           FF76         FE            push	-2[bp]
25642                                           ! Debug: func () void = write_word+0 (used reg = )
25643 6935           E8         11AB            call	_write_word
25644 6938           83C4                   06  add	sp,*6
25645                                           !BCC_EOS
25646                                           ! 3387     write_word(ss,BP,vgafont14);
25647                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
25648 693B           BB                   1740  mov	bx,#_vgafont14
25649 693E           53                         push	bx
25650                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25651 693F           FF76         08            push	8[bp]
25652                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25653 6942           FF76         FE            push	-2[bp]
25654                                           ! Debug: func () void = write_word+0 (used reg = )
25655 6945           E8         119B            call	_write_word
25656 6948           83C4                   06  add	sp,*6
25657                                           !BCC_EOS
25658                                           ! 3388     break;
25659 694B           E9         00D7            br 	.21B
25660                                           !BCC_EOS
25661                                           ! 3389    case 0x03:
25662                                           ! 3390     write_word(ss,ES,0xC000);
25663                       0000694E            .221:
25664                                           ! Debug: list unsigned int = const $C000 (used reg = )
25665 694E           B8                   C000  mov	ax,#$C000
25666 6951           50                         push	ax
25667                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25668 6952           FF76         06            push	6[bp]
25669                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25670 6955           FF76         FE            push	-2[bp]
25671                                           ! Debug: func () void = write_word+0 (used reg = )
25672 6958           E8         1188            call	_write_word
25673 695B           83C4                   06  add	sp,*6
25674                                           !BCC_EOS
25675                                           ! 3391     write_word(ss,BP,vgafont8);
25676                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
25677 695E           BB                   0F40  mov	bx,#_vgafont8
25678 6961           53                         push	bx
25679                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25680 6962           FF76         08            push	8[bp]
25681                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25682 6965           FF76         FE            push	-2[bp]
25683                                           ! Debug: func () void = write_word+0 (used reg = )
25684 6968           E8         1178            call	_write_word
25685 696B           83C4                   06  add	sp,*6
25686                                           !BCC_EOS
25687                                           ! 3392     break;
25688 696E           E9         00B4            br 	.21B
25689                                           !BCC_EOS
25690                                           ! 3393    case 0x04:
25691                                           ! 3394     write_word(ss,ES,0xC000);
25692                       00006971            .222:
25693                                           ! Debug: list unsigned int = const $C000 (used reg = )
25694 6971           B8                   C000  mov	ax,#$C000
25695 6974           50                         push	ax
25696                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25697 6975           FF76         06            push	6[bp]
25698                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25699 6978           FF76         FE            push	-2[bp]
25700                                           ! Debug: func () void = write_word+0 (used reg = )
25701 697B           E8         1165            call	_write_word
25702 697E           83C4                   06  add	sp,*6
25703                                           !BCC_EOS
25704                                           ! 3395     write_word(ss,BP,vgafont8+128*8);
25705                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
25706 6981           BB                   1340  mov	bx,#_vgafont8+$400
25707 6984           53                         push	bx
25708                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25709 6985           FF76         08            push	8[bp]
25710                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25711 6988           FF76         FE            push	-2[bp]
25712                                           ! Debug: func () void = write_word+0 (used reg = )
25713 698B           E8         1155            call	_write_word
25714 698E           83C4                   06  add	sp,*6
25715                                           !BCC_EOS
25716                                           ! 3396     break;
25717 6991           E9         0091            br 	.21B
25718                                           !BCC_EOS
25719                                           ! 3397    case 0x05:
25720                                           ! 3398     write_word(ss,ES,0xC000);
25721                       00006994            .223:
25722                                           ! Debug: list unsigned int = const $C000 (used reg = )
25723 6994           B8                   C000  mov	ax,#$C000
25724 6997           50                         push	ax
25725                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25726 6998           FF76         06            push	6[bp]
25727                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25728 699B           FF76         FE            push	-2[bp]
25729                                           ! Debug: func () void = write_word+0 (used reg = )
25730 699E           E8         1142            call	_write_word
25731 69A1           83C4                   06  add	sp,*6
25732                                           !BCC_EOS
25733                                           ! 3399     write_word(ss,BP,vgafont14alt);
25734                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
25735 69A4           BB                   3540  mov	bx,#_vgafont14alt
25736 69A7           53                         push	bx
25737                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25738 69A8           FF76         08            push	8[bp]
25739                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25740 69AB           FF76         FE            push	-2[bp]
25741                                           ! Debug: func () void = write_word+0 (used reg = )
25742 69AE           E8         1132            call	_write_word
25743 69B1           83C4                   06  add	sp,*6
25744                                           !BCC_EOS
25745                                           ! 3400     break;
25746 69B4           EB           6F            jmp .21B
25747                                           !BCC_EOS
25748                                           ! 3401    case 0x06:
25749                                           ! 3402     write_word(ss,ES,0xC000);
25750                       000069B6            .224:
25751                                           ! Debug: list unsigned int = const $C000 (used reg = )
25752 69B6           B8                   C000  mov	ax,#$C000
25753 69B9           50                         push	ax
25754                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25755 69BA           FF76         06            push	6[bp]
25756                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25757 69BD           FF76         FE            push	-2[bp]
25758                                           ! Debug: func () void = write_word+0 (used reg = )
25759 69C0           E8         1120            call	_write_word
25760 69C3           83C4                   06  add	sp,*6
25761                                           !BCC_EOS
25762                                           ! 3403     write_word(ss,BP,vgafont16);
25763                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
25764 69C6           BB                   2540  mov	bx,#_vgafont16
25765 69C9           53                         push	bx
25766                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25767 69CA           FF76         08            push	8[bp]
25768                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25769 69CD           FF76         FE            push	-2[bp]
25770                                           ! Debug: func () void = write_word+0 (used reg = )
25771 69D0           E8         1110            call	_write_word
25772 69D3           83C4                   06  add	sp,*6
25773                                           !BCC_EOS
25774                                           ! 3404     break;
25775 69D6           EB           4D            jmp .21B
25776                                           !BCC_EOS
25777                                           ! 3405    case 0x07:
25778                                           ! 3406     write_word(ss,ES
25779                       000069D8            .225:
25780                                           ! 3406 ,0xC000);
25781                                           ! Debug: list unsigned int = const $C000 (used reg = )
25782 69D8           B8                   C000  mov	ax,#$C000
25783 69DB           50                         push	ax
25784                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25785 69DC           FF76         06            push	6[bp]
25786                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25787 69DF           FF76         FE            push	-2[bp]
25788                                           ! Debug: func () void = write_word+0 (used reg = )
25789 69E2           E8         10FE            call	_write_word
25790 69E5           83C4                   06  add	sp,*6
25791                                           !BCC_EOS
25792                                           ! 3407     write_word(ss,BP,vgafont16alt);
25793                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
25794 69E8           BB                   3541  mov	bx,#_vgafont16alt
25795 69EB           53                         push	bx
25796                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25797 69EC           FF76         08            push	8[bp]
25798                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25799 69EF           FF76         FE            push	-2[bp]
25800                                           ! Debug: func () void = write_word+0 (used reg = )
25801 69F2           E8         10EE            call	_write_word
25802 69F5           83C4                   06  add	sp,*6
25803                                           !BCC_EOS
25804                                           ! 3408     break;
25805 69F8           EB           2B            jmp .21B
25806                                           !BCC_EOS
25807                                           ! 3409    default:
25808                                           ! 3410     return;
25809                       000069FA            .226:
25810 69FA           89EC                       mov	sp,bp
25811 69FC           5D                         pop	bp
25812 69FD           C3                         ret
25813                                           !BCC_EOS
25814                                           ! 3411   }
25815                                           ! 3412  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
25816 69FE           EB           25            jmp .21B
25817                       00006A00            .21D:
25818 6A00           2C                     00  sub	al,*0
25819 6A02           72           F6            jb 	.226
25820 6A04           3C                     07  cmp	al,*7
25821 6A06           77           1B            ja  	.227
25822 6A08           30E4                       xor	ah,ah
25823 6A0A           D1E0                       shl	ax,*1
25824 6A0C           89C3                       mov	bx,ax
25825 6A0E           2E                         seg	cs
25826 6A0F           FFA7       6A13            br	.228[bx]
25827                       00006A13            .228:
25828 6A13                      68BD            .word	.21E
25829 6A15                      68F4            .word	.21F
25830 6A17                      692B            .word	.220
25831 6A19                      694E            .word	.221
25832 6A1B                      6971            .word	.222
25833 6A1D                      6994            .word	.223
25834 6A1F                      69B6            .word	.224
25835 6A21                      69D8            .word	.225
25836                       00006A23            .227:
25837 6A23           EB           D5            jmp	.226
25838                       00006A25            .21B:
25839                       FFFFFFFC            ..FFF5	=	-4
25840                                           ! Debug: list int = const $85 (used reg = )
25841 6A25           B8                   0085  mov	ax,#$85
25842 6A28           50                         push	ax
25843                                           ! Debug: list int = const $40 (used reg = )
25844 6A29           B8                   0040  mov	ax,*$40
25845 6A2C           50                         push	ax
25846                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25847 6A2D           E8         1075            call	_read_byte
25848 6A30           83C4                   04  add	sp,*4
25849                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25850 6A33           30E4                       xor	ah,ah
25851                                           ! Debug: list unsigned short = ax+0 (used reg = )
25852 6A35           50                         push	ax
25853                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
25854 6A36           FF76         0A            push	$A[bp]
25855                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25856 6A39           FF76         FE            push	-2[bp]
25857                                           ! Debug: func () void = write_word+0 (used reg = )
25858 6A3C           E8         10A4            call	_write_word
25859 6A3F           83C4                   06  add	sp,*6
25860                                           !BCC_EOS
25861                                           ! 3413  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
25862                                           ! Debug: list int = const $84 (used reg = )
25863 6A42           B8                   0084  mov	ax,#$84
25864 6A45           50                         push	ax
25865                                           ! Debug: list int = const $40 (used reg = )
25866 6A46           B8                   0040  mov	ax,*$40
25867 6A49           50                         push	ax
25868                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25869 6A4A           E8         1058            call	_read_byte
25870 6A4D           83C4                   04  add	sp,*4
25871                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25872 6A50           30E4                       xor	ah,ah
25873                                           ! Debug: list unsigned short = ax+0 (used reg = )
25874 6A52           50                         push	ax
25875                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
25876 6A53           FF76         0C            push	$C[bp]
25877                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25878 6A56           FF76         FE            push	-2[bp]
25879                                           ! Debug: func () void = write_word+0 (used reg = )
25880 6A59           E8         1087            call	_write_word
25881 6A5C           83C4                   06  add	sp,*6
25882                                           !BCC_EOS
25883                                           ! 3414 }
25884 6A5F           89EC                       mov	sp,bp
25885 6A61           5D                         pop	bp
25886 6A62           C3                         ret
25887                                           ! 3415 #asm
25888                                           !BCC_ASM
25889                       00000006            _biosfn_get_font_info.BP	set	6
25890                       00000002            _biosfn_get_font_info.BH	set	2
25891                       00000008            _biosfn_get_font_info.CX	set	8
25892                       0000000A            _biosfn_get_font_info.DX	set	$A
25893                       00000004            _biosfn_get_font_info.ES	set	4
25894                       00006A63            biosfn_get_ega_info:
25895 6A63           1E                           push ds
25896 6A64           50                           push ax
25897 6A65           B8                   0040    mov ax, # 0x40
25898 6A68           8ED8                         mov ds, ax
25899 6A6A           30ED                         xor ch, ch
25900 6A6C           BB                   0088    mov bx, # 0x88
25901 6A6F           8A0F                         mov cl, [bx]
25902 6A71           80E1                   0F    and cl, #0x0f
25903 6A74           BB                   0063    mov bx, # 0x63
25904 6A77           8B07                         mov ax, [bx]
25905 6A79           BB                   0003    mov bx, #0x0003
25906 6A7C           3D                   03B4    cmp ax, # 0x3b4
25907 6A7F           75           02              jne mode_ega_color
25908 6A81           B7                     01    mov bh, #0x01
25909                       00006A83            mode_ega_color:
25910 6A83           58                           pop ax
25911 6A84           1F                           pop ds
25912 6A85           C3                           ret
25913                                           ! 3435 endasm
25914                                           !BCC_ENDASM
25915                                           ! 3436 static void biosfn_alternate_prtsc()
25916                                           ! Register BX used in function biosfn_get_font_info
25917                                           ! 3437 {
25918                       00006A86            _biosfn_alternate_prtsc:
25919                                           ! 3438 }
25920 6A86           C3                         ret
25921                                           ! 3439 #asm
25922                                           !BCC_ASM
25923                       00006A87            biosfn_select_vert_res:
25924                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
25925 6A87           1E                           push ds
25926 6A88           53                           push bx
25927 6A89           52                           push dx
25928 6A8A           88C2                         mov dl, al
25929 6A8C           B8                   0040    mov ax, # 0x40
25930 6A8F           8ED8                         mov ds, ax
25931 6A91           BB                   0089    mov bx, # 0x89
25932 6A94           8A07                         mov al, [bx]
25933 6A96           BB                   0088    mov bx, # 0x88
25934 6A99           8A27                         mov ah, [bx]
25935 6A9B           80FA                   01    cmp dl, #0x01
25936 6A9E           74           15              je vert_res_350
25937 6AA0           72           1D              jb vert_res_200
25938 6AA2           80FA                   02    cmp dl, #0x02
25939 6AA5           74           02              je vert_res_400
25940 6AA7           EB           2A              jmp set_retcode
25941                       00006AA9            vert_res_400:
25942                                             ; reset modeset ctl bit 7 and set bit 4
25943                                             ; set switches bit 3-0 to 0x09
25944 6AA9           24                     7F    and al, #0x7f
25945 6AAB           0C                     10    or al, #0x10
25946 6AAD           80E4                   F0    and ah, #0xf0
25947 6AB0           80CC                   09    or ah, #0x09
25948 6AB3           75           14              jnz set_vert_res
25949                       00006AB5            vert_res_350:
25950                                             ; reset modeset ctl bit 7 and bit 4
25951                                             ; set switches bit 3-0 to 0x09
25952 6AB5           24                     6F    and al, #0x6f
25953 6AB7           80E4                   F0    and ah, #0xf0
25954 6ABA           80CC                   09    or ah, #0x09
25955 6ABD           75           0A              jnz set_vert_res
25956                       00006ABF            vert_res_200:
25957                                             ; set modeset ctl bit 7 and reset bit 4
25958                                             ; set switches bit 3-0 to 0x08
25959 6ABF           24                     EF    and al, #0xef
25960 6AC1           0C                     80    or al, #0x80
25961 6AC3           80E4                   F0    and ah, #0xf0
25962 6AC6           80CC                   08    or ah, #0x08
25963                       00006AC9            set_vert_res:
25964 6AC9           BB                   0089    mov bx, # 0x89
25965 6ACC           8807                         mov [bx], al
25966 6ACE           BB                   0088    mov bx, # 0x88
25967 6AD1           8827                         mov [bx], ah
25968                       00006AD3            set_retcode:
25969 6AD3           B8                   1212    mov ax, #0x1212
25970 6AD6           5A                           pop dx
25971 6AD7           5B                           pop bx
25972 6AD8           1F                           pop ds
25973 6AD9           C3                           ret
25974                       00006ADA            biosfn_enable_default_palette_loading:
25975 6ADA           1E                           push ds
25976 6ADB           53                           push bx
25977 6ADC           52                           push dx
25978 6ADD           88C2                         mov dl, al
25979 6ADF           80E2                   01    and dl, #0x01
25980 6AE2           C0E2                   03    shl dl, 3
25981 6AE5           B8                   0040    mov ax, # 0x40
25982 6AE8           8ED8                         mov ds, ax
25983 6AEA           BB                   0089    mov bx, # 0x89
25984 6AED           8A07                         mov al, [bx]
25985 6AEF           24                     F7    and al, #0xf7
25986 6AF1           08D0                         or al, dl
25987 6AF3           8807                         mov [bx], al
25988 6AF5           B8                   1212    mov ax, #0x1212
25989 6AF8           5A                           pop dx
25990 6AF9           5B                           pop bx
25991 6AFA           1F                           pop ds
25992 6AFB           C3                           ret
25993                       00006AFC            biosfn_enable_video_addressing:
25994 6AFC           53                           push bx
25995 6AFD           52                           push dx
25996 6AFE           88C3                         mov bl, al
25997 6B00           80E3                   01    and bl, #0x01
25998 6B03           80F3                   01    xor bl, #0x01
25999 6B06           D0E3                         shl bl, 1
26000 6B08           BA                   03CC    mov dx, # 0x3cc
26001 6B0B           EC                           in al, dx
26002 6B0C           24                     FD    and al, #0xfd
26003 6B0E           08D8                         or al, bl
26004 6B10           BA                   03C2    mov dx, # 0x3c2
26005 6B13           EE                           out dx, al
26006 6B14           B8                   1212    mov ax, #0x1212
26007 6B17           5A                           pop dx
26008 6B18           5B                           pop bx
26009 6B19           C3                           ret
26010                       00006B1A            biosfn_enable_grayscale_summing:
26011 6B1A           1E                           push ds
26012 6B1B           53                           push bx
26013 6B1C           52                           push dx
26014 6B1D           88C2                         mov dl, al
26015 6B1F           80E2                   01    and dl, #0x01
26016 6B22           80F2                   01    xor dl, #0x01
26017 6B25           D0E2                         shl dl, 1
26018 6B27           B8                   0040    mov ax, # 0x40
26019 6B2A           8ED8                         mov ds, ax
26020 6B2C           BB                   0089    mov bx, # 0x89
26021 6B2F           8A07                         mov al, [bx]
26022 6B31           24                     FD    and al, #0xfd
26023 6B33           08D0                         or al, dl
26024 6B35           8807                         mov [bx], al
26025 6B37           B8                   1212    mov ax, #0x1212
26026 6B3A           5A                           pop dx
26027 6B3B           5B                           pop bx
26028 6B3C           1F                           pop ds
26029 6B3D           C3                           ret
26030                       00006B3E            biosfn_enable_cursor_emulation:
26031 6B3E           1E                           push ds
26032 6B3F           53                           push bx
26033 6B40           52                           push dx
26034 6B41           88C2                         mov dl, al
26035 6B43           80E2                   01    and dl, #0x01
26036 6B46           80F2                   01    xor dl, #0x01
26037 6B49           B8                   0040    mov ax, # 0x40
26038 6B4C           8ED8                         mov ds, ax
26039 6B4E           BB                   0089    mov bx, # 0x89
26040 6B51           8A07                         mov al, [bx]
26041 6B53           24                     FE    and al, #0xfe
26042 6B55           08D0                         or al, dl
26043 6B57           8807                         mov [bx], al
26044 6B59           B8                   1212    mov ax, #0x1212
26045 6B5C           5A                           pop dx
26046 6B5D           5B                           pop bx
26047 6B5E           1F                           pop ds
26048 6B5F           C3                           ret
26049                                           ! 3566 endasm
26050                                           !BCC_ENDASM
26051                                           ! 3567 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26052                       00006B60            _biosfn_switch_video_interface:
26053                                           !BCC_EOS
26054                                           !BCC_EOS
26055                                           !BCC_EOS
26056                                           ! 3568 {
26057                                           ! 3569 }
26058 6B60           C3                         ret
26059                                           ! 3570 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26060                       00006B61            _biosfn_enable_video_refresh_control:
26061                                           !BCC_EOS
26062                                           ! 3571 {
26063                                           ! 3572 }
26064 6B61           C3                         ret
26065                                           ! 3573 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26066                                           ! 3574 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26067                       00006B62            _biosfn_write_string:
26068                                           !BCC_EOS
26069                                           !BCC_EOS
26070                                           !BCC_EOS
26071                                           !BCC_EOS
26072                                           !BCC_EOS
26073                                           !BCC_EOS
26074                                           !BCC_EOS
26075                                           !BCC_EOS
26076                                           ! 3575 {
26077                                           ! 3576  Bit16u newcurs,oldcurs,dummy;
26078                                           !BCC_EOS
26079                                           ! 3577  Bit8u car,carattr;
26080                                           !BCC_EOS
26081                                           ! 3578  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26082 6B62           55                         push	bp
26083 6B63           89E5                       mov	bp,sp
26084 6B65           83C4                   F8  add	sp,*-8
26085                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26086 6B68           8D5E         FC            lea	bx,-4[bp]
26087 6B6B           53                         push	bx
26088                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26089 6B6C           8D5E         FA            lea	bx,-6[bp]
26090 6B6F           53                         push	bx
26091                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26092 6B70           8A46         06            mov	al,6[bp]
26093 6B73           30E4                       xor	ah,ah
26094 6B75           50                         push	ax
26095                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26096 6B76           E8         D7E7            call	_biosfn_get_cursor_pos
26097 6B79           83C4                   06  add	sp,*6
26098                                           !BCC_EOS
26099                                           ! 3579  if(row==0xff)
26100                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26101 6B7C           8A46         0C            mov	al,$C[bp]
26102 6B7F           3C                     FF  cmp	al,#$FF
26103 6B81           75           12            jne 	.229
26104                       00006B83            .22A:
26105                                           ! 3580   {col=oldcurs&0x00ff;
26106                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26107 6B83           8A46         FC            mov	al,-4[bp]
26108                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26109 6B86           8846         0E            mov	$E[bp],al
26110                                           !BCC_EOS
26111                                           ! 3581    row=(oldcurs&0xff00)>>8;
26112                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26113 6B89           8B46         FC            mov	ax,-4[bp]
26114 6B8C           30C0                       xor	al,al
26115                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26116 6B8E           88E0                       mov	al,ah
26117 6B90           30E4                       xor	ah,ah
26118                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26119 6B92           8846         0C            mov	$C[bp],al
26120                                           !BCC_EOS
26121                                           ! 3582   }
26122                                           ! 3583  newcurs=row; newcurs<<=8; newcurs+=col;
26123                       00006B95            .229:
26124                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26125 6B95           8A46         0C            mov	al,$C[bp]
26126 6B98           30E4                       xor	ah,ah
26127 6B9A           8946         FE            mov	-2[bp],ax
26128                                           !BCC_EOS
26129                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26130 6B9D           8B46         FE            mov	ax,-2[bp]
26131 6BA0           88C4                       mov	ah,al
26132 6BA2           30C0                       xor	al,al
26133 6BA4           8946         FE            mov	-2[bp],ax
26134                                           !BCC_EOS
26135                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26136 6BA7           8B46         FE            mov	ax,-2[bp]
26137 6BAA           0246         0E            add	al,$E[bp]
26138 6BAD           80D4                   00  adc	ah,*0
26139 6BB0           8946         FE            mov	-2[bp],ax
26140                                           !BCC_EOS
26141                                           ! 3584  biosfn_set_cursor_pos(page,newcurs);
26142                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26143 6BB3           FF76         FE            push	-2[bp]
26144                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26145 6BB6           8A46         06            mov	al,6[bp]
26146 6BB9           30E4                       xor	ah,ah
26147 6BBB           50                         push	ax
26148                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26149 6BBC           E8         D6A1            call	_biosfn_set_cursor_pos
26150 6BBF           83C4                   04  add	sp,*4
26151                                           !BCC_EOS
26152                                           ! 3585  while(count--!=0)
26153                                           ! 3586   {
26154 6BC2           EB           4F            jmp .22C
26155                       00006BC4            .22D:
26156                                           ! 3587    car=read_byte(seg,offset++);
26157                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26158 6BC4           8B46         12            mov	ax,$12[bp]
26159 6BC7           40                         inc	ax
26160 6BC8           8946         12            mov	$12[bp],ax
26161                                           ! Debug: list unsigned short = ax-1 (used reg = )
26162 6BCB           48                         dec	ax
26163 6BCC           50                         push	ax
26164                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26165 6BCD           FF76         10            push	$10[bp]
26166                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26167 6BD0           E8         0ED2            call	_read_byte
26168 6BD3           83C4                   04  add	sp,*4
26169                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26170 6BD6           8846         F9            mov	-7[bp],al
26171                                           !BCC_EOS
26172                                           ! 3588    if((flag&0x02)!=0)
26173                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26174 6BD9           8A46         04            mov	al,4[bp]
26175 6BDC           24                     02  and	al,*2
26176                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26177 6BDE           84C0                       test	al,al
26178 6BE0           74           15            je  	.22E
26179                       00006BE2            .22F:
26180                                           ! 3589     attr=read_byte(seg,offset++);
26181                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26182 6BE2           8B46         12            mov	ax,$12[bp]
26183 6BE5           40                         inc	ax
26184 6BE6           8946         12            mov	$12[bp],ax
26185                                           ! Debug: list unsigned short = ax-1 (used reg = )
26186 6BE9           48                         dec	ax
26187 6BEA           50                         push	ax
26188                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26189 6BEB           FF76         10            push	$10[bp]
26190                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26191 6BEE           E8         0EB4            call	_read_byte
26192 6BF1           83C4                   04  add	sp,*4
26193                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26194 6BF4           8846         08            mov	8[bp],al
26195                                           !BCC_EOS
26196                                           ! 3590    biosfn_write_teletype(car,page,attr,3);
26197                       00006BF7            .22E:
26198                                           ! Debug: list int = const 3 (used reg = )
26199 6BF7           B8                   0003  mov	ax,*3
26200 6BFA           50                         push	ax
26201                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26202 6BFB           8A46         08            mov	al,8[bp]
26203 6BFE           30E4                       xor	ah,ah
26204 6C00           50                         push	ax
26205                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26206 6C01           8A46         06            mov	al,6[bp]
26207 6C04           30E4                       xor	ah,ah
26208 6C06           50                         push	ax
26209                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26210 6C07           8A46         F9            mov	al,-7[bp]
26211 6C0A           30E4                       xor	ah,ah
26212 6C0C           50                         push	ax
26213                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26214 6C0D           E8         F197            call	_biosfn_write_teletype
26215 6C10           83C4                   08  add	sp,*8
26216                                           !BCC_EOS
26217                                           ! 3591   }
26218                                           ! 3592  if((flag&0x01)==0)
26219                       00006C13            .22C:
26220                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26221 6C13           8B46         0A            mov	ax,$A[bp]
26222 6C16           48                         dec	ax
26223 6C17           8946         0A            mov	$A[bp],ax
26224                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26225 6C1A           3D                   FFFF  cmp	ax,*-1
26226 6C1D           75           A5            jne	.22D
26227                       00006C1F            .230:
26228                       00006C1F            .22B:
26229                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26230 6C1F           8A46         04            mov	al,4[bp]
26231 6C22           24                     01  and	al,*1
26232                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26233 6C24           84C0                       test	al,al
26234 6C26           75           0F            jne 	.231
26235                       00006C28            .232:
26236                                           ! 3593   biosfn_set_cursor_pos(page,oldcurs);
26237                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26238 6C28           FF76         FC            push	-4[bp]
26239                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26240 6C2B           8A46         06            mov	al,6[bp]
26241 6C2E           30E4                       xor	ah,ah
26242 6C30           50                         push	ax
26243                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26244 6C31           E8         D62C            call	_biosfn_set_cursor_pos
26245 6C34           83C4                   04  add	sp,*4
26246                                           !BCC_EOS
26247                                           ! 3594 }
26248                       00006C37            .231:
26249 6C37           89EC                       mov	sp,bp
26250 6C39           5D                         pop	bp
26251 6C3A           C3                         ret
26252                                           ! 3595 #asm
26253                                           !BCC_ASM
26254                       00000008            _biosfn_write_string.count	set	8
26255                       0000000E            _biosfn_write_string.seg	set	$E
26256                       0000000C            _biosfn_write_string.col	set	$C
26257                       00000002            _biosfn_write_string.flag	set	2
26258                       00000006            _biosfn_write_string.attr	set	6
26259                       00000004            _biosfn_write_string.page	set	4
26260                       0000000A            _biosfn_write_string.row	set	$A
26261                       00000010            _biosfn_write_string.offset	set	$10
26262                       00006C3B            biosfn_group_1A:
26263 6C3B           3C                     00    cmp al, #0x00
26264 6C3D           74           05              je biosfn_read_display_code
26265 6C3F           3C                     01    cmp al, #0x01
26266 6C41           74           16              je biosfn_set_display_code
26267 6C43           C3                           ret
26268                       00006C44            biosfn_read_display_code:
26269 6C44           1E                           push ds
26270 6C45           50                           push ax
26271 6C46           B8                   0040    mov ax, # 0x40
26272 6C49           8ED8                         mov ds, ax
26273 6C4B           BB                   008A    mov bx, # 0x8A
26274 6C4E           8A07                         mov al, [bx]
26275 6C50           88C3                         mov bl, al
26276 6C52           30FF                         xor bh, bh
26277 6C54           58                           pop ax
26278 6C55           88E0                         mov al, ah
26279 6C57           1F                           pop ds
26280 6C58           C3                           ret
26281                       00006C59            biosfn_set_display_code:
26282 6C59           1E                           push ds
26283 6C5A           50                           push ax
26284 6C5B           53                           push bx
26285 6C5C           B8                   0040    mov ax, # 0x40
26286 6C5F           8ED8                         mov ds, ax
26287 6C61           89D8                         mov ax, bx
26288 6C63           BB                   008A    mov bx, # 0x8A
26289 6C66           8807                         mov [bx], al
26290 6C68           5B                           pop bx
26291 6C69           58                           pop ax
26292 6C6A           88E0                         mov al, ah
26293 6C6C           1F                           pop ds
26294 6C6D           C3                           ret
26295                                           ! 3629 endasm
26296                                           !BCC_ENDASM
26297                                           ! 3630 static void biosfn_read_state_info (BX,ES,DI)
26298                                           ! Register BX used in function biosfn_write_string
26299                                           ! 3631 Bit16u BX;Bit16u ES;Bit16u DI;
26300                       00006C6E            _biosfn_read_state_info:
26301                                           !BCC_EOS
26302                                           !BCC_EOS
26303                                           !BCC_EOS
26304                                           ! 3632 {
26305                                           ! 3633  write_word(ES,DI+0x00,&static_functionality);
26306 6C6E           55                         push	bp
26307 6C6F           89E5                       mov	bp,sp
26308                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26309 6C71           BB                   0F30  mov	bx,#_static_functionality
26310 6C74           53                         push	bx
26311                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26312 6C75           8B46         08            mov	ax,8[bp]
26313                                           ! Debug: list unsigned int = ax+0 (used reg = )
26314 6C78           50                         push	ax
26315                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26316 6C79           FF76         06            push	6[bp]
26317                                           ! Debug: func () void = write_word+0 (used reg = )
26318 6C7C           E8         0E64            call	_write_word
26319 6C7F           89EC                       mov	sp,bp
26320                                           !BCC_EOS
26321                                           ! 3634  write_word(ES,DI+0x02,0xC000);
26322                                           ! Debug: list unsigned int = const $C000 (used reg = )
26323 6C81           B8                   C000  mov	ax,#$C000
26324 6C84           50                         push	ax
26325                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26326 6C85           8B46         08            mov	ax,8[bp]
26327                                           ! Debug: list unsigned int = ax+2 (used reg = )
26328 6C88           40                         inc	ax
26329 6C89           40                         inc	ax
26330 6C8A           50                         push	ax
26331                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26332 6C8B           FF76         06            push	6[bp]
26333                                           ! Debug: func () void = write_word+0 (used reg = )
26334 6C8E           E8         0E52            call	_write_word
26335 6C91           89EC                       mov	sp,bp
26336                                           !BCC_EOS
26337                                           ! 3635  memcpyb(ES,DI+0x04,0x40,0x49,30);
26338                                           ! Debug: list int = const $1E (used reg = )
26339 6C93           B8                   001E  mov	ax,*$1E
26340 6C96           50                         push	ax
26341                                           ! Debug: list int = const $49 (used reg = )
26342 6C97           B8                   0049  mov	ax,*$49
26343 6C9A           50                         push	ax
26344                                           ! Debug: list int = const $40 (used reg = )
26345 6C9B           B8                   0040  mov	ax,*$40
26346 6C9E           50                         push	ax
26347                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26348 6C9F           8B46         08            mov	ax,8[bp]
26349                                           ! Debug: list unsigned int = ax+4 (used reg = )
26350 6CA2           05                   0004  add	ax,*4
26351 6CA5           50                         push	ax
26352                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26353 6CA6           FF76         06            push	6[bp]
26354                                           ! Debug: func () void = memcpyb+0 (used reg = )
26355 6CA9           E8         0D99            call	_memcpyb
26356 6CAC           89EC                       mov	sp,bp
26357                                           !BCC_EOS
26358                                           ! 3636  memcpyb(ES,DI+0x22,0x40,0x84,3);
26359                                           ! Debug: list int = const 3 (used reg = )
26360 6CAE           B8                   0003  mov	ax,*3
26361 6CB1           50                         push	ax
26362                                           ! Debug: list int = const $84 (used reg = )
26363 6CB2           B8                   0084  mov	ax,#$84
26364 6CB5           50                         push	ax
26365                                           ! Debug: list int = const $40 (used reg = )
26366 6CB6           B8                   0040  mov	ax,*$40
26367 6CB9           50                         push	ax
26368                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26369 6CBA           8B46         08            mov	ax,8[bp]
26370                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26371 6CBD           05                   0022  add	ax,*$22
26372 6CC0           50                         push	ax
26373                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26374 6CC1           FF76         06            push	6[bp]
26375                                           ! Debug: func () void = memcpyb+0 (used reg = )
26376 6CC4           E8         0D7E            call	_memcpyb
26377 6CC7           89EC                       mov	sp,bp
26378                                           !BCC_EOS
26379                                           ! 3637  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26380                                           ! Debug: list int = const $8A (used reg = )
26381 6CC9           B8                   008A  mov	ax,#$8A
26382 6CCC           50                         push	ax
26383                                           ! Debug: list int = const $40 (used reg = )
26384 6CCD           B8                   0040  mov	ax,*$40
26385 6CD0           50                         push	ax
26386                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26387 6CD1           E8         0DD1            call	_read_byte
26388 6CD4           89EC                       mov	sp,bp
26389                                           ! Debug: list unsigned char = al+0 (used reg = )
26390 6CD6           30E4                       xor	ah,ah
26391 6CD8           50                         push	ax
26392                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26393 6CD9           8B46         08            mov	ax,8[bp]
26394                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26395 6CDC           05                   0025  add	ax,*$25
26396 6CDF           50                         push	ax
26397                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26398 6CE0           FF76         06            push	6[bp]
26399                                           ! Debug: func () void = write_byte+0 (used reg = )
26400 6CE3           E8         0DE5            call	_write_byte
26401 6CE6           89EC                       mov	sp,bp
26402                                           !BCC_EOS
26403                                           ! 3638  write_byte(ES,DI+0x26,0);
26404                                           ! Debug: list int = const 0 (used reg = )
26405 6CE8           31C0                       xor	ax,ax
26406 6CEA           50                         push	ax
26407                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26408 6CEB           8B46         08            mov	ax,8[bp]
26409                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26410 6CEE           05                   0026  add	ax,*$26
26411 6CF1           50                         push	ax
26412                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26413 6CF2           FF76         06            push	6[bp]
26414                                           ! Debug: func () void = write_byte+0 (used reg = )
26415 6CF5           E8         0DD3            call	_write_byte
26416 6CF8           89EC                       mov	sp,bp
26417                                           !BCC_EOS
26418                                           ! 3639  write_byte(ES,DI+0x27,16);
26419                                           ! Debug: list int = const $10 (used reg = )
26420 6CFA           B8                   0010  mov	ax,*$10
26421 6CFD           50                         push	ax
26422                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26423 6CFE           8B46         08            mov	ax,8[bp]
26424                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26425 6D01           05                   0027  add	ax,*$27
26426 6D04           50                         push	ax
26427                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26428 6D05           FF76         06            push	6[bp]
26429                                           ! Debug: func () void = write_byte+0 (used reg = )
26430 6D08           E8         0DC0            call	_write_byte
26431 6D0B           89EC                       mov	sp,bp
26432                                           !BCC_EOS
26433                                           ! 3640  writ
26434                                           ! 3640 e_byte(ES,DI+0x28,0);
26435                                           ! Debug: list int = const 0 (used reg = )
26436 6D0D           31C0                       xor	ax,ax
26437 6D0F           50                         push	ax
26438                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26439 6D10           8B46         08            mov	ax,8[bp]
26440                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26441 6D13           05                   0028  add	ax,*$28
26442 6D16           50                         push	ax
26443                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26444 6D17           FF76         06            push	6[bp]
26445                                           ! Debug: func () void = write_byte+0 (used reg = )
26446 6D1A           E8         0DAE            call	_write_byte
26447 6D1D           89EC                       mov	sp,bp
26448                                           !BCC_EOS
26449                                           ! 3641  write_byte(ES,DI+0x29,8);
26450                                           ! Debug: list int = const 8 (used reg = )
26451 6D1F           B8                   0008  mov	ax,*8
26452 6D22           50                         push	ax
26453                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26454 6D23           8B46         08            mov	ax,8[bp]
26455                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26456 6D26           05                   0029  add	ax,*$29
26457 6D29           50                         push	ax
26458                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26459 6D2A           FF76         06            push	6[bp]
26460                                           ! Debug: func () void = write_byte+0 (used reg = )
26461 6D2D           E8         0D9B            call	_write_byte
26462 6D30           89EC                       mov	sp,bp
26463                                           !BCC_EOS
26464                                           ! 3642  write_byte(ES,DI+0x2a,2);
26465                                           ! Debug: list int = const 2 (used reg = )
26466 6D32           B8                   0002  mov	ax,*2
26467 6D35           50                         push	ax
26468                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26469 6D36           8B46         08            mov	ax,8[bp]
26470                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26471 6D39           05                   002A  add	ax,*$2A
26472 6D3C           50                         push	ax
26473                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26474 6D3D           FF76         06            push	6[bp]
26475                                           ! Debug: func () void = write_byte+0 (used reg = )
26476 6D40           E8         0D88            call	_write_byte
26477 6D43           89EC                       mov	sp,bp
26478                                           !BCC_EOS
26479                                           ! 3643  write_byte(ES,DI+0x2b,0);
26480                                           ! Debug: list int = const 0 (used reg = )
26481 6D45           31C0                       xor	ax,ax
26482 6D47           50                         push	ax
26483                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26484 6D48           8B46         08            mov	ax,8[bp]
26485                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26486 6D4B           05                   002B  add	ax,*$2B
26487 6D4E           50                         push	ax
26488                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26489 6D4F           FF76         06            push	6[bp]
26490                                           ! Debug: func () void = write_byte+0 (used reg = )
26491 6D52           E8         0D76            call	_write_byte
26492 6D55           89EC                       mov	sp,bp
26493                                           !BCC_EOS
26494                                           ! 3644  write_byte(ES,DI+0x2c,0);
26495                                           ! Debug: list int = const 0 (used reg = )
26496 6D57           31C0                       xor	ax,ax
26497 6D59           50                         push	ax
26498                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26499 6D5A           8B46         08            mov	ax,8[bp]
26500                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26501 6D5D           05                   002C  add	ax,*$2C
26502 6D60           50                         push	ax
26503                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26504 6D61           FF76         06            push	6[bp]
26505                                           ! Debug: func () void = write_byte+0 (used reg = )
26506 6D64           E8         0D64            call	_write_byte
26507 6D67           89EC                       mov	sp,bp
26508                                           !BCC_EOS
26509                                           ! 3645  write_byte(ES,DI+0x31,3);
26510                                           ! Debug: list int = const 3 (used reg = )
26511 6D69           B8                   0003  mov	ax,*3
26512 6D6C           50                         push	ax
26513                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26514 6D6D           8B46         08            mov	ax,8[bp]
26515                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26516 6D70           05                   0031  add	ax,*$31
26517 6D73           50                         push	ax
26518                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26519 6D74           FF76         06            push	6[bp]
26520                                           ! Debug: func () void = write_byte+0 (used reg = )
26521 6D77           E8         0D51            call	_write_byte
26522 6D7A           89EC                       mov	sp,bp
26523                                           !BCC_EOS
26524                                           ! 3646  write_byte(ES,DI+0x32,0);
26525                                           ! Debug: list int = const 0 (used reg = )
26526 6D7C           31C0                       xor	ax,ax
26527 6D7E           50                         push	ax
26528                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
26529 6D7F           8B46         08            mov	ax,8[bp]
26530                                           ! Debug: list unsigned int = ax+$32 (used reg = )
26531 6D82           05                   0032  add	ax,*$32
26532 6D85           50                         push	ax
26533                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26534 6D86           FF76         06            push	6[bp]
26535                                           ! Debug: func () void = write_byte+0 (used reg = )
26536 6D89           E8         0D3F            call	_write_byte
26537 6D8C           89EC                       mov	sp,bp
26538                                           !BCC_EOS
26539                                           ! 3647  memsetb(ES,DI+0x33,0,13);
26540                                           ! Debug: list int = const $D (used reg = )
26541 6D8E           B8                   000D  mov	ax,*$D
26542 6D91           50                         push	ax
26543                                           ! Debug: list int = const 0 (used reg = )
26544 6D92           31C0                       xor	ax,ax
26545 6D94           50                         push	ax
26546                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
26547 6D95           8B46         08            mov	ax,8[bp]
26548                                           ! Debug: list unsigned int = ax+$33 (used reg = )
26549 6D98           05                   0033  add	ax,*$33
26550 6D9B           50                         push	ax
26551                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
26552 6D9C           FF76         06            push	6[bp]
26553                                           ! Debug: func () void = memsetb+0 (used reg = )
26554 6D9F           E8         0C59            call	_memsetb
26555 6DA2           89EC                       mov	sp,bp
26556                                           !BCC_EOS
26557                                           ! 3648 }
26558 6DA4           5D                         pop	bp
26559 6DA5           C3                         ret
26560                                           ! 3649 static Bit16u biosfn_read_video_state_size2 (CX)
26561                                           ! Register BX used in function biosfn_read_state_info
26562                                           ! 3650      Bit16u CX;
26563                       00006DA6            _biosfn_read_video_state_size2:
26564                                           !BCC_EOS
26565                                           ! 3651 {
26566                                           ! 3652     Bit16u size;
26567                                           !BCC_EOS
26568                                           ! 3653     size = 0;
26569 6DA6           55                         push	bp
26570 6DA7           89E5                       mov	bp,sp
26571 6DA9           4C                         dec	sp
26572 6DAA           4C                         dec	sp
26573                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
26574 6DAB           31C0                       xor	ax,ax
26575 6DAD           8946         FE            mov	-2[bp],ax
26576                                           !BCC_EOS
26577                                           ! 3654     if (CX & 1) {
26578                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
26579 6DB0           8A46         04            mov	al,4[bp]
26580 6DB3           24                     01  and	al,*1
26581 6DB5           84C0                       test	al,al
26582 6DB7           74           09            je  	.233
26583                       00006DB9            .234:
26584                                           ! 3655         size += 0x46;
26585                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
26586 6DB9           8B46         FE            mov	ax,-2[bp]
26587 6DBC           05                   0046  add	ax,*$46
26588 6DBF           8946         FE            mov	-2[bp],ax
26589                                           !BCC_EOS
26590                                           ! 3656     }
26591                                           ! 3657     if (CX & 2) {
26592                       00006DC2            .233:
26593                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
26594 6DC2           8A46         04            mov	al,4[bp]
26595 6DC5           24                     02  and	al,*2
26596 6DC7           84C0                       test	al,al
26597 6DC9           74           09            je  	.235
26598                       00006DCB            .236:
26599                                           ! 3658         size += (5 + 8 + 5) * 2 + 6;
26600                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
26601 6DCB           8B46         FE            mov	ax,-2[bp]
26602 6DCE           05                   002A  add	ax,*$2A
26603 6DD1           8946         FE            mov	-2[bp],ax
26604                                           !BCC_EOS
26605                                           ! 3659     }
26606                                           ! 3660     if (CX & 4) {
26607                       00006DD4            .235:
26608                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
26609 6DD4           8A46         04            mov	al,4[bp]
26610 6DD7           24                     04  and	al,*4
26611 6DD9           84C0                       test	al,al
26612 6DDB           74           09            je  	.237
26613                       00006DDD            .238:
26614                                           ! 3661         size += 3 + 256 * 3 + 1;
26615                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
26616 6DDD           8B46         FE            mov	ax,-2[bp]
26617 6DE0           05                   0304  add	ax,#$304
26618 6DE3           8946         FE            mov	-2[bp],ax
26619                                           !BCC_EOS
26620                                           ! 3662 }
26621                                           ! 3663     return size;
26622                       00006DE6            .237:
26623 6DE6           8B46         FE            mov	ax,-2[bp]
26624 6DE9           89EC                       mov	sp,bp
26625 6DEB           5D                         pop	bp
26626 6DEC           C3                         ret
26627                                           !BCC_EOS
26628                                           ! 3664 }
26629                                           ! 3665 static void biosfn_read_video_state_size (CX, BX)
26630                                           ! 3666      Bit16u CX; Bit16u *BX;
26631                       00006DED            _biosfn_read_video_state_size:
26632                                           !BCC_EOS
26633                                           !BCC_EOS
26634                                           ! 3667 {
26635                                           ! 3668     Bit16u ss=get_SS();
26636 6DED           55                         push	bp
26637 6DEE           89E5                       mov	bp,sp
26638 6DF0           4C                         dec	sp
26639 6DF1           4C                         dec	sp
26640                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26641 6DF2           E8         0D3C            call	_get_SS
26642                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26643 6DF5           8946         FE            mov	-2[bp],ax
26644                                           !BCC_EOS
26645                                           ! 3669     write_word(ss, BX, biosfn_read_video_state_size2(CX));
26646                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
26647 6DF8           FF76         04            push	4[bp]
26648                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
26649 6DFB           E8         FFA8            call	_biosfn_read_video_state_size2
26650 6DFE           44                         inc	sp
26651 6DFF           44                         inc	sp
26652                                           ! Debug: list unsigned short = ax+0 (used reg = )
26653 6E00           50                         push	ax
26654                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
26655 6E01           FF76         06            push	6[bp]
26656                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26657 6E04           FF76         FE            push	-2[bp]
26658                                           ! Debug: func () void = write_word+0 (used reg = )
26659 6E07           E8         0CD9            call	_write_word
26660 6E0A           83C4                   06  add	sp,*6
26661                                           !BCC_EOS
26662                                           ! 3670 }
26663 6E0D           89EC                       mov	sp,bp
26664 6E0F           5D                         pop	bp
26665 6E10           C3                         ret
26666                                           ! 3671 static Bit16u biosfn_save_video_state (CX,ES,BX)
26667                                           ! 3672      Bit16u CX;Bit16u ES;Bit16u BX;
26668                       00006E11            _biosfn_save_video_state:
26669                                           !BCC_EOS
26670                                           !BCC_EOS
26671                                           !BCC_EOS
26672                                           ! 3673 {
26673                                           ! 3674     Bit16u i, v, crtc_addr, ar_index;
26674                                           !BCC_EOS
26675                                           ! 3675     crtc_addr = read_word(0x40, 0x63);
26676 6E11           55                         push	bp
26677 6E12           89E5                       mov	bp,sp
26678 6E14           83C4                   F8  add	sp,*-8
26679                                           ! Debug: list int = const $63 (used reg = )
26680 6E17           B8                   0063  mov	ax,*$63
26681 6E1A           50                         push	ax
26682                                           ! Debug: list int = const $40 (used reg = )
26683 6E1B           B8                   0040  mov	ax,*$40
26684 6E1E           50                         push	ax
26685                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26686 6E1F           E8         0C96            call	_read_word
26687 6E22           83C4                   04  add	sp,*4
26688                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
26689 6E25           8946         FA            mov	-6[bp],ax
26690                                           !BCC_EOS
26691                                           ! 3676     if (CX & 1) {
26692                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
26693 6E28           8A46         04            mov	al,4[bp]
26694 6E2B           24                     01  and	al,*1
26695 6E2D           84C0                       test	al,al
26696 6E2F         0F84         0266            beq 	.239
26697                       00006E33            .23A:
26698                                           ! 3677         write_byte(ES, BX, inb(0x3c4)); BX++;
26699                                           ! Debug: list int = const $3C4 (used reg = )
26700 6E33           B8                   03C4  mov	ax,#$3C4
26701 6E36           50                         push	ax
26702                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26703 6E37           E8         0CC1            call	_inb
26704 6E3A           44                         inc	sp
26705 6E3B           44                         inc	sp
26706                                           ! Debug: list unsigned char = al+0 (used reg = )
26707 6E3C           30E4                       xor	ah,ah
26708 6E3E           50                         push	ax
26709                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26710 6E3F           FF76         08            push	8[bp]
26711                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26712 6E42           FF76         06            push	6[bp]
26713                                           ! Debug: func () void = write_byte+0 (used reg = )
26714 6E45           E8         0C83            call	_write_byte
26715 6E48           83C4                   06  add	sp,*6
26716                                           !BCC_EOS
26717                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26718 6E4B           8B46         08            mov	ax,8[bp]
26719 6E4E           40                         inc	ax
26720 6E4F           8946         08            mov	8[bp],ax
26721                                           !BCC_EOS
26722                                           ! 3678         write_byte(ES, BX, inb(crtc_addr)); BX++;
26723                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
26724 6E52           FF76         FA            push	-6[bp]
26725                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26726 6E55           E8         0CA3            call	_inb
26727 6E58           44                         inc	sp
26728 6E59           44                         inc	sp
26729                                           ! Debug: list unsigned char = al+0 (used reg = )
26730 6E5A           30E4                       xor	ah,ah
26731 6E5C           50                         push	ax
26732                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26733 6E5D           FF76         08            push	8[bp]
26734                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26735 6E60           FF76         06            push	6[bp]
26736                                           ! Debug: func () void = write_byte+0 (used reg = )
26737 6E63           E8         0C65            call	_write_byte
26738 6E66           83C4                   06  add	sp,*6
26739                                           !BCC_EOS
26740                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26741 6E69           8B46         08            mov	ax,8[bp]
26742 6E6C           40                         inc	ax
26743 6E6D           8946         08            mov	8[bp],ax
26744                                           !BCC_EOS
26745                                           ! 3679         write_byte(ES, BX, inb(0x3ce)); BX++;
26746                                           ! Debug: list int = const $3CE (used reg = )
26747 6E70           B8                   03CE  mov	ax,#$3CE
26748 6E73           50                         push	ax
26749                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26750 6E74           E8         0C84            call	_inb
26751 6E77           44                         inc	sp
26752 6E78           44                         inc	sp
26753                                           ! Debug: list unsigned char = al+0 (used reg = )
26754 6E79           30E4                       xor	ah,ah
26755 6E7B           50                         push	ax
26756                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26757 6E7C           FF76         08            push	8[bp]
26758                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26759 6E7F           FF76         06            push	6[bp]
26760                                           ! Debug: func () void = write_byte+0 (used reg = )
26761 6E82           E8         0C46            call	_write_byte
26762 6E85           83C4                   06  add	sp,*6
26763                                           !BCC_EOS
26764                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26765 6E88           8B46         08            mov	ax,8[bp]
26766 6E8B           40                         inc	ax
26767 6E8C           8946         08            mov	8[bp],ax
26768                                           !BCC_EOS
26769                                           ! 3680         inb(0x3da);
26770                                           ! Debug: list int = const $3DA (used reg = )
26771 6E8F           B8                   03DA  mov	ax,#$3DA
26772 6E92           50                         push	ax
26773                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26774 6E93           E8         0C65            call	_inb
26775 6E96           44                         inc	sp
26776 6E97           44                         inc	sp
26777                                           !BCC_EOS
26778                                           ! 3681         ar_index = inb(0x3c0);
26779                                           ! Debug: list int = const $3C0 (used reg = )
26780 6E98           B8                   03C0  mov	ax,#$3C0
26781 6E9B           50                         push	ax
26782                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26783 6E9C           E8         0C5C            call	_inb
26784 6E9F           44                         inc	sp
26785 6EA0           44                         inc	sp
26786                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
26787 6EA1           30E4                       xor	ah,ah
26788 6EA3           8946         F8            mov	-8[bp],ax
26789                                           !BCC_EOS
26790                                           ! 3682         write_byte(ES, BX, ar_index); BX++;
26791                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
26792 6EA6           FF76         F8            push	-8[bp]
26793                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26794 6EA9           FF76         08            push	8[bp]
26795                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26796 6EAC           FF76         06            push	6[bp]
26797                                           ! Debug: func () void = write_byte+0 (used reg = )
26798 6EAF           E8         0C19            call	_write_byte
26799 6EB2           83C4                   06  add	sp,*6
26800                                           !BCC_EOS
26801                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26802 6EB5           8B46         08            mov	ax,8[bp]
26803 6EB8           40                         inc	ax
26804 6EB9           8946         08            mov	8[bp],ax
26805                                           !BCC_EOS
26806                                           ! 3683         write_byte(ES, BX, inb(0x3ca)); BX++;
26807                                           ! Debug: list int = const $3CA (used reg = )
26808 6EBC           B8                   03CA  mov	ax,#$3CA
26809 6EBF           50                         push	ax
26810                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26811 6EC0           E8         0C38            call	_inb
26812 6EC3           44                         inc	sp
26813 6EC4           44                         inc	sp
26814                                           ! Debug: list unsigned char = al+0 (used reg = )
26815 6EC5           30E4                       xor	ah,ah
26816 6EC7           50                         push	ax
26817                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26818 6EC8           FF76         08            push	8[bp]
26819                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26820 6ECB           FF76         06            push	6[bp]
26821                                           ! Debug: func () void = write_byte+0 (used reg = )
26822 6ECE           E8         0BFA            call	_write_byte
26823 6ED1           83C4                   06  add	sp,*6
26824                                           !BCC_EOS
26825                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26826 6ED4           8B46         08            mov	ax,8[bp]
26827 6ED7           40                         inc	ax
26828 6ED8           8946         08            mov	8[bp],ax
26829                                           !BCC_EOS
26830                                           ! 3684         for(i=1;i<=4;i++){
26831                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
26832 6EDB           B8                   0001  mov	ax,*1
26833 6EDE           8946         FE            mov	-2[bp],ax
26834                                           !BCC_EOS
26835                                           !BCC_EOS
26836 6EE1           EB           33            jmp .23D
26837                       00006EE3            .23E:
26838                                           ! 3685             outb(0x3c4, i);
26839                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26840 6EE3           FF76         FE            push	-2[bp]
26841                                           ! Debug: list int = const $3C4 (used reg = )
26842 6EE6           B8                   03C4  mov	ax,#$3C4
26843 6EE9           50                         push	ax
26844                                           ! Debug: func () void = outb+0 (used reg = )
26845 6EEA           E8         0C24            call	_outb
26846 6EED           83C4                   04  add	sp,*4
26847                                           !BCC_EOS
26848                                           ! 3686             write_byte(ES, BX, inb(0x3c5)); BX++;
26849                                           ! Debug: list int = const $3C5 (used reg = )
26850 6EF0           B8                   03C5  mov	ax,#$3C5
26851 6EF3           50                         push	ax
26852                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26853 6EF4           E8         0C04            call	_inb
26854 6EF7           44                         inc	sp
26855 6EF8           44                         inc	sp
26856                                           ! Debug: list unsigned char = al+0 (used reg = )
26857 6EF9           30E4                       xor	ah,ah
26858 6EFB           50                         push	ax
26859                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26860 6EFC           FF76         08            push	8[bp]
26861                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26862 6EFF           FF76         06            push	6[bp]
26863                                           ! Debug: func () void = write_byte+0 (used reg = )
26864 6F02           E8         0BC6            call	_write_byte
26865 6F05           83C4                   06  add	sp,*6
26866                                           !BCC_EOS
26867                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26868 6F08           8B46         08            mov	ax,8[bp]
26869 6F0B           40                         inc	ax
26870 6F0C           8946         08            mov	8[bp],ax
26871                                           !BCC_EOS
26872                                           ! 3687         }
26873                                           ! 3688         outb(0x3c4, 0);
26874                       00006F0F            .23C:
26875                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
26876 6F0F           8B46         FE            mov	ax,-2[bp]
26877 6F12           40                         inc	ax
26878 6F13           8946         FE            mov	-2[bp],ax
26879                       00006F16            .23D:
26880                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
26881 6F16           8B46         FE            mov	ax,-2[bp]
26882 6F19           3D                   0004  cmp	ax,*4
26883 6F1C           76           C5            jbe	.23E
26884                       00006F1E            .23F:
26885                       00006F1E            .23B:
26886                                           ! Debug: list int = const 0 (used reg = )
26887 6F1E           31C0                       xor	ax,ax
26888 6F20           50                         push	ax
26889                                           ! Debug: list int = const $3C4 (used reg = )
26890 6F21           B8                   03C4  mov	ax,#$3C4
26891 6F24           50                         push	ax
26892                                           ! Debug: func () void = outb+0 (used reg = )
26893 6F25           E8         0BE9            call	_outb
26894 6F28           83C4                   04  add	sp,*4
26895                                           !BCC_EOS
26896                                           ! 3689         write_byte(ES, BX, inb(0x3c5)); BX++;
26897                                           ! Debug: list int = const $3C5 (used reg = )
26898 6F2B           B8                   03C5  mov	ax,#$3C5
26899 6F2E           50                         push	ax
26900                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26901 6F2F           E8         0BC9            call	_inb
26902 6F32           44                         inc	sp
26903 6F33           44                         inc	sp
26904                                           ! Debug: list unsigned char = al+0 (used reg = )
26905 6F34           30E4                       xor	ah,ah
26906 6F36           50                         push	ax
26907                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26908 6F37           FF76         08            push	8[bp]
26909                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26910 6F3A           FF76         06            push	6[bp]
26911                                           ! Debug: func () void = write_byte+0 (used reg = )
26912 6F3D           E8         0B8B            call	_write_byte
26913 6F40           83C4                   06  add	sp,*6
26914                                           !BCC_EOS
26915                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26916 6F43           8B46         08            mov	ax,8[bp]
26917 6F46           40                         inc	ax
26918 6F47           8946         08            mov	8[bp],ax
26919                                           !BCC_EOS
26920                                           ! 3690         for(i=0;i<=0x18;i++) {
26921                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
26922 6F4A           31C0                       xor	ax,ax
26923 6F4C           8946         FE            mov	-2[bp],ax
26924                                           !BCC_EOS
26925                                           !BCC_EOS
26926 6F4F           EB           33            jmp .242
26927                       00006F51            .243:
26928                                           ! 3691             outb(crtc_addr,i);
26929                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26930 6F51           FF76         FE            push	-2[bp]
26931                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
26932 6F54           FF76         FA            push	-6[bp]
26933                                           ! Debug: func () void = outb+0 (used reg = )
26934 6F57           E8         0BB7            call	_outb
26935 6F5A           83C4                   04  add	sp,*4
26936                                           !BCC_EOS
26937                                           ! 3692             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
26938                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
26939 6F5D           8B46         FA            mov	ax,-6[bp]
26940                                           ! Debug: list unsigned int = ax+1 (used reg = )
26941 6F60           40                         inc	ax
26942 6F61           50                         push	ax
26943                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26944 6F62           E8         0B96            call	_inb
26945 6F65           44                         inc	sp
26946 6F66           44                         inc	sp
26947                                           ! Debug: list unsigned char = al+0 (used reg = )
26948 6F67           30E4                       xor	ah,ah
26949 6F69           50                         push	ax
26950                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26951 6F6A           FF76         08            push	8[bp]
26952                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26953 6F6D           FF76         06            push	6[bp]
26954                                           ! Debug: func () void = write_byte+0 (used reg = )
26955 6F70           E8         0B58            call	_write_byte
26956 6F73           83C4                   06  add	sp,*6
26957                                           !BCC_EOS
26958                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26959 6F76           8B46         08            mov	ax,8[bp]
26960 6F79           40                         inc	ax
26961 6F7A           8946         08            mov	8[bp],ax
26962                                           !BCC_EOS
26963                                           ! 3693         }
26964                                           ! 3694         for(i=0;i<=0x13;i++) {
26965                       00006F7D            .241:
26966                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
26967 6F7D           8B46         FE            mov	ax,-2[bp]
26968 6F80           40                         inc	ax
26969 6F81           8946         FE            mov	-2[bp],ax
26970                       00006F84            .242:
26971                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
26972 6F84           8B46         FE            mov	ax,-2[bp]
26973 6F87           3D                   0018  cmp	ax,*$18
26974 6F8A           76           C5            jbe	.243
26975                       00006F8C            .244:
26976                       00006F8C            .240:
26977                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
26978 6F8C           31C0                       xor	ax,ax
26979 6F8E           8946         FE            mov	-2[bp],ax
26980                                           !BCC_EOS
26981                                           !BCC_EOS
26982 6F91           EB           44            jmp .247
26983                       00006F93            .248:
26984                                           ! 3695             inb(0x3da);
26985                                           ! Debug: list int = const $3DA (used reg = )
26986 6F93           B8                   03DA  mov	ax,#$3DA
26987 6F96           50                         push	ax
26988                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26989 6F97           E8         0B61            call	_inb
26990 6F9A           44                         inc	sp
26991 6F9B           44                         inc	sp
26992                                           !BCC_EOS
26993                                           ! 3696             outb(0x3c0, i | (ar_index & 0x20));
26994                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
26995 6F9C           8A46         F8            mov	al,-8[bp]
26996 6F9F           24                     20  and	al,*$20
26997                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
26998                                           ! Debug: expression subtree swapping
26999 6FA1           30E4                       xor	ah,ah
27000 6FA3           0B46         FE            or	ax,-2[bp]
27001                                           ! Debug: list unsigned int = ax+0 (used reg = )
27002 6FA6           50                         push	ax
27003                                           ! Debug: list int = const $3C0 (used reg = )
27004 6FA7           B8                   03C0  mov	ax,#$3C0
27005 6FAA           50                         push	ax
27006                                           ! Debug: func () void = outb+0 (used reg = )
27007 6FAB           E8         0B63            call	_outb
27008 6FAE           83C4                   04  add	sp,*4
27009                                           !BCC_EOS
27010                                           ! 3697             write_byte(ES, BX, inb(0x3c1)); BX++;
27011                                           ! Debug: list int = const $3C1 (used reg = )
27012 6FB1           B8                   03C1  mov	ax,#$3C1
27013 6FB4           50                         push	ax
27014                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27015 6FB5           E8         0B43            call	_inb
27016 6FB8           44                         inc	sp
27017 6FB9           44                         inc	sp
27018                                           ! Debug: list unsigned char = al+0 (used reg = )
27019 6FBA           30E4                       xor	ah,ah
27020 6FBC           50                         push	ax
27021                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27022 6FBD           FF76         08            push	8[bp]
27023                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27024 6FC0           FF76         06            push	6[bp]
27025                                           ! Debug: func () void = write_byte+0 (used reg = )
27026 6FC3           E8         0B05            call	_write_byte
27027 6FC6           83C4                   06  add	sp,*6
27028                                           !BCC_EOS
27029                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27030 6FC9           8B46         08            mov	ax,8[bp]
27031 6FCC           40                         inc	ax
27032 6FCD           8946         08            mov	8[bp],ax
27033                                           !BCC_EOS
27034                                           ! 3698         }
27035                                           ! 3699         inb(0x3da);
27036                       00006FD0            .246:
27037                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27038 6FD0           8B46         FE            mov	ax,-2[bp]
27039 6FD3           40                         inc	ax
27040 6FD4           8946         FE            mov	-2[bp],ax
27041                       00006FD7            .247:
27042                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27043 6FD7           8B46         FE            mov	ax,-2[bp]
27044 6FDA           3D                   0013  cmp	ax,*$13
27045 6FDD           76           B4            jbe	.248
27046                       00006FDF            .249:
27047                       00006FDF            .245:
27048                                           ! Debug: list int = const $3DA (used reg = )
27049 6FDF           B8                   03DA  mov	ax,#$3DA
27050 6FE2           50                         push	ax
27051                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27052 6FE3           E8         0B15            call	_inb
27053 6FE6           44                         inc	sp
27054 6FE7           44                         inc	sp
27055                                           !BCC_EOS
27056                                           ! 3700         for(i=0;i<=8;i++) {
27057                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27058 6FE8           31C0                       xor	ax,ax
27059 6FEA           8946         FE            mov	-2[bp],ax
27060                                           !BCC_EOS
27061                                           !BCC_EOS
27062 6FED           EB           33            jmp .24C
27063                       00006FEF            .24D:
27064                                           ! 3701             outb(0x3ce,i);
27065                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27066 6FEF           FF76         FE            push	-2[bp]
27067                                           ! Debug: list int = const $3CE (used reg = )
27068 6FF2           B8                   03CE  mov	ax,#$3CE
27069 6FF5           50                         push	ax
27070                                           ! Debug: func () void = outb+0 (used reg = )
27071 6FF6           E8         0B18            call	_outb
27072 6FF9           83C4                   04  add	sp,*4
27073                                           !BCC_EOS
27074                                           ! 3702             write_byte(ES, BX, inb(0x3cf)); BX++;
27075                                           ! Debug: list int = const $3CF (used reg = )
27076 6FFC           B8                   03CF  mov	ax,#$3CF
27077 6FFF           50                         push	ax
27078                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27079 7000           E8         0AF8            call	_inb
27080 7003           44                         inc	sp
27081 7004           44                         inc	sp
27082                                           ! Debug: list unsigned char = al+0 (used reg = )
27083 7005           30E4                       xor	ah,ah
27084 7007           50                         push	ax
27085                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27086 7008           FF76         08            push	8[bp]
27087                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27088 700B           FF76         06            push	6[bp]
27089                                           ! Debug: func () void = write_byte+0 (used reg = )
27090 700E           E8         0ABA            call	_write_byte
27091 7011           83C4                   06  add	sp,*6
27092                                           !BCC_EOS
27093                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27094 7014           8B46         08            mov	ax,8[bp]
27095 7017           40                         inc	ax
27096 7018           8946         08            mov	8[bp],ax
27097                                           !BCC_EOS
27098                                           ! 3703         }
27099                                           ! 3704         write_word(ES, BX, crtc_addr); BX+= 2;
27100                       0000701B            .24B:
27101                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27102 701B           8B46         FE            mov	ax,-2[bp]
27103 701E           40                         inc	ax
27104 701F           8946         FE            mov	-2[bp],ax
27105                       00007022            .24C:
27106                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27107 7022           8B46         FE            mov	ax,-2[bp]
27108 7025           3D                   0008  cmp	ax,*8
27109 7028           76           C5            jbe	.24D
27110                       0000702A            .24E:
27111                       0000702A            .24A:
27112                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27113 702A           FF76         FA            push	-6[bp]
27114                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27115 702D           FF76         08            push	8[bp]
27116                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27117 7030           FF76         06            push	6[bp]
27118                                           ! Debug: func () void = write_word+0 (used reg = )
27119 7033           E8         0AAD            call	_write_word
27120 7036           83C4                   06  add	sp,*6
27121                                           !BCC_EOS
27122                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27123 7039           8B46         08            mov	ax,8[bp]
27124 703C           40                         inc	ax
27125 703D           40                         inc	ax
27126 703E           8946         08            mov	8[bp],ax
27127                                           !BCC_EOS
27128                                           ! 3705         write_byte(ES, BX, 0); BX++;
27129                                           ! Debug: list int = const 0 (used reg = )
27130 7041           31C0                       xor	ax,ax
27131 7043           50                         push	ax
27132                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27133 7044           FF76         08            push	8[bp]
27134                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27135 7047           FF76         06            push	6[bp]
27136                                           ! Debug: func () void = write_byte+0 (used reg = )
27137 704A           E8         0A7E            call	_write_byte
27138 704D           83C4                   06  add	sp,*6
27139                                           !BCC_EOS
27140                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27141 7050           8B46         08            mov	ax,8[bp]
27142 7053           40                         inc	ax
27143 7054           8946         08            mov	8[bp],ax
27144                                           !BCC_EOS
27145                                           ! 3706         write_byte(ES, BX, 0); BX++;
27146                                           ! Debug: list int = const 0 (used reg = )
27147 7057           31C0                       xor	ax,ax
27148 7059           50                         push	ax
27149                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27150 705A           FF76         08            push	8[bp]
27151                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27152 705D           FF76         06            push	6[bp]
27153                                           ! Debug: func () void = write_byte+0 (used reg = )
27154 7060           E8         0A68            call	_write_byte
27155 7063           83C4                   06  add	sp,*6
27156                                           !BCC_EOS
27157                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27158 7066           8B46         08            mov	ax,8[bp]
27159 7069           40                         inc	ax
27160 706A           8946         08            mov	8[bp],ax
27161                                           !BCC_EOS
27162                                           ! 3707         write_byte(ES, BX, 0); BX++;
27163                                           ! Debug: list int = const 0 (used reg = )
27164 706D           31C0                       xor	ax,ax
27165 706F           50                         push	ax
27166                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27167 7070           FF76         08            push	8[bp]
27168                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27169 7073           FF76         06            push	6[bp]
27170                                           ! Debug: func () void = write_byte+0 (used reg = )
27171 7076           E8         0A52            call	_write_byte
27172 7079           83C4                   06  add	sp,*6
27173                                           !BCC_EOS
27174                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27175 707C           8B46         08            mov	ax,8[bp]
27176 707F           40                         inc	ax
27177 7080           8946         08            mov	8[bp],ax
27178                                           !BCC_EOS
27179                                           ! 3708         write_byte(ES, BX, 0); BX++;
27180                                           ! Debug: list int = const 0 (used reg = )
27181 7083           31C0                       xor	ax,ax
27182 7085           50                         push	ax
27183                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27184 7086           FF76         08            push	8[bp]
27185                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27186 7089           FF76         06            push	6[bp]
27187                                           ! Debug: func () void = write_byte+0 (used reg = )
27188 708C           E8         0A3C            call	_write_byte
27189 708F           83C4                   06  add	sp,*6
27190                                           !BCC_EOS
27191                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27192 7092           8B46         08            mov	ax,8[bp]
27193 7095           40                         inc	ax
27194 7096           8946         08            mov	8[bp],ax
27195                                           !BCC_EOS
27196                                           ! 3709     }
27197                                           ! 3710     if (CX & 2) {
27198                       00007099            .239:
27199                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27200 7099           8A46         04            mov	al,4[bp]
27201 709C           24                     02  and	al,*2
27202 709E           84C0                       test	al,al
27203 70A0         0F84         0270            beq 	.24F
27204                       000070A4            .250:
27205                                           ! 3711         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27206                                           ! Debug: list int = const $49 (used reg = )
27207 70A4           B8                   0049  mov	ax,*$49
27208 70A7           50                         push	ax
27209                                           ! Debug: list int = const $40 (used reg = )
27210 70A8           B8                   0040  mov	ax,*$40
27211 70AB           50                         push	ax
27212                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27213 70AC           E8         09F6            call	_read_byte
27214 70AF           83C4                   04  add	sp,*4
27215                                           ! Debug: list unsigned char = al+0 (used reg = )
27216 70B2           30E4                       xor	ah,ah
27217 70B4           50                         push	ax
27218                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27219 70B5           FF76         08            push	8[bp]
27220                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27221 70B8           FF76         06            push	6[bp]
27222                                           ! Debug: func () void = write_byte+0 (used reg = )
27223 70BB           E8         0A0D            call	_write_byte
27224 70BE           83C4                   06  add	sp,*6
27225                                           !BCC_EOS
27226                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27227 70C1           8B46         08            mov	ax,8[bp]
27228 70C4           40                         inc	ax
27229 70C5           8946         08            mov	8[bp],ax
27230                                           !BCC_EOS
27231                                           ! 3712         write_word(ES, BX, read_word(0x40,
27232                                           ! 3712 0x4A)); BX += 2;
27233                                           ! Debug: list int = const $4A (used reg = )
27234 70C8           B8                   004A  mov	ax,*$4A
27235 70CB           50                         push	ax
27236                                           ! Debug: list int = const $40 (used reg = )
27237 70CC           B8                   0040  mov	ax,*$40
27238 70CF           50                         push	ax
27239                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27240 70D0           E8         09E5            call	_read_word
27241 70D3           83C4                   04  add	sp,*4
27242                                           ! Debug: list unsigned short = ax+0 (used reg = )
27243 70D6           50                         push	ax
27244                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27245 70D7           FF76         08            push	8[bp]
27246                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27247 70DA           FF76         06            push	6[bp]
27248                                           ! Debug: func () void = write_word+0 (used reg = )
27249 70DD           E8         0A03            call	_write_word
27250 70E0           83C4                   06  add	sp,*6
27251                                           !BCC_EOS
27252                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27253 70E3           8B46         08            mov	ax,8[bp]
27254 70E6           40                         inc	ax
27255 70E7           40                         inc	ax
27256 70E8           8946         08            mov	8[bp],ax
27257                                           !BCC_EOS
27258                                           ! 3713         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27259                                           ! Debug: list int = const $4C (used reg = )
27260 70EB           B8                   004C  mov	ax,*$4C
27261 70EE           50                         push	ax
27262                                           ! Debug: list int = const $40 (used reg = )
27263 70EF           B8                   0040  mov	ax,*$40
27264 70F2           50                         push	ax
27265                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27266 70F3           E8         09C2            call	_read_word
27267 70F6           83C4                   04  add	sp,*4
27268                                           ! Debug: list unsigned short = ax+0 (used reg = )
27269 70F9           50                         push	ax
27270                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27271 70FA           FF76         08            push	8[bp]
27272                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27273 70FD           FF76         06            push	6[bp]
27274                                           ! Debug: func () void = write_word+0 (used reg = )
27275 7100           E8         09E0            call	_write_word
27276 7103           83C4                   06  add	sp,*6
27277                                           !BCC_EOS
27278                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27279 7106           8B46         08            mov	ax,8[bp]
27280 7109           40                         inc	ax
27281 710A           40                         inc	ax
27282 710B           8946         08            mov	8[bp],ax
27283                                           !BCC_EOS
27284                                           ! 3714         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27285                                           ! Debug: list int = const $63 (used reg = )
27286 710E           B8                   0063  mov	ax,*$63
27287 7111           50                         push	ax
27288                                           ! Debug: list int = const $40 (used reg = )
27289 7112           B8                   0040  mov	ax,*$40
27290 7115           50                         push	ax
27291                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27292 7116           E8         099F            call	_read_word
27293 7119           83C4                   04  add	sp,*4
27294                                           ! Debug: list unsigned short = ax+0 (used reg = )
27295 711C           50                         push	ax
27296                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27297 711D           FF76         08            push	8[bp]
27298                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27299 7120           FF76         06            push	6[bp]
27300                                           ! Debug: func () void = write_word+0 (used reg = )
27301 7123           E8         09BD            call	_write_word
27302 7126           83C4                   06  add	sp,*6
27303                                           !BCC_EOS
27304                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27305 7129           8B46         08            mov	ax,8[bp]
27306 712C           40                         inc	ax
27307 712D           40                         inc	ax
27308 712E           8946         08            mov	8[bp],ax
27309                                           !BCC_EOS
27310                                           ! 3715         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27311                                           ! Debug: list int = const $84 (used reg = )
27312 7131           B8                   0084  mov	ax,#$84
27313 7134           50                         push	ax
27314                                           ! Debug: list int = const $40 (used reg = )
27315 7135           B8                   0040  mov	ax,*$40
27316 7138           50                         push	ax
27317                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27318 7139           E8         0969            call	_read_byte
27319 713C           83C4                   04  add	sp,*4
27320                                           ! Debug: list unsigned char = al+0 (used reg = )
27321 713F           30E4                       xor	ah,ah
27322 7141           50                         push	ax
27323                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27324 7142           FF76         08            push	8[bp]
27325                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27326 7145           FF76         06            push	6[bp]
27327                                           ! Debug: func () void = write_byte+0 (used reg = )
27328 7148           E8         0980            call	_write_byte
27329 714B           83C4                   06  add	sp,*6
27330                                           !BCC_EOS
27331                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27332 714E           8B46         08            mov	ax,8[bp]
27333 7151           40                         inc	ax
27334 7152           8946         08            mov	8[bp],ax
27335                                           !BCC_EOS
27336                                           ! 3716         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27337                                           ! Debug: list int = const $85 (used reg = )
27338 7155           B8                   0085  mov	ax,#$85
27339 7158           50                         push	ax
27340                                           ! Debug: list int = const $40 (used reg = )
27341 7159           B8                   0040  mov	ax,*$40
27342 715C           50                         push	ax
27343                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27344 715D           E8         0958            call	_read_word
27345 7160           83C4                   04  add	sp,*4
27346                                           ! Debug: list unsigned short = ax+0 (used reg = )
27347 7163           50                         push	ax
27348                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27349 7164           FF76         08            push	8[bp]
27350                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27351 7167           FF76         06            push	6[bp]
27352                                           ! Debug: func () void = write_word+0 (used reg = )
27353 716A           E8         0976            call	_write_word
27354 716D           83C4                   06  add	sp,*6
27355                                           !BCC_EOS
27356                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27357 7170           8B46         08            mov	ax,8[bp]
27358 7173           40                         inc	ax
27359 7174           40                         inc	ax
27360 7175           8946         08            mov	8[bp],ax
27361                                           !BCC_EOS
27362                                           ! 3717         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27363                                           ! Debug: list int = const $87 (used reg = )
27364 7178           B8                   0087  mov	ax,#$87
27365 717B           50                         push	ax
27366                                           ! Debug: list int = const $40 (used reg = )
27367 717C           B8                   0040  mov	ax,*$40
27368 717F           50                         push	ax
27369                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27370 7180           E8         0922            call	_read_byte
27371 7183           83C4                   04  add	sp,*4
27372                                           ! Debug: list unsigned char = al+0 (used reg = )
27373 7186           30E4                       xor	ah,ah
27374 7188           50                         push	ax
27375                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27376 7189           FF76         08            push	8[bp]
27377                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27378 718C           FF76         06            push	6[bp]
27379                                           ! Debug: func () void = write_byte+0 (used reg = )
27380 718F           E8         0939            call	_write_byte
27381 7192           83C4                   06  add	sp,*6
27382                                           !BCC_EOS
27383                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27384 7195           8B46         08            mov	ax,8[bp]
27385 7198           40                         inc	ax
27386 7199           8946         08            mov	8[bp],ax
27387                                           !BCC_EOS
27388                                           ! 3718         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27389                                           ! Debug: list int = const $88 (used reg = )
27390 719C           B8                   0088  mov	ax,#$88
27391 719F           50                         push	ax
27392                                           ! Debug: list int = const $40 (used reg = )
27393 71A0           B8                   0040  mov	ax,*$40
27394 71A3           50                         push	ax
27395                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27396 71A4           E8         08FE            call	_read_byte
27397 71A7           83C4                   04  add	sp,*4
27398                                           ! Debug: list unsigned char = al+0 (used reg = )
27399 71AA           30E4                       xor	ah,ah
27400 71AC           50                         push	ax
27401                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27402 71AD           FF76         08            push	8[bp]
27403                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27404 71B0           FF76         06            push	6[bp]
27405                                           ! Debug: func () void = write_byte+0 (used reg = )
27406 71B3           E8         0915            call	_write_byte
27407 71B6           83C4                   06  add	sp,*6
27408                                           !BCC_EOS
27409                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27410 71B9           8B46         08            mov	ax,8[bp]
27411 71BC           40                         inc	ax
27412 71BD           8946         08            mov	8[bp],ax
27413                                           !BCC_EOS
27414                                           ! 3719         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27415                                           ! Debug: list int = const $89 (used reg = )
27416 71C0           B8                   0089  mov	ax,#$89
27417 71C3           50                         push	ax
27418                                           ! Debug: list int = const $40 (used reg = )
27419 71C4           B8                   0040  mov	ax,*$40
27420 71C7           50                         push	ax
27421                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27422 71C8           E8         08DA            call	_read_byte
27423 71CB           83C4                   04  add	sp,*4
27424                                           ! Debug: list unsigned char = al+0 (used reg = )
27425 71CE           30E4                       xor	ah,ah
27426 71D0           50                         push	ax
27427                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27428 71D1           FF76         08            push	8[bp]
27429                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27430 71D4           FF76         06            push	6[bp]
27431                                           ! Debug: func () void = write_byte+0 (used reg = )
27432 71D7           E8         08F1            call	_write_byte
27433 71DA           83C4                   06  add	sp,*6
27434                                           !BCC_EOS
27435                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27436 71DD           8B46         08            mov	ax,8[bp]
27437 71E0           40                         inc	ax
27438 71E1           8946         08            mov	8[bp],ax
27439                                           !BCC_EOS
27440                                           ! 3720         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27441                                           ! Debug: list int = const $60 (used reg = )
27442 71E4           B8                   0060  mov	ax,*$60
27443 71E7           50                         push	ax
27444                                           ! Debug: list int = const $40 (used reg = )
27445 71E8           B8                   0040  mov	ax,*$40
27446 71EB           50                         push	ax
27447                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27448 71EC           E8         08C9            call	_read_word
27449 71EF           83C4                   04  add	sp,*4
27450                                           ! Debug: list unsigned short = ax+0 (used reg = )
27451 71F2           50                         push	ax
27452                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27453 71F3           FF76         08            push	8[bp]
27454                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27455 71F6           FF76         06            push	6[bp]
27456                                           ! Debug: func () void = write_word+0 (used reg = )
27457 71F9           E8         08E7            call	_write_word
27458 71FC           83C4                   06  add	sp,*6
27459                                           !BCC_EOS
27460                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27461 71FF           8B46         08            mov	ax,8[bp]
27462 7202           40                         inc	ax
27463 7203           40                         inc	ax
27464 7204           8946         08            mov	8[bp],ax
27465                                           !BCC_EOS
27466                                           ! 3721         for(i=0;i<8;i++) {
27467                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27468 7207           31C0                       xor	ax,ax
27469 7209           8946         FE            mov	-2[bp],ax
27470                                           !BCC_EOS
27471                                           !BCC_EOS
27472 720C           EB           2F            jmp .253
27473                       0000720E            .254:
27474                                           ! 3722             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27475                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27476                                           ! Debug: expression subtree swapping
27477 720E           8B46         FE            mov	ax,-2[bp]
27478 7211           D1E0                       shl	ax,*1
27479                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27480                                           ! Debug: expression subtree swapping
27481                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27482 7213           05                   0050  add	ax,*$50
27483 7216           50                         push	ax
27484                                           ! Debug: list int = const $40 (used reg = )
27485 7217           B8                   0040  mov	ax,*$40
27486 721A           50                         push	ax
27487                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27488 721B           E8         089A            call	_read_word
27489 721E           83C4                   04  add	sp,*4
27490                                           ! Debug: list unsigned short = ax+0 (used reg = )
27491 7221           50                         push	ax
27492                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27493 7222           FF76         08            push	8[bp]
27494                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27495 7225           FF76         06            push	6[bp]
27496                                           ! Debug: func () void = write_word+0 (used reg = )
27497 7228           E8         08B8            call	_write_word
27498 722B           83C4                   06  add	sp,*6
27499                                           !BCC_EOS
27500                                           ! 3723             BX += 2;
27501                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27502 722E           8B46         08            mov	ax,8[bp]
27503 7231           40                         inc	ax
27504 7232           40                         inc	ax
27505 7233           8946         08            mov	8[bp],ax
27506                                           !BCC_EOS
27507                                           ! 3724         }
27508                                           ! 3725         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27509                       00007236            .252:
27510                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27511 7236           8B46         FE            mov	ax,-2[bp]
27512 7239           40                         inc	ax
27513 723A           8946         FE            mov	-2[bp],ax
27514                       0000723D            .253:
27515                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27516 723D           8B46         FE            mov	ax,-2[bp]
27517 7240           3D                   0008  cmp	ax,*8
27518 7243           72           C9            jb 	.254
27519                       00007245            .255:
27520                       00007245            .251:
27521                                           ! Debug: list int = const $4E (used reg = )
27522 7245           B8                   004E  mov	ax,*$4E
27523 7248           50                         push	ax
27524                                           ! Debug: list int = const $40 (used reg = )
27525 7249           B8                   0040  mov	ax,*$40
27526 724C           50                         push	ax
27527                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27528 724D           E8         0868            call	_read_word
27529 7250           83C4                   04  add	sp,*4
27530                                           ! Debug: list unsigned short = ax+0 (used reg = )
27531 7253           50                         push	ax
27532                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27533 7254           FF76         08            push	8[bp]
27534                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27535 7257           FF76         06            push	6[bp]
27536                                           ! Debug: func () void = write_word+0 (used reg = )
27537 725A           E8         0886            call	_write_word
27538 725D           83C4                   06  add	sp,*6
27539                                           !BCC_EOS
27540                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27541 7260           8B46         08            mov	ax,8[bp]
27542 7263           40                         inc	ax
27543 7264           40                         inc	ax
27544 7265           8946         08            mov	8[bp],ax
27545                                           !BCC_EOS
27546                                           ! 3726         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
27547                                           ! Debug: list int = const $62 (used reg = )
27548 7268           B8                   0062  mov	ax,*$62
27549 726B           50                         push	ax
27550                                           ! Debug: list int = const $40 (used reg = )
27551 726C           B8                   0040  mov	ax,*$40
27552 726F           50                         push	ax
27553                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27554 7270           E8         0832            call	_read_byte
27555 7273           83C4                   04  add	sp,*4
27556                                           ! Debug: list unsigned char = al+0 (used reg = )
27557 7276           30E4                       xor	ah,ah
27558 7278           50                         push	ax
27559                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27560 7279           FF76         08            push	8[bp]
27561                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27562 727C           FF76         06            push	6[bp]
27563                                           ! Debug: func () void = write_byte+0 (used reg = )
27564 727F           E8         0849            call	_write_byte
27565 7282           83C4                   06  add	sp,*6
27566                                           !BCC_EOS
27567                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27568 7285           8B46         08            mov	ax,8[bp]
27569 7288           40                         inc	ax
27570 7289           8946         08            mov	8[bp],ax
27571                                           !BCC_EOS
27572                                           ! 3727         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
27573                                           ! Debug: list int = const $7C (used reg = )
27574 728C           B8                   007C  mov	ax,*$7C
27575 728F           50                         push	ax
27576                                           ! Debug: list int = const 0 (used reg = )
27577 7290           31C0                       xor	ax,ax
27578 7292           50                         push	ax
27579                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27580 7293           E8         0822            call	_read_word
27581 7296           83C4                   04  add	sp,*4
27582                                           ! Debug: list unsigned short = ax+0 (used reg = )
27583 7299           50                         push	ax
27584                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27585 729A           FF76         08            push	8[bp]
27586                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27587 729D           FF76         06            push	6[bp]
27588                                           ! Debug: func () void = write_word+0 (used reg = )
27589 72A0           E8         0840            call	_write_word
27590 72A3           83C4                   06  add	sp,*6
27591                                           !BCC_EOS
27592                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27593 72A6           8B46         08            mov	ax,8[bp]
27594 72A9           40                         inc	ax
27595 72AA           40                         inc	ax
27596 72AB           8946         08            mov	8[bp],ax
27597                                           !BCC_EOS
27598                                           ! 3728         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
27599                                           ! Debug: list int = const $7E (used reg = )
27600 72AE           B8                   007E  mov	ax,*$7E
27601 72B1           50                         push	ax
27602                                           ! Debug: list int = const 0 (used reg = )
27603 72B2           31C0                       xor	ax,ax
27604 72B4           50                         push	ax
27605                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27606 72B5           E8         0800            call	_read_word
27607 72B8           83C4                   04  add	sp,*4
27608                                           ! Debug: list unsigned short = ax+0 (used reg = )
27609 72BB           50                         push	ax
27610                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27611 72BC           FF76         08            push	8[bp]
27612                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27613 72BF           FF76         06            push	6[bp]
27614                                           ! Debug: func () void = write_word+0 (used reg = )
27615 72C2           E8         081E            call	_write_word
27616 72C5           83C4                   06  add	sp,*6
27617                                           !BCC_EOS
27618                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27619 72C8           8B46         08            mov	ax,8[bp]
27620 72CB           40                         inc	ax
27621 72CC           40                         inc	ax
27622 72CD           8946         08            mov	8[bp],ax
27623                                           !BCC_EOS
27624                                           ! 3729         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
27625                                           ! Debug: list int = const $10C (used reg = )
27626 72D0           B8                   010C  mov	ax,#$10C
27627 72D3           50                         push	ax
27628                                           ! Debug: list int = const 0 (used reg = )
27629 72D4           31C0                       xor	ax,ax
27630 72D6           50                         push	ax
27631                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27632 72D7           E8         07DE            call	_read_word
27633 72DA           83C4                   04  add	sp,*4
27634                                           ! Debug: list unsigned short = ax+0 (used reg = )
27635 72DD           50                         push	ax
27636                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27637 72DE           FF76         08            push	8[bp]
27638                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27639 72E1           FF76         06            push	6[bp]
27640                                           ! Debug: func () void = write_word+0 (used reg = )
27641 72E4           E8         07FC            call	_write_word
27642 72E7           83C4                   06  add	sp,*6
27643                                           !BCC_EOS
27644                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27645 72EA           8B46         08            mov	ax,8[bp]
27646 72ED           40                         inc	ax
27647 72EE           40                         inc	ax
27648 72EF           8946         08            mov	8[bp],ax
27649                                           !BCC_EOS
27650                                           ! 3730         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
27651                                           ! Debug: list int = const $10E (used reg = )
27652 72F2           B8                   010E  mov	ax,#$10E
27653 72F5           50                         push	ax
27654                                           ! Debug: list int = const 0 (used reg = )
27655 72F6           31C0                       xor	ax,ax
27656 72F8           50                         push	ax
27657                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27658 72F9           E8         07BC            call	_read_word
27659 72FC           83C4                   04  add	sp,*4
27660                                           ! Debug: list unsigned short = ax+0 (used reg = )
27661 72FF           50                         push	ax
27662                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27663 7300           FF76         08            push	8[bp]
27664                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27665 7303           FF76         06            push	6[bp]
27666                                           ! Debug: func () void = write_word+0 (used reg = )
27667 7306           E8         07DA            call	_write_word
27668 7309           83C4                   06  add	sp,*6
27669                                           !BCC_EOS
27670                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27671 730C           8B46         08            mov	ax,8[bp]
27672 730F           40                         inc	ax
27673 7310           40                         inc	ax
27674 7311           8946         08            mov	8[bp],ax
27675                                           !BCC_EOS
27676                                           ! 3731     }
27677                                           ! 3732     if (CX & 4) {
27678                       00007314            .24F:
27679                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
27680 7314           8A46         04            mov	al,4[bp]
27681 7317           24                     04  and	al,*4
27682 7319           84C0                       test	al,al
27683 731B         0F84         00B5            beq 	.256
27684                       0000731F            .257:
27685                                           ! 3733         write_byte(ES, BX, inb(0x3c7)); BX++;
27686                                           ! Debug: list int = const $3C7 (used reg = )
27687 731F           B8                   03C7  mov	ax,#$3C7
27688 7322           50                         push	ax
27689                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27690 7323           E8         07D5            call	_inb
27691 7326           44                         inc	sp
27692 7327           44                         inc	sp
27693                                           ! Debug: list unsigned char = al+0 (used reg = )
27694 7328           30E4                       xor	ah,ah
27695 732A           50                         push	ax
27696                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27697 732B           FF76         08            push	8[bp]
27698                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27699 732E           FF76         06            push	6[bp]
27700                                           ! Debug: func () void = write_byte+0 (used reg = )
27701 7331           E8         0797            call	_write_byte
27702 7334           83C4                   06  add	sp,*6
27703                                           !BCC_EOS
27704                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27705 7337           8B46         08            mov	ax,8[bp]
27706 733A           40                         inc	ax
27707 733B           8946         08            mov	8[bp],ax
27708                                           !BCC_EOS
27709                                           ! 3734         write_byte(ES, BX, inb(0x3c8)); BX++;
27710                                           ! Debug: list int = const $3C8 (used reg = )
27711 733E           B8                   03C8  mov	ax,#$3C8
27712 7341           50                         push	ax
27713                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27714 7342           E8         07B6            call	_inb
27715 7345           44                         inc	sp
27716 7346           44                         inc	sp
27717                                           ! Debug: list unsigned char = al+0 (used reg = )
27718 7347           30E4                       xor	ah,ah
27719 7349           50                         push	ax
27720                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27721 734A           FF76         08            push	8[bp]
27722                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27723 734D           FF76         06            push	6[bp]
27724                                           ! Debug: func () void = write_byte+0 (used reg = )
27725 7350           E8         0778            call	_write_byte
27726 7353           83C4                   06  add	sp,*6
27727                                           !BCC_EOS
27728                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27729 7356           8B46         08            mov	ax,8[bp]
27730 7359           40                         inc	ax
27731 735A           8946         08            mov	8[bp],ax
27732                                           !BCC_EOS
27733                                           ! 3735         write_byte(ES, BX, inb(0x3c6)); BX++;
27734                                           ! Debug: list int = const $3C6 (used reg = )
27735 735D           B8                   03C6  mov	ax,#$3C6
27736 7360           50                         push	ax
27737                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27738 7361           E8         0797            call	_inb
27739 7364           44                         inc	sp
27740 7365           44                         inc	sp
27741                                           ! Debug: list unsigned char = al+0 (used reg = )
27742 7366           30E4                       xor	ah,ah
27743 7368           50                         push	ax
27744                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27745 7369           FF76         08            push	8[bp]
27746                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27747 736C           FF76         06            push	6[bp]
27748                                           ! Debug: func () void = write_byte+0 (used reg = )
27749 736F           E8         0759            call	_write_byte
27750 7372           83C4                   06  add	sp,*6
27751                                           !BCC_EOS
27752                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27753 7375           8B46         08            mov	ax,8[bp]
27754 7378           40                         inc	ax
27755 7379           8946         08            mov	8[bp],ax
27756                                           !BCC_EOS
27757                                           ! 3736         outb(0x3c8,0x00);
27758                                           ! Debug: list int = const 0 (used reg = )
27759 737C           31C0                       xor	ax,ax
27760 737E           50                         push	ax
27761                                           ! Debug: list int = const $3C8 (used reg = )
27762 737F           B8                   03C8  mov	ax,#$3C8
27763 7382           50                         push	ax
27764                                           ! Debug: func () void = outb+0 (used reg = )
27765 7383           E8         078B            call	_outb
27766 7386           83C4                   04  add	sp,*4
27767                                           !BCC_EOS
27768                                           ! 3737         for(i=0;i<256*3;i++) {
27769                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27770 7389           31C0                       xor	ax,ax
27771 738B           8946         FE            mov	-2[bp],ax
27772                                           !BCC_EOS
27773                                           !BCC_EOS
27774 738E           EB           26            jmp .25A
27775                       00007390            .25B:
27776                                           ! 3738             write_byte(ES, BX, inb(0x3c9)); BX++;
27777                                           ! Debug: list int = const $3C9 (used reg = )
27778 7390           B8                   03C9  mov	ax,#$3C9
27779 7393           50                         push	ax
27780                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27781 7394           E8         0764            call	_inb
27782 7397           44                         inc	sp
27783 7398           44                         inc	sp
27784                                           ! Debug: list unsigned char = al+0 (used reg = )
27785 7399           30E4                       xor	ah,ah
27786 739B           50                         push	ax
27787                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27788 739C           FF76         08            push	8[bp]
27789                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27790 739F           FF76         06            push	6[bp]
27791                                           ! Debug: func () void = write_byte+0 (used reg = )
27792 73A2           E8         0726            call	_write_byte
27793 73A5           83C4                   06  add	sp,*6
27794                                           !BCC_EOS
27795                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27796 73A8           8B46         08            mov	ax,8[bp]
27797 73AB           40                         inc	ax
27798 73AC           8946         08            mov	8[bp],ax
27799                                           !BCC_EOS
27800                                           ! 3739         }
27801                                           ! 3740         write_byte(ES, BX, 0); BX++;
27802                       000073AF            .259:
27803                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27804 73AF           8B46         FE            mov	ax,-2[bp]
27805 73B2           40                         inc	ax
27806 73B3           8946         FE            mov	-2[bp],ax
27807                       000073B6            .25A:
27808                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
27809 73B6           8B46         FE            mov	ax,-2[bp]
27810 73B9           3D                   0300  cmp	ax,#$300
27811 73BC           72           D2            jb 	.25B
27812                       000073BE            .25C:
27813                       000073BE            .258:
27814                                           ! Debug: list int = const 0 (used reg = )
27815 73BE           31C0                       xor	ax,ax
27816 73C0           50                         push	ax
27817                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27818 73C1           FF76         08            push	8[bp]
27819                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27820 73C4           FF76         06            push	6[bp]
27821                                           ! Debug: func () void = write_byte+0 (used reg = )
27822 73C7           E8         0701            call	_write_byte
27823 73CA           83C4                   06  add	sp,*6
27824                                           !BCC_EOS
27825                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27826 73CD           8B46         08            mov	ax,8[bp]
27827 73D0           40                         inc	ax
27828 73D1           8946         08            mov	8[bp],ax
27829                                           !BCC_EOS
27830                                           ! 3741     }
27831                                           ! 3742     return BX;
27832                       000073D4            .256:
27833 73D4           8B46         08            mov	ax,8[bp]
27834 73D7           89EC                       mov	sp,bp
27835 73D9           5D                         pop	bp
27836 73DA           C3                         ret
27837                                           !BCC_EOS
27838                                           ! 3743 }
27839                                           ! 3744 static Bit16u biosfn_restore_video_state (CX,ES,BX)
27840                                           ! 3745      Bit16u CX;Bit16u ES;Bit16u BX;
27841                       000073DB            _biosfn_restore_video_state:
27842                                           !BCC_EOS
27843                                           !BCC_EOS
27844                                           !BCC_EOS
27845                                           ! 3746 {
27846                                           ! 3747     Bit16u i, crtc_addr, v, addr1, ar_index;
27847                                           !BCC_EOS
27848                                           ! 3748     if (CX & 1) {
27849 73DB           55                         push	bp
27850 73DC           89E5                       mov	bp,sp
27851 73DE           83C4                   F6  add	sp,*-$A
27852                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
27853 73E1           8A46         04            mov	al,4[bp]
27854 73E4           24                     01  and	al,*1
27855 73E6           84C0                       test	al,al
27856 73E8         0F84         02AA            beq 	.25D
27857                       000073EC            .25E:
27858                                           ! 3749         inb(0x3da);
27859                                           ! Debug: list int = const $3DA (used reg = )
27860 73EC           B8                   03DA  mov	ax,#$3DA
27861 73EF           50                         push	ax
27862                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27863 73F0           E8         0708            call	_inb
27864 73F3           44                         inc	sp
27865 73F4           44                         inc	sp
27866                                           !BCC_EOS
27867                                           ! 3750         crtc_addr = read_word(ES, BX + 0x40);
27868                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
27869 73F5           8B46         08            mov	ax,8[bp]
27870                                           ! Debug: list unsigned int = ax+$40 (used reg = )
27871 73F8           05                   0040  add	ax,*$40
27872 73FB           50                         push	ax
27873                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27874 73FC           FF76         06            push	6[bp]
27875                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27876 73FF           E8         06B6            call	_read_word
27877 7402           83C4                   04  add	sp,*4
27878                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
27879 7405           8946         FC            mov	-4[bp],ax
27880                                           !BCC_EOS
27881                                           ! 3751         addr1 = BX;
27882                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
27883 7408           8B46         08            mov	ax,8[bp]
27884 740B           8946         F8            mov	-8[bp],ax
27885                                           !BCC_EOS
27886                                           ! 3752         BX += 5;
27887                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
27888 740E           8B46         08            mov	ax,8[bp]
27889 7411           05                   0005  add	ax,*5
27890 7414           8946         08            mov	8[bp],ax
27891                                           !BCC_EOS
27892                                           ! 3753         for(i=1;i<=4;i++){
27893                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
27894 7417           B8                   0001  mov	ax,*1
27895 741A           8946         FE            mov	-2[bp],ax
27896                                           !BCC_EOS
27897                                           !BCC_EOS
27898 741D           EB           34            jmp .261
27899                       0000741F            .262:
27900                                           ! 3754             outb(0x3c4, i);
27901                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
27902 741F           FF76         FE            push	-2[bp]
27903                                           ! Debug: list int = const $3C4 (used reg = )
27904 7422           B8                   03C4  mov	ax,#$3C4
27905 7425           50                         push	ax
27906                                           ! Debug: func () void = outb+0 (used reg = )
27907 7426           E8         06E8            call	_outb
27908 7429           83C4                   04  add	sp,*4
27909                                           !BCC_EOS
27910                                           ! 3755             outb(0x3c5, read_byte(ES, BX)); BX++;
27911                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27912 742C           FF76         08            push	8[bp]
27913                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27914 742F           FF76         06            push	6[bp]
27915                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27916 7432           E8         0670            call	_read_byte
27917 7435           83C4                   04  add	sp,*4
27918                                           ! Debug: list unsigned char = al+0 (used reg = )
27919 7438           30E4                       xor	ah,ah
27920 743A           50                         push	ax
27921                                           ! Debug: list int = const $3C5 (used reg = )
27922 743B           B8                   03C5  mov	ax,#$3C5
27923 743E           50                         push	ax
27924                                           ! Debug: func () void = outb+0 (used reg = )
27925 743F           E8         06CF            call	_outb
27926 7442           83C4                   04  add	sp,*4
27927                                           !BCC_EOS
27928                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
27929 7445           8B46         08            mov	ax,8[bp]
27930 7448           40                         inc	ax
27931 7449           8946         08            mov	8[bp],ax
27932                                           !BCC_EOS
27933                                           ! 3756         }
27934                                           ! 3757         outb(0x3c4, 0);
27935                       0000744C            .260:
27936                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
27937 744C           8B46         FE            mov	ax,-2[bp]
27938 744F           40                         inc	ax
27939 7450           8946         FE            mov	-2[bp],ax
27940                       00007453            .261:
27941                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
27942 7453           8B46         FE            mov	ax,-2[bp]
27943 7456           3D                   0004  cmp	ax,*4
27944 7459           76           C4            jbe	.262
27945                       0000745B            .263:
27946                       0000745B            .25F:
27947                                           ! Debug: list int = const 0 (used reg = )
27948 745B           31C0                       xor	ax,ax
27949 745D           50                         push	ax
27950                                           ! Debug: list int = const $3C4 (used reg = )
27951 745E           B8                   03C4  mov	ax,#$3C4
27952 7461           50                         push	ax
27953                                           ! Debug: func () void = outb+0 (used reg = )
27954 7462           E8         06AC            call	_outb
27955 7465           83C4                   04  add	sp,*4
27956                                           !BCC_EOS
27957                                           ! 3758         outb(0x3c5, read_byte(ES, BX)); BX++;
27958                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27959 7468           FF76         08            push	8[bp]
27960                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27961 746B           FF76         06            push	6[bp]
27962                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27963 746E           E8         0634            call	_read_byte
27964 7471           83C4                   04  add	sp,*4
27965                                           ! Debug: list unsigned char = al+0 (used reg = )
27966 7474           30E4                       xor	ah,ah
27967 7476           50                         push	ax
27968                                           ! Debug: list int = const $3C5 (used reg = )
27969 7477           B8                   03C5  mov	ax,#$3C5
27970 747A           50                         push	ax
27971                                           ! Debug: func () void = outb+0 (used reg = )
27972 747B           E8         0693            call	_outb
27973 747E           83C4                   04  add	sp,*4
27974                                           !BCC_EOS
27975                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
27976 7481           8B46         08            mov	ax,8[bp]
27977 7484           40                         inc	ax
27978 7485           8946         08            mov	8[bp],ax
27979                                           !BCC_EOS
27980                                           ! 3759         outw(crtc_addr,0x0011);
27981                                           ! Debug: list int = const $11 (used reg = )
27982 7488           B8                   0011  mov	ax,*$11
27983 748B           50                         push	ax
27984                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
27985 748C           FF76         FC            push	-4[bp]
27986                                           ! Debug: func () void = outw+0 (used reg = )
27987 748F           E8         068F            call	_outw
27988 7492           83C4                   04  add	sp,*4
27989                                           !BCC_EOS
27990                                           ! 3760         for(i=0;i<=0x18;i++) {
27991                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
27992 7495           31C0                       xor	ax,ax
27993 7497           8946         FE            mov	-2[bp],ax
27994                                           !BCC_EOS
27995                                           !BCC_EOS
27996 749A           EB           3C            jmp .266
27997                       0000749C            .267:
27998                                           ! 3761             if (i != 0x11) {
27999                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28000 749C           8B46         FE            mov	ax,-2[bp]
28001 749F           3D                   0011  cmp	ax,*$11
28002 74A2           74           26            je  	.268
28003                       000074A4            .269:
28004                                           ! 3762                 outb(crtc_addr,i);
28005                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28006 74A4           FF76         FE            push	-2[bp]
28007                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28008 74A7           FF76         FC            push	-4[bp]
28009                                           ! Debug: func () void = outb+0 (used reg = )
28010 74AA           E8         0664            call	_outb
28011 74AD           83C4                   04  add	sp,*4
28012                                           !BCC_EOS
28013                                           ! 3763                 outb(crtc_addr+1, read_byte(ES, BX));
28014                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28015 74B0           FF76         08            push	8[bp]
28016                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28017 74B3           FF76         06            push	6[bp]
28018                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28019 74B6           E8         05EC            call	_read_byte
28020 74B9           83C4                   04  add	sp,*4
28021                                           ! Debug: list unsigned char = al+0 (used reg = )
28022 74BC           30E4                       xor	ah,ah
28023 74BE           50                         push	ax
28024                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28025 74BF           8B46         FC            mov	ax,-4[bp]
28026                                           ! Debug: list unsigned int = ax+1 (used reg = )
28027 74C2           40                         inc	ax
28028 74C3           50                         push	ax
28029                                           ! Debug: func () void = outb+0 (used reg = )
28030 74C4           E8         064A            call	_outb
28031 74C7           83C4                   04  add	sp,*4
28032                                           !BCC_EOS
28033                                           ! 3764             }
28034                                           ! 3765             BX++;
28035                       000074CA            .268:
28036                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28037 74CA           8B46         08            mov	ax,8[bp]
28038 74CD           40                         inc	ax
28039 74CE           8946         08            mov	8[bp],ax
28040                                           !BCC_EOS
28041                                           ! 3766         }
28042                                           ! 3767         v = inb(0x3cc) & ~0x01;
28043                       000074D1            .265:
28044                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28045 74D1           8B46         FE            mov	ax,-2[bp]
28046 74D4           40                         inc	ax
28047 74D5           8946         FE            mov	-2[bp],ax
28048                       000074D8            .266:
28049                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28050 74D8           8B46         FE            mov	ax,-2[bp]
28051 74DB           3D                   0018  cmp	ax,*$18
28052 74DE           76           BC            jbe	.267
28053                       000074E0            .26A:
28054                       000074E0            .264:
28055                                           ! Debug: list int = const $3CC (used reg = )
28056 74E0           B8                   03CC  mov	ax,#$3CC
28057 74E3           50                         push	ax
28058                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28059 74E4           E8         0614            call	_inb
28060 74E7           44                         inc	sp
28061 74E8           44                         inc	sp
28062                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28063 74E9           24                     FE  and	al,#$FE
28064                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28065 74EB           30E4                       xor	ah,ah
28066 74ED           8946         FA            mov	-6[bp],ax
28067                                           !BCC_EOS
28068                                           ! 3768         if (crtc_addr = 0x3d4)
28069                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28070 74F0           B8                   03D4  mov	ax,#$3D4
28071 74F3           8946         FC            mov	-4[bp],ax
28072 74F6           85C0                       test	ax,ax
28073 74F8           74           08            je  	.26B
28074                       000074FA            .26C:
28075                                           ! 3769             v |= 0x0
28076                                           ! 3769 1;
28077                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28078 74FA           8B46         FA            mov	ax,-6[bp]
28079 74FD           0C                     01  or	al,*1
28080 74FF           8946         FA            mov	-6[bp],ax
28081                                           !BCC_EOS
28082                                           ! 3770         outb(0x3c2, v);
28083                       00007502            .26B:
28084                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28085 7502           FF76         FA            push	-6[bp]
28086                                           ! Debug: list int = const $3C2 (used reg = )
28087 7505           B8                   03C2  mov	ax,#$3C2
28088 7508           50                         push	ax
28089                                           ! Debug: func () void = outb+0 (used reg = )
28090 7509           E8         0605            call	_outb
28091 750C           83C4                   04  add	sp,*4
28092                                           !BCC_EOS
28093                                           ! 3771         outb(crtc_addr, 0x11);
28094                                           ! Debug: list int = const $11 (used reg = )
28095 750F           B8                   0011  mov	ax,*$11
28096 7512           50                         push	ax
28097                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28098 7513           FF76         FC            push	-4[bp]
28099                                           ! Debug: func () void = outb+0 (used reg = )
28100 7516           E8         05F8            call	_outb
28101 7519           83C4                   04  add	sp,*4
28102                                           !BCC_EOS
28103                                           ! 3772         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28104                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28105 751C           8B46         08            mov	ax,8[bp]
28106                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28107                                           ! Debug: list unsigned int = ax-7 (used reg = )
28108 751F           05                   FFF9  add	ax,*-7
28109 7522           50                         push	ax
28110                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28111 7523           FF76         06            push	6[bp]
28112                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28113 7526           E8         057C            call	_read_byte
28114 7529           83C4                   04  add	sp,*4
28115                                           ! Debug: list unsigned char = al+0 (used reg = )
28116 752C           30E4                       xor	ah,ah
28117 752E           50                         push	ax
28118                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28119 752F           8B46         FC            mov	ax,-4[bp]
28120                                           ! Debug: list unsigned int = ax+1 (used reg = )
28121 7532           40                         inc	ax
28122 7533           50                         push	ax
28123                                           ! Debug: func () void = outb+0 (used reg = )
28124 7534           E8         05DA            call	_outb
28125 7537           83C4                   04  add	sp,*4
28126                                           !BCC_EOS
28127                                           ! 3773         ar_index = read_byte(ES, addr1 + 0x03);
28128                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28129 753A           8B46         F8            mov	ax,-8[bp]
28130                                           ! Debug: list unsigned int = ax+3 (used reg = )
28131 753D           05                   0003  add	ax,*3
28132 7540           50                         push	ax
28133                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28134 7541           FF76         06            push	6[bp]
28135                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28136 7544           E8         055E            call	_read_byte
28137 7547           83C4                   04  add	sp,*4
28138                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28139 754A           30E4                       xor	ah,ah
28140 754C           8946         F6            mov	-$A[bp],ax
28141                                           !BCC_EOS
28142                                           ! 3774         inb(0x3da);
28143                                           ! Debug: list int = const $3DA (used reg = )
28144 754F           B8                   03DA  mov	ax,#$3DA
28145 7552           50                         push	ax
28146                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28147 7553           E8         05A5            call	_inb
28148 7556           44                         inc	sp
28149 7557           44                         inc	sp
28150                                           !BCC_EOS
28151                                           ! 3775         for(i=0;i<=0x13;i++) {
28152                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28153 7558           31C0                       xor	ax,ax
28154 755A           8946         FE            mov	-2[bp],ax
28155                                           !BCC_EOS
28156                                           !BCC_EOS
28157 755D           EB           3C            jmp .26F
28158                       0000755F            .270:
28159                                           ! 3776             outb(0x3c0, i | (ar_index & 0x20));
28160                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28161 755F           8A46         F6            mov	al,-$A[bp]
28162 7562           24                     20  and	al,*$20
28163                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28164                                           ! Debug: expression subtree swapping
28165 7564           30E4                       xor	ah,ah
28166 7566           0B46         FE            or	ax,-2[bp]
28167                                           ! Debug: list unsigned int = ax+0 (used reg = )
28168 7569           50                         push	ax
28169                                           ! Debug: list int = const $3C0 (used reg = )
28170 756A           B8                   03C0  mov	ax,#$3C0
28171 756D           50                         push	ax
28172                                           ! Debug: func () void = outb+0 (used reg = )
28173 756E           E8         05A0            call	_outb
28174 7571           83C4                   04  add	sp,*4
28175                                           !BCC_EOS
28176                                           ! 3777             outb(0x3c0, read_byte(ES, BX)); BX++;
28177                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28178 7574           FF76         08            push	8[bp]
28179                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28180 7577           FF76         06            push	6[bp]
28181                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28182 757A           E8         0528            call	_read_byte
28183 757D           83C4                   04  add	sp,*4
28184                                           ! Debug: list unsigned char = al+0 (used reg = )
28185 7580           30E4                       xor	ah,ah
28186 7582           50                         push	ax
28187                                           ! Debug: list int = const $3C0 (used reg = )
28188 7583           B8                   03C0  mov	ax,#$3C0
28189 7586           50                         push	ax
28190                                           ! Debug: func () void = outb+0 (used reg = )
28191 7587           E8         0587            call	_outb
28192 758A           83C4                   04  add	sp,*4
28193                                           !BCC_EOS
28194                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28195 758D           8B46         08            mov	ax,8[bp]
28196 7590           40                         inc	ax
28197 7591           8946         08            mov	8[bp],ax
28198                                           !BCC_EOS
28199                                           ! 3778         }
28200                                           ! 3779         outb(0x3c0, ar_index);
28201                       00007594            .26E:
28202                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28203 7594           8B46         FE            mov	ax,-2[bp]
28204 7597           40                         inc	ax
28205 7598           8946         FE            mov	-2[bp],ax
28206                       0000759B            .26F:
28207                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28208 759B           8B46         FE            mov	ax,-2[bp]
28209 759E           3D                   0013  cmp	ax,*$13
28210 75A1           76           BC            jbe	.270
28211                       000075A3            .271:
28212                       000075A3            .26D:
28213                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28214 75A3           FF76         F6            push	-$A[bp]
28215                                           ! Debug: list int = const $3C0 (used reg = )
28216 75A6           B8                   03C0  mov	ax,#$3C0
28217 75A9           50                         push	ax
28218                                           ! Debug: func () void = outb+0 (used reg = )
28219 75AA           E8         0564            call	_outb
28220 75AD           83C4                   04  add	sp,*4
28221                                           !BCC_EOS
28222                                           ! 3780         inb(0x3da);
28223                                           ! Debug: list int = const $3DA (used reg = )
28224 75B0           B8                   03DA  mov	ax,#$3DA
28225 75B3           50                         push	ax
28226                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28227 75B4           E8         0544            call	_inb
28228 75B7           44                         inc	sp
28229 75B8           44                         inc	sp
28230                                           !BCC_EOS
28231                                           ! 3781         for(i=0;i<=8;i++) {
28232                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28233 75B9           31C0                       xor	ax,ax
28234 75BB           8946         FE            mov	-2[bp],ax
28235                                           !BCC_EOS
28236                                           !BCC_EOS
28237 75BE           EB           34            jmp .274
28238                       000075C0            .275:
28239                                           ! 3782             outb(0x3ce,i);
28240                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28241 75C0           FF76         FE            push	-2[bp]
28242                                           ! Debug: list int = const $3CE (used reg = )
28243 75C3           B8                   03CE  mov	ax,#$3CE
28244 75C6           50                         push	ax
28245                                           ! Debug: func () void = outb+0 (used reg = )
28246 75C7           E8         0547            call	_outb
28247 75CA           83C4                   04  add	sp,*4
28248                                           !BCC_EOS
28249                                           ! 3783             outb(0x3cf, read_byte(ES, BX)); BX++;
28250                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28251 75CD           FF76         08            push	8[bp]
28252                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28253 75D0           FF76         06            push	6[bp]
28254                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28255 75D3           E8         04CF            call	_read_byte
28256 75D6           83C4                   04  add	sp,*4
28257                                           ! Debug: list unsigned char = al+0 (used reg = )
28258 75D9           30E4                       xor	ah,ah
28259 75DB           50                         push	ax
28260                                           ! Debug: list int = const $3CF (used reg = )
28261 75DC           B8                   03CF  mov	ax,#$3CF
28262 75DF           50                         push	ax
28263                                           ! Debug: func () void = outb+0 (used reg = )
28264 75E0           E8         052E            call	_outb
28265 75E3           83C4                   04  add	sp,*4
28266                                           !BCC_EOS
28267                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28268 75E6           8B46         08            mov	ax,8[bp]
28269 75E9           40                         inc	ax
28270 75EA           8946         08            mov	8[bp],ax
28271                                           !BCC_EOS
28272                                           ! 3784         }
28273                                           ! 3785         BX += 2;
28274                       000075ED            .273:
28275                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28276 75ED           8B46         FE            mov	ax,-2[bp]
28277 75F0           40                         inc	ax
28278 75F1           8946         FE            mov	-2[bp],ax
28279                       000075F4            .274:
28280                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28281 75F4           8B46         FE            mov	ax,-2[bp]
28282 75F7           3D                   0008  cmp	ax,*8
28283 75FA           76           C4            jbe	.275
28284                       000075FC            .276:
28285                       000075FC            .272:
28286                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28287 75FC           8B46         08            mov	ax,8[bp]
28288 75FF           40                         inc	ax
28289 7600           40                         inc	ax
28290 7601           8946         08            mov	8[bp],ax
28291                                           !BCC_EOS
28292                                           ! 3786         BX += 4;
28293                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28294 7604           8B46         08            mov	ax,8[bp]
28295 7607           05                   0004  add	ax,*4
28296 760A           8946         08            mov	8[bp],ax
28297                                           !BCC_EOS
28298                                           ! 3787         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28299                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28300 760D           FF76         F8            push	-8[bp]
28301                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28302 7610           FF76         06            push	6[bp]
28303                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28304 7613           E8         048F            call	_read_byte
28305 7616           83C4                   04  add	sp,*4
28306                                           ! Debug: list unsigned char = al+0 (used reg = )
28307 7619           30E4                       xor	ah,ah
28308 761B           50                         push	ax
28309                                           ! Debug: list int = const $3C4 (used reg = )
28310 761C           B8                   03C4  mov	ax,#$3C4
28311 761F           50                         push	ax
28312                                           ! Debug: func () void = outb+0 (used reg = )
28313 7620           E8         04EE            call	_outb
28314 7623           83C4                   04  add	sp,*4
28315                                           !BCC_EOS
28316                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28317 7626           8B46         F8            mov	ax,-8[bp]
28318 7629           40                         inc	ax
28319 762A           8946         F8            mov	-8[bp],ax
28320                                           !BCC_EOS
28321                                           ! 3788         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28322                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28323 762D           FF76         F8            push	-8[bp]
28324                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28325 7630           FF76         06            push	6[bp]
28326                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28327 7633           E8         046F            call	_read_byte
28328 7636           83C4                   04  add	sp,*4
28329                                           ! Debug: list unsigned char = al+0 (used reg = )
28330 7639           30E4                       xor	ah,ah
28331 763B           50                         push	ax
28332                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28333 763C           FF76         FC            push	-4[bp]
28334                                           ! Debug: func () void = outb+0 (used reg = )
28335 763F           E8         04CF            call	_outb
28336 7642           83C4                   04  add	sp,*4
28337                                           !BCC_EOS
28338                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28339 7645           8B46         F8            mov	ax,-8[bp]
28340 7648           40                         inc	ax
28341 7649           8946         F8            mov	-8[bp],ax
28342                                           !BCC_EOS
28343                                           ! 3789         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28344                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28345 764C           FF76         F8            push	-8[bp]
28346                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28347 764F           FF76         06            push	6[bp]
28348                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28349 7652           E8         0450            call	_read_byte
28350 7655           83C4                   04  add	sp,*4
28351                                           ! Debug: list unsigned char = al+0 (used reg = )
28352 7658           30E4                       xor	ah,ah
28353 765A           50                         push	ax
28354                                           ! Debug: list int = const $3CE (used reg = )
28355 765B           B8                   03CE  mov	ax,#$3CE
28356 765E           50                         push	ax
28357                                           ! Debug: func () void = outb+0 (used reg = )
28358 765F           E8         04AF            call	_outb
28359 7662           83C4                   04  add	sp,*4
28360                                           !BCC_EOS
28361                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28362 7665           8B46         F8            mov	ax,-8[bp]
28363 7668           40                         inc	ax
28364 7669           8946         F8            mov	-8[bp],ax
28365                                           !BCC_EOS
28366                                           ! 3790         addr1++;
28367                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28368 766C           8B46         F8            mov	ax,-8[bp]
28369 766F           40                         inc	ax
28370 7670           8946         F8            mov	-8[bp],ax
28371                                           !BCC_EOS
28372                                           ! 3791         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28373                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28374 7673           FF76         F8            push	-8[bp]
28375                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28376 7676           FF76         06            push	6[bp]
28377                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28378 7679           E8         0429            call	_read_byte
28379 767C           83C4                   04  add	sp,*4
28380                                           ! Debug: list unsigned char = al+0 (used reg = )
28381 767F           30E4                       xor	ah,ah
28382 7681           50                         push	ax
28383                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28384 7682           8B46         FC            mov	ax,-4[bp]
28385                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28386                                           ! Debug: list unsigned int = ax+6 (used reg = )
28387 7685           05                   0006  add	ax,*6
28388 7688           50                         push	ax
28389                                           ! Debug: func () void = outb+0 (used reg = )
28390 7689           E8         0485            call	_outb
28391 768C           83C4                   04  add	sp,*4
28392                                           !BCC_EOS
28393                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28394 768F           8B46         F8            mov	ax,-8[bp]
28395 7692           40                         inc	ax
28396 7693           8946         F8            mov	-8[bp],ax
28397                                           !BCC_EOS
28398                                           ! 3792     }
28399                                           ! 3793     if (CX & 2) {
28400                       00007696            .25D:
28401                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28402 7696           8A46         04            mov	al,4[bp]
28403 7699           24                     02  and	al,*2
28404 769B           84C0                       test	al,al
28405 769D         0F84         0270            beq 	.277
28406                       000076A1            .278:
28407                                           ! 3794         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28408                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28409 76A1           FF76         08            push	8[bp]
28410                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28411 76A4           FF76         06            push	6[bp]
28412                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28413 76A7           E8         03FB            call	_read_byte
28414 76AA           83C4                   04  add	sp,*4
28415                                           ! Debug: list unsigned char = al+0 (used reg = )
28416 76AD           30E4                       xor	ah,ah
28417 76AF           50                         push	ax
28418                                           ! Debug: list int = const $49 (used reg = )
28419 76B0           B8                   0049  mov	ax,*$49
28420 76B3           50                         push	ax
28421                                           ! Debug: list int = const $40 (used reg = )
28422 76B4           B8                   0040  mov	ax,*$40
28423 76B7           50                         push	ax
28424                                           ! Debug: func () void = write_byte+0 (used reg = )
28425 76B8           E8         0410            call	_write_byte
28426 76BB           83C4                   06  add	sp,*6
28427                                           !BCC_EOS
28428                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28429 76BE           8B46         08            mov	ax,8[bp]
28430 76C1           40                         inc	ax
28431 76C2           8946         08            mov	8[bp],ax
28432                                           !BCC_EOS
28433                                           ! 3795         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28434                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28435 76C5           FF76         08            push	8[bp]
28436                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28437 76C8           FF76         06            push	6[bp]
28438                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28439 76CB           E8         03EA            call	_read_word
28440 76CE           83C4                   04  add	sp,*4
28441                                           ! Debug: list unsigned short = ax+0 (used reg = )
28442 76D1           50                         push	ax
28443                                           ! Debug: list int = const $4A (used reg = )
28444 76D2           B8                   004A  mov	ax,*$4A
28445 76D5           50                         push	ax
28446                                           ! Debug: list int = const $40 (used reg = )
28447 76D6           B8                   0040  mov	ax,*$40
28448 76D9           50                         push	ax
28449                                           ! Debug: func () void = write_word+0 (used reg = )
28450 76DA           E8         0406            call	_write_word
28451 76DD           83C4                   06  add	sp,*6
28452                                           !BCC_EOS
28453                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28454 76E0           8B46         08            mov	ax,8[bp]
28455 76E3           40                         inc	ax
28456 76E4           40                         inc	ax
28457 76E5           8946         08            mov	8[bp],ax
28458                                           !BCC_EOS
28459                                           ! 3796         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28460                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28461 76E8           FF76         08            push	8[bp]
28462                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28463 76EB           FF76         06            push	6[bp]
28464                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28465 76EE           E8         03C7            call	_read_word
28466 76F1           83C4                   04  add	sp,*4
28467                                           ! Debug: list unsigned short = ax+0 (used reg = )
28468 76F4           50                         push	ax
28469                                           ! Debug: list int = const $4C (used reg = )
28470 76F5           B8                   004C  mov	ax,*$4C
28471 76F8           50                         push	ax
28472                                           ! Debug: list int = const $40 (used reg = )
28473 76F9           B8                   0040  mov	ax,*$40
28474 76FC           50                         push	ax
28475                                           ! Debug: func () void = write_word+0 (used reg = )
28476 76FD           E8         03E3            call	_write_word
28477 7700           83C4                   06  add	sp,*6
28478                                           !BCC_EOS
28479                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28480 7703           8B46         08            mov	ax,8[bp]
28481 7706           40                         inc	ax
28482 7707           40                         inc	ax
28483 7708           8946         08            mov	8[bp],ax
28484                                           !BCC_EOS
28485                                           ! 3797         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28486                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28487 770B           FF76         08            push	8[bp]
28488                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28489 770E           FF76         06            push	6[bp]
28490                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28491 7711           E8         03A4            call	_read_word
28492 7714           83C4                   04  add	sp,*4
28493                                           ! Debug: list unsigned short = ax+0 (used reg = )
28494 7717           50                         push	ax
28495                                           ! Debug: list int = const $63 (used reg = )
28496 7718           B8                   0063  mov	ax,*$63
28497 771B           50                         push	ax
28498                                           ! Debug: list int = const $40 (used reg = )
28499 771C           B8                   0040  mov	ax,*$40
28500 771F           50                         push	ax
28501                                           ! Debug: func () void = write_word+0 (used reg = )
28502 7720           E8         03C0            call	_write_word
28503 7723           83C4                   06  add	sp,*6
28504                                           !BCC_EOS
28505                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28506 7726           8B46         08            mov	ax,8[bp]
28507 7729           40                         inc	ax
28508 772A           40                         inc	ax
28509 772B           8946         08            mov	8[bp],ax
28510                                           !BCC_EOS
28511                                           ! 3798         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28512                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28513 772E           FF76         08            push	8[bp]
28514                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28515 7731           FF76         06            push	6[bp]
28516                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28517 7734           E8         036E            call	_read_byte
28518 7737           83C4                   04  add	sp,*4
28519                                           ! Debug: list unsigned char = al+0 (used reg = )
28520 773A           30E4                       xor	ah,ah
28521 773C           50                         push	ax
28522                                           ! Debug: list int = const $84 (used reg = )
28523 773D           B8                   0084  mov	ax,#$84
28524 7740           50                         push	ax
28525                                           ! Debug: list int = const $40 (used reg = )
28526 7741           B8                   0040  mov	ax,*$40
28527 7744           50                         push	ax
28528                                           ! Debug: func () void = write_byte+0 (used reg = )
28529 7745           E8         0383            call	_write_byte
28530 7748           83C4                   06  add	sp,*6
28531                                           !BCC_EOS
28532                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28533 774B           8B46         08            mov	ax,8[bp]
28534 774E           40                         inc	ax
28535 774F           8946         08            mov	8[bp],ax
28536                                           !BCC_EOS
28537                                           ! 3799         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
28538                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28539 7752           FF76         08            push	8[bp]
28540                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28541 7755           FF76         06            push	6[bp]
28542                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28543 7758           E8         035D            call	_read_word
28544 775B           83C4                   04  add	sp,*4
28545                                           ! Debug: list unsigned short = ax+0 (used reg = )
28546 775E           50                         push	ax
28547                                           ! Debug: list int = const $85 (used reg = )
28548 775F           B8                   0085  mov	ax,#$85
28549 7762           50                         push	ax
28550                                           ! Debug: list int = const $40 (used reg = )
28551 7763           B8                   0040  mov	ax,*$40
28552 7766           50                         push	ax
28553                                           ! Debug: func () void = write_word+0 (used reg = )
28554 7767           E8         0379            call	_write_word
28555 776A           83C4                   06  add	sp,*6
28556                                           !BCC_EOS
28557                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28558 776D           8B46         08            mov	ax,8[bp]
28559 7770           40                         inc	ax
28560 7771           40                         inc	ax
28561 7772           8946         08            mov	8[bp],ax
28562                                           !BCC_EOS
28563                                           ! 3800         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
28564                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28565 7775           FF76         08            push	8[bp]
28566                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28567 7778           FF76         06            push	6[bp]
28568                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28569 777B           E8         0327            call	_read_byte
28570 777E           83C4                   04  add	sp,*4
28571                                           ! Debug: list unsigned char = al+0 (used reg = )
28572 7781           30E4                       xor	ah,ah
28573 7783           50                         push	ax
28574                                           ! Debug: list int = const $87 (used reg = )
28575 7784           B8                   0087  mov	ax,#$87
28576 7787           50                         push	ax
28577                                           ! Debug: list int = const $40 (used reg = )
28578 7788           B8                   0040  mov	ax,*$40
28579 778B           50                         push	ax
28580                                           ! Debug: func () void = write_byte+0 (used reg = )
28581 778C           E8         033C            call	_write_byte
28582 778F           83C4                   06  add	sp,*6
28583                                           !BCC_EOS
28584                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28585 7792           8B46         08            mov	ax,8[bp]
28586 7795           40                         inc	ax
28587 7796           8946         08            mov	8[bp],ax
28588                                           !BCC_EOS
28589                                           ! 3801         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
28590                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28591 7799           FF76         08            push	8[bp]
28592                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28593 779C           FF76         06            push	6[bp]
28594                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28595 779F           E8         0303            call	_read_byte
28596 77A2           83C4                   04  add	sp,*4
28597                                           ! Debug: list unsigned char = al+0 (used reg = )
28598 77A5           30E4                       xor	ah,ah
28599 77A7           50                         push	ax
28600                                           ! Debug: list int = const $88 (used reg = )
28601 77A8           B8                   0088  mov	ax,#$88
28602 77AB           50                         push	ax
28603                                           ! Debug: list int = const $40 (used reg = )
28604 77AC           B8                   0040  mov	ax,*$40
28605 77AF           50                         push	ax
28606                                           ! Debug: func () void = write_byte+0 (used reg = )
28607 77B0           E8         0318            call	_write_byte
28608 77B3           83C4                   06  add	sp,*6
28609                                           !BCC_EOS
28610                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28611 77B6           8B46         08            mov	ax,8[bp]
28612 77B9           40                         inc	ax
28613 77BA           8946         08            mov	8[bp],ax
28614                                           !BCC_EOS
28615                                           ! 3802         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
28616                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28617 77BD           FF76         08            push	8[bp]
28618                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28619 77C0           FF76         06            push	6[bp]
28620                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28621 77C3           E8         02DF            call	_read_byte
28622 77C6           83C4                   04  add	sp,*4
28623                                           ! Debug: list unsigned char = al+0 (used reg = )
28624 77C9           30E4                       xor	ah,ah
28625 77CB           50                         push	ax
28626                                           ! Debug: list int = const $89 (used reg = )
28627 77CC           B8                   0089  mov	ax,#$89
28628 77CF           50                         push	ax
28629                                           ! Debug: list int = const $40 (used reg = )
28630 77D0           B8                   0040  mov	ax,*$40
28631 77D3           50                         push	ax
28632                                           ! Debug: func () void = write_byte+0 (used reg = )
28633 77D4           E8         02F4            call	_write_byte
28634 77D7           83C4                   06  add	sp,*6
28635                                           !BCC_EOS
28636                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28637 77DA           8B46         08            mov	ax,8[bp]
28638 77DD           40                         inc	ax
28639 77DE           8946         08            mov	8[bp],ax
28640                                           !BCC_EOS
28641                                           ! 3803         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
28642                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28643 77E1           FF76         08            push	8[bp]
28644                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28645 77E4           FF76         06            push	6[bp]
28646                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28647 77E7           E8         02CE            call	_read_word
28648 77EA           83C4                   04  add	sp,*4
28649                                           ! Debug: list unsigned short = ax+0 (used reg = )
28650 77ED           50                         push	ax
28651                                           ! Debug: list int = const $60 (used reg = )
28652 77EE           B8                   0060  mov	ax,*$60
28653 77F1           50                         push	ax
28654                                           ! Debug: list int = const $40 (used reg = )
28655 77F2           B8                   0040  mov	ax,*$40
28656 77F5           50                         push	ax
28657                                           ! Debug: func () void = write_word+0 (used reg = )
28658 77F6           E8         02EA            call	_write_word
28659 77F9           83C4                   06  add	sp,*6
28660                                           !BCC_EOS
28661                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28662 77FC           8B46         08            mov	ax,8[bp]
28663 77FF           40                         inc	ax
28664 7800           40                         inc	ax
28665 7801           8946         08            mov	8[bp],ax
28666                                           !BCC_EOS
28667                                           ! 3804         for(i=0;i<8;i++) {
28668                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28669 7804           31C0                       xor	ax,ax
28670 7806           8946         FE            mov	-2[bp],ax
28671                                           !BCC_EOS
28672                                           !BCC_EOS
28673 7809           EB           2F            jmp .27B
28674                       0000780B            .27C:
28675                                           ! 3805             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
28676                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28677 780B           FF76         08            push	8[bp]
28678                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28679 780E           FF76         06            push	6[bp]
28680                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28681 7811           E8         02A4            call	_read_word
28682 7814           83C4                   04  add	sp,*4
28683                                           ! Debug: list unsigned short = ax+0 (used reg = )
28684 7817           50                         push	ax
28685                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
28686                                           ! Debug: expression subtree swapping
28687 7818           8B46         FE            mov	ax,-2[bp]
28688 781B           D1E0                       shl	ax,*1
28689                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28690                                           ! Debug: expression subtree swapping
28691                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28692 781D           05                   0050  add	ax,*$50
28693 7820           50                         push	ax
28694                                           ! Debug: list int = const $40 (used reg = )
28695 7821           B8                   0040  mov	ax,*$40
28696 7824           50                         push	ax
28697                                           ! Debug: func () void = write_word+0 (used reg = )
28698 7825           E8         02BB            call	_write_word
28699 7828           83C4                   06  add	sp,*6
28700                                           !BCC_EOS
28701                                           ! 3806             BX += 2;
28702                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28703 782B           8B46         08            mov	ax,8[bp]
28704 782E           40                         inc	ax
28705 782F           40                         inc	ax
28706 7830           8946         08            mov	8[bp],ax
28707                                           !BCC_EOS
28708                                           ! 3807         }
28709                                           ! 3808         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
28710                       00007833            .27A:
28711                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28712 7833           8B46         FE            mov	ax,-2[bp]
28713 7836           40                         inc	ax
28714 7837           8946         FE            mov	-2[bp],ax
28715                       0000783A            .27B:
28716                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28717 783A           8B46         FE            mov	ax,-2[bp]
28718 783D           3D                   0008  cmp	ax,*8
28719 7840           72           C9            jb 	.27C
28720                       00007842            .27D:
28721                       00007842            .279:
28722                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28723 7842           FF76         08            push	8[bp]
28724                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28725 7845           FF76         06            push	6[bp]
28726                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28727 7848           E8         026D            call	_read_word
28728 784B           83C4                   04  add	sp,*4
28729                                           ! Debug: list unsigned short = ax+0 (used reg = )
28730 784E           50                         push	ax
28731                                           ! Debug: list int = const $4E (used reg = )
28732 784F           B8                   004E  mov	ax,*$4E
28733 7852           50                         push	ax
28734                                           ! Debug: list int = const $40 (used reg = )
28735 7853           B8                   0040  mov	ax,*$40
28736 7856           50                         push	ax
28737                                           ! Debug: func () void = write_word+0 (used reg = )
28738 7857           E8         0289            call	_write_word
28739 785A           83C4                   06  add	sp,*6
28740                                           !BCC_EOS
28741                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28742 785D           8B46         08            mov	ax,8[bp]
28743 7860           40                         inc	ax
28744 7861           40                         inc	ax
28745 7862           8946         08            mov	8[bp],ax
28746                                           !BCC_EOS
28747                                           ! 3809         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
28748                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28749 7865           FF76         08            push	8[bp]
28750                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28751 7868           FF76         06            push	6[bp]
28752                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28753 786B           E8         0237            call	_read_byte
28754 786E           83C4                   04  add	sp,*4
28755                                           ! Debug: list unsigned char = al+0 (used reg = )
28756 7871           30E4                       xor	ah,ah
28757 7873           50                         push	ax
28758                                           ! Debug: list int = const $62 (used reg = )
28759 7874           B8                   0062  mov	ax,*$62
28760 7877           50                         push	ax
28761                                           ! Debug: list int = const $40 (used reg = )
28762 7878           B8                   0040  mov	ax,*$40
28763 787B           50                         push	ax
28764                                           ! Debug: func () void = write_byte+0 (used reg = )
28765 787C           E8         024C            call	_write_byte
28766 787F           83C4                   06  add	sp,*6
28767                                           !BCC_EOS
28768                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28769 7882           8B46         08            mov	ax,8[bp]
28770 7885           40                         inc	ax
28771 7886           8946         08            mov	8[bp],ax
28772                                           !BCC_EOS
28773                                           ! 3810         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
28774                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28775 7889           FF76         08            push	8[bp]
28776                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28777 788C           FF76         06            push	6[bp]
28778                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28779 788F           E8         0226            call	_read_word
28780 7892           83C4                   04  add	sp,*4
28781                                           ! Debug: list unsigned short = ax+0 (used reg = )
28782 7895           50                         push	ax
28783                                           ! Debug: list int = const $7C (used reg = )
28784 7896           B8                   007C  mov	ax,*$7C
28785 7899           50                         push	ax
28786                                           ! Debug: list int = const 0 (used reg = )
28787 789A           31C0                       xor	ax,ax
28788 789C           50                         push	ax
28789                                           ! Debug: func () void = write_word+0 (used reg = )
28790 789D           E8         0243            call	_write_word
28791 78A0           83C4                   06  add	sp,*6
28792                                           !BCC_EOS
28793                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28794 78A3           8B46         08            mov	ax,8[bp]
28795 78A6           40                         inc	ax
28796 78A7           40                         inc	ax
28797 78A8           8946         08            mov	8[bp],ax
28798                                           !BCC_EOS
28799                                           ! 3811         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
28800                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28801 78AB           FF76         08            push	8[bp]
28802                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28803 78AE           FF76         06            push	6[bp]
28804                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28805 78B1           E8         0204            call	_read_word
28806 78B4           83C4                   04  add	sp,*4
28807                                           ! Debug: list unsigned short = ax+0 (used reg = )
28808 78B7           50                         push	ax
28809                                           ! Debug: list int = const $7E (used reg = )
28810 78B8           B8                   007E  mov	ax,*$7E
28811 78BB           50                         push	ax
28812                                           ! Debug: list int = const 0 (used reg = )
28813 78BC           31C0                       xor	ax,ax
28814 78BE           50                         push	ax
28815                                           ! Debug: func () void = write_word+0 (used reg = )
28816 78BF           E8         0221            call	_write_word
28817 78C2           83C4                   06  add	sp,*6
28818                                           !BCC_EOS
28819                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28820 78C5           8B46         08            mov	ax,8[bp]
28821 78C8           40                         inc	ax
28822 78C9           40                         inc	ax
28823 78CA           8946         08            mov	8[bp],ax
28824                                           !BCC_EOS
28825                                           ! 3812         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
28826                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28827 78CD           FF76         08            push	8[bp]
28828                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28829 78D0           FF76         06            push	6[bp]
28830                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28831 78D3           E8         01E2            call	_read_word
28832 78D6           83C4                   04  add	sp,*4
28833                                           ! Debug: list unsigned short = ax+0 (used reg = )
28834 78D9           50                         push	ax
28835                                           ! Debug: list int = const $10C (used reg = )
28836 78DA           B8                   010C  mov	ax,#$10C
28837 78DD           50                         push	ax
28838                                           ! Debug: list int = const 0 (used reg = )
28839 78DE           31C0                       xor	ax,ax
28840 78E0           50                         push	ax
28841                                           ! Debug: func () void = write_word+0 (used reg = )
28842 78E1           E8         01FF            call	_write_word
28843 78E4           83C4                   06  add	sp,*6
28844                                           !BCC_EOS
28845                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28846 78E7           8B46         08            mov	ax,8[bp]
28847 78EA           40                         inc	ax
28848 78EB           40                         inc	ax
28849 78EC           8946         08            mov	8[bp],ax
28850                                           !BCC_EOS
28851                                           ! 3813         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
28852                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28853 78EF           FF76         08            push	8[bp]
28854                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28855 78F2           FF76         06            push	6[bp]
28856                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28857 78F5           E8         01C0            call	_read_word
28858 78F8           83C4                   04  add	sp,*4
28859                                           ! Debug: list unsigned short = ax+0 (used reg = )
28860 78FB           50                         push	ax
28861                                           ! Debug: list int = const $10E (used reg = )
28862 78FC           B8                   010E  mov	ax,#$10E
28863 78FF           50                         push	ax
28864                                           ! Debug: list int = const 0 (used reg = )
28865 7900           31C0                       xor	ax,ax
28866 7902           50                         push	ax
28867                                           ! Debug: func () void = write_word+0 (used reg = )
28868 7903           E8         01DD            call	_write_word
28869 7906           83C4                   06  add	sp,*6
28870                                           !BCC_EOS
28871                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28872 7909           8B46         08            mov	ax,8[bp]
28873 790C           40                         inc	ax
28874 790D           40                         inc	ax
28875 790E           8946         08            mov	8[bp],ax
28876                                           !BCC_EOS
28877                                           ! 3814     }
28878                                           ! 3815     if (CX & 4) {
28879                       00007911            .277:
28880                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
28881 7911           8A46         04            mov	al,4[bp]
28882 7914           24                     04  and	al,*4
28883 7916           84C0                       test	al,al
28884 7918         0F84         0096            beq 	.27E
28885                       0000791C            .27F:
28886                                           ! 3816         BX++;
28887                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28888 791C           8B46         08            mov	ax,8[bp]
28889 791F           40                         inc	ax
28890 7920           8946         08            mov	8[bp],ax
28891                                           !BCC_EOS
28892                                           ! 3817         v = read_byte(ES, BX); BX++;
28893                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28894 7923           FF76         08            push	8[bp]
28895                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28896 7926           FF76         06            push	6[bp]
28897                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28898 7929           E8         0179            call	_read_byte
28899 792C           83C4                   04  add	sp,*4
28900                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28901 792F           30E4                       xor	ah,ah
28902 7931           8946         FA            mov	-6[bp],ax
28903                                           !BCC_EOS
28904                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28905 7934           8B46         08            mov	ax,8[bp]
28906 7937           40                         inc	ax
28907 7938           8946         08            mov	8[bp],ax
28908                                           !BCC_EOS
28909                                           ! 3818         outb(0x3c6, read_byte(ES, BX)); BX++;
28910                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28911 793B           FF76         08            push	8[bp]
28912                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28913 793E           FF76         06            push	6[bp]
28914                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28915 7941           E8         0161            call	_read_byte
28916 7944           83C4                   04  add	sp,*4
28917                                           ! Debug: list unsigned char = al+0 (used reg = )
28918 7947           30E4                       xor	ah,ah
28919 7949           50                         push	ax
28920                                           ! Debug: list int = const $3C6 (used reg = )
28921 794A           B8                   03C6  mov	ax,#$3C6
28922 794D           50                         push	ax
28923                                           ! Debug: func () void = outb+0 (used reg = )
28924 794E           E8         01C0            call	_outb
28925 7951           83C4                   04  add	sp,*4
28926                                           !BCC_EOS
28927                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28928 7954           8B46         08            mov	ax,8[bp]
28929 7957           40                         inc	ax
28930 7958           8946         08            mov	8[bp],ax
28931                                           !BCC_EOS
28932                                           ! 3819         outb(0x3c8,0x00);
28933                                           ! Debug: list int = const 0 (used reg = )
28934 795B           31C0                       xor	ax,ax
28935 795D           50                         push	ax
28936                                           ! Debug: list int = const $3C8 (used reg = )
28937 795E           B8                   03C8  mov	ax,#$3C8
28938 7961           50                         push	ax
28939                                           ! Debug: func () void = outb+0 (used reg = )
28940 7962           E8         01AC            call	_outb
28941 7965           83C4                   04  add	sp,*4
28942                                           !BCC_EOS
28943                                           ! 3820         for(i=0;i<256*3;i++) {
28944                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28945 7968           31C0                       xor	ax,ax
28946 796A           8946         FE            mov	-2[bp],ax
28947                                           !BCC_EOS
28948                                           !BCC_EOS
28949 796D           EB           27            jmp .282
28950                       0000796F            .283:
28951                                           ! 3821             outb
28952                                           ! 3821 (0x3c9, read_byte(ES, BX)); BX++;
28953                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28954 796F           FF76         08            push	8[bp]
28955                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28956 7972           FF76         06            push	6[bp]
28957                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28958 7975           E8         012D            call	_read_byte
28959 7978           83C4                   04  add	sp,*4
28960                                           ! Debug: list unsigned char = al+0 (used reg = )
28961 797B           30E4                       xor	ah,ah
28962 797D           50                         push	ax
28963                                           ! Debug: list int = const $3C9 (used reg = )
28964 797E           B8                   03C9  mov	ax,#$3C9
28965 7981           50                         push	ax
28966                                           ! Debug: func () void = outb+0 (used reg = )
28967 7982           E8         018C            call	_outb
28968 7985           83C4                   04  add	sp,*4
28969                                           !BCC_EOS
28970                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28971 7988           8B46         08            mov	ax,8[bp]
28972 798B           40                         inc	ax
28973 798C           8946         08            mov	8[bp],ax
28974                                           !BCC_EOS
28975                                           ! 3822         }
28976                                           ! 3823         BX++;
28977                       0000798F            .281:
28978                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28979 798F           8B46         FE            mov	ax,-2[bp]
28980 7992           40                         inc	ax
28981 7993           8946         FE            mov	-2[bp],ax
28982                       00007996            .282:
28983                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
28984 7996           8B46         FE            mov	ax,-2[bp]
28985 7999           3D                   0300  cmp	ax,#$300
28986 799C           72           D1            jb 	.283
28987                       0000799E            .284:
28988                       0000799E            .280:
28989                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28990 799E           8B46         08            mov	ax,8[bp]
28991 79A1           40                         inc	ax
28992 79A2           8946         08            mov	8[bp],ax
28993                                           !BCC_EOS
28994                                           ! 3824         outb(0x3c8, v);
28995                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28996 79A5           FF76         FA            push	-6[bp]
28997                                           ! Debug: list int = const $3C8 (used reg = )
28998 79A8           B8                   03C8  mov	ax,#$3C8
28999 79AB           50                         push	ax
29000                                           ! Debug: func () void = outb+0 (used reg = )
29001 79AC           E8         0162            call	_outb
29002 79AF           83C4                   04  add	sp,*4
29003                                           !BCC_EOS
29004                                           ! 3825     }
29005                                           ! 3826     return BX;
29006                       000079B2            .27E:
29007 79B2           8B46         08            mov	ax,8[bp]
29008 79B5           89EC                       mov	sp,bp
29009 79B7           5D                         pop	bp
29010 79B8           C3                         ret
29011                                           !BCC_EOS
29012                                           ! 3827 }
29013                                           ! 3828 static Bit8u find_vga_entry(mode)
29014                                           ! 3829 Bit8u mode;
29015                       000079B9            _find_vga_entry:
29016                                           !BCC_EOS
29017                                           ! 3830 {
29018                                           ! 3831  Bit8u i,line=0xFF;
29019 79B9           55                         push	bp
29020 79BA           89E5                       mov	bp,sp
29021 79BC           4C                         dec	sp
29022 79BD           4C                         dec	sp
29023                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29024 79BE           B0                     FF  mov	al,#$FF
29025 79C0           8846         FE            mov	-2[bp],al
29026                                           !BCC_EOS
29027                                           ! 3832  for(i=0;i<=15;i++)
29028                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29029 79C3           30C0                       xor	al,al
29030 79C5           8846         FF            mov	-1[bp],al
29031                                           !BCC_EOS
29032                                           !BCC_EOS
29033                                           ! 3833   if(vga_modes[i].svgamode==mode)
29034 79C8           EB           23            jmp .287
29035                       000079CA            .288:
29036                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29037 79CA           8A46         FF            mov	al,-1[bp]
29038 79CD           30E4                       xor	ah,ah
29039 79CF           B1                     03  mov	cl,*3
29040 79D1           D3E0                       shl	ax,cl
29041 79D3           89C3                       mov	bx,ax
29042                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29043 79D5           8A87       01DC            mov	al,_vga_modes[bx]
29044 79D9           3A46         04            cmp	al,4[bp]
29045 79DC           75           08            jne 	.289
29046                       000079DE            .28A:
29047                                           ! 3834    {line=i;
29048                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29049 79DE           8A46         FF            mov	al,-1[bp]
29050 79E1           8846         FE            mov	-2[bp],al
29051                                           !BCC_EOS
29052                                           ! 3835     break;
29053 79E4           EB           0E            jmp .285
29054                                           !BCC_EOS
29055                                           ! 3836    }
29056                                           ! 3837  return line;
29057                       000079E6            .289:
29058                       000079E6            .286:
29059                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29060 79E6           8A46         FF            mov	al,-1[bp]
29061 79E9           40                         inc	ax
29062 79EA           8846         FF            mov	-1[bp],al
29063                       000079ED            .287:
29064                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29065 79ED           8A46         FF            mov	al,-1[bp]
29066 79F0           3C                     0F  cmp	al,*$F
29067 79F2           76           D6            jbe	.288
29068                       000079F4            .28B:
29069                       000079F4            .285:
29070 79F4           8A46         FE            mov	al,-2[bp]
29071 79F7           89EC                       mov	sp,bp
29072 79F9           5D                         pop	bp
29073 79FA           C3                         ret
29074                                           !BCC_EOS
29075                                           ! 3838 }
29076                                           ! 3839 static void memsetb(seg,offset,value,count)
29077                                           ! Register BX used in function find_vga_entry
29078                                           ! 3840   Bit16u seg;
29079                       000079FB            _memsetb:
29080                                           !BCC_EOS
29081                                           ! 3841   Bit16u offset;
29082                                           !BCC_EOS
29083                                           ! 3842   Bit16u value;
29084                                           !BCC_EOS
29085                                           ! 3843   Bit16u count;
29086                                           !BCC_EOS
29087                                           ! 3844 {
29088                                           ! 3845 #asm
29089                                           !BCC_ASM
29090                       00000008            _memsetb.count	set	8
29091                       00000002            _memsetb.seg	set	2
29092                       00000006            _memsetb.value	set	6
29093                       00000004            _memsetb.offset	set	4
29094 79FB           55                           push bp
29095 79FC           89E5                         mov bp, sp
29096 79FE           50                             push ax
29097 79FF           51                             push cx
29098 7A00           06                             push es
29099 7A01           57                             push di
29100 7A02           8B4E         0A                mov cx, 10[bp] ; count
29101 7A05           83F9                   00      cmp cx, #0x00
29102 7A08           74           10                je memsetb_end
29103 7A0A           8B46         04                mov ax, 4[bp] ; segment
29104 7A0D           8EC0                           mov es, ax
29105 7A0F           8B46         06                mov ax, 6[bp] ; offset
29106 7A12           89C7                           mov di, ax
29107 7A14           8A46         08                mov al, 8[bp] ; value
29108 7A17           FC                             cld
29109 7A18           F3                             rep
29110 7A19           AA                              stosb
29111                       00007A1A            memsetb_end:
29112 7A1A           5F                             pop di
29113 7A1B           07                             pop es
29114 7A1C           59                             pop cx
29115 7A1D           58                             pop ax
29116 7A1E           5D                           pop bp
29117                                           ! 3869 endasm
29118                                           !BCC_ENDASM
29119                                           ! 3870 }
29120 7A1F           C3                         ret
29121                                           ! 3871 static void memsetw(seg,offset,value,count)
29122                                           ! 3872   Bit16u seg;
29123                       00007A20            _memsetw:
29124                                           !BCC_EOS
29125                                           ! 3873   Bit16u offset;
29126                                           !BCC_EOS
29127                                           ! 3874   Bit16u value;
29128                                           !BCC_EOS
29129                                           ! 3875   Bit16u count;
29130                                           !BCC_EOS
29131                                           ! 3876 {
29132                                           ! 3877 #asm
29133                                           !BCC_ASM
29134                       00000008            _memsetw.count	set	8
29135                       00000002            _memsetw.seg	set	2
29136                       00000006            _memsetw.value	set	6
29137                       00000004            _memsetw.offset	set	4
29138 7A20           55                           push bp
29139 7A21           89E5                         mov bp, sp
29140 7A23           50                             push ax
29141 7A24           51                             push cx
29142 7A25           06                             push es
29143 7A26           57                             push di
29144 7A27           8B4E         0A                mov cx, 10[bp] ; count
29145 7A2A           83F9                   00      cmp cx, #0x00
29146 7A2D           74           10                je memsetw_end
29147 7A2F           8B46         04                mov ax, 4[bp] ; segment
29148 7A32           8EC0                           mov es, ax
29149 7A34           8B46         06                mov ax, 6[bp] ; offset
29150 7A37           89C7                           mov di, ax
29151 7A39           8B46         08                mov ax, 8[bp] ; value
29152 7A3C           FC                             cld
29153 7A3D           F3                             rep
29154 7A3E           AB                              stosw
29155                       00007A3F            memsetw_end:
29156 7A3F           5F                             pop di
29157 7A40           07                             pop es
29158 7A41           59                             pop cx
29159 7A42           58                             pop ax
29160 7A43           5D                           pop bp
29161                                           ! 3901 endasm
29162                                           !BCC_ENDASM
29163                                           ! 3902 }
29164 7A44           C3                         ret
29165                                           ! 3903 static void memcpyb(dseg,doffset,sseg,soffset,count)
29166                                           ! 3904   Bit16u dseg;
29167                       00007A45            _memcpyb:
29168                                           !BCC_EOS
29169                                           ! 3905   Bit16u doffset;
29170                                           !BCC_EOS
29171                                           ! 3906   Bit16u sseg;
29172                                           !BCC_EOS
29173                                           ! 3907   Bit16u soffset;
29174                                           !BCC_EOS
29175                                           ! 3908   Bit16u count;
29176                                           !BCC_EOS
29177                                           ! 3909 {
29178                                           ! 3910 #asm
29179                                           !BCC_ASM
29180                       0000000A            _memcpyb.count	set	$A
29181                       00000006            _memcpyb.sseg	set	6
29182                       00000008            _memcpyb.soffset	set	8
29183                       00000002            _memcpyb.dseg	set	2
29184                       00000004            _memcpyb.doffset	set	4
29185 7A45           55                           push bp
29186 7A46           89E5                         mov bp, sp
29187 7A48           50                             push ax
29188 7A49           51                             push cx
29189 7A4A           06                             push es
29190 7A4B           57                             push di
29191 7A4C           1E                             push ds
29192 7A4D           56                             push si
29193 7A4E           8B4E         0C                mov cx, 12[bp] ; count
29194 7A51           83F9                   00      cmp cx, #0x0000
29195 7A54           74           17                je memcpyb_end
29196 7A56           8B46         04                mov ax, 4[bp] ; dsegment
29197 7A59           8EC0                           mov es, ax
29198 7A5B           8B46         06                mov ax, 6[bp] ; doffset
29199 7A5E           89C7                           mov di, ax
29200 7A60           8B46         08                mov ax, 8[bp] ; ssegment
29201 7A63           8ED8                           mov ds, ax
29202 7A65           8B46         0A                mov ax, 10[bp] ; soffset
29203 7A68           89C6                           mov si, ax
29204 7A6A           FC                             cld
29205 7A6B           F3                             rep
29206 7A6C           A4                              movsb
29207                       00007A6D            memcpyb_end:
29208 7A6D           5E                             pop si
29209 7A6E           1F                             pop ds
29210 7A6F           5F                             pop di
29211 7A70           07                             pop es
29212 7A71           59                             pop cx
29213 7A72           58                             pop ax
29214 7A73           5D                           pop bp
29215                                           ! 3941 endasm
29216                                           !BCC_ENDASM
29217                                           ! 3942 }
29218 7A74           C3                         ret
29219                                           ! 3943 static void memcpyw(dseg,doffset,sseg,soffset,count)
29220                                           ! 3944   Bit16u dseg;
29221                       00007A75            _memcpyw:
29222                                           !BCC_EOS
29223                                           ! 3945   Bit16u doffset;
29224                                           !BCC_EOS
29225                                           ! 3946   Bit16u sseg;
29226                                           !BCC_EOS
29227                                           ! 3947   Bit16u soffset;
29228                                           !BCC_EOS
29229                                           ! 3948   Bit16u count;
29230                                           !BCC_EOS
29231                                           ! 3949 {
29232                                           ! 3950 #asm
29233                                           !BCC_ASM
29234                       0000000A            _memcpyw.count	set	$A
29235                       00000006            _memcpyw.sseg	set	6
29236                       00000008            _memcpyw.soffset	set	8
29237                       00000002            _memcpyw.dseg	set	2
29238                       00000004            _memcpyw.doffset	set	4
29239 7A75           55                           push bp
29240 7A76           89E5                         mov bp, sp
29241 7A78           50                             push ax
29242 7A79           51                             push cx
29243 7A7A           06                             push es
29244 7A7B           57                             push di
29245 7A7C           1E                             push ds
29246 7A7D           56                             push si
29247 7A7E           8B4E         0C                mov cx, 12[bp] ; count
29248 7A81           83F9                   00      cmp cx, #0x0000
29249 7A84           74           17                je memcpyw_end
29250 7A86           8B46         04                mov ax, 4[bp] ; dsegment
29251 7A89           8EC0                           mov es, ax
29252 7A8B           8B46         06                mov ax, 6[bp] ; doffset
29253 7A8E           89C7                           mov di, ax
29254 7A90           8B46         08                mov ax, 8[bp] ; ssegment
29255 7A93           8ED8                           mov ds, ax
29256 7A95           8B46         0A                mov ax, 10[bp] ; soffset
29257 7A98           89C6                           mov si, ax
29258 7A9A           FC                             cld
29259 7A9B           F3                             rep
29260 7A9C           A5                              movsw
29261                       00007A9D            memcpyw_end:
29262 7A9D           5E                             pop si
29263 7A9E           1F                             pop ds
29264 7A9F           5F                             pop di
29265 7AA0           07                             pop es
29266 7AA1           59                             pop cx
29267 7AA2           58                             pop ax
29268 7AA3           5D                           pop bp
29269                                           ! 3981 endasm
29270                                           !BCC_ENDASM
29271                                           ! 3982 }
29272 7AA4           C3                         ret
29273                                           ! 3983 static Bit8u
29274                                           ! 3984 read_byte(seg, offset)
29275                                           ! 3985   Bit16u seg;
29276                       00007AA5            _read_byte:
29277                                           !BCC_EOS
29278                                           ! 3986   Bit16u offset;
29279                                           !BCC_EOS
29280                                           ! 3987 {
29281                                           ! 3988 #asm
29282                                           !BCC_ASM
29283                       00000002            _read_byte.seg	set	2
29284                       00000004            _read_byte.offset	set	4
29285 7AA5           55                           push bp
29286 7AA6           89E5                         mov bp, sp
29287 7AA8           53                             push bx
29288 7AA9           1E                             push ds
29289 7AAA           8B46         04                mov ax, 4[bp] ; segment
29290 7AAD           8ED8                           mov ds, ax
29291 7AAF           8B5E         06                mov bx, 6[bp] ; offset
29292 7AB2           8A07                           mov al, [bx]
29293                                               ;; al = return value (byte)
29294 7AB4           1F                             pop ds
29295 7AB5           5B                             pop bx
29296 7AB6           5D                           pop bp
29297                                           ! 4001 endasm
29298                                           !BCC_ENDASM
29299                                           ! 4002 }
29300 7AB7           C3                         ret
29301                                           ! 4003 static Bit16u
29302                                           ! 4004 read_word(seg, offset)
29303                                           ! 4005   Bit16u seg;
29304                       00007AB8            _read_word:
29305                                           !BCC_EOS
29306                                           ! 4006   Bit16u offset;
29307                                           !BCC_EOS
29308                                           ! 4007 {
29309                                           ! 4008 #asm
29310                                           !BCC_ASM
29311                       00000002            _read_word.seg	set	2
29312                       00000004            _read_word.offset	set	4
29313 7AB8           55                           push bp
29314 7AB9           89E5                         mov bp, sp
29315 7ABB           53                             push bx
29316 7ABC           1E                             push ds
29317 7ABD           8B46         04                mov ax, 4[bp] ; segment
29318 7AC0           8ED8                           mov ds, ax
29319 7AC2           8B5E         06                mov bx, 6[bp] ; offset
29320 7AC5           8B07                           mov ax, [bx]
29321                                               ;; ax = return value (word)
29322 7AC7           1F                             pop ds
29323 7AC8           5B                             pop bx
29324 7AC9           5D                           pop bp
29325                                           ! 4021 endasm
29326                                           !BCC_ENDASM
29327                                           ! 4022 }
29328 7ACA           C3                         ret
29329                                           ! 4023 static void
29330                                           ! 4024 write_byte(seg, offset, data)
29331                                           ! 4025   Bit16u seg;
29332                       00007ACB            _write_byte:
29333                                           !BCC_EOS
29334                                           ! 4026   Bit16u offset;
29335                                           !BCC_EOS
29336                                           ! 4027   Bit8u data;
29337                                           !BCC_EOS
29338                                           ! 4028 {
29339                                           ! 4029 #asm
29340                                           !BCC_ASM
29341                       00000002            _write_byte.seg	set	2
29342                       00000006            _write_byte.data	set	6
29343                       00000004            _write_byte.offset	set	4
29344 7ACB           55                           push bp
29345 7ACC           89E5                         mov bp, sp
29346 7ACE           50                             push ax
29347 7ACF           53                             push bx
29348 7AD0           1E                             push ds
29349 7AD1           8B46         04                mov ax, 4[bp] ; segment
29350 7AD4           8ED8                           mov ds, ax
29351 7AD6           8B5E         06                mov bx, 6[bp] ; offset
29352 7AD9           8A46         08                mov al, 8[bp] ; data byte
29353 7ADC           8807                           mov [bx], al ; write data byte
29354 7ADE           1F                             pop ds
29355 7ADF           5B                             pop bx
29356 7AE0           58                             pop ax
29357 7AE1           5D                           pop bp
29358                                           ! 4044 endasm
29359                                           !BCC_ENDASM
29360                                           ! 4045 }
29361 7AE2           C3                         ret
29362                                           ! 4046 static void
29363                                           ! 4047 write_word(seg, offset, data)
29364                                           ! 4048   Bit16u seg;
29365                       00007AE3            _write_word:
29366                                           !BCC_EOS
29367                                           ! 4049   Bit16u offset;
29368                                           !BCC_EOS
29369                                           ! 4050   Bit16u data;
29370                                           !BCC_EOS
29371                                           ! 4051 {
29372                                           ! 4052 #asm
29373                                           !BCC_ASM
29374                       00000002            _write_word.seg	set	2
29375                       00000006            _write_word.data	set	6
29376                       00000004            _write_word.offset	set	4
29377 7AE3           55                           push bp
29378 7AE4           89E5                         mov bp, sp
29379 7AE6           50                             push ax
29380 7AE7           53                             push bx
29381 7AE8           1E                             push ds
29382 7AE9           8B46         04                mov ax, 4[bp] ; segment
29383 7AEC           8ED8                           mov ds, ax
29384 7AEE           8B5E         06                mov bx, 6[bp] ; offset
29385 7AF1           8B46         08                mov ax, 8[bp] ; data word
29386 7AF4           8907                           mov [bx], ax ; write data word
29387 7AF6           1F                             pop ds
29388 7AF7           5B                             pop bx
29389 7AF8           58                             pop ax
29390 7AF9           5D                           pop bp
29391                                           ! 4067 endasm
29392                                           !BCC_ENDASM
29393                                           ! 4068 }
29394 7AFA           C3                         ret
29395                                           ! 4069  Bit8u
29396                                           ! 4070 inb(port)
29397                                           ! 4071   Bit16u port;
29398                                           export	_inb
29399                       00007AFB            _inb:
29400                                           !BCC_EOS
29401                                           ! 4072 {
29402                                           ! 4073 #asm
29403                                           !BCC_ASM
29404                       00000002            _inb.port	set	2
29405 7AFB           55                           push bp
29406 7AFC           89E5                         mov bp, sp
29407 7AFE           52                             push dx
29408 7AFF           8B56         04                mov dx, 4[bp]
29409 7B02           EC                             in al, dx
29410 7B03           5A                             pop dx
29411 7B04           5D                           pop bp
29412                                           ! 4081 endasm
29413                                           !BCC_ENDASM
29414                                           ! 4082 }
29415 7B05           C3                         ret
29416                                           ! 4083   Bit16u
29417                                           ! 4084 inw(port)
29418                                           ! 4085   Bit16u port;
29419                                           export	_inw
29420                       00007B06            _inw:
29421                                           !BCC_EOS
29422                                           ! 4086 {
29423                                           ! 4087 #asm
29424                                           !BCC_ASM
29425                       00000002            _inw.port	set	2
29426 7B06           55                           push bp
29427 7B07           89E5                         mov bp, sp
29428 7B09           52                             push dx
29429 7B0A           8B56         04                mov dx, 4[bp]
29430 7B0D           ED                             in ax, dx
29431 7B0E           5A                             pop dx
29432 7B0F           5D                           pop bp
29433                                           ! 4095 endasm
29434                                           !BCC_ENDASM
29435                                           ! 4096 }
29436 7B10           C3                         ret
29437                                           ! 4097   void
29438                                           ! 4098 outb(port, val)
29439                                           ! 4099   Bit16u port;
29440                                           export	_outb
29441                       00007B11            _outb:
29442                                           !BCC_EOS
29443                                           ! 4100   Bit8u val;
29444                                           !BCC_EOS
29445                                           ! 4101 {
29446                                           ! 4102 #asm
29447                                           !BCC_ASM
29448                       00000004            _outb.val	set	4
29449                       00000002            _outb.port	set	2
29450 7B11           55                           push bp
29451 7B12           89E5                         mov bp, sp
29452 7B14           50                             push ax
29453 7B15           52                             push dx
29454 7B16           8B56         04                mov dx, 4[bp]
29455 7B19           8A46         06                mov al, 6[bp]
29456 7B1C           EE                             out dx, al
29457 7B1D           5A                             pop dx
29458 7B1E           58                             pop ax
29459 7B1F           5D                           pop bp
29460                                           ! 4113 endasm
29461                                           !BCC_ENDASM
29462                                           ! 4114 }
29463 7B20           C3                         ret
29464                                           ! 4115   void
29465                                           ! 4116 outw(port, val)
29466                                           ! 4117   Bit16u port;
29467                                           export	_outw
29468                       00007B21            _outw:
29469                                           !BCC_EOS
29470                                           ! 4118   Bit16u val;
29471                                           !BCC_EOS
29472                                           ! 4119 {
29473                                           ! 4120 #asm
29474                                           !BCC_ASM
29475                       00000004            _outw.val	set	4
29476                       00000002            _outw.port	set	2
29477 7B21           55                           push bp
29478 7B22           89E5                         mov bp, sp
29479 7B24           50                             push ax
29480 7B25           52                             push dx
29481 7B26           8B56         04                mov dx, 4[bp]
29482 7B29           8B46         06                mov ax, 6[bp]
29483 7B2C           EF                             out dx, ax
29484 7B2D           5A                             pop dx
29485 7B2E           58                             pop ax
29486 7B2F           5D                           pop bp
29487                                           ! 4131 endasm
29488                                           !BCC_ENDASM
29489                                           ! 4132 }
29490 7B30           C3                         ret
29491                                           ! 4133 Bit16u get_SS()
29492                                           ! 4134 {
29493                                           export	_get_SS
29494                       00007B31            _get_SS:
29495                                           ! 4135 #asm
29496                                           !BCC_ASM
29497 7B31           8CD0                         mov ax, ss
29498                                           ! 4137 endasm
29499                                           !BCC_ENDASM
29500                                           ! 4138 }
29501 7B33           C3                         ret
29502                                           ! 4139 void printf(s)
29503                                           ! 4140   Bit8u *s;
29504                                           export	_printf
29505                       00007B34            _printf:
29506                                           !BCC_EOS
29507                                           ! 4141 {
29508                                           ! 4142   Bit8u c, format_char;
29509                                           !BCC_EOS
29510                                           ! 4143   Boolean in_format;
29511                                           !BCC_EOS
29512                                           ! 4144   unsigned format_width, i;
29513                                           !BCC_EOS
29514                                           ! 4145   Bit16u *arg_ptr;
29515                                           !BCC_EOS
29516                                           ! 4146   Bit16u arg_seg, arg, digit, nibble, shift_count;
29517                                           !BCC_EOS
29518                                           ! 4147   arg_ptr = &s;
29519 7B34           55                         push	bp
29520 7B35           89E5                       mov	bp,sp
29521 7B37           83C4                   EC  add	sp,*-$14
29522                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29523 7B3A           8D5E         04            lea	bx,4[bp]
29524 7B3D           895E         F6            mov	-$A[bp],bx
29525                                           !BCC_EOS
29526                                           ! 4148   arg_seg = get_SS();
29527                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
29528 7B40           E8         FFEE            call	_get_SS
29529                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
29530 7B43           8946         F4            mov	-$C[bp],ax
29531                                           !BCC_EOS
29532                                           ! 4149   in_format = 0;
29533                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29534 7B46           31C0                       xor	ax,ax
29535 7B48           8946         FC            mov	-4[bp],ax
29536                                           !BCC_EOS
29537                                           ! 4150   format_width = 0;
29538                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29539 7B4B           31C0                       xor	ax,ax
29540 7B4D           8946         FA            mov	-6[bp],ax
29541                                           !BCC_EOS
29542                                           ! 4151   while (c = read_byte(0xc000, s)) {
29543 7B50           E9         0104            br 	.28D
29544                       00007B53            .28E:
29545                                           ! 4152     if ( c == '%' ) {
29546                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
29547 7B53           8A46         FF            mov	al,-1[bp]
29548 7B56           3C                     25  cmp	al,*$25
29549 7B58           75           0E            jne 	.28F
29550                       00007B5A            .290:
29551                                           ! 4153       in_format = 1;
29552                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
29553 7B5A           B8                   0001  mov	ax,*1
29554 7B5D           8946         FC            mov	-4[bp],ax
29555                                           !BCC_EOS
29556                                           ! 4154       format_width = 0;
29557                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29558 7B60           31C0                       xor	ax,ax
29559 7B62           8946         FA            mov	-6[bp],ax
29560                                           !BCC_EOS
29561                                           ! 4155       }
29562                                           ! 4156     else if (in_format) {
29563 7B65           E9         00E8            br 	.291
29564                       00007B68            .28F:
29565 7B68           8B46         FC            mov	ax,-4[bp]
29566 7B6B           85C0                       test	ax,ax
29567 7B6D         0F84         00CF            beq 	.292
29568                       00007B71            .293:
29569                                           ! 4157       if ( (c>='0') && (c<='9') ) {
29570                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29571 7B71           8A46         FF            mov	al,-1[bp]
29572 7B74           3C                     30  cmp	al,*$30
29573 7B76           72           28            jb  	.294
29574                       00007B78            .296:
29575                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
29576 7B78           8A46         FF            mov	al,-1[bp]
29577 7B7B           3C                     39  cmp	al,*$39
29578 7B7D           77           21            ja  	.294
29579                       00007B7F            .295:
29580                                           ! 4158         format_width = (format_width * 10) + (c - '0');
29581                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29582 7B7F           8A46         FF            mov	al,-1[bp]
29583 7B82           30E4                       xor	ah,ah
29584 7B84           05                   FFD0  add	ax,*-$30
29585 7B87           50                         push	ax
29586                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
29587 7B88           8B46         FA            mov	ax,-6[bp]
29588 7B8B           89C2                       mov	dx,ax
29589 7B8D           D1E0                       shl	ax,*1
29590 7B8F           D1E0                       shl	ax,*1
29591 7B91           01D0                       add	ax,dx
29592 7B93           D1E0                       shl	ax,*1
29593                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
29594 7B95           0346         EA            add	ax,-$16[bp]
29595 7B98           44                         inc	sp
29596 7B99           44                         inc	sp
29597                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
29598 7B9A           8946         FA            mov	-6[bp],ax
29599                                           !BCC_EOS
29600                                           ! 4159         }
29601                                           ! 4160       else if (c == 'x') {
29602 7B9D           E9         009E            br 	.297
29603                       00007BA0            .294:
29604                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
29605 7BA0           8A46         FF            mov	al,-1[bp]
29606 7BA3           3C                     78  cmp	al,*$78
29607 7BA5         0F85         0095            bne 	.298
29608                       00007BA9            .299:
29609                                           ! 4161         arg_ptr++;
29610                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29611 7BA9           8B5E         F6            mov	bx,-$A[bp]
29612 7BAC           43                         inc	bx
29613 7BAD           43                         inc	bx
29614 7BAE           895E         F6            mov	-$A[bp],bx
29615                                           !BCC_EOS
29616                                           ! 4162         arg = read_word(arg_seg, arg_ptr);
29617                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29618 7BB1           FF76         F6            push	-$A[bp]
29619                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
29620 7BB4           FF76         F4            push	-$C[bp]
29621                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29622 7BB7           E8         FEFE            call	_read_word
29623 7BBA           83C4                   04  add	sp,*4
29624                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29625 7BBD           8946         F2            mov	-$E[bp],ax
29626                                           !BCC_EOS
29627                                           ! 4163         if (format_width == 0)
29628                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29629 7BC0           8B46         FA            mov	ax,-6[bp]
29630 7BC3           85C0                       test	ax,ax
29631 7BC5           75           06            jne 	.29A
29632                       00007BC7            .29B:
29633                                           ! 4164           format_width = 4;
29634                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
29635 7BC7           B8                   0004  mov	ax,*4
29636 7BCA           8946         FA            mov	-6[bp],ax
29637                                           !BCC_EOS
29638                                           ! 4165         i = 0;
29639                       00007BCD            .29A:
29640                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29641 7BCD           31C0                       xor	ax,ax
29642 7BCF           8946         F8            mov	-8[bp],ax
29643                                           !BCC_EOS
29644                                           ! 4166         digit = format_width - 1;
29645                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
29646 7BD2           8B46         FA            mov	ax,-6[bp]
29647                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
29648 7BD5           48                         dec	ax
29649 7BD6           8946         F0            mov	-$10[bp],ax
29650                                           !BCC_EOS
29651                                           ! 4167         for (i=0; i<format_width; i++) {
29652                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29653 7BD9           31C0                       xor	ax,ax
29654 7BDB           8946         F8            mov	-8[bp],ax
29655                                           !BCC_EOS
29656                                           !BCC_EOS
29657 7BDE           EB           51            jmp .29E
29658                       00007BE0            .29F:
29659                                           ! 4168           nibble = (arg >> (4 * digit)) & 0x000f;
29660                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
29661                                           ! Debug: expression subtree swapping
29662 7BE0           8B46         F0            mov	ax,-$10[bp]
29663 7BE3           D1E0                       shl	ax,*1
29664 7BE5           D1E0                       shl	ax,*1
29665                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29666 7BE7           89C3                       mov	bx,ax
29667 7BE9           8B46         F2            mov	ax,-$E[bp]
29668 7BEC           89D9                       mov	cx,bx
29669 7BEE           D3E8                       shr	ax,cl
29670                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
29671 7BF0           24                     0F  and	al,*$F
29672                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
29673 7BF2           30E4                       xor	ah,ah
29674 7BF4           8946         EE            mov	-$12[bp],ax
29675                                           !BCC_EOS
29676                                           ! 4169           if (nibble <= 9)
29677                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
29678 7BF7           8B46         EE            mov	ax,-$12[bp]
29679 7BFA           3D                   0009  cmp	ax,*9
29680 7BFD           77           13            ja  	.2A0
29681                       00007BFF            .2A1:
29682                                           ! 4170             outb(0xe9, nibble + '0');
29683                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
29684 7BFF           8B46         EE            mov	ax,-$12[bp]
29685                                           ! Debug: list unsigned int = ax+$30 (used reg = )
29686 7C02           05                   0030  add	ax,*$30
29687 7C05           50                         push	ax
29688                                           ! Debug: list int = const $E9 (used reg = )
29689 7C06           B8                   00E9  mov	ax,#$E9
29690 7C09           50                         push	ax
29691                                           ! Debug: func () void = outb+0 (used reg = )
29692 7C0A           E8         FF04            call	_outb
29693 7C0D           83C4                   04  add	sp,*4
29694                                           !BCC_EOS
29695                                           ! 4171           else
29696                                           ! 4172             outb(0xe9, (nibble - 10) + 'A');
29697 7C10           EB           11            jmp .2A2
29698                       00007C12            .2A0:
29699                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
29700 7C12           8B46         EE            mov	ax,-$12[bp]
29701                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
29702                                           ! Debug: list unsigned int = ax+$37 (used reg = )
29703 7C15           05                   0037  add	ax,*$37
29704 7C18           50                         push	ax
29705                                           ! Debug: list int = const $E9 (used reg = )
29706 7C19           B8                   00E9  mov	ax,#$E9
29707 7C1C           50                         push	ax
29708                                           ! Debug: func () void = outb+0 (used reg = )
29709 7C1D           E8         FEF1            call	_outb
29710 7C20           83C4                   04  add	sp,*4
29711                                           !BCC_EOS
29712                                           ! 4173           digit--;
29713                       00007C23            .2A2:
29714                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
29715 7C23           8B46         F0            mov	ax,-$10[bp]
29716 7C26           48                         dec	ax
29717 7C27           8946         F0            mov	-$10[bp],ax
29718                                           !BCC_EOS
29719                                           ! 4174           }
29720                                           ! 4175         in_format = 0;
29721                       00007C2A            .29D:
29722                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
29723 7C2A           8B46         F8            mov	ax,-8[bp]
29724 7C2D           40                         inc	ax
29725 7C2E           8946         F8            mov	-8[bp],ax
29726                       00007C31            .29E:
29727                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
29728 7C31           8B46         F8            mov	ax,-8[bp]
29729 7C34           3B46         FA            cmp	ax,-6[bp]
29730 7C37           72           A7            jb 	.29F
29731                       00007C39            .2A3:
29732                       00007C39            .29C:
29733                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29734 7C39           31C0                       xor	ax,ax
29735 7C3B           8946         FC            mov	-4[bp],ax
29736                                           !BCC_EOS
29737                                           ! 4176         }
29738                                           ! 4177       }
29739                       00007C3E            .298:
29740                       00007C3E            .297:
29741                                           ! 4178     else {
29742 7C3E           EB           10            jmp .2A4
29743                       00007C40            .292:
29744                                           ! 4179       outb(0xe9, c);
29745                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
29746 7C40           8A46         FF            mov	al,-1[bp]
29747 7C43           30E4                       xor	ah,ah
29748 7C45           50                         push	ax
29749                                           ! Debug: list int = const $E9 (used reg = )
29750 7C46           B8                   00E9  mov	ax,#$E9
29751 7C49           50                         push	ax
29752                                           ! Debug: func () void = outb+0 (used reg = )
29753 7C4A           E8         FEC4            call	_outb
29754 7C4D           83C4                   04  add	sp,*4
29755                                           !BCC_EOS
29756                                           ! 4180       }
29757                                           ! 4181     s ++;
29758                       00007C50            .2A4:
29759                       00007C50            .291:
29760                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
29761 7C50           8B5E         04            mov	bx,4[bp]
29762 7C53           43                         inc	bx
29763 7C54           895E         04            mov	4[bp],bx
29764                                           !BCC_EOS
29765                                           ! 4182     }
29766                                           ! 4183 }
29767                       00007C57            .28D:
29768                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
29769 7C57           FF76         04            push	4[bp]
29770                                           ! Debug: list unsigned int = const $C000 (used reg = )
29771 7C5A           B8                   C000  mov	ax,#$C000
29772 7C5D           50                         push	ax
29773                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29774 7C5E           E8         FE44            call	_read_byte
29775 7C61           83C4                   04  add	sp,*4
29776                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
29777 7C64           8846         FF            mov	-1[bp],al
29778 7C67           84C0                       test	al,al
29779 7C69         0F85         FEE6            bne 	.28E
29780                       00007C6D            .2A5:
29781                       00007C6D            .28C:
29782 7C6D           89EC                       mov	sp,bp
29783 7C6F           5D                         pop	bp
29784 7C70           C3                         ret
29785                                           ! 4184 typedef struct
29786                                           ! Register BX used in function printf
29787                                           ! 4185 {
29788                                           ! 4186   unsigned short mode;
29789                                           !BCC_EOS
29790                                           ! 4187   unsigned short width;
29791                                           !BCC_EOS
29792                                           ! 4188   unsigned short height;
29793                                           !BCC_EOS
29794                                           ! 4189   unsigned short depth;
29795                                           !BCC_EOS
29796                                           ! 4190   unsigned short hidden_dac;
29797                                           !BCC_EOS
29798                                           ! 4191   unsigned short *seq;
29799                                           !BCC_EOS
29800                                           ! 4192   unsigned short *graph;
29801                                           !BCC_EOS
29802                                           ! 4193   unsigned short *crtc;
29803                                           !BCC_EOS
29804                                           ! 4194   unsigned char bitsperpixel;
29805                                           !BCC_EOS
29806                                           ! 4195   unsigned char vesacolortype;
29807                                           !BCC_EOS
29808                                           ! 4196   unsigned char vesaredmask;
29809                                           !BCC_EOS
29810                                           ! 4197   unsigned char vesaredpos;
29811                                           !BCC_EOS
29812                                           ! 4198   unsigned char vesagreenmask;
29813                                           !BCC_EOS
29814                                           ! 4199   unsigned char vesagreenpos;
29815                                           !BCC_EOS
29816                                           ! 4200   unsigned char vesabluemask;
29817                                           !BCC_EOS
29818                                           ! 4201   unsigned char vesabluepos;
29819                                           !BCC_EOS
29820                                           ! 4202   unsigned char vesareservedmask;
29821                                           !BCC_EOS
29822                                           ! 4203   unsigned char vesareservedpos;
29823                                           !BCC_EOS
29824                                           ! 4204 } cirrus_mode_t;
29825                                           !BCC_EOS
29826                                           ! 4205 unsigned short cseq_vga[] = {0x0007,0xffff};
29827                                           
29828                                           export	_cseq_vga
29829                       00007C71            _cseq_vga:
29830 7C71                      0007            .word	7
29831 7C73                      FFFF            .word	$FFFF
29832                                           !BCC_EOS
29833                                           ! 4206 unsigned short cgraph_vga[] = {0x0009,0x000a,0x000b,0xffff};
29834                                           export	_cgraph_vga
29835                       00007C75            _cgraph_vga:
29836 7C75                      0009            .word	9
29837 7C77                      000A            .word	$A
29838 7C79                      000B            .word	$B
29839 7C7B                      FFFF            .word	$FFFF
29840                                           !BCC_EOS
29841                                           ! 4207 unsigned short ccrtc_vga[] = {0x001a,0x001b,0x001d,0xffff};
29842                                           export	_ccrtc_vga
29843                       00007C7D            _ccrtc_vga:
29844 7C7D                      001A            .word	$1A
29845 7C7F                      001B            .word	$1B
29846 7C81                      001D            .word	$1D
29847 7C83                      FFFF            .word	$FFFF
29848                                           !BCC_EOS
29849                                           ! 4208 unsigned short cgraph_svgacolor[] = {
29850                                           export	_cgraph_svgacolor
29851                       00007C85            _cgraph_svgacolor:
29852                                           ! 4209 0x0000,0x000
29853 7C85                      0000            .word	0
29854                                           ! 4209 1,0x0002,0x0003,0x0004,0x4005,0x0506,0x0f07,0xff08,
29855 7C87                      0001            .word	1
29856 7C89                      0002            .word	2
29857 7C8B                      0003            .word	3
29858 7C8D                      0004            .word	4
29859 7C8F                      4005            .word	$4005
29860 7C91                      0506            .word	$506
29861 7C93                      0F07            .word	$F07
29862 7C95                      FF08            .word	$FF08
29863                                           ! 4210 0x0009,0x000a,0x000b,
29864 7C97                      0009            .word	9
29865 7C99                      000A            .word	$A
29866 7C9B                      000B            .word	$B
29867                                           ! 4211 0xffff
29868                                           ! 4212 };
29869 7C9D                      FFFF            .word	$FFFF
29870                                           !BCC_EOS
29871                                           ! 4213 unsigned short cseq_640x480x8[] = {
29872                                           export	_cseq_640x480x8
29873                       00007C9F            _cseq_640x480x8:
29874                                           ! 4214 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
29875 7C9F                      0300            .word	$300
29876 7CA1                      2101            .word	$2101
29877 7CA3                      0F02            .word	$F02
29878 7CA5                      0003            .word	3
29879 7CA7                      0E04            .word	$E04
29880 7CA9                      1107            .word	$1107
29881                                           ! 4215 0x580b,0x580c,0x580d,0x580e,
29882 7CAB                      580B            .word	$580B
29883 7CAD                      580C            .word	$580C
29884 7CAF                      580D            .word	$580D
29885 7CB1                      580E            .word	$580E
29886                                           ! 4216 0x0412,0x0013,0x2017,
29887 7CB3                      0412            .word	$412
29888 7CB5                      0013            .word	$13
29889 7CB7                      2017            .word	$2017
29890                                           ! 4217 0x331b,0x331c,0x331d,0x331e,
29891 7CB9                      331B            .word	$331B
29892 7CBB                      331C            .word	$331C
29893 7CBD                      331D            .word	$331D
29894 7CBF                      331E            .word	$331E
29895                                           ! 4218 0xffff
29896                                           ! 4219 };
29897 7CC1                      FFFF            .word	$FFFF
29898                                           !BCC_EOS
29899                                           ! 4220 unsigned short ccrtc_640x480x8[] = {
29900                                           export	_ccrtc_640x480x8
29901                       00007CC3            _ccrtc_640x480x8:
29902                                           ! 4221 0x2c11,
29903 7CC3                      2C11            .word	$2C11
29904                                           ! 4222 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
29905 7CC5                      5F00            .word	$5F00
29906 7CC7                      4F01            .word	$4F01
29907 7CC9                      4F02            .word	$4F02
29908 7CCB                      8003            .word	$8003
29909 7CCD                      5204            .word	$5204
29910 7CCF                      1E05            .word	$1E05
29911 7CD1                      0B06            .word	$B06
29912 7CD3                      3E07            .word	$3E07
29913                                           ! 4223 0x4009,0x000c,0x000d,
29914 7CD5                      4009            .word	$4009
29915 7CD7                      000C            .word	$C
29916 7CD9                      000D            .word	$D
29917                                           ! 4224 0xea10,0xdf12,0x5013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
29918 7CDB                      EA10            .word	$EA10
29919 7CDD                      DF12            .word	$DF12
29920 7CDF                      5013            .word	$5013
29921 7CE1                      4014            .word	$4014
29922 7CE3                      DF15            .word	$DF15
29923 7CE5                      0B16            .word	$B16
29924 7CE7                      C317            .word	$C317
29925 7CE9                      FF18            .word	$FF18
29926                                           ! 4225 0x001a,0x221b,0x001d,
29927 7CEB                      001A            .word	$1A
29928 7CED                      221B            .word	$221B
29929 7CEF                      001D            .word	$1D
29930                                           ! 4226 0xffff
29931                                           ! 4227 };
29932 7CF1                      FFFF            .word	$FFFF
29933                                           !BCC_EOS
29934                                           ! 4228 unsigned short cseq_640x480x16[] = {
29935                                           export	_cseq_640x480x16
29936                       00007CF3            _cseq_640x480x16:
29937                                           ! 4229 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
29938 7CF3                      0300            .word	$300
29939 7CF5                      2101            .word	$2101
29940 7CF7                      0F02            .word	$F02
29941 7CF9                      0003            .word	3
29942 7CFB                      0E04            .word	$E04
29943 7CFD                      1707            .word	$1707
29944                                           ! 4230 0x580b,0x580c,0x580d,0x580e,
29945 7CFF                      580B            .word	$580B
29946 7D01                      580C            .word	$580C
29947 7D03                      580D            .word	$580D
29948 7D05                      580E            .word	$580E
29949                                           ! 4231 0x0412,0x0013,0x2017,
29950 7D07                      0412            .word	$412
29951 7D09                      0013            .word	$13
29952 7D0B                      2017            .word	$2017
29953                                           ! 4232 0x331b,0x331c,0x331d,0x331e,
29954 7D0D                      331B            .word	$331B
29955 7D0F                      331C            .word	$331C
29956 7D11                      331D            .word	$331D
29957 7D13                      331E            .word	$331E
29958                                           ! 4233 0xffff
29959                                           ! 4234 };
29960 7D15                      FFFF            .word	$FFFF
29961                                           !BCC_EOS
29962                                           ! 4235 unsigned short ccrtc_640x480x16[] = {
29963                                           export	_ccrtc_640x480x16
29964                       00007D17            _ccrtc_640x480x16:
29965                                           ! 4236 0x2c11,
29966 7D17                      2C11            .word	$2C11
29967                                           ! 4237 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
29968 7D19                      5F00            .word	$5F00
29969 7D1B                      4F01            .word	$4F01
29970 7D1D                      4F02            .word	$4F02
29971 7D1F                      8003            .word	$8003
29972 7D21                      5204            .word	$5204
29973 7D23                      1E05            .word	$1E05
29974 7D25                      0B06            .word	$B06
29975 7D27                      3E07            .word	$3E07
29976                                           ! 4238 0x4009,0x000c,0x000d,
29977 7D29                      4009            .word	$4009
29978 7D2B                      000C            .word	$C
29979 7D2D                      000D            .word	$D
29980                                           ! 4239 0xea10,0xdf12,0xa013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
29981 7D2F                      EA10            .word	$EA10
29982 7D31                      DF12            .word	$DF12
29983 7D33                      A013            .word	$A013
29984 7D35                      4014            .word	$4014
29985 7D37                      DF15            .word	$DF15
29986 7D39                      0B16            .word	$B16
29987 7D3B                      C317            .word	$C317
29988 7D3D                      FF18            .word	$FF18
29989                                           ! 4240 0x001a,0x221b,0x001d,
29990 7D3F                      001A            .word	$1A
29991 7D41                      221B            .word	$221B
29992 7D43                      001D            .word	$1D
29993                                           ! 4241 0xffff
29994                                           ! 4242 };
29995 7D45                      FFFF            .word	$FFFF
29996                                           !BCC_EOS
29997                                           ! 4243 unsigned short cseq_640x480x24[] = {
29998                                           export	_cseq_640x480x24
29999                       00007D47            _cseq_640x480x24:
30000                                           ! 4244 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1507,
30001 7D47                      0300            .word	$300
30002 7D49                      2101            .word	$2101
30003 7D4B                      0F02            .word	$F02
30004 7D4D                      0003            .word	3
30005 7D4F                      0E04            .word	$E04
30006 7D51                      1507            .word	$1507
30007                                           ! 4245 0x580b,0x580c,0x580d,0x580e,
30008 7D53                      580B            .word	$580B
30009 7D55                      580C            .word	$580C
30010 7D57                      580D            .word	$580D
30011 7D59                      580E            .word	$580E
30012                                           ! 4246 0x0412,0x0013,0x2017,
30013 7D5B                      0412            .word	$412
30014 7D5D                      0013            .word	$13
30015 7D5F                      2017            .word	$2017
30016                                           ! 4247 0x331b,0x331c,0x331d,0x331e,
30017 7D61                      331B            .word	$331B
30018 7D63                      331C            .word	$331C
30019 7D65                      331D            .word	$331D
30020 7D67                      331E            .word	$331E
30021                                           ! 4248 0xffff
30022                                           ! 4249 };
30023 7D69                      FFFF            .word	$FFFF
30024                                           !BCC_EOS
30025                                           ! 4250 unsigned short ccrtc_640x480x24[] = {
30026                                           export	_ccrtc_640x480x24
30027                       00007D6B            _ccrtc_640x480x24:
30028                                           ! 4251 0x2c11,
30029 7D6B                      2C11            .word	$2C11
30030                                           ! 4252 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
30031 7D6D                      5F00            .word	$5F00
30032 7D6F                      4F01            .word	$4F01
30033 7D71                      4F02            .word	$4F02
30034 7D73                      8003            .word	$8003
30035 7D75                      5204            .word	$5204
30036 7D77                      1E05            .word	$1E05
30037 7D79                      0B06            .word	$B06
30038 7D7B                      3E07            .word	$3E07
30039                                           ! 4253 0x4009,0x000c,0x000d,
30040 7D7D                      4009            .word	$4009
30041 7D7F                      000C            .word	$C
30042 7D81                      000D            .word	$D
30043                                           ! 4254 0xea10,0xdf12,0x0013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
30044 7D83                      EA10            .word	$EA10
30045 7D85                      DF12            .word	$DF12
30046 7D87                      0013            .word	$13
30047 7D89                      4014            .word	$4014
30048 7D8B                      DF15            .word	$DF15
30049 7D8D                      0B16            .word	$B16
30050 7D8F                      C317            .word	$C317
30051 7D91                      FF18            .word	$FF18
30052                                           ! 4255 0x001a,0x321b,0x001d,
30053 7D93                      001A            .word	$1A
30054 7D95                      321B            .word	$321B
30055 7D97                      001D            .word	$1D
30056                                           ! 4256 0xffff
30057                                           ! 4257 };
30058 7D99                      FFFF            .word	$FFFF
30059                                           !BCC_EOS
30060                                           ! 4258 unsigned short cseq_800x600x8[] = {
30061                                           export	_cseq_800x600x8
30062                       00007D9B            _cseq_800x600x8:
30063                                           ! 4259 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30064 7D9B                      0300            .word	$300
30065 7D9D                      2101            .word	$2101
30066 7D9F                      0F02            .word	$F02
30067 7DA1                      0003            .word	3
30068 7DA3                      0E04            .word	$E04
30069 7DA5                      1107            .word	$1107
30070                                           ! 4260 0x230b,0x230c,0x230d,0x230e,
30071 7DA7                      230B            .word	$230B
30072 7DA9                      230C            .word	$230C
30073 7DAB                      230D            .word	$230D
30074 7DAD                      230E            .word	$230E
30075                                           ! 4261 0x0412,0x0013,0x2017,
30076 7DAF                      0412            .word	$412
30077 7DB1                      0013            .word	$13
30078 7DB3                      2017            .word	$2017
30079                                           ! 4262 0x141b,0x141c,0x141d,0x141e,
30080 7DB5                      141B            .word	$141B
30081 7DB7                      141C            .word	$141C
30082 7DB9                      141D            .word	$141D
30083 7DBB                      141E            .word	$141E
30084                                           ! 4263 0xffff
30085                                           ! 4264 };
30086 7DBD                      FFFF            .word	$FFFF
30087                                           !BCC_EOS
30088                                           ! 4265 unsigned short ccrtc_800x600x8[] = {
30089                                           export	_ccrtc_800x600x8
30090                       00007DBF            _ccrtc_800x600x8:
30091                                           ! 4266 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30092 7DBF                      2311            .word	$2311
30093 7DC1                      7D00            .word	$7D00
30094 7DC3                      6301            .word	$6301
30095 7DC5                      6302            .word	$6302
30096 7DC7                      8003            .word	$8003
30097 7DC9                      6B04            .word	$6B04
30098 7DCB                      1A05            .word	$1A05
30099 7DCD                      9806            .word	$9806
30100 7DCF                      F007            .word	$F007
30101                                           ! 4267 0x6009,0x000c,0x000d,
30102 7DD1                      6009            .word	$6009
30103 7DD3                      000C            .word	$C
30104 7DD5                      000D            .word	$D
30105                                           ! 4268 0x7d10,0x5712,0x6413,0x4014,0x5715,0x9816,0xc317,0xff18,
30106 7DD7                      7D10            .word	$7D10
30107 7DD9                      5712            .word	$5712
30108 7DDB                      6413            .word	$6413
30109 7DDD                      4014            .word	$4014
30110 7DDF                      5715            .word	$5715
30111 7DE1                      9816            .word	$9816
30112 7DE3                      C317            .word	$C317
30113 7DE5                      FF18            .word	$FF18
30114                                           ! 4269 0x001a,0x221b,0x001d,
30115 7DE7                      001A            .word	$1A
30116 7DE9                      221B            .word	$221B
30117 7DEB                      001D            .word	$1D
30118                                           ! 4270 0xffff
30119                                           ! 4271 };
30120 7DED                      FFFF            .word	$FFFF
30121                                           !BCC_EOS
30122                                           ! 4272 unsigned short cseq_800x600x16[] = {
30123                                           export	_cseq_800x600x16
30124                       00007DEF            _cseq_800x600x16:
30125                                           ! 4273 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30126 7DEF                      0300            .word	$300
30127 7DF1                      2101            .word	$2101
30128 7DF3                      0F02            .word	$F02
30129 7DF5                      0003            .word	3
30130 7DF7                      0E04            .word	$E04
30131 7DF9                      1707            .word	$1707
30132                                           ! 4274 0x230b,0x230c,0x230d,0x230e,
30133 7DFB                      230B            .word	$230B
30134 7DFD                      230C            .word	$230C
30135 7DFF                      230D            .word	$230D
30136 7E01                      230E            .word	$230E
30137                                           ! 4275 0x0412,0x0013,0x2017,
30138 7E03                      0412            .word	$412
30139 7E05                      0013            .word	$13
30140 7E07                      2017            .word	$2017
30141                                           ! 4276 0x141b,0x141c,0x141d,0x141e,
30142 7E09                      141B            .word	$141B
30143 7E0B                      141C            .word	$141C
30144 7E0D                      141D            .word	$141D
30145 7E0F                      141E            .word	$141E
30146                                           ! 4277 0xffff
30147                                           ! 4278 };
30148 7E11                      FFFF            .word	$FFFF
30149                                           !BCC_EOS
30150                                           ! 4279 unsigned short ccrtc_800x600x16[] = {
30151                                           export	_ccrtc_800x600x16
30152                       00007E13            _ccrtc_800x600x16:
30153                                           ! 4280 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30154 7E13                      2311            .word	$2311
30155 7E15                      7D00            .word	$7D00
30156 7E17                      6301            .word	$6301
30157 7E19                      6302            .word	$6302
30158 7E1B                      8003            .word	$8003
30159 7E1D                      6B04            .word	$6B04
30160 7E1F                      1A05            .word	$1A05
30161 7E21                      9806            .word	$9806
30162 7E23                      F007            .word	$F007
30163                                           ! 4281 0x6009,0x000c,0x000d,
30164 7E25                      6009            .word	$6009
30165 7E27                      000C            .word	$C
30166 7E29                      000D            .word	$D
30167                                           ! 4282 0x7d10,0x5712,0xc813,0x4014,0x5715,0x9816,0xc317,0xff18,
30168 7E2B                      7D10            .word	$7D10
30169 7E2D                      5712            .word	$5712
30170 7E2F                      C813            .word	$C813
30171 7E31                      4014            .word	$4014
30172 7E33                      5715            .word	$5715
30173 7E35                      9816            .word	$9816
30174 7E37                      C317            .word	$C317
30175 7E39                      FF18            .word	$FF18
30176                                           ! 4283 0x001a,0x221b,0x001d,
30177 7E3B                      001A            .word	$1A
30178 7E3D                      221B            .word	$221B
30179 7E3F                      001D            .word	$1D
30180                                           ! 4284 0xffff
30181                                           ! 4285 };
30182 7E41                      FFFF            .word	$FFFF
30183                                           !BCC_EOS
30184                                           ! 4286 unsigned short cseq_800x600x24[] = {
30185                                           export	_cseq_800x600x24
30186                       00007E43            _cseq_800x600x24:
30187                                           ! 4287 0x0300,0x2101
30188 7E43                      0300            .word	$300
30189                                           ! 4287 ,0x0f02,0x0003,0x0e04,0x1507,
30190 7E45                      2101            .word	$2101
30191 7E47                      0F02            .word	$F02
30192 7E49                      0003            .word	3
30193 7E4B                      0E04            .word	$E04
30194 7E4D                      1507            .word	$1507
30195                                           ! 4288 0x230b,0x230c,0x230d,0x230e,
30196 7E4F                      230B            .word	$230B
30197 7E51                      230C            .word	$230C
30198 7E53                      230D            .word	$230D
30199 7E55                      230E            .word	$230E
30200                                           ! 4289 0x0412,0x0013,0x2017,
30201 7E57                      0412            .word	$412
30202 7E59                      0013            .word	$13
30203 7E5B                      2017            .word	$2017
30204                                           ! 4290 0x141b,0x141c,0x141d,0x141e,
30205 7E5D                      141B            .word	$141B
30206 7E5F                      141C            .word	$141C
30207 7E61                      141D            .word	$141D
30208 7E63                      141E            .word	$141E
30209                                           ! 4291 0xffff
30210                                           ! 4292 };
30211 7E65                      FFFF            .word	$FFFF
30212                                           !BCC_EOS
30213                                           ! 4293 unsigned short ccrtc_800x600x24[] = {
30214                                           export	_ccrtc_800x600x24
30215                       00007E67            _ccrtc_800x600x24:
30216                                           ! 4294 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30217 7E67                      2311            .word	$2311
30218 7E69                      7D00            .word	$7D00
30219 7E6B                      6301            .word	$6301
30220 7E6D                      6302            .word	$6302
30221 7E6F                      8003            .word	$8003
30222 7E71                      6B04            .word	$6B04
30223 7E73                      1A05            .word	$1A05
30224 7E75                      9806            .word	$9806
30225 7E77                      F007            .word	$F007
30226                                           ! 4295 0x6009,0x000c,0x000d,
30227 7E79                      6009            .word	$6009
30228 7E7B                      000C            .word	$C
30229 7E7D                      000D            .word	$D
30230                                           ! 4296 0x7d10,0x5712,0x2c13,0x4014,0x5715,0x9816,0xc317,0xff18,
30231 7E7F                      7D10            .word	$7D10
30232 7E81                      5712            .word	$5712
30233 7E83                      2C13            .word	$2C13
30234 7E85                      4014            .word	$4014
30235 7E87                      5715            .word	$5715
30236 7E89                      9816            .word	$9816
30237 7E8B                      C317            .word	$C317
30238 7E8D                      FF18            .word	$FF18
30239                                           ! 4297 0x001a,0x321b,0x001d,
30240 7E8F                      001A            .word	$1A
30241 7E91                      321B            .word	$321B
30242 7E93                      001D            .word	$1D
30243                                           ! 4298 0xffff
30244                                           ! 4299 };
30245 7E95                      FFFF            .word	$FFFF
30246                                           !BCC_EOS
30247                                           ! 4300 unsigned short cseq_1024x768x8[] = {
30248                                           export	_cseq_1024x768x8
30249                       00007E97            _cseq_1024x768x8:
30250                                           ! 4301 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30251 7E97                      0300            .word	$300
30252 7E99                      2101            .word	$2101
30253 7E9B                      0F02            .word	$F02
30254 7E9D                      0003            .word	3
30255 7E9F                      0E04            .word	$E04
30256 7EA1                      1107            .word	$1107
30257                                           ! 4302 0x760b,0x760c,0x760d,0x760e,
30258 7EA3                      760B            .word	$760B
30259 7EA5                      760C            .word	$760C
30260 7EA7                      760D            .word	$760D
30261 7EA9                      760E            .word	$760E
30262                                           ! 4303 0x0412,0x0013,0x2017,
30263 7EAB                      0412            .word	$412
30264 7EAD                      0013            .word	$13
30265 7EAF                      2017            .word	$2017
30266                                           ! 4304 0x341b,0x341c,0x341d,0x341e,
30267 7EB1                      341B            .word	$341B
30268 7EB3                      341C            .word	$341C
30269 7EB5                      341D            .word	$341D
30270 7EB7                      341E            .word	$341E
30271                                           ! 4305 0xffff
30272                                           ! 4306 };
30273 7EB9                      FFFF            .word	$FFFF
30274                                           !BCC_EOS
30275                                           ! 4307 unsigned short ccrtc_1024x768x8[] = {
30276                                           export	_ccrtc_1024x768x8
30277                       00007EBB            _ccrtc_1024x768x8:
30278                                           ! 4308 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30279 7EBB                      2911            .word	$2911
30280 7EBD                      A300            .word	$A300
30281 7EBF                      7F01            .word	$7F01
30282 7EC1                      7F02            .word	$7F02
30283 7EC3                      8603            .word	$8603
30284 7EC5                      8304            .word	$8304
30285 7EC7                      9405            .word	$9405
30286 7EC9                      2406            .word	$2406
30287 7ECB                      F507            .word	$F507
30288                                           ! 4309 0x6009,0x000c,0x000d,
30289 7ECD                      6009            .word	$6009
30290 7ECF                      000C            .word	$C
30291 7ED1                      000D            .word	$D
30292                                           ! 4310 0x0310,0xff12,0x8013,0x4014,0xff15,0x2416,0xc317,0xff18,
30293 7ED3                      0310            .word	$310
30294 7ED5                      FF12            .word	$FF12
30295 7ED7                      8013            .word	$8013
30296 7ED9                      4014            .word	$4014
30297 7EDB                      FF15            .word	$FF15
30298 7EDD                      2416            .word	$2416
30299 7EDF                      C317            .word	$C317
30300 7EE1                      FF18            .word	$FF18
30301                                           ! 4311 0x001a,0x221b,0x001d,
30302 7EE3                      001A            .word	$1A
30303 7EE5                      221B            .word	$221B
30304 7EE7                      001D            .word	$1D
30305                                           ! 4312 0xffff
30306                                           ! 4313 };
30307 7EE9                      FFFF            .word	$FFFF
30308                                           !BCC_EOS
30309                                           ! 4314 unsigned short cseq_1024x768x16[] = {
30310                                           export	_cseq_1024x768x16
30311                       00007EEB            _cseq_1024x768x16:
30312                                           ! 4315 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30313 7EEB                      0300            .word	$300
30314 7EED                      2101            .word	$2101
30315 7EEF                      0F02            .word	$F02
30316 7EF1                      0003            .word	3
30317 7EF3                      0E04            .word	$E04
30318 7EF5                      1707            .word	$1707
30319                                           ! 4316 0x760b,0x760c,0x760d,0x760e,
30320 7EF7                      760B            .word	$760B
30321 7EF9                      760C            .word	$760C
30322 7EFB                      760D            .word	$760D
30323 7EFD                      760E            .word	$760E
30324                                           ! 4317 0x0412,0x0013,0x2017,
30325 7EFF                      0412            .word	$412
30326 7F01                      0013            .word	$13
30327 7F03                      2017            .word	$2017
30328                                           ! 4318 0x341b,0x341c,0x341d,0x341e,
30329 7F05                      341B            .word	$341B
30330 7F07                      341C            .word	$341C
30331 7F09                      341D            .word	$341D
30332 7F0B                      341E            .word	$341E
30333                                           ! 4319 0xffff
30334                                           ! 4320 };
30335 7F0D                      FFFF            .word	$FFFF
30336                                           !BCC_EOS
30337                                           ! 4321 unsigned short ccrtc_1024x768x16[] = {
30338                                           export	_ccrtc_1024x768x16
30339                       00007F0F            _ccrtc_1024x768x16:
30340                                           ! 4322 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30341 7F0F                      2911            .word	$2911
30342 7F11                      A300            .word	$A300
30343 7F13                      7F01            .word	$7F01
30344 7F15                      7F02            .word	$7F02
30345 7F17                      8603            .word	$8603
30346 7F19                      8304            .word	$8304
30347 7F1B                      9405            .word	$9405
30348 7F1D                      2406            .word	$2406
30349 7F1F                      F507            .word	$F507
30350                                           ! 4323 0x6009,0x000c,0x000d,
30351 7F21                      6009            .word	$6009
30352 7F23                      000C            .word	$C
30353 7F25                      000D            .word	$D
30354                                           ! 4324 0x0310,0xff12,0x0013,0x4014,0xff15,0x2416,0xc317,0xff18,
30355 7F27                      0310            .word	$310
30356 7F29                      FF12            .word	$FF12
30357 7F2B                      0013            .word	$13
30358 7F2D                      4014            .word	$4014
30359 7F2F                      FF15            .word	$FF15
30360 7F31                      2416            .word	$2416
30361 7F33                      C317            .word	$C317
30362 7F35                      FF18            .word	$FF18
30363                                           ! 4325 0x001a,0x321b,0x001d,
30364 7F37                      001A            .word	$1A
30365 7F39                      321B            .word	$321B
30366 7F3B                      001D            .word	$1D
30367                                           ! 4326 0xffff
30368                                           ! 4327 };
30369 7F3D                      FFFF            .word	$FFFF
30370                                           !BCC_EOS
30371                                           ! 4328 unsigned short cseq_1024x768x24[] = {
30372                                           export	_cseq_1024x768x24
30373                       00007F3F            _cseq_1024x768x24:
30374                                           ! 4329 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1507,
30375 7F3F                      0300            .word	$300
30376 7F41                      2101            .word	$2101
30377 7F43                      0F02            .word	$F02
30378 7F45                      0003            .word	3
30379 7F47                      0E04            .word	$E04
30380 7F49                      1507            .word	$1507
30381                                           ! 4330 0x760b,0x760c,0x760d,0x760e,
30382 7F4B                      760B            .word	$760B
30383 7F4D                      760C            .word	$760C
30384 7F4F                      760D            .word	$760D
30385 7F51                      760E            .word	$760E
30386                                           ! 4331 0x0412,0x0013,0x2017,
30387 7F53                      0412            .word	$412
30388 7F55                      0013            .word	$13
30389 7F57                      2017            .word	$2017
30390                                           ! 4332 0x341b,0x341c,0x341d,0x341e,
30391 7F59                      341B            .word	$341B
30392 7F5B                      341C            .word	$341C
30393 7F5D                      341D            .word	$341D
30394 7F5F                      341E            .word	$341E
30395                                           ! 4333 0xffff
30396                                           ! 4334 };
30397 7F61                      FFFF            .word	$FFFF
30398                                           !BCC_EOS
30399                                           ! 4335 unsigned short ccrtc_1024x768x24[] = {
30400                                           export	_ccrtc_1024x768x24
30401                       00007F63            _ccrtc_1024x768x24:
30402                                           ! 4336 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30403 7F63                      2911            .word	$2911
30404 7F65                      A300            .word	$A300
30405 7F67                      7F01            .word	$7F01
30406 7F69                      7F02            .word	$7F02
30407 7F6B                      8603            .word	$8603
30408 7F6D                      8304            .word	$8304
30409 7F6F                      9405            .word	$9405
30410 7F71                      2406            .word	$2406
30411 7F73                      F507            .word	$F507
30412                                           ! 4337 0x6009,0x000c,0x000d,
30413 7F75                      6009            .word	$6009
30414 7F77                      000C            .word	$C
30415 7F79                      000D            .word	$D
30416                                           ! 4338 0x0310,0xff12,0x8013,0x4014,0xff15,0x2416,0xc317,0xff18,
30417 7F7B                      0310            .word	$310
30418 7F7D                      FF12            .word	$FF12
30419 7F7F                      8013            .word	$8013
30420 7F81                      4014            .word	$4014
30421 7F83                      FF15            .word	$FF15
30422 7F85                      2416            .word	$2416
30423 7F87                      C317            .word	$C317
30424 7F89                      FF18            .word	$FF18
30425                                           ! 4339 0x001a,0x321b,0x001d,
30426 7F8B                      001A            .word	$1A
30427 7F8D                      321B            .word	$321B
30428 7F8F                      001D            .word	$1D
30429                                           ! 4340 0xffff
30430                                           ! 4341 };
30431 7F91                      FFFF            .word	$FFFF
30432                                           !BCC_EOS
30433                                           ! 4342 unsigned short cseq_1280x1024x8[] = {
30434                                           export	_cseq_1280x1024x8
30435                       00007F93            _cseq_1280x1024x8:
30436                                           ! 4343 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30437 7F93                      0300            .word	$300
30438 7F95                      2101            .word	$2101
30439 7F97                      0F02            .word	$F02
30440 7F99                      0003            .word	3
30441 7F9B                      0E04            .word	$E04
30442 7F9D                      1107            .word	$1107
30443                                           ! 4344 0x760b,0x760c,0x760d,0x760e,
30444 7F9F                      760B            .word	$760B
30445 7FA1                      760C            .word	$760C
30446 7FA3                      760D            .word	$760D
30447 7FA5                      760E            .word	$760E
30448                                           ! 4345 0x0412,0x0013,0x2017,
30449 7FA7                      0412            .word	$412
30450 7FA9                      0013            .word	$13
30451 7FAB                      2017            .word	$2017
30452                                           ! 4346 0x341b,0x341c,0x341d,0x341e,
30453 7FAD                      341B            .word	$341B
30454 7FAF                      341C            .word	$341C
30455 7FB1                      341D            .word	$341D
30456 7FB3                      341E            .word	$341E
30457                                           ! 4347 0xffff
30458                                           ! 4348 };
30459 7FB5                      FFFF            .word	$FFFF
30460                                           !BCC_EOS
30461                                           ! 4349 unsigned short ccrtc_1280x1024x8[] = {
30462                                           export	_ccrtc_1280x1024x8
30463                       00007FB7            _ccrtc_1280x1024x8:
30464                                           ! 4350 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30465 7FB7                      2911            .word	$2911
30466 7FB9                      C300            .word	$C300
30467 7FBB                      9F01            .word	$9F01
30468 7FBD                      9F02            .word	$9F02
30469 7FBF                      8603            .word	$8603
30470 7FC1                      8304            .word	$8304
30471 7FC3                      9405            .word	$9405
30472 7FC5                      2406            .word	$2406
30473 7FC7                      F707            .word	$F707
30474                                           ! 4351 0x6009,0x000c,0x000d,
30475 7FC9                      6009            .word	$6009
30476 7FCB                      000C            .word	$C
30477 7FCD                      000D            .word	$D
30478                                           ! 4352 0x0310,0xff12,0xa013,0x4014,0xff15,0x2416,0xc317,0xff18,
30479 7FCF                      0310            .word	$310
30480 7FD1                      FF12            .word	$FF12
30481 7FD3                      A013            .word	$A013
30482 7FD5                      4014            .word	$4014
30483 7FD7                      FF15            .word	$FF15
30484 7FD9                      2416            .word	$2416
30485 7FDB                      C317            .word	$C317
30486 7FDD                      FF18            .word	$FF18
30487                                           ! 4353 0x001a,0x221b,0x001d,
30488 7FDF                      001A            .word	$1A
30489 7FE1                      221B            .word	$221B
30490 7FE3                      001D            .word	$1D
30491                                           ! 4354 0xffff
30492                                           ! 4355 };
30493 7FE5                      FFFF            .word	$FFFF
30494                                           !BCC_EOS
30495                                           ! 4356 unsigned short cseq_1280x1024x16[] = {
30496                                           export	_cseq_1280x1024x16
30497                       00007FE7            _cseq_1280x1024x16:
30498                                           ! 4357 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30499 7FE7                      0300            .word	$300
30500 7FE9                      2101            .word	$2101
30501 7FEB                      0F02            .word	$F02
30502 7FED                      0003            .word	3
30503 7FEF                      0E04            .word	$E04
30504 7FF1                      1707            .word	$1707
30505                                           ! 4358 0x760b,0x760c,0x760d,0x760e,
30506 7FF3                      760B            .word	$760B
30507 7FF5                      760C            .word	$760C
30508 7FF7                      760D            .word	$760D
30509 7FF9                      760E            .word	$760E
30510                                           ! 4359 0x0412,0x0013,0x2017,
30511 7FFB                      0412            .word	$412
30512 7FFD                      0013            .word	$13
30513 7FFF                      2017            .word	$2017
30514                                           ! 4360 0x341b,0x341c,0x341d,0x341e,
30515 8001                      341B            .word	$341B
30516 8003                      341C            .word	$341C
30517 8005                      341D            .word	$341D
30518 8007                      341E            .word	$341E
30519                                           ! 4361 0xffff
30520                                           ! 4362 };
30521 8009                      FFFF            .word	$FFFF
30522                                           !BCC_EOS
30523                                           ! 4363 unsig
30524                                           ! 4363 ned short ccrtc_1280x1024x16[] = {
30525                                           export	_ccrtc_1280x1024x16
30526                       0000800B            _ccrtc_1280x1024x16:
30527                                           ! 4364 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30528 800B                      2911            .word	$2911
30529 800D                      C300            .word	$C300
30530 800F                      9F01            .word	$9F01
30531 8011                      9F02            .word	$9F02
30532 8013                      8603            .word	$8603
30533 8015                      8304            .word	$8304
30534 8017                      9405            .word	$9405
30535 8019                      2406            .word	$2406
30536 801B                      F707            .word	$F707
30537                                           ! 4365 0x6009,0x000c,0x000d,
30538 801D                      6009            .word	$6009
30539 801F                      000C            .word	$C
30540 8021                      000D            .word	$D
30541                                           ! 4366 0x0310,0xff12,0x4013,0x4014,0xff15,0x2416,0xc317,0xff18,
30542 8023                      0310            .word	$310
30543 8025                      FF12            .word	$FF12
30544 8027                      4013            .word	$4013
30545 8029                      4014            .word	$4014
30546 802B                      FF15            .word	$FF15
30547 802D                      2416            .word	$2416
30548 802F                      C317            .word	$C317
30549 8031                      FF18            .word	$FF18
30550                                           ! 4367 0x001a,0x321b,0x001d,
30551 8033                      001A            .word	$1A
30552 8035                      321B            .word	$321B
30553 8037                      001D            .word	$1D
30554                                           ! 4368 0xffff
30555                                           ! 4369 };
30556 8039                      FFFF            .word	$FFFF
30557                                           !BCC_EOS
30558                                           ! 4370 unsigned short cseq_1600x1200x8[] = {
30559                                           export	_cseq_1600x1200x8
30560                       0000803B            _cseq_1600x1200x8:
30561                                           ! 4371 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30562 803B                      0300            .word	$300
30563 803D                      2101            .word	$2101
30564 803F                      0F02            .word	$F02
30565 8041                      0003            .word	3
30566 8043                      0E04            .word	$E04
30567 8045                      1107            .word	$1107
30568                                           ! 4372 0x760b,0x760c,0x760d,0x760e,
30569 8047                      760B            .word	$760B
30570 8049                      760C            .word	$760C
30571 804B                      760D            .word	$760D
30572 804D                      760E            .word	$760E
30573                                           ! 4373 0x0412,0x0013,0x2017,
30574 804F                      0412            .word	$412
30575 8051                      0013            .word	$13
30576 8053                      2017            .word	$2017
30577                                           ! 4374 0x341b,0x341c,0x341d,0x341e,
30578 8055                      341B            .word	$341B
30579 8057                      341C            .word	$341C
30580 8059                      341D            .word	$341D
30581 805B                      341E            .word	$341E
30582                                           ! 4375 0xffff
30583                                           ! 4376 };
30584 805D                      FFFF            .word	$FFFF
30585                                           !BCC_EOS
30586                                           ! 4377 unsigned short ccrtc_1600x1200x8[] = {
30587                                           export	_ccrtc_1600x1200x8
30588                       0000805F            _ccrtc_1600x1200x8:
30589                                           ! 4378 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30590 805F                      2911            .word	$2911
30591 8061                      C300            .word	$C300
30592 8063                      9F01            .word	$9F01
30593 8065                      9F02            .word	$9F02
30594 8067                      8603            .word	$8603
30595 8069                      8304            .word	$8304
30596 806B                      9405            .word	$9405
30597 806D                      2406            .word	$2406
30598 806F                      F707            .word	$F707
30599                                           ! 4379 0x6009,0x000c,0x000d,
30600 8071                      6009            .word	$6009
30601 8073                      000C            .word	$C
30602 8075                      000D            .word	$D
30603                                           ! 4380 0x0310,0xff12,0xa013,0x4014,0xff15,0x2416,0xc317,0xff18,
30604 8077                      0310            .word	$310
30605 8079                      FF12            .word	$FF12
30606 807B                      A013            .word	$A013
30607 807D                      4014            .word	$4014
30608 807F                      FF15            .word	$FF15
30609 8081                      2416            .word	$2416
30610 8083                      C317            .word	$C317
30611 8085                      FF18            .word	$FF18
30612                                           ! 4381 0x001a,0x221b,0x001d,
30613 8087                      001A            .word	$1A
30614 8089                      221B            .word	$221B
30615 808B                      001D            .word	$1D
30616                                           ! 4382 0xffff
30617                                           ! 4383 };
30618 808D                      FFFF            .word	$FFFF
30619                                           !BCC_EOS
30620                                           ! 4384 cirrus_mode_t cirrus_modes[] =
30621                                           ! 4385 {
30622                                           export	_cirrus_modes
30623                       0000808F            _cirrus_modes:
30624                                           ! 4386  {0x5f,640,480,8,0x00,
30625 808F                      005F            .word	$5F
30626 8091                      0280            .word	$280
30627 8093                      01E0            .word	$1E0
30628 8095                      0008            .word	8
30629 8097                      0000            .word	0
30630                                           ! 4387    cseq_640x480x8,cgraph_svgacolor,ccrtc_640x480x8,8,
30631 8099                      7C9F            .word	_cseq_640x480x8
30632 809B                      7C85            .word	_cgraph_svgacolor
30633 809D                      7CC3            .word	_ccrtc_640x480x8
30634 809F                        08            .byte	8
30635                                           ! 4388    4,0,0,0,0,0,0,0,0},
30636 80A0                        04            .byte	4
30637 80A1                        00            .byte	0
30638 80A2                        00            .byte	0
30639 80A3                        00            .byte	0
30640 80A4                        00            .byte	0
30641 80A5                        00            .byte	0
30642 80A6                        00            .byte	0
30643 80A7                        00            .byte	0
30644 80A8                        00            .byte	0
30645                                           ! 4389  {0x64,640,480,16,0xe1,
30646 80A9                      0064            .word	$64
30647 80AB                      0280            .word	$280
30648 80AD                      01E0            .word	$1E0
30649 80AF                      0010            .word	$10
30650 80B1                      00E1            .word	$E1
30651                                           ! 4390    cseq_640x480x16,cgraph_svgacolor,ccrtc_640x480x16,16,
30652 80B3                      7CF3            .word	_cseq_640x480x16
30653 80B5                      7C85            .word	_cgraph_svgacolor
30654 80B7                      7D17            .word	_ccrtc_640x480x16
30655 80B9                        10            .byte	$10
30656                                           ! 4391    6,5,11,6,5,5,0,0,0},
30657 80BA                        06            .byte	6
30658 80BB                        05            .byte	5
30659 80BC                        0B            .byte	$B
30660 80BD                        06            .byte	6
30661 80BE                        05            .byte	5
30662 80BF                        05            .byte	5
30663 80C0                        00            .byte	0
30664 80C1                        00            .byte	0
30665 80C2                        00            .byte	0
30666                                           ! 4392  {0x66,640,480,15,0xf0,
30667 80C3                      0066            .word	$66
30668 80C5                      0280            .word	$280
30669 80C7                      01E0            .word	$1E0
30670 80C9                      000F            .word	$F
30671 80CB                      00F0            .word	$F0
30672                                           ! 4393    cseq_640x480x16,cgraph_svgacolor,ccrtc_640x480x16,16,
30673 80CD                      7CF3            .word	_cseq_640x480x16
30674 80CF                      7C85            .word	_cgraph_svgacolor
30675 80D1                      7D17            .word	_ccrtc_640x480x16
30676 80D3                        10            .byte	$10
30677                                           ! 4394    6,5,10,5,5,5,0,1,15},
30678 80D4                        06            .byte	6
30679 80D5                        05            .byte	5
30680 80D6                        0A            .byte	$A
30681 80D7                        05            .byte	5
30682 80D8                        05            .byte	5
30683 80D9                        05            .byte	5
30684 80DA                        00            .byte	0
30685 80DB                        01            .byte	1
30686 80DC                        0F            .byte	$F
30687                                           ! 4395  {0x71,640,480,24,0xe5,
30688 80DD                      0071            .word	$71
30689 80DF                      0280            .word	$280
30690 80E1                      01E0            .word	$1E0
30691 80E3                      0018            .word	$18
30692 80E5                      00E5            .word	$E5
30693                                           ! 4396    cseq_640x480x24,cgraph_svgacolor,ccrtc_640x480x24,24,
30694 80E7                      7D47            .word	_cseq_640x480x24
30695 80E9                      7C85            .word	_cgraph_svgacolor
30696 80EB                      7D6B            .word	_ccrtc_640x480x24
30697 80ED                        18            .byte	$18
30698                                           ! 4397    6,8,16,8,8,8,0,0,0},
30699 80EE                        06            .byte	6
30700 80EF                        08            .byte	8
30701 80F0                        10            .byte	$10
30702 80F1                        08            .byte	8
30703 80F2                        08            .byte	8
30704 80F3                        08            .byte	8
30705 80F4                        00            .byte	0
30706 80F5                        00            .byte	0
30707 80F6                        00            .byte	0
30708                                           ! 4398  {0x5c,800,600,8,0x00,
30709 80F7                      005C            .word	$5C
30710 80F9                      0320            .word	$320
30711 80FB                      0258            .word	$258
30712 80FD                      0008            .word	8
30713 80FF                      0000            .word	0
30714                                           ! 4399    cseq_800x600x8,cgraph_svgacolor,ccrtc_800x600x8,8,
30715 8101                      7D9B            .word	_cseq_800x600x8
30716 8103                      7C85            .word	_cgraph_svgacolor
30717 8105                      7DBF            .word	_ccrtc_800x600x8
30718 8107                        08            .byte	8
30719                                           ! 4400    4,0,0,0,0,0,0,0,0},
30720 8108                        04            .byte	4
30721 8109                        00            .byte	0
30722 810A                        00            .byte	0
30723 810B                        00            .byte	0
30724 810C                        00            .byte	0
30725 810D                        00            .byte	0
30726 810E                        00            .byte	0
30727 810F                        00            .byte	0
30728 8110                        00            .byte	0
30729                                           ! 4401  {0x65,800,600,16,0xe1,
30730 8111                      0065            .word	$65
30731 8113                      0320            .word	$320
30732 8115                      0258            .word	$258
30733 8117                      0010            .word	$10
30734 8119                      00E1            .word	$E1
30735                                           ! 4402    cseq_800x600x16,cgraph_svgacolor,ccrtc_800x600x16,16,
30736 811B                      7DEF            .word	_cseq_800x600x16
30737 811D                      7C85            .word	_cgraph_svgacolor
30738 811F                      7E13            .word	_ccrtc_800x600x16
30739 8121                        10            .byte	$10
30740                                           ! 4403    6,5,11,6,5,5,0,0,0},
30741 8122                        06            .byte	6
30742 8123                        05            .byte	5
30743 8124                        0B            .byte	$B
30744 8125                        06            .byte	6
30745 8126                        05            .byte	5
30746 8127                        05            .byte	5
30747 8128                        00            .byte	0
30748 8129                        00            .byte	0
30749 812A                        00            .byte	0
30750                                           ! 4404  {0x67,800,600,15,0xf0,
30751 812B                      0067            .word	$67
30752 812D                      0320            .word	$320
30753 812F                      0258            .word	$258
30754 8131                      000F            .word	$F
30755 8133                      00F0            .word	$F0
30756                                           ! 4405    cseq_800x600x16,cgraph_svgacolor,ccrtc_800x600x16,16,
30757 8135                      7DEF            .word	_cseq_800x600x16
30758 8137                      7C85            .word	_cgraph_svgacolor
30759 8139                      7E13            .word	_ccrtc_800x600x16
30760 813B                        10            .byte	$10
30761                                           ! 4406    6,5,10,5,5,5,0,1,15},
30762 813C                        06            .byte	6
30763 813D                        05            .byte	5
30764 813E                        0A            .byte	$A
30765 813F                        05            .byte	5
30766 8140                        05            .byte	5
30767 8141                        05            .byte	5
30768 8142                        00            .byte	0
30769 8143                        01            .byte	1
30770 8144                        0F            .byte	$F
30771                                           ! 4407  {0x60,1024,768,8,0x00,
30772 8145                      0060            .word	$60
30773 8147                      0400            .word	$400
30774 8149                      0300            .word	$300
30775 814B                      0008            .word	8
30776 814D                      0000            .word	0
30777                                           ! 4408    cseq_1024x768x8,cgraph_svgacolor,ccrtc_1024x768x8,8,
30778 814F                      7E97            .word	_cseq_1024x768x8
30779 8151                      7C85            .word	_cgraph_svgacolor
30780 8153                      7EBB            .word	_ccrtc_1024x768x8
30781 8155                        08            .byte	8
30782                                           ! 4409    4,0,0,0,0,0,0,0,0},
30783 8156                        04            .byte	4
30784 8157                        00            .byte	0
30785 8158                        00            .byte	0
30786 8159                        00            .byte	0
30787 815A                        00            .byte	0
30788 815B                        00            .byte	0
30789 815C                        00            .byte	0
30790 815D                        00            .byte	0
30791 815E                        00            .byte	0
30792                                           ! 4410  {0x74,1024,768,16,0xe1,
30793 815F                      0074            .word	$74
30794 8161                      0400            .word	$400
30795 8163                      0300            .word	$300
30796 8165                      0010            .word	$10
30797 8167                      00E1            .word	$E1
30798                                           ! 4411    cseq_1024x768x16,cgraph_svgacolor,ccrtc_1024x768x16,16,
30799 8169                      7EEB            .word	_cseq_1024x768x16
30800 816B                      7C85            .word	_cgraph_svgacolor
30801 816D                      7F0F            .word	_ccrtc_1024x768x16
30802 816F                        10            .byte	$10
30803                                           ! 4412    6,5,11,6,5,5,0,0,0},
30804 8170                        06            .byte	6
30805 8171                        05            .byte	5
30806 8172                        0B            .byte	$B
30807 8173                        06            .byte	6
30808 8174                        05            .byte	5
30809 8175                        05            .byte	5
30810 8176                        00            .byte	0
30811 8177                        00            .byte	0
30812 8178                        00            .byte	0
30813                                           ! 4413  {0x68,1024,768,15,0xf0,
30814 8179                      0068            .word	$68
30815 817B                      0400            .word	$400
30816 817D                      0300            .word	$300
30817 817F                      000F            .word	$F
30818 8181                      00F0            .word	$F0
30819                                           ! 4414    cseq_1024x768x16,cgraph_svgacolor,ccrtc_1024x768x16,16,
30820 8183                      7EEB            .word	_cseq_1024x768x16
30821 8185                      7C85            .word	_cgraph_svgacolor
30822 8187                      7F0F            .word	_ccrtc_1024x768x16
30823 8189                        10            .byte	$10
30824                                           ! 4415    6,5,10,5,5,5,0,1,15},
30825 818A                        06            .byte	6
30826 818B                        05            .byte	5
30827 818C                        0A            .byte	$A
30828 818D                        05            .byte	5
30829 818E                        05            .byte	5
30830 818F                        05            .byte	5
30831 8190                        00            .byte	0
30832 8191                        01            .byte	1
30833 8192                        0F            .byte	$F
30834                                           ! 4416  {0x78,800,600,24,0xe5,
30835 8193                      0078            .word	$78
30836 8195                      0320            .word	$320
30837 8197                      0258            .word	$258
30838 8199                      0018            .word	$18
30839 819B                      00E5            .word	$E5
30840                                           ! 4417    cseq_800x600x24,cgraph_svgacolor,ccrtc_800x600x24,24,
30841 819D                      7E43            .word	_cseq_800x600x24
30842 819F                      7C85            .word	_cgraph_svgacolor
30843 81A1                      7E67            .word	_ccrtc_800x600x24
30844 81A3                        18            .byte	$18
30845                                           ! 4418    6,8,16,8,8,8,0,0,0},
30846 81A4                        06            .byte	6
30847 81A5                        08            .byte	8
30848 81A6                        10            .byte	$10
30849 81A7                        08            .byte	8
30850 81A8                        08            .byte	8
30851 81A9                        08            .byte	8
30852 81AA                        00            .byte	0
30853 81AB                        00            .byte	0
30854 81AC                        00            .byte	0
30855                                           ! 4419  {0x79,1024,768,24,0xe5,
30856 81AD                      0079            .word	$79
30857 81AF                      0400            .word	$400
30858 81B1                      0300            .word	$300
30859 81B3                      0018            .word	$18
30860 81B5                      00E5            .word	$E5
30861                                           ! 4420    cseq_1024x768x24,cgraph_svgacolor,ccrtc_1024x768x24,24,
30862 81B7                      7F3F            .word	_cseq_1024x768x24
30863 81B9                      7C85            .word	_cgraph_svgacolor
30864 81BB                      7F63            .word	_ccrtc_1024x768x24
30865 81BD                        18            .byte	$18
30866                                           ! 4421    6,8,16,8,8,8,0,0,0},
30867 81BE                        06            .byte	6
30868 81BF                        08            .byte	8
30869 81C0                        10            .byte	$10
30870 81C1                        08            .byte	8
30871 81C2                        08            .byte	8
30872 81C3                        08            .byte	8
30873 81C4                        00            .byte	0
30874 81C5                        00            .byte	0
30875 81C6                        00            .byte	0
30876                                           ! 4422  {0x6d,1280,1024,8,0x00,
30877 81C7                      006D            .word	$6D
30878 81C9                      0500            .word	$500
30879 81CB                      0400            .word	$400
30880 81CD                      0008            .word	8
30881 81CF                      0000            .word	0
30882                                           ! 4423    cseq_1280x1024x8,cgraph_svgacolor,ccrtc_1280x1024x8,8,
30883 81D1                      7F93            .word	_cseq_1280x1024x8
30884 81D3                      7C85            .word	_cgraph_svgacolor
30885 81D5                      7FB7            .word	_ccrtc_1280x1024x8
30886 81D7                        08            .byte	8
30887                                           ! 4424    4,0,0,0,0,0,0,0,0},
30888 81D8                        04            .byte	4
30889 81D9                        00            .byte	0
30890 81DA                        00            .byte	0
30891 81DB                        00            .byte	0
30892 81DC                        00            .byte	0
30893 81DD                        00            .byte	0
30894 81DE                        00            .byte	0
30895 81DF                        00            .byte	0
30896 81E0                        00            .byte	0
30897                                           ! 4425  {0x69,1280,1024,15,0xf0,
30898 81E1                      0069            .word	$69
30899 81E3                      0500            .word	$500
30900 81E5                      0400            .word	$400
30901 81E7                      000F            .word	$F
30902 81E9                      00F0            .word	$F0
30903                                           ! 4426    cseq_1280x1024x16,cgraph_
30904 81EB                      7FE7            .word	_cseq_1280x1024x16
30905                                           ! 4426 svgacolor,ccrtc_1280x1024x16,16,
30906 81ED                      7C85            .word	_cgraph_svgacolor
30907 81EF                      800B            .word	_ccrtc_1280x1024x16
30908 81F1                        10            .byte	$10
30909                                           ! 4427    6,5,10,5,5,5,0,1,15},
30910 81F2                        06            .byte	6
30911 81F3                        05            .byte	5
30912 81F4                        0A            .byte	$A
30913 81F5                        05            .byte	5
30914 81F6                        05            .byte	5
30915 81F7                        05            .byte	5
30916 81F8                        00            .byte	0
30917 81F9                        01            .byte	1
30918 81FA                        0F            .byte	$F
30919                                           ! 4428  {0x75,1280,1024,16,0xe1,
30920 81FB                      0075            .word	$75
30921 81FD                      0500            .word	$500
30922 81FF                      0400            .word	$400
30923 8201                      0010            .word	$10
30924 8203                      00E1            .word	$E1
30925                                           ! 4429    cseq_1280x1024x16,cgraph_svgacolor,ccrtc_1280x1024x16,16,
30926 8205                      7FE7            .word	_cseq_1280x1024x16
30927 8207                      7C85            .word	_cgraph_svgacolor
30928 8209                      800B            .word	_ccrtc_1280x1024x16
30929 820B                        10            .byte	$10
30930                                           ! 4430    6,5,11,6,5,5,0,0,0},
30931 820C                        06            .byte	6
30932 820D                        05            .byte	5
30933 820E                        0B            .byte	$B
30934 820F                        06            .byte	6
30935 8210                        05            .byte	5
30936 8211                        05            .byte	5
30937 8212                        00            .byte	0
30938 8213                        00            .byte	0
30939 8214                        00            .byte	0
30940                                           ! 4431  {0x7b,1600,1200,8,0x00,
30941 8215                      007B            .word	$7B
30942 8217                      0640            .word	$640
30943 8219                      04B0            .word	$4B0
30944 821B                      0008            .word	8
30945 821D                      0000            .word	0
30946                                           ! 4432    cseq_1600x1200x8,cgraph_svgacolor,ccrtc_1600x1200x8,8,
30947 821F                      803B            .word	_cseq_1600x1200x8
30948 8221                      7C85            .word	_cgraph_svgacolor
30949 8223                      805F            .word	_ccrtc_1600x1200x8
30950 8225                        08            .byte	8
30951                                           ! 4433    4,0,0,0,0,0,0,0,0},
30952 8226                        04            .byte	4
30953 8227                        00            .byte	0
30954 8228                        00            .byte	0
30955 8229                        00            .byte	0
30956 822A                        00            .byte	0
30957 822B                        00            .byte	0
30958 822C                        00            .byte	0
30959 822D                        00            .byte	0
30960 822E                        00            .byte	0
30961                                           ! 4434  {0xfe,0,0,0,0,cseq_vga,cgraph_vga,ccrtc_vga,0,
30962 822F                      00FE            .word	$FE
30963 8231                      0000            .word	0
30964 8233                      0000            .word	0
30965 8235                      0000            .word	0
30966 8237                      0000            .word	0
30967 8239                      7C71            .word	_cseq_vga
30968 823B                      7C75            .word	_cgraph_vga
30969 823D                      7C7D            .word	_ccrtc_vga
30970 823F                        00            .byte	0
30971                                           ! 4435    0xff,0,0,0,0,0,0,0,0},
30972 8240                        FF            .byte	$FF
30973 8241                        00            .byte	0
30974 8242                        00            .byte	0
30975 8243                        00            .byte	0
30976 8244                        00            .byte	0
30977 8245                        00            .byte	0
30978 8246                        00            .byte	0
30979 8247                        00            .byte	0
30980 8248                        00            .byte	0
30981                                           ! 4436  {0xff,0,0,0,0,0,0,0,0,
30982 8249                      00FF            .word	$FF
30983 824B                      0000            .word	0
30984 824D                      0000            .word	0
30985 824F                      0000            .word	0
30986 8251                      0000            .word	0
30987 8253                      0000            .word	0
30988 8255                      0000            .word	0
30989 8257                      0000            .word	0
30990 8259                        00            .byte	0
30991                                           ! 4437    0xff,0,0,0,0,0,0,0,0},
30992 825A                        FF            .byte	$FF
30993 825B                        00            .byte	0
30994 825C                        00            .byte	0
30995 825D                        00            .byte	0
30996 825E                        00            .byte	0
30997 825F                        00            .byte	0
30998 8260                        00            .byte	0
30999 8261                        00            .byte	0
31000 8262                        00            .byte	0
31001                                           ! 4438 };
31002                                           !BCC_EOS
31003                                           ! 4439 unsigned char cirrus_id_table[] = {
31004                                           export	_cirrus_id_table
31005                       00008263            _cirrus_id_table:
31006                                           ! 4440   0xA0, 0x32,
31007 8263                        A0            .byte	$A0
31008 8264                        32            .byte	$32
31009                                           ! 4441   0xB8, 0x39,
31010 8265                        B8            .byte	$B8
31011 8266                        39            .byte	$39
31012                                           ! 4442   0xff, 0xff
31013 8267                        FF            .byte	$FF
31014                                           ! 4443 };
31015 8268                        FF            .byte	$FF
31016                                           !BCC_EOS
31017                                           ! 4444 unsigned short cirrus_vesa_modelist[] = {
31018                                           export	_cirrus_vesa_modelist
31019                       00008269            _cirrus_vesa_modelist:
31020                                           ! 4445   0x101, 0x5f,
31021 8269                      0101            .word	$101
31022 826B                      005F            .word	$5F
31023                                           ! 4446   0x110, 0x66,
31024 826D                      0110            .word	$110
31025 826F                      0066            .word	$66
31026                                           ! 4447   0x111, 0x64,
31027 8271                      0111            .word	$111
31028 8273                      0064            .word	$64
31029                                           ! 4448   0x112, 0x71,
31030 8275                      0112            .word	$112
31031 8277                      0071            .word	$71
31032                                           ! 4449   0x103, 0x5c,
31033 8279                      0103            .word	$103
31034 827B                      005C            .word	$5C
31035                                           ! 4450   0x113, 0x67,
31036 827D                      0113            .word	$113
31037 827F                      0067            .word	$67
31038                                           ! 4451   0x114, 0x65,
31039 8281                      0114            .word	$114
31040 8283                      0065            .word	$65
31041                                           ! 4452   0x115, 0x78,
31042 8285                      0115            .word	$115
31043 8287                      0078            .word	$78
31044                                           ! 4453   0x105, 0x60,
31045 8289                      0105            .word	$105
31046 828B                      0060            .word	$60
31047                                           ! 4454   0x116, 0x68,
31048 828D                      0116            .word	$116
31049 828F                      0068            .word	$68
31050                                           ! 4455   0x117, 0x74,
31051 8291                      0117            .word	$117
31052 8293                      0074            .word	$74
31053                                           ! 4456   0x118, 0x79,
31054 8295                      0118            .word	$118
31055 8297                      0079            .word	$79
31056                                           ! 4457   0x107, 0x6d,
31057 8299                      0107            .word	$107
31058 829B                      006D            .word	$6D
31059                                           ! 4458   0x119, 0x69,
31060 829D                      0119            .word	$119
31061 829F                      0069            .word	$69
31062                                           ! 4459   0x11a, 0x75,
31063 82A1                      011A            .word	$11A
31064 82A3                      0075            .word	$75
31065                                           ! 4460   0xffff,0xffff
31066 82A5                      FFFF            .word	$FFFF
31067                                           ! 4461 };
31068 82A7                      FFFF            .word	$FFFF
31069                                           !BCC_EOS
31070                                           ! 4462 #asm
31071                                           !BCC_ASM
31072                       000082A9            cirrus_installed:
31073 82A9                        63            .ascii "cirrus-compatible VGA is detected"
31074 82CA                        0D            .byte 0x0d,0x0a
31075 82CC                        0D            .byte 0x0d,0x0a,0x00
31076                       000082CF            cirrus_not_installed:
31077 82CF                        63            .ascii "cirrus-compatible VGA is not detected"
31078 82F4                        0D            .byte 0x0d,0x0a
31079 82F6                        0D            .byte 0x0d,0x0a,0x00
31080                       000082F9            cirrus_vesa_vendorname:
31081                       000082F9            cirrus_vesa_productname:
31082                       000082F9            cirrus_vesa_oemname:
31083 82F9                        56            .ascii "VGABIOS Cirrus extension"
31084 8311                        00            .byte 0
31085                       00008312            cirrus_vesa_productrevision:
31086 8312                        31            .ascii "1.0"
31087 8315                        00            .byte 0
31088                       00008316            cirrus_init:
31089 8316           E8         0049              call cirrus_check
31090 8319           75           31              jnz no_cirrus
31091                                             SET_INT_VECTOR(0x10, #0xC000, #cirrus_int10_handler)
 +a   831B           1E                           push ds
 +a   831C           31C0                         xor ax, ax
 +a   831E           8ED8                         mov ds, ax
 +a   8320           B8                   8372    mov ax,  #cirrus_int10_handler
 +a   8323           A3         0040              mov 0x10*4, ax
 +a   8326           B8                   C000    mov ax,  #0xC000
 +a   8329           A3         0042              mov 0x10*4+2, ax
 +a   832C           1F                           pop ds
31092 832D           B0                     0F    mov al, #0x0f ; memory setup
31093 832F           BA                   03C4    mov dx, #0x3C4
31094 8332           EE                           out dx, al
31095 8333           42                           inc dx
31096 8334           EC                           in al, dx
31097 8335           24                     18    and al, #0x18
31098 8337           88C4                         mov ah, al
31099 8339           B0                     0A    mov al, #0x0a
31100 833B           4A                           dec dx
31101 833C           EF                           out dx, ax
31102 833D           B8                   0007    mov ax, #0x0007 ; set vga mode
31103 8340           EF                           out dx, ax
31104 8341           B8                   0431    mov ax, #0x0431 ; reset bitblt
31105 8344           BA                   03CE    mov dx, #0x3CE
31106 8347           EF                           out dx, ax
31107 8348           B8                   0031    mov ax, #0x0031
31108 834B           EF                           out dx, ax
31109                       0000834C            no_cirrus:
31110 834C           C3                           ret
31111                       0000834D            cirrus_display_info:
31112 834D           1E                           push ds
31113 834E           56                           push si
31114 834F           0E                           push cs
31115 8350           1F                           pop ds
31116 8351           E8         000E              call cirrus_check
31117 8354           BE                   82CF    mov si, #cirrus_not_installed
31118 8357           75           03              jnz cirrus_msgnotinstalled
31119 8359           BE                   82A9    mov si, #cirrus_installed
31120                       0000835C            cirrus_msgnotinstalled:
31121 835C           E8         B2B5              call _display_string
31122 835F           5E                           pop si
31123 8360           1F                           pop ds
31124 8361           C3                           ret
31125                       00008362            cirrus_check:
31126 8362           50                           push ax
31127 8363           52                           push dx
31128 8364           B8                   9206    mov ax, #0x9206
31129 8367           BA                   03C4    mov dx, #0x3C4
31130 836A           EF                           out dx, ax
31131 836B           42                           inc dx
31132 836C           EC                           in al, dx
31133 836D           3C                     12    cmp al, #0x12
31134 836F           5A                           pop dx
31135 8370           58                           pop ax
31136 8371           C3                           ret
31137                       00008372            cirrus_int10_handler:
31138 8372           9C                           pushf
31139 8373           55                           push bp
31140 8374           80FC                   00    cmp ah, #0x00 ;; set video mode
31141 8377           74           12              jz cirrus_set_video_mode
31142 8379           80FC                   12    cmp ah, #0x12 ;; cirrus extension
31143 837C           74           2E              jz cirrus_extbios
31144 837E           80FC                   4F    cmp ah, #0x4F ;; VESA extension
31145 8381           74           44              jz cirrus_vesa
31146                       00008383            cirrus_unhandled:
31147 8383           5D                           pop bp
31148 8384           9D                           popf
31149 8385           E9         7DCB              jmp vgabios_int10_handler
31150                       00008388            cirrus_return:
31151 8388           5D                           pop bp
31152 8389           9D                           popf
31153 838A           CF                           iret
31154                       0000838B            cirrus_set_video_mode:
31155 838B           56                           push si
31156 838C           50                           push ax
31157 838D           53                           push bx
31158 838E           1E                           push ds
31159 838F           31F6                         xor si, si
31160 8391           8EDE                         mov ds, si
31161 8393           31DB                         xor bx, bx
31162 8395           891E       04BA              mov [0x4BA], bx
31163 8399           1F                           pop ds
31164 839A           5B                           pop bx
31165 839B           E8         0498              call cirrus_get_modeentry
31166 839E           73           42              jnc cirrus_set_video_mode_extended
31167 83A0           B0                     FE    mov al, #0xfe
31168 83A2           E8         0493              call cirrus_get_modeentry_nomask
31169 83A5           E8         007E              call cirrus_switch_mode
31170 83A8           58                           pop ax
31171 83A9           5E                           pop si
31172 83AA           EB           D7              jmp cirrus_unhandled
31173                       000083AC            cirrus_extbios:
31174 83AC           80FB                   80    cmp bl, #0x80
31175 83AF           72           D2              jb cirrus_unhandled
31176 83B1           80FB                   AF    cmp bl, #0xAF
31177 83B4           77           CD              ja cirrus_unhandled
31178 83B6           53                           push bx
31179 83B7           83E3                   7F    and bx, #0x7F
31180 83BA           D1E3                         shl bx, 1
31181 83BC                        2E             db 0x2e ;; cs:
31182 83BD           8BAF       89DA              mov bp, cirrus_extbios_handlers[bx]
31183 83C1           5B                           pop bx
31184 83C2           68                   8388    push #cirrus_return
31185 83C5           55                           push bp
31186 83C6           C3                           ret
31187                       000083C7            cirrus_vesa:
31188 83C7           3C                     10    cmp al, #0x10
31189 83C9           77           12              ja cirrus_vesa_not_handled
31190 83CB           53                           push bx
31191 83CC           31DB                         xor bx, bx
31192 83CE           88C3                         mov bl, al
31193 83D0           D1E3                         shl bx, 1
31194 83D2                        2E             db 0x2e ;; cs:
31195 83D3           8BAF       8A3A              mov bp, cirrus_vesa_handlers[bx]
31196 83D7           5B                           pop bx
31197 83D8           68                   8388    push #cirrus_return
31198 83DB           55                           push bp
31199 83DC           C3                           ret
31200                       000083DD            cirrus_vesa_not_handled:
31201 83DD           B8                   014F    mov ax, #0x014F ;; not implemented
31202 83E0           EB           A6              jmp cirrus_return
31203                       000083E2            cirrus_set_video_mode_extended:
31204 83E2           E8         0041              call cirrus_switch_mode
31205 83E5           58                           pop ax ;; mode
31206 83E6           A8                     80    test al, #0x80
31207 83E8           75           08              jnz cirrus_set_video_mode_extended_1
31208 83EA           50                           push ax
31209 83EB           B8                   FFFF    mov ax, #0xffff ; set to 0xff to keep win 2K happy
31210 83EE           E8         05B4              call cirrus_clear_vram
31211 83F1           58                           pop ax
31212                       000083F2            cirrus_set_video_mode_extended_1:
31213 83F2           24                     7F    and al, #0x7f
31214 83F4           1E                           push ds
31215 83F5           31F6                         xor si, si
31216 83F7           8EDE                         mov ds, si
31217 83F9           A2         0449              mov [0x449], al
31218 83FC           1F                           pop ds
31219 83FD           B0                     20    mov al, #0x20
31220 83FF           5E                           pop si
31221 8400           EB           86              jmp cirrus_return
31222                       00008402            cirrus_vesa_pmbios_init:
31223 8402           CB                           retf
31224                       00008403            cirrus_vesa_pmbios_entry:
31225 8403           9C                           pushf
31226 8404           55                           push bp
31227 8405           80FC                   4F    cmp ah, #0x4F
31228 8408           75           16              jnz cirrus_vesa_pmbios_unimplemented
31229 840A           3C                     0F    cmp al, #0x0F
31230 840C           77           12              ja cirrus_vesa_pmbios_unimplemented
31231 840E           53                           push bx
31232 840F           31DB                         xor bx, bx
31233 8411           88C3                         mov bl, al
31234 8413           D1E3                         shl bx, 1
31235 8415                        2E             db 0x2e ;; cs:
31236 8416           8BAF       8A3A              mov bp, cirrus_vesa_handlers[bx]
31237 841A           5B                           pop bx
31238 841B           68                   8423    push #cirrus_vesa_pmbios_return
31239 841E           55                           push bp
31240 841F           C3                           ret
31241                       00008420            cirrus_vesa_pmbios_unimplemented:
31242 8420           B8                   014F    mov ax, #0x014F
31243                       00008423            cirrus_vesa_pmbios_return:
31244 8423           5D                           pop bp
31245 8424           9D                           popf
31246 8425           CB                           retf
31247                                           ; in si:mode table
31248                       00008426            cirrus_switch_mode:
31249 8426           1E                           push ds
31250 8427           53                           push bx
31251 8428           52                           push dx
31252 8429           0E                           push cs
31253 842A           1F                           pop ds
31254 842B           8B5C         0A              mov bx, [si+10] ;; seq
31255 842E           BA                   03C4    mov dx, #0x3c4
31256 8431           B8                   1206    mov ax, #0x1206
31257 8434           EF                           out dx, ax ;; Unlock cirrus special
31258 8435           E8         0056              call cirrus_switch_mode_setregs
31259 8438           8B5C         0C              mov bx, [si+12] ;; graph
31260 843B           BA                   03CE    mov dx, #0x3ce
31261 843E           E8         004D              call cirrus_switch_mode_setregs
31262 8441           8B5C         0E              mov bx, [si+14] ;; crtc
31263 8444           E8         03DC              call cirrus_get_crtc
31264 8447           E8         0044              call cirrus_switch_mode_setregs
31265 844A           BA                   03C6    mov dx, #0x3c6
31266 844D           B0                     00    mov al, #0x00
31267 844F           EE                           out dx, al
31268 8450           EC                           in al, dx
31269 8451           EC                           in al, dx
31270 8452           EC                           in al, dx
31271 8453           EC                           in al, dx
31272 8454           8A44         08              mov al, [si+8] ;; hidden dac
31273 8457           EE                           out dx, al
31274 8458           B0                     FF    mov al, #0xff
31275 845A           EE                           out dx, al
31276 845B           B0                     00    mov al, #0x00
31277 845D           8A5C         11              mov bl, [si+17] ;; memory model
31278 8460           08DB                         or bl, bl
31279 8462           74           09              jz is_text_mode
31280 8464           B0                     01    mov al, #0x01
31281 8466           80FB                   03    cmp bl, #0x03
31282 8469           75           02              jnz is_text_mode
31283 846B           0C                     40    or al, #0x40
31284                       0000846D            is_text_mode:
31285 846D           B3                     10    mov bl, #0x10
31286 846F           E8         DD9E              call biosfn_get_single_palette_reg
31287 8472           80E7                   FE    and bh, #0xfe
31288 8475           08C7                         or bh, al
31289 8477           E8         DD21              call biosfn_set_single_palette_reg
31290 847A           5A                           pop dx
31291 847B           5B                           pop bx
31292 847C           1F                           pop ds
31293 847D           C3                           ret
31294                       0000847E            cirrus_enable_16k_granularity:
31295 847E           50                           push ax
31296 847F           52                           push dx
31297 8480           BA                   03CE    mov dx, #0x3ce
31298 8483           B0                     0B    mov al, #0x0b
31299 8485           EE                           out dx, al
31300 8486           42                           inc dx
31301 8487           EC                           in al, dx
31302 8488           0C                     20    or al, #0x20 ;; enable 16k
31303 848A           EE                           out dx, al
31304 848B           5A                           pop dx
31305 848C           58                           pop ax
31306 848D           C3                           ret
31307                       0000848E            cirrus_switch_mode_setregs:
31308                       0000848E            csms_1:
31309 848E           8B07                         mov ax, [bx]
31310 8490           3D                   FFFF    cmp ax, #0xffff
31311 8493           74           06              jz csms_2
31312 8495           EF                           out dx, ax
31313 8496           83C3                   02    add bx, #0x2
31314 8499           EB           F3              jmp csms_1
31315                       0000849B            csms_2:
31316 849B           C3                           ret
31317                       0000849C            cirrus_extbios_80h:
31318 849C           52                           push dx
31319 849D           E8         0383              call cirrus_get_crtc
31320 84A0           B0                     27    mov al, #0x27
31321 84A2           EE                           out dx, al
31322 84A3           42                           inc dx
31323 84A4           EC                           in al, dx
31324 84A5           BB                   8263    mov bx, #_cirrus_id_table
31325                       000084A8            c80h_1:
31326 84A8                        2E             db 0x2e ;; cs:
31327 84A9           8A27                         mov ah, [bx]
31328 84AB           38C4                         cmp ah, al
31329 84AD           74           09              jz c80h_2
31330 84AF           80FC                   FF    cmp ah, #0xff
31331 84B2           74           04              jz c80h_2
31332 84B4           43                           inc bx
31333 84B5           43                           inc bx
31334 84B6           EB           F0              jmp c80h_1
31335                       000084B8            c80h_2:
31336 84B8                        2E             db 0x2e ;; cs:
31337 84B9           8A47         01              mov al, 0x1[bx]
31338 84BC           5A                           pop dx
31339 84BD           B4                     00    mov ah, #0x00
31340 84BF           31DB                         xor bx, bx
31341 84C1           C3                           ret
31342                       000084C2            cirrus_extbios_81h:
31343 84C2           B8                   0103    mov ax, #0x103 ;; XXX
31344 84C5           C3                           ret
31345                       000084C6            cirrus_extbios_82h:
31346 84C6           52                           push dx
31347 84C7           E8         0359              call cirrus_get_crtc
31348 84CA           31C0                         xor ax, ax
31349 84CC           B0                     27    mov al, #0x27
31350 84CE           EE                           out dx, al
31351 84CF           42                           inc dx
31352 84D0           EC                           in al, dx
31353 84D1           24                     03    and al, #0x03
31354 84D3           B4                     AF    mov ah, #0xAF
31355 84D5           5A                           pop dx
31356 84D6           C3                           ret
31357                       000084D7            cirrus_extbios_85h:
31358 84D7           51                           push cx
31359 84D8           52                           push dx
31360 84D9           BA                   03C4    mov dx, #0x3C4
31361 84DC           B0                     0F    mov al, #0x0f ;; get DRAM band width
31362 84DE           EE                           out dx, al
31363 84DF           42                           inc dx
31364 84E0           EC                           in al, dx
31365                                             ;; al = 4 << bandwidth
31366 84E1           88C1                         mov cl, al
31367 84E3           C0E9                   03    shr cl, #0x03
31368 84E6           80E1                   03    and cl, #0x03
31369 84E9           80F9                   03    cmp cl, #0x03
31370 84EC           74           06              je c85h2
31371 84EE           B0                     04    mov al, #0x04
31372 84F0           D2E0                         shl al, cl
31373 84F2           EB           08              jmp c85h3
31374                       000084F4            c85h2:
31375                                           ;; 4MB or 2MB
31376 84F4           24                     80    and al, #0x80
31377 84F6           B0                     20    mov al, #0x20 ;; 2 MB
31378 84F8           74           02              je c85h3
31379 84FA           B0                     40    mov al, #0x40 ;; 4 MB
31380                       000084FC            c85h3:
31381 84FC           5A                           pop dx
31382 84FD           59                           pop cx
31383 84FE           C3                           ret
31384                       000084FF            cirrus_extbios_9Ah:
31385 84FF           B8                   4060    mov ax, #0x4060
31386 8502           B9                   1132    mov cx, #0x1132
31387 8505           C3                           ret
31388                       00008506            cirrus_extbios_A0h:
31389 8506           E8         032D              call cirrus_get_modeentry
31390 8509           B4                     01    mov ah, #0x01
31391 850B           80DC                   00    sbb ah, #0x00
31392 850E           8B1E       851C              mov bx, cirrus_extbios_A0h_callback
31393 8512           BE                   FFFF    mov si, #0xffff
31394 8515           89DF                         mov di, bx
31395 8517           8EDB                         mov ds, bx
31396 8519           8EC3                         mov es, bx
31397 851B           C3                           ret
31398                       0000851C            cirrus_extbios_A0h_callback:
31399                                             ;; fatal: not implemented yet
31400 851C           FA                           cli
31401 851D           F4                           hlt
31402 851E           CB                           retf
31403                       0000851F            cirrus_extbios_A1h:
31404 851F           BB                   0E00    mov bx, #0x0E00 ;; IBM 8512/8513, color
31405 8522           C3                           ret
31406                       00008523            cirrus_extbios_A2h:
31407 8523           B0                     07    mov al, #0x07 ;; HSync 31.5 - 64.0 kHz
31408 8525           C3                           ret
31409                       00008526            cirrus_extbios_AEh:
31410 8526           B0                     01    mov al, #0x01 ;; High Refresh 75Hz
31411 8528           C3                           ret
31412                       00008529            cirrus_extbios_unimplemented:
31413 8529           C3                           ret
31414                       0000852A            cirrus_vesa_00h:
31415 852A           1E                           push ds
31416 852B           56                           push si
31417 852C           89FD                         mov bp, di
31418 852E           06                           push es
31419 852F           1F                           pop ds
31420 8530           FC                           cld
31421 8531           8B05                         mov ax, [di]
31422 8533           3D                   4256    cmp ax, #0x4256 ;; VB
31423 8536           75           24              jnz cv00_1
31424 8538           8B45         02              mov ax, [di+2]
31425 853B           3D                   3245    cmp ax, #0x3245 ;; E2
31426 853E           75           1C              jnz cv00_1
31427                                             ;; VBE2
31428 8540           8D7E         14              lea di, 0x14[bp]
31429 8543           B8                   0100    mov ax, #0x0100 ;; soft ver.
31430 8546           AB                           stosw
31431 8547           B8                   82F9    mov ax, # cirrus_vesa_vendorname
31432 854A           AB                           stosw
31433 854B           8CC8                         mov ax, cs
31434 854D           AB                           stosw
31435 854E           B8                   82F9    mov ax, # cirrus_vesa_productname
31436 8551           AB                           stosw
31437 8552           8CC8                         mov ax, cs
31438 8554           AB                           stosw
31439 8555           B8                   8312    mov ax, # cirrus_vesa_productrevision
31440 8558           AB                           stosw
31441 8559           8CC8                         mov ax, cs
31442 855B           AB                           stosw
31443                       0000855C            cv00_1:
31444 855C           89EF                         mov di, bp
31445 855E           B8                   4556    mov ax, #0x4556 ;; VE
31446 8561           AB                           stosw
31447 8562           B8                   4153    mov ax, #0x4153 ;; SA
31448 8565           AB                           stosw
31449 8566           B8                   0200    mov ax, #0x0200 ;; v2.00
31450 8569           AB                           stosw
31451 856A           B8                   82F9    mov ax, # cirrus_vesa_oemname
31452 856D           AB                           stosw
31453 856E           8CC8                         mov ax, cs
31454 8570           AB                           stosw
31455 8571           31C0                         xor ax, ax ;; caps
31456 8573           AB                           stosw
31457 8574           AB                           stosw
31458 8575           8D46         40              lea ax, 0x40[bp]
31459 8578           AB                           stosw
31460 8579           8CC0                         mov ax, es
31461 857B           AB                           stosw
31462 857C           E8         FF58              call cirrus_extbios_85h ;; vram in 64k
31463 857F           B4                     00    mov ah, #0x00
31464 8581           AB                           stosw
31465 8582           0E                           push cs
31466 8583           1F                           pop ds
31467 8584           8D7E         40              lea di, 0x40[bp]
31468 8587           BE                   8269    mov si, #_cirrus_vesa_modelist
31469                       0000858A            cv00_2:
31470 858A           AD                           lodsw
31471 858B           AB                           stosw
31472 858C           83C6                   02    add si, #2
31473 858F           3D                   FFFF    cmp ax, #0xffff
31474 8592           75           F6              jnz cv00_2
31475 8594           B8                   004F    mov ax, #0x004F
31476 8597           89EF                         mov di, bp
31477 8599           5E                           pop si
31478 859A           1F                           pop ds
31479 859B           C3                           ret
31480                       0000859C            cirrus_vesa_01h:
31481 859C           89C8                         mov ax, cx
31482 859E           25                   3FFF    and ax, #0x3fff
31483 85A1           E8         0260              call cirrus_vesamode_to_mode
31484 85A4           3D                   FFFF    cmp ax, #0xffff
31485 85A7           75           03              jnz cirrus_vesa_01h_1
31486 85A9           E9         0254              jmp cirrus_vesa_unimplemented
31487                       000085AC            cirrus_vesa_01h_1:
31488 85AC           1E                           push ds
31489 85AD           56                           push si
31490 85AE           51                           push cx
31491 85AF           52                           push dx
31492 85B0           53                           push bx
31493 85B1           89FD                         mov bp, di
31494 85B3           FC                           cld
31495 85B4           0E                           push cs
31496 85B5           1F                           pop ds
31497 85B6           E8         027F              call cirrus_get_modeentry_nomask
31498 85B9           57                           push di
31499 85BA           31C0                         xor ax, ax
31500 85BC           B9                   0080    mov cx, #0x80
31501 85BF           F3                           rep
31502 85C0           AB                             stosw ;; clear buffer
31503 85C1           5F                           pop di
31504 85C2           B8                   003B    mov ax, #0x003b ;; mode
31505 85C5           AB                           stosw
31506 85C6           B8                   0007    mov ax, #0x0007 ;; attr
31507 85C9           AB                           stosw
31508 85CA           B8                   0010    mov ax, #0x0010 ;; granularity =16K
31509 85CD           AB                           stosw
31510 85CE           B8                   0040    mov ax, #0x0040 ;; size =64K
31511 85D1           AB                           stosw
31512 85D2           B8                   A000    mov ax, #0xA000 ;; segment A
31513 85D5           AB                           stosw
31514 85D6           31C0                         xor ax, ax ;; no segment B
31515 85D8           AB                           stosw
31516 85D9           B8                   86E0    mov ax, #cirrus_vesa_05h_farentry
31517 85DC           AB                           stosw
31518 85DD           8CC8                         mov ax, cs
31519 85DF           AB                           stosw
31520 85E0           E8         0320              call cirrus_get_line_offset_entry
31521 85E3           AB                           stosw ;; bytes per scan line
31522 85E4           8B44         02              mov ax, [si+2] ;; width
31523 85E7           AB                           stosw
31524 85E8           8B44         04              mov ax, [si+4] ;; height
31525 85EB           AB                           stosw
31526 85EC           B8                   0008    mov ax, #0x08
31527 85EF           AA                           stosb
31528 85F0           B8                   0010    mov ax, #0x10
31529 85F3           AA                           stosb
31530 85F4           B0                     01    mov al, #1 ;; count of planes
31531 85F6           AA                           stosb
31532 85F7           8A44         06              mov al, [si+6] ;; bpp
31533 85FA           AA                           stosb
31534 85FB           B0                     01    mov al, #0x1 ;; XXX number of banks
31535 85FD           AA                           stosb
31536 85FE           8A44         11              mov al, [si+17]
31537 8601           AA                           stosb ;; memory model
31538 8602           B0                     00    mov al, #0x0 ;; XXX size of bank in K
31539 8604           AA                           stosb
31540 8605           E8         02FB              call cirrus_get_line_offset_entry
31541 8608           8B5C         04              mov bx, [si+4]
31542 860B           F7E3                         mul bx ;; dx:ax=vramdisp
31543 860D           09C0                         or ax, ax
31544 860F           74           01              jz cirrus_vesa_01h_3
31545 8611           42                           inc dx
31546                       00008612            cirrus_vesa_01h_3:
31547 8612           E8         FEC2              call cirrus_extbios_85h ;; al=vram in 64k
31548 8615           B4                     00    mov ah, #0x00
31549 8617           89D1                         mov cx, dx
31550 8619           31D2                         xor dx, dx
31551 861B           F7F1                         div cx
31552 861D           48                           dec ax
31553 861E           AA                           stosb ;; number of image pages = vramtotal/vramdisp-1
31554 861F           B0                     00    mov al, #0x00
31555 8621           AA                           stosb
31556                                             ;; v1.2+ stuffs
31557 8622           56                           push si
31558 8623           83C6                   12    add si, #18
31559 8626           A5                           movsw
31560 8627           A5                           movsw
31561 8628           A5                           movsw
31562 8629           A5                           movsw
31563 862A           5E                           pop si
31564 862B           8A64         10              mov ah, [si+16]
31565 862E           B0                     00    mov al, #0x0
31566 8630           80EC                   09    sub ah, #9
31567 8633           D0D0                         rcl al, #1 ; bit 0=palette flag
31568 8635           AA                           stosb ;; direct screen mode info
31569                                             ;; v2.0+ stuffs
31570                                             ;; 32-bit LFB address
31571 8636           31C0                         xor ax, ax
31572 8638           AB                           stosw
31573 8639           E8         0217              call cirrus_get_lfb_addr
31574 863C           AB                           stosw
31575 863D           09C0                         or ax, ax
31576 863F           74           0B              jz cirrus_vesa_01h_4
31577 8641           57                           push di
31578 8642           89EF                         mov di, bp
31579 8644                        26             db 0x26 ;; es:
31580 8645           8B05                         mov ax, [di]
31581 8647           0D                   0080    or ax, #0x0080 ;; mode bit 7:LFB
31582 864A           AB                           stosw
31583 864B           5F                           pop di
31584                       0000864C            cirrus_vesa_01h_4:
31585 864C           31C0                         xor ax, ax
31586 864E           AB                           stosw ; reserved
31587 864F           AB                           stosw ; reserved
31588 8650           AB                           stosw ; reserved
31589 8651           B8                   004F    mov ax, #0x004F
31590 8654           89EF                         mov di, bp
31591 8656           5B                           pop bx
31592 8657           5A                           pop dx
31593 8658           59                           pop cx
31594 8659           5E                           pop si
31595 865A           1F                           pop ds
31596 865B           F7C1                 4000    test cx, #0x4000 ;; LFB flag
31597 865F           74           0E              jz cirrus_vesa_01h_5
31598 8661           51                           push cx
31599 8662                        26             db 0x26 ;; es:
31600 8663           8B0D                         mov cx, [di]
31601 8665           81F9                 0080    cmp cx, #0x0080 ;; is LFB supported?
31602 8669           75           03              jnz cirrus_vesa_01h_6
31603 866B           B8                   014F    mov ax, #0x014F ;; error - no LFB
31604                       0000866E            cirrus_vesa_01h_6:
31605 866E           59                           pop cx
31606                       0000866F            cirrus_vesa_01h_5:
31607 866F           C3                           ret
31608                       00008670            cirrus_vesa_02h:
31609                                             ;; XXX support CRTC registers
31610 8670           F7C3                 3E00    test bx, #0x3e00
31611 8674           75           12              jnz cirrus_vesa_02h_2 ;; unknown flags
31612 8676           89D8                         mov ax, bx
31613 8678           25                   01FF    and ax, #0x1ff ;; bit 8-0 mode
31614 867B           3D                   0100    cmp ax, #0x100 ;; legacy VGA mode
31615 867E           72           0B              jb cirrus_vesa_02h_legacy
31616 8680           E8         0181              call cirrus_vesamode_to_mode
31617 8683           3D                   FFFF    cmp ax, #0xffff
31618 8686           75           09              jnz cirrus_vesa_02h_1
31619                       00008688            cirrus_vesa_02h_2:
31620 8688           E9         0175              jmp cirrus_vesa_unimplemented
31621                       0000868B            cirrus_vesa_02h_legacy:
31622 868B           CD                     10    int #0x10
31623 868D           B8                   004F    mov ax, #0x004F
31624 8690           C3                           ret
31625                       00008691            cirrus_vesa_02h_1:
31626 8691           56                           push si
31627 8692           50                           push ax
31628 8693           E8         01A2              call cirrus_get_modeentry_nomask
31629 8696           E8         FD8D              call cirrus_switch_mode
31630 8699           F7C3                 4000    test bx, #0x4000 ;; LFB
31631 869D           75           03              jnz cirrus_vesa_02h_3
31632 869F           E8         FDDC              call cirrus_enable_16k_granularity
31633                       000086A2            cirrus_vesa_02h_3:
31634 86A2           F7C3                 8000    test bx, #0x8000 ;; no clear
31635 86A6           75           07              jnz cirrus_vesa_02h_4
31636 86A8           50                           push ax
31637 86A9           31C0                         xor ax,ax
31638 86AB           E8         02F7              call cirrus_clear_vram
31639 86AE           58                           pop ax
31640                       000086AF            cirrus_vesa_02h_4:
31641 86AF           58                           pop ax
31642 86B0           1E                           push ds
31643 86B1           31F6                         xor si, si
31644 86B3           8EDE                         mov ds, si
31645 86B5           A2         0449              mov [0x449], al
31646 86B8           891E       04BA              mov [0x4BA], bx
31647 86BC           1F                           pop ds
31648 86BD           5E                           pop si
31649 86BE           B8                   004F    mov ax, #0x004F
31650 86C1           C3                           ret
31651                       000086C2            cirrus_vesa_03h:
31652 86C2           1E                           push ds
31653 86C3           31C0                         xor ax, ax
31654 86C5           8ED8                         mov ds, ax
31655 86C7           BB                   04BA    mov bx, # 0x4BA
31656 86CA           8B07                         mov ax, [bx]
31657 86CC           89C3                         mov bx, ax
31658 86CE           85DB                         test bx, bx
31659 86D0           75           09              jnz cirrus_vesa_03h_1
31660 86D2           BB                   0449    mov bx, # 0x449
31661 86D5           8A07                         mov al, [bx]
31662 86D7           88C3                         mov bl, al
31663 86D9           30FF                         xor bh, bh
31664                       000086DB            cirrus_vesa_03h_1:
31665 86DB           B8                   004F    mov ax, #0x004f
31666 86DE           1F                           pop ds
31667 86DF           C3                           ret
31668                       000086E0            cirrus_vesa_05h_farentry:
31669 86E0           E8         0001              call cirrus_vesa_05h
31670 86E3           CB                           retf
31671                       000086E4            cirrus_vesa_05h:
31672 86E4           80FB                   01    cmp bl, #0x01
31673 86E7           77           0A              ja cirrus_vesa_05h_1
31674 86E9           80FF                   00    cmp bh, #0x00
31675 86EC           74           08              jz cirrus_vesa_05h_setmempage
31676 86EE           80FF                   01    cmp bh, #0x01
31677 86F1           74           17              jz cirrus_vesa_05h_getmempage
31678                       000086F3            cirrus_vesa_05h_1:
31679 86F3           E9         010A              jmp cirrus_vesa_unimplemented
31680                       000086F6            cirrus_vesa_05h_setmempage:
31681 86F6           08F6                         or dh, dh ; address must be < 0x100
31682 86F8           75           F9              jnz cirrus_vesa_05h_1
31683 86FA           52                           push dx
31684 86FB           88D8                         mov al, bl ;; bl=bank number
31685 86FD           04                     09    add al, #0x09
31686 86FF           88D4                         mov ah, dl ;; dx=window address in granularity
31687 8701           BA                   03CE    mov dx, #0x3ce
31688 8704           EF                           out dx, ax
31689 8705           5A                           pop dx
31690 8706           B8                   004F    mov ax, #0x004F
31691 8709           C3                           ret
31692                       0000870A            cirrus_vesa_05h_getmempage:
31693 870A           88D8                         mov al, bl ;; bl=bank number
31694 870C           04                     09    add al, #0x09
31695 870E           BA                   03CE    mov dx, #0x3ce
31696 8711           EE                           out dx, al
31697 8712           42                           inc dx
31698 8713           EC                           in al, dx
31699 8714           31D2                         xor dx, dx
31700 8716           88C2                         mov dl, al ;; dx=window address in granularity
31701 8718           B8                   004F    mov ax, #0x004F
31702 871B           C3                           ret
31703                       0000871C            cirrus_vesa_06h:
31704 871C           89C8                         mov ax, cx
31705 871E           80FB                   01    cmp bl, #0x01
31706 8721           74           19              je cirrus_vesa_06h_3
31707 8723           80FB                   02    cmp bl, #0x02
31708 8726           74           11              je cirrus_vesa_06h_2
31709 8728           72           04              jb cirrus_vesa_06h_1
31710 872A           B8                   0100    mov ax, #0x0100
31711 872D           C3                           ret
31712                       0000872E            cirrus_vesa_06h_1:
31713 872E           E8         0179              call cirrus_get_bpp_bytes
31714 8731           88C3                         mov bl, al
31715 8733           30FF                         xor bh, bh
31716 8735           89C8                         mov ax, cx
31717 8737           F7E3                         mul bx
31718                       00008739            cirrus_vesa_06h_2:
31719 8739           E8         0189              call cirrus_set_line_offset
31720                       0000873C            cirrus_vesa_06h_3:
31721 873C           E8         016B              call cirrus_get_bpp_bytes
31722 873F           88C3                         mov bl, al
31723 8741           30FF                         xor bh, bh
31724 8743           31D2                         xor dx, dx
31725 8745           E8         0199              call cirrus_get_line_offset
31726 8748           50                           push ax
31727 8749           F7F3                         div bx
31728 874B           89C1                         mov cx, ax
31729 874D           5B                           pop bx
31730 874E           E8         FD86              call cirrus_extbios_85h ;; al=vram in 64k
31731 8751           31D2                         xor dx, dx
31732 8753           88C2                         mov dl, al
31733 8755           31C0                         xor ax, ax
31734 8757           F7F3                         div bx
31735 8759           89C2                         mov dx, ax
31736 875B           B8                   004F    mov ax, #0x004f
31737 875E           C3                           ret
31738                       0000875F            cirrus_vesa_07h:
31739 875F           80FB                   80    cmp bl, #0x80
31740 8762           74           0B              je cirrus_vesa_07h_1
31741 8764           80FB                   01    cmp bl, #0x01
31742 8767           74           33              je cirrus_vesa_07h_2
31743 8769           72           04              jb cirrus_vesa_07h_1
31744 876B           B8                   0100    mov ax, #0x0100
31745 876E           C3                           ret
31746                       0000876F            cirrus_vesa_07h_1:
31747 876F           52                           push dx
31748 8770           E8         0137              call cirrus_get_bpp_bytes
31749 8773           88C3                         mov bl, al
31750 8775           30FF                         xor bh, bh
31751 8777           89C8                         mov ax, cx
31752 8779           F7E3                         mul bx
31753 877B           5B                           pop bx
31754 877C           50                           push ax
31755 877D           E8         0161              call cirrus_get_line_offset
31756 8780           F7E3                         mul bx
31757 8782           5B                           pop bx
31758 8783           01D8                         add ax, bx
31759 8785           73           01              jnc cirrus_vesa_07h_3
31760 8787           42                           inc dx
31761                       00008788            cirrus_vesa_07h_3:
31762 8788           52                           push dx
31763 8789           83E2                   03    and dx, #0x0003
31764 878C           BB                   0004    mov bx, #0x04
31765 878F           F7F3                         div bx
31766 8791           5A                           pop dx
31767 8792           C1EA                   02    shr dx, #2
31768 8795           E8         0195              call cirrus_set_start_addr
31769 8798           B8                   004F    mov ax, #0x004f
31770 879B           C3                           ret
31771                       0000879C            cirrus_vesa_07h_2:
31772 879C           E8         01CF              call cirrus_get_start_addr
31773 879F           C1E2                   02    shl dx, #2
31774 87A2           52                           push dx
31775 87A3           BB                   0004    mov bx, #0x04
31776 87A6           F7E3                         mul bx
31777 87A8           5B                           pop bx
31778 87A9           09DA                         or dx, bx
31779 87AB           50                           push ax
31780 87AC           E8         0132              call cirrus_get_line_offset
31781 87AF           89C3                         mov bx, ax
31782 87B1           58                           pop ax
31783 87B2           F7F3                         div bx
31784 87B4           50                           push ax
31785 87B5           52                           push dx
31786 87B6           E8         00F1              call cirrus_get_bpp_bytes
31787 87B9           88C3                         mov bl, al
31788 87BB           30FF                         xor bh, bh
31789 87BD           58                           pop ax
31790 87BE           31D2                         xor dx, dx
31791 87C0           F7F3                         div bx
31792 87C2           89C1                         mov cx, ax
31793 87C4           5A                           pop dx
31794 87C5           B8                   004F    mov ax, #0x004f
31795 87C8           C3                           ret
31796                       000087C9            cirrus_vesa_10h: ;; Power management functions
31797                                             ;; Set up DS to read stored power info from RAM
31798 87C9           1E                           push ds
31799 87CA           31C0                         xor ax, ax
31800 87CC           8ED8                         mov ds, ax
31801                                             ;; Now choose the right function
31802 87CE           80FB                   00    cmp bl, #0x00
31803 87D1           77           08              ja cirrus_vesa_10h_01
31804                                             ;;
31805                                             ;; Function 00h: Get capabilities
31806                                             ;;
31807 87D3           BB                   0720    mov bx, #0x0720 ;; 07: standby/suspend/off, 20: VBE/PM 2.0
31808 87D6           B8                   004F    mov ax, #0x004f
31809 87D9           EB           23              jmp cirrus_vesa_10h_done
31810                       000087DB            cirrus_vesa_10h_01:
31811 87DB           80FB                   01    cmp bl, #0x01
31812 87DE           77           0C              ja cirrus_vesa_10h_02
31813                                             ;;
31814                                             ;; Function 01h: Set power state
31815                                             ;;
31816 87E0           89D8                         mov ax, bx
31817 87E2           BB                   04BC    mov bx, # 0x4BC
31818 87E5           8827                         mov [bx], ah
31819 87E7           B8                   004F    mov ax, #0x004f
31820 87EA           EB           12              jmp cirrus_vesa_10h_done
31821                       000087EC            cirrus_vesa_10h_02:
31822 87EC           80FB                   02    cmp bl, #0x02
31823 87EF           77           0A              ja cirrus_vesa_10h_unimplemented
31824                                             ;;
31825                                             ;; Function 02h: Get power state
31826                                             ;;
31827 87F1           BB                   04BC    mov bx, # 0x4BC
31828 87F4           8A3F                         mov bh, [bx]
31829 87F6           B8                   004F    mov ax, #0x004f
31830 87F9           EB           03              jmp cirrus_vesa_10h_done
31831                       000087FB            cirrus_vesa_10h_unimplemented:
31832 87FB           B8                   014F    mov ax, #0x014F ;; not implemented
31833                       000087FE            cirrus_vesa_10h_done:
31834 87FE           1F                           pop ds
31835 87FF           C3                           ret
31836                       00008800            cirrus_vesa_unimplemented:
31837 8800           B8                   014F    mov ax, #0x014F ;; not implemented
31838 8803           C3                           ret
31839                                           ;; in ax:vesamode, out ax:cirrusmode
31840                       00008804            cirrus_vesamode_to_mode:
31841 8804           1E                           push ds
31842 8805           51                           push cx
31843 8806           56                           push si
31844 8807           0E                           push cs
31845 8808           1F                           pop ds
31846 8809           B9                   FFFF    mov cx, #0xffff
31847 880C           BE                   8269    mov si, #_cirrus_vesa_modelist
31848                       0000880F            cvtm_1:
31849 880F           3904                         cmp [si],ax
31850 8811           74           09              jz cvtm_2
31851 8813           390C                         cmp [si],cx
31852 8815           74           05              jz cvtm_2
31853 8817           83C6                   04    add si, #4
31854 881A           EB           F3              jmp cvtm_1
31855                       0000881C            cvtm_2:
31856 881C           8B44         02              mov ax,[si+2]
31857 881F           5E                           pop si
31858 8820           59                           pop cx
31859 8821           1F                           pop ds
31860 8822           C3                           ret
31861                                             ; cirrus_get_crtc
31862                                             ;; NOTE - may be called in protected mode
31863                       00008823            cirrus_get_crtc:
31864 8823           1E                           push ds
31865 8824           50                           push ax
31866 8825           BA                   03CC    mov dx, #0x3cc
31867 8828           EC                           in al, dx
31868 8829           24                     01    and al, #0x01
31869 882B           C0E0                   05    shl al, #5
31870 882E           BA                   03B4    mov dx, #0x3b4
31871 8831           00C2                         add dl, al
31872 8833           58                           pop ax
31873 8834           1F                           pop ds
31874 8835           C3                           ret
31875                                           ;; in - al:mode, out - cflag:result, si:table, ax:destroyed
31876                       00008836            cirrus_get_modeentry:
31877 8836           24                     7F    and al, #0x7f
31878                       00008838            cirrus_get_modeentry_nomask:
31879 8838           BE                   808F    mov si, #_cirrus_modes
31880                       0000883B            cgm_1:
31881 883B                        2E             db 0x2e ;; cs:
31882 883C           8A24                         mov ah, [si]
31883 883E           38E0                         cmp al, ah
31884 8840           74           0F              jz cgm_2
31885 8842           80FC                   FF    cmp ah, #0xff
31886 8845           74           05              jz cgm_4
31887 8847           83C6                   1A    add si, # 26
31888 884A           EB           EF              jmp cgm_1
31889                       0000884C            cgm_4:
31890 884C           31F6                         xor si, si
31891 884E           F9                           stc ;; video mode is not supported
31892 884F           EB           01              jmp cgm_3
31893                       00008851            cgm_2:
31894 8851           F8                           clc ;; video mode is supported
31895                       00008852            cgm_3:
31896 8852           C3                           ret
31897                                             ; get LFB address
31898                                             ; out - ax:LFB address (high 16 bit)
31899                                             ;; NOTE - may be called in protected mode
31900                       00008853            cirrus_get_lfb_addr:
31901 8853           51                           push cx
31902 8854           52                           push dx
31903 8855     66    50                           push eax
31904 8857           31C9                           xor cx, cx
31905 8859           B2                     00      mov dl, #0x00
31906 885B           E8         0033                call cirrus_pci_read
31907 885E           3D                   FFFF      cmp ax, #0xffff
31908 8861           74           13                jz cirrus_get_lfb_addr_5
31909                       00008863             cirrus_get_lfb_addr_3:
31910 8863           B2                     00      mov dl, #0x00
31911 8865           E8         0029                call cirrus_pci_read
31912 8868           3D                   1013      cmp ax, #0x1013 ;; cirrus
31913 886B           74           0D                jz cirrus_get_lfb_addr_4
31914 886D           83C1                   08      add cx, #0x8
31915 8870           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
31916 8874           72           ED                jb cirrus_get_lfb_addr_3
31917                       00008876             cirrus_get_lfb_addr_5:
31918 8876           31D2                           xor dx, dx ;; no LFB
31919 8878           EB           10                jmp cirrus_get_lfb_addr_6
31920                       0000887A             cirrus_get_lfb_addr_4:
31921 887A           B2                     10      mov dl, #0x10 ;; I/O space #0
31922 887C           E8         0012                call cirrus_pci_read
31923 887F           A9                   FFF1      test ax, #0xfff1
31924 8882           75           F2                jnz cirrus_get_lfb_addr_5
31925 8884     66    C1E8                   10      shr eax, #16
31926 8888           89C2                           mov dx, ax ;; LFB address
31927                       0000888A             cirrus_get_lfb_addr_6:
31928 888A     66    58                           pop eax
31929 888C           89D0                         mov ax, dx
31930 888E           5A                           pop dx
31931 888F           59                           pop cx
31932 8890           C3                           ret
31933                       00008891            cirrus_pci_read:
31934 8891     66    B8               00800000    mov eax, #0x00800000
31935 8897           89C8                         mov ax, cx
31936 8899     66    C1E0                   08    shl eax, #8
31937 889D           88D0                         mov al, dl
31938 889F           BA                   0CF8    mov dx, #0xcf8
31939 88A2     66    EF                           out dx, eax
31940 88A4           80C2                   04    add dl, #4
31941 88A7     66    ED                           in eax, dx
31942 88A9           C3                           ret
31943                                           ;; out - al:bytes per pixel
31944                       000088AA            cirrus_get_bpp_bytes:
31945 88AA           52                           push dx
31946 88AB           BA                   03C4    mov dx, #0x03c4
31947 88AE           B0                     07    mov al, #0x07
31948 88B0           EE                           out dx, al
31949 88B1           42                           inc dx
31950 88B2           EC                           in al, dx
31951 88B3           24                     0E    and al, #0x0e
31952 88B5           3C                     06    cmp al, #0x06
31953 88B7           75           02              jne cirrus_get_bpp_bytes_1
31954 88B9           24                     02    and al, #0x02
31955                       000088BB            cirrus_get_bpp_bytes_1:
31956 88BB           D0E8                         shr al, #1
31957 88BD           3C                     04    cmp al, #0x04
31958 88BF           74           02              je cirrus_get_bpp_bytes_2
31959 88C1           FEC0                         inc al
31960                       000088C3            cirrus_get_bpp_bytes_2:
31961 88C3           5A                           pop dx
31962 88C4           C3                           ret
31963                                           ;; in - ax: new line offset
31964                       000088C5            cirrus_set_line_offset:
31965 88C5           C1E8                   03    shr ax, #3
31966 88C8           50                           push ax
31967 88C9           E8         FF57              call cirrus_get_crtc
31968 88CC           B0                     13    mov al, #0x13
31969 88CE           EE                           out dx, al
31970 88CF           42                           inc dx
31971 88D0           58                           pop ax
31972 88D1           EE                           out dx, al
31973 88D2           4A                           dec dx
31974 88D3           B0                     1B    mov al, #0x1b
31975 88D5           EE                           out dx, al
31976 88D6           42                           inc dx
31977 88D7           C0E4                   04    shl ah, #4
31978 88DA           EC                           in al, dx
31979 88DB           24                     00>   and al, #ef
31980 88DD           08E0                         or al, ah
31981 88DF           EE                           out dx, al
31982 88E0           C3                           ret
31983                                           ;; out - ax: active line offset
31984                       000088E1            cirrus_get_line_offset:
31985 88E1           52                           push dx
31986 88E2           53                           push bx
31987 88E3           E8         FF3D              call cirrus_get_crtc
31988 88E6           B0                     13    mov al, #0x13
31989 88E8           EE                           out dx, al
31990 88E9           42                           inc dx
31991 88EA           EC                           in al, dx
31992 88EB           88C3                         mov bl, al
31993 88ED           4A                           dec dx
31994 88EE           B0                     1B    mov al, #0x1b
31995 88F0           EE                           out dx, al
31996 88F1           42                           inc dx
31997 88F2           EC                           in al, dx
31998 88F3           88C4                         mov ah, al
31999 88F5           C0EC                   04    shr ah, #4
32000 88F8           80E4                   01    and ah, #0x01
32001 88FB           88D8                         mov al, bl
32002 88FD           C1E0                   03    shl ax, #3
32003 8900           5B                           pop bx
32004 8901           5A                           pop dx
32005 8902           C3                           ret
32006                                           ;; in - si: table
32007                                           ;; out - ax: line offset for mode
32008                       00008903            cirrus_get_line_offset_entry:
32009 8903           53                           push bx
32010 8904           8B5C         0E              mov bx, [si+14] ;; crtc table
32011 8907           53                           push bx
32012                       00008908            offset_loop1:
32013 8908           8B07                         mov ax, [bx]
32014 890A           3C                     13    cmp al, #0x13
32015 890C           74           04              je offset_found1
32016 890E           43                           inc bx
32017 890F           43                           inc bx
32018 8910           75           F6              jnz offset_loop1
32019                       00008912            offset_found1:
32020 8912           30C0                         xor al, al
32021 8914           C1E8                   05    shr ax, #5
32022 8917           5B                           pop bx
32023 8918           50                           push ax
32024                       00008919            offset_loop2:
32025 8919           8B07                         mov ax, [bx]
32026 891B           3C                     1B    cmp al, #0x1b
32027 891D           74           04              je offset_found2
32028 891F           43                           inc bx
32029 8920           43                           inc bx
32030 8921           75           F6              jnz offset_loop2
32031                       00008923            offset_found2:
32032 8923           5B                           pop bx
32033 8924           25                   1000    and ax, #0x1000
32034 8927           D1E8                         shr ax, #1
32035 8929           09D8                         or ax, bx
32036 892B           5B                           pop bx
32037 892C           C3                           ret
32038                                           ;; in - new address in DX:AX
32039                       0000892D            cirrus_set_start_addr:
32040 892D           53                           push bx
32041 892E           52                           push dx
32042 892F           50                           push ax
32043 8930           E8         FEF0              call cirrus_get_crtc
32044 8933           B0                     0D    mov al, #0x0d
32045 8935           EE                           out dx, al
32046 8936           42                           inc dx
32047 8937           58                           pop ax
32048 8938           EE                           out dx, al
32049 8939           4A                           dec dx
32050 893A           B0                     0C    mov al, #0x0c
32051 893C           EE                           out dx, al
32052 893D           42                           inc dx
32053 893E           88E0                         mov al, ah
32054 8940           EE                           out dx, al
32055 8941           4A                           dec dx
32056 8942           B0                     1D    mov al, #0x1d
32057 8944           EE                           out dx, al
32058 8945           42                           inc dx
32059 8946           EC                           in al, dx
32060 8947           24                     7F    and al, #0x7f
32061 8949           5B                           pop bx
32062 894A           88DC                         mov ah, bl
32063 894C           C0E3                   04    shl bl, #4
32064 894F           80E3                   80    and bl, #0x80
32065 8952           08D8                         or al, bl
32066 8954           EE                           out dx, al
32067 8955           4A                           dec dx
32068 8956           88E3                         mov bl, ah
32069 8958           80E4                   01    and ah, #0x01
32070 895B           D0E3                         shl bl, #1
32071 895D           80E3                   0C    and bl, #0x0c
32072 8960           08DC                         or ah, bl
32073 8962           B0                     1B    mov al, #0x1b
32074 8964           EE                           out dx, al
32075 8965           42                           inc dx
32076 8966           EC                           in al, dx
32077 8967           24                     F2    and al, #0xf2
32078 8969           08E0                         or al, ah
32079 896B           EE                           out dx, al
32080 896C           5B                           pop bx
32081 896D           C3                           ret
32082                                           ;; out - current address in DX:AX
32083                       0000896E            cirrus_get_start_addr:
32084 896E           53                           push bx
32085 896F           E8         FEB1              call cirrus_get_crtc
32086 8972           B0                     0C    mov al, #0x0c
32087 8974           EE                           out dx, al
32088 8975           42                           inc dx
32089 8976           EC                           in al, dx
32090 8977           88C4                         mov ah, al
32091 8979           4A                           dec dx
32092 897A           B0                     0D    mov al, #0x0d
32093 897C           EE                           out dx, al
32094 897D           42                           inc dx
32095 897E           EC                           in al, dx
32096 897F           50                           push ax
32097 8980           4A                           dec dx
32098 8981           B0                     1B    mov al, #0x1b
32099 8983           EE                           out dx, al
32100 8984           42                           inc dx
32101 8985           EC                           in al, dx
32102 8986           4A                           dec dx
32103 8987           88C3                         mov bl, al
32104 8989           24                     01    and al, #0x01
32105 898B           80E3                   0C    and bl, #0x0c
32106 898E           D0EB                         shr bl, #1
32107 8990           08C3                         or bl, al
32108 8992           B0                     1D    mov al, #0x1d
32109 8994           EE                           out dx, al
32110 8995           42                           inc dx
32111 8996           EC                           in al, dx
32112 8997           24                     80    and al, #0x80
32113 8999           C0E8                   04    shr al, #4
32114 899C           08C3                         or bl, al
32115 899E           88DA                         mov dl, bl
32116 89A0           30F6                         xor dh, dh
32117 89A2           58                           pop ax
32118 89A3           5B                           pop bx
32119 89A4           C3                           ret
32120                       000089A5            cirrus_clear_vram:
32121 89A5           60                           pusha
32122 89A6           06                           push es
32123 89A7           89C6                         mov si, ax
32124 89A9           E8         FAD2              call cirrus_enable_16k_granularity
32125 89AC           E8         FB28              call cirrus_extbios_85h
32126 89AF           C0E0                   02    shl al, #2
32127 89B2           88C3                         mov bl, al
32128 89B4           30E4                         xor ah,ah
32129                       000089B6            cirrus_clear_vram_1:
32130 89B6           B0                     09    mov al, #0x09
32131 89B8           BA                   03CE    mov dx, #0x3ce
32132 89BB           EF                           out dx, ax
32133 89BC           50                           push ax
32134                                           ;; Windows Vista appears to be emulating this sequence as part of changing
32135                                           ;; screen resolution, but it generates 4096 writes per iteration.
32136                                           ;; Instead, use a magic register sequence to write the whole bank.
32137                                           ;;mov cx, #0xa000
32138                                           ;;mov es, cx
32139                                           ;;xor di, di
32140                                           ;;mov ax, si
32141                                           ;;mov cx, #8192
32142                                           ;;cld
32143                                           ;;rep
32144                                           ;; stosw
32145 89BD           89F0                         mov ax, si
32146 89BF           C1E0                   08    shl ax, #8
32147 89C2           B0                     FE    mov al, #0xfe
32148 89C4           EF                           out dx, ax ;; Low byte of value to be written to the bank
32149 89C5           89F0                         mov ax, si
32150 89C7           B0                     FF    mov al, #0xff
32151 89C9           EF                           out dx, ax ;; High byte and trigger the write
32152 89CA           58                           pop ax
32153 89CB           FEC4                         inc ah
32154 89CD           38DC                         cmp ah, bl
32155 89CF           75           E5              jne cirrus_clear_vram_1
32156 89D1           30E4                         xor ah,ah
32157 89D3           BA                   03CE    mov dx, #0x3ce
32158 89D6           EF                           out dx, ax
32159 89D7           07                           pop es
32160 89D8           61                           popa
32161 89D9           C3                           ret
32162                       000089DA            cirrus_extbios_handlers:
32163                                             ;; 80h
32164 89DA                      849C              dw cirrus_extbios_80h
32165 89DC                      84C2              dw cirrus_extbios_81h
32166 89DE                      84C6              dw cirrus_extbios_82h
32167 89E0                      8529              dw cirrus_extbios_unimplemented
32168                                             ;; 84h
32169 89E2                      8529              dw cirrus_extbios_unimplemented
32170 89E4                      84D7              dw cirrus_extbios_85h
32171 89E6                      8529              dw cirrus_extbios_unimplemented
32172 89E8                      8529              dw cirrus_extbios_unimplemented
32173                                             ;; 88h
32174 89EA                      8529              dw cirrus_extbios_unimplemented
32175 89EC                      8529              dw cirrus_extbios_unimplemented
32176 89EE                      8529              dw cirrus_extbios_unimplemented
32177 89F0                      8529              dw cirrus_extbios_unimplemented
32178                                             ;; 8Ch
32179 89F2                      8529              dw cirrus_extbios_unimplemented
32180 89F4                      8529              dw cirrus_extbios_unimplemented
32181 89F6                      8529              dw cirrus_extbios_unimplemented
32182 89F8                      8529              dw cirrus_extbios_unimplemented
32183                                             ;; 90h
32184 89FA                      8529              dw cirrus_extbios_unimplemented
32185 89FC                      8529              dw cirrus_extbios_unimplemented
32186 89FE                      8529              dw cirrus_extbios_unimplemented
32187 8A00                      8529              dw cirrus_extbios_unimplemented
32188                                             ;; 94h
32189 8A02                      8529              dw cirrus_extbios_unimplemented
32190 8A04                      8529              dw cirrus_extbios_unimplemented
32191 8A06                      8529              dw cirrus_extbios_unimplemented
32192 8A08                      8529              dw cirrus_extbios_unimplemented
32193                                             ;; 98h
32194 8A0A                      8529              dw cirrus_extbios_unimplemented
32195 8A0C                      8529              dw cirrus_extbios_unimplemented
32196 8A0E                      84FF              dw cirrus_extbios_9Ah
32197 8A10                      8529              dw cirrus_extbios_unimplemented
32198                                             ;; 9Ch
32199 8A12                      8529              dw cirrus_extbios_unimplemented
32200 8A14                      8529              dw cirrus_extbios_unimplemented
32201 8A16                      8529              dw cirrus_extbios_unimplemented
32202 8A18                      8529              dw cirrus_extbios_unimplemented
32203                                             ;; A0h
32204 8A1A                      8506              dw cirrus_extbios_A0h
32205 8A1C                      851F              dw cirrus_extbios_A1h
32206 8A1E                      8523              dw cirrus_extbios_A2h
32207 8A20                      8529              dw cirrus_extbios_unimplemented
32208                                             ;; A4h
32209 8A22                      8529              dw cirrus_extbios_unimplemented
32210 8A24                      8529              dw cirrus_extbios_unimplemented
32211 8A26                      8529              dw cirrus_extbios_unimplemented
32212 8A28                      8529              dw cirrus_extbios_unimplemented
32213                                             ;; A8h
32214 8A2A                      8529              dw cirrus_extbios_unimplemented
32215 8A2C                      8529              dw cirrus_extbios_unimplemented
32216 8A2E                      8529              dw cirrus_extbios_unimplemented
32217 8A30                      8529              dw cirrus_extbios_unimplemented
32218                                             ;; ACh
32219 8A32                      8529              dw cirrus_extbios_unimplemented
32220 8A34                      8529              dw cirrus_extbios_unimplemented
32221 8A36                      8526              dw cirrus_extbios_AEh
32222 8A38                      8529              dw cirrus_extbios_unimplemented
32223                       00008A3A            cirrus_vesa_handlers:
32224                                             ;; 00h
32225 8A3A                      852A              dw cirrus_vesa_00h
32226 8A3C                      859C              dw cirrus_vesa_01h
32227 8A3E                      8670              dw cirrus_vesa_02h
32228 8A40                      86C2              dw cirrus_vesa_03h
32229                                             ;; 04h
32230 8A42                      8800              dw cirrus_vesa_unimplemented
32231 8A44                      86E4              dw cirrus_vesa_05h
32232 8A46                      871C              dw cirrus_vesa_06h
32233 8A48                      875F              dw cirrus_vesa_07h
32234                                             ;; 08h
32235 8A4A                      8800              dw cirrus_vesa_unimplemented
32236 8A4C                      8800              dw cirrus_vesa_unimplemented
32237 8A4E                      8800              dw cirrus_vesa_unimplemented
32238 8A50                      8800              dw cirrus_vesa_unimplemented
32239                                             ;; 0Ch
32240 8A52                      8800              dw cirrus_vesa_unimplemented
32241 8A54                      8800              dw cirrus_vesa_unimplemented
32242 8A56                      8800              dw cirrus_vesa_unimplemented
32243 8A58                      8800              dw cirrus_vesa_unimplemented
32244                                             ;; 10h
32245 8A5A                      87C9              dw cirrus_vesa_10h
32246                                           ! 5637 endasm
32247                                           !BCC_ENDASM
32248                                           ! 5638 #asm
32249                                           !BCC_ASM
32250                                           ;; DATA_SEG_DEFS_HERE
32251                                           ! 5640 endasm
32252                                           !BCC_ENDASM
32253                                           ! 5641 #asm
32254                                           !BCC_ASM
32255 8A5C                        76            .ascii "vgabios ends here"
32256 8A6D                        00            .byte 0x00
32257                       00008A6E            vgabios_end:
32258 8A6E                        CB            .byte 0xCB
32259                                           ;; BLOCK_STRINGS_BEGIN
32260                                           ! 5647 endasm
32261                                           !BCC_ENDASM
32262                                           ! 5648 
32263 8A6F                                      .bss
32264                                           
32265                                           ! 0 errors detected

Symbols:
..FFF5                      0 FFFC A   ..FFF6                      0 FFEE A   
..FFF7                      0 FFF4 A   ..FFF8                      0 FFF6 A   
..FFF9                      0 FFEE A   ..FFFA                      0 FFEE A   
..FFFB                      0 FFF2 A   ..FFFC                      0 FFF0 A   
..FFFD                      0 FFE8 A   ..FFFE                      0 FFE8 A   
..FFFF                      0 FFFE A   .1                          0 3ABB A   
.10                         0 3672 A   .100                        0 4D5E A   
.101                        0 4CE6 A   .102                        0 4D23 A   
.103                        0 4CFD A   .104                        0 4CF6 A   
.105                        0 4D4B A   .106                        0 4D57 A   
.107                        0 4D55 A   .108                        0 4D6A A   
.109                        0 4D6D A   .10A                        0 4E00 A   
.10B                        0 4DBB A   .10C                        0 4DA9 A   
.10D                        0 4D97 A   .10E                        0 4D90 A   
.10F                        0 4D89 A   .11                         0 36A1 A   
.110                        0 4F44 A   .111                        0 4E23 A   
.112                        0 4E07 A   .113                        0 4EB6 A   
.114                        0 4E2C A   .115                        0 4EB3 A   
.116                        0 4EA2 A   .117                        0 4EA9 A   
.118                        0 4E36 A   .119                        0 4E7A A   
.11A                        0 4E54 A   .11B                        0 4E4D A   
.11C                        0 4EA2 A   .11D                        0 4EB3 A   
.11E                        0 4F44 A   .11F                        0 4F44 A   
.12                         0 3691 A   .120                        0 4F31 A   
.121                        0 4F38 A   .122                        0 4EC0 A   
.123                        0 4EFD A   .124                        0 4ED7 A   
.125                        0 4ED0 A   .126                        0 4F25 A   
.127                        0 4F31 A   .128                        0 4F2F A   
.129                        0 4F44 A   .12A                        0 4F96 A   
.12B                        0 4F92 A   .12C                        0 5055 A   
.12D                        0 4FF7 A   .12E                        0 5055 A   
.12F                        0 5086 A   .13                         0 36A6 A   
.131                        0 507C A   .132                        0 5064 A   
.133                        0 506C A   .134                        0 5074 A   
.135                        0 50F3 A   .136                        0 50E3 A   
.137                        0 5101 A   .138                        0 51B9 A   
.139                        0 51A8 A   .13A                        0 51AF A   
.13B                        0 5109 A   .13C                        0 51A8 A   
.13D                        0 5198 A   .13E                        0 519F A   
.13F                        0 5126 A   .14                         0 36BD A   
.140                        0 5188 A   .141                        0 5171 A   
.142                        0 5198 A   .143                        0 51A8 A   
.144                        0 51B9 A   .145                        0 53CB A   
.146                        0 53BB A   .147                        0 53C2 A   
.148                        0 520F A   .149                        0 5233 A   
.14A                        0 522A A   .14B                        0 52F4 A   
.14C                        0 5241 A   .14D                        0 525C A   
.14E                        0 524A A   .14F                        0 5261 A   
.15                         0 36D1 A   .150                        0 52DE A   
.151                        0 52D0 A   .152                        0 52D7 A   
.153                        0 5268 A   .154                        0 52C6 A   
.155                        0 527F A   .156                        0 52A8 A   
.157                        0 5288 A   .158                        0 52C6 A   
.159                        0 52DE A   .15A                        0 53BB A   
.15B                        0 53BB A   .15C                        0 53B2 A   
.15D                        0 52F7 A   .15E                        0 5312 A   
.15F                        0 5300 A   .16                         0 36EA A   
.160                        0 5317 A   .161                        0 5398 A   
.162                        0 538A A   .163                        0 5391 A   
.164                        0 531E A   .165                        0 5380 A   
.166                        0 5335 A   .167                        0 5360 A   
.168                        0 533E A   .169                        0 5380 A   
.16A                        0 5398 A   .16B                        0 53BB A   
.16C                        0 53CB A   .16D                        0 549F A   
.16E                        0 548F A   .16F                        0 5496 A   
.17                         0 3701 A   .170                        0 5415 A   
.171                        0 548F A   .172                        0 5481 A   
.173                        0 5488 A   .174                        0 543B A   
.175                        0 545D A   .176                        0 5457 A   
.177                        0 548F A   .178                        0 549F A   
.179                        0 54D5 A   .17A                        0 54D1 A   
.17B                        0 55A0 A   .17C                        0 5536 A   
.17D                        0 5693 A   .17E                        0 5693 A   
.17F                        0 567B A   .18                         0 370F A   
.180                        0 55D5 A   .181                        0 5674 A   
.183                        0 5660 A   .184                        0 55E9 A   
.185                        0 55E9 A   .186                        0 5612 A   
.187                        0 563B A   .188                        0 5693 A   
.189                        0 5687 A   .18A                        0 56C7 A   
.18B                        0 56C3 A   .18C                        0 5796 A   
.18D                        0 5728 A   .18E                        0 5793 A   
.18F                        0 5787 A   .19                         0 374A A   
.190                        0 575E A   .191                        0 5793 A   
.192                        0 5889 A   .193                        0 5889 A   
.194                        0 5871 A   .195                        0 57CB A   
.196                        0 586A A   .198                        0 5856 A   
.199                        0 57DF A   .19A                        0 57DF A   
.19B                        0 5808 A   .19C                        0 5831 A   
.19D                        0 5889 A   .19E                        0 587D A   
.19F                        0 5935 A   .1A                         0 3784 A   
.1A0                        0 5931 A   .1A1                        0 594F A   
.1A2                        0 594B A   .1A3                        0 5B9D A   
.1A5                        0 5B87 A   .1A6                        0 5964 A   
.1A7                        0 5964 A   .1A8                        0 59E5 A   
.1A9                        0 59D7 A   .1AA                        0 5A0A A   
.1AB                        0 5A3C A   .1AC                        0 5A20 A   
.1AD                        0 5A56 A   .1AE                        0 5A68 A   
.1AF                        0 5A5F A   .1B                         0 3799 A   
.1B0                        0 5AD4 A   .1B1                        0 5A8E A   
.1B2                        0 5B14 A   .1B3                        0 5B28 A   
.1B4                        0 5B1D A   .1B5                        0 5B3E A   
.1B6                        0 5B53 A   .1B7                        0 5BD7 A   
.1B8                        0 5BD3 A   .1B9                        0 5BF1 A   
.1BA                        0 5BED A   .1BB                        0 5D85 A   
.1BD                        0 5D6D A   .1BE                        0 5C06 A   
.1BF                        0 5C06 A   .1C                         0 37B9 A   
.1C0                        0 5C9A A   .1C1                        0 5C8C A   
.1C2                        0 5C93 A   .1C3                        0 5C48 A   
.1C4                        0 5C8C A   .1C5                        0 5C78 A   
.1C6                        0 5C9A A   .1C7                        0 5C9D A   
.1C8                        0 5CC9 A   .1C9                        0 5CC0 A   
.1CA                        0 5D14 A   .1CB                        0 5CEF A   
.1CC                        0 5D35 A   .1CD                        0 5D37 A   
.1CE                        0 5D66 A   .1CF                        0 5DC5 A   
.1D                         0 37D9 A   .1D0                        0 5DB4 A   
.1D1                        0 5DEF A   .1D2                        0 5DEB A   
.1D3                        0 604C A   .1D5                        0 602B A   
.1D6                        0 5E40 A   .1D7                        0 5E43 A   
.1D8                        0 5E51 A   .1D9                        0 5E4A A   
.1DA                        0 5E54 A   .1DB                        0 5E5C A   
.1DC                        0 5E66 A   .1DD                        0 5EB3 A   
.1DE                        0 5EA8 A   .1DF                        0 5E66 A   
.1E                         0 37F6 A   .1E0                        0 5EB3 A   
.1E1                        0 5EB6 A   .1E2                        0 5F50 A   
.1E3                        0 5ECE A   .1E4                        0 5F4D A   
.1E5                        0 5F2A A   .1E6                        0 6022 A   
.1E7                        0 6022 A   .1E9                        0 600E A   
.1EA                        0 5F97 A   .1EB                        0 5F97 A   
.1EC                        0 5FC0 A   .1ED                        0 5FE9 A   
.1EE                        0 6062 A   .1EF                        0 6056 A   
.1F                         0 3811 A   .1F0                        0 60DC A   
.1F1                        0 606C A   .1F2                        0 60AC A   
.1F3                        0 6082 A   .1F4                        0 60D3 A   
.1F5                        0 6489 A   .1F6                        0 6478 A   
.1F7                        0 647F A   .1F8                        0 63C1 A   
.1F9                        0 6434 A   .1FA                        0 642E A   
.1FB                        0 6489 A   .1FC                        0 656A A   
.1FD                        0 655A A   .1FE                        0 6582 A   
.1FF                        0 66C7 A   .20                         0 382E A   
.200                        0 66B8 A   .201                        0 66BF A   
.202                        0 667B A   .203                        0 66C7 A   
.204                        0 66DC A   .205                        0 66D1 A   
.206                        0 6760 A   .207                        0 6751 A   
.208                        0 6758 A   .209                        0 6717 A   
.20A                        0 6760 A   .20B                        0 6773 A   
.20C                        0 676A A   .20D                        0 67F2 A   
.20E                        0 67E3 A   .20F                        0 67EA A   
.21                         0 383D A   .210                        0 67AF A   
.211                        0 67F2 A   .212                        0 6805 A   
.213                        0 67FC A   .214                        0 6890 A   
.215                        0 6881 A   .216                        0 6888 A   
.217                        0 684D A   .218                        0 6890 A   
.219                        0 68A3 A   .21A                        0 689A A   
.21B                        0 6A25 A   .21D                        0 6A00 A   
.21E                        0 68BD A   .21F                        0 68F4 A   
.22                         0 3978 A   .220                        0 692B A   
.221                        0 694E A   .222                        0 6971 A   
.223                        0 6994 A   .224                        0 69B6 A   
.225                        0 69D8 A   .226                        0 69FA A   
.227                        0 6A23 A   .228                        0 6A13 A   
.229                        0 6B95 A   .22A                        0 6B83 A   
.22B                        0 6C1F A   .22C                        0 6C13 A   
.22D                        0 6BC4 A   .22E                        0 6BF7 A   
.22F                        0 6BE2 A   .230                        0 6C1F A   
.231                        0 6C37 A   .232                        0 6C28 A   
.233                        0 6DC2 A   .234                        0 6DB9 A   
.235                        0 6DD4 A   .236                        0 6DCB A   
.237                        0 6DE6 A   .238                        0 6DDD A   
.239                        0 7099 A   .23A                        0 6E33 A   
.23B                        0 6F1E A   .23C                        0 6F0F A   
.23D                        0 6F16 A   .23E                        0 6EE3 A   
.23F                        0 6F1E A   .24                         0 3924 A   
.240                        0 6F8C A   .241                        0 6F7D A   
.242                        0 6F84 A   .243                        0 6F51 A   
.244                        0 6F8C A   .245                        0 6FDF A   
.246                        0 6FD0 A   .247                        0 6FD7 A   
.248                        0 6F93 A   .249                        0 6FDF A   
.24A                        0 702A A   .24B                        0 701B A   
.24C                        0 7022 A   .24D                        0 6FEF A   
.24E                        0 702A A   .24F                        0 7314 A   
.25                         0 3843 A   .250                        0 70A4 A   
.251                        0 7245 A   .252                        0 7236 A   
.253                        0 723D A   .254                        0 720E A   
.255                        0 7245 A   .256                        0 73D4 A   
.257                        0 731F A   .258                        0 73BE A   
.259                        0 73AF A   .25A                        0 73B6 A   
.25B                        0 7390 A   .25C                        0 73BE A   
.25D                        0 7696 A   .25E                        0 73EC A   
.25F                        0 745B A   .26                         0 3843 A   
.260                        0 744C A   .261                        0 7453 A   
.262                        0 741F A   .263                        0 745B A   
.264                        0 74E0 A   .265                        0 74D1 A   
.266                        0 74D8 A   .267                        0 749C A   
.268                        0 74CA A   .269                        0 74A4 A   
.26A                        0 74E0 A   .26B                        0 7502 A   
.26C                        0 74FA A   .26D                        0 75A3 A   
.26E                        0 7594 A   .26F                        0 759B A   
.27                         0 386C A   .270                        0 755F A   
.271                        0 75A3 A   .272                        0 75FC A   
.273                        0 75ED A   .274                        0 75F4 A   
.275                        0 75C0 A   .276                        0 75FC A   
.277                        0 7911 A   .278                        0 76A1 A   
.279                        0 7842 A   .27A                        0 7833 A   
.27B                        0 783A A   .27C                        0 780B A   
.27D                        0 7842 A   .27E                        0 79B2 A   
.27F                        0 791C A   .28                         0 386C A   
.280                        0 799E A   .281                        0 798F A   
.282                        0 7996 A   .283                        0 796F A   
.284                        0 799E A   .285                        0 79F4 A   
.286                        0 79E6 A   .287                        0 79ED A   
.288                        0 79CA A   .289                        0 79E6 A   
.28A                        0 79DE A   .28B                        0 79F4 A   
.28C                        0 7C6D A   .28D                        0 7C57 A   
.28E                        0 7B53 A   .28F                        0 7B68 A   
.29                         0 3881 A   .290                        0 7B5A A   
.291                        0 7C50 A   .292                        0 7C40 A   
.293                        0 7B71 A   .294                        0 7BA0 A   
.295                        0 7B7F A   .296                        0 7B78 A   
.297                        0 7C3E A   .298                        0 7C3E A   
.299                        0 7BA9 A   .29A                        0 7BCD A   
.29B                        0 7BC7 A   .29C                        0 7C39 A   
.29D                        0 7C2A A   .29E                        0 7C31 A   
.29F                        0 7BE0 A   .2A                         0 3881 A   
.2A0                        0 7C12 A   .2A1                        0 7BFF A   
.2A2                        0 7C23 A   .2A3                        0 7C39 A   
.2A4                        0 7C50 A   .2A5                        0 7C6D A   
.2B                         0 3896 A   .2C                         0 3896 A   
.2D                         0 38AB A   .2E                         0 38BA A   
.2F                         0 38D8 A   .3                          0 3A6E A   
.30                         0 38E6 A   .31                         0 38F4 A   
.32                         0 3902 A   .33                         0 397B A   
.34                         0 39C9 A   .36                         0 39BD A   
.37                         0 3980 A   .38                         0 3985 A   
.39                         0 39A3 A   .3A                         0 39CC A   
.3B                         0 3A00 A   .3C                         0 3A1C A   
.3D                         0 3A60 A   .3F                         0 3A54 A   
.4                          0 3648 A   .40                         0 3A21 A   
.41                         0 3A30 A   .42                         0 3A41 A   
.43                         0 3ABB A   .44                         0 3A81 A   
.45                         0 3AED A   .46                         0 3AE9 A   
.47                         0 3CC0 A   .48                         0 3B7B A   
.49                         0 3BED A   .4B                         0 3BDD A   
.4C                         0 3BBB A   .4D                         0 3BC3 A   
.4E                         0 3BCB A   .4F                         0 3BD3 A   
.5                          0 36A3 A   .50                         0 3CAA A   
.51                         0 3C99 A   .52                         0 3CA0 A   
.53                         0 3BF5 A   .54                         0 3C72 A   
.55                         0 3C16 A   .56                         0 3C99 A   
.57                         0 3CAA A   .58                         0 3CC0 A   
.59                         0 3CB3 A   .5A                         0 3D10 A   
.5B                         0 3D01 A   .5C                         0 3D08 A   
.5D                         0 3CD0 A   .5E                         0 3D10 A   
.5F                         0 3D95 A   .60                         0 3D86 A   
.61                         0 3D8D A   .62                         0 3D4E A   
.63                         0 3D95 A   .64                         0 3DDC A   
.65                         0 3DCD A   .66                         0 3DD4 A   
.67                         0 3D9C A   .68                         0 3DDC A   
.69                         0 3DF7 A   .6A                         0 3DF2 A   
.6B                         0 3DFA A   .6C                         0 3E51 A   
.6D                         0 3E42 A   .6E                         0 3E49 A   
.6F                         0 3E11 A   .7                          0 367E A   
.70                         0 3E51 A   .71                         0 3F51 A   
.72                         0 3E90 A   .73                         0 3ECC A   
.74                         0 3EA6 A   .75                         0 3F51 A   
.76                         0 3EF7 A   .77                         0 3ED3 A   
.78                         0 3F51 A   .79                         0 408E A   
.7A                         0 4080 A   .7B                         0 40B0 A   
.7C                         0 40A1 A   .7D                         0 40A8 A   
.7E                         0 4095 A   .7F                         0 40B0 A   
.8                          0 365A A   .80                         0 40DC A   
.81                         0 40CE A   .82                         0 4141 A   
.84                         0 4132 A   .85                         0 40F4 A   
.86                         0 4108 A   .87                         0 411C A   
.88                         0 420F A   .89                         0 41BF A   
.8A                         0 41B8 A   .8B                         0 41B1 A   
.8C                         0 41A9 A   .8D                         0 41E8 A   
.8E                         0 41D3 A   .8F                         0 41FC A   
.9                          0 3666 A   .90                         0 4271 A   
.91                         0 426D A   .92                         0 435C A   
.93                         0 42A4 A   .94                         0 4394 A   
.95                         0 4390 A   .96                         0 43E6 A   
.97                         0 43E2 A   .98                         0 4410 A   
.99                         0 440C A   .9A                         0 44A8 A   
.9B                         0 443A A   .9C                         0 44CC A   
.9D                         0 45F4 A   .9E                         0 45E5 A   
.9F                         0 45EC A   .A                          0 3666 A   
.A0                         0 45A9 A   .A1                         0 45F4 A   
.A2                         0 467F A   .A3                         0 4670 A   
.A4                         0 4677 A   .A5                         0 4646 A   
.A6                         0 467F A   .A7                         0 479F A   
.A8                         0 478E A   .A9                         0 4795 A   
.AA                         0 46ED A   .AB                         0 474C A   
.AC                         0 46F6 A   .AD                         0 478E A   
.AE                         0 479F A   .AF                         0 4854 A   
.B                          0 3666 A   .B0                         0 4845 A   
.B1                         0 484C A   .B2                         0 47D7 A   
.B3                         0 4818 A   .B4                         0 47E0 A   
.B5                         0 4845 A   .B6                         0 4854 A   
.B7                         0 486A A   .B8                         0 4866 A   
.B9                         0 4876 A   .BA                         0 4872 A   
.BB                         0 48A0 A   .BC                         0 489C A   
.BD                         0 48DD A   .BE                         0 48CC A   
.BF                         0 48EE A   .C                          0 3666 A   
.C0                         0 48E7 A   .C1                         0 48FF A   
.C2                         0 48F8 A   .C3                         0 490E A   
.C4                         0 4909 A   .C5                         0 4B85 A   
.C6                         0 4935 A   .C7                         0 49BF A   
.C8                         0 498A A   .C9                         0 4978 A   
.CA                         0 4966 A   .CB                         0 495F A   
.CC                         0 4958 A   .CD                         0 4B82 A   
.CE                         0 4AA4 A   .CF                         0 49C8 A   
.D                          0 3666 A   .D0                         0 4AA1 A   
.D1                         0 4A8E A   .D2                         0 4A95 A   
.D3                         0 49D3 A   .D4                         0 4A33 A   
.D5                         0 49F1 A   .D6                         0 49EA A   
.D7                         0 4A8E A   .D8                         0 4AA1 A   
.D9                         0 4B82 A   .DA                         0 4B82 A   
.DB                         0 4B6F A   .DC                         0 4B76 A   
.DD                         0 4AAF A   .DE                         0 4B08 A   
.DF                         0 4AC6 A   .E                          0 3666 A   
.E0                         0 4ABF A   .E1                         0 4B63 A   
.E2                         0 4B6F A   .E3                         0 4B6D A   
.E4                         0 4B82 A   .E5                         0 4F5A A   
.E6                         0 4F5A A   .E8                         0 4F48 A   
.E9                         0 4BB7 A   .EA                         0 4BB7 A   
.EB                         0 4C49 A   .EC                         0 4BF4 A   
.ED                         0 4BE2 A   .EE                         0 4BD0 A   
.EF                         0 4BC9 A   .F                          0 3666 A   
.F0                         0 4BC0 A   .F1                         0 4D6A A   
.F2                         0 4CDC A   .F3                         0 4C52 A   
.F4                         0 4CD9 A   .F5                         0 4CC8 A   
.F6                         0 4CCF A   .F7                         0 4C5C A   
.F8                         0 4CA0 A   .F9                         0 4C7A A   
.FA                         0 4C73 A   .FB                         0 4CC8 A   
.FC                         0 4CD9 A   .FD                         0 4D6A A   
.FE                         0 4D6A A   .FF                         0 4D57 A   
_biosfn_alternate_prtsc     0 6A86 A   _biosfn_enable_video_refre+ 0 6B61 A   
_biosfn_get_cursor_pos      0 4360 A   _biosfn_get_font_info       0 68AC A   
_biosfn_load_gfx_8_14_char+ 0 68A9 A   _biosfn_load_gfx_8_16_char+ 0 68AB A   
_biosfn_load_gfx_8_8_chars  0 68A7 A   _biosfn_load_gfx_8_8_dd_ch+ 0 68AA A   
_biosfn_load_gfx_user_char+ 0 68A8 A   _biosfn_load_text_8_14_pat  0 66E0 A   
_biosfn_load_text_8_16_pat  0 6816 A   _biosfn_load_text_8_8_pat   0 6777 A   
_biosfn_load_text_user_pat  0 6644 A   _biosfn_perform_gray_scale+ 0 639D A   
_biosfn_read_char_attr      0 4F5E A   _biosfn_read_pixel          0 5BA1 A   
_biosfn_read_state_info     0 6C6E A   _biosfn_read_video_state_s+ 0 6DED A   
_biosfn_read_video_state_s+ 0 6DA6 A   _biosfn_restore_video_stat+ 0 73DB A   
_biosfn_save_video_state    0 6E11 A   _biosfn_scroll              0 4858 A   
_biosfn_set_active_page     0 43D5 A   _biosfn_set_cursor_pos      0 4260 A   
_biosfn_set_cursor_shape    0 4145 A   _biosfn_set_video_mode      0 3ABD A   
_biosfn_switch_video_inter+ 0 6B60 A   _biosfn_write_char_attr     0 54A3 A   
_biosfn_write_char_only     0 5697 A   _biosfn_write_pixel         0 5905 A   
_biosfn_write_string        0 6B62 A   _biosfn_write_teletype      0 5DA7 A   
_ccrtc_1024x768x16          0 7F0F A E _ccrtc_1024x768x24          0 7F63 A E 
_ccrtc_1024x768x8           0 7EBB A E _ccrtc_1280x1024x16         0 800B A E 
_ccrtc_1280x1024x8          0 7FB7 A E _ccrtc_1600x1200x8          0 805F A E 
_ccrtc_640x480x16           0 7D17 A E _ccrtc_640x480x24           0 7D6B A E 
_ccrtc_640x480x8            0 7CC3 A E _ccrtc_800x600x16           0 7E13 A E 
_ccrtc_800x600x24           0 7E67 A E _ccrtc_800x600x8            0 7DBF A E 
_ccrtc_vga                  0 7C7D A E _cgraph_svgacolor           0 7C85 A E 
_cgraph_vga                 0 7C75 A E _cirrus_id_table            0 8263 A E 
_cirrus_modes               0 808F A E _cirrus_vesa_modelist       0 8269 A E 
_cseq_1024x768x16           0 7EEB A E _cseq_1024x768x24           0 7F3F A E 
_cseq_1024x768x8            0 7E97 A E _cseq_1280x1024x16          0 7FE7 A E 
_cseq_1280x1024x8           0 7F93 A E _cseq_1600x1200x8           0 803B A E 
_cseq_640x480x16            0 7CF3 A E _cseq_640x480x24            0 7D47 A E 
_cseq_640x480x8             0 7C9F A E _cseq_800x600x16            0 7DEF A E 
_cseq_800x600x24            0 7E43 A E _cseq_800x600x8             0 7D9B A E 
_cseq_vga                   0 7C71 A E _dac_regs                   0 026C A   
_display_info               0 35F6 A   _display_splash_screen      0 35F5 A   
_display_string             0 3614 A   _find_vga_entry             0 79B9 A   
_get_SS                     0 7B31 A E _get_font_access            0 64A4 A   
_inb                        0 7AFB A E _int10_func                 0 363B A   
_inw                        0 7B06 A E _line_to_vpti               0 025C A   
_memcpyb                    0 7A45 A   _memcpyw                    0 7A75 A   
_memsetb                    0 79FB A   _memsetw                    0 7A20 A   
_outb                       0 7B11 A E _outw                       0 7B21 A E 
_palette0                   0 09F0 A   _palette1                   0 0AB0 A   
_palette2                   0 0B70 A   _palette3                   0 0C30 A   
_printf                     0 7B34 A E _read_byte                  0 7AA5 A   
_read_word                  0 7AB8 A   _release_font_access        0 64C7 A   
_set_scan_lines             0 64FB A   _static_functionality       0 0F30 A   
_vga_modes                  0 01DC A   _vgafont14                  0 1740 A   
_vgafont14alt               0 3540 A   _vgafont16                  0 2540 A   
_vgafont16alt               0 3541 A   _vgafont8                   0 0F40 A   
_vgamem_copy_cga            0 4691 A   _vgamem_copy_pl4            0 4544 A   
_vgamem_fill_cga            0 47A3 A   _vgamem_fill_pl4            0 4606 A   
_video_param_table          0 0270 A   _video_save_pointer_table   0 35D9 A   
_write_byte                 0 7ACB A   _write_gfx_char_cga         0 51CC A   
_write_gfx_char_lin         0 53CF A   _write_gfx_char_pl4         0 5059 A   
_write_word                 0 7AE3 A   biosfn_enable_cursor_emula+ 0 6B3E A   
biosfn_enable_default_pale+ 0 6ADA A   biosfn_enable_grayscale_su+ 0 6B1A A   
biosfn_enable_video_addres+ 0 6AFC A   biosfn_get_all_palette_reg  0 6242 A   
biosfn_get_ega_info         0 6A63 A   biosfn_get_single_palette_+ 0 6210 A   
biosfn_get_video_mode       0 610D A   biosfn_group_0B             0 588D A   
biosfn_group_10             0 6134 A   biosfn_group_1A             0 6C3B A   
biosfn_read_all_dac_reg     0 6322 A   biosfn_read_display_code    0 6C44 A   
biosfn_read_overscan_borde+ 0 6234 A   biosfn_read_pel_mask        0 6355 A   
biosfn_read_single_dac_reg  0 6307 A   biosfn_read_video_dac_stat+ 0 6360 A   
biosfn_select_vert_res      0 6A87 A   biosfn_select_video_dac_co+ 0 62C4 A   
biosfn_set_all_dac_reg      0 629C A   biosfn_set_all_palette_reg  0 61BD A   
biosfn_set_border_color     0 5898 A   biosfn_set_display_code     0 6C59 A   
biosfn_set_overscan_border+ 0 61B5 A   biosfn_set_palette          0 58D7 A   
biosfn_set_pel_mask         0 634A A   biosfn_set_single_dac_reg   0 6283 A   
biosfn_set_single_palette_+ 0 619B A   biosfn_set_text_block_spec+ 0 6809 A   
biosfn_toggle_intensity     0 61EA A   c80h_1                      0 84A8 A   
c80h_2                      0 84B8 A   c85h2                       0 84F4 A   
c85h3                       0 84FC A   cgm_1                       0 883B A   
cgm_2                       0 8851 A   cgm_3                       0 8852 A   
cgm_4                       0 884C A   cirrus_check                0 8362 A   
cirrus_clear_vram           0 89A5 A   cirrus_clear_vram_1         0 89B6 A   
cirrus_display_info         0 834D A   cirrus_enable_16k_granular+ 0 847E A   
cirrus_extbios              0 83AC A   cirrus_extbios_80h          0 849C A   
cirrus_extbios_81h          0 84C2 A   cirrus_extbios_82h          0 84C6 A   
cirrus_extbios_85h          0 84D7 A   cirrus_extbios_9Ah          0 84FF A   
cirrus_extbios_A0h          0 8506 A   cirrus_extbios_A0h_callbac+ 0 851C A   
cirrus_extbios_A1h          0 851F A   cirrus_extbios_A2h          0 8523 A   
cirrus_extbios_AEh          0 8526 A   cirrus_extbios_handlers     0 89DA A   
cirrus_extbios_unimplement+ 0 8529 A   cirrus_get_bpp_bytes        0 88AA A   
cirrus_get_bpp_bytes_1      0 88BB A   cirrus_get_bpp_bytes_2      0 88C3 A   
cirrus_get_crtc             0 8823 A   cirrus_get_lfb_addr         0 8853 A   
cirrus_get_lfb_addr_3       0 8863 A   cirrus_get_lfb_addr_4       0 887A A   
cirrus_get_lfb_addr_5       0 8876 A   cirrus_get_lfb_addr_6       0 888A A   
cirrus_get_line_offset      0 88E1 A   cirrus_get_line_offset_ent+ 0 8903 A   
cirrus_get_modeentry        0 8836 A   cirrus_get_modeentry_nomas+ 0 8838 A   
cirrus_get_start_addr       0 896E A   cirrus_init                 0 8316 A   
cirrus_installed            0 82A9 A   cirrus_int10_handler        0 8372 A   
cirrus_msgnotinstalled      0 835C A   cirrus_not_installed        0 82CF A   
cirrus_pci_read             0 8891 A   cirrus_return               0 8388 A   
cirrus_set_line_offset      0 88C5 A   cirrus_set_start_addr       0 892D A   
cirrus_set_video_mode       0 838B A   cirrus_set_video_mode_exte+ 0 83E2 A   
cirrus_set_video_mode_exte+ 0 83F2 A   cirrus_switch_mode          0 8426 A   
cirrus_switch_mode_setregs  0 848E A   cirrus_unhandled            0 8383 A   
cirrus_vesa                 0 83C7 A   cirrus_vesa_00h             0 852A A   
cirrus_vesa_01h             0 859C A   cirrus_vesa_01h_1           0 85AC A   
cirrus_vesa_01h_3           0 8612 A   cirrus_vesa_01h_4           0 864C A   
cirrus_vesa_01h_5           0 866F A   cirrus_vesa_01h_6           0 866E A   
cirrus_vesa_02h             0 8670 A   cirrus_vesa_02h_1           0 8691 A   
cirrus_vesa_02h_2           0 8688 A   cirrus_vesa_02h_3           0 86A2 A   
cirrus_vesa_02h_4           0 86AF A   cirrus_vesa_02h_legacy      0 868B A   
cirrus_vesa_03h             0 86C2 A   cirrus_vesa_03h_1           0 86DB A   
cirrus_vesa_05h             0 86E4 A   cirrus_vesa_05h_1           0 86F3 A   
cirrus_vesa_05h_farentry    0 86E0 A   cirrus_vesa_05h_getmempage  0 870A A   
cirrus_vesa_05h_setmempage  0 86F6 A   cirrus_vesa_06h             0 871C A   
cirrus_vesa_06h_1           0 872E A   cirrus_vesa_06h_2           0 8739 A   
cirrus_vesa_06h_3           0 873C A   cirrus_vesa_07h             0 875F A   
cirrus_vesa_07h_1           0 876F A   cirrus_vesa_07h_2           0 879C A   
cirrus_vesa_07h_3           0 8788 A   cirrus_vesa_10h             0 87C9 A   
cirrus_vesa_10h_01          0 87DB A   cirrus_vesa_10h_02          0 87EC A   
cirrus_vesa_10h_done        0 87FE A   cirrus_vesa_10h_unimplemen+ 0 87FB A   
cirrus_vesa_handlers        0 8A3A A   cirrus_vesa_not_handled     0 83DD A   
cirrus_vesa_oemname         0 82F9 A   cirrus_vesa_pmbios_entry    0 8403 A   
cirrus_vesa_pmbios_init     0 8402 A   cirrus_vesa_pmbios_return   0 8423 A   
cirrus_vesa_pmbios_unimple+ 0 8420 A   cirrus_vesa_productname     0 82F9 A   
cirrus_vesa_productrevisio+ 0 8312 A   cirrus_vesa_unimplemented   0 8800 A   
cirrus_vesa_vendorname      0 82F9 A   cirrus_vesamode_to_mode     0 8804 A   
csms_1                      0 848E A   csms_2                      0 849B A   
cv00_1                      0 855C A   cv00_2                      0 858A A   
cvtm_1                      0 880F A   cvtm_2                      0 881C A   
ef                          E 0000 R I get_dac_16_page             0 6390 A   
get_palette_loop            0 624A A   idiv_u                      0 64F6 A   
init_bios_area              0 35A1 A   init_vga_card               0 3542 A   
int10_end                   0 01DA A   int10_group_10_unknown      0 619A A   
int10_normal                0 01CC A   int10_test_0B               0 0168 A   
int10_test_1001             0 613A A   int10_test_1002             0 6140 A   
int10_test_1003             0 6146 A   int10_test_1007             0 614D A   
int10_test_1008             0 6154 A   int10_test_1009             0 615B A   
int10_test_1010             0 6162 A   int10_test_1012             0 6169 A   
int10_test_1013             0 6170 A   int10_test_1015             0 6177 A   
int10_test_1017             0 617E A   int10_test_1018             0 6185 A   
int10_test_1019             0 618C A   int10_test_101A             0 6193 A   
int10_test_101B             0 01BD A   int10_test_1103             0 0172 A   
int10_test_12               0 017C A   int10_test_1A               0 015E A   
int10_test_BL30             0 018B A   int10_test_BL31             0 0195 A   
int10_test_BL32             0 019F A   int10_test_BL33             0 01A9 A   
int10_test_BL34             0 01B3 A   is_text_mode                0 846D A   
memcpyb_end                 0 7A6D A   memcpyw_end                 0 7A9D A   
memsetb_end                 0 7A1A A   memsetw_end                 0 7A3F A   
mode_ega_color              0 6A83 A   msg_vga_init                0 355E A   
no_actl_reg1                0 61B4 A   no_actl_reg2                0 6233 A   
no_cirrus                   0 834C A   offset_found1               0 8912 A   
offset_found2               0 8923 A   offset_loop1                0 8908 A   
offset_loop2                0 8919 A   read_dac_loop               0 6333 A   
set_actl_normal             0 6300 A   set_cga_palette_loop        0 58E4 A   
set_dac_16_page             0 62FA A   set_dac_loop                0 62AD A   
set_dac_page                0 62E7 A   set_intensity_loop          0 58B6 A   
set_low_border              0 58B0 A   set_palette_loop            0 61CC A   
set_retcode                 0 6AD3 A   set_vert_res                0 6AC9 A   
vert_res_200                0 6ABF A   vert_res_350                0 6AB5 A   
vert_res_400                0 6AA9 A   vgabios_copyright           0 005A A   
vgabios_date                0 004A A   vgabios_end                 0 8A6E A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 0129 A   
vgabios_int10_handler       0 0153 A   vgabios_license             0 0086 A   
vgabios_name                0 0022 A   vgabios_pci_data            0 0111 A   
vgabios_start               0 0000 A   vgabios_version             0 003E A   
vgabios_website             0 00BB A   

00000 errors
00000 warnings
